
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014768  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  08014968  08014968  00024968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152f8  080152f8  00030548  2**0
                  CONTENTS
  4 .ARM          00000008  080152f8  080152f8  000252f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015300  08015300  00030548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015300  08015300  00025300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015308  08015308  00025308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000548  20000000  0801530c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015950  20000548  08015854  00030548  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015e98  08015854  00035e98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030548  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ee1e  00000000  00000000  00030576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000095a7  00000000  00000000  0007f394  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b8  00000000  00000000  00088940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd0  00000000  00000000  0008acf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036136  00000000  00000000  0008ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d2b4  00000000  00000000  000c2dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115184  00000000  00000000  000f00b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a46c  00000000  00000000  002052b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  0020f720  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0020f7d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000548 	.word	0x20000548
 800021c:	00000000 	.word	0x00000000
 8000220:	08014950 	.word	0x08014950

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000054c 	.word	0x2000054c
 800023c:	08014950 	.word	0x08014950

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fff2 	bl	8001fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 faf4 	bl	80095ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f008 faca 	bl	800955c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20001340 	.word	0x20001340

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20001340 	.word	0x20001340

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f007 f960 	bl	8008338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f964 	bl	8001370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e12a      	b.n	800134e <HAL_ADC_ConfigChannel+0x272>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d93a      	bls.n	800117e <HAL_ADC_ConfigChannel+0xa2>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001110:	d035      	beq.n	800117e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68d9      	ldr	r1, [r3, #12]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	3b1e      	subs	r3, #30
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	061a      	lsls	r2, r3, #24
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	e035      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	3b1e      	subs	r3, #30
 8001172:	409a      	lsls	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117c:	e022      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6919      	ldr	r1, [r3, #16]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4403      	add	r3, r0
 80011ba:	409a      	lsls	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d824      	bhi.n	8001216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b05      	subs	r3, #5
 80011de:	221f      	movs	r2, #31
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e04c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d824      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b23      	subs	r3, #35	; 0x23
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	e023      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b41      	subs	r3, #65	; 0x41
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10a      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d125      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x22e>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b11      	cmp	r3, #17
 8001308:	d11c      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 8001310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001314:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_ADC_ConfigChannel+0x28c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_ConfigChannel+0x290>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001336:	e002      	b.n	800133e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	10000012 	.word	0x10000012
 8001360:	40012000 	.word	0x40012000
 8001364:	40012300 	.word	0x40012300
 8001368:	2000000c 	.word	0x2000000c
 800136c:	431bde83 	.word	0x431bde83

08001370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <ADC_Init+0x1ec>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a77      	ldr	r2, [pc, #476]	; (800155c <ADC_Init+0x1ec>)
 800137e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001382:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <ADC_Init+0x1ec>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4973      	ldr	r1, [pc, #460]	; (800155c <ADC_Init+0x1ec>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	021a      	lsls	r2, r3, #8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <ADC_Init+0x1f0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e00f      	b.n	800146a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0202 	bic.w	r2, r2, #2
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	005a      	lsls	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	035a      	lsls	r2, r3, #13
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e007      	b.n	80014e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	051a      	lsls	r2, r3, #20
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40012300 	.word	0x40012300
 8001560:	0f000001 	.word	0x0f000001

08001564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0ed      	b.n	8001752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 ffb6 	bl	80084f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0202 	bic.w	r2, r2, #2
 8001596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fd2e 	bl	8000ff8 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c5      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fd08 	bl	8000ff8 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff fd04 	bl	8000ff8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e09f      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0e5      	beq.n	80015ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e9b      	ldrb	r3, [r3, #26]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0220 	bic.w	r2, r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7edb      	ldrb	r3, [r3, #27]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7f1b      	ldrb	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	ea42 0103 	orr.w	r1, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <HAL_CAN_ConfigFilter+0x26>
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b02      	cmp	r3, #2
 800177e:	f040 80c7 	bne.w	8001910 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_CAN_ConfigFilter+0x1d0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d001      	beq.n	8001790 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 800178e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a63      	ldr	r2, [pc, #396]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2201      	movs	r2, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d123      	bne.n	800183e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3248      	adds	r2, #72	; 0x48
 800181e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	3348      	adds	r3, #72	; 0x48
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d122      	bne.n	800188c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3248      	adds	r2, #72	; 0x48
 800186c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	3348      	adds	r3, #72	; 0x48
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001902:	f023 0201 	bic.w	r2, r3, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e006      	b.n	800191e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
  }
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40003400 	.word	0x40003400
 8001930:	40006400 	.word	0x40006400

08001934 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d12e      	bne.n	80019a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fb4a 	bl	8000ff8 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001966:	e012      	b.n	800198e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001968:	f7ff fb46 	bl	8000ff8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e012      	b.n	80019b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e5      	bne.n	8001968 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e006      	b.n	80019b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d002      	beq.n	80019da <HAL_CAN_ActivateNotification+0x1e>
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6959      	ldr	r1, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d07c      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f97d 	bl	8001d6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a70:	e016      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	e00c      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e002      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f983 	bl	8001da6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f95d 	bl	8001d7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001ac4:	e016      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e00c      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e002      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f963 	bl	8001dba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d024      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93d 	bl	8001d92 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b18:	e016      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e00c      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	e002      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f943 	bl	8001dce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f92a 	bl	8001de2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f00c faae 	bl	800e108 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f902 	bl	8001df6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f00c fa9a 	bl	800e144 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8ec 	bl	8001e0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e5 	bl	8001e1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d06c      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03d      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d038      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd6:	2b30      	cmp	r3, #48	; 0x30
 8001cd8:	d017      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x302>
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d804      	bhi.n	8001ce8 <HAL_CAN_IRQHandler+0x2e0>
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d009      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x2ee>
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d00c      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ce6:	e024      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d018      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x316>
 8001cec:	2b60      	cmp	r3, #96	; 0x60
 8001cee:	d01b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x320>
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d00f      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001cf4:	e01d      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfe:	e018      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d08:	e013      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d12:	e00e      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1c:	e009      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d26:	e004      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f868 	bl	8001e32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00
 8001e8c:	05fa0000 	.word	0x05fa0000

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff4c 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fca:	f7ff ff61 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8001fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff ffb1 	bl	8001f3c <NVIC_EncodePriority>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff80 	bl	8001ee8 <__NVIC_SetPriority>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff54 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7fe ffee 	bl	8000ff8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e099      	b.n	800215c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002048:	e00f      	b.n	800206a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204a:	f7fe ffd5 	bl	8000ff8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b05      	cmp	r3, #5
 8002056:	d908      	bls.n	800206a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e078      	b.n	800215c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e8      	bne.n	800204a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_DMA_Init+0x158>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4313      	orrs	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d117      	bne.n	800212e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb09 	bl	8002728 <DMA_CheckFifoParam>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800212a:	2301      	movs	r3, #1
 800212c:	e016      	b.n	800215c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fac0 	bl	80026bc <DMA_CalcBaseAndBitshift>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	223f      	movs	r2, #63	; 0x3f
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e010803f 	.word	0xe010803f

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_DMA_Start_IT+0x26>
 800218a:	2302      	movs	r3, #2
 800218c:	e048      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d137      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa52 	bl	8002660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	223f      	movs	r2, #63	; 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0216 	orr.w	r2, r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7fe fedf 	bl	8000ff8 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7fe fea4 	bl	8000ff8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002358:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_DMA_IRQHandler+0x25c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808e 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8086 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e078      	b.n	8002656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d030      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02b      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e022      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0210 	bic.w	r2, r2, #16
 80025c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d307      	bcc.n	8002632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_DMA_IRQHandler+0x2ca>
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002656:	bf00      	nop
    }
  }
}
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <DMA_CalcBaseAndBitshift+0x60>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d908      	bls.n	80026fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	1d1a      	adds	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58
 80026fa:	e006      	b.n	800270a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08014bbc 	.word	0x08014bbc
 8002724:	fffffc00 	.word	0xfffffc00

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d855      	bhi.n	80027f4 <DMA_CheckFifoParam+0xcc>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f5 	.word	0x080027f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d045      	beq.n	80027f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e042      	b.n	80027f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d13f      	bne.n	80027fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03c      	b.n	80027fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d836      	bhi.n	8002800 <DMA_CheckFifoParam+0xd8>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e02f      	b.n	800280e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e021      	b.n	8002804 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11e      	bne.n	8002808 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01b      	b.n	8002808 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <DMA_CheckFifoParam+0xb4>
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d003      	beq.n	80027e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027da:	e018      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e015      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e00b      	b.n	800280c <DMA_CheckFifoParam+0xe4>
      break;
 80027f4:	bf00      	nop
 80027f6:	e00a      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e008      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e006      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e004      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;   
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
    }
  } 
  
  return status; 
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e175      	b.n	8002b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8164 	bne.w	8002b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00b      	beq.n	800287a <HAL_GPIO_Init+0x5e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286e:	2b11      	cmp	r3, #17
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x100>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80be 	beq.w	8002b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b62      	ldr	r3, [pc, #392]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029be:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d037      	beq.n	8002a5a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x334>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x33c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x22a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x340>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <HAL_GPIO_Init+0x344>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x348>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x34c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a32:	2309      	movs	r3, #9
 8002a34:	e012      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a36:	230a      	movs	r3, #10
 8002a38:	e010      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a6c:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae86 	bls.w	800283c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 f8ea 	bl	8008d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 ff02 	bl	8008a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d104      	bne.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_I2C_Init+0x11c>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	02008000 	.word	0x02008000

08002cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d138      	bne.n	8002d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e032      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d139      	bne.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e033      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2224      	movs	r2, #36	; 0x24
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e52:	f7fe f8d1 	bl	8000ff8 <HAL_GetTick>
 8002e56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e58:	e009      	b.n	8002e6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e5a:	f7fe f8cd 	bl	8000ff8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e68:	d901      	bls.n	8002e6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e022      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7fe f8b6 	bl	8000ff8 <HAL_GetTick>
 8002e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e8e:	e009      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e90:	f7fe f8b2 	bl	8000ff8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9e:	d901      	bls.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e007      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e29b      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8087 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee8:	4b96      	ldr	r3, [pc, #600]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d00c      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef4:	4b93      	ldr	r3, [pc, #588]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d112      	bne.n	8002f26 <HAL_RCC_OscConfig+0x62>
 8002f00:	4b90      	ldr	r3, [pc, #576]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0e:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d06c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x130>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d168      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e275      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x7a>
 8002f30:	4b84      	ldr	r3, [pc, #528]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a83      	ldr	r2, [pc, #524]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e02e      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x9c>
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0xc0>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a72      	ldr	r2, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6b      	ldr	r2, [pc, #428]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f828 	bl	8000ff8 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe f824 	bl	8000ff8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e229      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xe8>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f814 	bl	8000ff8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f810 	bl	8000ff8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e215      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x110>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d069      	beq.n	80030d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x190>
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x17a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1e9      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	493d      	ldr	r1, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	e040      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a38      	ldr	r2, [pc, #224]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd ffc6 	bl	8000ff8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fd ffc2 	bl	8000ff8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1c7      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4929      	ldr	r1, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd ffa2 	bl	8000ff8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd ff9e 	bl	8000ff8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1a3      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d038      	beq.n	8003154 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d019      	beq.n	800311e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fd ff7f 	bl	8000ff8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd ff7b 	bl	8000ff8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e180      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x23a>
 800311c:	e01a      	b.n	8003154 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd ff65 	bl	8000ff8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fd ff61 	bl	8000ff8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d903      	bls.n	8003148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e166      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
 8003144:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a4 	beq.w	80032aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a88      	ldr	r2, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b86      	ldr	r3, [pc, #536]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003196:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7f      	ldr	r2, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fd ff29 	bl	8000ff8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd ff25 	bl	8000ff8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e12a      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031bc:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x31a>
 80031d0:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a6f      	ldr	r2, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	e02d      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x33c>
 80031e6:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a67      	ldr	r2, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x35e>
 8003208:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a61      	ldr	r2, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a58      	ldr	r2, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fd fed9 	bl	8000ff8 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fed5 	bl	8000ff8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0d8      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x386>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fd fec3 	bl	8000ff8 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd febf 	bl	8000ff8 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0c2      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80ae 	beq.w	8003410 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d06d      	beq.n	800339c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d14b      	bne.n	8003360 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd fe90 	bl	8000ff8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd fe8c 	bl	8000ff8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e091      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fe5e 	bl	8000ff8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fe5a 	bl	8000ff8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e05f      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x47c>
 800335e:	e057      	b.n	8003410 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe44 	bl	8000ff8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fe40 	bl	8000ff8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e045      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x4b0>
 8003392:	e03d      	b.n	8003410 <HAL_RCC_OscConfig+0x54c>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_RCC_OscConfig+0x558>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d030      	beq.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d129      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d122      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d119      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10f      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0d0      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	4965      	ldr	r1, [pc, #404]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800348a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d040      	beq.n	8003544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e073      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06b      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fd fd70 	bl	8000ff8 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fd6c 	bl	8000ff8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e053      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	4922      	ldr	r1, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4601      	mov	r1, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x1cc>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1d0>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f005 ffea 	bl	80095ac <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08014bc4 	.word	0x08014bc4
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	20000000 	.word	0x20000000

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	2300      	movs	r3, #0
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360e:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d007      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x32>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d008      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x38>
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 808d 	bne.w	800373e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003626:	60bb      	str	r3, [r7, #8]
      break;
 8003628:	e08c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 800362c:	60bb      	str	r3, [r7, #8]
      break;
 800362e:	e089      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d023      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	ea03 0501 	and.w	r5, r3, r1
 800365c:	ea04 0602 	and.w	r6, r4, r2
 8003660:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 8003662:	fb02 f106 	mul.w	r1, r2, r6
 8003666:	2200      	movs	r2, #0
 8003668:	fb02 f205 	mul.w	r2, r2, r5
 800366c:	440a      	add	r2, r1
 800366e:	493a      	ldr	r1, [pc, #232]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 8003670:	fba5 0101 	umull	r0, r1, r5, r1
 8003674:	1853      	adds	r3, r2, r1
 8003676:	4619      	mov	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f04f 0400 	mov.w	r4, #0
 800367e:	461a      	mov	r2, r3
 8003680:	4623      	mov	r3, r4
 8003682:	f7fc fe35 	bl	80002f0 <__aeabi_uldivmod>
 8003686:	4603      	mov	r3, r0
 8003688:	460c      	mov	r4, r1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e049      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	ea03 0501 	and.w	r5, r3, r1
 80036a4:	ea04 0602 	and.w	r6, r4, r2
 80036a8:	4629      	mov	r1, r5
 80036aa:	4632      	mov	r2, r6
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0154      	lsls	r4, r2, #5
 80036b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	4619      	mov	r1, r3
 80036be:	4622      	mov	r2, r4
 80036c0:	1b49      	subs	r1, r1, r5
 80036c2:	eb62 0206 	sbc.w	r2, r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0194      	lsls	r4, r2, #6
 80036d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	eb64 0402 	sbc.w	r4, r4, r2
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	00e2      	lsls	r2, r4, #3
 80036e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	195b      	adds	r3, r3, r5
 80036f2:	eb44 0406 	adc.w	r4, r4, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	02a2      	lsls	r2, r4, #10
 8003700:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003704:	0299      	lsls	r1, r3, #10
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4618      	mov	r0, r3
 800370c:	4621      	mov	r1, r4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fdea 	bl	80002f0 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	3301      	adds	r3, #1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	60bb      	str	r3, [r7, #8]
      break;
 800373c:	e002      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003744:	68bb      	ldr	r3, [r7, #8]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	017d7840 	.word	0x017d7840

0800375c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000000c 	.word	0x2000000c

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4601      	mov	r1, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08014bd4 	.word	0x08014bd4

0800379c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a0:	f7ff ffdc 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a4:	4601      	mov	r1, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	08014bd4 	.word	0x08014bd4

080037c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	220f      	movs	r2, #15
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetClockConfig+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d012      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003850:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003856:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	4964      	ldr	r1, [pc, #400]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	4959      	ldr	r1, [pc, #356]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a0:	d101      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	494a      	ldr	r1, [pc, #296]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 808b 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a39      	ldr	r2, [pc, #228]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fd fb62 	bl	8000ff8 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fd fb5e 	bl	8000ff8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e38d      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003956:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d035      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	d02e      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d114      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fb26 	bl	8000ff8 <HAL_GetTick>
 80039ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fb22 	bl	8000ff8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e34f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039de:	d111      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ee:	400b      	ands	r3, r1
 80039f0:	4901      	ldr	r1, [pc, #4]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	0ffffcff 	.word	0x0ffffcff
 8003a04:	4bb3      	ldr	r3, [pc, #716]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4ab2      	ldr	r2, [pc, #712]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	4bb0      	ldr	r3, [pc, #704]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	49ad      	ldr	r1, [pc, #692]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a2e:	4ba9      	ldr	r3, [pc, #676]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	4aa7      	ldr	r2, [pc, #668]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a3e:	4ba5      	ldr	r3, [pc, #660]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	49a2      	ldr	r1, [pc, #648]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5c:	4b9d      	ldr	r3, [pc, #628]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6a:	499a      	ldr	r1, [pc, #616]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a7e:	4b95      	ldr	r3, [pc, #596]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8c:	4991      	ldr	r1, [pc, #580]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aa0:	4b8c      	ldr	r3, [pc, #560]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aae:	4989      	ldr	r1, [pc, #548]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ac2:	4b84      	ldr	r3, [pc, #528]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4980      	ldr	r1, [pc, #512]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4978      	ldr	r1, [pc, #480]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b06:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 020c 	bic.w	r2, r3, #12
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	496f      	ldr	r1, [pc, #444]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b28:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	4967      	ldr	r1, [pc, #412]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b4a:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	495e      	ldr	r1, [pc, #376]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	4956      	ldr	r1, [pc, #344]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	4945      	ldr	r1, [pc, #276]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bd2:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	493c      	ldr	r1, [pc, #240]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	4934      	ldr	r1, [pc, #208]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	491b      	ldr	r1, [pc, #108]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c78:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c88:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00f      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	4985      	ldr	r1, [pc, #532]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cec:	4b80      	ldr	r3, [pc, #512]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	497c      	ldr	r1, [pc, #496]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d005      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d12:	f040 80d6 	bne.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d16:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a75      	ldr	r2, [pc, #468]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d22:	f7fd f969 	bl	8000ff8 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d2a:	f7fd f965 	bl	8000ff8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e194      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	019a      	lsls	r2, r3, #6
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	071b      	lsls	r3, r3, #28
 8003d90:	4957      	ldr	r1, [pc, #348]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d129      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc4:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	0f1b      	lsrs	r3, r3, #28
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	019a      	lsls	r2, r3, #6
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	493d      	ldr	r1, [pc, #244]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e06:	f023 021f 	bic.w	r2, r3, #31
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4937      	ldr	r1, [pc, #220]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2a:	0e1b      	lsrs	r3, r3, #24
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e38:	0f1b      	lsrs	r3, r3, #28
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	071b      	lsls	r3, r3, #28
 8003e58:	4925      	ldr	r1, [pc, #148]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	071b      	lsls	r3, r3, #28
 8003e88:	4919      	ldr	r1, [pc, #100]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd f8ac 	bl	8000ff8 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ea4:	f7fd f8a8 	bl	8000ff8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0d7      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 80cd 	bne.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd f88f 	bl	8000ff8 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ede:	f7fd f88b 	bl	8000ff8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	; 0x64
 8003eea:	d903      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ba      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f00:	d0ed      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4944      	ldr	r1, [pc, #272]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	493d      	ldr	r1, [pc, #244]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d022      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f94:	d11d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	4929      	ldr	r1, [pc, #164]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4917      	ldr	r1, [pc, #92]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4911      	ldr	r1, [pc, #68]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fc ffdc 	bl	8000ff8 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fc ffd8 	bl	8000ff8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e007      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d1ef      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e084      	b.n	8004190 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f004 ffcd 	bl	8009040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040c6:	d902      	bls.n	80040ce <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e002      	b.n	80040d4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040dc:	d007      	beq.n	80040ee <HAL_SPI_Init+0x7a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fe:	d903      	bls.n	8004108 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	e002      	b.n	800410e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0204 	and.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	ea42 0103 	orr.w	r1, r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041a6:	2301      	movs	r3, #1
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_SPI_TransmitReceive+0x26>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e1fb      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x41e>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c6:	f7fc ff17 	bl	8000ff8 <HAL_GetTick>
 80041ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041e2:	7efb      	ldrb	r3, [r7, #27]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d00e      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x6e>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d106      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x66>
 80041f8:	7efb      	ldrb	r3, [r7, #27]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004204:	e1cd      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x80>
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800421e:	e1c0      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b04      	cmp	r3, #4
 800422a:	d003      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2205      	movs	r2, #5
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004276:	d802      	bhi.n	800427e <HAL_SPI_TransmitReceive+0xe6>
 8004278:	8a3b      	ldrh	r3, [r7, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d908      	bls.n	8004290 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e007      	b.n	80042a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d007      	beq.n	80042be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c6:	d97c      	bls.n	80043c2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_TransmitReceive+0x13e>
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d169      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fa:	e056      	b.n	80043aa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b01      	cmp	r3, #1
 8004318:	d113      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d11c      	bne.n	800438a <HAL_SPI_TransmitReceive+0x1f2>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d016      	beq.n	800438a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	b292      	uxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800438a:	f7fc fe35 	bl	8000ff8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	429a      	cmp	r2, r3
 8004398:	d807      	bhi.n	80043aa <HAL_SPI_TransmitReceive+0x212>
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d003      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043a8:	e0fb      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1a3      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x164>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d19d      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x164>
 80043c0:	e0df      	b.n	8004582 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x23a>
 80043ca:	8a7b      	ldrh	r3, [r7, #18]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 80cb 	bne.w	8004568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d912      	bls.n	8004402 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b02      	subs	r3, #2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e0b2      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004428:	e09e      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d134      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02f      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	2b01      	cmp	r3, #1
 8004446:	d12c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d912      	bls.n	8004478 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b02      	subs	r3, #2
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004476:	e012      	b.n	800449e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d148      	bne.n	8004542 <HAL_SPI_TransmitReceive+0x3aa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d042      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d923      	bls.n	8004510 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	b292      	uxth	r2, r2
 80044d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b02      	subs	r3, #2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d81f      	bhi.n	800453e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	e016      	b.n	800453e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f103 020c 	add.w	r2, r3, #12
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800453e:	2301      	movs	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004542:	f7fc fd59 	bl	8000ff8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	429a      	cmp	r2, r3
 8004550:	d803      	bhi.n	800455a <HAL_SPI_TransmitReceive+0x3c2>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d102      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x3c8>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004566:	e01c      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af5b 	bne.w	800442a <HAL_SPI_TransmitReceive+0x292>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af54 	bne.w	800442a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fcd0 	bl	8004f2c <SPI_EndRxTxTransaction>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
 800459e:	e000      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80045dc:	2302      	movs	r3, #2
 80045de:	e16c      	b.n	80048ba <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80045f6:	7dbb      	ldrb	r3, [r7, #22]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d00d      	beq.n	8004618 <HAL_SPI_TransmitReceive_DMA+0x58>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d106      	bne.n	8004612 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_TransmitReceive_DMA+0x52>
 800460c:	7dbb      	ldrb	r3, [r7, #22]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004612:	2302      	movs	r3, #2
 8004614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004616:	e14b      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462e:	e13f      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b04      	cmp	r3, #4
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2205      	movs	r2, #5
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800468c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004696:	d908      	bls.n	80046aa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	e06f      	b.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c4:	d126      	bne.n	8004714 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f0:	e010      	b.n	8004714 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004700:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	3301      	adds	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d134      	bne.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800472e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004736:	b29b      	uxth	r3, r3
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d111      	bne.n	8004764 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004756:	b29b      	uxth	r3, r3
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004762:	e012      	b.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004772:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800477a:	b29b      	uxth	r3, r3
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	b29b      	uxth	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b04      	cmp	r3, #4
 8004794:	d108      	bne.n	80047a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	4a49      	ldr	r2, [pc, #292]	; (80048c8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80047a6:	e007      	b.n	80047b8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80047b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	4a45      	ldr	r2, [pc, #276]	; (80048d4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80047be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	2200      	movs	r2, #0
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	4619      	mov	r1, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	461a      	mov	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f7fd fcc1 	bl	8002168 <HAL_DMA_Start_IT>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004804:	e054      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	2200      	movs	r2, #0
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	2200      	movs	r2, #0
 800482c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	2200      	movs	r2, #0
 8004834:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4619      	mov	r1, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	f7fd fc8b 	bl	8002168 <HAL_DMA_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004870:	e01e      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d007      	beq.n	8004890 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0202 	orr.w	r2, r2, #2
 80048ae:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08004c2d 	.word	0x08004c2d
 80048c8:	08004b15 	.word	0x08004b15
 80048cc:	08004c49 	.word	0x08004c49
 80048d0:	08004b9b 	.word	0x08004b9b
 80048d4:	08004c65 	.word	0x08004c65

080048d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	099b      	lsrs	r3, r3, #6
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	099b      	lsrs	r3, r3, #6
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
    return;
 800491a:	e0d8      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_SPI_IRQHandler+0x66>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
    return;
 800493c:	e0c7      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10c      	bne.n	8004964 <HAL_SPI_IRQHandler+0x8c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_SPI_IRQHandler+0x8c>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80b5 	beq.w	8004ace <HAL_SPI_IRQHandler+0x1f6>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80ae 	beq.w	8004ace <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d023      	beq.n	80049c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b03      	cmp	r3, #3
 8004988:	d011      	beq.n	80049ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	e00b      	b.n	80049c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
        return;
 80049c4:	e083      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0c:	f043 0208 	orr.w	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d050      	beq.n	8004acc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_SPI_IRQHandler+0x17e>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d034      	beq.n	8004ac0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0203 	bic.w	r2, r2, #3
 8004a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d011      	beq.n	8004a92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd fc44 	bl	8002308 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd fc2e 	bl	8002308 <HAL_DMA_Abort_IT>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004abe:	e003      	b.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f004 f95f 	bl	8008d84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ac6:	e000      	b.n	8004aca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ac8:	bf00      	nop
    return;
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
  }
}
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08004ca5 	.word	0x08004ca5

08004ad8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b22:	f7fc fa69 	bl	8000ff8 <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d02a      	beq.n	8004b8e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0220 	bic.w	r2, r2, #32
 8004b46:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0203 	bic.w	r2, r2, #3
 8004b56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f98d 	bl	8004e7c <SPI_EndRxTransaction>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f004 f8fc 	bl	8008d84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b8c:	e002      	b.n	8004b94 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ffa2 	bl	8004ad8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fa26 	bl	8000ff8 <HAL_GetTick>
 8004bac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbc:	d030      	beq.n	8004c20 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0220 	bic.w	r2, r2, #32
 8004bcc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	2164      	movs	r1, #100	; 0x64
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f9aa 	bl	8004f2c <SPI_EndRxTxTransaction>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0203 	bic.w	r2, r2, #3
 8004bf8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f004 f8b3 	bl	8008d84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c1e:	e002      	b.n	8004c26 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f004 f8a1 	bl	8008d68 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff56 	bl	8004aec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff52 	bl	8004b00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0203 	bic.w	r2, r2, #3
 8004c80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f004 f874 	bl	8008d84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f004 f85f 	bl	8008d84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	e04c      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d048      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ce8:	f7fc f986 	bl	8000ff8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d902      	bls.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d13d      	bne.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d111      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d004      	beq.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d107      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d10f      	bne.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1a3      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004db0:	e057      	b.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004db8:	d106      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d048      	beq.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dd0:	f7fc f912 	bl	8000ff8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d902      	bls.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d13d      	bne.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d111      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e08:	d004      	beq.n	8004e14 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d107      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2c:	d10f      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e008      	b.n	8004e74 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d19f      	bne.n	8004db2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e90:	d111      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d004      	beq.n	8004ea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d107      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ff04 	bl	8004cce <SPI_WaitFlagStateUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e023      	b.n	8004f24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee4:	d11d      	bne.n	8004f22 <SPI_EndRxTransaction+0xa6>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d004      	beq.n	8004efa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d113      	bne.n	8004f22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff4b 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e000      	b.n	8004f24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ff2c 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e027      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff feaf 	bl	8004cce <SPI_WaitFlagStateUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e014      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff ff05 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e000      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e01d      	b.n	8005006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f005 f904 	bl	800a1ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fc16 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_TIM_Base_Start_IT+0x50>)
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d00b      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x42>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d007      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e01d      	b.n	80050b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f005 f966 	bl	800a35c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fbc0 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 ff42 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_TIM_PWM_Start+0x7c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_PWM_Start+0x2c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIM_PWM_Start+0x80>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_PWM_Start+0x30>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_TIM_PWM_Start+0x32>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <HAL_TIM_PWM_Start+0x84>)
 800510a:	4013      	ands	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b06      	cmp	r3, #6
 8005112:	d00b      	beq.n	800512c <HAL_TIM_PWM_Start+0x70>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d007      	beq.n	800512c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400
 8005140:	00010007 	.word	0x00010007

08005144 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fefe 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_TIM_PWM_Stop+0xa8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_PWM_Stop+0x2c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_TIM_PWM_Stop+0xac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_TIM_PWM_Stop+0x30>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_TIM_PWM_Stop+0x32>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	f241 1311 	movw	r3, #4369	; 0x1111
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_TIM_PWM_Stop+0x66>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	f240 4344 	movw	r3, #1092	; 0x444
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_TIM_PWM_Stop+0x66>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_TIM_PWM_Stop+0x96>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	f240 4344 	movw	r3, #1092	; 0x444
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HAL_TIM_PWM_Stop+0x96>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0202 	mvn.w	r2, #2
 8005220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fad8 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 faca 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fadb 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0204 	mvn.w	r2, #4
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 faae 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 faa0 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fab1 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa84 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa76 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa87 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0210 	mvn.w	r2, #16
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2208      	movs	r2, #8
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa5a 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa4c 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa5d 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0201 	mvn.w	r2, #1
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f003 fd58 	bl	8008e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 ff16 	bl	80061d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d10e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 ff09 	bl	80061e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa0b 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b20      	cmp	r3, #32
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b20      	cmp	r3, #32
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0220 	mvn.w	r2, #32
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fec9 	bl	80061bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e105      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x226>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b14      	cmp	r3, #20
 8005462:	f200 80f0 	bhi.w	8005646 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005647 	.word	0x08005647
 8005474:	08005647 	.word	0x08005647
 8005478:	08005647 	.word	0x08005647
 800547c:	08005501 	.word	0x08005501
 8005480:	08005647 	.word	0x08005647
 8005484:	08005647 	.word	0x08005647
 8005488:	08005647 	.word	0x08005647
 800548c:	08005543 	.word	0x08005543
 8005490:	08005647 	.word	0x08005647
 8005494:	08005647 	.word	0x08005647
 8005498:	08005647 	.word	0x08005647
 800549c:	08005583 	.word	0x08005583
 80054a0:	08005647 	.word	0x08005647
 80054a4:	08005647 	.word	0x08005647
 80054a8:	08005647 	.word	0x08005647
 80054ac:	080055c5 	.word	0x080055c5
 80054b0:	08005647 	.word	0x08005647
 80054b4:	08005647 	.word	0x08005647
 80054b8:	08005647 	.word	0x08005647
 80054bc:	08005605 	.word	0x08005605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa4e 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0204 	bic.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
      break;
 80054fe:	e0a3      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 faa0 	bl	8005a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      break;
 8005540:	e082      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 faf7 	bl	8005b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0208 	orr.w	r2, r2, #8
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0204 	bic.w	r2, r2, #4
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
      break;
 8005580:	e062      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fb4d 	bl	8005c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
      break;
 80055c2:	e041      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb84 	bl	8005cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005602:	e021      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fbb6 	bl	8005d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005646:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop

08005664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e0a6      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x166>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b4f      	ldr	r3, [pc, #316]	; (80057d4 <HAL_TIM_ConfigClockSource+0x170>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d067      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x120>
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d80b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x6c>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d073      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d802      	bhi.n	80056c6 <HAL_TIM_ConfigClockSource+0x62>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d06f      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056c4:	e078      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d06c      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056ca:	2b30      	cmp	r3, #48	; 0x30
 80056cc:	d06a      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056ce:	e073      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d00d      	beq.n	80056f0 <HAL_TIM_ConfigClockSource+0x8c>
 80056d4:	2b70      	cmp	r3, #112	; 0x70
 80056d6:	d804      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x7e>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d033      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xe0>
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d041      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056e0:	e06a      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d066      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x152>
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	d017      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056ee:	e063      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6899      	ldr	r1, [r3, #8]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f000 fc0a 	bl	8005f18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005712:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
      break;
 800571c:	e04c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f000 fbf3 	bl	8005f18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e039      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	461a      	mov	r2, r3
 8005752:	f000 fb67 	bl	8005e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2150      	movs	r1, #80	; 0x50
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fbc0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 8005762:	e029      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	461a      	mov	r2, r3
 8005772:	f000 fb86 	bl	8005e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2160      	movs	r1, #96	; 0x60
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fbb0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 8005782:	e019      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	461a      	mov	r2, r3
 8005792:	f000 fb47 	bl	8005e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fba0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 80057a2:	e009      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fb97 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e000      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fffeff88 	.word	0xfffeff88

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a40      	ldr	r2, [pc, #256]	; (800593c <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3c      	ldr	r2, [pc, #240]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3b      	ldr	r2, [pc, #236]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3a      	ldr	r2, [pc, #232]	; (800594c <TIM_Base_SetConfig+0x124>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2f      	ldr	r2, [pc, #188]	; (800593c <TIM_Base_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_Base_SetConfig+0x124>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <TIM_Base_SetConfig+0x128>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a27      	ldr	r2, [pc, #156]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <TIM_Base_SetConfig+0x130>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <TIM_Base_SetConfig+0x134>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a24      	ldr	r2, [pc, #144]	; (8005960 <TIM_Base_SetConfig+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a23      	ldr	r2, [pc, #140]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0c      	ldr	r2, [pc, #48]	; (800594c <TIM_Base_SetConfig+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800
 800595c:	40001800 	.word	0x40001800
 8005960:	40001c00 	.word	0x40001c00
 8005964:	40002000 	.word	0x40002000

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <TIM_OC1_SetConfig+0xd8>)
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0302 	bic.w	r3, r3, #2
 80059b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC1_SetConfig+0x64>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC1_SetConfig+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d111      	bne.n	8005a1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	fffeff8f 	.word	0xfffeff8f
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0210 	bic.w	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <TIM_OC2_SetConfig+0xe4>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0320 	bic.w	r3, r3, #32
 8005a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x68>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC2_SetConfig+0x94>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d113      	bne.n	8005b08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	feff8fff 	.word	0xfeff8fff
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400

08005b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <TIM_OC3_SetConfig+0xe0>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC3_SetConfig+0x66>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10d      	bne.n	8005bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC3_SetConfig+0x92>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d113      	bne.n	8005bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	fffeff8f 	.word	0xfffeff8f
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <TIM_OC4_SetConfig+0xa4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_OC4_SetConfig+0xa8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x68>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC4_SetConfig+0xac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	feff8fff 	.word	0xfeff8fff
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <TIM_OC5_SetConfig+0x98>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <TIM_OC5_SetConfig+0x9c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC5_SetConfig+0x5e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <TIM_OC5_SetConfig+0xa0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d109      	bne.n	8005d4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	fffeff8f 	.word	0xfffeff8f
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <TIM_OC6_SetConfig+0x9c>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_OC6_SetConfig+0xa0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC6_SetConfig+0x60>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <TIM_OC6_SetConfig+0xa4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	feff8fff 	.word	0xfeff8fff
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0201 	bic.w	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 030a 	bic.w	r3, r3, #10
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f043 0307 	orr.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e06d      	b.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a30      	ldr	r2, [pc, #192]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2f      	ldr	r2, [pc, #188]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d10c      	bne.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40001800 	.word	0x40001800

080060c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e065      	b.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d115      	bne.n	8006196 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	051b      	lsls	r3, r3, #20
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e040      	b.n	800628c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f004 fb04 	bl	800a828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 faa4 	bl	8006784 <UART_SetConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e022      	b.n	800628c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fd42 	bl	8006cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fdc9 	bl	8006e1c <UART_CheckIdleState>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d164      	bne.n	8006374 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Transmit_DMA+0x22>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e05d      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit_DMA+0x34>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e056      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2221      	movs	r2, #33	; 0x21
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02a      	beq.n	8006350 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fe:	4a20      	ldr	r2, [pc, #128]	; (8006380 <HAL_UART_Transmit_DMA+0xec>)
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006306:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_UART_Transmit_DMA+0xf0>)
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_UART_Transmit_DMA+0xf4>)
 8006310:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006316:	2200      	movs	r2, #0
 8006318:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	4619      	mov	r1, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3328      	adds	r3, #40	; 0x28
 800632a:	461a      	mov	r2, r3
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f7fb ff1b 	bl	8002168 <HAL_DMA_Start_IT>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2210      	movs	r2, #16
 800633c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e012      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800636e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	08007007 	.word	0x08007007
 8006384:	08007057 	.word	0x08007057
 8006388:	080070f3 	.word	0x080070f3

0800638c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d16c      	bne.n	800647c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Receive_DMA+0x22>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e065      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Receive_DMA+0x34>
 80063bc:	2302      	movs	r3, #2
 80063be:	e05e      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2222      	movs	r2, #34	; 0x22
 80063e0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02a      	beq.n	8006440 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <HAL_UART_Receive_DMA+0xfc>)
 80063f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f6:	4a25      	ldr	r2, [pc, #148]	; (800648c <HAL_UART_Receive_DMA+0x100>)
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	4a24      	ldr	r2, [pc, #144]	; (8006490 <HAL_UART_Receive_DMA+0x104>)
 8006400:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	2200      	movs	r2, #0
 8006408:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	4619      	mov	r1, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	461a      	mov	r2, r3
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	f7fb fea3 	bl	8002168 <HAL_DMA_Start_IT>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2210      	movs	r2, #16
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e01e      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006456:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	08007073 	.word	0x08007073
 800648c:	080070d7 	.word	0x080070d7
 8006490:	080070f3 	.word	0x080070f3

08006494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ba:	4013      	ands	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00e      	beq.n	80064ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8114 	beq.w	800670a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      }
      return;
 80064ea:	e10e      	b.n	800670a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80d6 	beq.w	80066a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80cb 	beq.w	80066a0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00e      	beq.n	8006532 <HAL_UART_IRQHandler+0x9e>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <HAL_UART_IRQHandler+0xc6>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2202      	movs	r2, #2
 800654c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_UART_IRQHandler+0xee>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2204      	movs	r2, #4
 8006574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ac:	f043 0208 	orr.w	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <HAL_UART_IRQHandler+0x14a>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8093 	beq.w	800670e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006610:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d004      	beq.n	800662a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	d031      	beq.n	800668e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fccb 	bl	8006fc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d123      	bne.n	8006686 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665a:	4a30      	ldr	r2, [pc, #192]	; (800671c <HAL_UART_IRQHandler+0x288>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	4618      	mov	r0, r3
 8006664:	f7fb fe50 	bl	8002308 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00e      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f86c 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00a      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f868 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e006      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f864 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800669a:	e038      	b.n	800670e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e036      	b.n	800670e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <HAL_UART_IRQHandler+0x232>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f856 	bl	8006770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c4:	e026      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
    }
    return;
 80066ea:	e012      	b.n	8006712 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <HAL_UART_IRQHandler+0x280>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fd48 	bl	8007196 <UART_EndTransmit_IT>
    return;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
      return;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
    return;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
    return;
 8006712:	bf00      	nop
  }

}
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	0800716b 	.word	0x0800716b

08006720 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4bb1      	ldr	r3, [pc, #708]	; (8006a78 <UART_SetConfig+0x2f4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	6939      	ldr	r1, [r7, #16]
 80067bc:	430b      	orrs	r3, r1
 80067be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a9f      	ldr	r2, [pc, #636]	; (8006a7c <UART_SetConfig+0x2f8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d121      	bne.n	8006848 <UART_SetConfig+0xc4>
 8006804:	4b9e      	ldr	r3, [pc, #632]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d816      	bhi.n	8006840 <UART_SetConfig+0xbc>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x94>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006829 	.word	0x08006829
 800681c:	08006835 	.word	0x08006835
 8006820:	0800682f 	.word	0x0800682f
 8006824:	0800683b 	.word	0x0800683b
 8006828:	2301      	movs	r3, #1
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e151      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e14e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e14b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e148      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	bf00      	nop
 8006846:	e144      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a8d      	ldr	r2, [pc, #564]	; (8006a84 <UART_SetConfig+0x300>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d134      	bne.n	80068bc <UART_SetConfig+0x138>
 8006852:	4b8b      	ldr	r3, [pc, #556]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d829      	bhi.n	80068b4 <UART_SetConfig+0x130>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0xe4>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080068b5 	.word	0x080068b5
 8006870:	080068b5 	.word	0x080068b5
 8006874:	080068b5 	.word	0x080068b5
 8006878:	080068a9 	.word	0x080068a9
 800687c:	080068b5 	.word	0x080068b5
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068a3 	.word	0x080068a3
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068b5 	.word	0x080068b5
 8006898:	080068af 	.word	0x080068af
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e117      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e114      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e111      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e10e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	bf00      	nop
 80068ba:	e10a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <UART_SetConfig+0x304>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d120      	bne.n	8006908 <UART_SetConfig+0x184>
 80068c6:	4b6e      	ldr	r3, [pc, #440]	; (8006a80 <UART_SetConfig+0x2fc>)
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d00f      	beq.n	80068f4 <UART_SetConfig+0x170>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d802      	bhi.n	80068de <UART_SetConfig+0x15a>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <UART_SetConfig+0x164>
 80068dc:	e010      	b.n	8006900 <UART_SetConfig+0x17c>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d005      	beq.n	80068ee <UART_SetConfig+0x16a>
 80068e2:	2b30      	cmp	r3, #48	; 0x30
 80068e4:	d009      	beq.n	80068fa <UART_SetConfig+0x176>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x17c>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0f1      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e0ee      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0eb      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e0e8      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	bf00      	nop
 8006906:	e0e4      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5f      	ldr	r2, [pc, #380]	; (8006a8c <UART_SetConfig+0x308>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d120      	bne.n	8006954 <UART_SetConfig+0x1d0>
 8006912:	4b5b      	ldr	r3, [pc, #364]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006918:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d00f      	beq.n	8006940 <UART_SetConfig+0x1bc>
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d802      	bhi.n	800692a <UART_SetConfig+0x1a6>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <UART_SetConfig+0x1b0>
 8006928:	e010      	b.n	800694c <UART_SetConfig+0x1c8>
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d005      	beq.n	800693a <UART_SetConfig+0x1b6>
 800692e:	2bc0      	cmp	r3, #192	; 0xc0
 8006930:	d009      	beq.n	8006946 <UART_SetConfig+0x1c2>
 8006932:	e00b      	b.n	800694c <UART_SetConfig+0x1c8>
 8006934:	2300      	movs	r3, #0
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e0cb      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800693a:	2302      	movs	r3, #2
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e0c8      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006940:	2304      	movs	r3, #4
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0c5      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006946:	2308      	movs	r3, #8
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0c2      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800694c:	2310      	movs	r3, #16
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	bf00      	nop
 8006952:	e0be      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a4d      	ldr	r2, [pc, #308]	; (8006a90 <UART_SetConfig+0x30c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d124      	bne.n	80069a8 <UART_SetConfig+0x224>
 800695e:	4b48      	ldr	r3, [pc, #288]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696c:	d012      	beq.n	8006994 <UART_SetConfig+0x210>
 800696e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006972:	d802      	bhi.n	800697a <UART_SetConfig+0x1f6>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <UART_SetConfig+0x204>
 8006978:	e012      	b.n	80069a0 <UART_SetConfig+0x21c>
 800697a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697e:	d006      	beq.n	800698e <UART_SetConfig+0x20a>
 8006980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006984:	d009      	beq.n	800699a <UART_SetConfig+0x216>
 8006986:	e00b      	b.n	80069a0 <UART_SetConfig+0x21c>
 8006988:	2300      	movs	r3, #0
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0a1      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800698e:	2302      	movs	r3, #2
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e09e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006994:	2304      	movs	r3, #4
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e09b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800699a:	2308      	movs	r3, #8
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e098      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069a0:	2310      	movs	r3, #16
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	bf00      	nop
 80069a6:	e094      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <UART_SetConfig+0x310>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d124      	bne.n	80069fc <UART_SetConfig+0x278>
 80069b2:	4b33      	ldr	r3, [pc, #204]	; (8006a80 <UART_SetConfig+0x2fc>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c0:	d012      	beq.n	80069e8 <UART_SetConfig+0x264>
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d802      	bhi.n	80069ce <UART_SetConfig+0x24a>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <UART_SetConfig+0x258>
 80069cc:	e012      	b.n	80069f4 <UART_SetConfig+0x270>
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d006      	beq.n	80069e2 <UART_SetConfig+0x25e>
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d8:	d009      	beq.n	80069ee <UART_SetConfig+0x26a>
 80069da:	e00b      	b.n	80069f4 <UART_SetConfig+0x270>
 80069dc:	2301      	movs	r3, #1
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e077      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069e2:	2302      	movs	r3, #2
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e074      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069e8:	2304      	movs	r3, #4
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e071      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069ee:	2308      	movs	r3, #8
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e06e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069f4:	2310      	movs	r3, #16
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	bf00      	nop
 80069fa:	e06a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <UART_SetConfig+0x314>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d124      	bne.n	8006a50 <UART_SetConfig+0x2cc>
 8006a06:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d012      	beq.n	8006a3c <UART_SetConfig+0x2b8>
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1a:	d802      	bhi.n	8006a22 <UART_SetConfig+0x29e>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <UART_SetConfig+0x2ac>
 8006a20:	e012      	b.n	8006a48 <UART_SetConfig+0x2c4>
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d006      	beq.n	8006a36 <UART_SetConfig+0x2b2>
 8006a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2c:	d009      	beq.n	8006a42 <UART_SetConfig+0x2be>
 8006a2e:	e00b      	b.n	8006a48 <UART_SetConfig+0x2c4>
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e04d      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e04a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e047      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e044      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	bf00      	nop
 8006a4e:	e040      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <UART_SetConfig+0x318>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d139      	bne.n	8006ace <UART_SetConfig+0x34a>
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a68:	d027      	beq.n	8006aba <UART_SetConfig+0x336>
 8006a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a6e:	d817      	bhi.n	8006aa0 <UART_SetConfig+0x31c>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01c      	beq.n	8006aae <UART_SetConfig+0x32a>
 8006a74:	e027      	b.n	8006ac6 <UART_SetConfig+0x342>
 8006a76:	bf00      	nop
 8006a78:	efff69f3 	.word	0xefff69f3
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40004400 	.word	0x40004400
 8006a88:	40004800 	.word	0x40004800
 8006a8c:	40004c00 	.word	0x40004c00
 8006a90:	40005000 	.word	0x40005000
 8006a94:	40011400 	.word	0x40011400
 8006a98:	40007800 	.word	0x40007800
 8006a9c:	40007c00 	.word	0x40007c00
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa4:	d006      	beq.n	8006ab4 <UART_SetConfig+0x330>
 8006aa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aaa:	d009      	beq.n	8006ac0 <UART_SetConfig+0x33c>
 8006aac:	e00b      	b.n	8006ac6 <UART_SetConfig+0x342>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e00e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e00b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006aba:	2304      	movs	r3, #4
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e008      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	bf00      	nop
 8006acc:	e001      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d17f      	bne.n	8006bdc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d85c      	bhi.n	8006b9c <UART_SetConfig+0x418>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x364>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b2d 	.word	0x08006b2d
 8006af0:	08006b4d 	.word	0x08006b4d
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b65 	.word	0x08006b65
 8006afc:	08006b9d 	.word	0x08006b9d
 8006b00:	08006b9d 	.word	0x08006b9d
 8006b04:	08006b9d 	.word	0x08006b9d
 8006b08:	08006b85 	.word	0x08006b85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fc fe32 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8006b10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	005a      	lsls	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	61bb      	str	r3, [r7, #24]
        break;
 8006b2a:	e03a      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fc fe36 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8006b30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	005a      	lsls	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	61bb      	str	r3, [r7, #24]
        break;
 8006b4a:	e02a      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085a      	lsrs	r2, r3, #1
 8006b52:	4b5f      	ldr	r3, [pc, #380]	; (8006cd0 <UART_SetConfig+0x54c>)
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6852      	ldr	r2, [r2, #4]
 8006b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	61bb      	str	r3, [r7, #24]
        break;
 8006b62:	e01e      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b64:	f7fc fd48 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8006b68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	005a      	lsls	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	61bb      	str	r3, [r7, #24]
        break;
 8006b82:	e00e      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	61bb      	str	r3, [r7, #24]
        break;
 8006b9a:	e002      	b.n	8006ba2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d916      	bls.n	8006bd6 <UART_SetConfig+0x452>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d212      	bcs.n	8006bd6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f023 030f 	bic.w	r3, r3, #15
 8006bb8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	897a      	ldrh	r2, [r7, #10]
 8006bd2:	60da      	str	r2, [r3, #12]
 8006bd4:	e070      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e06d      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006bdc:	7ffb      	ldrb	r3, [r7, #31]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d859      	bhi.n	8006c96 <UART_SetConfig+0x512>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x464>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c49 	.word	0x08006c49
 8006bf4:	08006c97 	.word	0x08006c97
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006c97 	.word	0x08006c97
 8006c00:	08006c97 	.word	0x08006c97
 8006c04:	08006c97 	.word	0x08006c97
 8006c08:	08006c7f 	.word	0x08006c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fc fdb2 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8006c10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085a      	lsrs	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	61bb      	str	r3, [r7, #24]
        break;
 8006c28:	e038      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2a:	f7fc fdb7 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8006c2e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	085a      	lsrs	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	441a      	add	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	61bb      	str	r3, [r7, #24]
        break;
 8006c46:	e029      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085a      	lsrs	r2, r3, #1
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <UART_SetConfig+0x550>)
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6852      	ldr	r2, [r2, #4]
 8006c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
        break;
 8006c5e:	e01d      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c60:	f7fc fcca 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8006c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085a      	lsrs	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	441a      	add	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e00e      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	61bb      	str	r3, [r7, #24]
        break;
 8006c94:	e002      	b.n	8006c9c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
        break;
 8006c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d908      	bls.n	8006cb4 <UART_SetConfig+0x530>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d204      	bcs.n	8006cb4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	e001      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	01e84800 	.word	0x01e84800
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01a      	beq.n	8006dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd6:	d10a      	bne.n	8006dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e2a:	f7fa f8e5 	bl	8000ff8 <HAL_GetTick>
 8006e2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d10e      	bne.n	8006e5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f82a 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e020      	b.n	8006e9e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d10e      	bne.n	8006e88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f814 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e00a      	b.n	8006e9e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb6:	e05d      	b.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d059      	beq.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fa f89a 	bl	8000ff8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11b      	bne.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e042      	b.n	8006f94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02b      	beq.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d123      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e00f      	b.n	8006f94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69da      	ldr	r2, [r3, #28]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d092      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fb2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fdc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701c:	d014      	beq.n	8007048 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007034:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007044:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007046:	e002      	b.n	800704e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f006 fd15 	bl	800da78 <HAL_UART_TxCpltCallback>
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff fb5b 	bl	8006720 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d01e      	beq.n	80070c8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff fb33 	bl	8006734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fb2f 	bl	8006748 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007104:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800710a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d109      	bne.n	800712e <UART_DMAError+0x3c>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b21      	cmp	r3, #33	; 0x21
 800711e:	d106      	bne.n	800712e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f7ff ff37 	bl	8006f9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d109      	bne.n	8007150 <UART_DMAError+0x5e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b22      	cmp	r3, #34	; 0x22
 8007140:	d106      	bne.n	8007150 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff ff3b 	bl	8006fc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007154:	f043 0210 	orr.w	r2, r3, #16
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f7ff fafd 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fae7 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f006 fc5c 	bl	800da78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80071d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071da:	2b84      	cmp	r3, #132	; 0x84
 80071dc:	d005      	beq.n	80071ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80071de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	3303      	adds	r3, #3
 80071e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071fc:	f000 fab6 	bl	800776c <vTaskStartScheduler>
  
  return osOK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	bd80      	pop	{r7, pc}

08007206 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007208:	b089      	sub	sp, #36	; 0x24
 800720a:	af04      	add	r7, sp, #16
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685c      	ldr	r4, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681d      	ldr	r5, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691e      	ldr	r6, [r3, #16]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff ffd0 	bl	80071c8 <makeFreeRtosPriority>
 8007228:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007232:	9202      	str	r2, [sp, #8]
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	9100      	str	r1, [sp, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	4632      	mov	r2, r6
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f8c5 	bl	80073ce <xTaskCreateStatic>
 8007244:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007250 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007254:	f000 fd6c 	bl	8007d30 <xTaskGetSchedulerState>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800725e:	f000 ff83 	bl	8008168 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}

08007266 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f103 0208 	add.w	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f103 0208 	add.w	r2, r3, #8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f103 0208 	add.w	r2, r3, #8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d103      	bne.n	8007328 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e00c      	b.n	8007342 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3308      	adds	r3, #8
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e002      	b.n	8007336 <vListInsert+0x2e>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d2f6      	bcs.n	8007330 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6892      	ldr	r2, [r2, #8]
 8007390:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6852      	ldr	r2, [r2, #4]
 800739a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d103      	bne.n	80073ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	1e5a      	subs	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b08e      	sub	sp, #56	; 0x38
 80073d2:	af04      	add	r7, sp, #16
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	b672      	cpsid	i
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	b662      	cpsie	i
 80073f6:	623b      	str	r3, [r7, #32]
 80073f8:	e7fe      	b.n	80073f8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <xTaskCreateStatic+0x4a>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	e7fe      	b.n	8007416 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007418:	2354      	movs	r3, #84	; 0x54
 800741a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b54      	cmp	r3, #84	; 0x54
 8007420:	d00b      	beq.n	800743a <xTaskCreateStatic+0x6c>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e7fe      	b.n	8007438 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800743a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01a      	beq.n	8007478 <xTaskCreateStatic+0xaa>
 8007442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d017      	beq.n	8007478 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007452:	2300      	movs	r3, #0
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	9302      	str	r3, [sp, #8]
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f80b 	bl	8007486 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007472:	f000 f891 	bl	8007598 <prvAddNewTaskToReadyList>
 8007476:	e001      	b.n	800747c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800747c:	697b      	ldr	r3, [r7, #20]
	}
 800747e:	4618      	mov	r0, r3
 8007480:	3728      	adds	r7, #40	; 0x28
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b088      	sub	sp, #32
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800749e:	440b      	add	r3, r1
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f023 0307 	bic.w	r3, r3, #7
 80074ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <prvInitialiseNewTask+0x4a>
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e7fe      	b.n	80074ce <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01f      	beq.n	8007516 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	e012      	b.n	8007502 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	3334      	adds	r3, #52	; 0x34
 80074ec:	460a      	mov	r2, r1
 80074ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	3301      	adds	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d9e9      	bls.n	80074dc <prvInitialiseNewTask+0x56>
 8007508:	e000      	b.n	800750c <prvInitialiseNewTask+0x86>
			{
				break;
 800750a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007514:	e003      	b.n	800751e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b06      	cmp	r3, #6
 8007522:	d901      	bls.n	8007528 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007524:	2306      	movs	r3, #6
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800752c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007532:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2200      	movs	r2, #0
 8007538:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff feb1 	bl	80072a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	3318      	adds	r3, #24
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff feac 	bl	80072a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	f1c3 0207 	rsb	r2, r3, #7
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2200      	movs	r2, #0
 8007568:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	69b8      	ldr	r0, [r7, #24]
 8007578:	f000 fc5e 	bl	8007e38 <pxPortInitialiseStack>
 800757c:	4602      	mov	r2, r0
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758e:	bf00      	nop
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075a0:	f000 fd52 	bl	8008048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075a4:	4b2a      	ldr	r3, [pc, #168]	; (8007650 <prvAddNewTaskToReadyList+0xb8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a29      	ldr	r2, [pc, #164]	; (8007650 <prvAddNewTaskToReadyList+0xb8>)
 80075ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ae:	4b29      	ldr	r3, [pc, #164]	; (8007654 <prvAddNewTaskToReadyList+0xbc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075b6:	4a27      	ldr	r2, [pc, #156]	; (8007654 <prvAddNewTaskToReadyList+0xbc>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075bc:	4b24      	ldr	r3, [pc, #144]	; (8007650 <prvAddNewTaskToReadyList+0xb8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075c4:	f000 fb1e 	bl	8007c04 <prvInitialiseTaskLists>
 80075c8:	e00d      	b.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075ca:	4b23      	ldr	r3, [pc, #140]	; (8007658 <prvAddNewTaskToReadyList+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075d2:	4b20      	ldr	r3, [pc, #128]	; (8007654 <prvAddNewTaskToReadyList+0xbc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d802      	bhi.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <prvAddNewTaskToReadyList+0xbc>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075e6:	4b1d      	ldr	r3, [pc, #116]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a1b      	ldr	r2, [pc, #108]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	2201      	movs	r2, #1
 80075f6:	409a      	lsls	r2, r3
 80075f8:	4b19      	ldr	r3, [pc, #100]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	4a18      	ldr	r2, [pc, #96]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a15      	ldr	r2, [pc, #84]	; (8007664 <prvAddNewTaskToReadyList+0xcc>)
 8007610:	441a      	add	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7ff fe51 	bl	80072c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800761e:	f000 fd45 	bl	80080ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <prvAddNewTaskToReadyList+0xc0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddNewTaskToReadyList+0xbc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	429a      	cmp	r2, r3
 8007636:	d207      	bcs.n	8007648 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 800763a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000664 	.word	0x20000664
 8007654:	20000564 	.word	0x20000564
 8007658:	20000670 	.word	0x20000670
 800765c:	20000680 	.word	0x20000680
 8007660:	2000066c 	.word	0x2000066c
 8007664:	20000568 	.word	0x20000568
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <vTaskDelayUntil+0x2c>
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	b672      	cpsid	i
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	b662      	cpsie	i
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e7fe      	b.n	8007696 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <vTaskDelayUntil+0x4a>
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	b672      	cpsid	i
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	b662      	cpsie	i
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e7fe      	b.n	80076b4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80076b6:	4b2a      	ldr	r3, [pc, #168]	; (8007760 <vTaskDelayUntil+0xf4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <vTaskDelayUntil+0x6a>
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	b672      	cpsid	i
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	b662      	cpsie	i
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e7fe      	b.n	80076d4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80076d6:	f000 f8ab 	bl	8007830 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80076da:	4b22      	ldr	r3, [pc, #136]	; (8007764 <vTaskDelayUntil+0xf8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	4413      	add	r3, r2
 80076e8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d20b      	bcs.n	800770c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d211      	bcs.n	8007722 <vTaskDelayUntil+0xb6>
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	429a      	cmp	r2, r3
 8007704:	d90d      	bls.n	8007722 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
 800770a:	e00a      	b.n	8007722 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	429a      	cmp	r2, r3
 8007714:	d303      	bcc.n	800771e <vTaskDelayUntil+0xb2>
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	429a      	cmp	r2, r3
 800771c:	d901      	bls.n	8007722 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d006      	beq.n	800773c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fb18 	bl	8007d6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800773c:	f000 f886 	bl	800784c <xTaskResumeAll>
 8007740:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d107      	bne.n	8007758 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <vTaskDelayUntil+0xfc>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007758:	bf00      	nop
 800775a:	3728      	adds	r7, #40	; 0x28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	2000068c 	.word	0x2000068c
 8007764:	20000668 	.word	0x20000668
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800777a:	463a      	mov	r2, r7
 800777c:	1d39      	adds	r1, r7, #4
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	4618      	mov	r0, r3
 8007784:	f000 ff7c 	bl	8008680 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	9202      	str	r2, [sp, #8]
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	2300      	movs	r3, #0
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	460a      	mov	r2, r1
 800779a:	491f      	ldr	r1, [pc, #124]	; (8007818 <vTaskStartScheduler+0xac>)
 800779c:	481f      	ldr	r0, [pc, #124]	; (800781c <vTaskStartScheduler+0xb0>)
 800779e:	f7ff fe16 	bl	80073ce <xTaskCreateStatic>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <vTaskStartScheduler+0xb4>)
 80077a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <vTaskStartScheduler+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e001      	b.n	80077ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d117      	bne.n	80077f0 <vTaskStartScheduler+0x84>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	b672      	cpsid	i
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	b662      	cpsie	i
 80077d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <vTaskStartScheduler+0xb8>)
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <vTaskStartScheduler+0xbc>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077e4:	4b11      	ldr	r3, [pc, #68]	; (800782c <vTaskStartScheduler+0xc0>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077ea:	f000 fbb1 	bl	8007f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ee:	e00f      	b.n	8007810 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d10b      	bne.n	8007810 <vTaskStartScheduler+0xa4>
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	b672      	cpsid	i
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	b662      	cpsie	i
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e7fe      	b.n	800780e <vTaskStartScheduler+0xa2>
}
 8007810:	bf00      	nop
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08014968 	.word	0x08014968
 800781c:	08007bd5 	.word	0x08007bd5
 8007820:	20000688 	.word	0x20000688
 8007824:	20000684 	.word	0x20000684
 8007828:	20000670 	.word	0x20000670
 800782c:	20000668 	.word	0x20000668

08007830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <vTaskSuspendAll+0x18>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3301      	adds	r3, #1
 800783a:	4a03      	ldr	r2, [pc, #12]	; (8007848 <vTaskSuspendAll+0x18>)
 800783c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800783e:	bf00      	nop
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	2000068c 	.word	0x2000068c

0800784c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800785a:	4b42      	ldr	r3, [pc, #264]	; (8007964 <xTaskResumeAll+0x118>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <xTaskResumeAll+0x2e>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	e7fe      	b.n	8007878 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800787a:	f000 fbe5 	bl	8008048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800787e:	4b39      	ldr	r3, [pc, #228]	; (8007964 <xTaskResumeAll+0x118>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3b01      	subs	r3, #1
 8007884:	4a37      	ldr	r2, [pc, #220]	; (8007964 <xTaskResumeAll+0x118>)
 8007886:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <xTaskResumeAll+0x118>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d161      	bne.n	8007954 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007890:	4b35      	ldr	r3, [pc, #212]	; (8007968 <xTaskResumeAll+0x11c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05d      	beq.n	8007954 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007898:	e02e      	b.n	80078f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789a:	4b34      	ldr	r3, [pc, #208]	; (800796c <xTaskResumeAll+0x120>)
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3318      	adds	r3, #24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fd67 	bl	800737a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fd62 	bl	800737a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	2201      	movs	r2, #1
 80078bc:	409a      	lsls	r2, r3
 80078be:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <xTaskResumeAll+0x124>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	4a2a      	ldr	r2, [pc, #168]	; (8007970 <xTaskResumeAll+0x124>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a27      	ldr	r2, [pc, #156]	; (8007974 <xTaskResumeAll+0x128>)
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7ff fcee 	bl	80072c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4b23      	ldr	r3, [pc, #140]	; (8007978 <xTaskResumeAll+0x12c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078f2:	4b22      	ldr	r3, [pc, #136]	; (800797c <xTaskResumeAll+0x130>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f8:	4b1c      	ldr	r3, [pc, #112]	; (800796c <xTaskResumeAll+0x120>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1cc      	bne.n	800789a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007906:	f000 f9f3 	bl	8007cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <xTaskResumeAll+0x134>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007916:	f000 f847 	bl	80079a8 <xTaskIncrementTick>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007920:	4b16      	ldr	r3, [pc, #88]	; (800797c <xTaskResumeAll+0x130>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3b01      	subs	r3, #1
 800792a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f1      	bne.n	8007916 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <xTaskResumeAll+0x134>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007938:	4b10      	ldr	r3, [pc, #64]	; (800797c <xTaskResumeAll+0x130>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007940:	2301      	movs	r3, #1
 8007942:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <xTaskResumeAll+0x138>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007954:	f000 fbaa 	bl	80080ac <vPortExitCritical>

	return xAlreadyYielded;
 8007958:	68bb      	ldr	r3, [r7, #8]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	2000068c 	.word	0x2000068c
 8007968:	20000664 	.word	0x20000664
 800796c:	20000624 	.word	0x20000624
 8007970:	2000066c 	.word	0x2000066c
 8007974:	20000568 	.word	0x20000568
 8007978:	20000564 	.word	0x20000564
 800797c:	20000678 	.word	0x20000678
 8007980:	20000674 	.word	0x20000674
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <xTaskGetTickCount+0x1c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007994:	687b      	ldr	r3, [r7, #4]
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000668 	.word	0x20000668

080079a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079b2:	4b4f      	ldr	r3, [pc, #316]	; (8007af0 <xTaskIncrementTick+0x148>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 8089 	bne.w	8007ace <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079bc:	4b4d      	ldr	r3, [pc, #308]	; (8007af4 <xTaskIncrementTick+0x14c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079c4:	4a4b      	ldr	r2, [pc, #300]	; (8007af4 <xTaskIncrementTick+0x14c>)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d121      	bne.n	8007a14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079d0:	4b49      	ldr	r3, [pc, #292]	; (8007af8 <xTaskIncrementTick+0x150>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <xTaskIncrementTick+0x4a>
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	b672      	cpsid	i
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	b662      	cpsie	i
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	e7fe      	b.n	80079f0 <xTaskIncrementTick+0x48>
 80079f2:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <xTaskIncrementTick+0x150>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	4b40      	ldr	r3, [pc, #256]	; (8007afc <xTaskIncrementTick+0x154>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a3e      	ldr	r2, [pc, #248]	; (8007af8 <xTaskIncrementTick+0x150>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4a3e      	ldr	r2, [pc, #248]	; (8007afc <xTaskIncrementTick+0x154>)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <xTaskIncrementTick+0x158>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	4a3c      	ldr	r2, [pc, #240]	; (8007b00 <xTaskIncrementTick+0x158>)
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f000 f96e 	bl	8007cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a14:	4b3b      	ldr	r3, [pc, #236]	; (8007b04 <xTaskIncrementTick+0x15c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d348      	bcc.n	8007ab0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1e:	4b36      	ldr	r3, [pc, #216]	; (8007af8 <xTaskIncrementTick+0x150>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a28:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <xTaskIncrementTick+0x15c>)
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	601a      	str	r2, [r3, #0]
					break;
 8007a30:	e03e      	b.n	8007ab0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a32:	4b31      	ldr	r3, [pc, #196]	; (8007af8 <xTaskIncrementTick+0x150>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d203      	bcs.n	8007a52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a4a:	4a2e      	ldr	r2, [pc, #184]	; (8007b04 <xTaskIncrementTick+0x15c>)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a50:	e02e      	b.n	8007ab0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fc8f 	bl	800737a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3318      	adds	r3, #24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fc86 	bl	800737a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	409a      	lsls	r2, r3
 8007a76:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <xTaskIncrementTick+0x160>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	4a22      	ldr	r2, [pc, #136]	; (8007b08 <xTaskIncrementTick+0x160>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <xTaskIncrementTick+0x164>)
 8007a8e:	441a      	add	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7ff fc12 	bl	80072c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <xTaskIncrementTick+0x168>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3b9      	bcc.n	8007a1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aae:	e7b6      	b.n	8007a1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <xTaskIncrementTick+0x168>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	4915      	ldr	r1, [pc, #84]	; (8007b0c <xTaskIncrementTick+0x164>)
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d907      	bls.n	8007ad8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e004      	b.n	8007ad8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <xTaskIncrementTick+0x16c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	4a0f      	ldr	r2, [pc, #60]	; (8007b14 <xTaskIncrementTick+0x16c>)
 8007ad6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <xTaskIncrementTick+0x170>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ae4:	697b      	ldr	r3, [r7, #20]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000068c 	.word	0x2000068c
 8007af4:	20000668 	.word	0x20000668
 8007af8:	2000061c 	.word	0x2000061c
 8007afc:	20000620 	.word	0x20000620
 8007b00:	2000067c 	.word	0x2000067c
 8007b04:	20000684 	.word	0x20000684
 8007b08:	2000066c 	.word	0x2000066c
 8007b0c:	20000568 	.word	0x20000568
 8007b10:	20000564 	.word	0x20000564
 8007b14:	20000674 	.word	0x20000674
 8007b18:	20000678 	.word	0x20000678

08007b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <vTaskSwitchContext+0xa4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b2a:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <vTaskSwitchContext+0xa8>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b30:	e040      	b.n	8007bb4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b32:	4b24      	ldr	r3, [pc, #144]	; (8007bc4 <vTaskSwitchContext+0xa8>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b38:	4b23      	ldr	r3, [pc, #140]	; (8007bc8 <vTaskSwitchContext+0xac>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	fab3 f383 	clz	r3, r3
 8007b44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	f1c3 031f 	rsb	r3, r3, #31
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	491f      	ldr	r1, [pc, #124]	; (8007bcc <vTaskSwitchContext+0xb0>)
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	b672      	cpsid	i
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	b662      	cpsie	i
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	e7fe      	b.n	8007b78 <vTaskSwitchContext+0x5c>
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <vTaskSwitchContext+0xb0>)
 8007b86:	4413      	add	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	605a      	str	r2, [r3, #4]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d104      	bne.n	8007baa <vTaskSwitchContext+0x8e>
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4a07      	ldr	r2, [pc, #28]	; (8007bd0 <vTaskSwitchContext+0xb4>)
 8007bb2:	6013      	str	r3, [r2, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	2000068c 	.word	0x2000068c
 8007bc4:	20000678 	.word	0x20000678
 8007bc8:	2000066c 	.word	0x2000066c
 8007bcc:	20000568 	.word	0x20000568
 8007bd0:	20000564 	.word	0x20000564

08007bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bdc:	f000 f852 	bl	8007c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <prvIdleTask+0x28>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d9f9      	bls.n	8007bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <prvIdleTask+0x2c>)
 8007bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bf8:	e7f0      	b.n	8007bdc <prvIdleTask+0x8>
 8007bfa:	bf00      	nop
 8007bfc:	20000568 	.word	0x20000568
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	e00c      	b.n	8007c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a12      	ldr	r2, [pc, #72]	; (8007c64 <prvInitialiseTaskLists+0x60>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fb21 	bl	8007266 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3301      	adds	r3, #1
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d9ef      	bls.n	8007c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c30:	480d      	ldr	r0, [pc, #52]	; (8007c68 <prvInitialiseTaskLists+0x64>)
 8007c32:	f7ff fb18 	bl	8007266 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c36:	480d      	ldr	r0, [pc, #52]	; (8007c6c <prvInitialiseTaskLists+0x68>)
 8007c38:	f7ff fb15 	bl	8007266 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c3c:	480c      	ldr	r0, [pc, #48]	; (8007c70 <prvInitialiseTaskLists+0x6c>)
 8007c3e:	f7ff fb12 	bl	8007266 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c42:	480c      	ldr	r0, [pc, #48]	; (8007c74 <prvInitialiseTaskLists+0x70>)
 8007c44:	f7ff fb0f 	bl	8007266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c48:	480b      	ldr	r0, [pc, #44]	; (8007c78 <prvInitialiseTaskLists+0x74>)
 8007c4a:	f7ff fb0c 	bl	8007266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <prvInitialiseTaskLists+0x78>)
 8007c50:	4a05      	ldr	r2, [pc, #20]	; (8007c68 <prvInitialiseTaskLists+0x64>)
 8007c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <prvInitialiseTaskLists+0x7c>)
 8007c56:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <prvInitialiseTaskLists+0x68>)
 8007c58:	601a      	str	r2, [r3, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000568 	.word	0x20000568
 8007c68:	200005f4 	.word	0x200005f4
 8007c6c:	20000608 	.word	0x20000608
 8007c70:	20000624 	.word	0x20000624
 8007c74:	20000638 	.word	0x20000638
 8007c78:	20000650 	.word	0x20000650
 8007c7c:	2000061c 	.word	0x2000061c
 8007c80:	20000620 	.word	0x20000620

08007c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c8a:	e019      	b.n	8007cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c8c:	f000 f9dc 	bl	8008048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <prvCheckTasksWaitingTermination+0x4c>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fb6c 	bl	800737a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <prvCheckTasksWaitingTermination+0x50>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4a0a      	ldr	r2, [pc, #40]	; (8007cd4 <prvCheckTasksWaitingTermination+0x50>)
 8007caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <prvCheckTasksWaitingTermination+0x54>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <prvCheckTasksWaitingTermination+0x54>)
 8007cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cb6:	f000 f9f9 	bl	80080ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f80e 	bl	8007cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <prvCheckTasksWaitingTermination+0x54>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e1      	bne.n	8007c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000638 	.word	0x20000638
 8007cd4:	20000664 	.word	0x20000664
 8007cd8:	2000064c 	.word	0x2000064c

08007cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <prvResetNextTaskUnblockTime+0x38>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <prvResetNextTaskUnblockTime+0x3c>)
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d08:	e008      	b.n	8007d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <prvResetNextTaskUnblockTime+0x38>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <prvResetNextTaskUnblockTime+0x3c>)
 8007d1a:	6013      	str	r3, [r2, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	2000061c 	.word	0x2000061c
 8007d2c:	20000684 	.word	0x20000684

08007d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <xTaskGetSchedulerState+0x34>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	e008      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <xTaskGetSchedulerState+0x38>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	e001      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d56:	687b      	ldr	r3, [r7, #4]
	}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20000670 	.word	0x20000670
 8007d68:	2000068c 	.word	0x2000068c

08007d6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d76:	4b29      	ldr	r3, [pc, #164]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d7c:	4b28      	ldr	r3, [pc, #160]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff faf9 	bl	800737a <uxListRemove>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d8e:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	2201      	movs	r2, #1
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	43da      	mvns	r2, r3
 8007d9c:	4b21      	ldr	r3, [pc, #132]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4013      	ands	r3, r2
 8007da2:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d10a      	bne.n	8007dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	481a      	ldr	r0, [pc, #104]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dbe:	f7ff fa7f 	bl	80072c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dc2:	e026      	b.n	8007e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dcc:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d209      	bcs.n	8007df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	f7ff fa8d 	bl	8007308 <vListInsert>
}
 8007dee:	e010      	b.n	8007e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007df0:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f7ff fa83 	bl	8007308 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d202      	bcs.n	8007e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e0c:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6013      	str	r3, [r2, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000668 	.word	0x20000668
 8007e20:	20000564 	.word	0x20000564
 8007e24:	2000066c 	.word	0x2000066c
 8007e28:	20000650 	.word	0x20000650
 8007e2c:	20000620 	.word	0x20000620
 8007e30:	2000061c 	.word	0x2000061c
 8007e34:	20000684 	.word	0x20000684

08007e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3b04      	subs	r3, #4
 8007e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b04      	subs	r3, #4
 8007e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f023 0201 	bic.w	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3b04      	subs	r3, #4
 8007e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e68:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <pxPortInitialiseStack+0x64>)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3b14      	subs	r3, #20
 8007e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f06f 0202 	mvn.w	r2, #2
 8007e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3b20      	subs	r3, #32
 8007e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	08007ea1 	.word	0x08007ea1

08007ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <prvTaskExitError+0x58>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d00b      	beq.n	8007ecc <prvTaskExitError+0x2c>
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e7fe      	b.n	8007eca <prvTaskExitError+0x2a>
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ee2:	bf00      	nop
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0fc      	beq.n	8007ee4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	20000008 	.word	0x20000008
 8007efc:	00000000 	.word	0x00000000

08007f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <pxCurrentTCBConst2>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f380 8809 	msr	PSP, r0
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst2>:
 8007f20:	20000564 	.word	0x20000564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	; (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <xPortStartScheduler+0xe0>)
 8007f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <xPortStartScheduler+0xe4>)
 8007f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f7e:	4b2e      	ldr	r3, [pc, #184]	; (8008038 <xPortStartScheduler+0xe8>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f84:	e009      	b.n	8007f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f86:	4b2c      	ldr	r3, [pc, #176]	; (8008038 <xPortStartScheduler+0xe8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <xPortStartScheduler+0xe8>)
 8007f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d0ef      	beq.n	8007f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <xPortStartScheduler+0xe8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d00b      	beq.n	8007fca <xPortStartScheduler+0x7a>
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	b672      	cpsid	i
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	b662      	cpsie	i
 8007fc6:	60bb      	str	r3, [r7, #8]
 8007fc8:	e7fe      	b.n	8007fc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fca:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <xPortStartScheduler+0xe8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	4a19      	ldr	r2, [pc, #100]	; (8008038 <xPortStartScheduler+0xe8>)
 8007fd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <xPortStartScheduler+0xe8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fdc:	4a16      	ldr	r2, [pc, #88]	; (8008038 <xPortStartScheduler+0xe8>)
 8007fde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fe8:	4b14      	ldr	r3, [pc, #80]	; (800803c <xPortStartScheduler+0xec>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a13      	ldr	r2, [pc, #76]	; (800803c <xPortStartScheduler+0xec>)
 8007fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ff2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff4:	4b11      	ldr	r3, [pc, #68]	; (800803c <xPortStartScheduler+0xec>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a10      	ldr	r2, [pc, #64]	; (800803c <xPortStartScheduler+0xec>)
 8007ffa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ffe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008000:	f000 f8d4 	bl	80081ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <xPortStartScheduler+0xf0>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800800a:	f000 f8f3 	bl	80081f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <xPortStartScheduler+0xf4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <xPortStartScheduler+0xf4>)
 8008014:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008018:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800801a:	f7ff ff85 	bl	8007f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800801e:	f7ff fd7d 	bl	8007b1c <vTaskSwitchContext>
	prvTaskExitError();
 8008022:	f7ff ff3d 	bl	8007ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	e000e400 	.word	0xe000e400
 8008034:	20000690 	.word	0x20000690
 8008038:	20000694 	.word	0x20000694
 800803c:	e000ed20 	.word	0xe000ed20
 8008040:	20000008 	.word	0x20000008
 8008044:	e000ef34 	.word	0xe000ef34

08008048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	b672      	cpsid	i
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	b662      	cpsie	i
 8008062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <vPortEnterCritical+0x5c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	4a0e      	ldr	r2, [pc, #56]	; (80080a4 <vPortEnterCritical+0x5c>)
 800806c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800806e:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <vPortEnterCritical+0x5c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d110      	bne.n	8008098 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <vPortEnterCritical+0x60>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <vPortEnterCritical+0x50>
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	e7fe      	b.n	8008096 <vPortEnterCritical+0x4e>
	}
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20000008 	.word	0x20000008
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <vPortExitCritical+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <vPortExitCritical+0x26>
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	b672      	cpsid	i
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	b662      	cpsie	i
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	e7fe      	b.n	80080d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80080d2:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <vPortExitCritical+0x50>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4a08      	ldr	r2, [pc, #32]	; (80080fc <vPortExitCritical+0x50>)
 80080da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080dc:	4b07      	ldr	r3, [pc, #28]	; (80080fc <vPortExitCritical+0x50>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <vPortExitCritical+0x42>
 80080e4:	2300      	movs	r3, #0
 80080e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20000008 	.word	0x20000008

08008100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008100:	f3ef 8009 	mrs	r0, PSP
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <pxCurrentTCBConst>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f01e 0f10 	tst.w	lr, #16
 8008110:	bf08      	it	eq
 8008112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811a:	6010      	str	r0, [r2, #0]
 800811c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008124:	b672      	cpsid	i
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	b662      	cpsie	i
 8008134:	f7ff fcf2 	bl	8007b1c <vTaskSwitchContext>
 8008138:	f04f 0000 	mov.w	r0, #0
 800813c:	f380 8811 	msr	BASEPRI, r0
 8008140:	bc09      	pop	{r0, r3}
 8008142:	6819      	ldr	r1, [r3, #0]
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	f01e 0f10 	tst.w	lr, #16
 800814e:	bf08      	it	eq
 8008150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008154:	f380 8809 	msr	PSP, r0
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <pxCurrentTCBConst>:
 8008160:	20000564 	.word	0x20000564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	b672      	cpsid	i
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	b662      	cpsie	i
 8008182:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008184:	f7ff fc10 	bl	80079a8 <xTaskIncrementTick>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <xPortSysTickHandler+0x40>)
 8008190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	2300      	movs	r3, #0
 8008198:	603b      	str	r3, [r7, #0]
	__asm volatile
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <vPortSetupTimerInterrupt+0x38>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <vPortSetupTimerInterrupt+0x3c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <vPortSetupTimerInterrupt+0x40>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	099b      	lsrs	r3, r3, #6
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <vPortSetupTimerInterrupt+0x44>)
 80081ca:	3b01      	subs	r3, #1
 80081cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e010 	.word	0xe000e010
 80081e4:	e000e018 	.word	0xe000e018
 80081e8:	2000000c 	.word	0x2000000c
 80081ec:	10624dd3 	.word	0x10624dd3
 80081f0:	e000e014 	.word	0xe000e014

080081f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008204 <vPortEnableVFP+0x10>
 80081f8:	6801      	ldr	r1, [r0, #0]
 80081fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081fe:	6001      	str	r1, [r0, #0]
 8008200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008202:	bf00      	nop
 8008204:	e000ed88 	.word	0xe000ed88

08008208 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800820e:	463b      	mov	r3, r7
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800821a:	4b44      	ldr	r3, [pc, #272]	; (800832c <MX_ADC1_Init+0x124>)
 800821c:	4a44      	ldr	r2, [pc, #272]	; (8008330 <MX_ADC1_Init+0x128>)
 800821e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008220:	4b42      	ldr	r3, [pc, #264]	; (800832c <MX_ADC1_Init+0x124>)
 8008222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008228:	4b40      	ldr	r3, [pc, #256]	; (800832c <MX_ADC1_Init+0x124>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800822e:	4b3f      	ldr	r3, [pc, #252]	; (800832c <MX_ADC1_Init+0x124>)
 8008230:	2201      	movs	r2, #1
 8008232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008234:	4b3d      	ldr	r3, [pc, #244]	; (800832c <MX_ADC1_Init+0x124>)
 8008236:	2201      	movs	r2, #1
 8008238:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800823a:	4b3c      	ldr	r3, [pc, #240]	; (800832c <MX_ADC1_Init+0x124>)
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008242:	4b3a      	ldr	r3, [pc, #232]	; (800832c <MX_ADC1_Init+0x124>)
 8008244:	2200      	movs	r2, #0
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008248:	4b38      	ldr	r3, [pc, #224]	; (800832c <MX_ADC1_Init+0x124>)
 800824a:	4a3a      	ldr	r2, [pc, #232]	; (8008334 <MX_ADC1_Init+0x12c>)
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800824e:	4b37      	ldr	r3, [pc, #220]	; (800832c <MX_ADC1_Init+0x124>)
 8008250:	2200      	movs	r2, #0
 8008252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8008254:	4b35      	ldr	r3, [pc, #212]	; (800832c <MX_ADC1_Init+0x124>)
 8008256:	2206      	movs	r2, #6
 8008258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800825a:	4b34      	ldr	r3, [pc, #208]	; (800832c <MX_ADC1_Init+0x124>)
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008262:	4b32      	ldr	r3, [pc, #200]	; (800832c <MX_ADC1_Init+0x124>)
 8008264:	2200      	movs	r2, #0
 8008266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008268:	4830      	ldr	r0, [pc, #192]	; (800832c <MX_ADC1_Init+0x124>)
 800826a:	f7f8 fef3 	bl	8001054 <HAL_ADC_Init>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008274:	f000 fdea 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008278:	2303      	movs	r3, #3
 800827a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800827c:	2301      	movs	r3, #1
 800827e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008280:	2307      	movs	r3, #7
 8008282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008284:	463b      	mov	r3, r7
 8008286:	4619      	mov	r1, r3
 8008288:	4828      	ldr	r0, [pc, #160]	; (800832c <MX_ADC1_Init+0x124>)
 800828a:	f7f8 ff27 	bl	80010dc <HAL_ADC_ConfigChannel>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008294:	f000 fdda 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008298:	2304      	movs	r3, #4
 800829a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800829c:	2302      	movs	r3, #2
 800829e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082a0:	463b      	mov	r3, r7
 80082a2:	4619      	mov	r1, r3
 80082a4:	4821      	ldr	r0, [pc, #132]	; (800832c <MX_ADC1_Init+0x124>)
 80082a6:	f7f8 ff19 	bl	80010dc <HAL_ADC_ConfigChannel>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80082b0:	f000 fdcc 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80082b4:	2309      	movs	r3, #9
 80082b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80082b8:	2303      	movs	r3, #3
 80082ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082bc:	463b      	mov	r3, r7
 80082be:	4619      	mov	r1, r3
 80082c0:	481a      	ldr	r0, [pc, #104]	; (800832c <MX_ADC1_Init+0x124>)
 80082c2:	f7f8 ff0b 	bl	80010dc <HAL_ADC_ConfigChannel>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80082cc:	f000 fdbe 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80082d0:	230a      	movs	r3, #10
 80082d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80082d4:	2304      	movs	r3, #4
 80082d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082d8:	463b      	mov	r3, r7
 80082da:	4619      	mov	r1, r3
 80082dc:	4813      	ldr	r0, [pc, #76]	; (800832c <MX_ADC1_Init+0x124>)
 80082de:	f7f8 fefd 	bl	80010dc <HAL_ADC_ConfigChannel>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80082e8:	f000 fdb0 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80082ec:	230c      	movs	r3, #12
 80082ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80082f0:	2305      	movs	r3, #5
 80082f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082f4:	463b      	mov	r3, r7
 80082f6:	4619      	mov	r1, r3
 80082f8:	480c      	ldr	r0, [pc, #48]	; (800832c <MX_ADC1_Init+0x124>)
 80082fa:	f7f8 feef 	bl	80010dc <HAL_ADC_ConfigChannel>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8008304:	f000 fda2 	bl	8008e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008308:	230d      	movs	r3, #13
 800830a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800830c:	2306      	movs	r3, #6
 800830e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008310:	463b      	mov	r3, r7
 8008312:	4619      	mov	r1, r3
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <MX_ADC1_Init+0x124>)
 8008316:	f7f8 fee1 	bl	80010dc <HAL_ADC_ConfigChannel>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8008320:	f000 fd94 	bl	8008e4c <Error_Handler>
  }

}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20001344 	.word	0x20001344
 8008330:	40012000 	.word	0x40012000
 8008334:	0f000001 	.word	0x0f000001

08008338 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	; 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008340:	f107 031c 	add.w	r3, r7, #28
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a45      	ldr	r2, [pc, #276]	; (800846c <HAL_ADC_MspInit+0x134>)
 8008356:	4293      	cmp	r3, r2
 8008358:	f040 8084 	bne.w	8008464 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800835c:	4b44      	ldr	r3, [pc, #272]	; (8008470 <HAL_ADC_MspInit+0x138>)
 800835e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008360:	4a43      	ldr	r2, [pc, #268]	; (8008470 <HAL_ADC_MspInit+0x138>)
 8008362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008366:	6453      	str	r3, [r2, #68]	; 0x44
 8008368:	4b41      	ldr	r3, [pc, #260]	; (8008470 <HAL_ADC_MspInit+0x138>)
 800836a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008374:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <HAL_ADC_MspInit+0x138>)
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	4a3d      	ldr	r2, [pc, #244]	; (8008470 <HAL_ADC_MspInit+0x138>)
 800837a:	f043 0304 	orr.w	r3, r3, #4
 800837e:	6313      	str	r3, [r2, #48]	; 0x30
 8008380:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <HAL_ADC_MspInit+0x138>)
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800838c:	4b38      	ldr	r3, [pc, #224]	; (8008470 <HAL_ADC_MspInit+0x138>)
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	4a37      	ldr	r2, [pc, #220]	; (8008470 <HAL_ADC_MspInit+0x138>)
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	6313      	str	r3, [r2, #48]	; 0x30
 8008398:	4b35      	ldr	r3, [pc, #212]	; (8008470 <HAL_ADC_MspInit+0x138>)
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a4:	4b32      	ldr	r3, [pc, #200]	; (8008470 <HAL_ADC_MspInit+0x138>)
 80083a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a8:	4a31      	ldr	r2, [pc, #196]	; (8008470 <HAL_ADC_MspInit+0x138>)
 80083aa:	f043 0302 	orr.w	r3, r3, #2
 80083ae:	6313      	str	r3, [r2, #48]	; 0x30
 80083b0:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <HAL_ADC_MspInit+0x138>)
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 80083bc:	230d      	movs	r3, #13
 80083be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083c0:	2303      	movs	r3, #3
 80083c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083c8:	f107 031c 	add.w	r3, r7, #28
 80083cc:	4619      	mov	r1, r3
 80083ce:	4829      	ldr	r0, [pc, #164]	; (8008474 <HAL_ADC_MspInit+0x13c>)
 80083d0:	f7fa fa24 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 80083d4:	2318      	movs	r3, #24
 80083d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083d8:	2303      	movs	r3, #3
 80083da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083e0:	f107 031c 	add.w	r3, r7, #28
 80083e4:	4619      	mov	r1, r3
 80083e6:	4824      	ldr	r0, [pc, #144]	; (8008478 <HAL_ADC_MspInit+0x140>)
 80083e8:	f7fa fa18 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 80083ec:	2302      	movs	r3, #2
 80083ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083f0:	2303      	movs	r3, #3
 80083f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 80083f8:	f107 031c 	add.w	r3, r7, #28
 80083fc:	4619      	mov	r1, r3
 80083fe:	481f      	ldr	r0, [pc, #124]	; (800847c <HAL_ADC_MspInit+0x144>)
 8008400:	f7fa fa0c 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8008404:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008406:	4a1f      	ldr	r2, [pc, #124]	; (8008484 <HAL_ADC_MspInit+0x14c>)
 8008408:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800840a:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800840c:	2200      	movs	r2, #0
 800840e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008416:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008418:	2200      	movs	r2, #0
 800841a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800841c:	4b18      	ldr	r3, [pc, #96]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800841e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008422:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800842a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800842e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008432:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800843e:	2200      	movs	r2, #0
 8008440:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008444:	2200      	movs	r2, #0
 8008446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008448:	480d      	ldr	r0, [pc, #52]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800844a:	f7f9 fddf 	bl	800200c <HAL_DMA_Init>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8008454:	f000 fcfa 	bl	8008e4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a09      	ldr	r2, [pc, #36]	; (8008480 <HAL_ADC_MspInit+0x148>)
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
 800845e:	4a08      	ldr	r2, [pc, #32]	; (8008480 <HAL_ADC_MspInit+0x148>)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008464:	bf00      	nop
 8008466:	3730      	adds	r7, #48	; 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	40012000 	.word	0x40012000
 8008470:	40023800 	.word	0x40023800
 8008474:	40020800 	.word	0x40020800
 8008478:	40020000 	.word	0x40020000
 800847c:	40020400 	.word	0x40020400
 8008480:	2000138c 	.word	0x2000138c
 8008484:	40026470 	.word	0x40026470

08008488 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800848c:	4b17      	ldr	r3, [pc, #92]	; (80084ec <MX_CAN1_Init+0x64>)
 800848e:	4a18      	ldr	r2, [pc, #96]	; (80084f0 <MX_CAN1_Init+0x68>)
 8008490:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8008492:	4b16      	ldr	r3, [pc, #88]	; (80084ec <MX_CAN1_Init+0x64>)
 8008494:	2206      	movs	r2, #6
 8008496:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008498:	4b14      	ldr	r3, [pc, #80]	; (80084ec <MX_CAN1_Init+0x64>)
 800849a:	2200      	movs	r2, #0
 800849c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800849e:	4b13      	ldr	r3, [pc, #76]	; (80084ec <MX_CAN1_Init+0x64>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80084a4:	4b11      	ldr	r3, [pc, #68]	; (80084ec <MX_CAN1_Init+0x64>)
 80084a6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80084aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <MX_CAN1_Init+0x64>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80084b2:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <MX_CAN1_Init+0x64>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <MX_CAN1_Init+0x64>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <MX_CAN1_Init+0x64>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <MX_CAN1_Init+0x64>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80084ca:	4b08      	ldr	r3, [pc, #32]	; (80084ec <MX_CAN1_Init+0x64>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80084d0:	4b06      	ldr	r3, [pc, #24]	; (80084ec <MX_CAN1_Init+0x64>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80084d6:	4805      	ldr	r0, [pc, #20]	; (80084ec <MX_CAN1_Init+0x64>)
 80084d8:	f7f9 f844 	bl	8001564 <HAL_CAN_Init>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80084e2:	f000 fcb3 	bl	8008e4c <Error_Handler>
  }

}
 80084e6:	bf00      	nop
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200013ec 	.word	0x200013ec
 80084f0:	40006400 	.word	0x40006400

080084f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	60da      	str	r2, [r3, #12]
 800850a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <HAL_CAN_MspInit+0x9c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d137      	bne.n	8008586 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008516:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 800851c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008520:	6413      	str	r3, [r2, #64]	; 0x40
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 8008534:	f043 0308 	orr.w	r3, r3, #8
 8008538:	6313      	str	r3, [r2, #48]	; 0x30
 800853a:	4b16      	ldr	r3, [pc, #88]	; (8008594 <HAL_CAN_MspInit+0xa0>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008546:	2303      	movs	r3, #3
 8008548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800854a:	2302      	movs	r3, #2
 800854c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008552:	2303      	movs	r3, #3
 8008554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008556:	2309      	movs	r3, #9
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	4619      	mov	r1, r3
 8008560:	480d      	ldr	r0, [pc, #52]	; (8008598 <HAL_CAN_MspInit+0xa4>)
 8008562:	f7fa f95b 	bl	800281c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	2105      	movs	r1, #5
 800856a:	2014      	movs	r0, #20
 800856c:	f7f9 fd24 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008570:	2014      	movs	r0, #20
 8008572:	f7f9 fd3d 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008576:	2200      	movs	r2, #0
 8008578:	2105      	movs	r1, #5
 800857a:	2015      	movs	r0, #21
 800857c:	f7f9 fd1c 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008580:	2015      	movs	r0, #21
 8008582:	f7f9 fd35 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008586:	bf00      	nop
 8008588:	3728      	adds	r7, #40	; 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40006400 	.word	0x40006400
 8008594:	40023800 	.word	0x40023800
 8008598:	40020c00 	.word	0x40020c00

0800859c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80085a2:	4b36      	ldr	r3, [pc, #216]	; (800867c <MX_DMA_Init+0xe0>)
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	4a35      	ldr	r2, [pc, #212]	; (800867c <MX_DMA_Init+0xe0>)
 80085a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085ac:	6313      	str	r3, [r2, #48]	; 0x30
 80085ae:	4b33      	ldr	r3, [pc, #204]	; (800867c <MX_DMA_Init+0xe0>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80085ba:	4b30      	ldr	r3, [pc, #192]	; (800867c <MX_DMA_Init+0xe0>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4a2f      	ldr	r2, [pc, #188]	; (800867c <MX_DMA_Init+0xe0>)
 80085c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085c4:	6313      	str	r3, [r2, #48]	; 0x30
 80085c6:	4b2d      	ldr	r3, [pc, #180]	; (800867c <MX_DMA_Init+0xe0>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80085d2:	2200      	movs	r2, #0
 80085d4:	2105      	movs	r1, #5
 80085d6:	200b      	movs	r0, #11
 80085d8:	f7f9 fcee 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80085dc:	200b      	movs	r0, #11
 80085de:	f7f9 fd07 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80085e2:	2200      	movs	r2, #0
 80085e4:	2105      	movs	r1, #5
 80085e6:	200c      	movs	r0, #12
 80085e8:	f7f9 fce6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80085ec:	200c      	movs	r0, #12
 80085ee:	f7f9 fcff 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80085f2:	2200      	movs	r2, #0
 80085f4:	2105      	movs	r1, #5
 80085f6:	200f      	movs	r0, #15
 80085f8:	f7f9 fcde 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80085fc:	200f      	movs	r0, #15
 80085fe:	f7f9 fcf7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008602:	2200      	movs	r2, #0
 8008604:	2105      	movs	r1, #5
 8008606:	2010      	movs	r0, #16
 8008608:	f7f9 fcd6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800860c:	2010      	movs	r0, #16
 800860e:	f7f9 fcef 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008612:	2200      	movs	r2, #0
 8008614:	2105      	movs	r1, #5
 8008616:	2011      	movs	r0, #17
 8008618:	f7f9 fcce 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800861c:	2011      	movs	r0, #17
 800861e:	f7f9 fce7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008622:	2200      	movs	r2, #0
 8008624:	2105      	movs	r1, #5
 8008626:	2038      	movs	r0, #56	; 0x38
 8008628:	f7f9 fcc6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800862c:	2038      	movs	r0, #56	; 0x38
 800862e:	f7f9 fcdf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	2105      	movs	r1, #5
 8008636:	2039      	movs	r0, #57	; 0x39
 8008638:	f7f9 fcbe 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800863c:	2039      	movs	r0, #57	; 0x39
 800863e:	f7f9 fcd7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2105      	movs	r1, #5
 8008646:	203a      	movs	r0, #58	; 0x3a
 8008648:	f7f9 fcb6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800864c:	203a      	movs	r0, #58	; 0x3a
 800864e:	f7f9 fccf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2105      	movs	r1, #5
 8008656:	203b      	movs	r0, #59	; 0x3b
 8008658:	f7f9 fcae 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800865c:	203b      	movs	r0, #59	; 0x3b
 800865e:	f7f9 fcc7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8008662:	2200      	movs	r2, #0
 8008664:	2105      	movs	r1, #5
 8008666:	203c      	movs	r0, #60	; 0x3c
 8008668:	f7f9 fca6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800866c:	203c      	movs	r0, #60	; 0x3c
 800866e:	f7f9 fcbf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40023800 	.word	0x40023800

08008680 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a07      	ldr	r2, [pc, #28]	; (80086ac <vApplicationGetIdleTaskMemory+0x2c>)
 8008690:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4a06      	ldr	r2, [pc, #24]	; (80086b0 <vApplicationGetIdleTaskMemory+0x30>)
 8008696:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2280      	movs	r2, #128	; 0x80
 800869c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000698 	.word	0x20000698
 80086b0:	200006ec 	.word	0x200006ec

080086b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b08e      	sub	sp, #56	; 0x38
 80086b8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <MX_FREERTOS_Init+0x58>)
 80086bc:	f107 041c 	add.w	r4, r7, #28
 80086c0:	461d      	mov	r5, r3
 80086c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 80086ce:	f107 031c 	add.w	r3, r7, #28
 80086d2:	2100      	movs	r1, #0
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fd96 	bl	8007206 <osThreadCreate>
 80086da:	4602      	mov	r2, r0
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <MX_FREERTOS_Init+0x5c>)
 80086de:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <MX_FREERTOS_Init+0x60>)
 80086e2:	463c      	mov	r4, r7
 80086e4:	461d      	mov	r5, r3
 80086e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80086f2:	463b      	mov	r3, r7
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fd85 	bl	8007206 <osThreadCreate>
 80086fc:	4602      	mov	r2, r0
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <MX_FREERTOS_Init+0x64>)
 8008700:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008702:	bf00      	nop
 8008704:	3738      	adds	r7, #56	; 0x38
 8008706:	46bd      	mov	sp, r7
 8008708:	bdb0      	pop	{r4, r5, r7, pc}
 800870a:	bf00      	nop
 800870c:	0801497c 	.word	0x0801497c
 8008710:	20005414 	.word	0x20005414
 8008714:	080149a4 	.word	0x080149a4
 8008718:	2000546c 	.word	0x2000546c

0800871c <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008724:	f7ff f930 	bl	8007988 <xTaskGetTickCount>
 8008728:	4603      	mov	r3, r0
 800872a:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 800872c:	2301      	movs	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <sendTaskFunc+0x44>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <sendTaskFunc+0x44>)
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <sendTaskFunc+0x44>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4b09      	ldr	r3, [pc, #36]	; (8008764 <sendTaskFunc+0x48>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	db04      	blt.n	8008750 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8008746:	4b06      	ldr	r3, [pc, #24]	; (8008760 <sendTaskFunc+0x44>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 800874c:	f006 fbe6 	bl	800ef1c <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8008750:	f107 0308 	add.w	r3, r7, #8
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ff88 	bl	800766c <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 800875c:	e7e8      	b.n	8008730 <sendTaskFunc+0x14>
 800875e:	bf00      	nop
 8008760:	200008ec 	.word	0x200008ec
 8008764:	2000021c 	.word	0x2000021c

08008768 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008770:	f7ff f90a 	bl	8007988 <xTaskGetTickCount>
 8008774:	4603      	mov	r3, r0
 8008776:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 8008778:	2301      	movs	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 800877c:	f002 faee 	bl	800ad5c <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceiveHandler();
 8008780:	f005 fb7c 	bl	800de7c <Usart_ReceiveHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <controlTaskFunc+0x50>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	4a0b      	ldr	r2, [pc, #44]	; (80087b8 <controlTaskFunc+0x50>)
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <controlTaskFunc+0x50>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <controlTaskFunc+0x54>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	db04      	blt.n	80087a4 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <controlTaskFunc+0x50>)
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
		loop();
 80087a0:	f006 fbaa 	bl	800eef8 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 80087a4:	f003 fb04 	bl	800bdb0 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 80087a8:	f107 0308 	add.w	r3, r7, #8
 80087ac:	68f9      	ldr	r1, [r7, #12]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe ff5c 	bl	800766c <vTaskDelayUntil>
			ADBoard_updateVoltage();
 80087b4:	e7e2      	b.n	800877c <controlTaskFunc+0x14>
 80087b6:	bf00      	nop
 80087b8:	200008f0 	.word	0x200008f0
 80087bc:	20000218 	.word	0x20000218

080087c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08c      	sub	sp, #48	; 0x30
 80087c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c6:	f107 031c 	add.w	r3, r7, #28
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	605a      	str	r2, [r3, #4]
 80087d0:	609a      	str	r2, [r3, #8]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087d6:	4b65      	ldr	r3, [pc, #404]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	4a64      	ldr	r2, [pc, #400]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087dc:	f043 0310 	orr.w	r3, r3, #16
 80087e0:	6313      	str	r3, [r2, #48]	; 0x30
 80087e2:	4b62      	ldr	r3, [pc, #392]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087ee:	4b5f      	ldr	r3, [pc, #380]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f2:	4a5e      	ldr	r2, [pc, #376]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087f4:	f043 0320 	orr.w	r3, r3, #32
 80087f8:	6313      	str	r3, [r2, #48]	; 0x30
 80087fa:	4b5c      	ldr	r3, [pc, #368]	; (800896c <MX_GPIO_Init+0x1ac>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008806:	4b59      	ldr	r3, [pc, #356]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a58      	ldr	r2, [pc, #352]	; (800896c <MX_GPIO_Init+0x1ac>)
 800880c:	f043 0304 	orr.w	r3, r3, #4
 8008810:	6313      	str	r3, [r2, #48]	; 0x30
 8008812:	4b56      	ldr	r3, [pc, #344]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800881e:	4b53      	ldr	r3, [pc, #332]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	4a52      	ldr	r2, [pc, #328]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	6313      	str	r3, [r2, #48]	; 0x30
 800882a:	4b50      	ldr	r3, [pc, #320]	; (800896c <MX_GPIO_Init+0x1ac>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008836:	4b4d      	ldr	r3, [pc, #308]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	4a4c      	ldr	r2, [pc, #304]	; (800896c <MX_GPIO_Init+0x1ac>)
 800883c:	f043 0302 	orr.w	r3, r3, #2
 8008840:	6313      	str	r3, [r2, #48]	; 0x30
 8008842:	4b4a      	ldr	r3, [pc, #296]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	60bb      	str	r3, [r7, #8]
 800884c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800884e:	4b47      	ldr	r3, [pc, #284]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4a46      	ldr	r2, [pc, #280]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008858:	6313      	str	r3, [r2, #48]	; 0x30
 800885a:	4b44      	ldr	r3, [pc, #272]	; (800896c <MX_GPIO_Init+0x1ac>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	607b      	str	r3, [r7, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008866:	4b41      	ldr	r3, [pc, #260]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4a40      	ldr	r2, [pc, #256]	; (800896c <MX_GPIO_Init+0x1ac>)
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	6313      	str	r3, [r2, #48]	; 0x30
 8008872:	4b3e      	ldr	r3, [pc, #248]	; (800896c <MX_GPIO_Init+0x1ac>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 800887e:	2200      	movs	r2, #0
 8008880:	f240 119b 	movw	r1, #411	; 0x19b
 8008884:	483a      	ldr	r0, [pc, #232]	; (8008970 <MX_GPIO_Init+0x1b0>)
 8008886:	f7fa f973 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 800888a:	2200      	movs	r2, #0
 800888c:	f64f 5138 	movw	r1, #64824	; 0xfd38
 8008890:	4838      	ldr	r0, [pc, #224]	; (8008974 <MX_GPIO_Init+0x1b4>)
 8008892:	f7fa f96d 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8008896:	f240 139b 	movw	r3, #411	; 0x19b
 800889a:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800889c:	2301      	movs	r3, #1
 800889e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088a0:	2302      	movs	r3, #2
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088a4:	2300      	movs	r3, #0
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088a8:	f107 031c 	add.w	r3, r7, #28
 80088ac:	4619      	mov	r1, r3
 80088ae:	4830      	ldr	r0, [pc, #192]	; (8008970 <MX_GPIO_Init+0x1b0>)
 80088b0:	f7f9 ffb4 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 80088b4:	f64f 5338 	movw	r3, #64824	; 0xfd38
 80088b8:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088ba:	2301      	movs	r3, #1
 80088bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088be:	2302      	movs	r3, #2
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088c2:	2300      	movs	r3, #0
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80088c6:	f107 031c 	add.w	r3, r7, #28
 80088ca:	4619      	mov	r1, r3
 80088cc:	4829      	ldr	r0, [pc, #164]	; (8008974 <MX_GPIO_Init+0x1b4>)
 80088ce:	f7f9 ffa5 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 80088d2:	233f      	movs	r3, #63	; 0x3f
 80088d4:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80088d6:	4b28      	ldr	r3, [pc, #160]	; (8008978 <MX_GPIO_Init+0x1b8>)
 80088d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088da:	2302      	movs	r3, #2
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80088de:	f107 031c 	add.w	r3, r7, #28
 80088e2:	4619      	mov	r1, r3
 80088e4:	4825      	ldr	r0, [pc, #148]	; (800897c <MX_GPIO_Init+0x1bc>)
 80088e6:	f7f9 ff99 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 80088ea:	239c      	movs	r3, #156	; 0x9c
 80088ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088ee:	2300      	movs	r3, #0
 80088f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088f6:	f107 031c 	add.w	r3, r7, #28
 80088fa:	4619      	mov	r1, r3
 80088fc:	4820      	ldr	r0, [pc, #128]	; (8008980 <MX_GPIO_Init+0x1c0>)
 80088fe:	f7f9 ff8d 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2105      	movs	r1, #5
 8008906:	2006      	movs	r0, #6
 8008908:	f7f9 fb56 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800890c:	2006      	movs	r0, #6
 800890e:	f7f9 fb6f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8008912:	2200      	movs	r2, #0
 8008914:	2105      	movs	r1, #5
 8008916:	2007      	movs	r0, #7
 8008918:	f7f9 fb4e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800891c:	2007      	movs	r0, #7
 800891e:	f7f9 fb67 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8008922:	2200      	movs	r2, #0
 8008924:	2105      	movs	r1, #5
 8008926:	2008      	movs	r0, #8
 8008928:	f7f9 fb46 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800892c:	2008      	movs	r0, #8
 800892e:	f7f9 fb5f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8008932:	2200      	movs	r2, #0
 8008934:	2105      	movs	r1, #5
 8008936:	2009      	movs	r0, #9
 8008938:	f7f9 fb3e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800893c:	2009      	movs	r0, #9
 800893e:	f7f9 fb57 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008942:	2200      	movs	r2, #0
 8008944:	2105      	movs	r1, #5
 8008946:	200a      	movs	r0, #10
 8008948:	f7f9 fb36 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800894c:	200a      	movs	r0, #10
 800894e:	f7f9 fb4f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2105      	movs	r1, #5
 8008956:	2017      	movs	r0, #23
 8008958:	f7f9 fb2e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800895c:	2017      	movs	r0, #23
 800895e:	f7f9 fb47 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 8008962:	bf00      	nop
 8008964:	3730      	adds	r7, #48	; 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	40023800 	.word	0x40023800
 8008970:	40021000 	.word	0x40021000
 8008974:	40021400 	.word	0x40021400
 8008978:	10210000 	.word	0x10210000
 800897c:	40021800 	.word	0x40021800
 8008980:	40020c00 	.word	0x40020c00

08008984 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008988:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <MX_I2C1_Init+0x74>)
 800898a:	4a1c      	ldr	r2, [pc, #112]	; (80089fc <MX_I2C1_Init+0x78>)
 800898c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800898e:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <MX_I2C1_Init+0x74>)
 8008990:	4a1b      	ldr	r2, [pc, #108]	; (8008a00 <MX_I2C1_Init+0x7c>)
 8008992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008994:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <MX_I2C1_Init+0x74>)
 8008996:	2200      	movs	r2, #0
 8008998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800899a:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <MX_I2C1_Init+0x74>)
 800899c:	2201      	movs	r2, #1
 800899e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089a0:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80089ac:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089b2:	4b11      	ldr	r3, [pc, #68]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089be:	480e      	ldr	r0, [pc, #56]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089c0:	f7fa f908 	bl	8002bd4 <HAL_I2C_Init>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80089ca:	f000 fa3f 	bl	8008e4c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80089ce:	2100      	movs	r1, #0
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089d2:	f7fa f98f 	bl	8002cf4 <HAL_I2CEx_ConfigAnalogFilter>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80089dc:	f000 fa36 	bl	8008e4c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80089e0:	2100      	movs	r1, #0
 80089e2:	4805      	ldr	r0, [pc, #20]	; (80089f8 <MX_I2C1_Init+0x74>)
 80089e4:	f7fa f9d1 	bl	8002d8a <HAL_I2CEx_ConfigDigitalFilter>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80089ee:	f000 fa2d 	bl	8008e4c <Error_Handler>
  }

}
 80089f2:	bf00      	nop
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20009524 	.word	0x20009524
 80089fc:	40005400 	.word	0x40005400
 8008a00:	6000030d 	.word	0x6000030d

08008a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a0c:	f107 0314 	add.w	r3, r7, #20
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	605a      	str	r2, [r3, #4]
 8008a16:	609a      	str	r2, [r3, #8]
 8008a18:	60da      	str	r2, [r3, #12]
 8008a1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a2e      	ldr	r2, [pc, #184]	; (8008adc <HAL_I2C_MspInit+0xd8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d156      	bne.n	8008ad4 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a26:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a2c:	f043 0302 	orr.w	r3, r3, #2
 8008a30:	6313      	str	r3, [r2, #48]	; 0x30
 8008a32:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a44:	2312      	movs	r3, #18
 8008a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a50:	2304      	movs	r3, #4
 8008a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a54:	f107 0314 	add.w	r3, r7, #20
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4822      	ldr	r0, [pc, #136]	; (8008ae4 <HAL_I2C_MspInit+0xe0>)
 8008a5c:	f7f9 fede 	bl	800281c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a60:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <HAL_I2C_MspInit+0xdc>)
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008a78:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a7a:	4a1c      	ldr	r2, [pc, #112]	; (8008aec <HAL_I2C_MspInit+0xe8>)
 8008a7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a88:	2240      	movs	r2, #64	; 0x40
 8008a8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008aa6:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008ab8:	480b      	ldr	r0, [pc, #44]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008aba:	f7f9 faa7 	bl	800200c <HAL_DMA_Init>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008ac4:	f000 f9c2 	bl	8008e4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a07      	ldr	r2, [pc, #28]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
 8008ace:	4a06      	ldr	r2, [pc, #24]	; (8008ae8 <HAL_I2C_MspInit+0xe4>)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3728      	adds	r7, #40	; 0x28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40005400 	.word	0x40005400
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40020400 	.word	0x40020400
 8008ae8:	200094c4 	.word	0x200094c4
 8008aec:	400260a0 	.word	0x400260a0

08008af0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008af8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <SCB_EnableICache+0x3c>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008b0c:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <SCB_EnableICache+0x3c>)
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	4a06      	ldr	r2, [pc, #24]	; (8008b2c <SCB_EnableICache+0x3c>)
 8008b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b16:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b1c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008b20:	bf00      	nop
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008b36:	4b1d      	ldr	r3, [pc, #116]	; (8008bac <SCB_EnableDCache+0x7c>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008b3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <SCB_EnableDCache+0x7c>)
 8008b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b48:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0b5b      	lsrs	r3, r3, #13
 8008b4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008b52:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	08db      	lsrs	r3, r3, #3
 8008b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b5c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008b66:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008b6c:	490f      	ldr	r1, [pc, #60]	; (8008bac <SCB_EnableDCache+0x7c>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	1e5a      	subs	r2, r3, #1
 8008b78:	60ba      	str	r2, [r7, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1ef      	bne.n	8008b5e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	60fa      	str	r2, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e5      	bne.n	8008b54 <SCB_EnableDCache+0x24>
 8008b88:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008b8c:	4b07      	ldr	r3, [pc, #28]	; (8008bac <SCB_EnableDCache+0x7c>)
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <SCB_EnableDCache+0x7c>)
 8008b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b96:	6153      	str	r3, [r2, #20]
 8008b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b9c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008bb4:	f7ff ff9c 	bl	8008af0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008bb8:	f7ff ffba 	bl	8008b30 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bbc:	f7f8 f9fa 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bc0:	f000 f83c 	bl	8008c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008bc4:	f7ff fdfc 	bl	80087c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8008bc8:	f7ff fce8 	bl	800859c <MX_DMA_Init>
  MX_ADC1_Init();
 8008bcc:	f7ff fb1c 	bl	8008208 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008bd0:	f000 fe84 	bl	80098dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8008bd4:	f000 ff3c 	bl	8009a50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008bd8:	f000 ffc8 	bl	8009b6c <MX_TIM3_Init>
  MX_TIM4_Init();
 8008bdc:	f001 f842 	bl	8009c64 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008be0:	f001 f8bc 	bl	8009d5c <MX_TIM7_Init>
  MX_TIM8_Init();
 8008be4:	f001 f8f0 	bl	8009dc8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008be8:	f001 f9a8 	bl	8009f3c <MX_TIM9_Init>
  MX_TIM10_Init();
 8008bec:	f001 fa14 	bl	800a018 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008bf0:	f001 fa60 	bl	800a0b4 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008bf4:	f001 faac 	bl	800a150 <MX_TIM14_Init>
  MX_SPI1_Init();
 8008bf8:	f000 f930 	bl	8008e5c <MX_SPI1_Init>
  MX_SPI3_Init();
 8008bfc:	f000 f966 	bl	8008ecc <MX_SPI3_Init>
  MX_SPI4_Init();
 8008c00:	f000 f9a2 	bl	8008f48 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008c04:	f000 f9de 	bl	8008fc4 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008c08:	f001 fd7e 	bl	800a708 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008c0c:	f001 fddc 	bl	800a7c8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8008c10:	f7ff feb8 	bl	8008984 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008c14:	f001 fda8 	bl	800a768 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008c18:	f7ff fc36 	bl	8008488 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008c1c:	f004 fdfa 	bl	800d814 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008c20:	f002 f8ec 	bl	800adfc <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008c24:	f003 fef2 	bl	800ca0c <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 8008c28:	f003 f8e4 	bl	800bdf4 <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008c2c:	f006 f950 	bl	800eed0 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008c30:	f7ff fd40 	bl	80086b4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008c34:	f7fe fae0 	bl	80071f8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008c38:	e7fe      	b.n	8008c38 <main+0x88>
	...

08008c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b0b8      	sub	sp, #224	; 0xe0
 8008c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008c46:	2234      	movs	r2, #52	; 0x34
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f007 fc85 	bl	801055a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	60da      	str	r2, [r3, #12]
 8008c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	2290      	movs	r2, #144	; 0x90
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f007 fc76 	bl	801055a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c6e:	4b3c      	ldr	r3, [pc, #240]	; (8008d60 <SystemClock_Config+0x124>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	4a3b      	ldr	r2, [pc, #236]	; (8008d60 <SystemClock_Config+0x124>)
 8008c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c78:	6413      	str	r3, [r2, #64]	; 0x40
 8008c7a:	4b39      	ldr	r3, [pc, #228]	; (8008d60 <SystemClock_Config+0x124>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c82:	607b      	str	r3, [r7, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c86:	4b37      	ldr	r3, [pc, #220]	; (8008d64 <SystemClock_Config+0x128>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a36      	ldr	r2, [pc, #216]	; (8008d64 <SystemClock_Config+0x128>)
 8008c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <SystemClock_Config+0x128>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008caa:	2310      	movs	r3, #16
 8008cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008cc2:	23d8      	movs	r3, #216	; 0xd8
 8008cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fa f8f3 	bl	8002ec4 <HAL_RCC_OscConfig>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008ce4:	f000 f8b2 	bl	8008e4c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008ce8:	f7fa f89c 	bl	8002e24 <HAL_PWREx_EnableOverDrive>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008cf2:	f000 f8ab 	bl	8008e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cf6:	230f      	movs	r3, #15
 8008cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d02:	2300      	movs	r3, #0
 8008d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008d18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008d1c:	2107      	movs	r1, #7
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fa fb7e 	bl	8003420 <HAL_RCC_ClockConfig>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008d2a:	f000 f88f 	bl	8008e4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008d2e:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8008d32:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008d34:	2300      	movs	r3, #0
 8008d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008d40:	2300      	movs	r3, #0
 8008d42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d44:	f107 0308 	add.w	r3, r7, #8
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fa fd6d 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008d54:	f000 f87a 	bl	8008e4c <Error_Handler>
  }
}
 8008d58:	bf00      	nop
 8008d5a:	37e0      	adds	r7, #224	; 0xe0
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	40023800 	.word	0x40023800
 8008d64:	40007000 	.word	0x40007000

08008d68 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 ff3f 	bl	800abf4 <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f006 fa40 	bl	800f1fc <slaveSPITxRxCpltCallback>

}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f006 fa5d 	bl	800f24c <slaveSPIErrorCallback>

}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d103      	bne.n	8008db8 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008db0:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e021      	b.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d103      	bne.n	8008dc6 <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008dbe:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e01a      	b.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d103      	bne.n	8008dd4 <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008dcc:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008dce:	2202      	movs	r2, #2
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	e013      	b.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	2b08      	cmp	r3, #8
 8008dd8:	d103      	bne.n	8008de2 <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008dda:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008ddc:	2203      	movs	r2, #3
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e00c      	b.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	d103      	bne.n	8008df0 <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008de8:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008dea:	2204      	movs	r2, #4
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e005      	b.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d102      	bne.n	8008dfc <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 8008df6:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008df8:	2205      	movs	r2, #5
 8008dfa:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 feba 	bl	800ab7c <ADBoard_BUSYCallback>
 8008e08:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f003 f919 	bl	800c04c <interruptCallback>
}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200008f4 	.word	0x200008f4

08008e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d101      	bne.n	8008e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008e3a:	f7f8 f8c9 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	40000c00 	.word	0x40000c00

08008e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008e50:	bf00      	nop
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008e60:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e62:	4a19      	ldr	r2, [pc, #100]	; (8008ec8 <MX_SPI1_Init+0x6c>)
 8008e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008e66:	4b17      	ldr	r3, [pc, #92]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008e6c:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e72:	4b14      	ldr	r3, [pc, #80]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e7a:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008e80:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008ea4:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008eb0:	4804      	ldr	r0, [pc, #16]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008eb2:	f7fb f8df 	bl	8004074 <HAL_SPI_Init>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008ebc:	f7ff ffc6 	bl	8008e4c <Error_Handler>
  }

}
 8008ec0:	bf00      	nop
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	200097bc 	.word	0x200097bc
 8008ec8:	40013000 	.word	0x40013000

08008ecc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008ed0:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	; (8008f44 <MX_SPI3_Init+0x78>)
 8008ed4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008edc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008ede:	4b18      	ldr	r3, [pc, #96]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008ee6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008eea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eec:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008efe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f06:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008f18:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f1a:	2207      	movs	r2, #7
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f1e:	4b08      	ldr	r3, [pc, #32]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f26:	2208      	movs	r2, #8
 8008f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008f2a:	4805      	ldr	r0, [pc, #20]	; (8008f40 <MX_SPI3_Init+0x74>)
 8008f2c:	f7fb f8a2 	bl	8004074 <HAL_SPI_Init>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008f36:	f7ff ff89 	bl	8008e4c <Error_Handler>
  }

}
 8008f3a:	bf00      	nop
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20009634 	.word	0x20009634
 8008f44:	40003c00 	.word	0x40003c00

08008f48 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f4e:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <MX_SPI4_Init+0x78>)
 8008f50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008f52:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008f60:	4b16      	ldr	r3, [pc, #88]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f62:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008f66:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008f68:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008f74:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f7e:	2210      	movs	r2, #16
 8008f80:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f82:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f96:	2207      	movs	r2, #7
 8008f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008fa0:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008fa6:	4805      	ldr	r0, [pc, #20]	; (8008fbc <MX_SPI4_Init+0x74>)
 8008fa8:	f7fb f864 	bl	8004074 <HAL_SPI_Init>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8008fb2:	f7ff ff4b 	bl	8008e4c <Error_Handler>
  }

}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20009758 	.word	0x20009758
 8008fc0:	40013400 	.word	0x40013400

08008fc4 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fca:	4a1c      	ldr	r2, [pc, #112]	; (800903c <MX_SPI6_Init+0x78>)
 8008fcc:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008fce:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fd4:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fde:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008fe2:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fe4:	4b14      	ldr	r3, [pc, #80]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <MX_SPI6_Init+0x74>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <MX_SPI6_Init+0x74>)
 8008ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ff6:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <MX_SPI6_Init+0x74>)
 8008ffa:	2230      	movs	r2, #48	; 0x30
 8008ffc:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ffe:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <MX_SPI6_Init+0x74>)
 8009000:	2200      	movs	r2, #0
 8009002:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <MX_SPI6_Init+0x74>)
 8009006:	2200      	movs	r2, #0
 8009008:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <MX_SPI6_Init+0x74>)
 800900c:	2200      	movs	r2, #0
 800900e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <MX_SPI6_Init+0x74>)
 8009012:	2207      	movs	r2, #7
 8009014:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009016:	4b08      	ldr	r3, [pc, #32]	; (8009038 <MX_SPI6_Init+0x74>)
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <MX_SPI6_Init+0x74>)
 800901e:	2208      	movs	r2, #8
 8009020:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8009022:	4805      	ldr	r0, [pc, #20]	; (8009038 <MX_SPI6_Init+0x74>)
 8009024:	f7fb f826 	bl	8004074 <HAL_SPI_Init>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 800902e:	f7ff ff0d 	bl	8008e4c <Error_Handler>
  }

}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200095d0 	.word	0x200095d0
 800903c:	40015400 	.word	0x40015400

08009040 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b092      	sub	sp, #72	; 0x48
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009048:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	605a      	str	r2, [r3, #4]
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	60da      	str	r2, [r3, #12]
 8009056:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a5b      	ldr	r2, [pc, #364]	; (80091cc <HAL_SPI_MspInit+0x18c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	f040 80c4 	bne.w	80091ec <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009064:	4b5a      	ldr	r3, [pc, #360]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 8009066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009068:	4a59      	ldr	r2, [pc, #356]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 800906a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800906e:	6453      	str	r3, [r2, #68]	; 0x44
 8009070:	4b57      	ldr	r3, [pc, #348]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 8009072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009078:	633b      	str	r3, [r7, #48]	; 0x30
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800907c:	4b54      	ldr	r3, [pc, #336]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	4a53      	ldr	r2, [pc, #332]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	6313      	str	r3, [r2, #48]	; 0x30
 8009088:	4b51      	ldr	r3, [pc, #324]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009094:	4b4e      	ldr	r3, [pc, #312]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	4a4d      	ldr	r2, [pc, #308]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 800909a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909e:	6313      	str	r3, [r2, #48]	; 0x30
 80090a0:	4b4b      	ldr	r3, [pc, #300]	; (80091d0 <HAL_SPI_MspInit+0x190>)
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80090ac:	2360      	movs	r3, #96	; 0x60
 80090ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b0:	2302      	movs	r3, #2
 80090b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090b8:	2303      	movs	r3, #3
 80090ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090bc:	2305      	movs	r3, #5
 80090be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090c4:	4619      	mov	r1, r3
 80090c6:	4843      	ldr	r0, [pc, #268]	; (80091d4 <HAL_SPI_MspInit+0x194>)
 80090c8:	f7f9 fba8 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d0:	2302      	movs	r3, #2
 80090d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090d4:	2301      	movs	r3, #1
 80090d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090d8:	2303      	movs	r3, #3
 80090da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090dc:	2305      	movs	r3, #5
 80090de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090e4:	4619      	mov	r1, r3
 80090e6:	483b      	ldr	r0, [pc, #236]	; (80091d4 <HAL_SPI_MspInit+0x194>)
 80090e8:	f7f9 fb98 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80090ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f2:	2302      	movs	r3, #2
 80090f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090fa:	2303      	movs	r3, #3
 80090fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090fe:	2305      	movs	r3, #5
 8009100:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009102:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009106:	4619      	mov	r1, r3
 8009108:	4833      	ldr	r0, [pc, #204]	; (80091d8 <HAL_SPI_MspInit+0x198>)
 800910a:	f7f9 fb87 	bl	800281c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800910e:	4b33      	ldr	r3, [pc, #204]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009110:	4a33      	ldr	r2, [pc, #204]	; (80091e0 <HAL_SPI_MspInit+0x1a0>)
 8009112:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8009114:	4b31      	ldr	r3, [pc, #196]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009116:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800911a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800911c:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 800911e:	2200      	movs	r2, #0
 8009120:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009122:	4b2e      	ldr	r3, [pc, #184]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009124:	2200      	movs	r2, #0
 8009126:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009128:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 800912a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800912e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009130:	4b2a      	ldr	r3, [pc, #168]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009132:	2200      	movs	r2, #0
 8009134:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009136:	4b29      	ldr	r3, [pc, #164]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009138:	2200      	movs	r2, #0
 800913a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800913c:	4b27      	ldr	r3, [pc, #156]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 800913e:	2200      	movs	r2, #0
 8009140:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009142:	4b26      	ldr	r3, [pc, #152]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009144:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009148:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800914a:	4b24      	ldr	r3, [pc, #144]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 800914c:	2200      	movs	r2, #0
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8009150:	4822      	ldr	r0, [pc, #136]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009152:	f7f8 ff5b 	bl	800200c <HAL_DMA_Init>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800915c:	f7ff fe76 	bl	8008e4c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009164:	659a      	str	r2, [r3, #88]	; 0x58
 8009166:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <HAL_SPI_MspInit+0x19c>)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800916c:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 800916e:	4a1e      	ldr	r2, [pc, #120]	; (80091e8 <HAL_SPI_MspInit+0x1a8>)
 8009170:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8009172:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 8009174:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009178:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 800917c:	2240      	movs	r2, #64	; 0x40
 800917e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009180:	4b18      	ldr	r3, [pc, #96]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 8009182:	2200      	movs	r2, #0
 8009184:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009186:	4b17      	ldr	r3, [pc, #92]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 8009188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800918c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 8009190:	2200      	movs	r2, #0
 8009192:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009194:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 8009196:	2200      	movs	r2, #0
 8009198:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 800919c:	2200      	movs	r2, #0
 800919e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80091a0:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 80091a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80091a8:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80091ae:	480d      	ldr	r0, [pc, #52]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 80091b0:	f7f8 ff2c 	bl	800200c <HAL_DMA_Init>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 80091ba:	f7ff fe47 	bl	8008e4c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 80091c2:	655a      	str	r2, [r3, #84]	; 0x54
 80091c4:	4a07      	ldr	r2, [pc, #28]	; (80091e4 <HAL_SPI_MspInit+0x1a4>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80091ca:	e1bb      	b.n	8009544 <HAL_SPI_MspInit+0x504>
 80091cc:	40013000 	.word	0x40013000
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40020000 	.word	0x40020000
 80091d8:	40021800 	.word	0x40021800
 80091dc:	20009820 	.word	0x20009820
 80091e0:	40026440 	.word	0x40026440
 80091e4:	20009880 	.word	0x20009880
 80091e8:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a9d      	ldr	r2, [pc, #628]	; (8009468 <HAL_SPI_MspInit+0x428>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f040 80a6 	bne.w	8009344 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80091f8:	4b9c      	ldr	r3, [pc, #624]	; (800946c <HAL_SPI_MspInit+0x42c>)
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	4a9b      	ldr	r2, [pc, #620]	; (800946c <HAL_SPI_MspInit+0x42c>)
 80091fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009202:	6413      	str	r3, [r2, #64]	; 0x40
 8009204:	4b99      	ldr	r3, [pc, #612]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009210:	4b96      	ldr	r3, [pc, #600]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009214:	4a95      	ldr	r2, [pc, #596]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	6313      	str	r3, [r2, #48]	; 0x30
 800921c:	4b93      	ldr	r3, [pc, #588]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	623b      	str	r3, [r7, #32]
 8009226:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009228:	4b90      	ldr	r3, [pc, #576]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	4a8f      	ldr	r2, [pc, #572]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800922e:	f043 0304 	orr.w	r3, r3, #4
 8009232:	6313      	str	r3, [r2, #48]	; 0x30
 8009234:	4b8d      	ldr	r3, [pc, #564]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009240:	2304      	movs	r3, #4
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009244:	2302      	movs	r3, #2
 8009246:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800924c:	2303      	movs	r3, #3
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8009250:	2307      	movs	r3, #7
 8009252:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009254:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009258:	4619      	mov	r1, r3
 800925a:	4885      	ldr	r0, [pc, #532]	; (8009470 <HAL_SPI_MspInit+0x430>)
 800925c:	f7f9 fade 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009260:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009266:	2302      	movs	r3, #2
 8009268:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926a:	2300      	movs	r3, #0
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800926e:	2303      	movs	r3, #3
 8009270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009272:	2306      	movs	r3, #6
 8009274:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800927a:	4619      	mov	r1, r3
 800927c:	487d      	ldr	r0, [pc, #500]	; (8009474 <HAL_SPI_MspInit+0x434>)
 800927e:	f7f9 facd 	bl	800281c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8009282:	4b7d      	ldr	r3, [pc, #500]	; (8009478 <HAL_SPI_MspInit+0x438>)
 8009284:	4a7d      	ldr	r2, [pc, #500]	; (800947c <HAL_SPI_MspInit+0x43c>)
 8009286:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8009288:	4b7b      	ldr	r3, [pc, #492]	; (8009478 <HAL_SPI_MspInit+0x438>)
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800928e:	4b7a      	ldr	r3, [pc, #488]	; (8009478 <HAL_SPI_MspInit+0x438>)
 8009290:	2200      	movs	r2, #0
 8009292:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009294:	4b78      	ldr	r3, [pc, #480]	; (8009478 <HAL_SPI_MspInit+0x438>)
 8009296:	2200      	movs	r2, #0
 8009298:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800929a:	4b77      	ldr	r3, [pc, #476]	; (8009478 <HAL_SPI_MspInit+0x438>)
 800929c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092a0:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80092a2:	4b75      	ldr	r3, [pc, #468]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092a8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80092aa:	4b73      	ldr	r3, [pc, #460]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80092b0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80092b2:	4b71      	ldr	r3, [pc, #452]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80092b8:	4b6f      	ldr	r3, [pc, #444]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80092be:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80092c0:	4b6d      	ldr	r3, [pc, #436]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80092c6:	486c      	ldr	r0, [pc, #432]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092c8:	f7f8 fea0 	bl	800200c <HAL_DMA_Init>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 80092d2:	f7ff fdbb 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a67      	ldr	r2, [pc, #412]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092da:	659a      	str	r2, [r3, #88]	; 0x58
 80092dc:	4a66      	ldr	r2, [pc, #408]	; (8009478 <HAL_SPI_MspInit+0x438>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80092e2:	4b67      	ldr	r3, [pc, #412]	; (8009480 <HAL_SPI_MspInit+0x440>)
 80092e4:	4a67      	ldr	r2, [pc, #412]	; (8009484 <HAL_SPI_MspInit+0x444>)
 80092e6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80092e8:	4b65      	ldr	r3, [pc, #404]	; (8009480 <HAL_SPI_MspInit+0x440>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80092ee:	4b64      	ldr	r3, [pc, #400]	; (8009480 <HAL_SPI_MspInit+0x440>)
 80092f0:	2240      	movs	r2, #64	; 0x40
 80092f2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092f4:	4b62      	ldr	r3, [pc, #392]	; (8009480 <HAL_SPI_MspInit+0x440>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80092fa:	4b61      	ldr	r3, [pc, #388]	; (8009480 <HAL_SPI_MspInit+0x440>)
 80092fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009300:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009302:	4b5f      	ldr	r3, [pc, #380]	; (8009480 <HAL_SPI_MspInit+0x440>)
 8009304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009308:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800930a:	4b5d      	ldr	r3, [pc, #372]	; (8009480 <HAL_SPI_MspInit+0x440>)
 800930c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009310:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8009312:	4b5b      	ldr	r3, [pc, #364]	; (8009480 <HAL_SPI_MspInit+0x440>)
 8009314:	2200      	movs	r2, #0
 8009316:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009318:	4b59      	ldr	r3, [pc, #356]	; (8009480 <HAL_SPI_MspInit+0x440>)
 800931a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800931e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009320:	4b57      	ldr	r3, [pc, #348]	; (8009480 <HAL_SPI_MspInit+0x440>)
 8009322:	2200      	movs	r2, #0
 8009324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8009326:	4856      	ldr	r0, [pc, #344]	; (8009480 <HAL_SPI_MspInit+0x440>)
 8009328:	f7f8 fe70 	bl	800200c <HAL_DMA_Init>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 8009332:	f7ff fd8b 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a51      	ldr	r2, [pc, #324]	; (8009480 <HAL_SPI_MspInit+0x440>)
 800933a:	655a      	str	r2, [r3, #84]	; 0x54
 800933c:	4a50      	ldr	r2, [pc, #320]	; (8009480 <HAL_SPI_MspInit+0x440>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009342:	e0ff      	b.n	8009544 <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a4f      	ldr	r2, [pc, #316]	; (8009488 <HAL_SPI_MspInit+0x448>)
 800934a:	4293      	cmp	r3, r2
 800934c:	f040 80a8 	bne.w	80094a0 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8009350:	4b46      	ldr	r3, [pc, #280]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	4a45      	ldr	r2, [pc, #276]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800935a:	6453      	str	r3, [r2, #68]	; 0x44
 800935c:	4b43      	ldr	r3, [pc, #268]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009368:	4b40      	ldr	r3, [pc, #256]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	4a3f      	ldr	r2, [pc, #252]	; (800946c <HAL_SPI_MspInit+0x42c>)
 800936e:	f043 0310 	orr.w	r3, r3, #16
 8009372:	6313      	str	r3, [r2, #48]	; 0x30
 8009374:	4b3d      	ldr	r3, [pc, #244]	; (800946c <HAL_SPI_MspInit+0x42c>)
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8009380:	f246 0304 	movw	r3, #24580	; 0x6004
 8009384:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009386:	2302      	movs	r3, #2
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800938a:	2300      	movs	r3, #0
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800938e:	2303      	movs	r3, #3
 8009390:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8009392:	2305      	movs	r3, #5
 8009394:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800939a:	4619      	mov	r1, r3
 800939c:	483b      	ldr	r0, [pc, #236]	; (800948c <HAL_SPI_MspInit+0x44c>)
 800939e:	f7f9 fa3d 	bl	800281c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80093a2:	4b3b      	ldr	r3, [pc, #236]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093a4:	4a3b      	ldr	r2, [pc, #236]	; (8009494 <HAL_SPI_MspInit+0x454>)
 80093a6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80093a8:	4b39      	ldr	r3, [pc, #228]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093ae:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093b0:	4b37      	ldr	r3, [pc, #220]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093b6:	4b36      	ldr	r3, [pc, #216]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093bc:	4b34      	ldr	r3, [pc, #208]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093c2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80093c4:	4b32      	ldr	r3, [pc, #200]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093ca:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80093cc:	4b30      	ldr	r3, [pc, #192]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80093d4:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80093da:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80093e0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093e2:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80093e8:	4829      	ldr	r0, [pc, #164]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093ea:	f7f8 fe0f 	bl	800200c <HAL_DMA_Init>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 80093f4:	f7ff fd2a 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a25      	ldr	r2, [pc, #148]	; (8009490 <HAL_SPI_MspInit+0x450>)
 80093fc:	659a      	str	r2, [r3, #88]	; 0x58
 80093fe:	4a24      	ldr	r2, [pc, #144]	; (8009490 <HAL_SPI_MspInit+0x450>)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8009404:	4b24      	ldr	r3, [pc, #144]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009406:	4a25      	ldr	r2, [pc, #148]	; (800949c <HAL_SPI_MspInit+0x45c>)
 8009408:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800940a:	4b23      	ldr	r3, [pc, #140]	; (8009498 <HAL_SPI_MspInit+0x458>)
 800940c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009410:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009412:	4b21      	ldr	r3, [pc, #132]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009414:	2240      	movs	r2, #64	; 0x40
 8009416:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009418:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <HAL_SPI_MspInit+0x458>)
 800941a:	2200      	movs	r2, #0
 800941c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800941e:	4b1e      	ldr	r3, [pc, #120]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009424:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009426:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800942c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800942e:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009434:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8009436:	4b18      	ldr	r3, [pc, #96]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009438:	2200      	movs	r2, #0
 800943a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <HAL_SPI_MspInit+0x458>)
 800943e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009442:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009444:	4b14      	ldr	r3, [pc, #80]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009446:	2200      	movs	r2, #0
 8009448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800944a:	4813      	ldr	r0, [pc, #76]	; (8009498 <HAL_SPI_MspInit+0x458>)
 800944c:	f7f8 fdde 	bl	800200c <HAL_DMA_Init>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 8009456:	f7ff fcf9 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <HAL_SPI_MspInit+0x458>)
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
 8009460:	4a0d      	ldr	r2, [pc, #52]	; (8009498 <HAL_SPI_MspInit+0x458>)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009466:	e06d      	b.n	8009544 <HAL_SPI_MspInit+0x504>
 8009468:	40003c00 	.word	0x40003c00
 800946c:	40023800 	.word	0x40023800
 8009470:	40020400 	.word	0x40020400
 8009474:	40020800 	.word	0x40020800
 8009478:	200098e0 	.word	0x200098e0
 800947c:	40026010 	.word	0x40026010
 8009480:	20009698 	.word	0x20009698
 8009484:	40026088 	.word	0x40026088
 8009488:	40013400 	.word	0x40013400
 800948c:	40021000 	.word	0x40021000
 8009490:	20009570 	.word	0x20009570
 8009494:	40026410 	.word	0x40026410
 8009498:	200096f8 	.word	0x200096f8
 800949c:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a29      	ldr	r2, [pc, #164]	; (800954c <HAL_SPI_MspInit+0x50c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d14c      	bne.n	8009544 <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80094aa:	4b29      	ldr	r3, [pc, #164]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ae:	4a28      	ldr	r2, [pc, #160]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094b4:	6453      	str	r3, [r2, #68]	; 0x44
 80094b6:	4b26      	ldr	r3, [pc, #152]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80094c2:	4b23      	ldr	r3, [pc, #140]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	4a22      	ldr	r2, [pc, #136]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094cc:	6313      	str	r3, [r2, #48]	; 0x30
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094da:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	4a1c      	ldr	r2, [pc, #112]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094e0:	f043 0302 	orr.w	r3, r3, #2
 80094e4:	6313      	str	r3, [r2, #48]	; 0x30
 80094e6:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <HAL_SPI_MspInit+0x510>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80094f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80094f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f8:	2302      	movs	r3, #2
 80094fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009500:	2303      	movs	r3, #3
 8009502:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009504:	2305      	movs	r3, #5
 8009506:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800950c:	4619      	mov	r1, r3
 800950e:	4811      	ldr	r0, [pc, #68]	; (8009554 <HAL_SPI_MspInit+0x514>)
 8009510:	f7f9 f984 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009514:	2308      	movs	r3, #8
 8009516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009518:	2302      	movs	r3, #2
 800951a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009520:	2303      	movs	r3, #3
 8009522:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8009524:	2308      	movs	r3, #8
 8009526:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800952c:	4619      	mov	r1, r3
 800952e:	480a      	ldr	r0, [pc, #40]	; (8009558 <HAL_SPI_MspInit+0x518>)
 8009530:	f7f9 f974 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8009534:	2200      	movs	r2, #0
 8009536:	2105      	movs	r1, #5
 8009538:	2056      	movs	r0, #86	; 0x56
 800953a:	f7f8 fd3d 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800953e:	2056      	movs	r0, #86	; 0x56
 8009540:	f7f8 fd56 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 8009544:	bf00      	nop
 8009546:	3748      	adds	r7, #72	; 0x48
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40015400 	.word	0x40015400
 8009550:	40023800 	.word	0x40023800
 8009554:	40021800 	.word	0x40021800
 8009558:	40020400 	.word	0x40020400

0800955c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <HAL_MspInit+0x4c>)
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	4a10      	ldr	r2, [pc, #64]	; (80095a8 <HAL_MspInit+0x4c>)
 8009568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800956c:	6413      	str	r3, [r2, #64]	; 0x40
 800956e:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <HAL_MspInit+0x4c>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009576:	607b      	str	r3, [r7, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <HAL_MspInit+0x4c>)
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HAL_MspInit+0x4c>)
 8009580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009584:	6453      	str	r3, [r2, #68]	; 0x44
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <HAL_MspInit+0x4c>)
 8009588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009592:	2200      	movs	r2, #0
 8009594:	210f      	movs	r1, #15
 8009596:	f06f 0001 	mvn.w	r0, #1
 800959a:	f7f8 fd0d 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40023800 	.word	0x40023800

080095ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	; 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80095bc:	2200      	movs	r2, #0
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	2032      	movs	r0, #50	; 0x32
 80095c2:	f7f8 fcf9 	bl	8001fb8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80095c6:	2032      	movs	r0, #50	; 0x32
 80095c8:	f7f8 fd12 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80095cc:	4b1f      	ldr	r3, [pc, #124]	; (800964c <HAL_InitTick+0xa0>)
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	4a1e      	ldr	r2, [pc, #120]	; (800964c <HAL_InitTick+0xa0>)
 80095d2:	f043 0308 	orr.w	r3, r3, #8
 80095d6:	6413      	str	r3, [r2, #64]	; 0x40
 80095d8:	4b1c      	ldr	r3, [pc, #112]	; (800964c <HAL_InitTick+0xa0>)
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80095e4:	f107 0210 	add.w	r2, r7, #16
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fa f8e8 	bl	80037c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80095f4:	f7fa f8be 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80095f8:	4603      	mov	r3, r0
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	4a13      	ldr	r2, [pc, #76]	; (8009650 <HAL_InitTick+0xa4>)
 8009602:	fba2 2303 	umull	r2, r3, r2, r3
 8009606:	0c9b      	lsrs	r3, r3, #18
 8009608:	3b01      	subs	r3, #1
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800960c:	4b11      	ldr	r3, [pc, #68]	; (8009654 <HAL_InitTick+0xa8>)
 800960e:	4a12      	ldr	r2, [pc, #72]	; (8009658 <HAL_InitTick+0xac>)
 8009610:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <HAL_InitTick+0xa8>)
 8009614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009618:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800961a:	4a0e      	ldr	r2, [pc, #56]	; (8009654 <HAL_InitTick+0xa8>)
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8009620:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <HAL_InitTick+0xa8>)
 8009622:	2200      	movs	r2, #0
 8009624:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009626:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <HAL_InitTick+0xa8>)
 8009628:	2200      	movs	r2, #0
 800962a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800962c:	4809      	ldr	r0, [pc, #36]	; (8009654 <HAL_InitTick+0xa8>)
 800962e:	f7fb fcc3 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8009638:	4806      	ldr	r0, [pc, #24]	; (8009654 <HAL_InitTick+0xa8>)
 800963a:	f7fb fce9 	bl	8005010 <HAL_TIM_Base_Start_IT>
 800963e:	4603      	mov	r3, r0
 8009640:	e000      	b.n	8009644 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
}
 8009644:	4618      	mov	r0, r3
 8009646:	3730      	adds	r7, #48	; 0x30
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	40023800 	.word	0x40023800
 8009650:	431bde83 	.word	0x431bde83
 8009654:	20009940 	.word	0x20009940
 8009658:	40000c00 	.word	0x40000c00

0800965c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009660:	bf00      	nop
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800966a:	b480      	push	{r7}
 800966c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800966e:	e7fe      	b.n	800966e <HardFault_Handler+0x4>

08009670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009674:	e7fe      	b.n	8009674 <MemManage_Handler+0x4>

08009676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009676:	b480      	push	{r7}
 8009678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800967a:	e7fe      	b.n	800967a <BusFault_Handler+0x4>

0800967c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009680:	e7fe      	b.n	8009680 <UsageFault_Handler+0x4>

08009682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009682:	b480      	push	{r7}
 8009684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009686:	bf00      	nop
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009694:	2001      	movs	r0, #1
 8009696:	f7f9 fa85 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}

0800969e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80096a2:	2002      	movs	r0, #2
 80096a4:	f7f9 fa7e 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80096a8:	bf00      	nop
 80096aa:	bd80      	pop	{r7, pc}

080096ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80096b0:	2004      	movs	r0, #4
 80096b2:	f7f9 fa77 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}

080096ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80096be:	2008      	movs	r0, #8
 80096c0:	f7f9 fa70 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80096c4:	bf00      	nop
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80096cc:	2010      	movs	r0, #16
 80096ce:	f7f9 fa69 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80096d2:	bf00      	nop
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80096dc:	4802      	ldr	r0, [pc, #8]	; (80096e8 <DMA1_Stream0_IRQHandler+0x10>)
 80096de:	f7f8 fe35 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80096e2:	bf00      	nop
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200098e0 	.word	0x200098e0

080096ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80096f0:	4802      	ldr	r0, [pc, #8]	; (80096fc <DMA1_Stream1_IRQHandler+0x10>)
 80096f2:	f7f8 fe2b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80096f6:	bf00      	nop
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20009c00 	.word	0x20009c00

08009700 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009704:	4802      	ldr	r0, [pc, #8]	; (8009710 <DMA1_Stream4_IRQHandler+0x10>)
 8009706:	f7f8 fe21 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20009ce0 	.word	0x20009ce0

08009714 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009718:	4802      	ldr	r0, [pc, #8]	; (8009724 <DMA1_Stream5_IRQHandler+0x10>)
 800971a:	f7f8 fe17 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800971e:	bf00      	nop
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20009698 	.word	0x20009698

08009728 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800972c:	4802      	ldr	r0, [pc, #8]	; (8009738 <DMA1_Stream6_IRQHandler+0x10>)
 800972e:	f7f8 fe0d 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009732:	bf00      	nop
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200094c4 	.word	0x200094c4

0800973c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009740:	4802      	ldr	r0, [pc, #8]	; (800974c <CAN1_RX0_IRQHandler+0x10>)
 8009742:	f7f8 f961 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009746:	bf00      	nop
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200013ec 	.word	0x200013ec

08009750 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009754:	4802      	ldr	r0, [pc, #8]	; (8009760 <CAN1_RX1_IRQHandler+0x10>)
 8009756:	f7f8 f957 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800975a:	bf00      	nop
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200013ec 	.word	0x200013ec

08009764 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8009768:	2020      	movs	r0, #32
 800976a:	f7f9 fa1b 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009778:	4803      	ldr	r0, [pc, #12]	; (8009788 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800977a:	f7fb fd3b 	bl	80051f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800977e:	4803      	ldr	r0, [pc, #12]	; (800978c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8009780:	f7fb fd38 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20009ac0 	.word	0x20009ac0
 800978c:	20009a00 	.word	0x20009a00

08009790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	myUsartIntIRQ(&huart1);
 8009794:	4803      	ldr	r0, [pc, #12]	; (80097a4 <USART1_IRQHandler+0x14>)
 8009796:	f004 fa05 	bl	800dba4 <myUsartIntIRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800979a:	4802      	ldr	r0, [pc, #8]	; (80097a4 <USART1_IRQHandler+0x14>)
 800979c:	f7fc fe7a 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80097a0:	bf00      	nop
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20009d40 	.word	0x20009d40

080097a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	myUsartIntIRQ(&huart2);
 80097ac:	4803      	ldr	r0, [pc, #12]	; (80097bc <USART2_IRQHandler+0x14>)
 80097ae:	f004 f9f9 	bl	800dba4 <myUsartIntIRQ>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80097b2:	4802      	ldr	r0, [pc, #8]	; (80097bc <USART2_IRQHandler+0x14>)
 80097b4:	f7fc fe6e 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80097b8:	bf00      	nop
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20009dc0 	.word	0x20009dc0

080097c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	myUsartDMAIRQ(&huart3);
 80097c4:	4803      	ldr	r0, [pc, #12]	; (80097d4 <USART3_IRQHandler+0x14>)
 80097c6:	f004 f890 	bl	800d8ea <myUsartDMAIRQ>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80097ca:	4802      	ldr	r0, [pc, #8]	; (80097d4 <USART3_IRQHandler+0x14>)
 80097cc:	f7fc fe62 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80097d0:	bf00      	nop
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20009c60 	.word	0x20009c60

080097d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80097dc:	4802      	ldr	r0, [pc, #8]	; (80097e8 <TIM5_IRQHandler+0x10>)
 80097de:	f7fb fd09 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80097e2:	bf00      	nop
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20009940 	.word	0x20009940

080097ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80097f0:	4802      	ldr	r0, [pc, #8]	; (80097fc <DMA2_Stream0_IRQHandler+0x10>)
 80097f2:	f7f8 fdab 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20009570 	.word	0x20009570

08009800 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009804:	4802      	ldr	r0, [pc, #8]	; (8009810 <DMA2_Stream1_IRQHandler+0x10>)
 8009806:	f7f8 fda1 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800980a:	bf00      	nop
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200096f8 	.word	0x200096f8

08009814 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009818:	4802      	ldr	r0, [pc, #8]	; (8009824 <DMA2_Stream2_IRQHandler+0x10>)
 800981a:	f7f8 fd97 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800981e:	bf00      	nop
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20009820 	.word	0x20009820

08009828 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800982c:	4802      	ldr	r0, [pc, #8]	; (8009838 <DMA2_Stream3_IRQHandler+0x10>)
 800982e:	f7f8 fd8d 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009832:	bf00      	nop
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20009880 	.word	0x20009880

0800983c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009840:	4802      	ldr	r0, [pc, #8]	; (800984c <DMA2_Stream4_IRQHandler+0x10>)
 8009842:	f7f8 fd83 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8009846:	bf00      	nop
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	2000138c 	.word	0x2000138c

08009850 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8009854:	4802      	ldr	r0, [pc, #8]	; (8009860 <SPI6_IRQHandler+0x10>)
 8009856:	f7fb f83f 	bl	80048d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800985a:	bf00      	nop
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	200095d0 	.word	0x200095d0

08009864 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8009868:	f7fd fcf2 	bl	8007250 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}

08009870 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009874:	4b15      	ldr	r3, [pc, #84]	; (80098cc <SystemInit+0x5c>)
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987a:	4a14      	ldr	r2, [pc, #80]	; (80098cc <SystemInit+0x5c>)
 800987c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009884:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <SystemInit+0x60>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a11      	ldr	r2, [pc, #68]	; (80098d0 <SystemInit+0x60>)
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <SystemInit+0x60>)
 8009892:	2200      	movs	r2, #0
 8009894:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009896:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <SystemInit+0x60>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	490d      	ldr	r1, [pc, #52]	; (80098d0 <SystemInit+0x60>)
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <SystemInit+0x64>)
 800989e:	4013      	ands	r3, r2
 80098a0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <SystemInit+0x60>)
 80098a4:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <SystemInit+0x68>)
 80098a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <SystemInit+0x60>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <SystemInit+0x60>)
 80098ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80098b4:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <SystemInit+0x60>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80098ba:	4b04      	ldr	r3, [pc, #16]	; (80098cc <SystemInit+0x5c>)
 80098bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098c0:	609a      	str	r2, [r3, #8]
#endif
}
 80098c2:	bf00      	nop
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	e000ed00 	.word	0xe000ed00
 80098d0:	40023800 	.word	0x40023800
 80098d4:	fef6ffff 	.word	0xfef6ffff
 80098d8:	24003010 	.word	0x24003010

080098dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b09a      	sub	sp, #104	; 0x68
 80098e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	605a      	str	r2, [r3, #4]
 80098ec:	609a      	str	r2, [r3, #8]
 80098ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	605a      	str	r2, [r3, #4]
 80098fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	605a      	str	r2, [r3, #4]
 8009906:	609a      	str	r2, [r3, #8]
 8009908:	60da      	str	r2, [r3, #12]
 800990a:	611a      	str	r2, [r3, #16]
 800990c:	615a      	str	r2, [r3, #20]
 800990e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009910:	1d3b      	adds	r3, r7, #4
 8009912:	222c      	movs	r2, #44	; 0x2c
 8009914:	2100      	movs	r1, #0
 8009916:	4618      	mov	r0, r3
 8009918:	f006 fe1f 	bl	801055a <memset>

  htim1.Instance = TIM1;
 800991c:	4b4a      	ldr	r3, [pc, #296]	; (8009a48 <MX_TIM1_Init+0x16c>)
 800991e:	4a4b      	ldr	r2, [pc, #300]	; (8009a4c <MX_TIM1_Init+0x170>)
 8009920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8009922:	4b49      	ldr	r3, [pc, #292]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009924:	f245 425f 	movw	r2, #21599	; 0x545f
 8009928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800992a:	4b47      	ldr	r3, [pc, #284]	; (8009a48 <MX_TIM1_Init+0x16c>)
 800992c:	2200      	movs	r2, #0
 800992e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009930:	4b45      	ldr	r3, [pc, #276]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009938:	4b43      	ldr	r3, [pc, #268]	; (8009a48 <MX_TIM1_Init+0x16c>)
 800993a:	2200      	movs	r2, #0
 800993c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800993e:	4b42      	ldr	r3, [pc, #264]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009940:	2200      	movs	r2, #0
 8009942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009944:	4b40      	ldr	r3, [pc, #256]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009946:	2200      	movs	r2, #0
 8009948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800994a:	483f      	ldr	r0, [pc, #252]	; (8009a48 <MX_TIM1_Init+0x16c>)
 800994c:	f7fb fb34 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8009956:	f7ff fa79 	bl	8008e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800995a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800995e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009960:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009964:	4619      	mov	r1, r3
 8009966:	4838      	ldr	r0, [pc, #224]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009968:	f7fb fe7c 	bl	8005664 <HAL_TIM_ConfigClockSource>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8009972:	f7ff fa6b 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009976:	4834      	ldr	r0, [pc, #208]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009978:	f7fb fb74 	bl	8005064 <HAL_TIM_PWM_Init>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8009982:	f7ff fa63 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009986:	2300      	movs	r3, #0
 8009988:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800998a:	2300      	movs	r3, #0
 800998c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800998e:	2300      	movs	r3, #0
 8009990:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009992:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009996:	4619      	mov	r1, r3
 8009998:	482b      	ldr	r0, [pc, #172]	; (8009a48 <MX_TIM1_Init+0x16c>)
 800999a:	f7fc fb03 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80099a4:	f7ff fa52 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80099a8:	2360      	movs	r3, #96	; 0x60
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099b0:	2300      	movs	r3, #0
 80099b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80099bc:	2300      	movs	r3, #0
 80099be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80099c0:	2300      	movs	r3, #0
 80099c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099c8:	2200      	movs	r2, #0
 80099ca:	4619      	mov	r1, r3
 80099cc:	481e      	ldr	r0, [pc, #120]	; (8009a48 <MX_TIM1_Init+0x16c>)
 80099ce:	f7fb fd31 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80099d8:	f7ff fa38 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099e0:	2204      	movs	r2, #4
 80099e2:	4619      	mov	r1, r3
 80099e4:	4818      	ldr	r0, [pc, #96]	; (8009a48 <MX_TIM1_Init+0x16c>)
 80099e6:	f7fb fd25 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80099f0:	f7ff fa2c 	bl	8008e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009a24:	1d3b      	adds	r3, r7, #4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4807      	ldr	r0, [pc, #28]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009a2a:	f7fc fb49 	bl	80060c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009a34:	f7ff fa0a 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009a38:	4803      	ldr	r0, [pc, #12]	; (8009a48 <MX_TIM1_Init+0x16c>)
 8009a3a:	f000 fcc3 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 8009a3e:	bf00      	nop
 8009a40:	3768      	adds	r7, #104	; 0x68
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20009ac0 	.word	0x20009ac0
 8009a4c:	40010000 	.word	0x40010000

08009a50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08e      	sub	sp, #56	; 0x38
 8009a54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
 8009a60:	609a      	str	r2, [r3, #8]
 8009a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a64:	f107 031c 	add.w	r3, r7, #28
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	605a      	str	r2, [r3, #4]
 8009a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a70:	463b      	mov	r3, r7
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	609a      	str	r2, [r3, #8]
 8009a7a:	60da      	str	r2, [r3, #12]
 8009a7c:	611a      	str	r2, [r3, #16]
 8009a7e:	615a      	str	r2, [r3, #20]
 8009a80:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8009a82:	4b39      	ldr	r3, [pc, #228]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8009a8a:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009a8c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a92:	4b35      	ldr	r3, [pc, #212]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009a98:	4b33      	ldr	r3, [pc, #204]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009aa0:	4b31      	ldr	r3, [pc, #196]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aa6:	4b30      	ldr	r3, [pc, #192]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009aac:	482e      	ldr	r0, [pc, #184]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009aae:	f7fb fa83 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009ab8:	f7ff f9c8 	bl	8008e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4827      	ldr	r0, [pc, #156]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009aca:	f7fb fdcb 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009ad4:	f7ff f9ba 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009ad8:	4823      	ldr	r0, [pc, #140]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009ada:	f7fb fac3 	bl	8005064 <HAL_TIM_PWM_Init>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009ae4:	f7ff f9b2 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009af0:	f107 031c 	add.w	r3, r7, #28
 8009af4:	4619      	mov	r1, r3
 8009af6:	481c      	ldr	r0, [pc, #112]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009af8:	f7fc fa54 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009b02:	f7ff f9a3 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b06:	2360      	movs	r3, #96	; 0x60
 8009b08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b16:	463b      	mov	r3, r7
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4812      	ldr	r0, [pc, #72]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009b1e:	f7fb fc89 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009b28:	f7ff f990 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4619      	mov	r1, r3
 8009b32:	480d      	ldr	r0, [pc, #52]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009b34:	f7fb fc7e 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009b3e:	f7ff f985 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009b42:	463b      	mov	r3, r7
 8009b44:	220c      	movs	r2, #12
 8009b46:	4619      	mov	r1, r3
 8009b48:	4807      	ldr	r0, [pc, #28]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009b4a:	f7fb fc73 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009b54:	f7ff f97a 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009b58:	4803      	ldr	r0, [pc, #12]	; (8009b68 <MX_TIM2_Init+0x118>)
 8009b5a:	f000 fc33 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 8009b5e:	bf00      	nop
 8009b60:	3738      	adds	r7, #56	; 0x38
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20009b40 	.word	0x20009b40

08009b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b72:	f107 031c 	add.w	r3, r7, #28
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
 8009b7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b7e:	463b      	mov	r3, r7
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	611a      	str	r2, [r3, #16]
 8009b8c:	615a      	str	r2, [r3, #20]
 8009b8e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009b90:	4b32      	ldr	r3, [pc, #200]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009b92:	4a33      	ldr	r2, [pc, #204]	; (8009c60 <MX_TIM3_Init+0xf4>)
 8009b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8009b96:	4b31      	ldr	r3, [pc, #196]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009b98:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b9e:	4b2f      	ldr	r3, [pc, #188]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009ba4:	4b2d      	ldr	r3, [pc, #180]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bac:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bb2:	4b2a      	ldr	r3, [pc, #168]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009bb8:	4828      	ldr	r0, [pc, #160]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009bba:	f7fb fa53 	bl	8005064 <HAL_TIM_PWM_Init>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009bc4:	f7ff f942 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009bd0:	f107 031c 	add.w	r3, r7, #28
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4821      	ldr	r0, [pc, #132]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009bd8:	f7fc f9e4 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009be2:	f7ff f933 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009be6:	2360      	movs	r3, #96	; 0x60
 8009be8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4817      	ldr	r0, [pc, #92]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009bfe:	f7fb fc19 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009c08:	f7ff f920 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	2204      	movs	r2, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4812      	ldr	r0, [pc, #72]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009c14:	f7fb fc0e 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009c1e:	f7ff f915 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009c22:	463b      	mov	r3, r7
 8009c24:	2208      	movs	r2, #8
 8009c26:	4619      	mov	r1, r3
 8009c28:	480c      	ldr	r0, [pc, #48]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009c2a:	f7fb fc03 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009c34:	f7ff f90a 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009c38:	463b      	mov	r3, r7
 8009c3a:	220c      	movs	r2, #12
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4807      	ldr	r0, [pc, #28]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009c40:	f7fb fbf8 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009c4a:	f7ff f8ff 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009c4e:	4803      	ldr	r0, [pc, #12]	; (8009c5c <MX_TIM3_Init+0xf0>)
 8009c50:	f000 fbb8 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 8009c54:	bf00      	nop
 8009c56:	3728      	adds	r7, #40	; 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20009a40 	.word	0x20009a40
 8009c60:	40000400 	.word	0x40000400

08009c64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08a      	sub	sp, #40	; 0x28
 8009c68:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c6a:	f107 031c 	add.w	r3, r7, #28
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	605a      	str	r2, [r3, #4]
 8009c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c76:	463b      	mov	r3, r7
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	605a      	str	r2, [r3, #4]
 8009c7e:	609a      	str	r2, [r3, #8]
 8009c80:	60da      	str	r2, [r3, #12]
 8009c82:	611a      	str	r2, [r3, #16]
 8009c84:	615a      	str	r2, [r3, #20]
 8009c86:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009c88:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009c8a:	4a33      	ldr	r2, [pc, #204]	; (8009d58 <MX_TIM4_Init+0xf4>)
 8009c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009c8e:	4b31      	ldr	r3, [pc, #196]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009c90:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c96:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009c9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ca4:	4b2b      	ldr	r3, [pc, #172]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009caa:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009cb0:	4828      	ldr	r0, [pc, #160]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009cb2:	f7fb f9d7 	bl	8005064 <HAL_TIM_PWM_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009cbc:	f7ff f8c6 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009cc8:	f107 031c 	add.w	r3, r7, #28
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4821      	ldr	r0, [pc, #132]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009cd0:	f7fc f968 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009cda:	f7ff f8b7 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009cde:	2360      	movs	r3, #96	; 0x60
 8009ce0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009cee:	463b      	mov	r3, r7
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4817      	ldr	r0, [pc, #92]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009cf6:	f7fb fb9d 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009d00:	f7ff f8a4 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d04:	463b      	mov	r3, r7
 8009d06:	2204      	movs	r2, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4812      	ldr	r0, [pc, #72]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009d0c:	f7fb fb92 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009d16:	f7ff f899 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	4619      	mov	r1, r3
 8009d20:	480c      	ldr	r0, [pc, #48]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009d22:	f7fb fb87 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009d2c:	f7ff f88e 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009d30:	463b      	mov	r3, r7
 8009d32:	220c      	movs	r2, #12
 8009d34:	4619      	mov	r1, r3
 8009d36:	4807      	ldr	r0, [pc, #28]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009d38:	f7fb fb7c 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009d42:	f7ff f883 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009d46:	4803      	ldr	r0, [pc, #12]	; (8009d54 <MX_TIM4_Init+0xf0>)
 8009d48:	f000 fb3c 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 8009d4c:	bf00      	nop
 8009d4e:	3728      	adds	r7, #40	; 0x28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200099c0 	.word	0x200099c0
 8009d58:	40000800 	.word	0x40000800

08009d5c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d62:	1d3b      	adds	r3, r7, #4
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009d6c:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d6e:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <MX_TIM7_Init+0x68>)
 8009d70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009d72:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d86:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009d8c:	480c      	ldr	r0, [pc, #48]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009d8e:	f7fb f913 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009d98:	f7ff f858 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009da4:	1d3b      	adds	r3, r7, #4
 8009da6:	4619      	mov	r1, r3
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <MX_TIM7_Init+0x64>)
 8009daa:	f7fc f8fb 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009db4:	f7ff f84a 	bl	8008e4c <Error_Handler>
  }

}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20009bc0 	.word	0x20009bc0
 8009dc4:	40001400 	.word	0x40001400

08009dc8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b09a      	sub	sp, #104	; 0x68
 8009dcc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009dce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	605a      	str	r2, [r3, #4]
 8009dd8:	609a      	str	r2, [r3, #8]
 8009dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	611a      	str	r2, [r3, #16]
 8009df8:	615a      	str	r2, [r3, #20]
 8009dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009dfc:	1d3b      	adds	r3, r7, #4
 8009dfe:	222c      	movs	r2, #44	; 0x2c
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f006 fba9 	bl	801055a <memset>

  htim8.Instance = TIM8;
 8009e08:	4b4a      	ldr	r3, [pc, #296]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e0a:	4a4b      	ldr	r2, [pc, #300]	; (8009f38 <MX_TIM8_Init+0x170>)
 8009e0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009e0e:	4b49      	ldr	r3, [pc, #292]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e10:	f245 425f 	movw	r2, #21599	; 0x545f
 8009e14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e16:	4b47      	ldr	r3, [pc, #284]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009e1c:	4b45      	ldr	r3, [pc, #276]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009e22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e24:	4b43      	ldr	r3, [pc, #268]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009e2a:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e30:	4b40      	ldr	r3, [pc, #256]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009e36:	483f      	ldr	r0, [pc, #252]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e38:	f7fb f8be 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009e42:	f7ff f803 	bl	8008e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e4a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009e4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e50:	4619      	mov	r1, r3
 8009e52:	4838      	ldr	r0, [pc, #224]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e54:	f7fb fc06 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009e5e:	f7fe fff5 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009e62:	4834      	ldr	r0, [pc, #208]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e64:	f7fb f8fe 	bl	8005064 <HAL_TIM_PWM_Init>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009e6e:	f7fe ffed 	bl	8008e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e72:	2300      	movs	r3, #0
 8009e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009e76:	2300      	movs	r3, #0
 8009e78:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e82:	4619      	mov	r1, r3
 8009e84:	482b      	ldr	r0, [pc, #172]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009e86:	f7fc f88d 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009e90:	f7fe ffdc 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e94:	2360      	movs	r3, #96	; 0x60
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009eac:	2300      	movs	r3, #0
 8009eae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	481e      	ldr	r0, [pc, #120]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009eba:	f7fb fabb 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009ec4:	f7fe ffc2 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009ec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ecc:	2204      	movs	r2, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4818      	ldr	r0, [pc, #96]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009ed2:	f7fb faaf 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009edc:	f7fe ffb6 	bl	8008e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ef8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009f10:	1d3b      	adds	r3, r7, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4807      	ldr	r0, [pc, #28]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009f16:	f7fc f8d3 	bl	80060c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009f20:	f7fe ff94 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009f24:	4803      	ldr	r0, [pc, #12]	; (8009f34 <MX_TIM8_Init+0x16c>)
 8009f26:	f000 fa4d 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 8009f2a:	bf00      	nop
 8009f2c:	3768      	adds	r7, #104	; 0x68
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20009980 	.word	0x20009980
 8009f38:	40010400 	.word	0x40010400

08009f3c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08c      	sub	sp, #48	; 0x30
 8009f40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f42:	f107 0320 	add.w	r3, r7, #32
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	605a      	str	r2, [r3, #4]
 8009f58:	609a      	str	r2, [r3, #8]
 8009f5a:	60da      	str	r2, [r3, #12]
 8009f5c:	611a      	str	r2, [r3, #16]
 8009f5e:	615a      	str	r2, [r3, #20]
 8009f60:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009f62:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f64:	4a2b      	ldr	r2, [pc, #172]	; (800a014 <MX_TIM9_Init+0xd8>)
 8009f66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 8009f68:	4b29      	ldr	r3, [pc, #164]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f6a:	f245 425f 	movw	r2, #21599	; 0x545f
 8009f6e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f70:	4b27      	ldr	r3, [pc, #156]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8009f76:	4b26      	ldr	r3, [pc, #152]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009f7c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f7e:	4b24      	ldr	r3, [pc, #144]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f84:	4b22      	ldr	r3, [pc, #136]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009f8a:	4821      	ldr	r0, [pc, #132]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009f8c:	f7fb f814 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009f96:	f7fe ff59 	bl	8008e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009fa0:	f107 0320 	add.w	r3, r7, #32
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	481a      	ldr	r0, [pc, #104]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009fa8:	f7fb fb5c 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009fb2:	f7fe ff4b 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009fb6:	4816      	ldr	r0, [pc, #88]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009fb8:	f7fb f854 	bl	8005064 <HAL_TIM_PWM_Init>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009fc2:	f7fe ff43 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009fc6:	2360      	movs	r3, #96	; 0x60
 8009fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009fd6:	1d3b      	adds	r3, r7, #4
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4619      	mov	r1, r3
 8009fdc:	480c      	ldr	r0, [pc, #48]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009fde:	f7fb fa29 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8009fe8:	f7fe ff30 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009fec:	1d3b      	adds	r3, r7, #4
 8009fee:	2204      	movs	r2, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4807      	ldr	r0, [pc, #28]	; (800a010 <MX_TIM9_Init+0xd4>)
 8009ff4:	f7fb fa1e 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009ffe:	f7fe ff25 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800a002:	4803      	ldr	r0, [pc, #12]	; (800a010 <MX_TIM9_Init+0xd4>)
 800a004:	f000 f9de 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 800a008:	bf00      	nop
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20009b00 	.word	0x20009b00
 800a014:	40014000 	.word	0x40014000

0800a018 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a01e:	1d3b      	adds	r3, r7, #4
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	605a      	str	r2, [r3, #4]
 800a026:	609a      	str	r2, [r3, #8]
 800a028:	60da      	str	r2, [r3, #12]
 800a02a:	611a      	str	r2, [r3, #16]
 800a02c:	615a      	str	r2, [r3, #20]
 800a02e:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800a030:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a032:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <MX_TIM10_Init+0x98>)
 800a034:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800a036:	4b1d      	ldr	r3, [pc, #116]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a038:	f245 425f 	movw	r2, #21599	; 0x545f
 800a03c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a03e:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a040:	2200      	movs	r2, #0
 800a042:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800a044:	4b19      	ldr	r3, [pc, #100]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a04a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a04e:	2200      	movs	r2, #0
 800a050:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a052:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a054:	2200      	movs	r2, #0
 800a056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a058:	4814      	ldr	r0, [pc, #80]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a05a:	f7fa ffad 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800a064:	f7fe fef2 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800a068:	4810      	ldr	r0, [pc, #64]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a06a:	f7fa fffb 	bl	8005064 <HAL_TIM_PWM_Init>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800a074:	f7fe feea 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a078:	2360      	movs	r3, #96	; 0x60
 800a07a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a084:	2300      	movs	r3, #0
 800a086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a088:	1d3b      	adds	r3, r7, #4
 800a08a:	2200      	movs	r2, #0
 800a08c:	4619      	mov	r1, r3
 800a08e:	4807      	ldr	r0, [pc, #28]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a090:	f7fb f9d0 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800a09a:	f7fe fed7 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800a09e:	4803      	ldr	r0, [pc, #12]	; (800a0ac <MX_TIM10_Init+0x94>)
 800a0a0:	f000 f990 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 800a0a4:	bf00      	nop
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20009a00 	.word	0x20009a00
 800a0b0:	40014400 	.word	0x40014400

0800a0b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	605a      	str	r2, [r3, #4]
 800a0c2:	609a      	str	r2, [r3, #8]
 800a0c4:	60da      	str	r2, [r3, #12]
 800a0c6:	611a      	str	r2, [r3, #16]
 800a0c8:	615a      	str	r2, [r3, #20]
 800a0ca:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 800a0cc:	4b1e      	ldr	r3, [pc, #120]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0ce:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <MX_TIM11_Init+0x98>)
 800a0d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 800a0d2:	4b1d      	ldr	r3, [pc, #116]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0d4:	f245 425f 	movw	r2, #21599	; 0x545f
 800a0d8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0da:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800a0e0:	4b19      	ldr	r3, [pc, #100]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0e6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0ee:	4b16      	ldr	r3, [pc, #88]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a0f4:	4814      	ldr	r0, [pc, #80]	; (800a148 <MX_TIM11_Init+0x94>)
 800a0f6:	f7fa ff5f 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 800a100:	f7fe fea4 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800a104:	4810      	ldr	r0, [pc, #64]	; (800a148 <MX_TIM11_Init+0x94>)
 800a106:	f7fa ffad 	bl	8005064 <HAL_TIM_PWM_Init>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800a110:	f7fe fe9c 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a114:	2360      	movs	r3, #96	; 0x60
 800a116:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a124:	1d3b      	adds	r3, r7, #4
 800a126:	2200      	movs	r2, #0
 800a128:	4619      	mov	r1, r3
 800a12a:	4807      	ldr	r0, [pc, #28]	; (800a148 <MX_TIM11_Init+0x94>)
 800a12c:	f7fb f982 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800a136:	f7fe fe89 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800a13a:	4803      	ldr	r0, [pc, #12]	; (800a148 <MX_TIM11_Init+0x94>)
 800a13c:	f000 f942 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 800a140:	bf00      	nop
 800a142:	3720      	adds	r7, #32
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20009a80 	.word	0x20009a80
 800a14c:	40014800 	.word	0x40014800

0800a150 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a156:	1d3b      	adds	r3, r7, #4
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	60da      	str	r2, [r3, #12]
 800a162:	611a      	str	r2, [r3, #16]
 800a164:	615a      	str	r2, [r3, #20]
 800a166:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800a168:	4b1e      	ldr	r3, [pc, #120]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a16a:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <MX_TIM14_Init+0x98>)
 800a16c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a170:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a174:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a176:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a178:	2200      	movs	r2, #0
 800a17a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800a17c:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a17e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a182:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a184:	4b17      	ldr	r3, [pc, #92]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a186:	2200      	movs	r2, #0
 800a188:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a18a:	4b16      	ldr	r3, [pc, #88]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a190:	4814      	ldr	r0, [pc, #80]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a192:	f7fa ff11 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800a19c:	f7fe fe56 	bl	8008e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800a1a0:	4810      	ldr	r0, [pc, #64]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a1a2:	f7fa ff5f 	bl	8005064 <HAL_TIM_PWM_Init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800a1ac:	f7fe fe4e 	bl	8008e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1b0:	2360      	movs	r3, #96	; 0x60
 800a1b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1c0:	1d3b      	adds	r3, r7, #4
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4807      	ldr	r0, [pc, #28]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a1c8:	f7fb f934 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800a1d2:	f7fe fe3b 	bl	8008e4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800a1d6:	4803      	ldr	r0, [pc, #12]	; (800a1e4 <MX_TIM14_Init+0x94>)
 800a1d8:	f000 f8f4 	bl	800a3c4 <HAL_TIM_MspPostInit>

}
 800a1dc:	bf00      	nop
 800a1de:	3720      	adds	r7, #32
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20009b80 	.word	0x20009b80
 800a1e8:	40002000 	.word	0x40002000

0800a1ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08a      	sub	sp, #40	; 0x28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a50      	ldr	r2, [pc, #320]	; (800a33c <HAL_TIM_Base_MspInit+0x150>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d114      	bne.n	800a228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a1fe:	4b50      	ldr	r3, [pc, #320]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a202:	4a4f      	ldr	r2, [pc, #316]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a204:	f043 0301 	orr.w	r3, r3, #1
 800a208:	6453      	str	r3, [r2, #68]	; 0x44
 800a20a:	4b4d      	ldr	r3, [pc, #308]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a216:	2200      	movs	r2, #0
 800a218:	2105      	movs	r1, #5
 800a21a:	2019      	movs	r0, #25
 800a21c:	f7f7 fecc 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a220:	2019      	movs	r0, #25
 800a222:	f7f7 fee5 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800a226:	e084      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a230:	d10c      	bne.n	800a24c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a232:	4b43      	ldr	r3, [pc, #268]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	4a42      	ldr	r2, [pc, #264]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	6413      	str	r3, [r2, #64]	; 0x40
 800a23e:	4b40      	ldr	r3, [pc, #256]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	623b      	str	r3, [r7, #32]
 800a248:	6a3b      	ldr	r3, [r7, #32]
}
 800a24a:	e072      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a3c      	ldr	r2, [pc, #240]	; (800a344 <HAL_TIM_Base_MspInit+0x158>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d10c      	bne.n	800a270 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a256:	4b3a      	ldr	r3, [pc, #232]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	4a39      	ldr	r2, [pc, #228]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a25c:	f043 0320 	orr.w	r3, r3, #32
 800a260:	6413      	str	r3, [r2, #64]	; 0x40
 800a262:	4b37      	ldr	r3, [pc, #220]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	69fb      	ldr	r3, [r7, #28]
}
 800a26e:	e060      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a34      	ldr	r2, [pc, #208]	; (800a348 <HAL_TIM_Base_MspInit+0x15c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d10c      	bne.n	800a294 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a27a:	4b31      	ldr	r3, [pc, #196]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27e:	4a30      	ldr	r2, [pc, #192]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a280:	f043 0302 	orr.w	r3, r3, #2
 800a284:	6453      	str	r3, [r2, #68]	; 0x44
 800a286:	4b2e      	ldr	r3, [pc, #184]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	69bb      	ldr	r3, [r7, #24]
}
 800a292:	e04e      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a2c      	ldr	r2, [pc, #176]	; (800a34c <HAL_TIM_Base_MspInit+0x160>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d10c      	bne.n	800a2b8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a29e:	4b28      	ldr	r3, [pc, #160]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a2:	4a27      	ldr	r2, [pc, #156]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2aa:	4b25      	ldr	r3, [pc, #148]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	697b      	ldr	r3, [r7, #20]
}
 800a2b6:	e03c      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a24      	ldr	r2, [pc, #144]	; (800a350 <HAL_TIM_Base_MspInit+0x164>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d114      	bne.n	800a2ec <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a2c2:	4b1f      	ldr	r3, [pc, #124]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c6:	4a1e      	ldr	r2, [pc, #120]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2cc:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ce:	4b1c      	ldr	r3, [pc, #112]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2105      	movs	r1, #5
 800a2de:	2019      	movs	r0, #25
 800a2e0:	f7f7 fe6a 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a2e4:	2019      	movs	r0, #25
 800a2e6:	f7f7 fe83 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800a2ea:	e022      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a18      	ldr	r2, [pc, #96]	; (800a354 <HAL_TIM_Base_MspInit+0x168>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d10c      	bne.n	800a310 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fa:	4a11      	ldr	r2, [pc, #68]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a2fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a300:	6453      	str	r3, [r2, #68]	; 0x44
 800a302:	4b0f      	ldr	r3, [pc, #60]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
}
 800a30e:	e010      	b.n	800a332 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a10      	ldr	r2, [pc, #64]	; (800a358 <HAL_TIM_Base_MspInit+0x16c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d10b      	bne.n	800a332 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	4a08      	ldr	r2, [pc, #32]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a324:	6413      	str	r3, [r2, #64]	; 0x40
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <HAL_TIM_Base_MspInit+0x154>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	68bb      	ldr	r3, [r7, #8]
}
 800a332:	bf00      	nop
 800a334:	3728      	adds	r7, #40	; 0x28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	40010000 	.word	0x40010000
 800a340:	40023800 	.word	0x40023800
 800a344:	40001400 	.word	0x40001400
 800a348:	40010400 	.word	0x40010400
 800a34c:	40014000 	.word	0x40014000
 800a350:	40014400 	.word	0x40014400
 800a354:	40014800 	.word	0x40014800
 800a358:	40002000 	.word	0x40002000

0800a35c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <HAL_TIM_PWM_MspInit+0x5c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10c      	bne.n	800a388 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a36e:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	4a12      	ldr	r2, [pc, #72]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a374:	f043 0302 	orr.w	r3, r3, #2
 800a378:	6413      	str	r3, [r2, #64]	; 0x40
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a386:	e010      	b.n	800a3aa <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <HAL_TIM_PWM_MspInit+0x64>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d10b      	bne.n	800a3aa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a398:	f043 0304 	orr.w	r3, r3, #4
 800a39c:	6413      	str	r3, [r2, #64]	; 0x40
 800a39e:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <HAL_TIM_PWM_MspInit+0x60>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	f003 0304 	and.w	r3, r3, #4
 800a3a6:	60bb      	str	r3, [r7, #8]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40000400 	.word	0x40000400
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40000800 	.word	0x40000800

0800a3c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b092      	sub	sp, #72	; 0x48
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	605a      	str	r2, [r3, #4]
 800a3d6:	609a      	str	r2, [r3, #8]
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4aa5      	ldr	r2, [pc, #660]	; (800a678 <HAL_TIM_MspPostInit+0x2b4>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d11d      	bne.n	800a422 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a3e6:	4ba5      	ldr	r3, [pc, #660]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ea:	4aa4      	ldr	r2, [pc, #656]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a3ec:	f043 0310 	orr.w	r3, r3, #16
 800a3f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a3f2:	4ba2      	ldr	r3, [pc, #648]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a3fe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a402:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a404:	2302      	movs	r3, #2
 800a406:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a40c:	2300      	movs	r3, #0
 800a40e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a410:	2301      	movs	r3, #1
 800a412:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a418:	4619      	mov	r1, r3
 800a41a:	4899      	ldr	r0, [pc, #612]	; (800a680 <HAL_TIM_MspPostInit+0x2bc>)
 800a41c:	f7f8 f9fe 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a420:	e168      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42a:	d13a      	bne.n	800a4a2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a42c:	4b93      	ldr	r3, [pc, #588]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	4a92      	ldr	r2, [pc, #584]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a432:	f043 0302 	orr.w	r3, r3, #2
 800a436:	6313      	str	r3, [r2, #48]	; 0x30
 800a438:	4b90      	ldr	r3, [pc, #576]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a444:	4b8d      	ldr	r3, [pc, #564]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	4a8c      	ldr	r2, [pc, #560]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	6313      	str	r3, [r2, #48]	; 0x30
 800a450:	4b8a      	ldr	r3, [pc, #552]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	62bb      	str	r3, [r7, #40]	; 0x28
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 800a45c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a462:	2302      	movs	r3, #2
 800a464:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a466:	2300      	movs	r3, #0
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a46a:	2300      	movs	r3, #0
 800a46c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a46e:	2301      	movs	r3, #1
 800a470:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a476:	4619      	mov	r1, r3
 800a478:	4882      	ldr	r0, [pc, #520]	; (800a684 <HAL_TIM_MspPostInit+0x2c0>)
 800a47a:	f7f8 f9cf 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 800a47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a484:	2302      	movs	r3, #2
 800a486:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48c:	2300      	movs	r3, #0
 800a48e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a490:	2301      	movs	r3, #1
 800a492:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800a494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a498:	4619      	mov	r1, r3
 800a49a:	487b      	ldr	r0, [pc, #492]	; (800a688 <HAL_TIM_MspPostInit+0x2c4>)
 800a49c:	f7f8 f9be 	bl	800281c <HAL_GPIO_Init>
}
 800a4a0:	e128      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a79      	ldr	r2, [pc, #484]	; (800a68c <HAL_TIM_MspPostInit+0x2c8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d139      	bne.n	800a520 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4ac:	4b73      	ldr	r3, [pc, #460]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	4a72      	ldr	r2, [pc, #456]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4b2:	f043 0304 	orr.w	r3, r3, #4
 800a4b6:	6313      	str	r3, [r2, #48]	; 0x30
 800a4b8:	4b70      	ldr	r3, [pc, #448]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4c4:	4b6d      	ldr	r3, [pc, #436]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	4a6c      	ldr	r2, [pc, #432]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4ca:	f043 0302 	orr.w	r3, r3, #2
 800a4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d0:	4b6a      	ldr	r3, [pc, #424]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	623b      	str	r3, [r7, #32]
 800a4da:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 800a4dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4865      	ldr	r0, [pc, #404]	; (800a690 <HAL_TIM_MspPostInit+0x2cc>)
 800a4fa:	f7f8 f98f 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 800a4fe:	2330      	movs	r3, #48	; 0x30
 800a500:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a502:	2302      	movs	r3, #2
 800a504:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50a:	2300      	movs	r3, #0
 800a50c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a50e:	2302      	movs	r3, #2
 800a510:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a516:	4619      	mov	r1, r3
 800a518:	485a      	ldr	r0, [pc, #360]	; (800a684 <HAL_TIM_MspPostInit+0x2c0>)
 800a51a:	f7f8 f97f 	bl	800281c <HAL_GPIO_Init>
}
 800a51e:	e0e9      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a5b      	ldr	r2, [pc, #364]	; (800a694 <HAL_TIM_MspPostInit+0x2d0>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d11d      	bne.n	800a566 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a52a:	4b54      	ldr	r3, [pc, #336]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	4a53      	ldr	r2, [pc, #332]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a530:	f043 0308 	orr.w	r3, r3, #8
 800a534:	6313      	str	r3, [r2, #48]	; 0x30
 800a536:	4b51      	ldr	r3, [pc, #324]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	61fb      	str	r3, [r7, #28]
 800a540:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 800a542:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a546:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a548:	2302      	movs	r3, #2
 800a54a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a550:	2300      	movs	r3, #0
 800a552:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a554:	2302      	movs	r3, #2
 800a556:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a55c:	4619      	mov	r1, r3
 800a55e:	484e      	ldr	r0, [pc, #312]	; (800a698 <HAL_TIM_MspPostInit+0x2d4>)
 800a560:	f7f8 f95c 	bl	800281c <HAL_GPIO_Init>
}
 800a564:	e0c6      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a4c      	ldr	r2, [pc, #304]	; (800a69c <HAL_TIM_MspPostInit+0x2d8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d11c      	bne.n	800a5aa <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a570:	4b42      	ldr	r3, [pc, #264]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	4a41      	ldr	r2, [pc, #260]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a576:	f043 0304 	orr.w	r3, r3, #4
 800a57a:	6313      	str	r3, [r2, #48]	; 0x30
 800a57c:	4b3f      	ldr	r3, [pc, #252]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800a588:	23c0      	movs	r3, #192	; 0xc0
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a58c:	2302      	movs	r3, #2
 800a58e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a590:	2300      	movs	r3, #0
 800a592:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a594:	2300      	movs	r3, #0
 800a596:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a598:	2303      	movs	r3, #3
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a59c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	483b      	ldr	r0, [pc, #236]	; (800a690 <HAL_TIM_MspPostInit+0x2cc>)
 800a5a4:	f7f8 f93a 	bl	800281c <HAL_GPIO_Init>
}
 800a5a8:	e0a4      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a3c      	ldr	r2, [pc, #240]	; (800a6a0 <HAL_TIM_MspPostInit+0x2dc>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d11c      	bne.n	800a5ee <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a5b4:	4b31      	ldr	r3, [pc, #196]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	4a30      	ldr	r2, [pc, #192]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a5ba:	f043 0310 	orr.w	r3, r3, #16
 800a5be:	6313      	str	r3, [r2, #48]	; 0x30
 800a5c0:	4b2e      	ldr	r3, [pc, #184]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 800a5cc:	2360      	movs	r3, #96	; 0x60
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a5e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4826      	ldr	r0, [pc, #152]	; (800a680 <HAL_TIM_MspPostInit+0x2bc>)
 800a5e8:	f7f8 f918 	bl	800281c <HAL_GPIO_Init>
}
 800a5ec:	e082      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a2c      	ldr	r2, [pc, #176]	; (800a6a4 <HAL_TIM_MspPostInit+0x2e0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d11c      	bne.n	800a632 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5f8:	4b20      	ldr	r3, [pc, #128]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fc:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a5fe:	f043 0320 	orr.w	r3, r3, #32
 800a602:	6313      	str	r3, [r2, #48]	; 0x30
 800a604:	4b1d      	ldr	r3, [pc, #116]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	f003 0320 	and.w	r3, r3, #32
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a614:	2302      	movs	r3, #2
 800a616:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a61c:	2300      	movs	r3, #0
 800a61e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a620:	2303      	movs	r3, #3
 800a622:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 800a624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a628:	4619      	mov	r1, r3
 800a62a:	481f      	ldr	r0, [pc, #124]	; (800a6a8 <HAL_TIM_MspPostInit+0x2e4>)
 800a62c:	f7f8 f8f6 	bl	800281c <HAL_GPIO_Init>
}
 800a630:	e060      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a1d      	ldr	r2, [pc, #116]	; (800a6ac <HAL_TIM_MspPostInit+0x2e8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d139      	bne.n	800a6b0 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a63c:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	4a0e      	ldr	r2, [pc, #56]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a642:	f043 0320 	orr.w	r3, r3, #32
 800a646:	6313      	str	r3, [r2, #48]	; 0x30
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <HAL_TIM_MspPostInit+0x2b8>)
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 800a654:	2380      	movs	r3, #128	; 0x80
 800a656:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a658:	2302      	movs	r3, #2
 800a65a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a660:	2300      	movs	r3, #0
 800a662:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a664:	2303      	movs	r3, #3
 800a666:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 800a668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a66c:	4619      	mov	r1, r3
 800a66e:	480e      	ldr	r0, [pc, #56]	; (800a6a8 <HAL_TIM_MspPostInit+0x2e4>)
 800a670:	f7f8 f8d4 	bl	800281c <HAL_GPIO_Init>
}
 800a674:	e03e      	b.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
 800a676:	bf00      	nop
 800a678:	40010000 	.word	0x40010000
 800a67c:	40023800 	.word	0x40023800
 800a680:	40021000 	.word	0x40021000
 800a684:	40020400 	.word	0x40020400
 800a688:	40020000 	.word	0x40020000
 800a68c:	40000400 	.word	0x40000400
 800a690:	40020800 	.word	0x40020800
 800a694:	40000800 	.word	0x40000800
 800a698:	40020c00 	.word	0x40020c00
 800a69c:	40010400 	.word	0x40010400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40014400 	.word	0x40014400
 800a6a8:	40021400 	.word	0x40021400
 800a6ac:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a11      	ldr	r2, [pc, #68]	; (800a6fc <HAL_TIM_MspPostInit+0x338>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d11c      	bne.n	800a6f4 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6ba:	4b11      	ldr	r3, [pc, #68]	; (800a700 <HAL_TIM_MspPostInit+0x33c>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	4a10      	ldr	r2, [pc, #64]	; (800a700 <HAL_TIM_MspPostInit+0x33c>)
 800a6c0:	f043 0320 	orr.w	r3, r3, #32
 800a6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6c6:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <HAL_TIM_MspPostInit+0x33c>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	60bb      	str	r3, [r7, #8]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 800a6d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6d8:	2302      	movs	r3, #2
 800a6da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a6e4:	2309      	movs	r3, #9
 800a6e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 800a6e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <HAL_TIM_MspPostInit+0x340>)
 800a6f0:	f7f8 f894 	bl	800281c <HAL_GPIO_Init>
}
 800a6f4:	bf00      	nop
 800a6f6:	3748      	adds	r7, #72	; 0x48
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40002000 	.word	0x40002000
 800a700:	40023800 	.word	0x40023800
 800a704:	40021400 	.word	0x40021400

0800a708 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a70e:	4a15      	ldr	r2, [pc, #84]	; (800a764 <MX_USART1_UART_Init+0x5c>)
 800a710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a712:	4b13      	ldr	r3, [pc, #76]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a71a:	4b11      	ldr	r3, [pc, #68]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a722:	2200      	movs	r2, #0
 800a724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a726:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a728:	2200      	movs	r2, #0
 800a72a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a72e:	220c      	movs	r2, #12
 800a730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a732:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a734:	2200      	movs	r2, #0
 800a736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a740:	2200      	movs	r2, #0
 800a742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a744:	4b06      	ldr	r3, [pc, #24]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a746:	2200      	movs	r2, #0
 800a748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a74a:	4805      	ldr	r0, [pc, #20]	; (800a760 <MX_USART1_UART_Init+0x58>)
 800a74c:	f7fb fd54 	bl	80061f8 <HAL_UART_Init>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a756:	f7fe fb79 	bl	8008e4c <Error_Handler>
  }

}
 800a75a:	bf00      	nop
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20009d40 	.word	0x20009d40
 800a764:	40011000 	.word	0x40011000

0800a768 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a76c:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a76e:	4a15      	ldr	r2, [pc, #84]	; (800a7c4 <MX_USART2_UART_Init+0x5c>)
 800a770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a772:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a782:	2200      	movs	r2, #0
 800a784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a788:	2200      	movs	r2, #0
 800a78a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a78e:	220c      	movs	r2, #12
 800a790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a792:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a794:	2200      	movs	r2, #0
 800a796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a79e:	4b08      	ldr	r3, [pc, #32]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a7aa:	4805      	ldr	r0, [pc, #20]	; (800a7c0 <MX_USART2_UART_Init+0x58>)
 800a7ac:	f7fb fd24 	bl	80061f8 <HAL_UART_Init>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a7b6:	f7fe fb49 	bl	8008e4c <Error_Handler>
  }

}
 800a7ba:	bf00      	nop
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20009dc0 	.word	0x20009dc0
 800a7c4:	40004400 	.word	0x40004400

0800a7c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a7cc:	4b14      	ldr	r3, [pc, #80]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7ce:	4a15      	ldr	r2, [pc, #84]	; (800a824 <MX_USART3_UART_Init+0x5c>)
 800a7d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a7d2:	4b13      	ldr	r3, [pc, #76]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a7d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a7da:	4b11      	ldr	r3, [pc, #68]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7ee:	220c      	movs	r2, #12
 800a7f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7f8:	4b09      	ldr	r3, [pc, #36]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a7fe:	4b08      	ldr	r3, [pc, #32]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a800:	2200      	movs	r2, #0
 800a802:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a804:	4b06      	ldr	r3, [pc, #24]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a806:	2200      	movs	r2, #0
 800a808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a80a:	4805      	ldr	r0, [pc, #20]	; (800a820 <MX_USART3_UART_Init+0x58>)
 800a80c:	f7fb fcf4 	bl	80061f8 <HAL_UART_Init>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a816:	f7fe fb19 	bl	8008e4c <Error_Handler>
  }

}
 800a81a:	bf00      	nop
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20009c60 	.word	0x20009c60
 800a824:	40004800 	.word	0x40004800

0800a828 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	609a      	str	r2, [r3, #8]
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a89      	ldr	r2, [pc, #548]	; (800aa6c <HAL_UART_MspInit+0x244>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d141      	bne.n	800a8ce <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a84a:	4b89      	ldr	r3, [pc, #548]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	4a88      	ldr	r2, [pc, #544]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a850:	f043 0310 	orr.w	r3, r3, #16
 800a854:	6453      	str	r3, [r2, #68]	; 0x44
 800a856:	4b86      	ldr	r3, [pc, #536]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85a:	f003 0310 	and.w	r3, r3, #16
 800a85e:	623b      	str	r3, [r7, #32]
 800a860:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a862:	4b83      	ldr	r3, [pc, #524]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a866:	4a82      	ldr	r2, [pc, #520]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a868:	f043 0302 	orr.w	r3, r3, #2
 800a86c:	6313      	str	r3, [r2, #48]	; 0x30
 800a86e:	4b80      	ldr	r3, [pc, #512]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a880:	2302      	movs	r3, #2
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a884:	2302      	movs	r3, #2
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a888:	2303      	movs	r3, #3
 800a88a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a88c:	2304      	movs	r3, #4
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a894:	4619      	mov	r1, r3
 800a896:	4877      	ldr	r0, [pc, #476]	; (800aa74 <HAL_UART_MspInit+0x24c>)
 800a898:	f7f7 ffc0 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a89c:	2340      	movs	r3, #64	; 0x40
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a8ac:	2307      	movs	r3, #7
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	486f      	ldr	r0, [pc, #444]	; (800aa74 <HAL_UART_MspInit+0x24c>)
 800a8b8:	f7f7 ffb0 	bl	800281c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2105      	movs	r1, #5
 800a8c0:	2025      	movs	r0, #37	; 0x25
 800a8c2:	f7f7 fb79 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a8c6:	2025      	movs	r0, #37	; 0x25
 800a8c8:	f7f7 fb92 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a8cc:	e0ca      	b.n	800aa64 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a69      	ldr	r2, [pc, #420]	; (800aa78 <HAL_UART_MspInit+0x250>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d130      	bne.n	800a93a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a8d8:	4b65      	ldr	r3, [pc, #404]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8dc:	4a64      	ldr	r2, [pc, #400]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e2:	6413      	str	r3, [r2, #64]	; 0x40
 800a8e4:	4b62      	ldr	r3, [pc, #392]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8f0:	4b5f      	ldr	r3, [pc, #380]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f4:	4a5e      	ldr	r2, [pc, #376]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8f6:	f043 0308 	orr.w	r3, r3, #8
 800a8fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fc:	4b5c      	ldr	r3, [pc, #368]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a908:	2360      	movs	r3, #96	; 0x60
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a90c:	2302      	movs	r3, #2
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a910:	2302      	movs	r3, #2
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a914:	2303      	movs	r3, #3
 800a916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a918:	2307      	movs	r3, #7
 800a91a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a91c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a920:	4619      	mov	r1, r3
 800a922:	4856      	ldr	r0, [pc, #344]	; (800aa7c <HAL_UART_MspInit+0x254>)
 800a924:	f7f7 ff7a 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a928:	2200      	movs	r2, #0
 800a92a:	2105      	movs	r1, #5
 800a92c:	2026      	movs	r0, #38	; 0x26
 800a92e:	f7f7 fb43 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a932:	2026      	movs	r0, #38	; 0x26
 800a934:	f7f7 fb5c 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800a938:	e094      	b.n	800aa64 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART3)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a50      	ldr	r2, [pc, #320]	; (800aa80 <HAL_UART_MspInit+0x258>)
 800a940:	4293      	cmp	r3, r2
 800a942:	f040 808f 	bne.w	800aa64 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a946:	4b4a      	ldr	r3, [pc, #296]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	4a49      	ldr	r2, [pc, #292]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a94c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a950:	6413      	str	r3, [r2, #64]	; 0x40
 800a952:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a95e:	4b44      	ldr	r3, [pc, #272]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a962:	4a43      	ldr	r2, [pc, #268]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a964:	f043 0308 	orr.w	r3, r3, #8
 800a968:	6313      	str	r3, [r2, #48]	; 0x30
 800a96a:	4b41      	ldr	r3, [pc, #260]	; (800aa70 <HAL_UART_MspInit+0x248>)
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	f003 0308 	and.w	r3, r3, #8
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a97a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97c:	2302      	movs	r3, #2
 800a97e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a980:	2302      	movs	r3, #2
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a984:	2303      	movs	r3, #3
 800a986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a988:	2307      	movs	r3, #7
 800a98a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a990:	4619      	mov	r1, r3
 800a992:	483a      	ldr	r0, [pc, #232]	; (800aa7c <HAL_UART_MspInit+0x254>)
 800a994:	f7f7 ff42 	bl	800281c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a998:	4b3a      	ldr	r3, [pc, #232]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a99a:	4a3b      	ldr	r2, [pc, #236]	; (800aa88 <HAL_UART_MspInit+0x260>)
 800a99c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a99e:	4b39      	ldr	r3, [pc, #228]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9a6:	4b37      	ldr	r3, [pc, #220]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9ac:	4b35      	ldr	r3, [pc, #212]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a9b2:	4b34      	ldr	r3, [pc, #208]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9ba:	4b32      	ldr	r3, [pc, #200]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9c0:	4b30      	ldr	r3, [pc, #192]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a9c6:	4b2f      	ldr	r3, [pc, #188]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a9cc:	4b2d      	ldr	r3, [pc, #180]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a9d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9d4:	4b2b      	ldr	r3, [pc, #172]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a9da:	482a      	ldr	r0, [pc, #168]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9dc:	f7f7 fb16 	bl	800200c <HAL_DMA_Init>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800a9e6:	f7fe fa31 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a25      	ldr	r2, [pc, #148]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9ee:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9f0:	4a24      	ldr	r2, [pc, #144]	; (800aa84 <HAL_UART_MspInit+0x25c>)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800a9f6:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800a9f8:	4a25      	ldr	r2, [pc, #148]	; (800aa90 <HAL_UART_MspInit+0x268>)
 800a9fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800a9fc:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800a9fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800aa02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa04:	4b21      	ldr	r3, [pc, #132]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa06:	2240      	movs	r2, #64	; 0x40
 800aa08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa0a:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aa10:	4b1e      	ldr	r3, [pc, #120]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa1e:	4b1b      	ldr	r3, [pc, #108]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800aa24:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aa2a:	4b18      	ldr	r3, [pc, #96]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa30:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa32:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800aa38:	4814      	ldr	r0, [pc, #80]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa3a:	f7f7 fae7 	bl	800200c <HAL_DMA_Init>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <HAL_UART_MspInit+0x220>
      Error_Handler();
 800aa44:	f7fe fa02 	bl	8008e4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a10      	ldr	r2, [pc, #64]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa4c:	669a      	str	r2, [r3, #104]	; 0x68
 800aa4e:	4a0f      	ldr	r2, [pc, #60]	; (800aa8c <HAL_UART_MspInit+0x264>)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800aa54:	2200      	movs	r2, #0
 800aa56:	2105      	movs	r1, #5
 800aa58:	2027      	movs	r0, #39	; 0x27
 800aa5a:	f7f7 faad 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800aa5e:	2027      	movs	r0, #39	; 0x27
 800aa60:	f7f7 fac6 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800aa64:	bf00      	nop
 800aa66:	3738      	adds	r7, #56	; 0x38
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40011000 	.word	0x40011000
 800aa70:	40023800 	.word	0x40023800
 800aa74:	40020400 	.word	0x40020400
 800aa78:	40004400 	.word	0x40004400
 800aa7c:	40020c00 	.word	0x40020c00
 800aa80:	40004800 	.word	0x40004800
 800aa84:	20009c00 	.word	0x20009c00
 800aa88:	40026028 	.word	0x40026028
 800aa8c:	20009ce0 	.word	0x20009ce0
 800aa90:	40026070 	.word	0x40026070

0800aa94 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f001 fa9c 	bl	800bfe2 <DigitalWrite>
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aac0:	2101      	movs	r1, #1
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 fa8d 	bl	800bfe2 <DigitalWrite>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aade:	2100      	movs	r1, #0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f001 fa7e 	bl	800bfe2 <DigitalWrite>
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aafc:	2101      	movs	r1, #1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 fa6f 	bl	800bfe2 <DigitalWrite>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f001 fa60 	bl	800bfe2 <DigitalWrite>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab38:	2101      	movs	r1, #1
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f001 fa51 	bl	800bfe2 <DigitalWrite>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff ffb9 	bl	800aad0 <AD_CONV_LOW>
	delay_ns(200);
 800ab5e:	20c8      	movs	r0, #200	; 0xc8
 800ab60:	f001 fac4 	bl	800c0ec <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffc2 	bl	800aaee <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800ab86:	2301      	movs	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	613b      	str	r3, [r7, #16]
 800ab8e:	e024      	b.n	800abda <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ab90:	4b16      	ldr	r3, [pc, #88]	; (800abec <ADBoard_BUSYCallback+0x70>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	440b      	add	r3, r1
 800aba0:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aba8:	88fa      	ldrh	r2, [r7, #6]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d112      	bne.n	800abd4 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <ADBoard_BUSYCallback+0x70>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	b292      	uxth	r2, r2
 800abb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff ff6a 	bl	800aa94 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	2308      	movs	r3, #8
 800abc8:	4909      	ldr	r1, [pc, #36]	; (800abf0 <ADBoard_BUSYCallback+0x74>)
 800abca:	f7f9 fcf9 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
				break;
 800abd2:	e005      	b.n	800abe0 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	ddd7      	ble.n	800ab90 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800abe0:	697b      	ldr	r3, [r7, #20]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000010 	.word	0x20000010
 800abf0:	20000014 	.word	0x20000014

0800abf4 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	int ret=1;
 800abfc:	2301      	movs	r3, #1
 800abfe:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800ac00:	2300      	movs	r3, #0
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	e081      	b.n	800ad0a <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ac06:	4b45      	ldr	r3, [pc, #276]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ac08:	6819      	ldr	r1, [r3, #0]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	440b      	add	r3, r1
 800ac16:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d170      	bne.n	800ad04 <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
 800ac22:	4b3e      	ldr	r3, [pc, #248]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	b292      	uxth	r2, r2
 800ac2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800ac2e:	68b8      	ldr	r0, [r7, #8]
 800ac30:	f7ff ff3f 	bl	800aab2 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	e01a      	b.n	800ac80 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac5a:	eddf 6a31 	vldr	s13, [pc, #196]	; 800ad20 <ADBoard_SPICallback+0x12c>
 800ac5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ac68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3304      	adds	r3, #4
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	dde1      	ble.n	800ac4a <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800ac86:	4b25      	ldr	r3, [pc, #148]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac8e:	3301      	adds	r3, #1
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc19      	bgt.n	800acc8 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800ac94:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ac9c:	4b1f      	ldr	r3, [pc, #124]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3201      	adds	r2, #1
 800aca2:	b292      	uxth	r2, r2
 800aca4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800aca8:	4b1c      	ldr	r3, [pc, #112]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b1b      	ldr	r3, [pc, #108]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acb4:	4619      	mov	r1, r3
 800acb6:	460b      	mov	r3, r1
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	4413      	add	r3, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff ff41 	bl	800ab48 <AD7616_getVoltage>
 800acc6:	e01a      	b.n	800acfe <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800acc8:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800acd4:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2201      	movs	r2, #1
 800acda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800acde:	f001 f9d5 	bl	800c08c <micros>
 800ace2:	4602      	mov	r2, r0
 800ace4:	4b0d      	ldr	r3, [pc, #52]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <ADBoard_SPICallback+0x128>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	1a8a      	subs	r2, r1, r2
 800acfc:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
					break;
 800ad02:	e006      	b.n	800ad12 <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	3301      	adds	r3, #1
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f77f af7a 	ble.w	800ac06 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800ad12:	697b      	ldr	r3, [r7, #20]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	20000010 	.word	0x20000010
 800ad20:	47800000 	.word	0x47800000

0800ad24 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <ADBoard_Reset+0x34>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff feeb 	bl	800ab0c <AD_RESET_LOW>
	delay_us(5);
 800ad36:	2005      	movs	r0, #5
 800ad38:	f001 f9be 	bl	800c0b8 <delay_us>
	AD_RESET_HIGH(ptADDev);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fef4 	bl	800ab2a <AD_RESET_HIGH>
	delay_us(5);
 800ad42:	2005      	movs	r0, #5
 800ad44:	f001 f9b8 	bl	800c0b8 <delay_us>
	AD_RESET_LOW(ptADDev);}
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fedf 	bl	800ab0c <AD_RESET_LOW>

}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000010 	.word	0x20000010

0800ad5c <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800ad60:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <ADBoard_updateVoltage+0x48>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800ad6a:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <ADBoard_updateVoltage+0x48>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800ad74:	f001 f98a 	bl	800c08c <micros>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <ADBoard_updateVoltage+0x48>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800ad80:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <ADBoard_updateVoltage+0x48>)
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <ADBoard_updateVoltage+0x48>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	460b      	mov	r3, r1
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	4413      	add	r3, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff fed5 	bl	800ab48 <AD7616_getVoltage>
}
 800ad9e:	bf00      	nop
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000010 	.word	0x20000010

0800ada8 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800adb2:	88fb      	ldrh	r3, [r7, #6]
 800adb4:	2b07      	cmp	r3, #7
 800adb6:	d814      	bhi.n	800ade2 <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD76x6_CHANNELNUM;
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	08db      	lsrs	r3, r3, #3
 800adbc:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD76x6_CHANNELNUM;
 800adbe:	88fb      	ldrh	r3, [r7, #6]
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <AnalogRead_External+0x50>)
 800adc8:	6819      	ldr	r1, [r3, #0]
 800adca:	89fa      	ldrh	r2, [r7, #14]
 800adcc:	89b8      	ldrh	r0, [r7, #12]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4403      	add	r3, r0
 800add8:	3304      	adds	r3, #4
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	e001      	b.n	800ade6 <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800ade2:	f04f 0300 	mov.w	r3, #0
 800ade6:	ee07 3a90 	vmov	s15, r3
}
 800adea:	eeb0 0a67 	vmov.f32	s0, s15
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	20000010 	.word	0x20000010

0800adfc <ADBoard_Init>:

void ADBoard_Init()
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800ae02:	230b      	movs	r3, #11
 800ae04:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800ae06:	230c      	movs	r3, #12
 800ae08:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800ae0a:	230d      	movs	r3, #13
 800ae0c:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800ae12:	4b28      	ldr	r3, [pc, #160]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800ae1e:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800ae28:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800ae30:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2200      	movs	r2, #0
 800ae36:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800ae40:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a1c      	ldr	r2, [pc, #112]	; (800aeb8 <ADBoard_Init+0xbc>)
 800ae46:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1b      	ldr	r2, [pc, #108]	; (800aebc <ADBoard_Init+0xc0>)
 800ae4e:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800ae50:	4b18      	ldr	r3, [pc, #96]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ae58:	4b16      	ldr	r3, [pc, #88]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ae60:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae68:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800ae6c:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <ADBoard_Init+0xc4>)
 800ae72:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800ae74:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	79fa      	ldrb	r2, [r7, #7]
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	797a      	ldrb	r2, [r7, #5]
 800ae86:	b292      	uxth	r2, r2
 800ae88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	79ba      	ldrb	r2, [r7, #6]
 800ae92:	b292      	uxth	r2, r2
 800ae94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <ADBoard_Init+0xb8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	793a      	ldrb	r2, [r7, #4]
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800aea4:	f7ff ff3e 	bl	800ad24 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800aea8:	f7ff ff58 	bl	800ad5c <ADBoard_updateVoltage>
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	20000010 	.word	0x20000010
 800aeb8:	c1200000 	.word	0xc1200000
 800aebc:	41200000 	.word	0x41200000
 800aec0:	20009758 	.word	0x20009758

0800aec4 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800aec4:	b5b0      	push	{r4, r5, r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3304      	adds	r3, #4
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f96f 	bl	800c1bc <_ZN14SOLENOID_VALVEC1Ei>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	331c      	adds	r3, #28
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f001 f969 	bl	800c1bc <_ZN14SOLENOID_VALVEC1Ei>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3334      	adds	r3, #52	; 0x34
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fbc1 	bl	800b678 <_ZN15PRESSURE_SENSORC1Ei>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3350      	adds	r3, #80	; 0x50
 800aefa:	4618      	mov	r0, r3
 800aefc:	f003 f826 	bl	800df4c <_ZN18PRESSURE_SENSORSPIC1Ev>
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	f241 036c 	movw	r3, #4204	; 0x106c
 800af06:	4413      	add	r3, r2
 800af08:	4a64      	ldr	r2, [pc, #400]	; (800b09c <_ZN7CHAMBERC1Eiii+0x1d8>)
 800af0a:	461c      	mov	r4, r3
 800af0c:	4615      	mov	r5, r2
 800af0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af1a:	682b      	ldr	r3, [r5, #0]
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800af24:	4a5e      	ldr	r2, [pc, #376]	; (800b0a0 <_ZN7CHAMBERC1Eiii+0x1dc>)
 800af26:	461c      	mov	r4, r3
 800af28:	4615      	mov	r5, r2
 800af2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800af40:	4413      	add	r3, r2
 800af42:	4a58      	ldr	r2, [pc, #352]	; (800b0a4 <_ZN7CHAMBERC1Eiii+0x1e0>)
 800af44:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800af4c:	4413      	add	r3, r2
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68f9      	ldr	r1, [r7, #12]
 800af52:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800af56:	440b      	add	r3, r1
 800af58:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	4a52      	ldr	r2, [pc, #328]	; (800b0a8 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800af5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pressure=0;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f04f 0200 	mov.w	r2, #0
 800af72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f04f 0200 	mov.w	r2, #0
 800af7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pressureDeadZone = 2000;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a47      	ldr	r2, [pc, #284]	; (800b0ac <_ZN7CHAMBERC1Eiii+0x1e8>)
 800af90:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4a46      	ldr	r2, [pc, #280]	; (800b0b0 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800af96:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4a46      	ldr	r2, [pc, #280]	; (800b0b4 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800af9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	f241 035c 	movw	r3, #4188	; 0x105c
 800afa6:	4413      	add	r3, r2
 800afa8:	2201      	movs	r2, #1
 800afaa:	601a      	str	r2, [r3, #0]
	opening = 0;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f04f 0200 	mov.w	r2, #0
 800afb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da00      	bge.n	800afc6 <_ZN7CHAMBERC1Eiii+0x102>
 800afc4:	3301      	adds	r3, #1
 800afc6:	105b      	asrs	r3, r3, #1
 800afc8:	4a3b      	ldr	r2, [pc, #236]	; (800b0b8 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	4413      	add	r3, r2
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	da00      	bge.n	800afde <_ZN7CHAMBERC1Eiii+0x11a>
 800afdc:	3301      	adds	r3, #1
 800afde:	105b      	asrs	r3, r3, #1
 800afe0:	4a35      	ldr	r2, [pc, #212]	; (800b0b8 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	4413      	add	r3, r2
 800afe6:	3304      	adds	r3, #4
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da00      	bge.n	800aff8 <_ZN7CHAMBERC1Eiii+0x134>
 800aff6:	3301      	adds	r3, #1
 800aff8:	105b      	asrs	r3, r3, #1
 800affa:	4a2f      	ldr	r2, [pc, #188]	; (800b0b8 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	4413      	add	r3, r2
 800b000:	3308      	adds	r3, #8
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da00      	bge.n	800b012 <_ZN7CHAMBERC1Eiii+0x14e>
 800b010:	3301      	adds	r3, #1
 800b012:	105b      	asrs	r3, r3, #1
 800b014:	4a28      	ldr	r2, [pc, #160]	; (800b0b8 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	4413      	add	r3, r2
 800b01a:	330c      	adds	r3, #12
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b02a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800b02e:	eddf 4a23 	vldr	s9, [pc, #140]	; 800b0bc <_ZN7CHAMBERC1Eiii+0x1f8>
 800b032:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800b0c0 <_ZN7CHAMBERC1Eiii+0x1fc>
 800b036:	eddf 3a23 	vldr	s7, [pc, #140]	; 800b0c4 <_ZN7CHAMBERC1Eiii+0x200>
 800b03a:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800b0c4 <_ZN7CHAMBERC1Eiii+0x200>
 800b03e:	eddf 2a22 	vldr	s5, [pc, #136]	; 800b0c8 <_ZN7CHAMBERC1Eiii+0x204>
 800b042:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800b0cc <_ZN7CHAMBERC1Eiii+0x208>
 800b046:	eddf 1a22 	vldr	s3, [pc, #136]	; 800b0d0 <_ZN7CHAMBERC1Eiii+0x20c>
 800b04a:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800b0d4 <_ZN7CHAMBERC1Eiii+0x210>
 800b04e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b0c4 <_ZN7CHAMBERC1Eiii+0x200>
 800b052:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b0d8 <_ZN7CHAMBERC1Eiii+0x214>
 800b056:	f000 faad 	bl	800b5b4 <NewPressureController>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	f241 0364 	movw	r3, #4196	; 0x1064
 800b066:	4413      	add	r3, r2
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	f241 0368 	movw	r3, #4200	; 0x1068
 800b07c:	4413      	add	r3, r2
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	33bc      	adds	r3, #188	; 0xbc
 800b086:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f005 fa64 	bl	801055a <memset>

}
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bdb0      	pop	{r4, r5, r7, pc}
 800b09c:	080149c0 	.word	0x080149c0
 800b0a0:	080149f4 	.word	0x080149f4
 800b0a4:	3e99999a 	.word	0x3e99999a
 800b0a8:	3c23d70a 	.word	0x3c23d70a
 800b0ac:	44fa0000 	.word	0x44fa0000
 800b0b0:	46ea6000 	.word	0x46ea6000
 800b0b4:	c6ea6000 	.word	0xc6ea6000
 800b0b8:	20000034 	.word	0x20000034
 800b0bc:	3e99999a 	.word	0x3e99999a
 800b0c0:	387ba882 	.word	0x387ba882
 800b0c4:	00000000 	.word	0x00000000
 800b0c8:	37a7c5ac 	.word	0x37a7c5ac
 800b0cc:	471c4000 	.word	0x471c4000
 800b0d0:	501502f9 	.word	0x501502f9
 800b0d4:	3a83126f 	.word	0x3a83126f
 800b0d8:	48435000 	.word	0x48435000

0800b0dc <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 f88d 	bl	800c210 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	331c      	adds	r3, #28
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f001 f887 	bl	800c210 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3334      	adds	r3, #52	; 0x34
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fb17 	bl	800b73c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b12a:	bf00      	nop
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <_ZN7CHAMBER12readPressureEv>:

float CHAMBER::readPressure(){
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]

	/************************customize the correct pressure souce according to the project**********/

	pressureRaw = pressureSensor.read();
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3334      	adds	r3, #52	; 0x34
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fabe 	bl	800b6c4 <_ZN15PRESSURE_SENSOR4readEv>
 800b148:	eef0 7a40 	vmov.f32	s15, s0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	//pressureRaw = pressureSensorspi.read();
	pressure=pressureRaw-pressureOffset;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800b15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b16e:	ee07 3a90 	vmov	s15, r3
}
 800b172:	eeb0 0a67 	vmov.f32	s0, s15
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800b188:	edd7 7a00 	vldr	s15, [r7]
 800b18c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b370 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800b190:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	d501      	bpl.n	800b19e <_ZN7CHAMBER13writePressureEf+0x22>
 800b19a:	4b76      	ldr	r3, [pc, #472]	; (800b374 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800b19c:	e00b      	b.n	800b1b6 <_ZN7CHAMBER13writePressureEf+0x3a>
 800b19e:	edd7 7a00 	vldr	s15, [r7]
 800b1a2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b378 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800b1a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	dd01      	ble.n	800b1b4 <_ZN7CHAMBER13writePressureEf+0x38>
 800b1b0:	4b72      	ldr	r3, [pc, #456]	; (800b37c <_ZN7CHAMBER13writePressureEf+0x200>)
 800b1b2:	e000      	b.n	800b1b6 <_ZN7CHAMBER13writePressureEf+0x3a>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	float pErr = pressureCommand-pressure;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b1c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1cc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b1d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	d54e      	bpl.n	800b282 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b1f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fc:	dd03      	ble.n	800b206 <_ZN7CHAMBER13writePressureEf+0x8a>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b204:	e019      	b.n	800b23a <_ZN7CHAMBER13writePressureEf+0xbe>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b212:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b216:	edd7 7a03 	vldr	s15, [r7, #12]
 800b21a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b222:	d508      	bpl.n	800b236 <_ZN7CHAMBER13writePressureEf+0xba>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b234:	e001      	b.n	800b23a <_ZN7CHAMBER13writePressureEf+0xbe>
 800b236:	edd7 7a03 	vldr	s15, [r7, #12]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b240:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b250:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b254:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b264:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b26e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b272:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b280:	e06a      	b.n	800b358 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b288:	eeb1 7a67 	vneg.f32	s14, s15
 800b28c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b298:	dd59      	ble.n	800b34e <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b2ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b2b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2bc:	dd08      	ble.n	800b2d0 <_ZN7CHAMBER13writePressureEf+0x154>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b2ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2ce:	e013      	b.n	800b2f8 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b2d6:	eef1 6a67 	vneg.f32	s13, s15
 800b2da:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2de:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e6:	d505      	bpl.n	800b2f4 <_ZN7CHAMBER13writePressureEf+0x178>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b2ee:	eef1 7a67 	vneg.f32	s15, s15
 800b2f2:	e001      	b.n	800b2f8 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b2f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b304:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b308:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b318:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b31c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b326:	eef1 6a67 	vneg.f32	s13, s15
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b336:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b33a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b33e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b342:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b34c:	e004      	b.n	800b358 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b35e:	eeb0 0a67 	vmov.f32	s0, s15
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f80c 	bl	800b380 <_ZN7CHAMBER12writeOpeningEf>
}
 800b368:	bf00      	nop
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	c7c35000 	.word	0xc7c35000
 800b374:	c7c35000 	.word	0xc7c35000
 800b378:	482fc800 	.word	0x482fc800
 800b37c:	482fc800 	.word	0x482fc800

0800b380 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b38c:	edd7 7a00 	vldr	s15, [r7]
 800b390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b398:	dd2b      	ble.n	800b3f2 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b39a:	edd7 7a00 	vldr	s15, [r7]
 800b39e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a6:	d502      	bpl.n	800b3ae <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	e00c      	b.n	800b3c8 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b3ae:	edd7 7a00 	vldr	s15, [r7]
 800b3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3be:	dd02      	ble.n	800b3c6 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b3c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b3c4:	e000      	b.n	800b3c8 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	1d1a      	adds	r2, r3, #4
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f000 ff27 	bl	800c230 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	331c      	adds	r3, #28
 800b3e6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b454 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 ff20 	bl	800c230 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b3f0:	e02c      	b.n	800b44c <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b3f2:	edd7 7a00 	vldr	s15, [r7]
 800b3f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b402:	d501      	bpl.n	800b408 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b404:	4b14      	ldr	r3, [pc, #80]	; (800b458 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b406:	e00a      	b.n	800b41e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b408:	edd7 7a00 	vldr	s15, [r7]
 800b40c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	dd02      	ble.n	800b41c <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b416:	f04f 0300 	mov.w	r3, #0
 800b41a:	e000      	b.n	800b41e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3304      	adds	r3, #4
 800b428:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b454 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 feff 	bl	800c230 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f103 021c 	add.w	r2, r3, #28
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b43e:	eef1 7a67 	vneg.f32	s15, s15
 800b442:	eeb0 0a67 	vmov.f32	s0, s15
 800b446:	4610      	mov	r0, r2
 800b448:	f000 fef2 	bl	800c230 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	00000000 	.word	0x00000000
 800b458:	bf800000 	.word	0xbf800000
 800b45c:	00000000 	.word	0x00000000

0800b460 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b46a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b46e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b472:	edd7 7a01 	vldr	s15, [r7, #4]
 800b476:	eef0 7ae7 	vabs.f32	s15, s15
 800b47a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b47e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b4a0 <mySAT+0x40>
 800b482:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b486:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b48a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b48e:	eeb0 0a67 	vmov.f32	s0, s15
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w
 800b4a0:	47ae147b 	.word	0x47ae147b
 800b4a4:	3f847ae1 	.word	0x3f847ae1

0800b4a8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b4b4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	ed93 7a08 	vldr	s14, [r3, #32]
 800b4ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	edd3 6a07 	vldr	s13, [r3, #28]
 800b4d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b57c <superTwisting2rdSMCUpdate+0xd4>
 800b4e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	edd3 7a02 	vldr	s15, [r3, #8]
 800b4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b4fc:	f7ff ffb0 	bl	800b460 <mySAT>
 800b500:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	edd3 7a02 	vldr	s15, [r3, #8]
 800b50a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	edd3 7a04 	vldr	s15, [r3, #16]
 800b514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b518:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b51c:	f04f 0300 	mov.w	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	61fb      	str	r3, [r7, #28]
 800b526:	f107 0314 	add.w	r3, r7, #20
 800b52a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b52c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b538:	db09      	blt.n	800b54e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b53a:	ed97 0a07 	vldr	s0, [r7, #28]
 800b53e:	f003 ffdf 	bl	800f500 <sqrtf>
 800b542:	eef0 7a40 	vmov.f32	s15, s0
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	edc3 7a00 	vstr	s15, [r3]
 800b54c:	e003      	b.n	800b556 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	f04f 0200 	mov.w	r2, #0
 800b554:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b556:	ed97 7a05 	vldr	s14, [r7, #20]
 800b55a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	ee07 3a90 	vmov	s15, r3
}
 800b570:	eeb0 0a67 	vmov.f32	s0, s15
 800b574:	3728      	adds	r7, #40	; 0x28
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	447a0000 	.word	0x447a0000

0800b580 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	ed87 0a02 	vstr	s0, [r7, #8]
 800b58c:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3324      	adds	r3, #36	; 0x24
 800b594:	edd7 0a01 	vldr	s1, [r7, #4]
 800b598:	ed97 0a02 	vldr	s0, [r7, #8]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff ff83 	bl	800b4a8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a6:	ee07 3a90 	vmov	s15, r3
}
 800b5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08c      	sub	sp, #48	; 0x30
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b5be:	edc7 0a08 	vstr	s1, [r7, #32]
 800b5c2:	ed87 1a07 	vstr	s2, [r7, #28]
 800b5c6:	edc7 1a06 	vstr	s3, [r7, #24]
 800b5ca:	ed87 2a05 	vstr	s4, [r7, #20]
 800b5ce:	edc7 2a04 	vstr	s5, [r7, #16]
 800b5d2:	ed87 3a03 	vstr	s6, [r7, #12]
 800b5d6:	edc7 3a02 	vstr	s7, [r7, #8]
 800b5da:	ed87 4a01 	vstr	s8, [r7, #4]
 800b5de:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b5e2:	204c      	movs	r0, #76	; 0x4c
 800b5e4:	f004 ffa6 	bl	8010534 <malloc>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b5ec:	224c      	movs	r2, #76	; 0x4c
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f2:	f004 ffb2 	bl	801055a <memset>
	pController->psource = psource;
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fa:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	6a3a      	ldr	r2, [r7, #32]
 800b600:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	69fa      	ldr	r2, [r7, #28]
 800b606:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b608:	ed97 1a07 	vldr	s2, [r7, #28]
 800b60c:	edd7 0a05 	vldr	s1, [r7, #20]
 800b610:	ed97 0a06 	vldr	s0, [r7, #24]
 800b614:	f001 fc62 	bl	800cedc <newSimpleKalmanFilter>
 800b618:	4602      	mov	r2, r0
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b61e:	edd7 2a00 	vldr	s5, [r7]
 800b622:	ed97 2a01 	vldr	s4, [r7, #4]
 800b626:	edd7 1a07 	vldr	s3, [r7, #28]
 800b62a:	ed97 1a02 	vldr	s2, [r7, #8]
 800b62e:	edd7 0a03 	vldr	s1, [r7, #12]
 800b632:	ed97 0a04 	vldr	s0, [r7, #16]
 800b636:	f002 f891 	bl	800d75c <newPID>
 800b63a:	4602      	mov	r2, r0
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	69fa      	ldr	r2, [r7, #28]
 800b644:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	4a08      	ldr	r2, [pc, #32]	; (800b66c <NewPressureController+0xb8>)
 800b64a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b652:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	4a06      	ldr	r2, [pc, #24]	; (800b670 <NewPressureController+0xbc>)
 800b658:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	4a05      	ldr	r2, [pc, #20]	; (800b674 <NewPressureController+0xc0>)
 800b65e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b662:	4618      	mov	r0, r3
 800b664:	3730      	adds	r7, #48	; 0x30
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	3627c5ac 	.word	0x3627c5ac
 800b670:	41a00000 	.word	0x41a00000
 800b674:	0800b581 	.word	0x0800b581

0800b678 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	605a      	str	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f851 	bl	800b73c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b69a:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b6bc <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b69e:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b6c0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b6a2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b6a6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f854 	bl	800b758 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	48927c00 	.word	0x48927c00
 800b6c0:	00000000 	.word	0x00000000

0800b6c4 <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fc62 	bl	800bf9c <AnalogRead>
 800b6d8:	eef0 7a40 	vmov.f32	s15, s0
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	ed93 7a05 	vldr	s14, [r3, #20]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	edd3 6a01 	vldr	s13, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b6f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	ed93 6a06 	vldr	s12, [r3, #24]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	edd3 7a05 	vldr	s15, [r3, #20]
 800b704:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b708:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	edd3 6a04 	vldr	s13, [r3, #16]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	edd3 7a03 	vldr	s15, [r3, #12]
 800b718:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b71c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b720:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	ee07 3a90 	vmov	s15, r3
}
 800b732:	eeb0 0a67 	vmov.f32	s0, s15
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]

}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6178      	str	r0, [r7, #20]
 800b760:	ed87 0a04 	vstr	s0, [r7, #16]
 800b764:	edc7 0a03 	vstr	s1, [r7, #12]
 800b768:	ed87 1a02 	vstr	s2, [r7, #8]
 800b76c:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	619a      	str	r2, [r3, #24]
}
 800b788:	bf00      	nop
 800b78a:	371c      	adds	r7, #28
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 f852 	bl	800b850 <_ZN4PUMPC1Ei>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	330c      	adds	r3, #12
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ff60 	bl	800b678 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f817 	bl	800b7f0 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]
	direction=0;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f04f 0200 	mov.w	r2, #0
 800b7dc:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b7fc:	68b9      	ldr	r1, [r7, #8]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 f808 	bl	800b814 <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 f813 	bl	800b832 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3304      	adds	r3, #4
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 f824 	bl	800b872 <_ZN4PUMP6attachEi>
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	330c      	adds	r3, #12
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff ff7a 	bl	800b73c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	status=0;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	605a      	str	r2, [r3, #4]
	attach(num);
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f805 	bl	800b872 <_ZN4PUMP6attachEi>
}
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	601a      	str	r2, [r3, #0]
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
	...

0800b890 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
 800b890:	b480      	push	{r7}
 800b892:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800b894:	4b07      	ldr	r3, [pc, #28]	; (800b8b4 <PWM_CS_LOW+0x24>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 800b89c:	461a      	mov	r2, r3
 800b89e:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <PWM_CS_LOW+0x24>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b8a6:	0412      	lsls	r2, r2, #16
 800b8a8:	619a      	str	r2, [r3, #24]
}
 800b8aa:	bf00      	nop
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	20000214 	.word	0x20000214

0800b8b8 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800b8bc:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <PWM_CS_HIGH+0x20>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 800b8c4:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <PWM_CS_HIGH+0x20>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b8cc:	619a      	str	r2, [r3, #24]
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	20000214 	.word	0x20000214

0800b8dc <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
 800b8e0:	f7ff ffea 	bl	800b8b8 <PWM_CS_HIGH>
	delay_us(2);
 800b8e4:	2002      	movs	r0, #2
 800b8e6:	f000 fbe7 	bl	800c0b8 <delay_us>
	PWM_CS_LOW();
 800b8ea:	f7ff ffd1 	bl	800b890 <PWM_CS_LOW>
}
 800b8ee:	bf00      	nop
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <PWMBoardSPI_sendFrame+0x30>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <PWMBoardSPI_sendFrame+0x30>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4619      	mov	r1, r3
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <PWMBoardSPI_sendFrame+0x30>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800b910:	2302      	movs	r3, #2
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	23db      	movs	r3, #219	; 0xdb
 800b916:	f7f8 fc3f 	bl	8004198 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800b91a:	f7ff ffdf 	bl	800b8dc <PWMBoardSPI_Callback>
}
 800b91e:	bf00      	nop
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20000214 	.word	0x20000214

0800b928 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b932:	2300      	movs	r3, #0
 800b934:	60fb      	str	r3, [r7, #12]
 800b936:	e00e      	b.n	800b956 <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800b938:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <PWMBoardSPI_bufferCMD+0x40>)
 800b93a:	6819      	ldr	r1, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4613      	mov	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	440b      	add	r3, r1
 800b94a:	3348      	adds	r3, #72	; 0x48
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	dded      	ble.n	800b938 <PWMBoardSPI_bufferCMD+0x10>
}
 800b95c:	bf00      	nop
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	20000214 	.word	0x20000214

0800b96c <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	ed87 0a00 	vstr	s0, [r7]
 800b978:	80fb      	strh	r3, [r7, #6]

	uint16_t on;

	on = round(4096 * fduty);
 800b97a:	edd7 7a00 	vldr	s15, [r7]
 800b97e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bab0 <PWMBoardSPI_bufferDutyChannel+0x144>
 800b982:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b986:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b98a:	eeb0 0b47 	vmov.f64	d0, d7
 800b98e:	f003 fc97 	bl	800f2c0 <round>
 800b992:	eeb0 7b40 	vmov.f64	d7, d0
 800b996:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b99a:	ee17 3a90 	vmov	r3, s15
 800b99e:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800b9a0:	8bfb      	ldrh	r3, [r7, #30]
 800b9a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	bf28      	it	cs
 800b9aa:	4613      	movcs	r3, r2
 800b9ac:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	2b8f      	cmp	r3, #143	; 0x8f
 800b9b2:	bf28      	it	cs
 800b9b4:	238f      	movcs	r3, #143	; 0x8f
 800b9b6:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	4a3e      	ldr	r2, [pc, #248]	; (800bab4 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800b9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c0:	095b      	lsrs	r3, r3, #5
 800b9c2:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b9c4:	88fa      	ldrh	r2, [r7, #6]
 800b9c6:	4b3b      	ldr	r3, [pc, #236]	; (800bab4 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800b9c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b9cc:	0959      	lsrs	r1, r3, #5
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	440b      	add	r3, r1
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	837b      	strh	r3, [r7, #26]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800b9da:	8b7b      	ldrh	r3, [r7, #26]
 800b9dc:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800b9e0:	837b      	strh	r3, [r7, #26]

	uint16_t quo=(boardNum/2);
 800b9e2:	8b7b      	ldrh	r3, [r7, #26]
 800b9e4:	085b      	lsrs	r3, r3, #1
 800b9e6:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800b9e8:	8b7b      	ldrh	r3, [r7, #26]
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800b9f0:	8b3b      	ldrh	r3, [r7, #24]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	0052      	lsls	r2, r2, #1
 800b9f6:	4413      	add	r3, r2
 800b9f8:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b9fa:	4b2f      	ldr	r3, [pc, #188]	; (800bab8 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800b9fc:	6819      	ldr	r1, [r3, #0]
 800b9fe:	8bba      	ldrh	r2, [r7, #28]
 800ba00:	8ab8      	ldrh	r0, [r7, #20]
 800ba02:	4613      	mov	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	4413      	add	r3, r2
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	4403      	add	r3, r0
 800ba0e:	440b      	add	r3, r1
 800ba10:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800ba12:	8afb      	ldrh	r3, [r7, #22]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d11c      	bne.n	800ba52 <PWMBoardSPI_bufferDutyChannel+0xe6>
			*pt++=(uint8_t)((on>>4)&0xFF);
 800ba18:	8bfb      	ldrh	r3, [r7, #30]
 800ba1a:	091b      	lsrs	r3, r3, #4
 800ba1c:	b299      	uxth	r1, r3
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	613a      	str	r2, [r7, #16]
 800ba24:	b2ca      	uxtb	r2, r1
 800ba26:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	f003 030f 	and.w	r3, r3, #15
 800ba34:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800ba36:	8bfb      	ldrh	r3, [r7, #30]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	b25a      	sxtb	r2, r3
 800ba40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	b25b      	sxtb	r3, r3
 800ba48:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	7bba      	ldrb	r2, [r7, #14]
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e01e      	b.n	800ba90 <PWMBoardSPI_bufferDutyChannel+0x124>
		//	*pt=(uint8_t)(((*pt)&0x0F)|((uint8_t)(on&0x0F)<<4));
	}
	else
	{
		pt++;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	3301      	adds	r3, #1
 800ba56:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	f023 030f 	bic.w	r3, r3, #15
 800ba64:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800ba66:	8bfb      	ldrh	r3, [r7, #30]
 800ba68:	0a1b      	lsrs	r3, r3, #8
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	f003 030f 	and.w	r3, r3, #15
 800ba72:	b25a      	sxtb	r2, r3
 800ba74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	b25b      	sxtb	r3, r3
 800ba7c:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	613a      	str	r2, [r7, #16]
 800ba84:	7bfa      	ldrb	r2, [r7, #15]
 800ba86:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800ba88:	8bfb      	ldrh	r3, [r7, #30]
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	701a      	strb	r2, [r3, #0]
//		*pt=(uint8_t)(((*pt)&0xF0)|((uint8_t)(on>>8)));
//		pt++;
//		*pt=(uint8_t)(on&0xFF);

	}
	ptPWMBoardSPI->dirtyDuty=1;
 800ba90:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800ba9a:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff ff40 	bl	800b928 <PWMBoardSPI_bufferCMD>
}
 800baa8:	bf00      	nop
 800baaa:	3720      	adds	r7, #32
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	45800000 	.word	0x45800000
 800bab4:	aaaaaaab 	.word	0xaaaaaaab
 800bab8:	20000214 	.word	0x20000214

0800babc <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	460a      	mov	r2, r1
 800bac6:	80fb      	strh	r3, [r7, #6]
 800bac8:	4613      	mov	r3, r2
 800baca:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800bacc:	88fb      	ldrh	r3, [r7, #6]
 800bace:	2b8f      	cmp	r3, #143	; 0x8f
 800bad0:	bf28      	it	cs
 800bad2:	238f      	movcs	r3, #143	; 0x8f
 800bad4:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	4a27      	ldr	r2, [pc, #156]	; (800bb78 <PWMBoardSPI_bufferCorrection+0xbc>)
 800bada:	fba2 2303 	umull	r2, r3, r2, r3
 800bade:	095b      	lsrs	r3, r3, #5
 800bae0:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <PWMBoardSPI_bufferCorrection+0xbc>)
 800bae6:	fba3 1302 	umull	r1, r3, r3, r2
 800baea:	0959      	lsrs	r1, r3, #5
 800baec:	460b      	mov	r3, r1
 800baee:	005b      	lsls	r3, r3, #1
 800baf0:	440b      	add	r3, r1
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800baf8:	8abb      	ldrh	r3, [r7, #20]
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800bafe:	8abb      	ldrh	r3, [r7, #20]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	823b      	strh	r3, [r7, #16]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800bb06:	8abb      	ldrh	r3, [r7, #20]
 800bb08:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800bb0c:	82bb      	strh	r3, [r7, #20]

	uint16_t startingBytesNum=quo*3;
 800bb0e:	8a7b      	ldrh	r3, [r7, #18]
 800bb10:	461a      	mov	r2, r3
 800bb12:	0052      	lsls	r2, r2, #1
 800bb14:	4413      	add	r3, r2
 800bb16:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800bb18:	4b18      	ldr	r3, [pc, #96]	; (800bb7c <PWMBoardSPI_bufferCorrection+0xc0>)
 800bb1a:	6819      	ldr	r1, [r3, #0]
 800bb1c:	8afa      	ldrh	r2, [r7, #22]
 800bb1e:	89f8      	ldrh	r0, [r7, #14]
 800bb20:	4613      	mov	r3, r2
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	4413      	add	r3, r2
 800bb2a:	4403      	add	r3, r0
 800bb2c:	440b      	add	r3, r1
 800bb2e:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800bb30:	8a3b      	ldrh	r3, [r7, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d105      	bne.n	800bb42 <PWMBoardSPI_bufferCorrection+0x86>
		*pt=(uint8_t)(value<<2);
 800bb36:	797b      	ldrb	r3, [r7, #5]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	e00e      	b.n	800bb60 <PWMBoardSPI_bufferCorrection+0xa4>
	}
	else
	{
		pt++;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	3301      	adds	r3, #1
 800bb46:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	60ba      	str	r2, [r7, #8]
 800bb4e:	797a      	ldrb	r2, [r7, #5]
 800bb50:	0892      	lsrs	r2, r2, #2
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800bb56:	797b      	ldrb	r3, [r7, #5]
 800bb58:	019b      	lsls	r3, r3, #6
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <PWMBoardSPI_bufferCorrection+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800bb6a:	2020      	movs	r0, #32
 800bb6c:	f7ff fedc 	bl	800b928 <PWMBoardSPI_bufferCMD>
}
 800bb70:	bf00      	nop
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	aaaaaaab 	.word	0xaaaaaaab
 800bb7c:	20000214 	.word	0x20000214

0800bb80 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <PWMBoardSPI_setOutputEnable+0x14>
 800bb90:	2330      	movs	r3, #48	; 0x30
 800bb92:	e000      	b.n	800bb96 <PWMBoardSPI_setOutputEnable+0x16>
 800bb94:	2340      	movs	r3, #64	; 0x40
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff fec6 	bl	800b928 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800bb9c:	f7ff feaa 	bl	800b8f4 <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800bba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bba4:	f7f5 fa34 	bl	8001010 <HAL_Delay>
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800bbba:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <PWMBoardSPI_setCorrectionEnable+0x34>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800bbc2:	f003 0201 	and.w	r2, r3, #1
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	f1c3 0301 	rsb	r3, r3, #1
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d004      	beq.n	800bbda <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800bbd0:	2070      	movs	r0, #112	; 0x70
 800bbd2:	f7ff fea9 	bl	800b928 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
 800bbd6:	f7ff fe8d 	bl	800b8f4 <PWMBoardSPI_sendFrame>
		}
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000214 	.word	0x20000214

0800bbe8 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <PWMBoardSPI_startPWMCK+0x3c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bbfa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fc44 	bl	800c48c <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800bc04:	ed97 0a01 	vldr	s0, [r7, #4]
 800bc08:	f000 f80e 	bl	800bc28 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <PWMBoardSPI_startPWMCK+0x3c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 feb5 	bl	800c984 <PWMBuiltInStartChannel>
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20000214 	.word	0x20000214

0800bc28 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800bc32:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc3a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800bd20 <PWMBoardSPI_writeFrequency+0xf8>
 800bc3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc46:	d501      	bpl.n	800bc4c <PWMBoardSPI_writeFrequency+0x24>
 800bc48:	4b3b      	ldr	r3, [pc, #236]	; (800bd38 <PWMBoardSPI_writeFrequency+0x110>)
 800bc4a:	e00b      	b.n	800bc64 <PWMBoardSPI_writeFrequency+0x3c>
 800bc4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc50:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800bd3c <PWMBoardSPI_writeFrequency+0x114>
 800bc54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	dd01      	ble.n	800bc62 <PWMBoardSPI_writeFrequency+0x3a>
 800bc5e:	4b38      	ldr	r3, [pc, #224]	; (800bd40 <PWMBoardSPI_writeFrequency+0x118>)
 800bc60:	e000      	b.n	800bc64 <PWMBoardSPI_writeFrequency+0x3c>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800bc66:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc6a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bd44 <PWMBoardSPI_writeFrequency+0x11c>
 800bc6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc72:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800bc76:	4b34      	ldr	r3, [pc, #208]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bc7e:	ed97 7a03 	vldr	s14, [r7, #12]
 800bc82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc86:	eef0 7ae7 	vabs.f32	s15, s15
 800bc8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc8e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800bd28 <PWMBoardSPI_writeFrequency+0x100>
 800bc92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc9a:	dc00      	bgt.n	800bc9e <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800bc9c:	e03a      	b.n	800bd14 <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800bc9e:	4b2a      	ldr	r3, [pc, #168]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800bca8:	4b27      	ldr	r3, [pc, #156]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800bcb2:	4b25      	ldr	r3, [pc, #148]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bcba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bcbe:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800bd30 <PWMBoardSPI_writeFrequency+0x108>
 800bcc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcca:	d501      	bpl.n	800bcd0 <PWMBoardSPI_writeFrequency+0xa8>
 800bccc:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <PWMBoardSPI_writeFrequency+0x124>)
 800bcce:	e010      	b.n	800bcf2 <PWMBoardSPI_writeFrequency+0xca>
 800bcd0:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bcd8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bd50 <PWMBoardSPI_writeFrequency+0x128>
 800bcdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce4:	dd01      	ble.n	800bcea <PWMBoardSPI_writeFrequency+0xc2>
 800bce6:	4b1b      	ldr	r3, [pc, #108]	; (800bd54 <PWMBoardSPI_writeFrequency+0x12c>)
 800bce8:	e003      	b.n	800bcf2 <PWMBoardSPI_writeFrequency+0xca>
 800bcea:	4b17      	ldr	r3, [pc, #92]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bcf2:	4a15      	ldr	r2, [pc, #84]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 800bd02:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <PWMBoardSPI_writeFrequency+0x120>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bd0a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd0e:	4610      	mov	r0, r2
 800bd10:	f000 fc5a 	bl	800c5c8 <PWMBuiltIn_writeFrequency>
}
 800bd14:	bf00      	nop
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	f3af 8000 	nop.w
 800bd20:	88e368f1 	.word	0x88e368f1
 800bd24:	3ee4f8b5 	.word	0x3ee4f8b5
 800bd28:	a0b5ed8d 	.word	0xa0b5ed8d
 800bd2c:	3eb0c6f7 	.word	0x3eb0c6f7
 800bd30:	eb851eb8 	.word	0xeb851eb8
 800bd34:	3f9eb851 	.word	0x3f9eb851
 800bd38:	3727c5ac 	.word	0x3727c5ac
 800bd3c:	459c4000 	.word	0x459c4000
 800bd40:	459c4000 	.word	0x459c4000
 800bd44:	45800000 	.word	0x45800000
 800bd48:	20000214 	.word	0x20000214
 800bd4c:	3cf5c28f 	.word	0x3cf5c28f
 800bd50:	4bcdfe60 	.word	0x4bcdfe60
 800bd54:	4bcdfe60 	.word	0x4bcdfe60

0800bd58 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	ed87 0a00 	vstr	s0, [r7]
 800bd64:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	ed97 0a00 	vldr	s0, [r7]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fdfd 	bl	800b96c <PWMBoardSPI_bufferDutyChannel>
}
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	4603      	mov	r3, r0
 800bd82:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	e009      	b.n	800bd9e <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	79fa      	ldrb	r2, [r7, #7]
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fe92 	bl	800babc <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b8f      	cmp	r3, #143	; 0x8f
 800bda2:	ddf2      	ble.n	800bd8a <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800bda4:	f7ff fda6 	bl	800b8f4 <PWMBoardSPI_sendFrame>
}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800bdb6:	f000 f969 	bl	800c08c <micros>
 800bdba:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d106      	bne.n	800bdd6 <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800bdc8:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
 800bdd2:	f7ff fd8f 	bl	800b8f4 <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800bdd6:	f000 f959 	bl	800c08c <micros>
 800bdda:	4601      	mov	r1, r0
 800bddc:	4b04      	ldr	r3, [pc, #16]	; (800bdf0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	1a8a      	subs	r2, r1, r2
 800bde4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20000214 	.word	0x20000214

0800bdf4 <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800bdfa:	4b36      	ldr	r3, [pc, #216]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800be02:	2100      	movs	r1, #0
 800be04:	4618      	mov	r0, r3
 800be06:	f004 fba8 	bl	801055a <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800be0a:	4b32      	ldr	r3, [pc, #200]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a32      	ldr	r2, [pc, #200]	; (800bed8 <PWMBoardSPI_init+0xe4>)
 800be10:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
 800be14:	4b2f      	ldr	r3, [pc, #188]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a30      	ldr	r2, [pc, #192]	; (800bedc <PWMBoardSPI_init+0xe8>)
 800be1a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
 800be1e:	4b2d      	ldr	r3, [pc, #180]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be26:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800be2a:	4b2a      	ldr	r3, [pc, #168]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2213      	movs	r2, #19
 800be30:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800be34:	4b27      	ldr	r3, [pc, #156]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2210      	movs	r2, #16
 800be3a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
 800be3e:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
 800be48:	4b22      	ldr	r3, [pc, #136]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
 800be52:	4b20      	ldr	r3, [pc, #128]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2200      	movs	r2, #0
 800be58:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
 800be5c:	4b1d      	ldr	r3, [pc, #116]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2200      	movs	r2, #0
 800be62:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
 800be66:	4b1b      	ldr	r3, [pc, #108]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
 800be70:	4b18      	ldr	r3, [pc, #96]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2200      	movs	r2, #0
 800be76:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800be7a:	4b16      	ldr	r3, [pc, #88]	; (800bed4 <PWMBoardSPI_init+0xe0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800be82:	4618      	mov	r0, r3
 800be84:	f000 fd96 	bl	800c9b4 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800be88:	f7ff fd02 	bl	800b890 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800be8c:	203f      	movs	r0, #63	; 0x3f
 800be8e:	f7ff ff74 	bl	800bd7a <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800be92:	2300      	movs	r3, #0
 800be94:	607b      	str	r3, [r7, #4]
 800be96:	e009      	b.n	800beac <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bee0 <PWMBoardSPI_init+0xec>
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd63 	bl	800b96c <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3301      	adds	r3, #1
 800beaa:	607b      	str	r3, [r7, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b8f      	cmp	r3, #143	; 0x8f
 800beb0:	ddf2      	ble.n	800be98 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
 800beb2:	f7ff fd1f 	bl	800b8f4 <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
 800beb6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800bee4 <PWMBoardSPI_init+0xf0>
 800beba:	f7ff fe95 	bl	800bbe8 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800bebe:	2000      	movs	r0, #0
 800bec0:	f7ff fe76 	bl	800bbb0 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800bec4:	2001      	movs	r0, #1
 800bec6:	f7ff fe5b 	bl	800bb80 <PWMBoardSPI_setOutputEnable>

}
 800beca:	bf00      	nop
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000214 	.word	0x20000214
 800bed8:	20009634 	.word	0x20009634
 800bedc:	40021000 	.word	0x40021000
 800bee0:	00000000 	.word	0x00000000
 800bee4:	42200000 	.word	0x42200000

0800bee8 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800bee8:	b590      	push	{r4, r7, lr}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	330c      	adds	r3, #12
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fc4a 	bl	800b794 <_ZN15PRESSURE_SOURCEC1Eii>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3344      	adds	r3, #68	; 0x44
 800bf04:	2200      	movs	r2, #0
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff fc43 	bl	800b794 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2104      	movs	r1, #4
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f004 fad8 	bl	80104d0 <calloc>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f004 facf 	bl	80104d0 <calloc>
 800bf32:	4603      	mov	r3, r0
 800bf34:	461a      	mov	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	889b      	ldrh	r3, [r3, #4]
 800bf42:	461a      	mov	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4293      	cmp	r3, r2
 800bf48:	da18      	bge.n	800bf7c <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800bf4a:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800bf4e:	f003 f99d 	bl	800f28c <_Znwj>
 800bf52:	4603      	mov	r3, r0
 800bf54:	461c      	mov	r4, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	0059      	lsls	r1, r3, #1
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7fe ffae 	bl	800aec4 <_ZN7CHAMBERC1Eiii>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689a      	ldr	r2, [r3, #8]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3301      	adds	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e7e0      	b.n	800bf3e <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a05      	ldr	r2, [pc, #20]	; (800bf94 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800bf80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 40;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a04      	ldr	r2, [pc, #16]	; (800bf98 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800bf88:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd90      	pop	{r4, r7, pc}
 800bf94:	44fa0000 	.word	0x44fa0000
 800bf98:	42200000 	.word	0x42200000

0800bf9c <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800bfac:	88fb      	ldrh	r3, [r7, #6]
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d806      	bhi.n	800bfc0 <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 f993 	bl	800c2e0 <AnalogRead_BuiltIn>
 800bfba:	ed87 0a03 	vstr	s0, [r7, #12]
 800bfbe:	e008      	b.n	800bfd2 <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800bfc0:	88fb      	ldrh	r3, [r7, #6]
 800bfc2:	3b06      	subs	r3, #6
 800bfc4:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800bfc6:	88fb      	ldrh	r3, [r7, #6]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe feed 	bl	800ada8 <AnalogRead_External>
 800bfce:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	ee07 3a90 	vmov	s15, r3

}
 800bfd8:	eeb0 0a67 	vmov.f32	s0, s15
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	4603      	mov	r3, r0
 800bfea:	460a      	mov	r2, r1
 800bfec:	80fb      	strh	r3, [r7, #6]
 800bfee:	4613      	mov	r3, r2
 800bff0:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800bff2:	88ba      	ldrh	r2, [r7, #4]
 800bff4:	88fb      	ldrh	r3, [r7, #6]
 800bff6:	4611      	mov	r1, r2
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 f9ab 	bl	800c354 <DigitalBuiltIn_Write>
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	4603      	mov	r3, r0
 800c00e:	ed87 0a00 	vstr	s0, [r7]
 800c012:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800c014:	88fb      	ldrh	r3, [r7, #6]
 800c016:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800c018:	88fb      	ldrh	r3, [r7, #6]
 800c01a:	2b13      	cmp	r3, #19
 800c01c:	d806      	bhi.n	800c02c <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	ed97 0a00 	vldr	s0, [r7]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fa31 	bl	800c48c <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800c02a:	e00b      	b.n	800c044 <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800c02c:	89fb      	ldrh	r3, [r7, #14]
 800c02e:	3b14      	subs	r3, #20
 800c030:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800c032:	88fb      	ldrh	r3, [r7, #6]
 800c034:	2b8f      	cmp	r3, #143	; 0x8f
 800c036:	d805      	bhi.n	800c044 <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800c038:	88fb      	ldrh	r3, [r7, #6]
 800c03a:	ed97 0a00 	vldr	s0, [r7]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fe8a 	bl	800bd58 <PWMBoardSPI_writeDuty>
}
 800c044:	bf00      	nop
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
};
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <serial1Callback>:

__weak void serial1Callback(char *pWirelessReceiveBuffer) {
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	printf("Running default serial1Callback()\r\n");
 800c068:	4803      	ldr	r0, [pc, #12]	; (800c078 <serial1Callback+0x18>)
 800c06a:	f005 f9bd 	bl	80113e8 <puts>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	08014aa4 	.word	0x08014aa4

0800c07c <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800c080:	f7f4 ffba 	bl	8000ff8 <HAL_GetTick>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <micros>:

uint32_t micros()
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800c092:	f7ff fff3 	bl	800c07c <millis>
 800c096:	4602      	mov	r2, r0
 800c098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c09c:	fb03 f202 	mul.w	r2, r3, r2
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <micros+0x28>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	4413      	add	r3, r2
 800c0a8:	607b      	str	r3, [r7, #4]
	return t;
 800c0aa:	687b      	ldr	r3, [r7, #4]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20009940 	.word	0x20009940

0800c0b8 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800c0c0:	f7ff ffe4 	bl	800c08c <micros>
 800c0c4:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800c0c6:	f7ff ffe1 	bl	800c08c <micros>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	bfcc      	ite	gt
 800c0d8:	2301      	movgt	r3, #1
 800c0da:	2300      	movle	r3, #0
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d000      	beq.n	800c0e4 <delay_us+0x2c>
 800c0e2:	e7f0      	b.n	800c0c6 <delay_us+0xe>
}
 800c0e4:	bf00      	nop
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800c0f4:	4b20      	ldr	r3, [pc, #128]	; (800c178 <delay_ns+0x8c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b1f      	ldr	r3, [pc, #124]	; (800c178 <delay_ns+0x8c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800c104:	4b1c      	ldr	r3, [pc, #112]	; (800c178 <delay_ns+0x8c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	461a      	mov	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4293      	cmp	r3, r2
 800c110:	bfcc      	ite	gt
 800c112:	2301      	movgt	r3, #1
 800c114:	2300      	movle	r3, #0
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d000      	beq.n	800c11e <delay_ns+0x32>
 800c11c:	e7f2      	b.n	800c104 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800c11e:	4b16      	ldr	r3, [pc, #88]	; (800c178 <delay_ns+0x8c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6a1a      	ldr	r2, [r3, #32]
 800c124:	f241 1311 	movw	r3, #4369	; 0x1111
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf0c      	ite	eq
 800c12e:	2301      	moveq	r3, #1
 800c130:	2300      	movne	r3, #0
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d014      	beq.n	800c162 <delay_ns+0x76>
 800c138:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <delay_ns+0x8c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6a1a      	ldr	r2, [r3, #32]
 800c13e:	f240 4344 	movw	r3, #1092	; 0x444
 800c142:	4013      	ands	r3, r2
 800c144:	2b00      	cmp	r3, #0
 800c146:	bf0c      	ite	eq
 800c148:	2301      	moveq	r3, #1
 800c14a:	2300      	movne	r3, #0
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d007      	beq.n	800c162 <delay_ns+0x76>
 800c152:	4b09      	ldr	r3, [pc, #36]	; (800c178 <delay_ns+0x8c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	4b07      	ldr	r3, [pc, #28]	; (800c178 <delay_ns+0x8c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f022 0201 	bic.w	r2, r2, #1
 800c160:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800c162:	4b05      	ldr	r3, [pc, #20]	; (800c178 <delay_ns+0x8c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2200      	movs	r2, #0
 800c168:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20009bc0 	.word	0x20009bc0

0800c17c <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800c184:	4a04      	ldr	r2, [pc, #16]	; (800c198 <setPeriodControlLoop+0x1c>)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6013      	str	r3, [r2, #0]
}
 800c18a:	bf00      	nop
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	20000218 	.word	0x20000218

0800c19c <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800c1a4:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <setPeriodSendLoop+0x1c>)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6013      	str	r3, [r2, #0]
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	2000021c 	.word	0x2000021c

0800c1bc <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]

	_duty=0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f04f 0200 	mov.w	r2, #0
 800c1cc:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a09      	ldr	r2, [pc, #36]	; (800c20c <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800c1e6:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1f6:	615a      	str	r2, [r3, #20]
	attach(num);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f808 	bl	800c210 <_ZN14SOLENOID_VALVE6attachEi>
}
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	41200000 	.word	0x41200000

0800c210 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	601a      	str	r2, [r3, #0]
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	0000      	movs	r0, r0
	...

0800c230 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	ed93 7a04 	vldr	s14, [r3, #16]
 800c242:	edd7 7a00 	vldr	s15, [r7]
 800c246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24e:	dd02      	ble.n	800c256 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	e00d      	b.n	800c272 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	ed93 7a05 	vldr	s14, [r3, #20]
 800c25c:	edd7 7a00 	vldr	s15, [r7]
 800c260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c268:	d502      	bpl.n	800c270 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	e000      	b.n	800c272 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800c274:	ed97 7a00 	vldr	s14, [r7]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c27e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c282:	eef0 7ae7 	vabs.f32	s15, s15
 800c286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c28a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800c2d8 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800c28e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c296:	dc00      	bgt.n	800c29a <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800c298:	e017      	b.n	800c2ca <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800c2c0:	eeb0 0a67 	vmov.f32	s0, s15
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f7ff fe9e 	bl	800c006 <PWMWriteDuty>
}
 800c2ca:	bf00      	nop
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	a0b5ed8d 	.word	0xa0b5ed8d
 800c2dc:	3eb0c6f7 	.word	0x3eb0c6f7

0800c2e0 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	db1e      	blt.n	800c32c <AnalogRead_BuiltIn+0x4c>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b05      	cmp	r3, #5
 800c2f2:	dc1b      	bgt.n	800c32c <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800c2f4:	4a13      	ldr	r2, [pc, #76]	; (800c344 <AnalogRead_BuiltIn+0x64>)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c304:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c348 <AnalogRead_BuiltIn+0x68>
 800c308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c30c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c34c <AnalogRead_BuiltIn+0x6c>
 800c310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c314:	4a0e      	ldr	r2, [pc, #56]	; (800c350 <AnalogRead_BuiltIn+0x70>)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800c320:	4a0b      	ldr	r2, [pc, #44]	; (800c350 <AnalogRead_BuiltIn+0x70>)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	e001      	b.n	800c330 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800c32c:	f04f 0300 	mov.w	r3, #0
 800c330:	ee07 3a90 	vmov	s15, r3
}
 800c334:	eeb0 0a67 	vmov.f32	s0, s15
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	2000a098 	.word	0x2000a098
 800c348:	45800000 	.word	0x45800000
 800c34c:	40533333 	.word	0x40533333
 800c350:	2000a080 	.word	0x2000a080

0800c354 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	460a      	mov	r2, r1
 800c35e:	80fb      	strh	r3, [r7, #6]
 800c360:	4613      	mov	r3, r2
 800c362:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c364:	88bb      	ldrh	r3, [r7, #4]
 800c366:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c368:	88fb      	ldrh	r3, [r7, #6]
 800c36a:	2b0f      	cmp	r3, #15
 800c36c:	d80b      	bhi.n	800c386 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	4a07      	ldr	r2, [pc, #28]	; (800c390 <DigitalBuiltIn_Write+0x3c>)
 800c372:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	4a06      	ldr	r2, [pc, #24]	; (800c394 <DigitalBuiltIn_Write+0x40>)
 800c37a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c37e:	7bfa      	ldrb	r2, [r7, #15]
 800c380:	4619      	mov	r1, r3
 800c382:	f7f6 fbf5 	bl	8002b70 <HAL_GPIO_WritePin>
	}
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20000220 	.word	0x20000220
 800c394:	20000260 	.word	0x20000260

0800c398 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	ee07 3a90 	vmov	s15, r3
 800c3ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3b0:	edd7 7a00 	vldr	s15, [r7]
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3bc:	eeb0 0b47 	vmov.f64	d0, d7
 800c3c0:	f002 ff7e 	bl	800f2c0 <round>
 800c3c4:	eeb0 7b40 	vmov.f64	d7, d0
 800c3c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c3cc:	ee17 3a90 	vmov	r3, s15
 800c3d0:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	bf28      	it	cs
 800c3dc:	4613      	movcs	r3, r2
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	ee07 3a90 	vmov	s15, r3
 800c3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3fa:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3301      	adds	r3, #1
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c40e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c412:	eef0 7a66 	vmov.f32	s15, s13
}
 800c416:	eeb0 0a67 	vmov.f32	s0, s15
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a0f      	ldr	r2, [pc, #60]	; (800c470 <getTIM_SOURCECLK+0x4c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d013      	beq.n	800c45e <getTIM_SOURCECLK+0x3a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0e      	ldr	r2, [pc, #56]	; (800c474 <getTIM_SOURCECLK+0x50>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00e      	beq.n	800c45e <getTIM_SOURCECLK+0x3a>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a0c      	ldr	r2, [pc, #48]	; (800c478 <getTIM_SOURCECLK+0x54>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d009      	beq.n	800c45e <getTIM_SOURCECLK+0x3a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <getTIM_SOURCECLK+0x58>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d004      	beq.n	800c45e <getTIM_SOURCECLK+0x3a>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <getTIM_SOURCECLK+0x5c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d101      	bne.n	800c462 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c45e:	4b09      	ldr	r3, [pc, #36]	; (800c484 <getTIM_SOURCECLK+0x60>)
 800c460:	e000      	b.n	800c464 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c462:	4b09      	ldr	r3, [pc, #36]	; (800c488 <getTIM_SOURCECLK+0x64>)
}
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	40010000 	.word	0x40010000
 800c474:	40010400 	.word	0x40010400
 800c478:	40014000 	.word	0x40014000
 800c47c:	40014400 	.word	0x40014400
 800c480:	40014800 	.word	0x40014800
 800c484:	0cdfe600 	.word	0x0cdfe600
 800c488:	066ff300 	.word	0x066ff300

0800c48c <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	ed87 0a00 	vstr	s0, [r7]
 800c498:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c49a:	88fb      	ldrh	r3, [r7, #6]
 800c49c:	4a48      	ldr	r2, [pc, #288]	; (800c5c0 <PWMBuiltIn_writeDuty+0x134>)
 800c49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d112      	bne.n	800c4cc <PWMBuiltIn_writeDuty+0x40>
 800c4a6:	88fb      	ldrh	r3, [r7, #6]
 800c4a8:	4a46      	ldr	r2, [pc, #280]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4b2:	88fb      	ldrh	r3, [r7, #6]
 800c4b4:	4a43      	ldr	r2, [pc, #268]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ba:	681c      	ldr	r4, [r3, #0]
 800c4bc:	ed97 0a00 	vldr	s0, [r7]
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	f7ff ff69 	bl	800c398 <duty2CCR>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c4ca:	e075      	b.n	800c5b8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	4a3c      	ldr	r2, [pc, #240]	; (800c5c0 <PWMBuiltIn_writeDuty+0x134>)
 800c4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	d112      	bne.n	800c4fe <PWMBuiltIn_writeDuty+0x72>
 800c4d8:	88fb      	ldrh	r3, [r7, #6]
 800c4da:	4a3a      	ldr	r2, [pc, #232]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4e4:	88fb      	ldrh	r3, [r7, #6]
 800c4e6:	4a37      	ldr	r2, [pc, #220]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ec:	681c      	ldr	r4, [r3, #0]
 800c4ee:	ed97 0a00 	vldr	s0, [r7]
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	f7ff ff50 	bl	800c398 <duty2CCR>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c4fc:	e05c      	b.n	800c5b8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	4a2f      	ldr	r2, [pc, #188]	; (800c5c0 <PWMBuiltIn_writeDuty+0x134>)
 800c502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c506:	2b08      	cmp	r3, #8
 800c508:	d112      	bne.n	800c530 <PWMBuiltIn_writeDuty+0xa4>
 800c50a:	88fb      	ldrh	r3, [r7, #6]
 800c50c:	4a2d      	ldr	r2, [pc, #180]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c516:	88fb      	ldrh	r3, [r7, #6]
 800c518:	4a2a      	ldr	r2, [pc, #168]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c51e:	681c      	ldr	r4, [r3, #0]
 800c520:	ed97 0a00 	vldr	s0, [r7]
 800c524:	4608      	mov	r0, r1
 800c526:	f7ff ff37 	bl	800c398 <duty2CCR>
 800c52a:	4603      	mov	r3, r0
 800c52c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c52e:	e043      	b.n	800c5b8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	4a23      	ldr	r2, [pc, #140]	; (800c5c0 <PWMBuiltIn_writeDuty+0x134>)
 800c534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c538:	2b0c      	cmp	r3, #12
 800c53a:	d112      	bne.n	800c562 <PWMBuiltIn_writeDuty+0xd6>
 800c53c:	88fb      	ldrh	r3, [r7, #6]
 800c53e:	4a21      	ldr	r2, [pc, #132]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c548:	88fb      	ldrh	r3, [r7, #6]
 800c54a:	4a1e      	ldr	r2, [pc, #120]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c550:	681c      	ldr	r4, [r3, #0]
 800c552:	ed97 0a00 	vldr	s0, [r7]
 800c556:	4608      	mov	r0, r1
 800c558:	f7ff ff1e 	bl	800c398 <duty2CCR>
 800c55c:	4603      	mov	r3, r0
 800c55e:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c560:	e02a      	b.n	800c5b8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	4a16      	ldr	r2, [pc, #88]	; (800c5c0 <PWMBuiltIn_writeDuty+0x134>)
 800c566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56a:	2b10      	cmp	r3, #16
 800c56c:	d112      	bne.n	800c594 <PWMBuiltIn_writeDuty+0x108>
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	4a14      	ldr	r2, [pc, #80]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	4a11      	ldr	r2, [pc, #68]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c582:	681c      	ldr	r4, [r3, #0]
 800c584:	ed97 0a00 	vldr	s0, [r7]
 800c588:	4608      	mov	r0, r1
 800c58a:	f7ff ff05 	bl	800c398 <duty2CCR>
 800c58e:	4603      	mov	r3, r0
 800c590:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c592:	e011      	b.n	800c5b8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c594:	88fb      	ldrh	r3, [r7, #6]
 800c596:	4a0b      	ldr	r2, [pc, #44]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c5a0:	88fb      	ldrh	r3, [r7, #6]
 800c5a2:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <PWMBuiltIn_writeDuty+0x138>)
 800c5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5a8:	681c      	ldr	r4, [r3, #0]
 800c5aa:	ed97 0a00 	vldr	s0, [r7]
 800c5ae:	4608      	mov	r0, r1
 800c5b0:	f7ff fef2 	bl	800c398 <duty2CCR>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd90      	pop	{r4, r7, pc}
 800c5c0:	200002d0 	.word	0x200002d0
 800c5c4:	20000280 	.word	0x20000280

0800c5c8 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	ed87 0a00 	vstr	s0, [r7]
 800c5d4:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c5d6:	edd7 7a00 	vldr	s15, [r7]
 800c5da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c5de:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c898 <PWMBuiltIn_writeFrequency+0x2d0>
 800c5e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ea:	d501      	bpl.n	800c5f0 <PWMBuiltIn_writeFrequency+0x28>
 800c5ec:	4bac      	ldr	r3, [pc, #688]	; (800c8a0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c5ee:	e00b      	b.n	800c608 <PWMBuiltIn_writeFrequency+0x40>
 800c5f0:	edd7 7a00 	vldr	s15, [r7]
 800c5f4:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c8a4 <PWMBuiltIn_writeFrequency+0x2dc>
 800c5f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c600:	dd01      	ble.n	800c606 <PWMBuiltIn_writeFrequency+0x3e>
 800c602:	4ba9      	ldr	r3, [pc, #676]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c604:	e000      	b.n	800c608 <PWMBuiltIn_writeFrequency+0x40>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c60e:	2301      	movs	r3, #1
 800c610:	613b      	str	r3, [r7, #16]
 800c612:	e06f      	b.n	800c6f4 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	49a5      	ldr	r1, [pc, #660]	; (800c8ac <PWMBuiltIn_writeFrequency+0x2e4>)
 800c618:	4613      	mov	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	edd3 7a00 	vldr	s15, [r3]
 800c62c:	ed97 7a00 	vldr	s14, [r7]
 800c630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c638:	d859      	bhi.n	800c6ee <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c63a:	4a9d      	ldr	r2, [pc, #628]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	3b01      	subs	r3, #1
 800c646:	499a      	ldr	r1, [pc, #616]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d124      	bne.n	800c69a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c650:	4a97      	ldr	r2, [pc, #604]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c658:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c65a:	88fb      	ldrh	r3, [r7, #6]
 800c65c:	4a95      	ldr	r2, [pc, #596]	; (800c8b4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c66a:	edd7 7a00 	vldr	s15, [r7]
 800c66e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	3301      	adds	r3, #1
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c686:	ee17 1a90 	vmov	r1, s15
 800c68a:	88fb      	ldrh	r3, [r7, #6]
 800c68c:	4a8a      	ldr	r2, [pc, #552]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	1e4a      	subs	r2, r1, #1
 800c696:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c698:	e02f      	b.n	800c6fa <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c69a:	88fb      	ldrh	r3, [r7, #6]
 800c69c:	4a86      	ldr	r2, [pc, #536]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4985      	ldr	r1, [pc, #532]	; (800c8bc <PWMBuiltIn_writeFrequency+0x2f4>)
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c6ac:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c6ae:	88fb      	ldrh	r3, [r7, #6]
 800c6b0:	4a80      	ldr	r2, [pc, #512]	; (800c8b4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b6:	ee07 3a90 	vmov	s15, r3
 800c6ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6be:	edd7 7a00 	vldr	s15, [r7]
 800c6c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c6c6:	88fb      	ldrh	r3, [r7, #6]
 800c6c8:	4a7b      	ldr	r2, [pc, #492]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	ee07 3a90 	vmov	s15, r3
 800c6d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6e4:	ee17 3a90 	vmov	r3, s15
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	617b      	str	r3, [r7, #20]
			break;
 800c6ec:	e005      	b.n	800c6fa <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	dd8c      	ble.n	800c614 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800c6fa:	88fb      	ldrh	r3, [r7, #6]
 800c6fc:	4a6e      	ldr	r2, [pc, #440]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	429a      	cmp	r2, r3
 800c70a:	f000 80be 	beq.w	800c88a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	e0a9      	b.n	800c868 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800c714:	4a68      	ldr	r2, [pc, #416]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c71c:	88fb      	ldrh	r3, [r7, #6]
 800c71e:	4966      	ldr	r1, [pc, #408]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c724:	429a      	cmp	r2, r3
 800c726:	f040 809c 	bne.w	800c862 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800c72a:	4a65      	ldr	r2, [pc, #404]	; (800c8c0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d113      	bne.n	800c75e <PWMBuiltIn_writeFrequency+0x196>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f8c2 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c740:	eef0 7a40 	vmov.f32	s15, s0
 800c744:	4a5c      	ldr	r2, [pc, #368]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c74c:	681c      	ldr	r4, [r3, #0]
 800c74e:	eeb0 0a67 	vmov.f32	s0, s15
 800c752:	6978      	ldr	r0, [r7, #20]
 800c754:	f7ff fe20 	bl	800c398 <duty2CCR>
 800c758:	4603      	mov	r3, r0
 800c75a:	6363      	str	r3, [r4, #52]	; 0x34
 800c75c:	e07a      	b.n	800c854 <PWMBuiltIn_writeFrequency+0x28c>
 800c75e:	4a58      	ldr	r2, [pc, #352]	; (800c8c0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c766:	2b04      	cmp	r3, #4
 800c768:	d113      	bne.n	800c792 <PWMBuiltIn_writeFrequency+0x1ca>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 f8a8 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c774:	eef0 7a40 	vmov.f32	s15, s0
 800c778:	4a4f      	ldr	r2, [pc, #316]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c780:	681c      	ldr	r4, [r3, #0]
 800c782:	eeb0 0a67 	vmov.f32	s0, s15
 800c786:	6978      	ldr	r0, [r7, #20]
 800c788:	f7ff fe06 	bl	800c398 <duty2CCR>
 800c78c:	4603      	mov	r3, r0
 800c78e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c790:	e060      	b.n	800c854 <PWMBuiltIn_writeFrequency+0x28c>
 800c792:	4a4b      	ldr	r2, [pc, #300]	; (800c8c0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c79a:	2b08      	cmp	r3, #8
 800c79c:	d113      	bne.n	800c7c6 <PWMBuiltIn_writeFrequency+0x1fe>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 f88e 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c7a8:	eef0 7a40 	vmov.f32	s15, s0
 800c7ac:	4a42      	ldr	r2, [pc, #264]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b4:	681c      	ldr	r4, [r3, #0]
 800c7b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c7ba:	6978      	ldr	r0, [r7, #20]
 800c7bc:	f7ff fdec 	bl	800c398 <duty2CCR>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c7c4:	e046      	b.n	800c854 <PWMBuiltIn_writeFrequency+0x28c>
 800c7c6:	4a3e      	ldr	r2, [pc, #248]	; (800c8c0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ce:	2b0c      	cmp	r3, #12
 800c7d0:	d113      	bne.n	800c7fa <PWMBuiltIn_writeFrequency+0x232>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 f874 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c7dc:	eef0 7a40 	vmov.f32	s15, s0
 800c7e0:	4a35      	ldr	r2, [pc, #212]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e8:	681c      	ldr	r4, [r3, #0]
 800c7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c7ee:	6978      	ldr	r0, [r7, #20]
 800c7f0:	f7ff fdd2 	bl	800c398 <duty2CCR>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	6423      	str	r3, [r4, #64]	; 0x40
 800c7f8:	e02c      	b.n	800c854 <PWMBuiltIn_writeFrequency+0x28c>
 800c7fa:	4a31      	ldr	r2, [pc, #196]	; (800c8c0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c802:	2b10      	cmp	r3, #16
 800c804:	d113      	bne.n	800c82e <PWMBuiltIn_writeFrequency+0x266>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f85a 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c810:	eef0 7a40 	vmov.f32	s15, s0
 800c814:	4a28      	ldr	r2, [pc, #160]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c81c:	681c      	ldr	r4, [r3, #0]
 800c81e:	eeb0 0a67 	vmov.f32	s0, s15
 800c822:	6978      	ldr	r0, [r7, #20]
 800c824:	f7ff fdb8 	bl	800c398 <duty2CCR>
 800c828:	4603      	mov	r3, r0
 800c82a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c82c:	e012      	b.n	800c854 <PWMBuiltIn_writeFrequency+0x28c>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	b29b      	uxth	r3, r3
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f846 	bl	800c8c4 <PWMBuiltIn_readDuty>
 800c838:	eef0 7a40 	vmov.f32	s15, s0
 800c83c:	4a1e      	ldr	r2, [pc, #120]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c844:	681c      	ldr	r4, [r3, #0]
 800c846:	eeb0 0a67 	vmov.f32	s0, s15
 800c84a:	6978      	ldr	r0, [r7, #20]
 800c84c:	f7ff fda4 	bl	800c398 <duty2CCR>
 800c850:	4603      	mov	r3, r0
 800c852:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800c854:	4a18      	ldr	r2, [pc, #96]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2200      	movs	r2, #0
 800c860:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3301      	adds	r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b13      	cmp	r3, #19
 800c86c:	f77f af52 	ble.w	800c714 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c870:	88fb      	ldrh	r3, [r7, #6]
 800c872:	4a11      	ldr	r2, [pc, #68]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	4a0d      	ldr	r2, [pc, #52]	; (800c8b8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	60da      	str	r2, [r3, #12]
	}
}
 800c88a:	bf00      	nop
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd90      	pop	{r4, r7, pc}
 800c892:	bf00      	nop
 800c894:	f3af 8000 	nop.w
 800c898:	eb851eb8 	.word	0xeb851eb8
 800c89c:	3f9eb851 	.word	0x3f9eb851
 800c8a0:	3cf5c28f 	.word	0x3cf5c28f
 800c8a4:	4bcdfe60 	.word	0x4bcdfe60
 800c8a8:	4bcdfe60 	.word	0x4bcdfe60
 800c8ac:	20000998 	.word	0x20000998
 800c8b0:	20000948 	.word	0x20000948
 800c8b4:	200008f8 	.word	0x200008f8
 800c8b8:	20000280 	.word	0x20000280
 800c8bc:	20000970 	.word	0x20000970
 800c8c0:	200002d0 	.word	0x200002d0

0800c8c4 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c8ce:	88fb      	ldrh	r3, [r7, #6]
 800c8d0:	4a2a      	ldr	r2, [pc, #168]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	4a28      	ldr	r2, [pc, #160]	; (800c980 <PWMBuiltIn_readDuty+0xbc>)
 800c8de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d106      	bne.n	800c8f4 <PWMBuiltIn_readDuty+0x30>
 800c8e6:	88fb      	ldrh	r3, [r7, #6]
 800c8e8:	4a24      	ldr	r2, [pc, #144]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f2:	e039      	b.n	800c968 <PWMBuiltIn_readDuty+0xa4>
 800c8f4:	88fb      	ldrh	r3, [r7, #6]
 800c8f6:	4a22      	ldr	r2, [pc, #136]	; (800c980 <PWMBuiltIn_readDuty+0xbc>)
 800c8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d106      	bne.n	800c90e <PWMBuiltIn_readDuty+0x4a>
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	4a1e      	ldr	r2, [pc, #120]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90c:	e02c      	b.n	800c968 <PWMBuiltIn_readDuty+0xa4>
 800c90e:	88fb      	ldrh	r3, [r7, #6]
 800c910:	4a1b      	ldr	r2, [pc, #108]	; (800c980 <PWMBuiltIn_readDuty+0xbc>)
 800c912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c916:	2b08      	cmp	r3, #8
 800c918:	d106      	bne.n	800c928 <PWMBuiltIn_readDuty+0x64>
 800c91a:	88fb      	ldrh	r3, [r7, #6]
 800c91c:	4a17      	ldr	r2, [pc, #92]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c926:	e01f      	b.n	800c968 <PWMBuiltIn_readDuty+0xa4>
 800c928:	88fb      	ldrh	r3, [r7, #6]
 800c92a:	4a15      	ldr	r2, [pc, #84]	; (800c980 <PWMBuiltIn_readDuty+0xbc>)
 800c92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c930:	2b0c      	cmp	r3, #12
 800c932:	d106      	bne.n	800c942 <PWMBuiltIn_readDuty+0x7e>
 800c934:	88fb      	ldrh	r3, [r7, #6]
 800c936:	4a11      	ldr	r2, [pc, #68]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c940:	e012      	b.n	800c968 <PWMBuiltIn_readDuty+0xa4>
 800c942:	88fb      	ldrh	r3, [r7, #6]
 800c944:	4a0e      	ldr	r2, [pc, #56]	; (800c980 <PWMBuiltIn_readDuty+0xbc>)
 800c946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94a:	2b10      	cmp	r3, #16
 800c94c:	d106      	bne.n	800c95c <PWMBuiltIn_readDuty+0x98>
 800c94e:	88fb      	ldrh	r3, [r7, #6]
 800c950:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c95a:	e005      	b.n	800c968 <PWMBuiltIn_readDuty+0xa4>
 800c95c:	88fb      	ldrh	r3, [r7, #6]
 800c95e:	4a07      	ldr	r2, [pc, #28]	; (800c97c <PWMBuiltIn_readDuty+0xb8>)
 800c960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c968:	4619      	mov	r1, r3
 800c96a:	f7ff fd3c 	bl	800c3e6 <CCR2duty>
 800c96e:	eef0 7a40 	vmov.f32	s15, s0
}
 800c972:	eeb0 0a67 	vmov.f32	s0, s15
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20000280 	.word	0x20000280
 800c980:	200002d0 	.word	0x200002d0

0800c984 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c98c:	4a07      	ldr	r2, [pc, #28]	; (800c9ac <PWMBuiltInStartChannel+0x28>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c994:	4a06      	ldr	r2, [pc, #24]	; (800c9b0 <PWMBuiltInStartChannel+0x2c>)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c99c:	4619      	mov	r1, r3
 800c99e:	f7f8 fb8d 	bl	80050bc <HAL_TIM_PWM_Start>
}
 800c9a2:	bf00      	nop
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20000280 	.word	0x20000280
 800c9b0:	200002d0 	.word	0x200002d0

0800c9b4 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c9bc:	4a07      	ldr	r2, [pc, #28]	; (800c9dc <PWMBuiltInStopChannel+0x28>)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c9c4:	4a06      	ldr	r2, [pc, #24]	; (800c9e0 <PWMBuiltInStopChannel+0x2c>)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f7f8 fbb9 	bl	8005144 <HAL_TIM_PWM_Stop>
}
 800c9d2:	bf00      	nop
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20000280 	.word	0x20000280
 800c9e0:	200002d0 	.word	0x200002d0

0800c9e4 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	e005      	b.n	800c9fc <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff ffc7 	bl	800c984 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	607b      	str	r3, [r7, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b13      	cmp	r3, #19
 800ca00:	ddf6      	ble.n	800c9f0 <PWMBuiltInStart+0xc>
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e06f      	b.n	800caf8 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800ca18:	4a3c      	ldr	r2, [pc, #240]	; (800cb0c <PWMBuiltIn_init+0x100>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fcff 	bl	800c424 <getTIM_SOURCECLK>
 800ca26:	4601      	mov	r1, r0
 800ca28:	4a39      	ldr	r2, [pc, #228]	; (800cb10 <PWMBuiltIn_init+0x104>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800ca30:	2300      	movs	r3, #0
 800ca32:	60bb      	str	r3, [r7, #8]
 800ca34:	e04c      	b.n	800cad0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800ca36:	4a37      	ldr	r2, [pc, #220]	; (800cb14 <PWMBuiltIn_init+0x108>)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	fa02 f303 	lsl.w	r3, r2, r3
 800ca44:	1e5a      	subs	r2, r3, #1
 800ca46:	4934      	ldr	r1, [pc, #208]	; (800cb18 <PWMBuiltIn_init+0x10c>)
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800ca4e:	4a33      	ldr	r2, [pc, #204]	; (800cb1c <PWMBuiltIn_init+0x110>)
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca56:	2201      	movs	r2, #1
 800ca58:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5c:	1e5a      	subs	r2, r3, #1
 800ca5e:	4930      	ldr	r1, [pc, #192]	; (800cb20 <PWMBuiltIn_init+0x114>)
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800ca66:	4a2c      	ldr	r2, [pc, #176]	; (800cb18 <PWMBuiltIn_init+0x10c>)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	ee07 3a90 	vmov	s15, r3
 800ca74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca78:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800ca7c:	4a28      	ldr	r2, [pc, #160]	; (800cb20 <PWMBuiltIn_init+0x114>)
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca84:	3301      	adds	r3, #1
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800ca92:	4a1f      	ldr	r2, [pc, #124]	; (800cb10 <PWMBuiltIn_init+0x104>)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800caa2:	edd7 7a01 	vldr	s15, [r7, #4]
 800caa6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800caaa:	ed97 7a00 	vldr	s14, [r7]
 800caae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cab2:	491c      	ldr	r1, [pc, #112]	; (800cb24 <PWMBuiltIn_init+0x118>)
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3301      	adds	r3, #1
 800cace:	60bb      	str	r3, [r7, #8]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2b09      	cmp	r3, #9
 800cad4:	ddaf      	ble.n	800ca36 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800cb28 <PWMBuiltIn_init+0x11c>
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fcd4 	bl	800c48c <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cb2c <PWMBuiltIn_init+0x120>
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fd6b 	bl	800c5c8 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3301      	adds	r3, #1
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b13      	cmp	r3, #19
 800cafc:	dd8c      	ble.n	800ca18 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800cafe:	f7ff ff71 	bl	800c9e4 <PWMBuiltInStart>
}
 800cb02:	bf00      	nop
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000280 	.word	0x20000280
 800cb10:	200008f8 	.word	0x200008f8
 800cb14:	20000320 	.word	0x20000320
 800cb18:	20000948 	.word	0x20000948
 800cb1c:	20000348 	.word	0x20000348
 800cb20:	20000970 	.word	0x20000970
 800cb24:	20000998 	.word	0x20000998
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	42200000 	.word	0x42200000

0800cb30 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb3e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	601a      	str	r2, [r3, #0]
}
 800cb4e:	bf00      	nop
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
	...

0800cb5c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb6c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d15b      	bne.n	800cc30 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	ed93 7a00 	vldr	s14, [r3]
 800cb7e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb86:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb8e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb96:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbaa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	ed93 7a00 	vldr	s14, [r3]
 800cbb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbc4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cbd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbda:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	ed93 7a00 	vldr	s14, [r3]
 800cbe4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbec:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbf4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc00:	3308      	adds	r3, #8
 800cc02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc0a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	ed93 7a00 	vldr	s14, [r3]
 800cc14:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc20:	330c      	adds	r3, #12
 800cc22:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc2a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800cc2e:	e0fc      	b.n	800ce2a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	f040 80f7 	bne.w	800ce2a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	ed93 7a00 	vldr	s14, [r3]
 800cc42:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc4a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc52:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc5a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc62:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc6a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc76:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ce38 <kalman_setQ+0x2dc>
 800cc7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc7e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	ed93 7a00 	vldr	s14, [r3]
 800cc88:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc90:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc98:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cca0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cca8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800ccba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccbe:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	ed93 7a00 	vldr	s14, [r3]
 800ccc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cce0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccec:	3308      	adds	r3, #8
 800ccee:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ccf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccf6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	ed93 7a00 	vldr	s14, [r3]
 800cd00:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd10:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd18:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd20:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800cd32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd36:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	ed93 7a00 	vldr	s14, [r3]
 800cd40:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd48:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd50:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd58:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd64:	3310      	adds	r3, #16
 800cd66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cd6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd6e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	ed93 7a00 	vldr	s14, [r3]
 800cd78:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd80:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd88:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd94:	3314      	adds	r3, #20
 800cd96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cd9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd9e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	ed93 7a00 	vldr	s14, [r3]
 800cda8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdcc:	3318      	adds	r3, #24
 800cdce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cdd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdd6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	ed93 7a00 	vldr	s14, [r3]
 800cde0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cde4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	331c      	adds	r3, #28
 800cdfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ce02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce06:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	ed93 7a00 	vldr	s14, [r3]
 800ce10:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce1c:	3320      	adds	r3, #32
 800ce1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce26:	edc3 7a00 	vstr	s15, [r3]
}
 800ce2a:	bf00      	nop
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	42100000 	.word	0x42100000

0800ce3c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	6812      	ldr	r2, [r2, #0]
 800ce58:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800ce5a:	e039      	b.n	800ced0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d134      	bne.n	800ced0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	6812      	ldr	r2, [r2, #0]
 800ce6e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce74:	3304      	adds	r3, #4
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce80:	3308      	adds	r3, #8
 800ce82:	f04f 0200 	mov.w	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce8c:	330c      	adds	r3, #12
 800ce8e:	f04f 0200 	mov.w	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce98:	3310      	adds	r3, #16
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	6852      	ldr	r2, [r2, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea4:	3314      	adds	r3, #20
 800cea6:	f04f 0200 	mov.w	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb0:	3318      	adds	r3, #24
 800ceb2:	f04f 0200 	mov.w	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebc:	331c      	adds	r3, #28
 800cebe:	f04f 0200 	mov.w	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec8:	3320      	adds	r3, #32
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	6892      	ldr	r2, [r2, #8]
 800cece:	601a      	str	r2, [r3, #0]
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	ed87 0a03 	vstr	s0, [r7, #12]
 800cee6:	edc7 0a02 	vstr	s1, [r7, #8]
 800ceea:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800ceee:	f107 0108 	add.w	r1, r7, #8
 800cef2:	f107 030c 	add.w	r3, r7, #12
 800cef6:	2200      	movs	r2, #0
 800cef8:	ed97 0a01 	vldr	s0, [r7, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 f807 	bl	800cf10 <KALMANFILTER>
 800cf02:	6178      	str	r0, [r7, #20]
	return pk;
 800cf04:	697b      	ldr	r3, [r7, #20]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800cf22:	20c4      	movs	r0, #196	; 0xc4
 800cf24:	f003 fb06 	bl	8010534 <malloc>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <KALMANFILTER+0x26>
		return NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e10e      	b.n	800d154 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800cf36:	22c4      	movs	r2, #196	; 0xc4
 800cf38:	2100      	movs	r1, #0
 800cf3a:	6978      	ldr	r0, [r7, #20]
 800cf3c:	f003 fb0d 	bl	801055a <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	887a      	ldrh	r2, [r7, #2]
 800cf44:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f000 f90f 	bl	800d16c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	4a82      	ldr	r2, [pc, #520]	; (800d15c <KALMANFILTER+0x24c>)
 800cf52:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	4a81      	ldr	r2, [pc, #516]	; (800d160 <KALMANFILTER+0x250>)
 800cf5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	4a80      	ldr	r2, [pc, #512]	; (800d164 <KALMANFILTER+0x254>)
 800cf62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	4a7f      	ldr	r2, [pc, #508]	; (800d168 <KALMANFILTER+0x258>)
 800cf6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800cf76:	887b      	ldrh	r3, [r7, #2]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	f040 8095 	bne.w	800d0a8 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf86:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	695b      	ldr	r3, [r3, #20]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800cf92:	ed97 7a01 	vldr	s14, [r7, #4]
 800cf96:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cfa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cfac:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	330c      	adds	r3, #12
 800cfb6:	f04f 0200 	mov.w	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	3310      	adds	r3, #16
 800cfc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cfc6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	3314      	adds	r3, #20
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	3318      	adds	r3, #24
 800cfd8:	f04f 0200 	mov.w	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	695b      	ldr	r3, [r3, #20]
 800cfe2:	331c      	adds	r3, #28
 800cfe4:	f04f 0200 	mov.w	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	3320      	adds	r3, #32
 800cff0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cff4:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	f04f 0200 	mov.w	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	3304      	adds	r3, #4
 800d006:	f04f 0200 	mov.w	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	69db      	ldr	r3, [r3, #28]
 800d010:	3308      	adds	r3, #8
 800d012:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d016:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d020:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	3304      	adds	r3, #4
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	3308      	adds	r3, #8
 800d034:	f04f 0200 	mov.w	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	330c      	adds	r3, #12
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04a:	3310      	adds	r3, #16
 800d04c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d050:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d056:	3314      	adds	r3, #20
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d062:	3318      	adds	r3, #24
 800d064:	f04f 0200 	mov.w	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	331c      	adds	r3, #28
 800d070:	f04f 0200 	mov.w	r2, #0
 800d074:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07a:	3320      	adds	r3, #32
 800d07c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d080:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f103 0210 	add.w	r2, r3, #16
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	3350      	adds	r3, #80	; 0x50
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7f3 ff17 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	f103 0220 	add.w	r2, r3, #32
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	3358      	adds	r3, #88	; 0x58
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	f7f3 ff0e 	bl	8000ec2 <arm_mat_trans_f32>
 800d0a6:	e048      	b.n	800d13a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800d0a8:	887b      	ldrh	r3, [r7, #2]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d145      	bne.n	800d13a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0b6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	f04f 0200 	mov.w	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	330c      	adds	r3, #12
 800d0d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0d8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800d0da:	ed97 7a01 	vldr	s14, [r7, #4]
 800d0de:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d0ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0f2:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d108:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10e:	3304      	adds	r3, #4
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f103 0210 	add.w	r2, r3, #16
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	3350      	adds	r3, #80	; 0x50
 800d120:	4619      	mov	r1, r3
 800d122:	4610      	mov	r0, r2
 800d124:	f7f3 fecd 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	f103 0220 	add.w	r2, r3, #32
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	3358      	adds	r3, #88	; 0x58
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7f3 fec4 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d140:	68f9      	ldr	r1, [r7, #12]
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	6978      	ldr	r0, [r7, #20]
 800d150:	4798      	blx	r3

	return ptKalmanFilter;
 800d152:	697b      	ldr	r3, [r7, #20]
	
}
 800d154:	4618      	mov	r0, r3
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	0800d4dd 	.word	0x0800d4dd
 800d160:	0800cb5d 	.word	0x0800cb5d
 800d164:	0800ce3d 	.word	0x0800ce3d
 800d168:	0800cb31 	.word	0x0800cb31

0800d16c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	f040 80d9 	bne.w	800d332 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800d180:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d184:	f003 f9d6 	bl	8010534 <malloc>
 800d188:	4603      	mov	r3, r0
 800d18a:	461a      	mov	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d198:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800d19a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d19e:	2100      	movs	r1, #0
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f003 f9da 	bl	801055a <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	2103      	movs	r1, #3
 800d1ae:	f7f3 fab7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f103 0010 	add.w	r0, r3, #16
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	330c      	adds	r3, #12
 800d1bc:	2203      	movs	r2, #3
 800d1be:	2103      	movs	r1, #3
 800d1c0:	f7f3 faae 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f103 0018 	add.w	r0, r3, #24
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	3330      	adds	r3, #48	; 0x30
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	2103      	movs	r1, #3
 800d1d2:	f7f3 faa5 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f103 0008 	add.w	r0, r3, #8
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	333c      	adds	r3, #60	; 0x3c
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	f7f3 fa9c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f103 0020 	add.w	r0, r3, #32
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	3340      	adds	r3, #64	; 0x40
 800d1f2:	2203      	movs	r2, #3
 800d1f4:	2103      	movs	r1, #3
 800d1f6:	f7f3 fa93 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	33f4      	adds	r3, #244	; 0xf4
 800d204:	2201      	movs	r2, #1
 800d206:	2103      	movs	r1, #3
 800d208:	f7f3 fa8a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	3364      	adds	r3, #100	; 0x64
 800d216:	2203      	movs	r2, #3
 800d218:	2103      	movs	r1, #3
 800d21a:	f7f3 fa81 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3388      	adds	r3, #136	; 0x88
 800d228:	2203      	movs	r2, #3
 800d22a:	2103      	movs	r1, #3
 800d22c:	f7f3 fa78 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	33ac      	adds	r3, #172	; 0xac
 800d23a:	2203      	movs	r2, #3
 800d23c:	2103      	movs	r1, #3
 800d23e:	f7f3 fa6f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	33d0      	adds	r3, #208	; 0xd0
 800d24c:	2203      	movs	r2, #3
 800d24e:	2103      	movs	r1, #3
 800d250:	f7f3 fa66 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d260:	2203      	movs	r2, #3
 800d262:	2103      	movs	r1, #3
 800d264:	f7f3 fa5c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d274:	2203      	movs	r2, #3
 800d276:	2103      	movs	r1, #3
 800d278:	f7f3 fa52 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d288:	2203      	movs	r2, #3
 800d28a:	2103      	movs	r1, #3
 800d28c:	f7f3 fa48 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800d29c:	2203      	movs	r2, #3
 800d29e:	2103      	movs	r1, #3
 800d2a0:	f7f3 fa3e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	2103      	movs	r1, #3
 800d2b4:	f7f3 fa34 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	2103      	movs	r1, #3
 800d2c8:	f7f3 fa2a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d2d8:	2203      	movs	r2, #3
 800d2da:	2103      	movs	r1, #3
 800d2dc:	f7f3 fa20 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	2103      	movs	r1, #3
 800d2f0:	f7f3 fa16 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d300:	2201      	movs	r2, #1
 800d302:	2103      	movs	r1, #3
 800d304:	f7f3 fa0c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d314:	2201      	movs	r2, #1
 800d316:	2103      	movs	r1, #3
 800d318:	f7f3 fa02 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d328:	2201      	movs	r2, #1
 800d32a:	2103      	movs	r1, #3
 800d32c:	f7f3 f9f8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d330:	e0d0      	b.n	800d4d4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f040 80cb 	bne.w	800d4d4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d33e:	20bc      	movs	r0, #188	; 0xbc
 800d340:	f003 f8f8 	bl	8010534 <malloc>
 800d344:	4603      	mov	r3, r0
 800d346:	461a      	mov	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d354:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d356:	22bc      	movs	r2, #188	; 0xbc
 800d358:	2100      	movs	r1, #0
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f003 f8fd 	bl	801055a <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2201      	movs	r2, #1
 800d366:	2102      	movs	r1, #2
 800d368:	f7f3 f9da 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f103 0010 	add.w	r0, r3, #16
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3308      	adds	r3, #8
 800d376:	2202      	movs	r2, #2
 800d378:	2102      	movs	r1, #2
 800d37a:	f7f3 f9d1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f103 0018 	add.w	r0, r3, #24
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3318      	adds	r3, #24
 800d388:	2201      	movs	r2, #1
 800d38a:	2102      	movs	r1, #2
 800d38c:	f7f3 f9c8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f103 0008 	add.w	r0, r3, #8
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3320      	adds	r3, #32
 800d39a:	2201      	movs	r2, #1
 800d39c:	2101      	movs	r1, #1
 800d39e:	f7f3 f9bf 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f103 0020 	add.w	r0, r3, #32
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3324      	adds	r3, #36	; 0x24
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	f7f3 f9b6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3358      	adds	r3, #88	; 0x58
 800d3be:	2201      	movs	r2, #1
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	f7f3 f9ad 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	332c      	adds	r3, #44	; 0x2c
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	2102      	movs	r1, #2
 800d3d4:	f7f3 f9a4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	333c      	adds	r3, #60	; 0x3c
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	2102      	movs	r1, #2
 800d3e6:	f7f3 f99b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	334c      	adds	r3, #76	; 0x4c
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	f7f3 f992 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	3350      	adds	r3, #80	; 0x50
 800d406:	2201      	movs	r2, #1
 800d408:	2102      	movs	r1, #2
 800d40a:	f7f3 f989 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	335c      	adds	r3, #92	; 0x5c
 800d418:	2202      	movs	r2, #2
 800d41a:	2102      	movs	r1, #2
 800d41c:	f7f3 f980 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	336c      	adds	r3, #108	; 0x6c
 800d42a:	2201      	movs	r2, #1
 800d42c:	2102      	movs	r1, #2
 800d42e:	f7f3 f977 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	3374      	adds	r3, #116	; 0x74
 800d43c:	2201      	movs	r2, #1
 800d43e:	2102      	movs	r1, #2
 800d440:	f7f3 f96e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	337c      	adds	r3, #124	; 0x7c
 800d44e:	2202      	movs	r2, #2
 800d450:	2102      	movs	r1, #2
 800d452:	f7f3 f965 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	338c      	adds	r3, #140	; 0x8c
 800d460:	2202      	movs	r2, #2
 800d462:	2102      	movs	r1, #2
 800d464:	f7f3 f95c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	339c      	adds	r3, #156	; 0x9c
 800d472:	2201      	movs	r2, #1
 800d474:	2101      	movs	r1, #1
 800d476:	f7f3 f953 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	33a0      	adds	r3, #160	; 0xa0
 800d484:	2201      	movs	r2, #1
 800d486:	2101      	movs	r1, #1
 800d488:	f7f3 f94a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	33a4      	adds	r3, #164	; 0xa4
 800d496:	2201      	movs	r2, #1
 800d498:	2101      	movs	r1, #1
 800d49a:	f7f3 f941 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	33a8      	adds	r3, #168	; 0xa8
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	2101      	movs	r1, #1
 800d4ac:	f7f3 f938 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	33ac      	adds	r3, #172	; 0xac
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	2102      	movs	r1, #2
 800d4be:	f7f3 f92f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	33b4      	adds	r3, #180	; 0xb4
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	2102      	movs	r1, #2
 800d4d0:	f7f3 f926 	bl	8000720 <arm_mat_init_f32>
}
 800d4d4:	bf00      	nop
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f103 0010 	add.w	r0, r3, #16
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3398      	adds	r3, #152	; 0x98
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	f7f3 fb65 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f103 0010 	add.w	r0, r3, #16
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3368      	adds	r3, #104	; 0x68
 800d506:	461a      	mov	r2, r3
 800d508:	f7f3 fb5a 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3370      	adds	r3, #112	; 0x70
 800d51c:	461a      	mov	r2, r3
 800d51e:	f7f3 fb4f 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	3368      	adds	r3, #104	; 0x68
 800d532:	461a      	mov	r2, r3
 800d534:	f7f3 f85c 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3360      	adds	r3, #96	; 0x60
 800d548:	461a      	mov	r2, r3
 800d54a:	f7f3 fb39 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f103 0020 	add.w	r0, r3, #32
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	3378      	adds	r3, #120	; 0x78
 800d55e:	461a      	mov	r2, r3
 800d560:	f7f3 fb2e 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3380      	adds	r3, #128	; 0x80
 800d574:	461a      	mov	r2, r3
 800d576:	f7f3 f83b 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3378      	adds	r3, #120	; 0x78
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7f3 f8e2 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3348      	adds	r3, #72	; 0x48
 800d59c:	461a      	mov	r2, r3
 800d59e:	f7f3 fb0f 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f103 0020 	add.w	r0, r3, #32
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3388      	adds	r3, #136	; 0x88
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7f3 fb04 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3390      	adds	r3, #144	; 0x90
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	f7f3 fbe2 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	33a0      	adds	r3, #160	; 0xa0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f7f3 faee 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	33a0      	adds	r3, #160	; 0xa0
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7f2 fffd 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f103 0120 	add.w	r1, r3, #32
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	3330      	adds	r3, #48	; 0x30
 800d606:	461a      	mov	r2, r3
 800d608:	f7f3 fada 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3370      	adds	r3, #112	; 0x70
 800d61c:	461a      	mov	r2, r3
 800d61e:	f7f3 facf 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	3330      	adds	r3, #48	; 0x30
 800d632:	461a      	mov	r2, r3
 800d634:	f7f3 fbad 	bl	8000d92 <arm_mat_sub_f32>

}
 800d638:	bf00      	nop
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d640:	b480      	push	{r7}
 800d642:	b089      	sub	sp, #36	; 0x24
 800d644:	af00      	add	r7, sp, #0
 800d646:	61f8      	str	r0, [r7, #28]
 800d648:	ed87 0a06 	vstr	s0, [r7, #24]
 800d64c:	edc7 0a05 	vstr	s1, [r7, #20]
 800d650:	ed87 1a04 	vstr	s2, [r7, #16]
 800d654:	edc7 1a03 	vstr	s3, [r7, #12]
 800d658:	ed87 2a02 	vstr	s4, [r7, #8]
 800d65c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	69ba      	ldr	r2, [r7, #24]
 800d664:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d678:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	f04f 0200 	mov.w	r2, #0
 800d680:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d68e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	4a2f      	ldr	r2, [pc, #188]	; (800d758 <initPID+0x118>)
 800d69c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	edd3 6a02 	vldr	s13, [r3, #8]
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	ed93 7a00 	vldr	s14, [r3]
 800d6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	edd3 6a08 	vldr	s13, [r3, #32]
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	ed93 6a07 	vldr	s12, [r3, #28]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	edd3 7a05 	vldr	s15, [r3, #20]
 800d6cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	edd3 7a00 	vldr	s15, [r3]
 800d6e4:	eeb1 7a67 	vneg.f32	s14, s15
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	edd3 7a07 	vldr	s15, [r3, #28]
 800d6ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	f04f 0200 	mov.w	r2, #0
 800d710:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	f04f 0200 	mov.w	r2, #0
 800d718:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800d728:	edd7 7a02 	vldr	s15, [r7, #8]
 800d72c:	eef1 7a67 	vneg.f32	s15, s15
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800d73c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d740:	eef1 7a67 	vneg.f32	s15, s15
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800d74a:	bf00      	nop
 800d74c:	3724      	adds	r7, #36	; 0x24
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	41700000 	.word	0x41700000

0800d75c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b088      	sub	sp, #32
 800d760:	af00      	add	r7, sp, #0
 800d762:	ed87 0a05 	vstr	s0, [r7, #20]
 800d766:	edc7 0a04 	vstr	s1, [r7, #16]
 800d76a:	ed87 1a03 	vstr	s2, [r7, #12]
 800d76e:	edc7 1a02 	vstr	s3, [r7, #8]
 800d772:	ed87 2a01 	vstr	s4, [r7, #4]
 800d776:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800d77a:	2054      	movs	r0, #84	; 0x54
 800d77c:	f002 feda 	bl	8010534 <malloc>
 800d780:	4603      	mov	r3, r0
 800d782:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <newPID+0x32>
		return NULL;
 800d78a:	2300      	movs	r3, #0
 800d78c:	e014      	b.n	800d7b8 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800d78e:	2254      	movs	r2, #84	; 0x54
 800d790:	2100      	movs	r1, #0
 800d792:	69f8      	ldr	r0, [r7, #28]
 800d794:	f002 fee1 	bl	801055a <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800d798:	edd7 2a00 	vldr	s5, [r7]
 800d79c:	ed97 2a01 	vldr	s4, [r7, #4]
 800d7a0:	edd7 1a02 	vldr	s3, [r7, #8]
 800d7a4:	ed97 1a03 	vldr	s2, [r7, #12]
 800d7a8:	edd7 0a04 	vldr	s1, [r7, #16]
 800d7ac:	ed97 0a05 	vldr	s0, [r7, #20]
 800d7b0:	69f8      	ldr	r0, [r7, #28]
 800d7b2:	f7ff ff45 	bl	800d640 <initPID>
	return pp;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3720      	adds	r7, #32
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <getUsartDevice>:
static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode);
static void printfBin_appendData(int16_t dat);
static void printfBin();
static void printfBin_init();

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a0c      	ldr	r2, [pc, #48]	; (800d7fc <getUsartDevice+0x3c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d101      	bne.n	800d7d4 <getUsartDevice+0x14>
		return &Usart1Device;
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <getUsartDevice+0x40>)
 800d7d2:	e00c      	b.n	800d7ee <getUsartDevice+0x2e>
	if(huart==&huart2)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a0b      	ldr	r2, [pc, #44]	; (800d804 <getUsartDevice+0x44>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d101      	bne.n	800d7e0 <getUsartDevice+0x20>
		return &Usart2Device;
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <getUsartDevice+0x48>)
 800d7de:	e006      	b.n	800d7ee <getUsartDevice+0x2e>
	if(huart==&huart3)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <getUsartDevice+0x4c>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d101      	bne.n	800d7ec <getUsartDevice+0x2c>
		return &Usart3Device;
 800d7e8:	4b09      	ldr	r3, [pc, #36]	; (800d810 <getUsartDevice+0x50>)
 800d7ea:	e000      	b.n	800d7ee <getUsartDevice+0x2e>
	return &Usart3Device;
 800d7ec:	4b08      	ldr	r3, [pc, #32]	; (800d810 <getUsartDevice+0x50>)
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20009d40 	.word	0x20009d40
 800d800:	2000dff4 	.word	0x2000dff4
 800d804:	20009dc0 	.word	0x20009dc0
 800d808:	2000a0a4 	.word	0x2000a0a4
 800d80c:	20009c60 	.word	0x20009c60
 800d810:	20011f44 	.word	0x20011f44

0800d814 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0

	 //Usart 1 is connected to raspberry pi on its usart1
	 myInitUsartMode(&huart1,IntMode);
 800d818:	2100      	movs	r1, #0
 800d81a:	4807      	ldr	r0, [pc, #28]	; (800d838 <my_UsartInit+0x24>)
 800d81c:	f000 f812 	bl	800d844 <myInitUsartMode>

	 //for application use
	 myInitUsartMode(&huart2,IntMode);
 800d820:	2100      	movs	r1, #0
 800d822:	4806      	ldr	r0, [pc, #24]	; (800d83c <my_UsartInit+0x28>)
 800d824:	f000 f80e 	bl	800d844 <myInitUsartMode>

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,DMAMode);
 800d828:	2101      	movs	r1, #1
 800d82a:	4805      	ldr	r0, [pc, #20]	; (800d840 <my_UsartInit+0x2c>)
 800d82c:	f000 f80a 	bl	800d844 <myInitUsartMode>

	 //Enable printf Binany
	 printfBin_init();
 800d830:	f000 fb6e 	bl	800df10 <printfBin_init>
}
 800d834:	bf00      	nop
 800d836:	bd80      	pop	{r7, pc}
 800d838:	20009d40 	.word	0x20009d40
 800d83c:	20009dc0 	.word	0x20009dc0
 800d840:	20009c60 	.word	0x20009c60

0800d844 <myInitUsartMode>:

void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ffb5 	bl	800d7c0 <getUsartDevice>
 800d856:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800d858:	f643 7250 	movw	r2, #16208	; 0x3f50
 800d85c:	2100      	movs	r1, #0
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f002 fe7b 	bl	801055a <memset>
	uartDev->huart = huart;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800d870:	68f9      	ldr	r1, [r7, #12]
 800d872:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d876:	440b      	add	r3, r1
 800d878:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800d880:	441a      	add	r2, r3
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800d888:	440b      	add	r3, r1
 800d88a:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800d892:	68f9      	ldr	r1, [r7, #12]
 800d894:	f643 733c 	movw	r3, #16188	; 0x3f3c
 800d898:	440b      	add	r3, r1
 800d89a:	601a      	str	r2, [r3, #0]
	if(usartMode==IntMode){
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d108      	bne.n	800d8b4 <myInitUsartMode+0x70>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f042 0220 	orr.w	r2, r2, #32
 800d8b0:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800d8b2:	e016      	b.n	800d8e2 <myInitUsartMode+0x9e>
	else if(usartMode==DMAMode){
 800d8b4:	78fb      	ldrb	r3, [r7, #3]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d113      	bne.n	800d8e2 <myInitUsartMode+0x9e>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800d8c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7f8 fd5f 	bl	800638c <HAL_UART_Receive_DMA>
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f042 0210 	orr.w	r2, r2, #16
 800d8e0:	601a      	str	r2, [r3, #0]
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <myUsartDMAIRQ>:
		HAL_UART_RxIdleCallback(&huart3);
		 HAL_UART_IRQHandler(&huart3);
	}
*/
void myUsartDMAIRQ(UART_HandleTypeDef *huart)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b086      	sub	sp, #24
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff ff64 	bl	800d7c0 <getUsartDevice>
 800d8f8:	6178      	str	r0, [r7, #20]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	f003 0310 	and.w	r3, r3, #16
 800d904:	2b10      	cmp	r3, #16
 800d906:	bf0c      	ite	eq
 800d908:	2301      	moveq	r3, #1
 800d90a:	2300      	movne	r3, #0
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	613b      	str	r3, [r7, #16]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0310 	and.w	r3, r3, #16
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bf14      	ite	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	2300      	moveq	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	60fb      	str	r3, [r7, #12]
	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00c      	beq.n	800d946 <myUsartDMAIRQ+0x5c>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <myUsartDMAIRQ+0x5c>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2210      	movs	r2, #16
 800d938:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		uartDev->Received = 1;
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800d940:	4413      	add	r3, r2
 800d942:	2201      	movs	r2, #1
 800d944:	801a      	strh	r2, [r3, #0]
		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/
	}
}
 800d946:	bf00      	nop
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800d95c:	4a44      	ldr	r2, [pc, #272]	; (800da70 <_write+0x120>)
 800d95e:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d962:	4413      	add	r3, r2
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d96c:	fb03 f302 	mul.w	r3, r3, r2
 800d970:	4a3f      	ldr	r2, [pc, #252]	; (800da70 <_write+0x120>)
 800d972:	4413      	add	r3, r2
 800d974:	3304      	adds	r3, #4
 800d976:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	461a      	mov	r2, r3
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	6978      	ldr	r0, [r7, #20]
 800d980:	f002 fde0 	bl	8010544 <memcpy>
	*(pDes+len)='\0';
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	4413      	add	r3, r2
 800d98a:	2200      	movs	r2, #0
 800d98c:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800d98e:	4a38      	ldr	r2, [pc, #224]	; (800da70 <_write+0x120>)
 800d990:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d994:	4413      	add	r3, r2
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	4618      	mov	r0, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	b299      	uxth	r1, r3
 800d99e:	4a34      	ldr	r2, [pc, #208]	; (800da70 <_write+0x120>)
 800d9a0:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d9a4:	4403      	add	r3, r0
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	460a      	mov	r2, r1
 800d9ac:	805a      	strh	r2, [r3, #2]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800d9ae:	4a30      	ldr	r2, [pc, #192]	; (800da70 <_write+0x120>)
 800d9b0:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d9b4:	4413      	add	r3, r2
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	b299      	uxth	r1, r3
 800d9bc:	4a2c      	ldr	r2, [pc, #176]	; (800da70 <_write+0x120>)
 800d9be:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d9c2:	4413      	add	r3, r2
 800d9c4:	460a      	mov	r2, r1
 800d9c6:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800d9c8:	4a29      	ldr	r2, [pc, #164]	; (800da70 <_write+0x120>)
 800d9ca:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d9ce:	4413      	add	r3, r2
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d11a      	bne.n	800da0c <_write+0xbc>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800d9d6:	4b26      	ldr	r3, [pc, #152]	; (800da70 <_write+0x120>)
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	4a25      	ldr	r2, [pc, #148]	; (800da70 <_write+0x120>)
 800d9dc:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d9e0:	4413      	add	r3, r2
 800d9e2:	881b      	ldrh	r3, [r3, #0]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4a22      	ldr	r2, [pc, #136]	; (800da70 <_write+0x120>)
 800d9e8:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d9ec:	440b      	add	r3, r1
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	4413      	add	r3, r2
 800d9f2:	885b      	ldrh	r3, [r3, #2]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	6979      	ldr	r1, [r7, #20]
 800d9f8:	f7f8 fc4c 	bl	8006294 <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800d9fc:	f7fe fb46 	bl	800c08c <micros>
 800da00:	4602      	mov	r2, r0
 800da02:	4b1b      	ldr	r3, [pc, #108]	; (800da70 <_write+0x120>)
 800da04:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	e00a      	b.n	800da22 <_write+0xd2>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
 800da0c:	4a18      	ldr	r2, [pc, #96]	; (800da70 <_write+0x120>)
 800da0e:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800da12:	4413      	add	r3, r2
 800da14:	8819      	ldrh	r1, [r3, #0]
 800da16:	4a16      	ldr	r2, [pc, #88]	; (800da70 <_write+0x120>)
 800da18:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800da1c:	4413      	add	r3, r2
 800da1e:	460a      	mov	r2, r1
 800da20:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800da22:	4a13      	ldr	r2, [pc, #76]	; (800da70 <_write+0x120>)
 800da24:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800da28:	4413      	add	r3, r2
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	3301      	adds	r3, #1
 800da2e:	b299      	uxth	r1, r3
 800da30:	4a0f      	ldr	r2, [pc, #60]	; (800da70 <_write+0x120>)
 800da32:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800da36:	4413      	add	r3, r2
 800da38:	460a      	mov	r2, r1
 800da3a:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800da3c:	4a0c      	ldr	r2, [pc, #48]	; (800da70 <_write+0x120>)
 800da3e:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800da42:	4413      	add	r3, r2
 800da44:	881a      	ldrh	r2, [r3, #0]
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <_write+0x124>)
 800da48:	fba3 1302 	umull	r1, r3, r3, r2
 800da4c:	08d9      	lsrs	r1, r3, #3
 800da4e:	460b      	mov	r3, r1
 800da50:	011b      	lsls	r3, r3, #4
 800da52:	1a5b      	subs	r3, r3, r1
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	b299      	uxth	r1, r3
 800da58:	4a05      	ldr	r2, [pc, #20]	; (800da70 <_write+0x120>)
 800da5a:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800da5e:	4413      	add	r3, r2
 800da60:	460a      	mov	r2, r1
 800da62:	801a      	strh	r2, [r3, #0]
//	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800da64:	687b      	ldr	r3, [r7, #4]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20011f44 	.word	0x20011f44
 800da74:	88888889 	.word	0x88888889

0800da78 <HAL_UART_TxCpltCallback>:



/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fe9d 	bl	800d7c0 <getUsartDevice>
 800da86:	60f8      	str	r0, [r7, #12]
	 /*update information*/
	 uartDev->TxEnd = micros();
 800da88:	f7fe fb00 	bl	800c08c <micros>
 800da8c:	4601      	mov	r1, r0
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	f643 7344 	movw	r3, #16196	; 0x3f44
 800da94:	4413      	add	r3, r2
 800da96:	6019      	str	r1, [r3, #0]
	 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	f643 7344 	movw	r3, #16196	; 0x3f44
 800da9e:	4413      	add	r3, r2
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	1ad2      	subs	r2, r2, r3
 800daac:	68f9      	ldr	r1, [r7, #12]
 800daae:	f643 7348 	movw	r3, #16200	; 0x3f48
 800dab2:	440b      	add	r3, r1
 800dab4:	601a      	str	r2, [r3, #0]
	 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800dabc:	4413      	add	r3, r2
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	4619      	mov	r1, r3
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	f641 5350 	movw	r3, #7504	; 0x1d50
 800dac8:	440b      	add	r3, r1
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	4413      	add	r3, r2
 800dace:	885b      	ldrh	r3, [r3, #2]
 800dad0:	4619      	mov	r1, r3
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	f643 734c 	movw	r3, #16204	; 0x3f4c
 800dad8:	4413      	add	r3, r2
 800dada:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	uartDev->consumerTxBufNum++;
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800dae2:	4413      	add	r3, r2
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	3301      	adds	r3, #1
 800dae8:	b299      	uxth	r1, r3
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800daf0:	4413      	add	r3, r2
 800daf2:	460a      	mov	r2, r1
 800daf4:	801a      	strh	r2, [r3, #0]
	uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800dafc:	4413      	add	r3, r2
 800dafe:	881a      	ldrh	r2, [r3, #0]
 800db00:	4b27      	ldr	r3, [pc, #156]	; (800dba0 <HAL_UART_TxCpltCallback+0x128>)
 800db02:	fba3 1302 	umull	r1, r3, r3, r2
 800db06:	08d9      	lsrs	r1, r3, #3
 800db08:	460b      	mov	r3, r1
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	1a5b      	subs	r3, r3, r1
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	b299      	uxth	r1, r3
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800db18:	4413      	add	r3, r2
 800db1a:	460a      	mov	r2, r1
 800db1c:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 uartDev->bufferedTxNum--;
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800db24:	4413      	add	r3, r2
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	3b01      	subs	r3, #1
 800db2a:	b299      	uxth	r1, r3
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800db32:	4413      	add	r3, r2
 800db34:	460a      	mov	r2, r1
 800db36:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(uartDev->bufferedTxNum>0){
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800db3e:	4413      	add	r3, r2
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d027      	beq.n	800db96 <HAL_UART_TxCpltCallback+0x11e>
		uartDev->TxStart = micros();
 800db46:	f7fe faa1 	bl	800c08c <micros>
 800db4a:	4602      	mov	r2, r0
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800db52:	601a      	str	r2, [r3, #0]
		uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db64:	fb03 f302 	mul.w	r3, r3, r2
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4413      	add	r3, r2
 800db6c:	3304      	adds	r3, #4
 800db6e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	6818      	ldr	r0, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800db7a:	4413      	add	r3, r2
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	4619      	mov	r1, r3
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	f641 5350 	movw	r3, #7504	; 0x1d50
 800db86:	440b      	add	r3, r1
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	885b      	ldrh	r3, [r3, #2]
 800db8e:	461a      	mov	r2, r3
 800db90:	68b9      	ldr	r1, [r7, #8]
 800db92:	f7f8 fb7f 	bl	8006294 <HAL_UART_Transmit_DMA>
	}
}
 800db96:	bf00      	nop
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	88888889 	.word	0x88888889

0800dba4 <myUsartIntIRQ>:
	  myUsartIntIRQ(&huart1);
	  HAL_UART_IRQHandler(&huart1);
	}
*/
void myUsartIntIRQ(UART_HandleTypeDef *huart)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff fe07 	bl	800d7c0 <getUsartDevice>
 800dbb2:	60f8      	str	r0, [r7, #12]
 	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	f003 0320 	and.w	r3, r3, #32
 800dbbe:	2b20      	cmp	r3, #32
 800dbc0:	d148      	bne.n	800dc54 <myUsartIntIRQ+0xb0>
	{
		*(uartDev->pRxBuf)=(uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dbce:	4413      	add	r3, r2
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	b2ca      	uxtb	r2, r1
 800dbd4:	701a      	strb	r2, [r3, #0]
		if(*(uartDev->pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dbdc:	4413      	add	r3, r2
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	2b0a      	cmp	r3, #10
 800dbe4:	d12b      	bne.n	800dc3e <myUsartIntIRQ+0x9a>
		{
			if((uartDev->pRxBuf)!=(uartDev->RxBuf)) // if '0x0a' is not in the beginning
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dbec:	4413      	add	r3, r2
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d02c      	beq.n	800dc54 <myUsartIntIRQ+0xb0>
			{
				if(*(uartDev->pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dc00:	4413      	add	r3, r2
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b0d      	cmp	r3, #13
 800dc0a:	d106      	bne.n	800dc1a <myUsartIntIRQ+0x76>
			    {
					uartDev->Received = 1;
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dc12:	4413      	add	r3, r2
 800dc14:	2201      	movs	r2, #1
 800dc16:	801a      	strh	r2, [r3, #0]
				}
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else uartDev->pRxBuf++;
	}
}
 800dc18:	e01c      	b.n	800dc54 <myUsartIntIRQ+0xb0>
					memset(uartDev->RxBuf,0,UART_RX_BUF_SIZE);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800dc20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dc24:	2100      	movs	r1, #0
 800dc26:	4618      	mov	r0, r3
 800dc28:	f002 fc97 	bl	801055a <memset>
					uartDev->pRxBuf=uartDev->RxBuf;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800dc32:	68f9      	ldr	r1, [r7, #12]
 800dc34:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dc38:	440b      	add	r3, r1
 800dc3a:	601a      	str	r2, [r3, #0]
}
 800dc3c:	e00a      	b.n	800dc54 <myUsartIntIRQ+0xb0>
		else uartDev->pRxBuf++;
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dc44:	4413      	add	r3, r2
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dc50:	440b      	add	r3, r1
 800dc52:	601a      	str	r2, [r3, #0]
}
 800dc54:	bf00      	nop
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <UsartDMAReceiveHandler>:


void UsartDMAReceiveHandler(UART_DEVICE *UsartDevice)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dc6a:	4413      	add	r3, r2
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	f040 80f5 	bne.w	800de5e <UsartDMAReceiveHandler+0x202>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc7a:	2b22      	cmp	r3, #34	; 0x22
 800dc7c:	d14b      	bne.n	800dd16 <UsartDMAReceiveHandler+0xba>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d143      	bne.n	800dd16 <UsartDMAReceiveHandler+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dca0:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d01c      	beq.n	800dce6 <UsartDMAReceiveHandler+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	b299      	uxth	r1, r3
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dcca:	4413      	add	r3, r2
 800dccc:	460a      	mov	r2, r1
 800dcce:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7f4 faa1 	bl	8002228 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dcf8:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	689a      	ldr	r2, [r3, #8]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f022 0201 	bic.w	r2, r2, #1
 800dd0c:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2220      	movs	r2, #32
 800dd14:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800dd1c:	4413      	add	r3, r2
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	4619      	mov	r1, r3
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dd28:	4413      	add	r3, r2
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	440b      	add	r3, r1
 800dd2e:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800dd36:	dd19      	ble.n	800dd6c <UsartDMAReceiveHandler+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800dd3e:	4413      	add	r3, r2
 800dd40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f002 fc07 	bl	801055a <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800dd52:	441a      	add	r2, r3
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800dd5a:	440b      	add	r3, r1
 800dd5c:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800dd64:	4413      	add	r3, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	801a      	strh	r2, [r3, #0]
 800dd6a:	e05a      	b.n	800de22 <UsartDMAReceiveHandler+0x1c6>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800dd72:	4413      	add	r3, r2
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800dd7c:	4413      	add	r3, r2
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	18d0      	adds	r0, r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f503 516b 	add.w	r1, r3, #15040	; 0x3ac0
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dd8e:	4413      	add	r3, r2
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	461a      	mov	r2, r3
 800dd94:	f002 fbd6 	bl	8010544 <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800dd9e:	4413      	add	r3, r2
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dda8:	440b      	add	r3, r1
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	441a      	add	r2, r3
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800ddb4:	440b      	add	r3, r1
 800ddb6:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	b299      	uxth	r1, r3
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800ddc2:	4413      	add	r3, r2
 800ddc4:	460a      	mov	r2, r1
 800ddc6:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800ddce:	4413      	add	r3, r2
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	441a      	add	r2, r3
 800ddd8:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800dddc:	4413      	add	r3, r2
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b0a      	cmp	r3, #10
 800dde2:	d11e      	bne.n	800de22 <UsartDMAReceiveHandler+0x1c6>
				{
					serial3Callback((char *)UsartDevice->RxLineBuf);
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800ddea:	4413      	add	r3, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f001 f9af 	bl	800f150 <serial3Callback>
					memset(UsartDevice->RxLineBuf,0,len);
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800ddf8:	4413      	add	r3, r2
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4618      	mov	r0, r3
 800de00:	f002 fbab 	bl	801055a <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800de0a:	441a      	add	r2, r3
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800de12:	440b      	add	r3, r1
 800de14:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800de1c:	4413      	add	r3, r2
 800de1e:	2200      	movs	r2, #0
 800de20:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800de28:	4413      	add	r3, r2
 800de2a:	2200      	movs	r2, #0
 800de2c:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	f643 63b4 	movw	r3, #16052	; 0x3eb4
 800de34:	4413      	add	r3, r2
 800de36:	2264      	movs	r2, #100	; 0x64
 800de38:	2100      	movs	r1, #0
 800de3a:	4618      	mov	r0, r3
 800de3c:	f002 fb8d 	bl	801055a <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800de46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800de4a:	2100      	movs	r1, #0
 800de4c:	4618      	mov	r0, r3
 800de4e:	f002 fb84 	bl	801055a <memset>
			UsartDevice->countRxBuf = 0;
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	f643 7338 	movw	r3, #16184	; 0x3f38
 800de58:	4413      	add	r3, r2
 800de5a:	2200      	movs	r2, #0
 800de5c:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6818      	ldr	r0, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800de68:	f240 12f3 	movw	r2, #499	; 0x1f3
 800de6c:	4619      	mov	r1, r3
 800de6e:	f7f8 fa8d 	bl	800638c <HAL_UART_Receive_DMA>
}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
	...

0800de7c <Usart_ReceiveHandler>:

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceiveHandler()
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	af00      	add	r7, sp, #0
	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800de80:	4a1e      	ldr	r2, [pc, #120]	; (800defc <Usart_ReceiveHandler+0x80>)
 800de82:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800de86:	4413      	add	r3, r2
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d114      	bne.n	800deb8 <Usart_ReceiveHandler+0x3c>
	{
		serial1Callback((char *)Usart1Device.RxBuf);
 800de8e:	481c      	ldr	r0, [pc, #112]	; (800df00 <Usart_ReceiveHandler+0x84>)
 800de90:	f7fe f8e6 	bl	800c060 <serial1Callback>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800de94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800de98:	2100      	movs	r1, #0
 800de9a:	4819      	ldr	r0, [pc, #100]	; (800df00 <Usart_ReceiveHandler+0x84>)
 800de9c:	f002 fb5d 	bl	801055a <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800dea0:	4a16      	ldr	r2, [pc, #88]	; (800defc <Usart_ReceiveHandler+0x80>)
 800dea2:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dea6:	4413      	add	r3, r2
 800dea8:	4a15      	ldr	r2, [pc, #84]	; (800df00 <Usart_ReceiveHandler+0x84>)
 800deaa:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800deac:	4a13      	ldr	r2, [pc, #76]	; (800defc <Usart_ReceiveHandler+0x80>)
 800deae:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800deb2:	4413      	add	r3, r2
 800deb4:	2200      	movs	r2, #0
 800deb6:	801a      	strh	r2, [r3, #0]
	}

	/********************************Usart 2 Int reception****************************/
	if(Usart2Device.Received == 1)
 800deb8:	4a12      	ldr	r2, [pc, #72]	; (800df04 <Usart_ReceiveHandler+0x88>)
 800deba:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800debe:	4413      	add	r3, r2
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d114      	bne.n	800def0 <Usart_ReceiveHandler+0x74>
	{
		serial2Callback((char *)Usart2Device.RxBuf);
 800dec6:	4810      	ldr	r0, [pc, #64]	; (800df08 <Usart_ReceiveHandler+0x8c>)
 800dec8:	f001 f94c 	bl	800f164 <serial2Callback>
		memset(Usart2Device.RxBuf,0,UART_RX_BUF_SIZE);
 800decc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ded0:	2100      	movs	r1, #0
 800ded2:	480d      	ldr	r0, [pc, #52]	; (800df08 <Usart_ReceiveHandler+0x8c>)
 800ded4:	f002 fb41 	bl	801055a <memset>
		Usart2Device.pRxBuf=Usart2Device.RxBuf;
 800ded8:	4a0a      	ldr	r2, [pc, #40]	; (800df04 <Usart_ReceiveHandler+0x88>)
 800deda:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dede:	4413      	add	r3, r2
 800dee0:	4a09      	ldr	r2, [pc, #36]	; (800df08 <Usart_ReceiveHandler+0x8c>)
 800dee2:	601a      	str	r2, [r3, #0]
		Usart2Device.Received = 0;
 800dee4:	4a07      	ldr	r2, [pc, #28]	; (800df04 <Usart_ReceiveHandler+0x88>)
 800dee6:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800deea:	4413      	add	r3, r2
 800deec:	2200      	movs	r2, #0
 800deee:	801a      	strh	r2, [r3, #0]
	}

	/********************************Usart 3 DMA reception****************************/
	UsartDMAReceiveHandler(&Usart3Device);
 800def0:	4806      	ldr	r0, [pc, #24]	; (800df0c <Usart_ReceiveHandler+0x90>)
 800def2:	f7ff feb3 	bl	800dc5c <UsartDMAReceiveHandler>
}
 800def6:	bf00      	nop
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	2000dff4 	.word	0x2000dff4
 800df00:	20011ab4 	.word	0x20011ab4
 800df04:	2000a0a4 	.word	0x2000a0a4
 800df08:	2000db64 	.word	0x2000db64
 800df0c:	20011f44 	.word	0x20011f44

0800df10 <printfBin_init>:

static PRINTFBINSTRUCT printfBinStruct;
//input: array pointer, and data number
//function: add header and tail, send into buffer
void printfBin_init()
{
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0
	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800df14:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800df18:	2100      	movs	r1, #0
 800df1a:	480a      	ldr	r0, [pc, #40]	; (800df44 <printfBin_init+0x34>)
 800df1c:	f002 fb1d 	bl	801055a <memset>
	printfBinStruct.header[0]=0x5a;
 800df20:	4b08      	ldr	r3, [pc, #32]	; (800df44 <printfBin_init+0x34>)
 800df22:	225a      	movs	r2, #90	; 0x5a
 800df24:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800df26:	4b07      	ldr	r3, [pc, #28]	; (800df44 <printfBin_init+0x34>)
 800df28:	225a      	movs	r2, #90	; 0x5a
 800df2a:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <printfBin_init+0x34>)
 800df2e:	22a5      	movs	r2, #165	; 0xa5
 800df30:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800df32:	4b04      	ldr	r3, [pc, #16]	; (800df44 <printfBin_init+0x34>)
 800df34:	22a5      	movs	r2, #165	; 0xa5
 800df36:	70da      	strb	r2, [r3, #3]
	printfBinStruct.pData=printfBinStruct.data;
 800df38:	4b02      	ldr	r3, [pc, #8]	; (800df44 <printfBin_init+0x34>)
 800df3a:	4a03      	ldr	r2, [pc, #12]	; (800df48 <printfBin_init+0x38>)
 800df3c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
}
 800df40:	bf00      	nop
 800df42:	bd80      	pop	{r7, pc}
 800df44:	20000cb8 	.word	0x20000cb8
 800df48:	20000cbc 	.word	0x20000cbc

0800df4c <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f04f 0200 	mov.w	r2, #0
 800df6c:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f04f 0200 	mov.w	r2, #0
 800df74:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4a0e      	ldr	r2, [pc, #56]	; (800dfb4 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800df7a:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f04f 0200 	mov.w	r2, #0
 800df82:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f240 6266 	movw	r2, #1638	; 0x666
 800df8a:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f643 1299 	movw	r2, #14745	; 0x3999
 800df92:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800df98:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4a07      	ldr	r2, [pc, #28]	; (800dfbc <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800df9e:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	48ca0080 	.word	0x48ca0080
 800dfb8:	200095d0 	.word	0x200095d0
 800dfbc:	40021000 	.word	0x40021000

0800dfc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dfc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dfc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dfc6:	e003      	b.n	800dfd0 <LoopCopyDataInit>

0800dfc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dfc8:	4b0c      	ldr	r3, [pc, #48]	; (800dffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dfca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dfcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dfce:	3104      	adds	r1, #4

0800dfd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dfd0:	480b      	ldr	r0, [pc, #44]	; (800e000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dfd2:	4b0c      	ldr	r3, [pc, #48]	; (800e004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dfd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dfd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dfd8:	d3f6      	bcc.n	800dfc8 <CopyDataInit>
  ldr  r2, =_sbss
 800dfda:	4a0b      	ldr	r2, [pc, #44]	; (800e008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dfdc:	e002      	b.n	800dfe4 <LoopFillZerobss>

0800dfde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dfde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dfe0:	f842 3b04 	str.w	r3, [r2], #4

0800dfe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dfe4:	4b09      	ldr	r3, [pc, #36]	; (800e00c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dfe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dfe8:	d3f9      	bcc.n	800dfde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dfea:	f7fb fc41 	bl	8009870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dfee:	f002 fa7d 	bl	80104ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dff2:	f7fa fddd 	bl	8008bb0 <main>
  bx  lr    
 800dff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dff8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dffc:	0801530c 	.word	0x0801530c
  ldr  r0, =_sdata
 800e000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e004:	20000548 	.word	0x20000548
  ldr  r2, =_sbss
 800e008:	20000548 	.word	0x20000548
  ldr  r3, = _ebss
 800e00c:	20015e98 	.word	0x20015e98

0800e010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e010:	e7fe      	b.n	800e010 <ADC_IRQHandler>
	...

0800e014 <canConfig>:
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
void canConfig(){
 800e014:	b5b0      	push	{r4, r5, r7, lr}
 800e016:	b08c      	sub	sp, #48	; 0x30
 800e018:	af00      	add	r7, sp, #0
	canbus.CanHandle=hcan1;
 800e01a:	4a39      	ldr	r2, [pc, #228]	; (800e100 <canConfig+0xec>)
 800e01c:	4b39      	ldr	r3, [pc, #228]	; (800e104 <canConfig+0xf0>)
 800e01e:	4614      	mov	r4, r2
 800e020:	461d      	mov	r5, r3
 800e022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e02e:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN_FilterTypeDef  sFilterConfig;
	/*##-2- Configure the CAN Filter ###########################################*/
	/*For single CAN instance(14 dedicated filter banks)*/
	for(int i=0;i<14;i++){
 800e032:	2300      	movs	r3, #0
 800e034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	2b0d      	cmp	r3, #13
 800e03a:	dc41      	bgt.n	800e0c0 <canConfig+0xac>
		sFilterConfig.FilterBank = i;
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800e040:	2301      	movs	r3, #1
 800e042:	61fb      	str	r3, [r7, #28]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800e044:	2300      	movs	r3, #0
 800e046:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterIdHigh = (uint16_t)((uint16_t)(4*i))<<5;
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	b29b      	uxth	r3, r3
 800e050:	015b      	lsls	r3, r3, #5
 800e052:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterIdLow = (uint16_t)((uint16_t)(4*i+1))<<5;
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	b29b      	uxth	r3, r3
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	3301      	adds	r3, #1
 800e05e:	b29b      	uxth	r3, r3
 800e060:	015b      	lsls	r3, r3, #5
 800e062:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterMaskIdHigh = (uint16_t)((uint16_t)(4*i+2))<<5;
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	b29b      	uxth	r3, r3
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	3302      	adds	r3, #2
 800e06e:	b29b      	uxth	r3, r3
 800e070:	015b      	lsls	r3, r3, #5
 800e072:	60fb      	str	r3, [r7, #12]
		sFilterConfig.FilterMaskIdLow = (uint16_t)((uint16_t)(4*i+3))<<5;
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	b29b      	uxth	r3, r3
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3303      	adds	r3, #3
 800e07e:	b29b      	uxth	r3, r3
 800e080:	015b      	lsls	r3, r3, #5
 800e082:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterFIFOAssignment = i%2;//CAN_RX_FIFO0=0; CAN_RX_FIFO1=1
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	2b00      	cmp	r3, #0
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	bfb8      	it	lt
 800e08e:	425b      	neglt	r3, r3
 800e090:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterActivation = ENABLE;
 800e092:	2301      	movs	r3, #1
 800e094:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.SlaveStartFilterBank = 14;
 800e096:	230e      	movs	r3, #14
 800e098:	62bb      	str	r3, [r7, #40]	; 0x28
//		sFilterConfig.FilterMaskIdLow = 0x0000;
//		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
//		sFilterConfig.FilterActivation = ENABLE;
//		sFilterConfig.SlaveStartFilterBank = 14;

		if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
 800e09a:	1d3b      	adds	r3, r7, #4
 800e09c:	4619      	mov	r1, r3
 800e09e:	4818      	ldr	r0, [pc, #96]	; (800e100 <canConfig+0xec>)
 800e0a0:	f7f3 fb5c 	bl	800175c <HAL_CAN_ConfigFilter>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	bf14      	ite	ne
 800e0aa:	2301      	movne	r3, #1
 800e0ac:	2300      	moveq	r3, #0
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <canConfig+0xa4>
		{
			/* Filter configuration Error */
			Error_Handler();
 800e0b4:	f7fa feca 	bl	8008e4c <Error_Handler>
	for(int i=0;i<14;i++){
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0be:	e7ba      	b.n	800e036 <canConfig+0x22>
		}
	}


	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&canbus.CanHandle) != HAL_OK)
 800e0c0:	480f      	ldr	r0, [pc, #60]	; (800e100 <canConfig+0xec>)
 800e0c2:	f7f3 fc37 	bl	8001934 <HAL_CAN_Start>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bf14      	ite	ne
 800e0cc:	2301      	movne	r3, #1
 800e0ce:	2300      	moveq	r3, #0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <canConfig+0xc6>
	{
		/* Start Error */
		Error_Handler();
 800e0d6:	f7fa feb9 	bl	8008e4c <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&canbus.CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800e0da:	2112      	movs	r1, #18
 800e0dc:	4808      	ldr	r0, [pc, #32]	; (800e100 <canConfig+0xec>)
 800e0de:	f7f3 fc6d 	bl	80019bc <HAL_CAN_ActivateNotification>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	bf14      	ite	ne
 800e0e8:	2301      	movne	r3, #1
 800e0ea:	2300      	moveq	r3, #0
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d001      	beq.n	800e0f6 <canConfig+0xe2>
	{
		/* Notification Error */
		Error_Handler();
 800e0f2:	f7fa feab 	bl	8008e4c <Error_Handler>
	}


}
 800e0f6:	bf00      	nop
 800e0f8:	3730      	adds	r7, #48	; 0x30
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800e0fe:	bf00      	nop
 800e100:	200010a8 	.word	0x200010a8
 800e104:	200013ec 	.word	0x200013ec

0800e108 <HAL_CAN_RxFifo0MsgPendingCallback>:



/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Get RX message */

  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e114:	4a0a      	ldr	r2, [pc, #40]	; (800e140 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800e116:	2100      	movs	r1, #0
 800e118:	4808      	ldr	r0, [pc, #32]	; (800e13c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e11a:	f000 f831 	bl	800e180 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf14      	ite	ne
 800e124:	2301      	movne	r3, #1
 800e126:	2300      	moveq	r3, #0
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e12e:	f7fa fe8d 	bl	8008e4c <Error_Handler>
  }
  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
  //printf("ID[%d]: %x %x %x %x %x %x %x %x\r\n", canbus.RxHeader.StdId, canbus.RxData[0], canbus.RxData[1], canbus.RxData[2], canbus.RxData[3], canbus.RxData[4], canbus.RxData[5], canbus.RxData[6], canbus.RxData[7]);
  //printf("FIFO0: ID[%d]\r\n", canbus.RxHeader.StdId, canbus.RxData);
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	200010a8 	.word	0x200010a8
 800e140:	200010e8 	.word	0x200010e8

0800e144 <HAL_CAN_RxFifo1MsgPendingCallback>:

/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Get RX message */


  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e14c:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e150:	4a0a      	ldr	r2, [pc, #40]	; (800e17c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800e152:	2101      	movs	r1, #1
 800e154:	4808      	ldr	r0, [pc, #32]	; (800e178 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e156:	f000 f813 	bl	800e180 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	bf14      	ite	ne
 800e160:	2301      	movne	r3, #1
 800e162:	2300      	moveq	r3, #0
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e16a:	f7fa fe6f 	bl	8008e4c <Error_Handler>
  }
  //printf("FIFO1: ID[%d]\r\n", canbus.RxHeader.StdId);

  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200010a8 	.word	0x200010a8
 800e17c:	200010e8 	.word	0x200010e8

0800e180 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>:

static HAL_StatusTypeDef my_HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
 800e18c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e194:	77fb      	strb	r3, [r7, #31]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e196:	7ffb      	ldrb	r3, [r7, #31]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d003      	beq.n	800e1a4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x24>
 800e19c:	7ffb      	ldrb	r3, [r7, #31]
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	f040 814a 	bne.w	800e438 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b8>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d113      	bne.n	800e1d2 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	f003 0303 	and.w	r3, r3, #3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bf0c      	ite	eq
 800e1b8:	2301      	moveq	r3, #1
 800e1ba:	2300      	movne	r3, #0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d01b      	beq.n	800e1fa <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e139      	b.n	800e446 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	f003 0303 	and.w	r3, r3, #3
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bf0c      	ite	eq
 800e1e0:	2301      	moveq	r3, #1
 800e1e2:	2300      	movne	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d007      	beq.n	800e1fa <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e125      	b.n	800e446 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	331b      	adds	r3, #27
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	4413      	add	r3, r2
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f003 0204 	and.w	r2, r3, #4
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10c      	bne.n	800e232 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xb2>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	331b      	adds	r3, #27
 800e220:	011b      	lsls	r3, r3, #4
 800e222:	4413      	add	r3, r2
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	0d5b      	lsrs	r3, r3, #21
 800e228:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	e00b      	b.n	800e24a <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xca>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	331b      	adds	r3, #27
 800e23a:	011b      	lsls	r3, r3, #4
 800e23c:	4413      	add	r3, r2
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	08db      	lsrs	r3, r3, #3
 800e242:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	331b      	adds	r3, #27
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	4413      	add	r3, r2
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f003 0202 	and.w	r2, r3, #2
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	331b      	adds	r3, #27
 800e268:	011b      	lsls	r3, r3, #4
 800e26a:	4413      	add	r3, r2
 800e26c:	3304      	adds	r3, #4
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 020f 	and.w	r2, r3, #15
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	331b      	adds	r3, #27
 800e280:	011b      	lsls	r3, r3, #4
 800e282:	4413      	add	r3, r2
 800e284:	3304      	adds	r3, #4
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	0a1b      	lsrs	r3, r3, #8
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	331b      	adds	r3, #27
 800e298:	011b      	lsls	r3, r3, #4
 800e29a:	4413      	add	r3, r2
 800e29c:	3304      	adds	r3, #4
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	0c1b      	lsrs	r3, r3, #16
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	615a      	str	r2, [r3, #20]



    /**********************  added  ******************************************/
	int i = pHeader->StdId/6;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a68      	ldr	r2, [pc, #416]	; (800e450 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800e2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b2:	089b      	lsrs	r3, r3, #2
 800e2b4:	61bb      	str	r3, [r7, #24]
    int j = pHeader->StdId%6;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6819      	ldr	r1, [r3, #0]
 800e2ba:	4b65      	ldr	r3, [pc, #404]	; (800e450 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800e2bc:	fba3 2301 	umull	r2, r3, r3, r1
 800e2c0:	089a      	lsrs	r2, r3, #2
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	005b      	lsls	r3, r3, #1
 800e2c6:	4413      	add	r3, r2
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	1aca      	subs	r2, r1, r3
 800e2cc:	617a      	str	r2, [r7, #20]
    softArm.actuatorOnline[j][j]=10;
 800e2ce:	4961      	ldr	r1, [pc, #388]	; (800e454 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4413      	add	r3, r2
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	18ca      	adds	r2, r1, r3
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800e2e4:	220a      	movs	r2, #10
 800e2e6:	701a      	strb	r2, [r3, #0]
    aData=(uint8_t *)(&softArm.sensorDataBuffer[i][j]);
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4413      	add	r3, r2
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	331a      	adds	r3, #26
 800e2f8:	00db      	lsls	r3, r3, #3
 800e2fa:	4a56      	ldr	r2, [pc, #344]	; (800e454 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e2fc:	4413      	add	r3, r2
 800e2fe:	3304      	adds	r3, #4
 800e300:	603b      	str	r3, [r7, #0]
    /****************************************************************/

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	011b      	lsls	r3, r3, #4
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	b2da      	uxtb	r2, r3
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	011b      	lsls	r3, r3, #4
 800e320:	4413      	add	r3, r2
 800e322:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	0a1a      	lsrs	r2, r3, #8
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	b2d2      	uxtb	r2, r2
 800e330:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	011b      	lsls	r3, r3, #4
 800e33a:	4413      	add	r3, r2
 800e33c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	0c1a      	lsrs	r2, r3, #16
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	3302      	adds	r3, #2
 800e348:	b2d2      	uxtb	r2, r2
 800e34a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	011b      	lsls	r3, r3, #4
 800e354:	4413      	add	r3, r2
 800e356:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	0e1a      	lsrs	r2, r3, #24
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	3303      	adds	r3, #3
 800e362:	b2d2      	uxtb	r2, r2
 800e364:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	011b      	lsls	r3, r3, #4
 800e36e:	4413      	add	r3, r2
 800e370:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	3304      	adds	r3, #4
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	011b      	lsls	r3, r3, #4
 800e386:	4413      	add	r3, r2
 800e388:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	0a1a      	lsrs	r2, r3, #8
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	3305      	adds	r3, #5
 800e394:	b2d2      	uxtb	r2, r2
 800e396:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	011b      	lsls	r3, r3, #4
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	0c1a      	lsrs	r2, r3, #16
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	3306      	adds	r3, #6
 800e3ae:	b2d2      	uxtb	r2, r2
 800e3b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	011b      	lsls	r3, r3, #4
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	0e1a      	lsrs	r2, r3, #24
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	3307      	adds	r3, #7
 800e3c8:	b2d2      	uxtb	r2, r2
 800e3ca:	701a      	strb	r2, [r3, #0]


    /**********************  Added Docode the sensor Data to SPI buffer*******************************/
    decodeSensorData(&softArm.sensorDataBuffer[i][j],&(softArm.sensorData.data[i][j]));
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	4413      	add	r3, r2
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	697a      	ldr	r2, [r7, #20]
 800e3d8:	4413      	add	r3, r2
 800e3da:	331a      	adds	r3, #26
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	4a1d      	ldr	r2, [pc, #116]	; (800e454 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	1d18      	adds	r0, r3, #4
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	0052      	lsls	r2, r2, #1
 800e3ea:	441a      	add	r2, r3
 800e3ec:	0093      	lsls	r3, r2, #2
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	69b9      	ldr	r1, [r7, #24]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	440b      	add	r3, r1
 800e3f8:	00db      	lsls	r3, r3, #3
 800e3fa:	4413      	add	r3, r2
 800e3fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e400:	4a14      	ldr	r2, [pc, #80]	; (800e454 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e402:	4413      	add	r3, r2
 800e404:	3306      	adds	r3, #6
 800e406:	4619      	mov	r1, r3
 800e408:	f000 fcfa 	bl	800ee00 <decodeSensorData>
    /*******************************************************************/


    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d108      	bne.n	800e424 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2a4>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f042 0220 	orr.w	r2, r2, #32
 800e420:	60da      	str	r2, [r3, #12]
 800e422:	e007      	b.n	800e434 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b4>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	691a      	ldr	r2, [r3, #16]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0220 	orr.w	r2, r2, #32
 800e432:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    //printf("sensor[%d]: %hu\r\n", pHeader->StdId, softArm.sensorData[i][j].pressure);

    return HAL_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	e006      	b.n	800e446 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
  }
}
 800e446:	4618      	mov	r0, r3
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	aaaaaaab 	.word	0xaaaaaaab
 800e454:	20001110 	.word	0x20001110

0800e458 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 800e458:	b5b0      	push	{r4, r5, r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2400      	movs	r4, #0
 800e464:	461d      	mov	r5, r3
 800e466:	2c00      	cmp	r4, #0
 800e468:	db06      	blt.n	800e478 <_ZN8SOFT_ARMC1Ev+0x20>
 800e46a:	2106      	movs	r1, #6
 800e46c:	4628      	mov	r0, r5
 800e46e:	f000 f98b 	bl	800e788 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 800e472:	35d4      	adds	r5, #212	; 0xd4
 800e474:	3c01      	subs	r4, #1
 800e476:	e7f6      	b.n	800e466 <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e484 <_ZN8SOFT_ARM17setupChamberPortsEv>:


void SOFT_ARM::setupChamberPorts()
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b088      	sub	sp, #32
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
	/*Every actuator is refered to with two numbers, segNum(0-8) and bellowNum(0-5)*/

	for(int j=0;j<SEGMENTNUM;j++){
 800e48c:	2300      	movs	r3, #0
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	dc3a      	bgt.n	800e50c <_ZN8SOFT_ARM17setupChamberPortsEv+0x88>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	22d4      	movs	r2, #212	; 0xd4
 800e49a:	fb02 f303 	mul.w	r3, r2, r3
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	61bb      	str	r3, [r7, #24]
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	2b05      	cmp	r3, #5
 800e4ac:	dc2a      	bgt.n	800e504 <_ZN8SOFT_ARM17setupChamberPortsEv+0x80>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	3216      	adds	r2, #22
 800e4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b8:	613b      	str	r3, [r7, #16]
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	011b      	lsls	r3, r3, #4
 800e4be:	3314      	adds	r3, #20
 800e4c0:	60fb      	str	r3, [r7, #12]
			/*analog port is treated as the overall No. in our arm.*/
			bellowCur->attach(pwmPortOffset+i*2, pwmPortOffset+i*2+1, j*BELLOWNUM+i);
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	005a      	lsls	r2, r3, #1
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	18d1      	adds	r1, r2, r3
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	005a      	lsls	r2, r3, #1
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	1c58      	adds	r0, r3, #1
 800e4d4:	69fa      	ldr	r2, [r7, #28]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	4413      	add	r3, r2
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	461a      	mov	r2, r3
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	6938      	ldr	r0, [r7, #16]
 800e4e8:	f7fc fdf8 	bl	800b0dc <_ZN7CHAMBER6attachEiii>
			bellowCur->writeOpening(0);
 800e4ec:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800e514 <_ZN8SOFT_ARM17setupChamberPortsEv+0x90>
 800e4f0:	6938      	ldr	r0, [r7, #16]
 800e4f2:	f7fc ff45 	bl	800b380 <_ZN7CHAMBER12writeOpeningEf>
			HAL_Delay(10);
 800e4f6:	200a      	movs	r0, #10
 800e4f8:	f7f2 fd8a 	bl	8001010 <HAL_Delay>
		for(int i=0;i<BELLOWNUM;i++)
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	3301      	adds	r3, #1
 800e500:	61bb      	str	r3, [r7, #24]
 800e502:	e7d1      	b.n	800e4a8 <_ZN8SOFT_ARM17setupChamberPortsEv+0x24>
	for(int j=0;j<SEGMENTNUM;j++){
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	3301      	adds	r3, #1
 800e508:	61fb      	str	r3, [r7, #28]
 800e50a:	e7c1      	b.n	800e490 <_ZN8SOFT_ARM17setupChamberPortsEv+0xc>
		}
	}

}
 800e50c:	bf00      	nop
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	00000000 	.word	0x00000000

0800e518 <_ZN8SOFT_ARM15zeroPressureAllEv>:

void SOFT_ARM::zeroPressureAll() {
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc19      	bgt.n	800e55e <_ZN8SOFT_ARM15zeroPressureAllEv+0x46>
		for(int i=0;i<BELLOWNUM;i++){
 800e52a:	2300      	movs	r3, #0
 800e52c:	60bb      	str	r3, [r7, #8]
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b05      	cmp	r3, #5
 800e532:	dc10      	bgt.n	800e556 <_ZN8SOFT_ARM15zeroPressureAllEv+0x3e>
			armSegments[j].bellows[i]->zeroPressure();
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	2135      	movs	r1, #53	; 0x35
 800e53a:	fb01 f102 	mul.w	r1, r1, r2
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	440a      	add	r2, r1
 800e542:	3216      	adds	r2, #22
 800e544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fc fde4 	bl	800b116 <_ZN7CHAMBER12zeroPressureEv>
		for(int i=0;i<BELLOWNUM;i++){
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	3301      	adds	r3, #1
 800e552:	60bb      	str	r3, [r7, #8]
 800e554:	e7eb      	b.n	800e52e <_ZN8SOFT_ARM15zeroPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3301      	adds	r3, #1
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	e7e2      	b.n	800e524 <_ZN8SOFT_ARM15zeroPressureAllEv+0xc>
		}
	}
}
 800e55e:	bf00      	nop
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <_ZN8SOFT_ARM13readSensorAllEv>:

void SOFT_ARM::readSensorAll()
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b084      	sub	sp, #16
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
	//Read pressure information from sensorData(from CANbus) as the Chamber's pressure
	for(int j=0;j<SEGMENTNUM;j++){
 800e56e:	2300      	movs	r3, #0
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	dc15      	bgt.n	800e5a4 <_ZN8SOFT_ARM13readSensorAllEv+0x3e>
			armSegments[j].readPressureAll();
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	22d4      	movs	r2, #212	; 0xd4
 800e57c:	fb02 f303 	mul.w	r3, r2, r3
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	4413      	add	r3, r2
 800e584:	4618      	mov	r0, r3
 800e586:	f000 f96b 	bl	800e860 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv>
			armSegments[j].readLength();
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	22d4      	movs	r2, #212	; 0xd4
 800e58e:	fb02 f303 	mul.w	r3, r2, r3
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	4413      	add	r3, r2
 800e596:	4618      	mov	r0, r3
 800e598:	f000 f97a 	bl	800e890 <_ZN16SOFT_ARM_SEGMENT10readLengthEv>
	for(int j=0;j<SEGMENTNUM;j++){
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
 800e5a2:	e7e6      	b.n	800e572 <_ZN8SOFT_ARM13readSensorAllEv+0xc>
	}
}
 800e5a4:	bf00      	nop
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	0000      	movs	r0, r0
	...

0800e5b0 <_ZN8SOFT_ARM15writeCommandAllEv>:

void SOFT_ARM::writeCommandAll()
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]

	for(int j=0;j<SEGMENTNUM;j++){
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f300 8086 	bgt.w	800e6d0 <_ZN8SOFT_ARM15writeCommandAllEv+0x120>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	22d4      	movs	r2, #212	; 0xd4
 800e5c8:	fb02 f303 	mul.w	r3, r2, r3
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++){
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	61bb      	str	r3, [r7, #24]
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	2b05      	cmp	r3, #5
 800e5da:	dc75      	bgt.n	800e6c8 <_ZN8SOFT_ARM15writeCommandAllEv+0x118>
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	69ba      	ldr	r2, [r7, #24]
 800e5e0:	3216      	adds	r2, #22
 800e5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e6:	613b      	str	r3, [r7, #16]

			//write pressure command from commandData to the chamber
			if(commandData.data[j][i].commandType==pressureCommandType){
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	69f9      	ldr	r1, [r7, #28]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	0052      	lsls	r2, r2, #1
 800e5f2:	441a      	add	r2, r3
 800e5f4:	0093      	lsls	r3, r2, #2
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	440b      	add	r3, r1
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	4413      	add	r3, r2
 800e602:	4403      	add	r3, r0
 800e604:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d122      	bne.n	800e654 <_ZN8SOFT_ARM15writeCommandAllEv+0xa4>
				float pressureCommandTemp=commandData.data[j][i].values[0]*1000;//gauge PA
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	69f9      	ldr	r1, [r7, #28]
 800e614:	461a      	mov	r2, r3
 800e616:	0052      	lsls	r2, r2, #1
 800e618:	441a      	add	r2, r3
 800e61a:	0093      	lsls	r3, r2, #2
 800e61c:	461a      	mov	r2, r3
 800e61e:	460b      	mov	r3, r1
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	440b      	add	r3, r1
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	4413      	add	r3, r2
 800e628:	4403      	add	r3, r0
 800e62a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e632:	461a      	mov	r2, r3
 800e634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e638:	fb03 f302 	mul.w	r3, r3, r2
 800e63c:	ee07 3a90 	vmov	s15, r3
 800e640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e644:	edc7 7a02 	vstr	s15, [r7, #8]
				bellowCur->writePressure(pressureCommandTemp);
 800e648:	ed97 0a02 	vldr	s0, [r7, #8]
 800e64c:	6938      	ldr	r0, [r7, #16]
 800e64e:	f7fc fd95 	bl	800b17c <_ZN7CHAMBER13writePressureEf>
 800e652:	e035      	b.n	800e6c0 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
			}
			else if(commandData.data[j][i].commandType==openingCommandType){
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	69f9      	ldr	r1, [r7, #28]
 800e65a:	461a      	mov	r2, r3
 800e65c:	0052      	lsls	r2, r2, #1
 800e65e:	441a      	add	r2, r3
 800e660:	0093      	lsls	r3, r2, #2
 800e662:	461a      	mov	r2, r3
 800e664:	460b      	mov	r3, r1
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	440b      	add	r3, r1
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	4413      	add	r3, r2
 800e66e:	4403      	add	r3, r0
 800e670:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 800e674:	881b      	ldrh	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d122      	bne.n	800e6c0 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
				float openingCommandTemp=((int16_t)commandData.data[j][i].values[0])*3.0517578125e-5;//values[0]/32767
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	69f9      	ldr	r1, [r7, #28]
 800e680:	461a      	mov	r2, r3
 800e682:	0052      	lsls	r2, r2, #1
 800e684:	441a      	add	r2, r3
 800e686:	0093      	lsls	r3, r2, #2
 800e688:	461a      	mov	r2, r3
 800e68a:	460b      	mov	r3, r1
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	440b      	add	r3, r1
 800e690:	00db      	lsls	r3, r3, #3
 800e692:	4413      	add	r3, r2
 800e694:	4403      	add	r3, r0
 800e696:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e69a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e69e:	ee07 3a90 	vmov	s15, r3
 800e6a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e6a6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 800e6d8 <_ZN8SOFT_ARM15writeCommandAllEv+0x128>
 800e6aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e6b2:	edc7 7a03 	vstr	s15, [r7, #12]
				bellowCur->writeOpening(openingCommandTemp);
 800e6b6:	ed97 0a03 	vldr	s0, [r7, #12]
 800e6ba:	6938      	ldr	r0, [r7, #16]
 800e6bc:	f7fc fe60 	bl	800b380 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++){
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e786      	b.n	800e5d6 <_ZN8SOFT_ARM15writeCommandAllEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	61fb      	str	r3, [r7, #28]
 800e6ce:	e775      	b.n	800e5bc <_ZN8SOFT_ARM15writeCommandAllEv+0xc>
			}
		}
	}
}
 800e6d0:	bf00      	nop
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	00000000 	.word	0x00000000
 800e6dc:	3f000000 	.word	0x3f000000

0800e6e0 <_ZN8SOFT_ARM15execInfoCommandEPc>:

void SOFT_ARM::execInfoCommand(char *infoBuf){
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
	if(infoBuf[0]=='z'){
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	2b7a      	cmp	r3, #122	; 0x7a
 800e6f0:	d102      	bne.n	800e6f8 <_ZN8SOFT_ARM15execInfoCommandEPc+0x18>
		zeroPressureAll();
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff ff10 	bl	800e518 <_ZN8SOFT_ARM15zeroPressureAllEv>
	}
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	ed87 0a01 	vstr	s0, [r7, #4]
 800e70a:	ed97 0a01 	vldr	s0, [r7, #4]
 800e70e:	f000 fe9f 	bl	800f450 <acosf>
 800e712:	eef0 7a40 	vmov.f32	s15, s0
 800e716:	eeb0 0a67 	vmov.f32	s0, s15
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	ed87 0a01 	vstr	s0, [r7, #4]
 800e72a:	edc7 0a00 	vstr	s1, [r7]
 800e72e:	edd7 0a00 	vldr	s1, [r7]
 800e732:	ed97 0a01 	vldr	s0, [r7, #4]
 800e736:	f000 fedf 	bl	800f4f8 <atan2f>
 800e73a:	eef0 7a40 	vmov.f32	s15, s0
 800e73e:	eeb0 0a67 	vmov.f32	s0, s15
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e752:	ed97 0a01 	vldr	s0, [r7, #4]
 800e756:	f000 fdf9 	bl	800f34c <cosf>
 800e75a:	eef0 7a40 	vmov.f32	s15, s0
 800e75e:	eeb0 0a67 	vmov.f32	s0, s15
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e772:	ed97 0a01 	vldr	s0, [r7, #4]
 800e776:	f000 fe29 	bl	800f3cc <sinf>
 800e77a:	eef0 7a40 	vmov.f32	s15, s0
 800e77e:	eeb0 0a67 	vmov.f32	s0, s15
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800e788:	b590      	push	{r4, r7, lr}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
{


	length = 0.367;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a18      	ldr	r2, [pc, #96]	; (800e7f8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x70>)
 800e796:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	alpha = 0;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f04f 0200 	mov.w	r2, #0
 800e7a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	beta = 0;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f04f 0200 	mov.w	r2, #0
 800e7aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	basePlatform = new PNEUDRIVE(num);
 800e7ae:	2084      	movs	r0, #132	; 0x84
 800e7b0:	f000 fd6c 	bl	800f28c <_Znwj>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	461c      	mov	r4, r3
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7fd fb94 	bl	800bee8 <_ZN9PNEUDRIVEC1Ei>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b05      	cmp	r3, #5
 800e7cc:	dc0f      	bgt.n	800e7ee <_ZN16SOFT_ARM_SEGMENTC1Ei+0x66>
	{
		bellows[i]=basePlatform->chambers[i];
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	6819      	ldr	r1, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	3216      	adds	r2, #22
 800e7e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	e7ec      	b.n	800e7c8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x40>
	}

}
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd90      	pop	{r4, r7, pc}
 800e7f8:	3ebbe76d 	.word	0x3ebbe76d

0800e7fc <_ZN16SOFT_ARM_SEGMENT12readPressureEi>:


float SOFT_ARM_SEGMENT::readPressure(int num)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
	pressure[num]=basePlatform->chambers[num]->readPressure();
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4618      	mov	r0, r3
 800e816:	f7fc fc8e 	bl	800b136 <_ZN7CHAMBER12readPressureEv>
 800e81a:	eef0 7a40 	vmov.f32	s15, s0
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	edc3 7a00 	vstr	s15, [r3]
	pressureFil[num]=basePlatform->chambers[num]->pressureFil;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e83c:	6879      	ldr	r1, [r7, #4]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	3306      	adds	r3, #6
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	601a      	str	r2, [r3, #0]
	return pressure[num];
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	ee07 3a90 	vmov	s15, r3
}
 800e856:	eeb0 0a67 	vmov.f32	s0, s15
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv>:
void SOFT_ARM_SEGMENT::readPressureAll()
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BELLOWNUM; i++) {
 800e868:	2300      	movs	r3, #0
 800e86a:	60fb      	str	r3, [r7, #12]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b05      	cmp	r3, #5
 800e870:	dc07      	bgt.n	800e882 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv+0x22>
		readPressure(i);
 800e872:	68f9      	ldr	r1, [r7, #12]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7ff ffc1 	bl	800e7fc <_ZN16SOFT_ARM_SEGMENT12readPressureEi>
	for (int i = 0; i < BELLOWNUM; i++) {
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3301      	adds	r3, #1
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	e7f4      	b.n	800e86c <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv+0xc>
	}
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	0000      	movs	r0, r0
 800e88c:	0000      	movs	r0, r0
	...

0800e890 <_ZN16SOFT_ARM_SEGMENT10readLengthEv>:
}




float SOFT_ARM_SEGMENT::readLength() {
 800e890:	b580      	push	{r7, lr}
 800e892:	ed2d 8b04 	vpush	{d8-d9}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	float vol=AnalogRead(lengthAnalogPort);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fd fb79 	bl	800bf9c <AnalogRead>
 800e8aa:	eef0 7a40 	vmov.f32	s15, s0
 800e8ae:	edc7 7a03 	vstr	s15, [r7, #12]
	lengthRaw= MAP(vol,0,10.0,0,1);
 800e8b2:	ed97 7a03 	vldr	s14, [r7, #12]
 800e8b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e8ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e8be:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800e970 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xe0>
 800e8c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
	length=(lengthRaw-0.02)*(alpha/2/sin(alpha/2))+alpha*0.02*cos(beta);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800e8d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e8d6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800e968 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xd8>
 800e8da:	ee37 8b46 	vsub.f64	d8, d7, d6
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800e8e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e8e8:	ee87 9a87 	vdiv.f32	s18, s15, s14
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800e8f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e8f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e8fa:	eeb0 0a66 	vmov.f32	s0, s13
 800e8fe:	f7ff ff33 	bl	800e768 <_ZSt3sinf>
 800e902:	eeb0 7a40 	vmov.f32	s14, s0
 800e906:	eec9 7a07 	vdiv.f32	s15, s18, s14
 800e90a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e90e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800e918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e91c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e968 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xd8>
 800e920:	ee27 9b06 	vmul.f64	d9, d7, d6
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800e92a:	eeb0 0a67 	vmov.f32	s0, s15
 800e92e:	f7ff ff0b 	bl	800e748 <_ZSt3cosf>
 800e932:	eef0 7a40 	vmov.f32	s15, s0
 800e936:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e93a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800e93e:	ee38 7b07 	vadd.f64	d7, d8, d7
 800e942:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	return length;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e952:	ee07 3a90 	vmov	s15, r3
}
 800e956:	eeb0 0a67 	vmov.f32	s0, s15
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	ecbd 8b04 	vpop	{d8-d9}
 800e962:	bd80      	pop	{r7, pc}
 800e964:	f3af 8000 	nop.w
 800e968:	47ae147b 	.word	0x47ae147b
 800e96c:	3f947ae1 	.word	0x3f947ae1
 800e970:	00000000 	.word	0x00000000

0800e974 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>:

void SOFT_ARM_SEGMENT::readIMU(char *pBuffer) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	IMUFRAME *pFrame=(IMUFRAME *)pBuffer;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	60fb      	str	r3, [r7, #12]
	if(pFrame->headerEuler[0]==0x55 && pFrame->headerEuler[1]==0x53)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2b55      	cmp	r3, #85	; 0x55
 800e988:	d178      	bne.n	800ea7c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x108>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	785b      	ldrb	r3, [r3, #1]
 800e98e:	2b53      	cmp	r3, #83	; 0x53
 800e990:	d174      	bne.n	800ea7c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x108>
	{
		imuData.angleX=(pFrame->Rx)/32768.0f*180;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e998:	b21b      	sxth	r3, r3
 800e99a:	ee07 3a90 	vmov	s15, r3
 800e99e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9a2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800e9a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e9aa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ea90 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x11c>
 800e9ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		imuData.angleY=(pFrame->Ry)/32768.0f*180;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e9be:	b21b      	sxth	r3, r3
 800e9c0:	ee07 3a90 	vmov	s15, r3
 800e9c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9c8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800e9cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e9d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ea90 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x11c>
 800e9d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		imuData.angleZ=(pFrame->Rz)/32768.0f*180;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e9e4:	b21b      	sxth	r3, r3
 800e9e6:	ee07 3a90 	vmov	s15, r3
 800e9ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9ee:	eddf 6a27 	vldr	s13, [pc, #156]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800e9f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e9f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ea90 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x11c>
 800e9fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		imuData.q0=(pFrame->q0)/32768.0f;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 800ea0a:	b21b      	sxth	r3, r3
 800ea0c:	ee07 3a90 	vmov	s15, r3
 800ea10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea14:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800ea18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		imuData.q1=(pFrame->q1)/32768.0f;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f9b3 300f 	ldrsh.w	r3, [r3, #15]
 800ea28:	b21b      	sxth	r3, r3
 800ea2a:	ee07 3a90 	vmov	s15, r3
 800ea2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea32:	eddf 6a16 	vldr	s13, [pc, #88]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800ea36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		imuData.q2=(pFrame->q2)/32768.0f;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f9b3 3011 	ldrsh.w	r3, [r3, #17]
 800ea46:	b21b      	sxth	r3, r3
 800ea48:	ee07 3a90 	vmov	s15, r3
 800ea4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea50:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800ea54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		imuData.q3=(pFrame->q3)/32768.0f;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f9b3 3013 	ldrsh.w	r3, [r3, #19]
 800ea64:	b21b      	sxth	r3, r3
 800ea66:	ee07 3a90 	vmov	s15, r3
 800ea6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea6e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ea8c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 800ea72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

	}
	quatern2AB();
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f80b 	bl	800ea98 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>
}
 800ea82:	bf00      	nop
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	47000000 	.word	0x47000000
 800ea90:	43340000 	.word	0x43340000
 800ea94:	00000000 	.word	0x00000000

0800ea98 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>:

void SOFT_ARM_SEGMENT::quatern2AB(){
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
	float n1=2*imuData.q0*imuData.q2 + 2*imuData.q1*imuData.q3;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800eaa6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800eab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800eaba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800eac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eacc:	edc7 7a05 	vstr	s15, [r7, #20]
	float n2=2*imuData.q2*imuData.q3 - 2*imuData.q0*imuData.q1;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800ead6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800eae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800eaea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800eaf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eaf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eafc:	edc7 7a04 	vstr	s15, [r7, #16]
	float n3=imuData.q0*imuData.q0 - imuData.q1*imuData.q1 - imuData.q2*imuData.q2 + imuData.q3*imuData.q3;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800eb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800eb1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	edd3 6a2e 	vldr	s13, [r3, #184]	; 0xb8
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800eb30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800eb44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb4c:	edc7 7a03 	vstr	s15, [r7, #12]

	  n1=CONSTRAIN(n1,-1,1);
 800eb50:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb60:	d501      	bpl.n	800eb66 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xce>
 800eb62:	4b53      	ldr	r3, [pc, #332]	; (800ecb0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800eb64:	e00c      	b.n	800eb80 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 800eb66:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb76:	dd02      	ble.n	800eb7e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe6>
 800eb78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800eb7c:	e000      	b.n	800eb80 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	617b      	str	r3, [r7, #20]
	  n2=CONSTRAIN(n2,-1,1);
 800eb82:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb92:	d501      	bpl.n	800eb98 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x100>
 800eb94:	4b46      	ldr	r3, [pc, #280]	; (800ecb0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800eb96:	e00c      	b.n	800ebb2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 800eb98:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba8:	dd02      	ble.n	800ebb0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x118>
 800ebaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ebae:	e000      	b.n	800ebb2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	613b      	str	r3, [r7, #16]
	  n3=CONSTRAIN(n3,-1,1);
 800ebb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ebbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	d501      	bpl.n	800ebca <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x132>
 800ebc6:	4b3a      	ldr	r3, [pc, #232]	; (800ecb0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800ebc8:	e00c      	b.n	800ebe4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 800ebca:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebda:	dd02      	ble.n	800ebe2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14a>
 800ebdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ebe0:	e000      	b.n	800ebe4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	60fb      	str	r3, [r7, #12]

	  alpha=acos(-n3);
 800ebe6:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebea:	eef1 7a67 	vneg.f32	s15, s15
 800ebee:	eeb0 0a67 	vmov.f32	s0, s15
 800ebf2:	f7ff fd85 	bl	800e700 <_ZSt4acosf>
 800ebf6:	eef0 7a40 	vmov.f32	s15, s0
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	  alpha=CONSTRAIN(alpha,0.001,M_PI);//avoid singularity
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800ec06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ec0a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 800ec98 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x200>
 800ec0e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec16:	d501      	bpl.n	800ec1c <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x184>
 800ec18:	4b26      	ldr	r3, [pc, #152]	; (800ecb4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x21c>)
 800ec1a:	e010      	b.n	800ec3e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a6>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800ec22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ec26:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 800eca0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x208>
 800ec2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec32:	dd01      	ble.n	800ec38 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a0>
 800ec34:	4b20      	ldr	r3, [pc, #128]	; (800ecb8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x220>)
 800ec36:	e002      	b.n	800ec3e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a6>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	  beta=atan2(-n2,n1);
 800ec44:	edd7 7a04 	vldr	s15, [r7, #16]
 800ec48:	eef1 7a67 	vneg.f32	s15, s15
 800ec4c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ec50:	eef0 0a47 	vmov.f32	s1, s14
 800ec54:	eeb0 0a67 	vmov.f32	s0, s15
 800ec58:	f7ff fd62 	bl	800e720 <_ZSt5atan2ff>
 800ec5c:	eef0 7a40 	vmov.f32	s15, s0
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	  if(alpha<0.13)//the smaller alpha is, the larger error beta would have.
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800ec6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ec70:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800eca8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x210>
 800ec74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7c:	d400      	bmi.n	800ec80 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1e8>
		  beta=0;
}
 800ec7e:	e004      	b.n	800ec8a <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1f2>
		  beta=0;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f04f 0200 	mov.w	r2, #0
 800ec86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800ec8a:	bf00      	nop
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	f3af 8000 	nop.w
 800ec98:	d2f1a9fc 	.word	0xd2f1a9fc
 800ec9c:	3f50624d 	.word	0x3f50624d
 800eca0:	54442d18 	.word	0x54442d18
 800eca4:	400921fb 	.word	0x400921fb
 800eca8:	0a3d70a4 	.word	0x0a3d70a4
 800ecac:	3fc0a3d7 	.word	0x3fc0a3d7
 800ecb0:	bf800000 	.word	0xbf800000
 800ecb4:	3a83126f 	.word	0x3a83126f
 800ecb8:	40490fdb 	.word	0x40490fdb

0800ecbc <unpackQuaternion>:
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOri->imuData[maxLoc])&0x8000))>>15;
}

void unpackQuaternion(QUATERNIONCOMPACT *qCom,QUATERNION *qOri){
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
	int32_t lastNumOri=0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	61fb      	str	r3, [r7, #28]
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	785b      	ldrb	r3, [r3, #1]
 800ecce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	b21a      	sxth	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	78db      	ldrb	r3, [r3, #3]
 800ecdc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	b21b      	sxth	r3, r3
 800ece4:	4313      	orrs	r3, r2
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	837b      	strh	r3, [r7, #26]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<COMPACT_SHIFT_BIT);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	833b      	strh	r3, [r7, #24]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<COMPACT_SHIFT_BIT);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	885b      	ldrh	r3, [r3, #2]
 800ecfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	82fb      	strh	r3, [r7, #22]
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<COMPACT_SHIFT_BIT);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	889b      	ldrh	r3, [r3, #4]
 800ed0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	82bb      	strh	r3, [r7, #20]

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 800ed14:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ed18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ed1c:	fb02 f203 	mul.w	r2, r2, r3
 800ed20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed24:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800ed28:	fb01 f303 	mul.w	r3, r1, r3
 800ed2c:	441a      	add	r2, r3
 800ed2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ed32:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800ed36:	fb01 f303 	mul.w	r3, r1, r3
 800ed3a:	4413      	add	r3, r2
 800ed3c:	613b      	str	r3, [r7, #16]
	const int maxNum=(uint32_t)(1<<30);
 800ed3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed42:	60fb      	str	r3, [r7, #12]
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d207      	bcs.n	800ed5c <unpackQuaternion+0xa0>
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f893 	bl	800ee7e <fastSqrt32>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	e000      	b.n	800ed5e <unpackQuaternion+0xa2>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	61fb      	str	r3, [r7, #28]
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	795b      	ldrb	r3, [r3, #5]
 800ed64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d005      	beq.n	800ed7a <unpackQuaternion+0xbe>
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	425b      	negs	r3, r3
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	b21b      	sxth	r3, r3
 800ed78:	e001      	b.n	800ed7e <unpackQuaternion+0xc2>
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	b21b      	sxth	r3, r3
 800ed7e:	817b      	strh	r3, [r7, #10]
	if(maxLoc==0)
 800ed80:	8b7b      	ldrh	r3, [r7, #26]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10c      	bne.n	800eda0 <unpackQuaternion+0xe4>
	{
		qOri->imuData[1]=qRes0;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	8b3a      	ldrh	r2, [r7, #24]
 800ed8a:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes1;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	8afa      	ldrh	r2, [r7, #22]
 800ed90:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	8aba      	ldrh	r2, [r7, #20]
 800ed96:	80da      	strh	r2, [r3, #6]
		qOri->imuData[0]=lastNum;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	897a      	ldrh	r2, [r7, #10]
 800ed9c:	801a      	strh	r2, [r3, #0]
		qOri->imuData[0]=qRes0;
		qOri->imuData[1]=qRes1;
		qOri->imuData[2]=qRes2;
		qOri->imuData[3]=lastNum;
	}
}
 800ed9e:	e02b      	b.n	800edf8 <unpackQuaternion+0x13c>
	else if (maxLoc==1){
 800eda0:	8b7b      	ldrh	r3, [r7, #26]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d10c      	bne.n	800edc0 <unpackQuaternion+0x104>
		qOri->imuData[0]=qRes0;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	8b3a      	ldrh	r2, [r7, #24]
 800edaa:	801a      	strh	r2, [r3, #0]
		qOri->imuData[2]=qRes1;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	8afa      	ldrh	r2, [r7, #22]
 800edb0:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	8aba      	ldrh	r2, [r7, #20]
 800edb6:	80da      	strh	r2, [r3, #6]
		qOri->imuData[1]=lastNum;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	897a      	ldrh	r2, [r7, #10]
 800edbc:	805a      	strh	r2, [r3, #2]
}
 800edbe:	e01b      	b.n	800edf8 <unpackQuaternion+0x13c>
	else if(maxLoc==2){
 800edc0:	8b7b      	ldrh	r3, [r7, #26]
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d10c      	bne.n	800ede0 <unpackQuaternion+0x124>
		qOri->imuData[0]=qRes0;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	8b3a      	ldrh	r2, [r7, #24]
 800edca:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	8afa      	ldrh	r2, [r7, #22]
 800edd0:	805a      	strh	r2, [r3, #2]
		qOri->imuData[3]=qRes2;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	8aba      	ldrh	r2, [r7, #20]
 800edd6:	80da      	strh	r2, [r3, #6]
		qOri->imuData[2]=lastNum;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	897a      	ldrh	r2, [r7, #10]
 800eddc:	809a      	strh	r2, [r3, #4]
}
 800edde:	e00b      	b.n	800edf8 <unpackQuaternion+0x13c>
		qOri->imuData[0]=qRes0;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	8b3a      	ldrh	r2, [r7, #24]
 800ede4:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	8afa      	ldrh	r2, [r7, #22]
 800edea:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes2;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	8aba      	ldrh	r2, [r7, #20]
 800edf0:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=lastNum;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	897a      	ldrh	r2, [r7, #10]
 800edf6:	80da      	strh	r2, [r3, #6]
}
 800edf8:	bf00      	nop
 800edfa:	3720      	adds	r7, #32
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <decodeSensorData>:


void decodeSensorData(SENSORDATACOMPACT *scom, SENSORDATA *s) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]


#if COMPACT_VERSION_PRESSURE_HPA==1
	s->pressure=scom->pressure;    //absolute hpa
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	b21a      	sxth	r2, r3
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	801a      	strh	r2, [r3, #0]
	s->distance= ((uint16_t)(scom->distance<<3)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	785b      	ldrb	r3, [r3, #1]
 800ee1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit2<<2)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	78db      	ldrb	r3, [r3, #3]
 800ee2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	4413      	add	r3, r2
 800ee3c:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit1<<1)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	795b      	ldrb	r3, [r3, #5]
 800ee42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4413      	add	r3, r2
 800ee50:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit0));
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	79db      	ldrb	r3, [r3, #7]
 800ee56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4413      	add	r3, r2
 800ee60:	b29a      	uxth	r2, r3
	s->distance= ((uint16_t)(scom->distance<<3)
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	805a      	strh	r2, [r3, #2]
#else
	s->pressure=scom->pressure;    //absolute
	s->distance=scom->distance;
#endif
	unpackQuaternion(&(scom->quaternionCom),&(s->quaternion));
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	1c9a      	adds	r2, r3, #2
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4610      	mov	r0, r2
 800ee72:	f7ff ff23 	bl	800ecbc <unpackQuaternion>
}
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <fastSqrt32>:


static unsigned int fastSqrt32(unsigned long n)
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b085      	sub	sp, #20
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
    unsigned int c = 0x8000;
 800ee86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee8a:	60fb      	str	r3, [r7, #12]
    unsigned int g = 0x8000;
 800ee8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee90:	60bb      	str	r3, [r7, #8]

    for(;;) {
        if(g*g > n)
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	fb02 f303 	mul.w	r3, r2, r3
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d203      	bcs.n	800eea8 <fastSqrt32+0x2a>
            g ^= c;
 800eea0:	68ba      	ldr	r2, [r7, #8]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4053      	eors	r3, r2
 800eea6:	60bb      	str	r3, [r7, #8]
        c >>= 1;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	085b      	lsrs	r3, r3, #1
 800eeac:	60fb      	str	r3, [r7, #12]
        if(c == 0)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <fastSqrt32+0x3a>
            return g;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	e004      	b.n	800eec2 <fastSqrt32+0x44>
        g |= c;
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	60bb      	str	r3, [r7, #8]
        if(g*g > n)
 800eec0:	e7e7      	b.n	800ee92 <fastSqrt32+0x14>
    }
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
	...

0800eed0 <setup>:
#include "spiSlave.h"
#include <SoftArm.h>

SOFT_ARM softArm;

void setup() {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
	/*setup 1000Hz control loop*/
	setPeriodControlLoop(10);
 800eed4:	200a      	movs	r0, #10
 800eed6:	f7fd f951 	bl	800c17c <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(100);
 800eeda:	2064      	movs	r0, #100	; 0x64
 800eedc:	f7fd f95e 	bl	800c19c <setPeriodSendLoop>

	/*soft arm chambers' PWM port mapping*/
	softArm.setupChamberPorts();
 800eee0:	4804      	ldr	r0, [pc, #16]	; (800eef4 <setup+0x24>)
 800eee2:	f7ff facf 	bl	800e484 <_ZN8SOFT_ARM17setupChamberPortsEv>

	/*start canBus receive*/
	canConfig();
 800eee6:	f7ff f895 	bl	800e014 <canConfig>

	/**********start the SPI slave in DMA*****/
	spiSlaveStart();
 800eeea:	f000 f977 	bl	800f1dc <spiSlaveStart>

}
 800eeee:	bf00      	nop
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	20001110 	.word	0x20001110

0800eef8 <loop>:

void loop() {
 800eef8:	b580      	push	{r7, lr}
 800eefa:	af00      	add	r7, sp, #0

	/***************Handle string commands from the raspberry pi********************/
	softArm.execInfoCommand(softArm.commandData.infos);
 800eefc:	4905      	ldr	r1, [pc, #20]	; (800ef14 <loop+0x1c>)
 800eefe:	4806      	ldr	r0, [pc, #24]	; (800ef18 <loop+0x20>)
 800ef00:	f7ff fbee 	bl	800e6e0 <_ZN8SOFT_ARM15execInfoCommandEPc>

	//update chamber's pressure from the CANbus************************/
	softArm.readSensorAll();
 800ef04:	4804      	ldr	r0, [pc, #16]	; (800ef18 <loop+0x20>)
 800ef06:	f7ff fb2e 	bl	800e566 <_ZN8SOFT_ARM13readSensorAllEv>



	/**Write the command of each chamber, either pressure or opening type*/
	softArm.writeCommandAll();
 800ef0a:	4803      	ldr	r0, [pc, #12]	; (800ef18 <loop+0x20>)
 800ef0c:	f7ff fb50 	bl	800e5b0 <_ZN8SOFT_ARM15writeCommandAllEv>

}
 800ef10:	bf00      	nop
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	20001300 	.word	0x20001300
 800ef18:	20001110 	.word	0x20001110

0800ef1c <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 800ef1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1e:	b09d      	sub	sp, #116	; 0x74
 800ef20:	af10      	add	r7, sp, #64	; 0x40
	//printf("Time: %d\r\n",millis());
	printf("Time:%10lu    PressureCommand:Pressure(KPa)    Distance(mm)\r\n",
 800ef22:	f7fd f8ab 	bl	800c07c <millis>
 800ef26:	4603      	mov	r3, r0
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4886      	ldr	r0, [pc, #536]	; (800f144 <serialDisplay+0x228>)
 800ef2c:	f002 f9e8 	bl	8011300 <iprintf>
			millis());
	for (int i = 0; i < SEGMENTNUM; i++) {
 800ef30:	2300      	movs	r3, #0
 800ef32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f300 80ff 	bgt.w	800f13a <serialDisplay+0x21e>
		printf(
				"     %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd    |     %hu,  %hu, %hu, %hu, %hu, %hu\r\n",
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 800ef3c:	4982      	ldr	r1, [pc, #520]	; (800f148 <serialDisplay+0x22c>)
 800ef3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef40:	4613      	mov	r3, r2
 800ef42:	00db      	lsls	r3, r3, #3
 800ef44:	4413      	add	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	440b      	add	r3, r1
 800ef4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef4e:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ef52:	469c      	mov	ip, r3
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 800ef54:	4a7c      	ldr	r2, [pc, #496]	; (800f148 <serialDisplay+0x22c>)
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	21d4      	movs	r1, #212	; 0xd4
 800ef5a:	fb01 f303 	mul.w	r3, r1, r3
 800ef5e:	4413      	add	r3, r2
 800ef60:	3358      	adds	r3, #88	; 0x58
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ef68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 800ef6c:	4976      	ldr	r1, [pc, #472]	; (800f148 <serialDisplay+0x22c>)
 800ef6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef70:	4613      	mov	r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	4413      	add	r3, r2
 800ef76:	00db      	lsls	r3, r3, #3
 800ef78:	440b      	add	r3, r1
 800ef7a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ef7e:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ef82:	469e      	mov	lr, r3
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 800ef84:	4a70      	ldr	r2, [pc, #448]	; (800f148 <serialDisplay+0x22c>)
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	21d4      	movs	r1, #212	; 0xd4
 800ef8a:	fb01 f303 	mul.w	r3, r1, r3
 800ef8e:	4413      	add	r3, r2
 800ef90:	335c      	adds	r3, #92	; 0x5c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ef98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 800efa0:	4969      	ldr	r1, [pc, #420]	; (800f148 <serialDisplay+0x22c>)
 800efa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efa4:	4613      	mov	r3, r2
 800efa6:	00db      	lsls	r3, r3, #3
 800efa8:	4413      	add	r3, r2
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	440b      	add	r3, r1
 800efae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800efb2:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800efb6:	623b      	str	r3, [r7, #32]
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 800efb8:	4a63      	ldr	r2, [pc, #396]	; (800f148 <serialDisplay+0x22c>)
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	21d4      	movs	r1, #212	; 0xd4
 800efbe:	fb01 f303 	mul.w	r3, r1, r3
 800efc2:	4413      	add	r3, r2
 800efc4:	3360      	adds	r3, #96	; 0x60
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800efcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efd0:	edc7 7a07 	vstr	s15, [r7, #28]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 800efd4:	495c      	ldr	r1, [pc, #368]	; (800f148 <serialDisplay+0x22c>)
 800efd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efd8:	4613      	mov	r3, r2
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	4413      	add	r3, r2
 800efde:	00db      	lsls	r3, r3, #3
 800efe0:	440b      	add	r3, r1
 800efe2:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800efe6:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800efea:	61bb      	str	r3, [r7, #24]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 800efec:	4a56      	ldr	r2, [pc, #344]	; (800f148 <serialDisplay+0x22c>)
 800efee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff0:	21d4      	movs	r1, #212	; 0xd4
 800eff2:	fb01 f303 	mul.w	r3, r1, r3
 800eff6:	4413      	add	r3, r2
 800eff8:	3364      	adds	r3, #100	; 0x64
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800f000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f004:	edc7 7a05 	vstr	s15, [r7, #20]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 800f008:	494f      	ldr	r1, [pc, #316]	; (800f148 <serialDisplay+0x22c>)
 800f00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00c:	4613      	mov	r3, r2
 800f00e:	00db      	lsls	r3, r3, #3
 800f010:	4413      	add	r3, r2
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	440b      	add	r3, r1
 800f016:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800f01a:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800f01e:	613b      	str	r3, [r7, #16]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 800f020:	4a49      	ldr	r2, [pc, #292]	; (800f148 <serialDisplay+0x22c>)
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	21d4      	movs	r1, #212	; 0xd4
 800f026:	fb01 f303 	mul.w	r3, r1, r3
 800f02a:	4413      	add	r3, r2
 800f02c:	3368      	adds	r3, #104	; 0x68
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800f034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f038:	edc7 7a03 	vstr	s15, [r7, #12]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 800f03c:	4942      	ldr	r1, [pc, #264]	; (800f148 <serialDisplay+0x22c>)
 800f03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f040:	4613      	mov	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	4413      	add	r3, r2
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	440b      	add	r3, r1
 800f04a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f04e:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800f052:	60bb      	str	r3, [r7, #8]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 800f054:	4a3c      	ldr	r2, [pc, #240]	; (800f148 <serialDisplay+0x22c>)
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	21d4      	movs	r1, #212	; 0xd4
 800f05a:	fb01 f303 	mul.w	r3, r1, r3
 800f05e:	4413      	add	r3, r2
 800f060:	336c      	adds	r3, #108	; 0x6c
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800f068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f06c:	edc7 7a01 	vstr	s15, [r7, #4]
				softArm.sensorData.data[i][0].distance,
 800f070:	4935      	ldr	r1, [pc, #212]	; (800f148 <serialDisplay+0x22c>)
 800f072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f074:	4613      	mov	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	4413      	add	r3, r2
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	440b      	add	r3, r1
 800f07e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800f082:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f084:	603b      	str	r3, [r7, #0]
				softArm.sensorData.data[i][1].distance,
 800f086:	4930      	ldr	r1, [pc, #192]	; (800f148 <serialDisplay+0x22c>)
 800f088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f08a:	4613      	mov	r3, r2
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	4413      	add	r3, r2
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	440b      	add	r3, r1
 800f094:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f098:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f09a:	461e      	mov	r6, r3
				softArm.sensorData.data[i][2].distance,
 800f09c:	492a      	ldr	r1, [pc, #168]	; (800f148 <serialDisplay+0x22c>)
 800f09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	4413      	add	r3, r2
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	440b      	add	r3, r1
 800f0aa:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800f0ae:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f0b0:	461d      	mov	r5, r3
				softArm.sensorData.data[i][3].distance,
 800f0b2:	4925      	ldr	r1, [pc, #148]	; (800f148 <serialDisplay+0x22c>)
 800f0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	4413      	add	r3, r2
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	440b      	add	r3, r1
 800f0c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f0c4:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f0c6:	461c      	mov	r4, r3
				softArm.sensorData.data[i][4].distance,
 800f0c8:	491f      	ldr	r1, [pc, #124]	; (800f148 <serialDisplay+0x22c>)
 800f0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	4413      	add	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	440b      	add	r3, r1
 800f0d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800f0da:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f0dc:	4618      	mov	r0, r3
				softArm.sensorData.data[i][5].distance);
 800f0de:	491a      	ldr	r1, [pc, #104]	; (800f148 <serialDisplay+0x22c>)
 800f0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	00db      	lsls	r3, r3, #3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	00db      	lsls	r3, r3, #3
 800f0ea:	440b      	add	r3, r1
 800f0ec:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800f0f0:	881b      	ldrh	r3, [r3, #0]
		printf(
 800f0f2:	930e      	str	r3, [sp, #56]	; 0x38
 800f0f4:	900d      	str	r0, [sp, #52]	; 0x34
 800f0f6:	940c      	str	r4, [sp, #48]	; 0x30
 800f0f8:	950b      	str	r5, [sp, #44]	; 0x2c
 800f0fa:	960a      	str	r6, [sp, #40]	; 0x28
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	9208      	str	r2, [sp, #32]
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	9207      	str	r2, [sp, #28]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	9206      	str	r2, [sp, #24]
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	9205      	str	r2, [sp, #20]
 800f110:	697a      	ldr	r2, [r7, #20]
 800f112:	9204      	str	r2, [sp, #16]
 800f114:	69ba      	ldr	r2, [r7, #24]
 800f116:	9203      	str	r2, [sp, #12]
 800f118:	69fa      	ldr	r2, [r7, #28]
 800f11a:	9202      	str	r2, [sp, #8]
 800f11c:	6a3b      	ldr	r3, [r7, #32]
 800f11e:	9301      	str	r3, [sp, #4]
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	4673      	mov	r3, lr
 800f126:	ee17 2a10 	vmov	r2, s14
 800f12a:	4661      	mov	r1, ip
 800f12c:	4807      	ldr	r0, [pc, #28]	; (800f14c <serialDisplay+0x230>)
 800f12e:	f002 f8e7 	bl	8011300 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	3301      	adds	r3, #1
 800f136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f138:	e6fc      	b.n	800ef34 <serialDisplay+0x18>
	}
}
 800f13a:	bf00      	nop
 800f13c:	3734      	adds	r7, #52	; 0x34
 800f13e:	46bd      	mov	sp, r7
 800f140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f142:	bf00      	nop
 800f144:	08014aec 	.word	0x08014aec
 800f148:	20001110 	.word	0x20001110
 800f14c:	08014b2c 	.word	0x08014b2c

0800f150 <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
//		softArm.canBusCommand[1] = 0xEF;
//		softArm.canBusCommand[2] = 0xFE;
//		softArm.canBusCommand[3] = 0xAF;
//		canSend();
	}
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <serial2Callback>:

void serial2Callback(char *pSerialReceiveBuffer) {
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800f16c:	2300      	movs	r3, #0
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	dc0d      	bgt.n	800f192 <serial2Callback+0x2e>
		softArm.armSegments[j].readIMU(pSerialReceiveBuffer);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	22d4      	movs	r2, #212	; 0xd4
 800f17a:	fb02 f303 	mul.w	r3, r2, r3
 800f17e:	4a07      	ldr	r2, [pc, #28]	; (800f19c <serial2Callback+0x38>)
 800f180:	4413      	add	r3, r2
 800f182:	6879      	ldr	r1, [r7, #4]
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff fbf5 	bl	800e974 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>
	for(int j=0;j<SEGMENTNUM;j++){
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	e7ee      	b.n	800f170 <serial2Callback+0xc>
	}
}
 800f192:	bf00      	nop
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	20001110 	.word	0x20001110

0800f1a0 <_Z41__static_initialization_and_destruction_0ii>:
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d107      	bne.n	800f1c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d102      	bne.n	800f1c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
 800f1ba:	4803      	ldr	r0, [pc, #12]	; (800f1c8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800f1bc:	f7ff f94c 	bl	800e458 <_ZN8SOFT_ARMC1Ev>
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	20001110 	.word	0x20001110

0800f1cc <_GLOBAL__sub_I_softArm>:
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	f7ff ffe3 	bl	800f1a0 <_Z41__static_initialization_and_destruction_0ii>
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <spiSlaveStart>:
extern SOFT_ARM softArm;

SPI_HandleTypeDef *hspiSlave=&hspi1;


void spiSlaveStart(){
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800f1e0:	2352      	movs	r3, #82	; 0x52
 800f1e2:	4a03      	ldr	r2, [pc, #12]	; (800f1f0 <spiSlaveStart+0x14>)
 800f1e4:	4903      	ldr	r1, [pc, #12]	; (800f1f4 <spiSlaveStart+0x18>)
 800f1e6:	4804      	ldr	r0, [pc, #16]	; (800f1f8 <spiSlaveStart+0x1c>)
 800f1e8:	f7f5 f9ea 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
}
 800f1ec:	bf00      	nop
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20001214 	.word	0x20001214
 800f1f4:	20001266 	.word	0x20001266
 800f1f8:	200097bc 	.word	0x200097bc

0800f1fc <slaveSPITxRxCpltCallback>:



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800f204:	4b0c      	ldr	r3, [pc, #48]	; (800f238 <slaveSPITxRxCpltCallback+0x3c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d10f      	bne.n	800f22e <slaveSPITxRxCpltCallback+0x32>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 800f20e:	4a0b      	ldr	r2, [pc, #44]	; (800f23c <slaveSPITxRxCpltCallback+0x40>)
 800f210:	4b0a      	ldr	r3, [pc, #40]	; (800f23c <slaveSPITxRxCpltCallback+0x40>)
 800f212:	f502 70d4 	add.w	r0, r2, #424	; 0x1a8
 800f216:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f21a:	2252      	movs	r2, #82	; 0x52
 800f21c:	4619      	mov	r1, r3
 800f21e:	f001 f991 	bl	8010544 <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800f222:	2352      	movs	r3, #82	; 0x52
 800f224:	4a06      	ldr	r2, [pc, #24]	; (800f240 <slaveSPITxRxCpltCallback+0x44>)
 800f226:	4907      	ldr	r1, [pc, #28]	; (800f244 <slaveSPITxRxCpltCallback+0x48>)
 800f228:	4807      	ldr	r0, [pc, #28]	; (800f248 <slaveSPITxRxCpltCallback+0x4c>)
 800f22a:	f7f5 f9c9 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800f22e:	bf00      	nop
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	20000370 	.word	0x20000370
 800f23c:	20001110 	.word	0x20001110
 800f240:	20001214 	.word	0x20001214
 800f244:	20001266 	.word	0x20001266
 800f248:	200097bc 	.word	0x200097bc

0800f24c <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800f254:	4b08      	ldr	r3, [pc, #32]	; (800f278 <slaveSPIErrorCallback+0x2c>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d108      	bne.n	800f270 <slaveSPIErrorCallback+0x24>
		printf("Error SPI 1 communication with RPI4\r\n");
 800f25e:	4807      	ldr	r0, [pc, #28]	; (800f27c <slaveSPIErrorCallback+0x30>)
 800f260:	f002 f8c2 	bl	80113e8 <puts>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800f264:	2352      	movs	r3, #82	; 0x52
 800f266:	4a06      	ldr	r2, [pc, #24]	; (800f280 <slaveSPIErrorCallback+0x34>)
 800f268:	4906      	ldr	r1, [pc, #24]	; (800f284 <slaveSPIErrorCallback+0x38>)
 800f26a:	4807      	ldr	r0, [pc, #28]	; (800f288 <slaveSPIErrorCallback+0x3c>)
 800f26c:	f7f5 f9a8 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800f270:	bf00      	nop
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	20000370 	.word	0x20000370
 800f27c:	08014b94 	.word	0x08014b94
 800f280:	20001214 	.word	0x20001214
 800f284:	20001266 	.word	0x20001266
 800f288:	200097bc 	.word	0x200097bc

0800f28c <_Znwj>:
 800f28c:	b510      	push	{r4, lr}
 800f28e:	2800      	cmp	r0, #0
 800f290:	bf14      	ite	ne
 800f292:	4604      	movne	r4, r0
 800f294:	2401      	moveq	r4, #1
 800f296:	4620      	mov	r0, r4
 800f298:	f001 f94c 	bl	8010534 <malloc>
 800f29c:	b930      	cbnz	r0, 800f2ac <_Znwj+0x20>
 800f29e:	f000 f807 	bl	800f2b0 <_ZSt15get_new_handlerv>
 800f2a2:	b908      	cbnz	r0, 800f2a8 <_Znwj+0x1c>
 800f2a4:	f001 f90c 	bl	80104c0 <abort>
 800f2a8:	4780      	blx	r0
 800f2aa:	e7f4      	b.n	800f296 <_Znwj+0xa>
 800f2ac:	bd10      	pop	{r4, pc}
	...

0800f2b0 <_ZSt15get_new_handlerv>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	; (800f2bc <_ZSt15get_new_handlerv+0xc>)
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f3bf 8f5b 	dmb	ish
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	20001330 	.word	0x20001330

0800f2c0 <round>:
 800f2c0:	ee10 3a90 	vmov	r3, s1
 800f2c4:	b530      	push	{r4, r5, lr}
 800f2c6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f2ca:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800f2ce:	2913      	cmp	r1, #19
 800f2d0:	ee10 5a90 	vmov	r5, s1
 800f2d4:	ee10 2a10 	vmov	r2, s0
 800f2d8:	dc17      	bgt.n	800f30a <round+0x4a>
 800f2da:	2900      	cmp	r1, #0
 800f2dc:	da09      	bge.n	800f2f2 <round+0x32>
 800f2de:	3101      	adds	r1, #1
 800f2e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2e4:	d103      	bne.n	800f2ee <round+0x2e>
 800f2e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f2ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	e024      	b.n	800f33c <round+0x7c>
 800f2f2:	4815      	ldr	r0, [pc, #84]	; (800f348 <round+0x88>)
 800f2f4:	4108      	asrs	r0, r1
 800f2f6:	4203      	tst	r3, r0
 800f2f8:	d100      	bne.n	800f2fc <round+0x3c>
 800f2fa:	b16a      	cbz	r2, 800f318 <round+0x58>
 800f2fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f300:	410b      	asrs	r3, r1
 800f302:	442b      	add	r3, r5
 800f304:	ea23 0300 	bic.w	r3, r3, r0
 800f308:	e7f1      	b.n	800f2ee <round+0x2e>
 800f30a:	2933      	cmp	r1, #51	; 0x33
 800f30c:	dd05      	ble.n	800f31a <round+0x5a>
 800f30e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f312:	d101      	bne.n	800f318 <round+0x58>
 800f314:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f318:	bd30      	pop	{r4, r5, pc}
 800f31a:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800f31e:	f04f 34ff 	mov.w	r4, #4294967295
 800f322:	40c4      	lsrs	r4, r0
 800f324:	4222      	tst	r2, r4
 800f326:	d0f7      	beq.n	800f318 <round+0x58>
 800f328:	2001      	movs	r0, #1
 800f32a:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800f32e:	fa00 f101 	lsl.w	r1, r0, r1
 800f332:	1852      	adds	r2, r2, r1
 800f334:	bf28      	it	cs
 800f336:	181b      	addcs	r3, r3, r0
 800f338:	ea22 0204 	bic.w	r2, r2, r4
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	ec41 0b10 	vmov	d0, r0, r1
 800f344:	e7e8      	b.n	800f318 <round+0x58>
 800f346:	bf00      	nop
 800f348:	000fffff 	.word	0x000fffff

0800f34c <cosf>:
 800f34c:	ee10 3a10 	vmov	r3, s0
 800f350:	b507      	push	{r0, r1, r2, lr}
 800f352:	4a1c      	ldr	r2, [pc, #112]	; (800f3c4 <cosf+0x78>)
 800f354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f358:	4293      	cmp	r3, r2
 800f35a:	dc04      	bgt.n	800f366 <cosf+0x1a>
 800f35c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800f3c8 <cosf+0x7c>
 800f360:	f000 fbf4 	bl	800fb4c <__kernel_cosf>
 800f364:	e004      	b.n	800f370 <cosf+0x24>
 800f366:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f36a:	db04      	blt.n	800f376 <cosf+0x2a>
 800f36c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f370:	b003      	add	sp, #12
 800f372:	f85d fb04 	ldr.w	pc, [sp], #4
 800f376:	4668      	mov	r0, sp
 800f378:	f000 fab8 	bl	800f8ec <__ieee754_rem_pio2f>
 800f37c:	f000 0003 	and.w	r0, r0, #3
 800f380:	2801      	cmp	r0, #1
 800f382:	d007      	beq.n	800f394 <cosf+0x48>
 800f384:	2802      	cmp	r0, #2
 800f386:	d00e      	beq.n	800f3a6 <cosf+0x5a>
 800f388:	b9a0      	cbnz	r0, 800f3b4 <cosf+0x68>
 800f38a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f38e:	ed9d 0a00 	vldr	s0, [sp]
 800f392:	e7e5      	b.n	800f360 <cosf+0x14>
 800f394:	eddd 0a01 	vldr	s1, [sp, #4]
 800f398:	ed9d 0a00 	vldr	s0, [sp]
 800f39c:	f000 feb6 	bl	801010c <__kernel_sinf>
 800f3a0:	eeb1 0a40 	vneg.f32	s0, s0
 800f3a4:	e7e4      	b.n	800f370 <cosf+0x24>
 800f3a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800f3aa:	ed9d 0a00 	vldr	s0, [sp]
 800f3ae:	f000 fbcd 	bl	800fb4c <__kernel_cosf>
 800f3b2:	e7f5      	b.n	800f3a0 <cosf+0x54>
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800f3ba:	ed9d 0a00 	vldr	s0, [sp]
 800f3be:	f000 fea5 	bl	801010c <__kernel_sinf>
 800f3c2:	e7d5      	b.n	800f370 <cosf+0x24>
 800f3c4:	3f490fd8 	.word	0x3f490fd8
 800f3c8:	00000000 	.word	0x00000000

0800f3cc <sinf>:
 800f3cc:	ee10 3a10 	vmov	r3, s0
 800f3d0:	b507      	push	{r0, r1, r2, lr}
 800f3d2:	4a1d      	ldr	r2, [pc, #116]	; (800f448 <sinf+0x7c>)
 800f3d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	dc05      	bgt.n	800f3e8 <sinf+0x1c>
 800f3dc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800f44c <sinf+0x80>
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	f000 fe93 	bl	801010c <__kernel_sinf>
 800f3e6:	e004      	b.n	800f3f2 <sinf+0x26>
 800f3e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3ec:	db04      	blt.n	800f3f8 <sinf+0x2c>
 800f3ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f3f2:	b003      	add	sp, #12
 800f3f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3f8:	4668      	mov	r0, sp
 800f3fa:	f000 fa77 	bl	800f8ec <__ieee754_rem_pio2f>
 800f3fe:	f000 0003 	and.w	r0, r0, #3
 800f402:	2801      	cmp	r0, #1
 800f404:	d008      	beq.n	800f418 <sinf+0x4c>
 800f406:	2802      	cmp	r0, #2
 800f408:	d00d      	beq.n	800f426 <sinf+0x5a>
 800f40a:	b9b0      	cbnz	r0, 800f43a <sinf+0x6e>
 800f40c:	2001      	movs	r0, #1
 800f40e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f412:	ed9d 0a00 	vldr	s0, [sp]
 800f416:	e7e4      	b.n	800f3e2 <sinf+0x16>
 800f418:	eddd 0a01 	vldr	s1, [sp, #4]
 800f41c:	ed9d 0a00 	vldr	s0, [sp]
 800f420:	f000 fb94 	bl	800fb4c <__kernel_cosf>
 800f424:	e7e5      	b.n	800f3f2 <sinf+0x26>
 800f426:	2001      	movs	r0, #1
 800f428:	eddd 0a01 	vldr	s1, [sp, #4]
 800f42c:	ed9d 0a00 	vldr	s0, [sp]
 800f430:	f000 fe6c 	bl	801010c <__kernel_sinf>
 800f434:	eeb1 0a40 	vneg.f32	s0, s0
 800f438:	e7db      	b.n	800f3f2 <sinf+0x26>
 800f43a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f43e:	ed9d 0a00 	vldr	s0, [sp]
 800f442:	f000 fb83 	bl	800fb4c <__kernel_cosf>
 800f446:	e7f5      	b.n	800f434 <sinf+0x68>
 800f448:	3f490fd8 	.word	0x3f490fd8
 800f44c:	00000000 	.word	0x00000000

0800f450 <acosf>:
 800f450:	b510      	push	{r4, lr}
 800f452:	ed2d 8b02 	vpush	{d8}
 800f456:	4c25      	ldr	r4, [pc, #148]	; (800f4ec <acosf+0x9c>)
 800f458:	b08a      	sub	sp, #40	; 0x28
 800f45a:	eeb0 8a40 	vmov.f32	s16, s0
 800f45e:	f000 f89f 	bl	800f5a0 <__ieee754_acosf>
 800f462:	f994 3000 	ldrsb.w	r3, [r4]
 800f466:	3301      	adds	r3, #1
 800f468:	eef0 8a40 	vmov.f32	s17, s0
 800f46c:	d038      	beq.n	800f4e0 <acosf+0x90>
 800f46e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	d633      	bvs.n	800f4e0 <acosf+0x90>
 800f478:	eeb0 0a48 	vmov.f32	s0, s16
 800f47c:	f000 ff6a 	bl	8010354 <fabsf>
 800f480:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f484:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48c:	dd28      	ble.n	800f4e0 <acosf+0x90>
 800f48e:	2301      	movs	r3, #1
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800f496:	4b16      	ldr	r3, [pc, #88]	; (800f4f0 <acosf+0xa0>)
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	4816      	ldr	r0, [pc, #88]	; (800f4f4 <acosf+0xa4>)
 800f49c:	2300      	movs	r3, #0
 800f49e:	9308      	str	r3, [sp, #32]
 800f4a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f4a4:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f4a8:	f000 fe7a 	bl	80101a0 <nan>
 800f4ac:	f994 3000 	ldrsb.w	r3, [r4]
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800f4b6:	d104      	bne.n	800f4c2 <acosf+0x72>
 800f4b8:	f001 f812 	bl	80104e0 <__errno>
 800f4bc:	2321      	movs	r3, #33	; 0x21
 800f4be:	6003      	str	r3, [r0, #0]
 800f4c0:	e004      	b.n	800f4cc <acosf+0x7c>
 800f4c2:	4668      	mov	r0, sp
 800f4c4:	f000 fe6a 	bl	801019c <matherr>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d0f5      	beq.n	800f4b8 <acosf+0x68>
 800f4cc:	9b08      	ldr	r3, [sp, #32]
 800f4ce:	b11b      	cbz	r3, 800f4d8 <acosf+0x88>
 800f4d0:	f001 f806 	bl	80104e0 <__errno>
 800f4d4:	9b08      	ldr	r3, [sp, #32]
 800f4d6:	6003      	str	r3, [r0, #0]
 800f4d8:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f4dc:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 800f4e0:	eeb0 0a68 	vmov.f32	s0, s17
 800f4e4:	b00a      	add	sp, #40	; 0x28
 800f4e6:	ecbd 8b02 	vpop	{d8}
 800f4ea:	bd10      	pop	{r4, pc}
 800f4ec:	20000374 	.word	0x20000374
 800f4f0:	08014bdc 	.word	0x08014bdc
 800f4f4:	080151e9 	.word	0x080151e9

0800f4f8 <atan2f>:
 800f4f8:	f000 b94e 	b.w	800f798 <__ieee754_atan2f>
 800f4fc:	0000      	movs	r0, r0
	...

0800f500 <sqrtf>:
 800f500:	b500      	push	{lr}
 800f502:	ed2d 8b02 	vpush	{d8}
 800f506:	b08b      	sub	sp, #44	; 0x2c
 800f508:	eeb0 8a40 	vmov.f32	s16, s0
 800f50c:	f000 fb1a 	bl	800fb44 <__ieee754_sqrtf>
 800f510:	4b21      	ldr	r3, [pc, #132]	; (800f598 <sqrtf+0x98>)
 800f512:	f993 3000 	ldrsb.w	r3, [r3]
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	d028      	beq.n	800f56c <sqrtf+0x6c>
 800f51a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f522:	d623      	bvs.n	800f56c <sqrtf+0x6c>
 800f524:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52c:	d51e      	bpl.n	800f56c <sqrtf+0x6c>
 800f52e:	2201      	movs	r2, #1
 800f530:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800f534:	9200      	str	r2, [sp, #0]
 800f536:	4a19      	ldr	r2, [pc, #100]	; (800f59c <sqrtf+0x9c>)
 800f538:	9201      	str	r2, [sp, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	9208      	str	r2, [sp, #32]
 800f53e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f542:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f546:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f590 <sqrtf+0x90>
 800f54a:	b9a3      	cbnz	r3, 800f576 <sqrtf+0x76>
 800f54c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f550:	4668      	mov	r0, sp
 800f552:	f000 fe23 	bl	801019c <matherr>
 800f556:	b1a0      	cbz	r0, 800f582 <sqrtf+0x82>
 800f558:	9b08      	ldr	r3, [sp, #32]
 800f55a:	b11b      	cbz	r3, 800f564 <sqrtf+0x64>
 800f55c:	f000 ffc0 	bl	80104e0 <__errno>
 800f560:	9b08      	ldr	r3, [sp, #32]
 800f562:	6003      	str	r3, [r0, #0]
 800f564:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f568:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f56c:	b00b      	add	sp, #44	; 0x2c
 800f56e:	ecbd 8b02 	vpop	{d8}
 800f572:	f85d fb04 	ldr.w	pc, [sp], #4
 800f576:	2b02      	cmp	r3, #2
 800f578:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800f57c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800f580:	d1e6      	bne.n	800f550 <sqrtf+0x50>
 800f582:	f000 ffad 	bl	80104e0 <__errno>
 800f586:	2321      	movs	r3, #33	; 0x21
 800f588:	6003      	str	r3, [r0, #0]
 800f58a:	e7e5      	b.n	800f558 <sqrtf+0x58>
 800f58c:	f3af 8000 	nop.w
	...
 800f598:	20000374 	.word	0x20000374
 800f59c:	08014be2 	.word	0x08014be2

0800f5a0 <__ieee754_acosf>:
 800f5a0:	b508      	push	{r3, lr}
 800f5a2:	ee10 3a10 	vmov	r3, s0
 800f5a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f5aa:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f5ae:	ed2d 8b0c 	vpush	{d8-d13}
 800f5b2:	d109      	bne.n	800f5c8 <__ieee754_acosf+0x28>
 800f5b4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800f754 <__ieee754_acosf+0x1b4>
 800f5b8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800f758 <__ieee754_acosf+0x1b8>
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	fe30 0a08 	vselgt.f32	s0, s0, s16
 800f5c2:	ecbd 8b0c 	vpop	{d8-d13}
 800f5c6:	bd08      	pop	{r3, pc}
 800f5c8:	dd04      	ble.n	800f5d4 <__ieee754_acosf+0x34>
 800f5ca:	ee30 8a40 	vsub.f32	s16, s0, s0
 800f5ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f5d2:	e7f6      	b.n	800f5c2 <__ieee754_acosf+0x22>
 800f5d4:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800f5d8:	da3e      	bge.n	800f658 <__ieee754_acosf+0xb8>
 800f5da:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800f5de:	f340 80b5 	ble.w	800f74c <__ieee754_acosf+0x1ac>
 800f5e2:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f5e6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800f75c <__ieee754_acosf+0x1bc>
 800f5ea:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f760 <__ieee754_acosf+0x1c0>
 800f5ee:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 800f764 <__ieee754_acosf+0x1c4>
 800f5f2:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800f768 <__ieee754_acosf+0x1c8>
 800f5f6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f5fa:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800f76c <__ieee754_acosf+0x1cc>
 800f5fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f602:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800f770 <__ieee754_acosf+0x1d0>
 800f606:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f60a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800f774 <__ieee754_acosf+0x1d4>
 800f60e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f612:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f778 <__ieee754_acosf+0x1d8>
 800f616:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f61a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f77c <__ieee754_acosf+0x1dc>
 800f61e:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800f622:	eddf 6a57 	vldr	s13, [pc, #348]	; 800f780 <__ieee754_acosf+0x1e0>
 800f626:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f62a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800f784 <__ieee754_acosf+0x1e4>
 800f62e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f636:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f63a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f63e:	eef0 7a66 	vmov.f32	s15, s13
 800f642:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f646:	eea0 8a66 	vfms.f32	s16, s0, s13
 800f64a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f64e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f788 <__ieee754_acosf+0x1e8>
 800f652:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f656:	e7b4      	b.n	800f5c2 <__ieee754_acosf+0x22>
 800f658:	2b00      	cmp	r3, #0
 800f65a:	eddf da40 	vldr	s27, [pc, #256]	; 800f75c <__ieee754_acosf+0x1bc>
 800f65e:	eddf ca40 	vldr	s25, [pc, #256]	; 800f760 <__ieee754_acosf+0x1c0>
 800f662:	ed9f ca42 	vldr	s24, [pc, #264]	; 800f76c <__ieee754_acosf+0x1cc>
 800f666:	eddf ba42 	vldr	s23, [pc, #264]	; 800f770 <__ieee754_acosf+0x1d0>
 800f66a:	ed9f ba42 	vldr	s22, [pc, #264]	; 800f774 <__ieee754_acosf+0x1d4>
 800f66e:	eddf 8a42 	vldr	s17, [pc, #264]	; 800f778 <__ieee754_acosf+0x1d8>
 800f672:	ed9f da42 	vldr	s26, [pc, #264]	; 800f77c <__ieee754_acosf+0x1dc>
 800f676:	eddf aa3b 	vldr	s21, [pc, #236]	; 800f764 <__ieee754_acosf+0x1c4>
 800f67a:	ed9f aa41 	vldr	s20, [pc, #260]	; 800f780 <__ieee754_acosf+0x1e0>
 800f67e:	eddf 9a41 	vldr	s19, [pc, #260]	; 800f784 <__ieee754_acosf+0x1e4>
 800f682:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f686:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f68a:	da28      	bge.n	800f6de <__ieee754_acosf+0x13e>
 800f68c:	ee30 0a09 	vadd.f32	s0, s0, s18
 800f690:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f694:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800f698:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800f69c:	eeac ca80 	vfma.f32	s24, s25, s0
 800f6a0:	eeaa aa80 	vfma.f32	s20, s21, s0
 800f6a4:	eeec ba00 	vfma.f32	s23, s24, s0
 800f6a8:	eeea 9a00 	vfma.f32	s19, s20, s0
 800f6ac:	eeab ba80 	vfma.f32	s22, s23, s0
 800f6b0:	eea9 9a80 	vfma.f32	s18, s19, s0
 800f6b4:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800f6b8:	ee68 8a80 	vmul.f32	s17, s17, s0
 800f6bc:	f000 fa42 	bl	800fb44 <__ieee754_sqrtf>
 800f6c0:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800f6c4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f78c <__ieee754_acosf+0x1ec>
 800f6c8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f6cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f6d0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f6d4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800f790 <__ieee754_acosf+0x1f0>
 800f6d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f6dc:	e771      	b.n	800f5c2 <__ieee754_acosf+0x22>
 800f6de:	ee39 8a40 	vsub.f32	s16, s18, s0
 800f6e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6ea:	f000 fa2b 	bl	800fb44 <__ieee754_sqrtf>
 800f6ee:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800f6f2:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800f6f6:	eeac ca88 	vfma.f32	s24, s25, s16
 800f6fa:	eeaa aa88 	vfma.f32	s20, s21, s16
 800f6fe:	eeec ba08 	vfma.f32	s23, s24, s16
 800f702:	ee10 3a10 	vmov	r3, s0
 800f706:	eeab ba88 	vfma.f32	s22, s23, s16
 800f70a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f70e:	f023 030f 	bic.w	r3, r3, #15
 800f712:	eeea 9a08 	vfma.f32	s19, s20, s16
 800f716:	ee07 3a90 	vmov	s15, r3
 800f71a:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800f71e:	eeb0 6a48 	vmov.f32	s12, s16
 800f722:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800f726:	eea9 9a88 	vfma.f32	s18, s19, s16
 800f72a:	ee70 6a27 	vadd.f32	s13, s0, s15
 800f72e:	ee68 8a88 	vmul.f32	s17, s17, s16
 800f732:	eeb0 7a40 	vmov.f32	s14, s0
 800f736:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800f73a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800f73e:	eea7 0a26 	vfma.f32	s0, s14, s13
 800f742:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f746:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f74a:	e73a      	b.n	800f5c2 <__ieee754_acosf+0x22>
 800f74c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800f794 <__ieee754_acosf+0x1f4>
 800f750:	e737      	b.n	800f5c2 <__ieee754_acosf+0x22>
 800f752:	bf00      	nop
 800f754:	00000000 	.word	0x00000000
 800f758:	40490fdb 	.word	0x40490fdb
 800f75c:	3811ef08 	.word	0x3811ef08
 800f760:	3a4f7f04 	.word	0x3a4f7f04
 800f764:	bf303361 	.word	0xbf303361
 800f768:	33a22168 	.word	0x33a22168
 800f76c:	bd241146 	.word	0xbd241146
 800f770:	3e4e0aa8 	.word	0x3e4e0aa8
 800f774:	bea6b090 	.word	0xbea6b090
 800f778:	3e2aaaab 	.word	0x3e2aaaab
 800f77c:	3d9dc62e 	.word	0x3d9dc62e
 800f780:	4001572d 	.word	0x4001572d
 800f784:	c019d139 	.word	0xc019d139
 800f788:	3fc90fda 	.word	0x3fc90fda
 800f78c:	b3a22168 	.word	0xb3a22168
 800f790:	40490fda 	.word	0x40490fda
 800f794:	3fc90fdb 	.word	0x3fc90fdb

0800f798 <__ieee754_atan2f>:
 800f798:	ee10 2a90 	vmov	r2, s1
 800f79c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f7a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	eef0 7a40 	vmov.f32	s15, s0
 800f7aa:	dc06      	bgt.n	800f7ba <__ieee754_atan2f+0x22>
 800f7ac:	ee10 0a10 	vmov	r0, s0
 800f7b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f7b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f7b8:	dd04      	ble.n	800f7c4 <__ieee754_atan2f+0x2c>
 800f7ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f7be:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c2:	bd10      	pop	{r4, pc}
 800f7c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f7c8:	d103      	bne.n	800f7d2 <__ieee754_atan2f+0x3a>
 800f7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7ce:	f000 bcef 	b.w	80101b0 <atanf>
 800f7d2:	1794      	asrs	r4, r2, #30
 800f7d4:	f004 0402 	and.w	r4, r4, #2
 800f7d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f7dc:	b93b      	cbnz	r3, 800f7ee <__ieee754_atan2f+0x56>
 800f7de:	2c02      	cmp	r4, #2
 800f7e0:	d06b      	beq.n	800f8ba <__ieee754_atan2f+0x122>
 800f7e2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f8c0 <__ieee754_atan2f+0x128>
 800f7e6:	2c03      	cmp	r4, #3
 800f7e8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800f7ec:	e7e7      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f7ee:	b939      	cbnz	r1, 800f800 <__ieee754_atan2f+0x68>
 800f7f0:	eddf 7a34 	vldr	s15, [pc, #208]	; 800f8c4 <__ieee754_atan2f+0x12c>
 800f7f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f8c8 <__ieee754_atan2f+0x130>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	fe67 7a87 	vselge.f32	s15, s15, s14
 800f7fe:	e7de      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f800:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f804:	d121      	bne.n	800f84a <__ieee754_atan2f+0xb2>
 800f806:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f80a:	d111      	bne.n	800f830 <__ieee754_atan2f+0x98>
 800f80c:	2c02      	cmp	r4, #2
 800f80e:	d009      	beq.n	800f824 <__ieee754_atan2f+0x8c>
 800f810:	2c03      	cmp	r4, #3
 800f812:	d00a      	beq.n	800f82a <__ieee754_atan2f+0x92>
 800f814:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f8cc <__ieee754_atan2f+0x134>
 800f818:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800f8d0 <__ieee754_atan2f+0x138>
 800f81c:	2c01      	cmp	r4, #1
 800f81e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800f822:	e7cc      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f824:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f8d4 <__ieee754_atan2f+0x13c>
 800f828:	e7c9      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f82a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f8d8 <__ieee754_atan2f+0x140>
 800f82e:	e7c6      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f830:	2c02      	cmp	r4, #2
 800f832:	d042      	beq.n	800f8ba <__ieee754_atan2f+0x122>
 800f834:	2c03      	cmp	r4, #3
 800f836:	d005      	beq.n	800f844 <__ieee754_atan2f+0xac>
 800f838:	2c01      	cmp	r4, #1
 800f83a:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f8dc <__ieee754_atan2f+0x144>
 800f83e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f8e0 <__ieee754_atan2f+0x148>
 800f842:	e7ec      	b.n	800f81e <__ieee754_atan2f+0x86>
 800f844:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f8c0 <__ieee754_atan2f+0x128>
 800f848:	e7b9      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f84a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f84e:	d0cf      	beq.n	800f7f0 <__ieee754_atan2f+0x58>
 800f850:	1a5b      	subs	r3, r3, r1
 800f852:	15db      	asrs	r3, r3, #23
 800f854:	2b3c      	cmp	r3, #60	; 0x3c
 800f856:	dc1a      	bgt.n	800f88e <__ieee754_atan2f+0xf6>
 800f858:	2a00      	cmp	r2, #0
 800f85a:	da01      	bge.n	800f860 <__ieee754_atan2f+0xc8>
 800f85c:	333c      	adds	r3, #60	; 0x3c
 800f85e:	db19      	blt.n	800f894 <__ieee754_atan2f+0xfc>
 800f860:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f864:	f000 fd76 	bl	8010354 <fabsf>
 800f868:	f000 fca2 	bl	80101b0 <atanf>
 800f86c:	eef0 7a40 	vmov.f32	s15, s0
 800f870:	2c01      	cmp	r4, #1
 800f872:	d012      	beq.n	800f89a <__ieee754_atan2f+0x102>
 800f874:	2c02      	cmp	r4, #2
 800f876:	d017      	beq.n	800f8a8 <__ieee754_atan2f+0x110>
 800f878:	2c00      	cmp	r4, #0
 800f87a:	d0a0      	beq.n	800f7be <__ieee754_atan2f+0x26>
 800f87c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f8e4 <__ieee754_atan2f+0x14c>
 800f880:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f884:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f8e8 <__ieee754_atan2f+0x150>
 800f888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f88c:	e797      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f88e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f8c4 <__ieee754_atan2f+0x12c>
 800f892:	e7ed      	b.n	800f870 <__ieee754_atan2f+0xd8>
 800f894:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f8e0 <__ieee754_atan2f+0x148>
 800f898:	e7ea      	b.n	800f870 <__ieee754_atan2f+0xd8>
 800f89a:	ee17 3a90 	vmov	r3, s15
 800f89e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8a2:	ee07 3a90 	vmov	s15, r3
 800f8a6:	e78a      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f8a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f8e4 <__ieee754_atan2f+0x14c>
 800f8ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8b0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f8e8 <__ieee754_atan2f+0x150>
 800f8b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8b8:	e781      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f8ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f8e8 <__ieee754_atan2f+0x150>
 800f8be:	e77e      	b.n	800f7be <__ieee754_atan2f+0x26>
 800f8c0:	c0490fdb 	.word	0xc0490fdb
 800f8c4:	3fc90fdb 	.word	0x3fc90fdb
 800f8c8:	bfc90fdb 	.word	0xbfc90fdb
 800f8cc:	bf490fdb 	.word	0xbf490fdb
 800f8d0:	3f490fdb 	.word	0x3f490fdb
 800f8d4:	4016cbe4 	.word	0x4016cbe4
 800f8d8:	c016cbe4 	.word	0xc016cbe4
 800f8dc:	80000000 	.word	0x80000000
 800f8e0:	00000000 	.word	0x00000000
 800f8e4:	33bbbd2e 	.word	0x33bbbd2e
 800f8e8:	40490fdb 	.word	0x40490fdb

0800f8ec <__ieee754_rem_pio2f>:
 800f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ee:	ee10 6a10 	vmov	r6, s0
 800f8f2:	4b86      	ldr	r3, [pc, #536]	; (800fb0c <__ieee754_rem_pio2f+0x220>)
 800f8f4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800f8f8:	429c      	cmp	r4, r3
 800f8fa:	b087      	sub	sp, #28
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	dc05      	bgt.n	800f90c <__ieee754_rem_pio2f+0x20>
 800f900:	2300      	movs	r3, #0
 800f902:	ed85 0a00 	vstr	s0, [r5]
 800f906:	6043      	str	r3, [r0, #4]
 800f908:	2000      	movs	r0, #0
 800f90a:	e020      	b.n	800f94e <__ieee754_rem_pio2f+0x62>
 800f90c:	4b80      	ldr	r3, [pc, #512]	; (800fb10 <__ieee754_rem_pio2f+0x224>)
 800f90e:	429c      	cmp	r4, r3
 800f910:	dc38      	bgt.n	800f984 <__ieee754_rem_pio2f+0x98>
 800f912:	2e00      	cmp	r6, #0
 800f914:	f024 040f 	bic.w	r4, r4, #15
 800f918:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800fb14 <__ieee754_rem_pio2f+0x228>
 800f91c:	4b7e      	ldr	r3, [pc, #504]	; (800fb18 <__ieee754_rem_pio2f+0x22c>)
 800f91e:	dd18      	ble.n	800f952 <__ieee754_rem_pio2f+0x66>
 800f920:	429c      	cmp	r4, r3
 800f922:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f926:	bf09      	itett	eq
 800f928:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800fb1c <__ieee754_rem_pio2f+0x230>
 800f92c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800fb20 <__ieee754_rem_pio2f+0x234>
 800f930:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f934:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800fb24 <__ieee754_rem_pio2f+0x238>
 800f938:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f93c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f940:	edc0 6a00 	vstr	s13, [r0]
 800f944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f948:	edc0 7a01 	vstr	s15, [r0, #4]
 800f94c:	2001      	movs	r0, #1
 800f94e:	b007      	add	sp, #28
 800f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f952:	429c      	cmp	r4, r3
 800f954:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f958:	bf09      	itett	eq
 800f95a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800fb1c <__ieee754_rem_pio2f+0x230>
 800f95e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800fb20 <__ieee754_rem_pio2f+0x234>
 800f962:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f966:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800fb24 <__ieee754_rem_pio2f+0x238>
 800f96a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f96e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f972:	edc0 6a00 	vstr	s13, [r0]
 800f976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f97a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f97e:	f04f 30ff 	mov.w	r0, #4294967295
 800f982:	e7e4      	b.n	800f94e <__ieee754_rem_pio2f+0x62>
 800f984:	4b68      	ldr	r3, [pc, #416]	; (800fb28 <__ieee754_rem_pio2f+0x23c>)
 800f986:	429c      	cmp	r4, r3
 800f988:	dc71      	bgt.n	800fa6e <__ieee754_rem_pio2f+0x182>
 800f98a:	f000 fce3 	bl	8010354 <fabsf>
 800f98e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb2c <__ieee754_rem_pio2f+0x240>
 800f992:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f996:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f99e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f9a2:	ee17 0a90 	vmov	r0, s15
 800f9a6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb14 <__ieee754_rem_pio2f+0x228>
 800f9aa:	eeb1 7a46 	vneg.f32	s14, s12
 800f9ae:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f9b2:	281f      	cmp	r0, #31
 800f9b4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800fb20 <__ieee754_rem_pio2f+0x234>
 800f9b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f9bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f9c0:	ee16 3a90 	vmov	r3, s13
 800f9c4:	dc1c      	bgt.n	800fa00 <__ieee754_rem_pio2f+0x114>
 800f9c6:	1e47      	subs	r7, r0, #1
 800f9c8:	4959      	ldr	r1, [pc, #356]	; (800fb30 <__ieee754_rem_pio2f+0x244>)
 800f9ca:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f9ce:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800f9d2:	428a      	cmp	r2, r1
 800f9d4:	d014      	beq.n	800fa00 <__ieee754_rem_pio2f+0x114>
 800f9d6:	602b      	str	r3, [r5, #0]
 800f9d8:	ed95 7a00 	vldr	s14, [r5]
 800f9dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f9e0:	2e00      	cmp	r6, #0
 800f9e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9e6:	ed85 0a01 	vstr	s0, [r5, #4]
 800f9ea:	dab0      	bge.n	800f94e <__ieee754_rem_pio2f+0x62>
 800f9ec:	eeb1 7a47 	vneg.f32	s14, s14
 800f9f0:	eeb1 0a40 	vneg.f32	s0, s0
 800f9f4:	ed85 7a00 	vstr	s14, [r5]
 800f9f8:	ed85 0a01 	vstr	s0, [r5, #4]
 800f9fc:	4240      	negs	r0, r0
 800f9fe:	e7a6      	b.n	800f94e <__ieee754_rem_pio2f+0x62>
 800fa00:	15e4      	asrs	r4, r4, #23
 800fa02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fa06:	1aa2      	subs	r2, r4, r2
 800fa08:	2a08      	cmp	r2, #8
 800fa0a:	dde4      	ble.n	800f9d6 <__ieee754_rem_pio2f+0xea>
 800fa0c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800fb1c <__ieee754_rem_pio2f+0x230>
 800fa10:	eef0 6a40 	vmov.f32	s13, s0
 800fa14:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa18:	ee30 0a66 	vsub.f32	s0, s0, s13
 800fa1c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fa20:	eddf 7a40 	vldr	s15, [pc, #256]	; 800fb24 <__ieee754_rem_pio2f+0x238>
 800fa24:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800fa28:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800fa2c:	eef0 7a40 	vmov.f32	s15, s0
 800fa30:	ee15 3a90 	vmov	r3, s11
 800fa34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fa38:	1aa4      	subs	r4, r4, r2
 800fa3a:	2c19      	cmp	r4, #25
 800fa3c:	dc04      	bgt.n	800fa48 <__ieee754_rem_pio2f+0x15c>
 800fa3e:	edc5 5a00 	vstr	s11, [r5]
 800fa42:	eeb0 0a66 	vmov.f32	s0, s13
 800fa46:	e7c7      	b.n	800f9d8 <__ieee754_rem_pio2f+0xec>
 800fa48:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800fb34 <__ieee754_rem_pio2f+0x248>
 800fa4c:	eeb0 0a66 	vmov.f32	s0, s13
 800fa50:	eea7 0a25 	vfma.f32	s0, s14, s11
 800fa54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa58:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fa5c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fb38 <__ieee754_rem_pio2f+0x24c>
 800fa60:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800fa64:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa68:	ed85 7a00 	vstr	s14, [r5]
 800fa6c:	e7b4      	b.n	800f9d8 <__ieee754_rem_pio2f+0xec>
 800fa6e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fa72:	db06      	blt.n	800fa82 <__ieee754_rem_pio2f+0x196>
 800fa74:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa78:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa7c:	edc0 7a00 	vstr	s15, [r0]
 800fa80:	e742      	b.n	800f908 <__ieee754_rem_pio2f+0x1c>
 800fa82:	15e2      	asrs	r2, r4, #23
 800fa84:	3a86      	subs	r2, #134	; 0x86
 800fa86:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800fa8a:	ee07 3a90 	vmov	s15, r3
 800fa8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa92:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800fb3c <__ieee754_rem_pio2f+0x250>
 800fa96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800faa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800faa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800faaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fab2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800faba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	edcd 7a05 	vstr	s15, [sp, #20]
 800fac6:	d11e      	bne.n	800fb06 <__ieee754_rem_pio2f+0x21a>
 800fac8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800facc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad0:	bf0c      	ite	eq
 800fad2:	2301      	moveq	r3, #1
 800fad4:	2302      	movne	r3, #2
 800fad6:	491a      	ldr	r1, [pc, #104]	; (800fb40 <__ieee754_rem_pio2f+0x254>)
 800fad8:	9101      	str	r1, [sp, #4]
 800fada:	2102      	movs	r1, #2
 800fadc:	9100      	str	r1, [sp, #0]
 800fade:	a803      	add	r0, sp, #12
 800fae0:	4629      	mov	r1, r5
 800fae2:	f000 f891 	bl	800fc08 <__kernel_rem_pio2f>
 800fae6:	2e00      	cmp	r6, #0
 800fae8:	f6bf af31 	bge.w	800f94e <__ieee754_rem_pio2f+0x62>
 800faec:	edd5 7a00 	vldr	s15, [r5]
 800faf0:	eef1 7a67 	vneg.f32	s15, s15
 800faf4:	edc5 7a00 	vstr	s15, [r5]
 800faf8:	edd5 7a01 	vldr	s15, [r5, #4]
 800fafc:	eef1 7a67 	vneg.f32	s15, s15
 800fb00:	edc5 7a01 	vstr	s15, [r5, #4]
 800fb04:	e77a      	b.n	800f9fc <__ieee754_rem_pio2f+0x110>
 800fb06:	2303      	movs	r3, #3
 800fb08:	e7e5      	b.n	800fad6 <__ieee754_rem_pio2f+0x1ea>
 800fb0a:	bf00      	nop
 800fb0c:	3f490fd8 	.word	0x3f490fd8
 800fb10:	4016cbe3 	.word	0x4016cbe3
 800fb14:	3fc90f80 	.word	0x3fc90f80
 800fb18:	3fc90fd0 	.word	0x3fc90fd0
 800fb1c:	37354400 	.word	0x37354400
 800fb20:	37354443 	.word	0x37354443
 800fb24:	2e85a308 	.word	0x2e85a308
 800fb28:	43490f80 	.word	0x43490f80
 800fb2c:	3f22f984 	.word	0x3f22f984
 800fb30:	08014be8 	.word	0x08014be8
 800fb34:	2e85a300 	.word	0x2e85a300
 800fb38:	248d3132 	.word	0x248d3132
 800fb3c:	43800000 	.word	0x43800000
 800fb40:	08014c68 	.word	0x08014c68

0800fb44 <__ieee754_sqrtf>:
 800fb44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb48:	4770      	bx	lr
	...

0800fb4c <__kernel_cosf>:
 800fb4c:	ee10 3a10 	vmov	r3, s0
 800fb50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb5c:	da05      	bge.n	800fb6a <__kernel_cosf+0x1e>
 800fb5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb62:	ee17 2a90 	vmov	r2, s15
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	d03b      	beq.n	800fbe2 <__kernel_cosf+0x96>
 800fb6a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800fb6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fb72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800fbe8 <__kernel_cosf+0x9c>
 800fb76:	4a1d      	ldr	r2, [pc, #116]	; (800fbec <__kernel_cosf+0xa0>)
 800fb78:	ee66 7a07 	vmul.f32	s15, s12, s14
 800fb7c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800fbf0 <__kernel_cosf+0xa4>
 800fb80:	eea6 7a25 	vfma.f32	s14, s12, s11
 800fb84:	4293      	cmp	r3, r2
 800fb86:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800fbf4 <__kernel_cosf+0xa8>
 800fb8a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800fb8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fbf8 <__kernel_cosf+0xac>
 800fb92:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fb96:	eddf 5a19 	vldr	s11, [pc, #100]	; 800fbfc <__kernel_cosf+0xb0>
 800fb9a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800fb9e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800fc00 <__kernel_cosf+0xb4>
 800fba2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fba6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800fbaa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fbae:	eee6 0a07 	vfma.f32	s1, s12, s14
 800fbb2:	dc04      	bgt.n	800fbbe <__kernel_cosf+0x72>
 800fbb4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800fbb8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800fbbc:	4770      	bx	lr
 800fbbe:	4a11      	ldr	r2, [pc, #68]	; (800fc04 <__kernel_cosf+0xb8>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	bfda      	itte	le
 800fbc4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800fbc8:	ee07 3a10 	vmovle	s14, r3
 800fbcc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800fbd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbd4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800fbd8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fbdc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fbe0:	4770      	bx	lr
 800fbe2:	eeb0 0a66 	vmov.f32	s0, s13
 800fbe6:	4770      	bx	lr
 800fbe8:	ad47d74e 	.word	0xad47d74e
 800fbec:	3e999999 	.word	0x3e999999
 800fbf0:	310f74f6 	.word	0x310f74f6
 800fbf4:	b493f27c 	.word	0xb493f27c
 800fbf8:	37d00d01 	.word	0x37d00d01
 800fbfc:	bab60b61 	.word	0xbab60b61
 800fc00:	3d2aaaab 	.word	0x3d2aaaab
 800fc04:	3f480000 	.word	0x3f480000

0800fc08 <__kernel_rem_pio2f>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	ed2d 8b04 	vpush	{d8-d9}
 800fc10:	b0d7      	sub	sp, #348	; 0x15c
 800fc12:	469b      	mov	fp, r3
 800fc14:	460e      	mov	r6, r1
 800fc16:	4bbe      	ldr	r3, [pc, #760]	; (800ff10 <__kernel_rem_pio2f+0x308>)
 800fc18:	9964      	ldr	r1, [sp, #400]	; 0x190
 800fc1a:	9002      	str	r0, [sp, #8]
 800fc1c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800fc20:	9865      	ldr	r0, [sp, #404]	; 0x194
 800fc22:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800ff20 <__kernel_rem_pio2f+0x318>
 800fc26:	1ed1      	subs	r1, r2, #3
 800fc28:	2308      	movs	r3, #8
 800fc2a:	fb91 f1f3 	sdiv	r1, r1, r3
 800fc2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800fc32:	f10b 3aff 	add.w	sl, fp, #4294967295
 800fc36:	1c4c      	adds	r4, r1, #1
 800fc38:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800fc3c:	eba1 050a 	sub.w	r5, r1, sl
 800fc40:	aa1a      	add	r2, sp, #104	; 0x68
 800fc42:	eb09 070a 	add.w	r7, r9, sl
 800fc46:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800fc4a:	4696      	mov	lr, r2
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	42bb      	cmp	r3, r7
 800fc50:	dd0f      	ble.n	800fc72 <__kernel_rem_pio2f+0x6a>
 800fc52:	af42      	add	r7, sp, #264	; 0x108
 800fc54:	2200      	movs	r2, #0
 800fc56:	454a      	cmp	r2, r9
 800fc58:	dc27      	bgt.n	800fcaa <__kernel_rem_pio2f+0xa2>
 800fc5a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800fc5e:	eb0b 0302 	add.w	r3, fp, r2
 800fc62:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800fc66:	9d02      	ldr	r5, [sp, #8]
 800fc68:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ff20 <__kernel_rem_pio2f+0x318>
 800fc6c:	f04f 0c00 	mov.w	ip, #0
 800fc70:	e015      	b.n	800fc9e <__kernel_rem_pio2f+0x96>
 800fc72:	42dd      	cmn	r5, r3
 800fc74:	bf5d      	ittte	pl
 800fc76:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800fc7a:	ee07 2a90 	vmovpl	s15, r2
 800fc7e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc82:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc86:	ecee 7a01 	vstmia	lr!, {s15}
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	e7df      	b.n	800fc4e <__kernel_rem_pio2f+0x46>
 800fc8e:	ecf5 6a01 	vldmia	r5!, {s13}
 800fc92:	ed33 7a01 	vldmdb	r3!, {s14}
 800fc96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc9a:	f10c 0c01 	add.w	ip, ip, #1
 800fc9e:	45d4      	cmp	ip, sl
 800fca0:	ddf5      	ble.n	800fc8e <__kernel_rem_pio2f+0x86>
 800fca2:	ece7 7a01 	vstmia	r7!, {s15}
 800fca6:	3201      	adds	r2, #1
 800fca8:	e7d5      	b.n	800fc56 <__kernel_rem_pio2f+0x4e>
 800fcaa:	ab06      	add	r3, sp, #24
 800fcac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800ff1c <__kernel_rem_pio2f+0x314>
 800fcb6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800ff18 <__kernel_rem_pio2f+0x310>
 800fcba:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800fcbe:	9303      	str	r3, [sp, #12]
 800fcc0:	464d      	mov	r5, r9
 800fcc2:	ab56      	add	r3, sp, #344	; 0x158
 800fcc4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800fcc8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800fccc:	3f01      	subs	r7, #1
 800fcce:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800fcd2:	00bf      	lsls	r7, r7, #2
 800fcd4:	ab56      	add	r3, sp, #344	; 0x158
 800fcd6:	19da      	adds	r2, r3, r7
 800fcd8:	3a4c      	subs	r2, #76	; 0x4c
 800fcda:	2300      	movs	r3, #0
 800fcdc:	1ae9      	subs	r1, r5, r3
 800fcde:	2900      	cmp	r1, #0
 800fce0:	dc4c      	bgt.n	800fd7c <__kernel_rem_pio2f+0x174>
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 fb80 	bl	80103e8 <scalbnf>
 800fce8:	eeb0 8a40 	vmov.f32	s16, s0
 800fcec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fcf0:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fcf4:	f000 fb36 	bl	8010364 <floorf>
 800fcf8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fcfc:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fd00:	2c00      	cmp	r4, #0
 800fd02:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fd06:	edcd 7a01 	vstr	s15, [sp, #4]
 800fd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd0e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd12:	dd48      	ble.n	800fda6 <__kernel_rem_pio2f+0x19e>
 800fd14:	1e69      	subs	r1, r5, #1
 800fd16:	ab06      	add	r3, sp, #24
 800fd18:	f1c4 0008 	rsb	r0, r4, #8
 800fd1c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800fd20:	9a01      	ldr	r2, [sp, #4]
 800fd22:	fa4c f300 	asr.w	r3, ip, r0
 800fd26:	441a      	add	r2, r3
 800fd28:	4083      	lsls	r3, r0
 800fd2a:	9201      	str	r2, [sp, #4]
 800fd2c:	ebac 0203 	sub.w	r2, ip, r3
 800fd30:	ab06      	add	r3, sp, #24
 800fd32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fd36:	f1c4 0307 	rsb	r3, r4, #7
 800fd3a:	fa42 f803 	asr.w	r8, r2, r3
 800fd3e:	f1b8 0f00 	cmp.w	r8, #0
 800fd42:	dd41      	ble.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd44:	9b01      	ldr	r3, [sp, #4]
 800fd46:	2000      	movs	r0, #0
 800fd48:	3301      	adds	r3, #1
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	4601      	mov	r1, r0
 800fd4e:	4285      	cmp	r5, r0
 800fd50:	dc6d      	bgt.n	800fe2e <__kernel_rem_pio2f+0x226>
 800fd52:	2c00      	cmp	r4, #0
 800fd54:	dd04      	ble.n	800fd60 <__kernel_rem_pio2f+0x158>
 800fd56:	2c01      	cmp	r4, #1
 800fd58:	d07e      	beq.n	800fe58 <__kernel_rem_pio2f+0x250>
 800fd5a:	2c02      	cmp	r4, #2
 800fd5c:	f000 8086 	beq.w	800fe6c <__kernel_rem_pio2f+0x264>
 800fd60:	f1b8 0f02 	cmp.w	r8, #2
 800fd64:	d130      	bne.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd6a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd6e:	b359      	cbz	r1, 800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fb39 	bl	80103e8 <scalbnf>
 800fd76:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd7a:	e025      	b.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd7c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd80:	a806      	add	r0, sp, #24
 800fd82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd8a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd92:	ee10 1a10 	vmov	r1, s0
 800fd96:	ed32 0a01 	vldmdb	r2!, {s0}
 800fd9a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800fd9e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fda2:	3301      	adds	r3, #1
 800fda4:	e79a      	b.n	800fcdc <__kernel_rem_pio2f+0xd4>
 800fda6:	d106      	bne.n	800fdb6 <__kernel_rem_pio2f+0x1ae>
 800fda8:	1e6b      	subs	r3, r5, #1
 800fdaa:	aa06      	add	r2, sp, #24
 800fdac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fdb0:	ea4f 2822 	mov.w	r8, r2, asr #8
 800fdb4:	e7c3      	b.n	800fd3e <__kernel_rem_pio2f+0x136>
 800fdb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fdba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc2:	da31      	bge.n	800fe28 <__kernel_rem_pio2f+0x220>
 800fdc4:	f04f 0800 	mov.w	r8, #0
 800fdc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd0:	f040 80a8 	bne.w	800ff24 <__kernel_rem_pio2f+0x31c>
 800fdd4:	1e6b      	subs	r3, r5, #1
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4548      	cmp	r0, r9
 800fddc:	da4d      	bge.n	800fe7a <__kernel_rem_pio2f+0x272>
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	f000 8087 	beq.w	800fef2 <__kernel_rem_pio2f+0x2ea>
 800fde4:	aa06      	add	r2, sp, #24
 800fde6:	3c08      	subs	r4, #8
 800fde8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fdec:	2900      	cmp	r1, #0
 800fdee:	f000 808d 	beq.w	800ff0c <__kernel_rem_pio2f+0x304>
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	f000 faf5 	bl	80103e8 <scalbnf>
 800fdfe:	9b02      	ldr	r3, [sp, #8]
 800fe00:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ff1c <__kernel_rem_pio2f+0x314>
 800fe04:	0099      	lsls	r1, r3, #2
 800fe06:	aa42      	add	r2, sp, #264	; 0x108
 800fe08:	1850      	adds	r0, r2, r1
 800fe0a:	1d05      	adds	r5, r0, #4
 800fe0c:	461c      	mov	r4, r3
 800fe0e:	2c00      	cmp	r4, #0
 800fe10:	f280 80b8 	bge.w	800ff84 <__kernel_rem_pio2f+0x37c>
 800fe14:	2500      	movs	r5, #0
 800fe16:	1b5c      	subs	r4, r3, r5
 800fe18:	2c00      	cmp	r4, #0
 800fe1a:	f2c0 80d8 	blt.w	800ffce <__kernel_rem_pio2f+0x3c6>
 800fe1e:	4f3d      	ldr	r7, [pc, #244]	; (800ff14 <__kernel_rem_pio2f+0x30c>)
 800fe20:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ff20 <__kernel_rem_pio2f+0x318>
 800fe24:	2400      	movs	r4, #0
 800fe26:	e0c6      	b.n	800ffb6 <__kernel_rem_pio2f+0x3ae>
 800fe28:	f04f 0802 	mov.w	r8, #2
 800fe2c:	e78a      	b.n	800fd44 <__kernel_rem_pio2f+0x13c>
 800fe2e:	ab06      	add	r3, sp, #24
 800fe30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fe34:	b949      	cbnz	r1, 800fe4a <__kernel_rem_pio2f+0x242>
 800fe36:	b12b      	cbz	r3, 800fe44 <__kernel_rem_pio2f+0x23c>
 800fe38:	aa06      	add	r2, sp, #24
 800fe3a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800fe3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fe42:	2301      	movs	r3, #1
 800fe44:	3001      	adds	r0, #1
 800fe46:	4619      	mov	r1, r3
 800fe48:	e781      	b.n	800fd4e <__kernel_rem_pio2f+0x146>
 800fe4a:	aa06      	add	r2, sp, #24
 800fe4c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800fe50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fe54:	460b      	mov	r3, r1
 800fe56:	e7f5      	b.n	800fe44 <__kernel_rem_pio2f+0x23c>
 800fe58:	1e68      	subs	r0, r5, #1
 800fe5a:	ab06      	add	r3, sp, #24
 800fe5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fe60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe64:	aa06      	add	r2, sp, #24
 800fe66:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fe6a:	e779      	b.n	800fd60 <__kernel_rem_pio2f+0x158>
 800fe6c:	1e68      	subs	r0, r5, #1
 800fe6e:	ab06      	add	r3, sp, #24
 800fe70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fe74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe78:	e7f4      	b.n	800fe64 <__kernel_rem_pio2f+0x25c>
 800fe7a:	a906      	add	r1, sp, #24
 800fe7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fe80:	3801      	subs	r0, #1
 800fe82:	430a      	orrs	r2, r1
 800fe84:	e7a9      	b.n	800fdda <__kernel_rem_pio2f+0x1d2>
 800fe86:	f10c 0c01 	add.w	ip, ip, #1
 800fe8a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe8e:	2a00      	cmp	r2, #0
 800fe90:	d0f9      	beq.n	800fe86 <__kernel_rem_pio2f+0x27e>
 800fe92:	eb0b 0305 	add.w	r3, fp, r5
 800fe96:	aa1a      	add	r2, sp, #104	; 0x68
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	1898      	adds	r0, r3, r2
 800fe9c:	3004      	adds	r0, #4
 800fe9e:	1c69      	adds	r1, r5, #1
 800fea0:	3704      	adds	r7, #4
 800fea2:	2200      	movs	r2, #0
 800fea4:	4465      	add	r5, ip
 800fea6:	9005      	str	r0, [sp, #20]
 800fea8:	428d      	cmp	r5, r1
 800feaa:	f6ff af0a 	blt.w	800fcc2 <__kernel_rem_pio2f+0xba>
 800feae:	a81a      	add	r0, sp, #104	; 0x68
 800feb0:	eb02 0c03 	add.w	ip, r2, r3
 800feb4:	4484      	add	ip, r0
 800feb6:	9803      	ldr	r0, [sp, #12]
 800feb8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800febc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800fec0:	9001      	str	r0, [sp, #4]
 800fec2:	ee07 0a90 	vmov	s15, r0
 800fec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feca:	9805      	ldr	r0, [sp, #20]
 800fecc:	edcc 7a00 	vstr	s15, [ip]
 800fed0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800ff20 <__kernel_rem_pio2f+0x318>
 800fed4:	eb00 0802 	add.w	r8, r0, r2
 800fed8:	f04f 0c00 	mov.w	ip, #0
 800fedc:	45d4      	cmp	ip, sl
 800fede:	dd0c      	ble.n	800fefa <__kernel_rem_pio2f+0x2f2>
 800fee0:	eb02 0c07 	add.w	ip, r2, r7
 800fee4:	a842      	add	r0, sp, #264	; 0x108
 800fee6:	4484      	add	ip, r0
 800fee8:	edcc 7a01 	vstr	s15, [ip, #4]
 800feec:	3101      	adds	r1, #1
 800feee:	3204      	adds	r2, #4
 800fef0:	e7da      	b.n	800fea8 <__kernel_rem_pio2f+0x2a0>
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	f04f 0c01 	mov.w	ip, #1
 800fef8:	e7c7      	b.n	800fe8a <__kernel_rem_pio2f+0x282>
 800fefa:	ecfe 6a01 	vldmia	lr!, {s13}
 800fefe:	ed38 7a01 	vldmdb	r8!, {s14}
 800ff02:	f10c 0c01 	add.w	ip, ip, #1
 800ff06:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff0a:	e7e7      	b.n	800fedc <__kernel_rem_pio2f+0x2d4>
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	e769      	b.n	800fde4 <__kernel_rem_pio2f+0x1dc>
 800ff10:	08014fac 	.word	0x08014fac
 800ff14:	08014f80 	.word	0x08014f80
 800ff18:	43800000 	.word	0x43800000
 800ff1c:	3b800000 	.word	0x3b800000
 800ff20:	00000000 	.word	0x00000000
 800ff24:	4260      	negs	r0, r4
 800ff26:	eeb0 0a48 	vmov.f32	s0, s16
 800ff2a:	f000 fa5d 	bl	80103e8 <scalbnf>
 800ff2e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800ff18 <__kernel_rem_pio2f+0x310>
 800ff32:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ff36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3a:	db1a      	blt.n	800ff72 <__kernel_rem_pio2f+0x36a>
 800ff3c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ff1c <__kernel_rem_pio2f+0x314>
 800ff40:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ff44:	aa06      	add	r2, sp, #24
 800ff46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff4a:	a906      	add	r1, sp, #24
 800ff4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff50:	3408      	adds	r4, #8
 800ff52:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff5e:	ee10 3a10 	vmov	r3, s0
 800ff62:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ff66:	1c6b      	adds	r3, r5, #1
 800ff68:	ee17 2a90 	vmov	r2, s15
 800ff6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ff70:	e73f      	b.n	800fdf2 <__kernel_rem_pio2f+0x1ea>
 800ff72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff76:	aa06      	add	r2, sp, #24
 800ff78:	ee10 3a10 	vmov	r3, s0
 800ff7c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ff80:	462b      	mov	r3, r5
 800ff82:	e736      	b.n	800fdf2 <__kernel_rem_pio2f+0x1ea>
 800ff84:	aa06      	add	r2, sp, #24
 800ff86:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ff8a:	9202      	str	r2, [sp, #8]
 800ff8c:	ee07 2a90 	vmov	s15, r2
 800ff90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff94:	3c01      	subs	r4, #1
 800ff96:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff9a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff9e:	ed65 7a01 	vstmdb	r5!, {s15}
 800ffa2:	e734      	b.n	800fe0e <__kernel_rem_pio2f+0x206>
 800ffa4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800ffa8:	ecf7 6a01 	vldmia	r7!, {s13}
 800ffac:	ed9c 7a00 	vldr	s14, [ip]
 800ffb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ffb4:	3401      	adds	r4, #1
 800ffb6:	454c      	cmp	r4, r9
 800ffb8:	dc01      	bgt.n	800ffbe <__kernel_rem_pio2f+0x3b6>
 800ffba:	42a5      	cmp	r5, r4
 800ffbc:	daf2      	bge.n	800ffa4 <__kernel_rem_pio2f+0x39c>
 800ffbe:	aa56      	add	r2, sp, #344	; 0x158
 800ffc0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800ffc4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800ffc8:	3501      	adds	r5, #1
 800ffca:	3804      	subs	r0, #4
 800ffcc:	e723      	b.n	800fe16 <__kernel_rem_pio2f+0x20e>
 800ffce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ffd0:	2a03      	cmp	r2, #3
 800ffd2:	d84d      	bhi.n	8010070 <__kernel_rem_pio2f+0x468>
 800ffd4:	e8df f002 	tbb	[pc, r2]
 800ffd8:	021f1f3e 	.word	0x021f1f3e
 800ffdc:	aa56      	add	r2, sp, #344	; 0x158
 800ffde:	4411      	add	r1, r2
 800ffe0:	399c      	subs	r1, #156	; 0x9c
 800ffe2:	4608      	mov	r0, r1
 800ffe4:	461c      	mov	r4, r3
 800ffe6:	2c00      	cmp	r4, #0
 800ffe8:	dc5f      	bgt.n	80100aa <__kernel_rem_pio2f+0x4a2>
 800ffea:	4608      	mov	r0, r1
 800ffec:	461c      	mov	r4, r3
 800ffee:	2c01      	cmp	r4, #1
 800fff0:	dc6b      	bgt.n	80100ca <__kernel_rem_pio2f+0x4c2>
 800fff2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800ff20 <__kernel_rem_pio2f+0x318>
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	dc77      	bgt.n	80100ea <__kernel_rem_pio2f+0x4e2>
 800fffa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800fffe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8010002:	f1b8 0f00 	cmp.w	r8, #0
 8010006:	d176      	bne.n	80100f6 <__kernel_rem_pio2f+0x4ee>
 8010008:	edc6 6a00 	vstr	s13, [r6]
 801000c:	ed86 7a01 	vstr	s14, [r6, #4]
 8010010:	edc6 7a02 	vstr	s15, [r6, #8]
 8010014:	e02c      	b.n	8010070 <__kernel_rem_pio2f+0x468>
 8010016:	aa56      	add	r2, sp, #344	; 0x158
 8010018:	4411      	add	r1, r2
 801001a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800ff20 <__kernel_rem_pio2f+0x318>
 801001e:	399c      	subs	r1, #156	; 0x9c
 8010020:	4618      	mov	r0, r3
 8010022:	2800      	cmp	r0, #0
 8010024:	da32      	bge.n	801008c <__kernel_rem_pio2f+0x484>
 8010026:	f1b8 0f00 	cmp.w	r8, #0
 801002a:	d035      	beq.n	8010098 <__kernel_rem_pio2f+0x490>
 801002c:	eef1 7a47 	vneg.f32	s15, s14
 8010030:	edc6 7a00 	vstr	s15, [r6]
 8010034:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8010038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801003c:	a82f      	add	r0, sp, #188	; 0xbc
 801003e:	2101      	movs	r1, #1
 8010040:	428b      	cmp	r3, r1
 8010042:	da2c      	bge.n	801009e <__kernel_rem_pio2f+0x496>
 8010044:	f1b8 0f00 	cmp.w	r8, #0
 8010048:	d001      	beq.n	801004e <__kernel_rem_pio2f+0x446>
 801004a:	eef1 7a67 	vneg.f32	s15, s15
 801004e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010052:	e00d      	b.n	8010070 <__kernel_rem_pio2f+0x468>
 8010054:	aa56      	add	r2, sp, #344	; 0x158
 8010056:	4411      	add	r1, r2
 8010058:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ff20 <__kernel_rem_pio2f+0x318>
 801005c:	399c      	subs	r1, #156	; 0x9c
 801005e:	2b00      	cmp	r3, #0
 8010060:	da0e      	bge.n	8010080 <__kernel_rem_pio2f+0x478>
 8010062:	f1b8 0f00 	cmp.w	r8, #0
 8010066:	d001      	beq.n	801006c <__kernel_rem_pio2f+0x464>
 8010068:	eef1 7a67 	vneg.f32	s15, s15
 801006c:	edc6 7a00 	vstr	s15, [r6]
 8010070:	9b01      	ldr	r3, [sp, #4]
 8010072:	f003 0007 	and.w	r0, r3, #7
 8010076:	b057      	add	sp, #348	; 0x15c
 8010078:	ecbd 8b04 	vpop	{d8-d9}
 801007c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010080:	ed31 7a01 	vldmdb	r1!, {s14}
 8010084:	3b01      	subs	r3, #1
 8010086:	ee77 7a87 	vadd.f32	s15, s15, s14
 801008a:	e7e8      	b.n	801005e <__kernel_rem_pio2f+0x456>
 801008c:	ed71 7a01 	vldmdb	r1!, {s15}
 8010090:	3801      	subs	r0, #1
 8010092:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010096:	e7c4      	b.n	8010022 <__kernel_rem_pio2f+0x41a>
 8010098:	eef0 7a47 	vmov.f32	s15, s14
 801009c:	e7c8      	b.n	8010030 <__kernel_rem_pio2f+0x428>
 801009e:	ecb0 7a01 	vldmia	r0!, {s14}
 80100a2:	3101      	adds	r1, #1
 80100a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100a8:	e7ca      	b.n	8010040 <__kernel_rem_pio2f+0x438>
 80100aa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80100ae:	ed70 6a01 	vldmdb	r0!, {s13}
 80100b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80100b6:	3c01      	subs	r4, #1
 80100b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100bc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80100c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100c4:	edc0 7a00 	vstr	s15, [r0]
 80100c8:	e78d      	b.n	800ffe6 <__kernel_rem_pio2f+0x3de>
 80100ca:	ed50 7a02 	vldr	s15, [r0, #-8]
 80100ce:	ed70 6a01 	vldmdb	r0!, {s13}
 80100d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80100d6:	3c01      	subs	r4, #1
 80100d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100dc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80100e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100e4:	edc0 7a00 	vstr	s15, [r0]
 80100e8:	e781      	b.n	800ffee <__kernel_rem_pio2f+0x3e6>
 80100ea:	ed31 7a01 	vldmdb	r1!, {s14}
 80100ee:	3b01      	subs	r3, #1
 80100f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100f4:	e77f      	b.n	800fff6 <__kernel_rem_pio2f+0x3ee>
 80100f6:	eef1 6a66 	vneg.f32	s13, s13
 80100fa:	eeb1 7a47 	vneg.f32	s14, s14
 80100fe:	edc6 6a00 	vstr	s13, [r6]
 8010102:	ed86 7a01 	vstr	s14, [r6, #4]
 8010106:	eef1 7a67 	vneg.f32	s15, s15
 801010a:	e781      	b.n	8010010 <__kernel_rem_pio2f+0x408>

0801010c <__kernel_sinf>:
 801010c:	ee10 3a10 	vmov	r3, s0
 8010110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010114:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010118:	da04      	bge.n	8010124 <__kernel_sinf+0x18>
 801011a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801011e:	ee17 3a90 	vmov	r3, s15
 8010122:	b35b      	cbz	r3, 801017c <__kernel_sinf+0x70>
 8010124:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010128:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010180 <__kernel_sinf+0x74>
 801012c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010184 <__kernel_sinf+0x78>
 8010130:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010134:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010188 <__kernel_sinf+0x7c>
 8010138:	eee6 7a07 	vfma.f32	s15, s12, s14
 801013c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801018c <__kernel_sinf+0x80>
 8010140:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010144:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010190 <__kernel_sinf+0x84>
 8010148:	ee60 6a07 	vmul.f32	s13, s0, s14
 801014c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010150:	b930      	cbnz	r0, 8010160 <__kernel_sinf+0x54>
 8010152:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010194 <__kernel_sinf+0x88>
 8010156:	eea7 6a27 	vfma.f32	s12, s14, s15
 801015a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801015e:	4770      	bx	lr
 8010160:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010164:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010168:	eee0 7a86 	vfma.f32	s15, s1, s12
 801016c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010170:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010198 <__kernel_sinf+0x8c>
 8010174:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010178:	ee30 0a60 	vsub.f32	s0, s0, s1
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	2f2ec9d3 	.word	0x2f2ec9d3
 8010184:	b2d72f34 	.word	0xb2d72f34
 8010188:	3638ef1b 	.word	0x3638ef1b
 801018c:	b9500d01 	.word	0xb9500d01
 8010190:	3c088889 	.word	0x3c088889
 8010194:	be2aaaab 	.word	0xbe2aaaab
 8010198:	3e2aaaab 	.word	0x3e2aaaab

0801019c <matherr>:
 801019c:	2000      	movs	r0, #0
 801019e:	4770      	bx	lr

080101a0 <nan>:
 80101a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80101a8 <nan+0x8>
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	00000000 	.word	0x00000000
 80101ac:	7ff80000 	.word	0x7ff80000

080101b0 <atanf>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	ee10 5a10 	vmov	r5, s0
 80101b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80101ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80101be:	eef0 7a40 	vmov.f32	s15, s0
 80101c2:	db0f      	blt.n	80101e4 <atanf+0x34>
 80101c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80101c8:	dd04      	ble.n	80101d4 <atanf+0x24>
 80101ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 80101ce:	eeb0 0a67 	vmov.f32	s0, s15
 80101d2:	bd38      	pop	{r3, r4, r5, pc}
 80101d4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8010308 <atanf+0x158>
 80101d8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 801030c <atanf+0x15c>
 80101dc:	2d00      	cmp	r5, #0
 80101de:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80101e2:	e7f4      	b.n	80101ce <atanf+0x1e>
 80101e4:	4b4a      	ldr	r3, [pc, #296]	; (8010310 <atanf+0x160>)
 80101e6:	429c      	cmp	r4, r3
 80101e8:	dc10      	bgt.n	801020c <atanf+0x5c>
 80101ea:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80101ee:	da0a      	bge.n	8010206 <atanf+0x56>
 80101f0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010314 <atanf+0x164>
 80101f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80101f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010204:	dce3      	bgt.n	80101ce <atanf+0x1e>
 8010206:	f04f 33ff 	mov.w	r3, #4294967295
 801020a:	e013      	b.n	8010234 <atanf+0x84>
 801020c:	f000 f8a2 	bl	8010354 <fabsf>
 8010210:	4b41      	ldr	r3, [pc, #260]	; (8010318 <atanf+0x168>)
 8010212:	429c      	cmp	r4, r3
 8010214:	dc4f      	bgt.n	80102b6 <atanf+0x106>
 8010216:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801021a:	429c      	cmp	r4, r3
 801021c:	dc41      	bgt.n	80102a2 <atanf+0xf2>
 801021e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010222:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010226:	eea0 7a27 	vfma.f32	s14, s0, s15
 801022a:	2300      	movs	r3, #0
 801022c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010230:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801023a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801031c <atanf+0x16c>
 801023e:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010320 <atanf+0x170>
 8010242:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010324 <atanf+0x174>
 8010246:	ee66 6a06 	vmul.f32	s13, s12, s12
 801024a:	eee6 5a87 	vfma.f32	s11, s13, s14
 801024e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010328 <atanf+0x178>
 8010252:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010256:	eddf 5a35 	vldr	s11, [pc, #212]	; 801032c <atanf+0x17c>
 801025a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801025e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010330 <atanf+0x180>
 8010262:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010266:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010334 <atanf+0x184>
 801026a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801026e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010338 <atanf+0x188>
 8010272:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010276:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801033c <atanf+0x18c>
 801027a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801027e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010340 <atanf+0x190>
 8010282:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010286:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010344 <atanf+0x194>
 801028a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801028e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010292:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010296:	ee27 7a27 	vmul.f32	s14, s14, s15
 801029a:	d121      	bne.n	80102e0 <atanf+0x130>
 801029c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102a0:	e795      	b.n	80101ce <atanf+0x1e>
 80102a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80102a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80102aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80102ae:	2301      	movs	r3, #1
 80102b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80102b4:	e7be      	b.n	8010234 <atanf+0x84>
 80102b6:	4b24      	ldr	r3, [pc, #144]	; (8010348 <atanf+0x198>)
 80102b8:	429c      	cmp	r4, r3
 80102ba:	dc0b      	bgt.n	80102d4 <atanf+0x124>
 80102bc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80102c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80102c8:	2302      	movs	r3, #2
 80102ca:	ee70 6a67 	vsub.f32	s13, s0, s15
 80102ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102d2:	e7af      	b.n	8010234 <atanf+0x84>
 80102d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80102d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80102dc:	2303      	movs	r3, #3
 80102de:	e7a9      	b.n	8010234 <atanf+0x84>
 80102e0:	4a1a      	ldr	r2, [pc, #104]	; (801034c <atanf+0x19c>)
 80102e2:	491b      	ldr	r1, [pc, #108]	; (8010350 <atanf+0x1a0>)
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	441a      	add	r2, r3
 80102e8:	440b      	add	r3, r1
 80102ea:	edd3 6a00 	vldr	s13, [r3]
 80102ee:	ee37 7a66 	vsub.f32	s14, s14, s13
 80102f2:	2d00      	cmp	r5, #0
 80102f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102f8:	ed92 7a00 	vldr	s14, [r2]
 80102fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010300:	bfb8      	it	lt
 8010302:	eef1 7a67 	vneglt.f32	s15, s15
 8010306:	e762      	b.n	80101ce <atanf+0x1e>
 8010308:	bfc90fdb 	.word	0xbfc90fdb
 801030c:	3fc90fdb 	.word	0x3fc90fdb
 8010310:	3edfffff 	.word	0x3edfffff
 8010314:	7149f2ca 	.word	0x7149f2ca
 8010318:	3f97ffff 	.word	0x3f97ffff
 801031c:	3c8569d7 	.word	0x3c8569d7
 8010320:	3d4bda59 	.word	0x3d4bda59
 8010324:	bd6ef16b 	.word	0xbd6ef16b
 8010328:	3d886b35 	.word	0x3d886b35
 801032c:	3dba2e6e 	.word	0x3dba2e6e
 8010330:	3e124925 	.word	0x3e124925
 8010334:	3eaaaaab 	.word	0x3eaaaaab
 8010338:	bd15a221 	.word	0xbd15a221
 801033c:	bd9d8795 	.word	0xbd9d8795
 8010340:	bde38e38 	.word	0xbde38e38
 8010344:	be4ccccd 	.word	0xbe4ccccd
 8010348:	401bffff 	.word	0x401bffff
 801034c:	08014fb8 	.word	0x08014fb8
 8010350:	08014fc8 	.word	0x08014fc8

08010354 <fabsf>:
 8010354:	ee10 3a10 	vmov	r3, s0
 8010358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801035c:	ee00 3a10 	vmov	s0, r3
 8010360:	4770      	bx	lr
	...

08010364 <floorf>:
 8010364:	ee10 3a10 	vmov	r3, s0
 8010368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801036c:	0dca      	lsrs	r2, r1, #23
 801036e:	3a7f      	subs	r2, #127	; 0x7f
 8010370:	2a16      	cmp	r2, #22
 8010372:	dc2a      	bgt.n	80103ca <floorf+0x66>
 8010374:	2a00      	cmp	r2, #0
 8010376:	da11      	bge.n	801039c <floorf+0x38>
 8010378:	eddf 7a18 	vldr	s15, [pc, #96]	; 80103dc <floorf+0x78>
 801037c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010380:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010388:	dd05      	ble.n	8010396 <floorf+0x32>
 801038a:	2b00      	cmp	r3, #0
 801038c:	da23      	bge.n	80103d6 <floorf+0x72>
 801038e:	4a14      	ldr	r2, [pc, #80]	; (80103e0 <floorf+0x7c>)
 8010390:	2900      	cmp	r1, #0
 8010392:	bf18      	it	ne
 8010394:	4613      	movne	r3, r2
 8010396:	ee00 3a10 	vmov	s0, r3
 801039a:	4770      	bx	lr
 801039c:	4911      	ldr	r1, [pc, #68]	; (80103e4 <floorf+0x80>)
 801039e:	4111      	asrs	r1, r2
 80103a0:	420b      	tst	r3, r1
 80103a2:	d0fa      	beq.n	801039a <floorf+0x36>
 80103a4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80103dc <floorf+0x78>
 80103a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80103ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	ddef      	ble.n	8010396 <floorf+0x32>
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	bfbe      	ittt	lt
 80103ba:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80103be:	fa40 f202 	asrlt.w	r2, r0, r2
 80103c2:	189b      	addlt	r3, r3, r2
 80103c4:	ea23 0301 	bic.w	r3, r3, r1
 80103c8:	e7e5      	b.n	8010396 <floorf+0x32>
 80103ca:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80103ce:	d3e4      	bcc.n	801039a <floorf+0x36>
 80103d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103d4:	4770      	bx	lr
 80103d6:	2300      	movs	r3, #0
 80103d8:	e7dd      	b.n	8010396 <floorf+0x32>
 80103da:	bf00      	nop
 80103dc:	7149f2ca 	.word	0x7149f2ca
 80103e0:	bf800000 	.word	0xbf800000
 80103e4:	007fffff 	.word	0x007fffff

080103e8 <scalbnf>:
 80103e8:	b508      	push	{r3, lr}
 80103ea:	ee10 2a10 	vmov	r2, s0
 80103ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80103f2:	ed2d 8b02 	vpush	{d8}
 80103f6:	eef0 0a40 	vmov.f32	s1, s0
 80103fa:	d004      	beq.n	8010406 <scalbnf+0x1e>
 80103fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010400:	d306      	bcc.n	8010410 <scalbnf+0x28>
 8010402:	ee70 0a00 	vadd.f32	s1, s0, s0
 8010406:	ecbd 8b02 	vpop	{d8}
 801040a:	eeb0 0a60 	vmov.f32	s0, s1
 801040e:	bd08      	pop	{r3, pc}
 8010410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010414:	d21c      	bcs.n	8010450 <scalbnf+0x68>
 8010416:	4b1f      	ldr	r3, [pc, #124]	; (8010494 <scalbnf+0xac>)
 8010418:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010498 <scalbnf+0xb0>
 801041c:	4298      	cmp	r0, r3
 801041e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8010422:	db10      	blt.n	8010446 <scalbnf+0x5e>
 8010424:	ee10 2a90 	vmov	r2, s1
 8010428:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801042c:	3b19      	subs	r3, #25
 801042e:	4403      	add	r3, r0
 8010430:	2bfe      	cmp	r3, #254	; 0xfe
 8010432:	dd0f      	ble.n	8010454 <scalbnf+0x6c>
 8010434:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801049c <scalbnf+0xb4>
 8010438:	eeb0 0a48 	vmov.f32	s0, s16
 801043c:	f000 f834 	bl	80104a8 <copysignf>
 8010440:	ee60 0a08 	vmul.f32	s1, s0, s16
 8010444:	e7df      	b.n	8010406 <scalbnf+0x1e>
 8010446:	eddf 7a16 	vldr	s15, [pc, #88]	; 80104a0 <scalbnf+0xb8>
 801044a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801044e:	e7da      	b.n	8010406 <scalbnf+0x1e>
 8010450:	0ddb      	lsrs	r3, r3, #23
 8010452:	e7ec      	b.n	801042e <scalbnf+0x46>
 8010454:	2b00      	cmp	r3, #0
 8010456:	dd06      	ble.n	8010466 <scalbnf+0x7e>
 8010458:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801045c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010460:	ee00 3a90 	vmov	s1, r3
 8010464:	e7cf      	b.n	8010406 <scalbnf+0x1e>
 8010466:	f113 0f16 	cmn.w	r3, #22
 801046a:	da06      	bge.n	801047a <scalbnf+0x92>
 801046c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010470:	4298      	cmp	r0, r3
 8010472:	dcdf      	bgt.n	8010434 <scalbnf+0x4c>
 8010474:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80104a0 <scalbnf+0xb8>
 8010478:	e7de      	b.n	8010438 <scalbnf+0x50>
 801047a:	3319      	adds	r3, #25
 801047c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8010480:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010484:	eddf 7a07 	vldr	s15, [pc, #28]	; 80104a4 <scalbnf+0xbc>
 8010488:	ee07 3a10 	vmov	s14, r3
 801048c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8010490:	e7b9      	b.n	8010406 <scalbnf+0x1e>
 8010492:	bf00      	nop
 8010494:	ffff3cb0 	.word	0xffff3cb0
 8010498:	4c000000 	.word	0x4c000000
 801049c:	7149f2ca 	.word	0x7149f2ca
 80104a0:	0da24260 	.word	0x0da24260
 80104a4:	33000000 	.word	0x33000000

080104a8 <copysignf>:
 80104a8:	ee10 3a10 	vmov	r3, s0
 80104ac:	ee10 2a90 	vmov	r2, s1
 80104b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80104b8:	4313      	orrs	r3, r2
 80104ba:	ee00 3a10 	vmov	s0, r3
 80104be:	4770      	bx	lr

080104c0 <abort>:
 80104c0:	b508      	push	{r3, lr}
 80104c2:	2006      	movs	r0, #6
 80104c4:	f000 ffd6 	bl	8011474 <raise>
 80104c8:	2001      	movs	r0, #1
 80104ca:	f004 fa3f 	bl	801494c <_exit>
	...

080104d0 <calloc>:
 80104d0:	4b02      	ldr	r3, [pc, #8]	; (80104dc <calloc+0xc>)
 80104d2:	460a      	mov	r2, r1
 80104d4:	4601      	mov	r1, r0
 80104d6:	6818      	ldr	r0, [r3, #0]
 80104d8:	f000 b847 	b.w	801056a <_calloc_r>
 80104dc:	20000378 	.word	0x20000378

080104e0 <__errno>:
 80104e0:	4b01      	ldr	r3, [pc, #4]	; (80104e8 <__errno+0x8>)
 80104e2:	6818      	ldr	r0, [r3, #0]
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	20000378 	.word	0x20000378

080104ec <__libc_init_array>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4e0d      	ldr	r6, [pc, #52]	; (8010524 <__libc_init_array+0x38>)
 80104f0:	4c0d      	ldr	r4, [pc, #52]	; (8010528 <__libc_init_array+0x3c>)
 80104f2:	1ba4      	subs	r4, r4, r6
 80104f4:	10a4      	asrs	r4, r4, #2
 80104f6:	2500      	movs	r5, #0
 80104f8:	42a5      	cmp	r5, r4
 80104fa:	d109      	bne.n	8010510 <__libc_init_array+0x24>
 80104fc:	4e0b      	ldr	r6, [pc, #44]	; (801052c <__libc_init_array+0x40>)
 80104fe:	4c0c      	ldr	r4, [pc, #48]	; (8010530 <__libc_init_array+0x44>)
 8010500:	f004 fa26 	bl	8014950 <_init>
 8010504:	1ba4      	subs	r4, r4, r6
 8010506:	10a4      	asrs	r4, r4, #2
 8010508:	2500      	movs	r5, #0
 801050a:	42a5      	cmp	r5, r4
 801050c:	d105      	bne.n	801051a <__libc_init_array+0x2e>
 801050e:	bd70      	pop	{r4, r5, r6, pc}
 8010510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010514:	4798      	blx	r3
 8010516:	3501      	adds	r5, #1
 8010518:	e7ee      	b.n	80104f8 <__libc_init_array+0xc>
 801051a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801051e:	4798      	blx	r3
 8010520:	3501      	adds	r5, #1
 8010522:	e7f2      	b.n	801050a <__libc_init_array+0x1e>
 8010524:	08015300 	.word	0x08015300
 8010528:	08015300 	.word	0x08015300
 801052c:	08015300 	.word	0x08015300
 8010530:	08015308 	.word	0x08015308

08010534 <malloc>:
 8010534:	4b02      	ldr	r3, [pc, #8]	; (8010540 <malloc+0xc>)
 8010536:	4601      	mov	r1, r0
 8010538:	6818      	ldr	r0, [r3, #0]
 801053a:	f000 b873 	b.w	8010624 <_malloc_r>
 801053e:	bf00      	nop
 8010540:	20000378 	.word	0x20000378

08010544 <memcpy>:
 8010544:	b510      	push	{r4, lr}
 8010546:	1e43      	subs	r3, r0, #1
 8010548:	440a      	add	r2, r1
 801054a:	4291      	cmp	r1, r2
 801054c:	d100      	bne.n	8010550 <memcpy+0xc>
 801054e:	bd10      	pop	{r4, pc}
 8010550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010558:	e7f7      	b.n	801054a <memcpy+0x6>

0801055a <memset>:
 801055a:	4402      	add	r2, r0
 801055c:	4603      	mov	r3, r0
 801055e:	4293      	cmp	r3, r2
 8010560:	d100      	bne.n	8010564 <memset+0xa>
 8010562:	4770      	bx	lr
 8010564:	f803 1b01 	strb.w	r1, [r3], #1
 8010568:	e7f9      	b.n	801055e <memset+0x4>

0801056a <_calloc_r>:
 801056a:	b538      	push	{r3, r4, r5, lr}
 801056c:	fb02 f401 	mul.w	r4, r2, r1
 8010570:	4621      	mov	r1, r4
 8010572:	f000 f857 	bl	8010624 <_malloc_r>
 8010576:	4605      	mov	r5, r0
 8010578:	b118      	cbz	r0, 8010582 <_calloc_r+0x18>
 801057a:	4622      	mov	r2, r4
 801057c:	2100      	movs	r1, #0
 801057e:	f7ff ffec 	bl	801055a <memset>
 8010582:	4628      	mov	r0, r5
 8010584:	bd38      	pop	{r3, r4, r5, pc}
	...

08010588 <_free_r>:
 8010588:	b538      	push	{r3, r4, r5, lr}
 801058a:	4605      	mov	r5, r0
 801058c:	2900      	cmp	r1, #0
 801058e:	d045      	beq.n	801061c <_free_r+0x94>
 8010590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010594:	1f0c      	subs	r4, r1, #4
 8010596:	2b00      	cmp	r3, #0
 8010598:	bfb8      	it	lt
 801059a:	18e4      	addlt	r4, r4, r3
 801059c:	f003 f9ea 	bl	8013974 <__malloc_lock>
 80105a0:	4a1f      	ldr	r2, [pc, #124]	; (8010620 <_free_r+0x98>)
 80105a2:	6813      	ldr	r3, [r2, #0]
 80105a4:	4610      	mov	r0, r2
 80105a6:	b933      	cbnz	r3, 80105b6 <_free_r+0x2e>
 80105a8:	6063      	str	r3, [r4, #4]
 80105aa:	6014      	str	r4, [r2, #0]
 80105ac:	4628      	mov	r0, r5
 80105ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105b2:	f003 b9e0 	b.w	8013976 <__malloc_unlock>
 80105b6:	42a3      	cmp	r3, r4
 80105b8:	d90c      	bls.n	80105d4 <_free_r+0x4c>
 80105ba:	6821      	ldr	r1, [r4, #0]
 80105bc:	1862      	adds	r2, r4, r1
 80105be:	4293      	cmp	r3, r2
 80105c0:	bf04      	itt	eq
 80105c2:	681a      	ldreq	r2, [r3, #0]
 80105c4:	685b      	ldreq	r3, [r3, #4]
 80105c6:	6063      	str	r3, [r4, #4]
 80105c8:	bf04      	itt	eq
 80105ca:	1852      	addeq	r2, r2, r1
 80105cc:	6022      	streq	r2, [r4, #0]
 80105ce:	6004      	str	r4, [r0, #0]
 80105d0:	e7ec      	b.n	80105ac <_free_r+0x24>
 80105d2:	4613      	mov	r3, r2
 80105d4:	685a      	ldr	r2, [r3, #4]
 80105d6:	b10a      	cbz	r2, 80105dc <_free_r+0x54>
 80105d8:	42a2      	cmp	r2, r4
 80105da:	d9fa      	bls.n	80105d2 <_free_r+0x4a>
 80105dc:	6819      	ldr	r1, [r3, #0]
 80105de:	1858      	adds	r0, r3, r1
 80105e0:	42a0      	cmp	r0, r4
 80105e2:	d10b      	bne.n	80105fc <_free_r+0x74>
 80105e4:	6820      	ldr	r0, [r4, #0]
 80105e6:	4401      	add	r1, r0
 80105e8:	1858      	adds	r0, r3, r1
 80105ea:	4282      	cmp	r2, r0
 80105ec:	6019      	str	r1, [r3, #0]
 80105ee:	d1dd      	bne.n	80105ac <_free_r+0x24>
 80105f0:	6810      	ldr	r0, [r2, #0]
 80105f2:	6852      	ldr	r2, [r2, #4]
 80105f4:	605a      	str	r2, [r3, #4]
 80105f6:	4401      	add	r1, r0
 80105f8:	6019      	str	r1, [r3, #0]
 80105fa:	e7d7      	b.n	80105ac <_free_r+0x24>
 80105fc:	d902      	bls.n	8010604 <_free_r+0x7c>
 80105fe:	230c      	movs	r3, #12
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	e7d3      	b.n	80105ac <_free_r+0x24>
 8010604:	6820      	ldr	r0, [r4, #0]
 8010606:	1821      	adds	r1, r4, r0
 8010608:	428a      	cmp	r2, r1
 801060a:	bf04      	itt	eq
 801060c:	6811      	ldreq	r1, [r2, #0]
 801060e:	6852      	ldreq	r2, [r2, #4]
 8010610:	6062      	str	r2, [r4, #4]
 8010612:	bf04      	itt	eq
 8010614:	1809      	addeq	r1, r1, r0
 8010616:	6021      	streq	r1, [r4, #0]
 8010618:	605c      	str	r4, [r3, #4]
 801061a:	e7c7      	b.n	80105ac <_free_r+0x24>
 801061c:	bd38      	pop	{r3, r4, r5, pc}
 801061e:	bf00      	nop
 8010620:	20001334 	.word	0x20001334

08010624 <_malloc_r>:
 8010624:	b570      	push	{r4, r5, r6, lr}
 8010626:	1ccd      	adds	r5, r1, #3
 8010628:	f025 0503 	bic.w	r5, r5, #3
 801062c:	3508      	adds	r5, #8
 801062e:	2d0c      	cmp	r5, #12
 8010630:	bf38      	it	cc
 8010632:	250c      	movcc	r5, #12
 8010634:	2d00      	cmp	r5, #0
 8010636:	4606      	mov	r6, r0
 8010638:	db01      	blt.n	801063e <_malloc_r+0x1a>
 801063a:	42a9      	cmp	r1, r5
 801063c:	d903      	bls.n	8010646 <_malloc_r+0x22>
 801063e:	230c      	movs	r3, #12
 8010640:	6033      	str	r3, [r6, #0]
 8010642:	2000      	movs	r0, #0
 8010644:	bd70      	pop	{r4, r5, r6, pc}
 8010646:	f003 f995 	bl	8013974 <__malloc_lock>
 801064a:	4a21      	ldr	r2, [pc, #132]	; (80106d0 <_malloc_r+0xac>)
 801064c:	6814      	ldr	r4, [r2, #0]
 801064e:	4621      	mov	r1, r4
 8010650:	b991      	cbnz	r1, 8010678 <_malloc_r+0x54>
 8010652:	4c20      	ldr	r4, [pc, #128]	; (80106d4 <_malloc_r+0xb0>)
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	b91b      	cbnz	r3, 8010660 <_malloc_r+0x3c>
 8010658:	4630      	mov	r0, r6
 801065a:	f000 fecd 	bl	80113f8 <_sbrk_r>
 801065e:	6020      	str	r0, [r4, #0]
 8010660:	4629      	mov	r1, r5
 8010662:	4630      	mov	r0, r6
 8010664:	f000 fec8 	bl	80113f8 <_sbrk_r>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d124      	bne.n	80106b6 <_malloc_r+0x92>
 801066c:	230c      	movs	r3, #12
 801066e:	6033      	str	r3, [r6, #0]
 8010670:	4630      	mov	r0, r6
 8010672:	f003 f980 	bl	8013976 <__malloc_unlock>
 8010676:	e7e4      	b.n	8010642 <_malloc_r+0x1e>
 8010678:	680b      	ldr	r3, [r1, #0]
 801067a:	1b5b      	subs	r3, r3, r5
 801067c:	d418      	bmi.n	80106b0 <_malloc_r+0x8c>
 801067e:	2b0b      	cmp	r3, #11
 8010680:	d90f      	bls.n	80106a2 <_malloc_r+0x7e>
 8010682:	600b      	str	r3, [r1, #0]
 8010684:	50cd      	str	r5, [r1, r3]
 8010686:	18cc      	adds	r4, r1, r3
 8010688:	4630      	mov	r0, r6
 801068a:	f003 f974 	bl	8013976 <__malloc_unlock>
 801068e:	f104 000b 	add.w	r0, r4, #11
 8010692:	1d23      	adds	r3, r4, #4
 8010694:	f020 0007 	bic.w	r0, r0, #7
 8010698:	1ac3      	subs	r3, r0, r3
 801069a:	d0d3      	beq.n	8010644 <_malloc_r+0x20>
 801069c:	425a      	negs	r2, r3
 801069e:	50e2      	str	r2, [r4, r3]
 80106a0:	e7d0      	b.n	8010644 <_malloc_r+0x20>
 80106a2:	428c      	cmp	r4, r1
 80106a4:	684b      	ldr	r3, [r1, #4]
 80106a6:	bf16      	itet	ne
 80106a8:	6063      	strne	r3, [r4, #4]
 80106aa:	6013      	streq	r3, [r2, #0]
 80106ac:	460c      	movne	r4, r1
 80106ae:	e7eb      	b.n	8010688 <_malloc_r+0x64>
 80106b0:	460c      	mov	r4, r1
 80106b2:	6849      	ldr	r1, [r1, #4]
 80106b4:	e7cc      	b.n	8010650 <_malloc_r+0x2c>
 80106b6:	1cc4      	adds	r4, r0, #3
 80106b8:	f024 0403 	bic.w	r4, r4, #3
 80106bc:	42a0      	cmp	r0, r4
 80106be:	d005      	beq.n	80106cc <_malloc_r+0xa8>
 80106c0:	1a21      	subs	r1, r4, r0
 80106c2:	4630      	mov	r0, r6
 80106c4:	f000 fe98 	bl	80113f8 <_sbrk_r>
 80106c8:	3001      	adds	r0, #1
 80106ca:	d0cf      	beq.n	801066c <_malloc_r+0x48>
 80106cc:	6025      	str	r5, [r4, #0]
 80106ce:	e7db      	b.n	8010688 <_malloc_r+0x64>
 80106d0:	20001334 	.word	0x20001334
 80106d4:	20001338 	.word	0x20001338

080106d8 <__cvt>:
 80106d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106da:	ed2d 8b02 	vpush	{d8}
 80106de:	eeb0 8b40 	vmov.f64	d8, d0
 80106e2:	b085      	sub	sp, #20
 80106e4:	4617      	mov	r7, r2
 80106e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80106e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80106ea:	ee18 2a90 	vmov	r2, s17
 80106ee:	f025 0520 	bic.w	r5, r5, #32
 80106f2:	2a00      	cmp	r2, #0
 80106f4:	bfb6      	itet	lt
 80106f6:	222d      	movlt	r2, #45	; 0x2d
 80106f8:	2200      	movge	r2, #0
 80106fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80106fe:	2d46      	cmp	r5, #70	; 0x46
 8010700:	460c      	mov	r4, r1
 8010702:	701a      	strb	r2, [r3, #0]
 8010704:	d004      	beq.n	8010710 <__cvt+0x38>
 8010706:	2d45      	cmp	r5, #69	; 0x45
 8010708:	d100      	bne.n	801070c <__cvt+0x34>
 801070a:	3401      	adds	r4, #1
 801070c:	2102      	movs	r1, #2
 801070e:	e000      	b.n	8010712 <__cvt+0x3a>
 8010710:	2103      	movs	r1, #3
 8010712:	ab03      	add	r3, sp, #12
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	ab02      	add	r3, sp, #8
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	4622      	mov	r2, r4
 801071c:	4633      	mov	r3, r6
 801071e:	eeb0 0b48 	vmov.f64	d0, d8
 8010722:	f001 feb1 	bl	8012488 <_dtoa_r>
 8010726:	2d47      	cmp	r5, #71	; 0x47
 8010728:	d101      	bne.n	801072e <__cvt+0x56>
 801072a:	07fb      	lsls	r3, r7, #31
 801072c:	d51e      	bpl.n	801076c <__cvt+0x94>
 801072e:	2d46      	cmp	r5, #70	; 0x46
 8010730:	eb00 0304 	add.w	r3, r0, r4
 8010734:	d10c      	bne.n	8010750 <__cvt+0x78>
 8010736:	7802      	ldrb	r2, [r0, #0]
 8010738:	2a30      	cmp	r2, #48	; 0x30
 801073a:	d107      	bne.n	801074c <__cvt+0x74>
 801073c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010744:	bf1c      	itt	ne
 8010746:	f1c4 0401 	rsbne	r4, r4, #1
 801074a:	6034      	strne	r4, [r6, #0]
 801074c:	6832      	ldr	r2, [r6, #0]
 801074e:	4413      	add	r3, r2
 8010750:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010758:	d007      	beq.n	801076a <__cvt+0x92>
 801075a:	2130      	movs	r1, #48	; 0x30
 801075c:	9a03      	ldr	r2, [sp, #12]
 801075e:	429a      	cmp	r2, r3
 8010760:	d204      	bcs.n	801076c <__cvt+0x94>
 8010762:	1c54      	adds	r4, r2, #1
 8010764:	9403      	str	r4, [sp, #12]
 8010766:	7011      	strb	r1, [r2, #0]
 8010768:	e7f8      	b.n	801075c <__cvt+0x84>
 801076a:	9303      	str	r3, [sp, #12]
 801076c:	9b03      	ldr	r3, [sp, #12]
 801076e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010770:	1a1b      	subs	r3, r3, r0
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	b005      	add	sp, #20
 8010776:	ecbd 8b02 	vpop	{d8}
 801077a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801077c <__exponent>:
 801077c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801077e:	2900      	cmp	r1, #0
 8010780:	4604      	mov	r4, r0
 8010782:	bfba      	itte	lt
 8010784:	4249      	neglt	r1, r1
 8010786:	232d      	movlt	r3, #45	; 0x2d
 8010788:	232b      	movge	r3, #43	; 0x2b
 801078a:	2909      	cmp	r1, #9
 801078c:	f804 2b02 	strb.w	r2, [r4], #2
 8010790:	7043      	strb	r3, [r0, #1]
 8010792:	dd20      	ble.n	80107d6 <__exponent+0x5a>
 8010794:	f10d 0307 	add.w	r3, sp, #7
 8010798:	461f      	mov	r7, r3
 801079a:	260a      	movs	r6, #10
 801079c:	fb91 f5f6 	sdiv	r5, r1, r6
 80107a0:	fb06 1115 	mls	r1, r6, r5, r1
 80107a4:	3130      	adds	r1, #48	; 0x30
 80107a6:	2d09      	cmp	r5, #9
 80107a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80107ac:	f103 32ff 	add.w	r2, r3, #4294967295
 80107b0:	4629      	mov	r1, r5
 80107b2:	dc09      	bgt.n	80107c8 <__exponent+0x4c>
 80107b4:	3130      	adds	r1, #48	; 0x30
 80107b6:	3b02      	subs	r3, #2
 80107b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80107bc:	42bb      	cmp	r3, r7
 80107be:	4622      	mov	r2, r4
 80107c0:	d304      	bcc.n	80107cc <__exponent+0x50>
 80107c2:	1a10      	subs	r0, r2, r0
 80107c4:	b003      	add	sp, #12
 80107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c8:	4613      	mov	r3, r2
 80107ca:	e7e7      	b.n	801079c <__exponent+0x20>
 80107cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d0:	f804 2b01 	strb.w	r2, [r4], #1
 80107d4:	e7f2      	b.n	80107bc <__exponent+0x40>
 80107d6:	2330      	movs	r3, #48	; 0x30
 80107d8:	4419      	add	r1, r3
 80107da:	7083      	strb	r3, [r0, #2]
 80107dc:	1d02      	adds	r2, r0, #4
 80107de:	70c1      	strb	r1, [r0, #3]
 80107e0:	e7ef      	b.n	80107c2 <__exponent+0x46>
 80107e2:	0000      	movs	r0, r0
 80107e4:	0000      	movs	r0, r0
	...

080107e8 <_printf_float>:
 80107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	b08d      	sub	sp, #52	; 0x34
 80107ee:	460c      	mov	r4, r1
 80107f0:	4616      	mov	r6, r2
 80107f2:	461f      	mov	r7, r3
 80107f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80107f8:	4605      	mov	r5, r0
 80107fa:	f003 f837 	bl	801386c <_localeconv_r>
 80107fe:	f8d0 b000 	ldr.w	fp, [r0]
 8010802:	4658      	mov	r0, fp
 8010804:	f7ef fd1c 	bl	8000240 <strlen>
 8010808:	2300      	movs	r3, #0
 801080a:	930a      	str	r3, [sp, #40]	; 0x28
 801080c:	f8d8 3000 	ldr.w	r3, [r8]
 8010810:	9005      	str	r0, [sp, #20]
 8010812:	3307      	adds	r3, #7
 8010814:	f023 0307 	bic.w	r3, r3, #7
 8010818:	f103 0108 	add.w	r1, r3, #8
 801081c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010820:	6822      	ldr	r2, [r4, #0]
 8010822:	f8c8 1000 	str.w	r1, [r8]
 8010826:	e9d3 0100 	ldrd	r0, r1, [r3]
 801082a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801082e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010ab8 <_printf_float+0x2d0>
 8010832:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010836:	eeb0 6bc0 	vabs.f64	d6, d0
 801083a:	eeb4 6b47 	vcmp.f64	d6, d7
 801083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010842:	dd24      	ble.n	801088e <_printf_float+0xa6>
 8010844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	d502      	bpl.n	8010854 <_printf_float+0x6c>
 801084e:	232d      	movs	r3, #45	; 0x2d
 8010850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010854:	499a      	ldr	r1, [pc, #616]	; (8010ac0 <_printf_float+0x2d8>)
 8010856:	4b9b      	ldr	r3, [pc, #620]	; (8010ac4 <_printf_float+0x2dc>)
 8010858:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801085c:	bf8c      	ite	hi
 801085e:	4688      	movhi	r8, r1
 8010860:	4698      	movls	r8, r3
 8010862:	f022 0204 	bic.w	r2, r2, #4
 8010866:	2303      	movs	r3, #3
 8010868:	6123      	str	r3, [r4, #16]
 801086a:	6022      	str	r2, [r4, #0]
 801086c:	f04f 0a00 	mov.w	sl, #0
 8010870:	9700      	str	r7, [sp, #0]
 8010872:	4633      	mov	r3, r6
 8010874:	aa0b      	add	r2, sp, #44	; 0x2c
 8010876:	4621      	mov	r1, r4
 8010878:	4628      	mov	r0, r5
 801087a:	f000 f9e1 	bl	8010c40 <_printf_common>
 801087e:	3001      	adds	r0, #1
 8010880:	f040 8089 	bne.w	8010996 <_printf_float+0x1ae>
 8010884:	f04f 30ff 	mov.w	r0, #4294967295
 8010888:	b00d      	add	sp, #52	; 0x34
 801088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010896:	d702      	bvc.n	801089e <_printf_float+0xb6>
 8010898:	498b      	ldr	r1, [pc, #556]	; (8010ac8 <_printf_float+0x2e0>)
 801089a:	4b8c      	ldr	r3, [pc, #560]	; (8010acc <_printf_float+0x2e4>)
 801089c:	e7dc      	b.n	8010858 <_printf_float+0x70>
 801089e:	6861      	ldr	r1, [r4, #4]
 80108a0:	1c4b      	adds	r3, r1, #1
 80108a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80108a6:	ab0a      	add	r3, sp, #40	; 0x28
 80108a8:	a809      	add	r0, sp, #36	; 0x24
 80108aa:	d13b      	bne.n	8010924 <_printf_float+0x13c>
 80108ac:	2106      	movs	r1, #6
 80108ae:	6061      	str	r1, [r4, #4]
 80108b0:	f04f 0c00 	mov.w	ip, #0
 80108b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80108b8:	e9cd 0900 	strd	r0, r9, [sp]
 80108bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108c0:	6022      	str	r2, [r4, #0]
 80108c2:	6861      	ldr	r1, [r4, #4]
 80108c4:	4628      	mov	r0, r5
 80108c6:	f7ff ff07 	bl	80106d8 <__cvt>
 80108ca:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80108ce:	2b47      	cmp	r3, #71	; 0x47
 80108d0:	4680      	mov	r8, r0
 80108d2:	d109      	bne.n	80108e8 <_printf_float+0x100>
 80108d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d6:	1cd8      	adds	r0, r3, #3
 80108d8:	db02      	blt.n	80108e0 <_printf_float+0xf8>
 80108da:	6862      	ldr	r2, [r4, #4]
 80108dc:	4293      	cmp	r3, r2
 80108de:	dd47      	ble.n	8010970 <_printf_float+0x188>
 80108e0:	f1a9 0902 	sub.w	r9, r9, #2
 80108e4:	fa5f f989 	uxtb.w	r9, r9
 80108e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80108ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108ee:	d824      	bhi.n	801093a <_printf_float+0x152>
 80108f0:	3901      	subs	r1, #1
 80108f2:	464a      	mov	r2, r9
 80108f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80108f8:	9109      	str	r1, [sp, #36]	; 0x24
 80108fa:	f7ff ff3f 	bl	801077c <__exponent>
 80108fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010900:	1813      	adds	r3, r2, r0
 8010902:	2a01      	cmp	r2, #1
 8010904:	4682      	mov	sl, r0
 8010906:	6123      	str	r3, [r4, #16]
 8010908:	dc02      	bgt.n	8010910 <_printf_float+0x128>
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	07d1      	lsls	r1, r2, #31
 801090e:	d501      	bpl.n	8010914 <_printf_float+0x12c>
 8010910:	3301      	adds	r3, #1
 8010912:	6123      	str	r3, [r4, #16]
 8010914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010918:	2b00      	cmp	r3, #0
 801091a:	d0a9      	beq.n	8010870 <_printf_float+0x88>
 801091c:	232d      	movs	r3, #45	; 0x2d
 801091e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010922:	e7a5      	b.n	8010870 <_printf_float+0x88>
 8010924:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010928:	f000 8178 	beq.w	8010c1c <_printf_float+0x434>
 801092c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010930:	d1be      	bne.n	80108b0 <_printf_float+0xc8>
 8010932:	2900      	cmp	r1, #0
 8010934:	d1bc      	bne.n	80108b0 <_printf_float+0xc8>
 8010936:	2101      	movs	r1, #1
 8010938:	e7b9      	b.n	80108ae <_printf_float+0xc6>
 801093a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801093e:	d119      	bne.n	8010974 <_printf_float+0x18c>
 8010940:	2900      	cmp	r1, #0
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	dd0c      	ble.n	8010960 <_printf_float+0x178>
 8010946:	6121      	str	r1, [r4, #16]
 8010948:	b913      	cbnz	r3, 8010950 <_printf_float+0x168>
 801094a:	6822      	ldr	r2, [r4, #0]
 801094c:	07d2      	lsls	r2, r2, #31
 801094e:	d502      	bpl.n	8010956 <_printf_float+0x16e>
 8010950:	3301      	adds	r3, #1
 8010952:	440b      	add	r3, r1
 8010954:	6123      	str	r3, [r4, #16]
 8010956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010958:	65a3      	str	r3, [r4, #88]	; 0x58
 801095a:	f04f 0a00 	mov.w	sl, #0
 801095e:	e7d9      	b.n	8010914 <_printf_float+0x12c>
 8010960:	b913      	cbnz	r3, 8010968 <_printf_float+0x180>
 8010962:	6822      	ldr	r2, [r4, #0]
 8010964:	07d0      	lsls	r0, r2, #31
 8010966:	d501      	bpl.n	801096c <_printf_float+0x184>
 8010968:	3302      	adds	r3, #2
 801096a:	e7f3      	b.n	8010954 <_printf_float+0x16c>
 801096c:	2301      	movs	r3, #1
 801096e:	e7f1      	b.n	8010954 <_printf_float+0x16c>
 8010970:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010974:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010978:	4293      	cmp	r3, r2
 801097a:	db05      	blt.n	8010988 <_printf_float+0x1a0>
 801097c:	6822      	ldr	r2, [r4, #0]
 801097e:	6123      	str	r3, [r4, #16]
 8010980:	07d1      	lsls	r1, r2, #31
 8010982:	d5e8      	bpl.n	8010956 <_printf_float+0x16e>
 8010984:	3301      	adds	r3, #1
 8010986:	e7e5      	b.n	8010954 <_printf_float+0x16c>
 8010988:	2b00      	cmp	r3, #0
 801098a:	bfd4      	ite	le
 801098c:	f1c3 0302 	rsble	r3, r3, #2
 8010990:	2301      	movgt	r3, #1
 8010992:	4413      	add	r3, r2
 8010994:	e7de      	b.n	8010954 <_printf_float+0x16c>
 8010996:	6823      	ldr	r3, [r4, #0]
 8010998:	055a      	lsls	r2, r3, #21
 801099a:	d407      	bmi.n	80109ac <_printf_float+0x1c4>
 801099c:	6923      	ldr	r3, [r4, #16]
 801099e:	4642      	mov	r2, r8
 80109a0:	4631      	mov	r1, r6
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b8      	blx	r7
 80109a6:	3001      	adds	r0, #1
 80109a8:	d12a      	bne.n	8010a00 <_printf_float+0x218>
 80109aa:	e76b      	b.n	8010884 <_printf_float+0x9c>
 80109ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80109b0:	f240 80de 	bls.w	8010b70 <_printf_float+0x388>
 80109b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80109b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c0:	d133      	bne.n	8010a2a <_printf_float+0x242>
 80109c2:	2301      	movs	r3, #1
 80109c4:	4a42      	ldr	r2, [pc, #264]	; (8010ad0 <_printf_float+0x2e8>)
 80109c6:	4631      	mov	r1, r6
 80109c8:	4628      	mov	r0, r5
 80109ca:	47b8      	blx	r7
 80109cc:	3001      	adds	r0, #1
 80109ce:	f43f af59 	beq.w	8010884 <_printf_float+0x9c>
 80109d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109d6:	429a      	cmp	r2, r3
 80109d8:	db02      	blt.n	80109e0 <_printf_float+0x1f8>
 80109da:	6823      	ldr	r3, [r4, #0]
 80109dc:	07d8      	lsls	r0, r3, #31
 80109de:	d50f      	bpl.n	8010a00 <_printf_float+0x218>
 80109e0:	9b05      	ldr	r3, [sp, #20]
 80109e2:	465a      	mov	r2, fp
 80109e4:	4631      	mov	r1, r6
 80109e6:	4628      	mov	r0, r5
 80109e8:	47b8      	blx	r7
 80109ea:	3001      	adds	r0, #1
 80109ec:	f43f af4a 	beq.w	8010884 <_printf_float+0x9c>
 80109f0:	f04f 0800 	mov.w	r8, #0
 80109f4:	f104 091a 	add.w	r9, r4, #26
 80109f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109fa:	3b01      	subs	r3, #1
 80109fc:	4543      	cmp	r3, r8
 80109fe:	dc09      	bgt.n	8010a14 <_printf_float+0x22c>
 8010a00:	6823      	ldr	r3, [r4, #0]
 8010a02:	079b      	lsls	r3, r3, #30
 8010a04:	f100 8105 	bmi.w	8010c12 <_printf_float+0x42a>
 8010a08:	68e0      	ldr	r0, [r4, #12]
 8010a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a0c:	4298      	cmp	r0, r3
 8010a0e:	bfb8      	it	lt
 8010a10:	4618      	movlt	r0, r3
 8010a12:	e739      	b.n	8010888 <_printf_float+0xa0>
 8010a14:	2301      	movs	r3, #1
 8010a16:	464a      	mov	r2, r9
 8010a18:	4631      	mov	r1, r6
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	47b8      	blx	r7
 8010a1e:	3001      	adds	r0, #1
 8010a20:	f43f af30 	beq.w	8010884 <_printf_float+0x9c>
 8010a24:	f108 0801 	add.w	r8, r8, #1
 8010a28:	e7e6      	b.n	80109f8 <_printf_float+0x210>
 8010a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dc2b      	bgt.n	8010a88 <_printf_float+0x2a0>
 8010a30:	2301      	movs	r3, #1
 8010a32:	4a27      	ldr	r2, [pc, #156]	; (8010ad0 <_printf_float+0x2e8>)
 8010a34:	4631      	mov	r1, r6
 8010a36:	4628      	mov	r0, r5
 8010a38:	47b8      	blx	r7
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	f43f af22 	beq.w	8010884 <_printf_float+0x9c>
 8010a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a42:	b923      	cbnz	r3, 8010a4e <_printf_float+0x266>
 8010a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a46:	b913      	cbnz	r3, 8010a4e <_printf_float+0x266>
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	07d9      	lsls	r1, r3, #31
 8010a4c:	d5d8      	bpl.n	8010a00 <_printf_float+0x218>
 8010a4e:	9b05      	ldr	r3, [sp, #20]
 8010a50:	465a      	mov	r2, fp
 8010a52:	4631      	mov	r1, r6
 8010a54:	4628      	mov	r0, r5
 8010a56:	47b8      	blx	r7
 8010a58:	3001      	adds	r0, #1
 8010a5a:	f43f af13 	beq.w	8010884 <_printf_float+0x9c>
 8010a5e:	f04f 0900 	mov.w	r9, #0
 8010a62:	f104 0a1a 	add.w	sl, r4, #26
 8010a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a68:	425b      	negs	r3, r3
 8010a6a:	454b      	cmp	r3, r9
 8010a6c:	dc01      	bgt.n	8010a72 <_printf_float+0x28a>
 8010a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a70:	e795      	b.n	801099e <_printf_float+0x1b6>
 8010a72:	2301      	movs	r3, #1
 8010a74:	4652      	mov	r2, sl
 8010a76:	4631      	mov	r1, r6
 8010a78:	4628      	mov	r0, r5
 8010a7a:	47b8      	blx	r7
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	f43f af01 	beq.w	8010884 <_printf_float+0x9c>
 8010a82:	f109 0901 	add.w	r9, r9, #1
 8010a86:	e7ee      	b.n	8010a66 <_printf_float+0x27e>
 8010a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	bfa8      	it	ge
 8010a90:	461a      	movge	r2, r3
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	4691      	mov	r9, r2
 8010a96:	dd07      	ble.n	8010aa8 <_printf_float+0x2c0>
 8010a98:	4613      	mov	r3, r2
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	4642      	mov	r2, r8
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	47b8      	blx	r7
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	f43f aeee 	beq.w	8010884 <_printf_float+0x9c>
 8010aa8:	f104 031a 	add.w	r3, r4, #26
 8010aac:	f04f 0a00 	mov.w	sl, #0
 8010ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	e017      	b.n	8010ae8 <_printf_float+0x300>
 8010ab8:	ffffffff 	.word	0xffffffff
 8010abc:	7fefffff 	.word	0x7fefffff
 8010ac0:	08014fe0 	.word	0x08014fe0
 8010ac4:	08014fdc 	.word	0x08014fdc
 8010ac8:	08014fe8 	.word	0x08014fe8
 8010acc:	08014fe4 	.word	0x08014fe4
 8010ad0:	08014fec 	.word	0x08014fec
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9a07      	ldr	r2, [sp, #28]
 8010ad8:	4631      	mov	r1, r6
 8010ada:	4628      	mov	r0, r5
 8010adc:	47b8      	blx	r7
 8010ade:	3001      	adds	r0, #1
 8010ae0:	f43f aed0 	beq.w	8010884 <_printf_float+0x9c>
 8010ae4:	f10a 0a01 	add.w	sl, sl, #1
 8010ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010aea:	9306      	str	r3, [sp, #24]
 8010aec:	eba3 0309 	sub.w	r3, r3, r9
 8010af0:	4553      	cmp	r3, sl
 8010af2:	dcef      	bgt.n	8010ad4 <_printf_float+0x2ec>
 8010af4:	9b06      	ldr	r3, [sp, #24]
 8010af6:	4498      	add	r8, r3
 8010af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010afc:	429a      	cmp	r2, r3
 8010afe:	db15      	blt.n	8010b2c <_printf_float+0x344>
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	07da      	lsls	r2, r3, #31
 8010b04:	d412      	bmi.n	8010b2c <_printf_float+0x344>
 8010b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b08:	9a06      	ldr	r2, [sp, #24]
 8010b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b0c:	1a9a      	subs	r2, r3, r2
 8010b0e:	eba3 0a01 	sub.w	sl, r3, r1
 8010b12:	4592      	cmp	sl, r2
 8010b14:	bfa8      	it	ge
 8010b16:	4692      	movge	sl, r2
 8010b18:	f1ba 0f00 	cmp.w	sl, #0
 8010b1c:	dc0e      	bgt.n	8010b3c <_printf_float+0x354>
 8010b1e:	f04f 0800 	mov.w	r8, #0
 8010b22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b26:	f104 091a 	add.w	r9, r4, #26
 8010b2a:	e019      	b.n	8010b60 <_printf_float+0x378>
 8010b2c:	9b05      	ldr	r3, [sp, #20]
 8010b2e:	465a      	mov	r2, fp
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	d1e5      	bne.n	8010b06 <_printf_float+0x31e>
 8010b3a:	e6a3      	b.n	8010884 <_printf_float+0x9c>
 8010b3c:	4653      	mov	r3, sl
 8010b3e:	4642      	mov	r2, r8
 8010b40:	4631      	mov	r1, r6
 8010b42:	4628      	mov	r0, r5
 8010b44:	47b8      	blx	r7
 8010b46:	3001      	adds	r0, #1
 8010b48:	d1e9      	bne.n	8010b1e <_printf_float+0x336>
 8010b4a:	e69b      	b.n	8010884 <_printf_float+0x9c>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	464a      	mov	r2, r9
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b8      	blx	r7
 8010b56:	3001      	adds	r0, #1
 8010b58:	f43f ae94 	beq.w	8010884 <_printf_float+0x9c>
 8010b5c:	f108 0801 	add.w	r8, r8, #1
 8010b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b64:	1a9b      	subs	r3, r3, r2
 8010b66:	eba3 030a 	sub.w	r3, r3, sl
 8010b6a:	4543      	cmp	r3, r8
 8010b6c:	dcee      	bgt.n	8010b4c <_printf_float+0x364>
 8010b6e:	e747      	b.n	8010a00 <_printf_float+0x218>
 8010b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b72:	2a01      	cmp	r2, #1
 8010b74:	dc01      	bgt.n	8010b7a <_printf_float+0x392>
 8010b76:	07db      	lsls	r3, r3, #31
 8010b78:	d539      	bpl.n	8010bee <_printf_float+0x406>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	4642      	mov	r2, r8
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b8      	blx	r7
 8010b84:	3001      	adds	r0, #1
 8010b86:	f43f ae7d 	beq.w	8010884 <_printf_float+0x9c>
 8010b8a:	9b05      	ldr	r3, [sp, #20]
 8010b8c:	465a      	mov	r2, fp
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4628      	mov	r0, r5
 8010b92:	47b8      	blx	r7
 8010b94:	3001      	adds	r0, #1
 8010b96:	f108 0801 	add.w	r8, r8, #1
 8010b9a:	f43f ae73 	beq.w	8010884 <_printf_float+0x9c>
 8010b9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ba4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bac:	f103 33ff 	add.w	r3, r3, #4294967295
 8010bb0:	d018      	beq.n	8010be4 <_printf_float+0x3fc>
 8010bb2:	4642      	mov	r2, r8
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	47b8      	blx	r7
 8010bba:	3001      	adds	r0, #1
 8010bbc:	d10e      	bne.n	8010bdc <_printf_float+0x3f4>
 8010bbe:	e661      	b.n	8010884 <_printf_float+0x9c>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	464a      	mov	r2, r9
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	47b8      	blx	r7
 8010bca:	3001      	adds	r0, #1
 8010bcc:	f43f ae5a 	beq.w	8010884 <_printf_float+0x9c>
 8010bd0:	f108 0801 	add.w	r8, r8, #1
 8010bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	4543      	cmp	r3, r8
 8010bda:	dcf1      	bgt.n	8010bc0 <_printf_float+0x3d8>
 8010bdc:	4653      	mov	r3, sl
 8010bde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010be2:	e6dd      	b.n	80109a0 <_printf_float+0x1b8>
 8010be4:	f04f 0800 	mov.w	r8, #0
 8010be8:	f104 091a 	add.w	r9, r4, #26
 8010bec:	e7f2      	b.n	8010bd4 <_printf_float+0x3ec>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e7df      	b.n	8010bb2 <_printf_float+0x3ca>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	464a      	mov	r2, r9
 8010bf6:	4631      	mov	r1, r6
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	47b8      	blx	r7
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	f43f ae41 	beq.w	8010884 <_printf_float+0x9c>
 8010c02:	f108 0801 	add.w	r8, r8, #1
 8010c06:	68e3      	ldr	r3, [r4, #12]
 8010c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c0a:	1a9b      	subs	r3, r3, r2
 8010c0c:	4543      	cmp	r3, r8
 8010c0e:	dcf0      	bgt.n	8010bf2 <_printf_float+0x40a>
 8010c10:	e6fa      	b.n	8010a08 <_printf_float+0x220>
 8010c12:	f04f 0800 	mov.w	r8, #0
 8010c16:	f104 0919 	add.w	r9, r4, #25
 8010c1a:	e7f4      	b.n	8010c06 <_printf_float+0x41e>
 8010c1c:	2900      	cmp	r1, #0
 8010c1e:	f43f ae8a 	beq.w	8010936 <_printf_float+0x14e>
 8010c22:	f04f 0c00 	mov.w	ip, #0
 8010c26:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010c2a:	e9cd 0900 	strd	r0, r9, [sp]
 8010c2e:	6022      	str	r2, [r4, #0]
 8010c30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c34:	4628      	mov	r0, r5
 8010c36:	f7ff fd4f 	bl	80106d8 <__cvt>
 8010c3a:	4680      	mov	r8, r0
 8010c3c:	e64a      	b.n	80108d4 <_printf_float+0xec>
 8010c3e:	bf00      	nop

08010c40 <_printf_common>:
 8010c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c44:	4691      	mov	r9, r2
 8010c46:	461f      	mov	r7, r3
 8010c48:	688a      	ldr	r2, [r1, #8]
 8010c4a:	690b      	ldr	r3, [r1, #16]
 8010c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c50:	4293      	cmp	r3, r2
 8010c52:	bfb8      	it	lt
 8010c54:	4613      	movlt	r3, r2
 8010c56:	f8c9 3000 	str.w	r3, [r9]
 8010c5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c5e:	4606      	mov	r6, r0
 8010c60:	460c      	mov	r4, r1
 8010c62:	b112      	cbz	r2, 8010c6a <_printf_common+0x2a>
 8010c64:	3301      	adds	r3, #1
 8010c66:	f8c9 3000 	str.w	r3, [r9]
 8010c6a:	6823      	ldr	r3, [r4, #0]
 8010c6c:	0699      	lsls	r1, r3, #26
 8010c6e:	bf42      	ittt	mi
 8010c70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c74:	3302      	addmi	r3, #2
 8010c76:	f8c9 3000 	strmi.w	r3, [r9]
 8010c7a:	6825      	ldr	r5, [r4, #0]
 8010c7c:	f015 0506 	ands.w	r5, r5, #6
 8010c80:	d107      	bne.n	8010c92 <_printf_common+0x52>
 8010c82:	f104 0a19 	add.w	sl, r4, #25
 8010c86:	68e3      	ldr	r3, [r4, #12]
 8010c88:	f8d9 2000 	ldr.w	r2, [r9]
 8010c8c:	1a9b      	subs	r3, r3, r2
 8010c8e:	42ab      	cmp	r3, r5
 8010c90:	dc28      	bgt.n	8010ce4 <_printf_common+0xa4>
 8010c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c96:	6822      	ldr	r2, [r4, #0]
 8010c98:	3300      	adds	r3, #0
 8010c9a:	bf18      	it	ne
 8010c9c:	2301      	movne	r3, #1
 8010c9e:	0692      	lsls	r2, r2, #26
 8010ca0:	d42d      	bmi.n	8010cfe <_printf_common+0xbe>
 8010ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	4630      	mov	r0, r6
 8010caa:	47c0      	blx	r8
 8010cac:	3001      	adds	r0, #1
 8010cae:	d020      	beq.n	8010cf2 <_printf_common+0xb2>
 8010cb0:	6823      	ldr	r3, [r4, #0]
 8010cb2:	68e5      	ldr	r5, [r4, #12]
 8010cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8010cb8:	f003 0306 	and.w	r3, r3, #6
 8010cbc:	2b04      	cmp	r3, #4
 8010cbe:	bf08      	it	eq
 8010cc0:	1aad      	subeq	r5, r5, r2
 8010cc2:	68a3      	ldr	r3, [r4, #8]
 8010cc4:	6922      	ldr	r2, [r4, #16]
 8010cc6:	bf0c      	ite	eq
 8010cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ccc:	2500      	movne	r5, #0
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	bfc4      	itt	gt
 8010cd2:	1a9b      	subgt	r3, r3, r2
 8010cd4:	18ed      	addgt	r5, r5, r3
 8010cd6:	f04f 0900 	mov.w	r9, #0
 8010cda:	341a      	adds	r4, #26
 8010cdc:	454d      	cmp	r5, r9
 8010cde:	d11a      	bne.n	8010d16 <_printf_common+0xd6>
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	e008      	b.n	8010cf6 <_printf_common+0xb6>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	4652      	mov	r2, sl
 8010ce8:	4639      	mov	r1, r7
 8010cea:	4630      	mov	r0, r6
 8010cec:	47c0      	blx	r8
 8010cee:	3001      	adds	r0, #1
 8010cf0:	d103      	bne.n	8010cfa <_printf_common+0xba>
 8010cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfa:	3501      	adds	r5, #1
 8010cfc:	e7c3      	b.n	8010c86 <_printf_common+0x46>
 8010cfe:	18e1      	adds	r1, r4, r3
 8010d00:	1c5a      	adds	r2, r3, #1
 8010d02:	2030      	movs	r0, #48	; 0x30
 8010d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d08:	4422      	add	r2, r4
 8010d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d12:	3302      	adds	r3, #2
 8010d14:	e7c5      	b.n	8010ca2 <_printf_common+0x62>
 8010d16:	2301      	movs	r3, #1
 8010d18:	4622      	mov	r2, r4
 8010d1a:	4639      	mov	r1, r7
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	47c0      	blx	r8
 8010d20:	3001      	adds	r0, #1
 8010d22:	d0e6      	beq.n	8010cf2 <_printf_common+0xb2>
 8010d24:	f109 0901 	add.w	r9, r9, #1
 8010d28:	e7d8      	b.n	8010cdc <_printf_common+0x9c>
	...

08010d2c <_printf_i>:
 8010d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d34:	460c      	mov	r4, r1
 8010d36:	7e09      	ldrb	r1, [r1, #24]
 8010d38:	b085      	sub	sp, #20
 8010d3a:	296e      	cmp	r1, #110	; 0x6e
 8010d3c:	4617      	mov	r7, r2
 8010d3e:	4606      	mov	r6, r0
 8010d40:	4698      	mov	r8, r3
 8010d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d44:	f000 80b3 	beq.w	8010eae <_printf_i+0x182>
 8010d48:	d822      	bhi.n	8010d90 <_printf_i+0x64>
 8010d4a:	2963      	cmp	r1, #99	; 0x63
 8010d4c:	d036      	beq.n	8010dbc <_printf_i+0x90>
 8010d4e:	d80a      	bhi.n	8010d66 <_printf_i+0x3a>
 8010d50:	2900      	cmp	r1, #0
 8010d52:	f000 80b9 	beq.w	8010ec8 <_printf_i+0x19c>
 8010d56:	2958      	cmp	r1, #88	; 0x58
 8010d58:	f000 8083 	beq.w	8010e62 <_printf_i+0x136>
 8010d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d64:	e032      	b.n	8010dcc <_printf_i+0xa0>
 8010d66:	2964      	cmp	r1, #100	; 0x64
 8010d68:	d001      	beq.n	8010d6e <_printf_i+0x42>
 8010d6a:	2969      	cmp	r1, #105	; 0x69
 8010d6c:	d1f6      	bne.n	8010d5c <_printf_i+0x30>
 8010d6e:	6820      	ldr	r0, [r4, #0]
 8010d70:	6813      	ldr	r3, [r2, #0]
 8010d72:	0605      	lsls	r5, r0, #24
 8010d74:	f103 0104 	add.w	r1, r3, #4
 8010d78:	d52a      	bpl.n	8010dd0 <_printf_i+0xa4>
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	6011      	str	r1, [r2, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	da03      	bge.n	8010d8a <_printf_i+0x5e>
 8010d82:	222d      	movs	r2, #45	; 0x2d
 8010d84:	425b      	negs	r3, r3
 8010d86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d8a:	486f      	ldr	r0, [pc, #444]	; (8010f48 <_printf_i+0x21c>)
 8010d8c:	220a      	movs	r2, #10
 8010d8e:	e039      	b.n	8010e04 <_printf_i+0xd8>
 8010d90:	2973      	cmp	r1, #115	; 0x73
 8010d92:	f000 809d 	beq.w	8010ed0 <_printf_i+0x1a4>
 8010d96:	d808      	bhi.n	8010daa <_printf_i+0x7e>
 8010d98:	296f      	cmp	r1, #111	; 0x6f
 8010d9a:	d020      	beq.n	8010dde <_printf_i+0xb2>
 8010d9c:	2970      	cmp	r1, #112	; 0x70
 8010d9e:	d1dd      	bne.n	8010d5c <_printf_i+0x30>
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	f043 0320 	orr.w	r3, r3, #32
 8010da6:	6023      	str	r3, [r4, #0]
 8010da8:	e003      	b.n	8010db2 <_printf_i+0x86>
 8010daa:	2975      	cmp	r1, #117	; 0x75
 8010dac:	d017      	beq.n	8010dde <_printf_i+0xb2>
 8010dae:	2978      	cmp	r1, #120	; 0x78
 8010db0:	d1d4      	bne.n	8010d5c <_printf_i+0x30>
 8010db2:	2378      	movs	r3, #120	; 0x78
 8010db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010db8:	4864      	ldr	r0, [pc, #400]	; (8010f4c <_printf_i+0x220>)
 8010dba:	e055      	b.n	8010e68 <_printf_i+0x13c>
 8010dbc:	6813      	ldr	r3, [r2, #0]
 8010dbe:	1d19      	adds	r1, r3, #4
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	6011      	str	r1, [r2, #0]
 8010dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e08c      	b.n	8010eea <_printf_i+0x1be>
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6011      	str	r1, [r2, #0]
 8010dd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dd8:	bf18      	it	ne
 8010dda:	b21b      	sxthne	r3, r3
 8010ddc:	e7cf      	b.n	8010d7e <_printf_i+0x52>
 8010dde:	6813      	ldr	r3, [r2, #0]
 8010de0:	6825      	ldr	r5, [r4, #0]
 8010de2:	1d18      	adds	r0, r3, #4
 8010de4:	6010      	str	r0, [r2, #0]
 8010de6:	0628      	lsls	r0, r5, #24
 8010de8:	d501      	bpl.n	8010dee <_printf_i+0xc2>
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	e002      	b.n	8010df4 <_printf_i+0xc8>
 8010dee:	0668      	lsls	r0, r5, #25
 8010df0:	d5fb      	bpl.n	8010dea <_printf_i+0xbe>
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	4854      	ldr	r0, [pc, #336]	; (8010f48 <_printf_i+0x21c>)
 8010df6:	296f      	cmp	r1, #111	; 0x6f
 8010df8:	bf14      	ite	ne
 8010dfa:	220a      	movne	r2, #10
 8010dfc:	2208      	moveq	r2, #8
 8010dfe:	2100      	movs	r1, #0
 8010e00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e04:	6865      	ldr	r5, [r4, #4]
 8010e06:	60a5      	str	r5, [r4, #8]
 8010e08:	2d00      	cmp	r5, #0
 8010e0a:	f2c0 8095 	blt.w	8010f38 <_printf_i+0x20c>
 8010e0e:	6821      	ldr	r1, [r4, #0]
 8010e10:	f021 0104 	bic.w	r1, r1, #4
 8010e14:	6021      	str	r1, [r4, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d13d      	bne.n	8010e96 <_printf_i+0x16a>
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	f040 808e 	bne.w	8010f3c <_printf_i+0x210>
 8010e20:	4665      	mov	r5, ip
 8010e22:	2a08      	cmp	r2, #8
 8010e24:	d10b      	bne.n	8010e3e <_printf_i+0x112>
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	07db      	lsls	r3, r3, #31
 8010e2a:	d508      	bpl.n	8010e3e <_printf_i+0x112>
 8010e2c:	6923      	ldr	r3, [r4, #16]
 8010e2e:	6862      	ldr	r2, [r4, #4]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	bfde      	ittt	le
 8010e34:	2330      	movle	r3, #48	; 0x30
 8010e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e3e:	ebac 0305 	sub.w	r3, ip, r5
 8010e42:	6123      	str	r3, [r4, #16]
 8010e44:	f8cd 8000 	str.w	r8, [sp]
 8010e48:	463b      	mov	r3, r7
 8010e4a:	aa03      	add	r2, sp, #12
 8010e4c:	4621      	mov	r1, r4
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7ff fef6 	bl	8010c40 <_printf_common>
 8010e54:	3001      	adds	r0, #1
 8010e56:	d14d      	bne.n	8010ef4 <_printf_i+0x1c8>
 8010e58:	f04f 30ff 	mov.w	r0, #4294967295
 8010e5c:	b005      	add	sp, #20
 8010e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e62:	4839      	ldr	r0, [pc, #228]	; (8010f48 <_printf_i+0x21c>)
 8010e64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e68:	6813      	ldr	r3, [r2, #0]
 8010e6a:	6821      	ldr	r1, [r4, #0]
 8010e6c:	1d1d      	adds	r5, r3, #4
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6015      	str	r5, [r2, #0]
 8010e72:	060a      	lsls	r2, r1, #24
 8010e74:	d50b      	bpl.n	8010e8e <_printf_i+0x162>
 8010e76:	07ca      	lsls	r2, r1, #31
 8010e78:	bf44      	itt	mi
 8010e7a:	f041 0120 	orrmi.w	r1, r1, #32
 8010e7e:	6021      	strmi	r1, [r4, #0]
 8010e80:	b91b      	cbnz	r3, 8010e8a <_printf_i+0x15e>
 8010e82:	6822      	ldr	r2, [r4, #0]
 8010e84:	f022 0220 	bic.w	r2, r2, #32
 8010e88:	6022      	str	r2, [r4, #0]
 8010e8a:	2210      	movs	r2, #16
 8010e8c:	e7b7      	b.n	8010dfe <_printf_i+0xd2>
 8010e8e:	064d      	lsls	r5, r1, #25
 8010e90:	bf48      	it	mi
 8010e92:	b29b      	uxthmi	r3, r3
 8010e94:	e7ef      	b.n	8010e76 <_printf_i+0x14a>
 8010e96:	4665      	mov	r5, ip
 8010e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e9c:	fb02 3311 	mls	r3, r2, r1, r3
 8010ea0:	5cc3      	ldrb	r3, [r0, r3]
 8010ea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	d1f5      	bne.n	8010e98 <_printf_i+0x16c>
 8010eac:	e7b9      	b.n	8010e22 <_printf_i+0xf6>
 8010eae:	6813      	ldr	r3, [r2, #0]
 8010eb0:	6825      	ldr	r5, [r4, #0]
 8010eb2:	6961      	ldr	r1, [r4, #20]
 8010eb4:	1d18      	adds	r0, r3, #4
 8010eb6:	6010      	str	r0, [r2, #0]
 8010eb8:	0628      	lsls	r0, r5, #24
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	d501      	bpl.n	8010ec2 <_printf_i+0x196>
 8010ebe:	6019      	str	r1, [r3, #0]
 8010ec0:	e002      	b.n	8010ec8 <_printf_i+0x19c>
 8010ec2:	066a      	lsls	r2, r5, #25
 8010ec4:	d5fb      	bpl.n	8010ebe <_printf_i+0x192>
 8010ec6:	8019      	strh	r1, [r3, #0]
 8010ec8:	2300      	movs	r3, #0
 8010eca:	6123      	str	r3, [r4, #16]
 8010ecc:	4665      	mov	r5, ip
 8010ece:	e7b9      	b.n	8010e44 <_printf_i+0x118>
 8010ed0:	6813      	ldr	r3, [r2, #0]
 8010ed2:	1d19      	adds	r1, r3, #4
 8010ed4:	6011      	str	r1, [r2, #0]
 8010ed6:	681d      	ldr	r5, [r3, #0]
 8010ed8:	6862      	ldr	r2, [r4, #4]
 8010eda:	2100      	movs	r1, #0
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7ef f9b7 	bl	8000250 <memchr>
 8010ee2:	b108      	cbz	r0, 8010ee8 <_printf_i+0x1bc>
 8010ee4:	1b40      	subs	r0, r0, r5
 8010ee6:	6060      	str	r0, [r4, #4]
 8010ee8:	6863      	ldr	r3, [r4, #4]
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	2300      	movs	r3, #0
 8010eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef2:	e7a7      	b.n	8010e44 <_printf_i+0x118>
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	462a      	mov	r2, r5
 8010ef8:	4639      	mov	r1, r7
 8010efa:	4630      	mov	r0, r6
 8010efc:	47c0      	blx	r8
 8010efe:	3001      	adds	r0, #1
 8010f00:	d0aa      	beq.n	8010e58 <_printf_i+0x12c>
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	079b      	lsls	r3, r3, #30
 8010f06:	d413      	bmi.n	8010f30 <_printf_i+0x204>
 8010f08:	68e0      	ldr	r0, [r4, #12]
 8010f0a:	9b03      	ldr	r3, [sp, #12]
 8010f0c:	4298      	cmp	r0, r3
 8010f0e:	bfb8      	it	lt
 8010f10:	4618      	movlt	r0, r3
 8010f12:	e7a3      	b.n	8010e5c <_printf_i+0x130>
 8010f14:	2301      	movs	r3, #1
 8010f16:	464a      	mov	r2, r9
 8010f18:	4639      	mov	r1, r7
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	47c0      	blx	r8
 8010f1e:	3001      	adds	r0, #1
 8010f20:	d09a      	beq.n	8010e58 <_printf_i+0x12c>
 8010f22:	3501      	adds	r5, #1
 8010f24:	68e3      	ldr	r3, [r4, #12]
 8010f26:	9a03      	ldr	r2, [sp, #12]
 8010f28:	1a9b      	subs	r3, r3, r2
 8010f2a:	42ab      	cmp	r3, r5
 8010f2c:	dcf2      	bgt.n	8010f14 <_printf_i+0x1e8>
 8010f2e:	e7eb      	b.n	8010f08 <_printf_i+0x1dc>
 8010f30:	2500      	movs	r5, #0
 8010f32:	f104 0919 	add.w	r9, r4, #25
 8010f36:	e7f5      	b.n	8010f24 <_printf_i+0x1f8>
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1ac      	bne.n	8010e96 <_printf_i+0x16a>
 8010f3c:	7803      	ldrb	r3, [r0, #0]
 8010f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f46:	e76c      	b.n	8010e22 <_printf_i+0xf6>
 8010f48:	08014fee 	.word	0x08014fee
 8010f4c:	08014fff 	.word	0x08014fff

08010f50 <_scanf_float>:
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	469a      	mov	sl, r3
 8010f56:	688b      	ldr	r3, [r1, #8]
 8010f58:	4616      	mov	r6, r2
 8010f5a:	1e5a      	subs	r2, r3, #1
 8010f5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010f60:	b087      	sub	sp, #28
 8010f62:	bf83      	ittte	hi
 8010f64:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010f68:	189b      	addhi	r3, r3, r2
 8010f6a:	9301      	strhi	r3, [sp, #4]
 8010f6c:	2300      	movls	r3, #0
 8010f6e:	bf86      	itte	hi
 8010f70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010f74:	608b      	strhi	r3, [r1, #8]
 8010f76:	9301      	strls	r3, [sp, #4]
 8010f78:	680b      	ldr	r3, [r1, #0]
 8010f7a:	4688      	mov	r8, r1
 8010f7c:	f04f 0b00 	mov.w	fp, #0
 8010f80:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010f84:	f848 3b1c 	str.w	r3, [r8], #28
 8010f88:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010f8c:	4607      	mov	r7, r0
 8010f8e:	460c      	mov	r4, r1
 8010f90:	4645      	mov	r5, r8
 8010f92:	465a      	mov	r2, fp
 8010f94:	46d9      	mov	r9, fp
 8010f96:	f8cd b008 	str.w	fp, [sp, #8]
 8010f9a:	68a1      	ldr	r1, [r4, #8]
 8010f9c:	b181      	cbz	r1, 8010fc0 <_scanf_float+0x70>
 8010f9e:	6833      	ldr	r3, [r6, #0]
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	2b49      	cmp	r3, #73	; 0x49
 8010fa4:	d071      	beq.n	801108a <_scanf_float+0x13a>
 8010fa6:	d84d      	bhi.n	8011044 <_scanf_float+0xf4>
 8010fa8:	2b39      	cmp	r3, #57	; 0x39
 8010faa:	d840      	bhi.n	801102e <_scanf_float+0xde>
 8010fac:	2b31      	cmp	r3, #49	; 0x31
 8010fae:	f080 8088 	bcs.w	80110c2 <_scanf_float+0x172>
 8010fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8010fb4:	f000 8090 	beq.w	80110d8 <_scanf_float+0x188>
 8010fb8:	d815      	bhi.n	8010fe6 <_scanf_float+0x96>
 8010fba:	2b2b      	cmp	r3, #43	; 0x2b
 8010fbc:	f000 808c 	beq.w	80110d8 <_scanf_float+0x188>
 8010fc0:	f1b9 0f00 	cmp.w	r9, #0
 8010fc4:	d003      	beq.n	8010fce <_scanf_float+0x7e>
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	3a01      	subs	r2, #1
 8010fd0:	2a01      	cmp	r2, #1
 8010fd2:	f200 80ea 	bhi.w	80111aa <_scanf_float+0x25a>
 8010fd6:	4545      	cmp	r5, r8
 8010fd8:	f200 80dc 	bhi.w	8011194 <_scanf_float+0x244>
 8010fdc:	2601      	movs	r6, #1
 8010fde:	4630      	mov	r0, r6
 8010fe0:	b007      	add	sp, #28
 8010fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8010fe8:	f000 809f 	beq.w	801112a <_scanf_float+0x1da>
 8010fec:	2b30      	cmp	r3, #48	; 0x30
 8010fee:	d1e7      	bne.n	8010fc0 <_scanf_float+0x70>
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010ff6:	d064      	beq.n	80110c2 <_scanf_float+0x172>
 8010ff8:	9b01      	ldr	r3, [sp, #4]
 8010ffa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010ffe:	6020      	str	r0, [r4, #0]
 8011000:	f109 0901 	add.w	r9, r9, #1
 8011004:	b11b      	cbz	r3, 801100e <_scanf_float+0xbe>
 8011006:	3b01      	subs	r3, #1
 8011008:	3101      	adds	r1, #1
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	60a1      	str	r1, [r4, #8]
 801100e:	68a3      	ldr	r3, [r4, #8]
 8011010:	3b01      	subs	r3, #1
 8011012:	60a3      	str	r3, [r4, #8]
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	3301      	adds	r3, #1
 8011018:	6123      	str	r3, [r4, #16]
 801101a:	6873      	ldr	r3, [r6, #4]
 801101c:	3b01      	subs	r3, #1
 801101e:	2b00      	cmp	r3, #0
 8011020:	6073      	str	r3, [r6, #4]
 8011022:	f340 80ac 	ble.w	801117e <_scanf_float+0x22e>
 8011026:	6833      	ldr	r3, [r6, #0]
 8011028:	3301      	adds	r3, #1
 801102a:	6033      	str	r3, [r6, #0]
 801102c:	e7b5      	b.n	8010f9a <_scanf_float+0x4a>
 801102e:	2b45      	cmp	r3, #69	; 0x45
 8011030:	f000 8085 	beq.w	801113e <_scanf_float+0x1ee>
 8011034:	2b46      	cmp	r3, #70	; 0x46
 8011036:	d06a      	beq.n	801110e <_scanf_float+0x1be>
 8011038:	2b41      	cmp	r3, #65	; 0x41
 801103a:	d1c1      	bne.n	8010fc0 <_scanf_float+0x70>
 801103c:	2a01      	cmp	r2, #1
 801103e:	d1bf      	bne.n	8010fc0 <_scanf_float+0x70>
 8011040:	2202      	movs	r2, #2
 8011042:	e046      	b.n	80110d2 <_scanf_float+0x182>
 8011044:	2b65      	cmp	r3, #101	; 0x65
 8011046:	d07a      	beq.n	801113e <_scanf_float+0x1ee>
 8011048:	d818      	bhi.n	801107c <_scanf_float+0x12c>
 801104a:	2b54      	cmp	r3, #84	; 0x54
 801104c:	d066      	beq.n	801111c <_scanf_float+0x1cc>
 801104e:	d811      	bhi.n	8011074 <_scanf_float+0x124>
 8011050:	2b4e      	cmp	r3, #78	; 0x4e
 8011052:	d1b5      	bne.n	8010fc0 <_scanf_float+0x70>
 8011054:	2a00      	cmp	r2, #0
 8011056:	d146      	bne.n	80110e6 <_scanf_float+0x196>
 8011058:	f1b9 0f00 	cmp.w	r9, #0
 801105c:	d145      	bne.n	80110ea <_scanf_float+0x19a>
 801105e:	6821      	ldr	r1, [r4, #0]
 8011060:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011064:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011068:	d13f      	bne.n	80110ea <_scanf_float+0x19a>
 801106a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801106e:	6021      	str	r1, [r4, #0]
 8011070:	2201      	movs	r2, #1
 8011072:	e02e      	b.n	80110d2 <_scanf_float+0x182>
 8011074:	2b59      	cmp	r3, #89	; 0x59
 8011076:	d01e      	beq.n	80110b6 <_scanf_float+0x166>
 8011078:	2b61      	cmp	r3, #97	; 0x61
 801107a:	e7de      	b.n	801103a <_scanf_float+0xea>
 801107c:	2b6e      	cmp	r3, #110	; 0x6e
 801107e:	d0e9      	beq.n	8011054 <_scanf_float+0x104>
 8011080:	d815      	bhi.n	80110ae <_scanf_float+0x15e>
 8011082:	2b66      	cmp	r3, #102	; 0x66
 8011084:	d043      	beq.n	801110e <_scanf_float+0x1be>
 8011086:	2b69      	cmp	r3, #105	; 0x69
 8011088:	d19a      	bne.n	8010fc0 <_scanf_float+0x70>
 801108a:	f1bb 0f00 	cmp.w	fp, #0
 801108e:	d138      	bne.n	8011102 <_scanf_float+0x1b2>
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	d197      	bne.n	8010fc6 <_scanf_float+0x76>
 8011096:	6821      	ldr	r1, [r4, #0]
 8011098:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801109c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80110a0:	d195      	bne.n	8010fce <_scanf_float+0x7e>
 80110a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80110a6:	6021      	str	r1, [r4, #0]
 80110a8:	f04f 0b01 	mov.w	fp, #1
 80110ac:	e011      	b.n	80110d2 <_scanf_float+0x182>
 80110ae:	2b74      	cmp	r3, #116	; 0x74
 80110b0:	d034      	beq.n	801111c <_scanf_float+0x1cc>
 80110b2:	2b79      	cmp	r3, #121	; 0x79
 80110b4:	d184      	bne.n	8010fc0 <_scanf_float+0x70>
 80110b6:	f1bb 0f07 	cmp.w	fp, #7
 80110ba:	d181      	bne.n	8010fc0 <_scanf_float+0x70>
 80110bc:	f04f 0b08 	mov.w	fp, #8
 80110c0:	e007      	b.n	80110d2 <_scanf_float+0x182>
 80110c2:	eb12 0f0b 	cmn.w	r2, fp
 80110c6:	f47f af7b 	bne.w	8010fc0 <_scanf_float+0x70>
 80110ca:	6821      	ldr	r1, [r4, #0]
 80110cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80110d0:	6021      	str	r1, [r4, #0]
 80110d2:	702b      	strb	r3, [r5, #0]
 80110d4:	3501      	adds	r5, #1
 80110d6:	e79a      	b.n	801100e <_scanf_float+0xbe>
 80110d8:	6821      	ldr	r1, [r4, #0]
 80110da:	0608      	lsls	r0, r1, #24
 80110dc:	f57f af70 	bpl.w	8010fc0 <_scanf_float+0x70>
 80110e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80110e4:	e7f4      	b.n	80110d0 <_scanf_float+0x180>
 80110e6:	2a02      	cmp	r2, #2
 80110e8:	d047      	beq.n	801117a <_scanf_float+0x22a>
 80110ea:	f1bb 0f01 	cmp.w	fp, #1
 80110ee:	d003      	beq.n	80110f8 <_scanf_float+0x1a8>
 80110f0:	f1bb 0f04 	cmp.w	fp, #4
 80110f4:	f47f af64 	bne.w	8010fc0 <_scanf_float+0x70>
 80110f8:	f10b 0b01 	add.w	fp, fp, #1
 80110fc:	fa5f fb8b 	uxtb.w	fp, fp
 8011100:	e7e7      	b.n	80110d2 <_scanf_float+0x182>
 8011102:	f1bb 0f03 	cmp.w	fp, #3
 8011106:	d0f7      	beq.n	80110f8 <_scanf_float+0x1a8>
 8011108:	f1bb 0f05 	cmp.w	fp, #5
 801110c:	e7f2      	b.n	80110f4 <_scanf_float+0x1a4>
 801110e:	f1bb 0f02 	cmp.w	fp, #2
 8011112:	f47f af55 	bne.w	8010fc0 <_scanf_float+0x70>
 8011116:	f04f 0b03 	mov.w	fp, #3
 801111a:	e7da      	b.n	80110d2 <_scanf_float+0x182>
 801111c:	f1bb 0f06 	cmp.w	fp, #6
 8011120:	f47f af4e 	bne.w	8010fc0 <_scanf_float+0x70>
 8011124:	f04f 0b07 	mov.w	fp, #7
 8011128:	e7d3      	b.n	80110d2 <_scanf_float+0x182>
 801112a:	6821      	ldr	r1, [r4, #0]
 801112c:	0588      	lsls	r0, r1, #22
 801112e:	f57f af47 	bpl.w	8010fc0 <_scanf_float+0x70>
 8011132:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011136:	6021      	str	r1, [r4, #0]
 8011138:	f8cd 9008 	str.w	r9, [sp, #8]
 801113c:	e7c9      	b.n	80110d2 <_scanf_float+0x182>
 801113e:	6821      	ldr	r1, [r4, #0]
 8011140:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011144:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011148:	d006      	beq.n	8011158 <_scanf_float+0x208>
 801114a:	0548      	lsls	r0, r1, #21
 801114c:	f57f af38 	bpl.w	8010fc0 <_scanf_float+0x70>
 8011150:	f1b9 0f00 	cmp.w	r9, #0
 8011154:	f43f af3b 	beq.w	8010fce <_scanf_float+0x7e>
 8011158:	0588      	lsls	r0, r1, #22
 801115a:	bf58      	it	pl
 801115c:	9802      	ldrpl	r0, [sp, #8]
 801115e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011162:	bf58      	it	pl
 8011164:	eba9 0000 	subpl.w	r0, r9, r0
 8011168:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801116c:	bf58      	it	pl
 801116e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011172:	6021      	str	r1, [r4, #0]
 8011174:	f04f 0900 	mov.w	r9, #0
 8011178:	e7ab      	b.n	80110d2 <_scanf_float+0x182>
 801117a:	2203      	movs	r2, #3
 801117c:	e7a9      	b.n	80110d2 <_scanf_float+0x182>
 801117e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011182:	9205      	str	r2, [sp, #20]
 8011184:	4631      	mov	r1, r6
 8011186:	4638      	mov	r0, r7
 8011188:	4798      	blx	r3
 801118a:	9a05      	ldr	r2, [sp, #20]
 801118c:	2800      	cmp	r0, #0
 801118e:	f43f af04 	beq.w	8010f9a <_scanf_float+0x4a>
 8011192:	e715      	b.n	8010fc0 <_scanf_float+0x70>
 8011194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801119c:	4632      	mov	r2, r6
 801119e:	4638      	mov	r0, r7
 80111a0:	4798      	blx	r3
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	6123      	str	r3, [r4, #16]
 80111a8:	e715      	b.n	8010fd6 <_scanf_float+0x86>
 80111aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80111ae:	2b06      	cmp	r3, #6
 80111b0:	d80a      	bhi.n	80111c8 <_scanf_float+0x278>
 80111b2:	f1bb 0f02 	cmp.w	fp, #2
 80111b6:	d966      	bls.n	8011286 <_scanf_float+0x336>
 80111b8:	f1ab 0b03 	sub.w	fp, fp, #3
 80111bc:	fa5f fb8b 	uxtb.w	fp, fp
 80111c0:	eba5 0b0b 	sub.w	fp, r5, fp
 80111c4:	455d      	cmp	r5, fp
 80111c6:	d149      	bne.n	801125c <_scanf_float+0x30c>
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	05da      	lsls	r2, r3, #23
 80111cc:	d51f      	bpl.n	801120e <_scanf_float+0x2be>
 80111ce:	055b      	lsls	r3, r3, #21
 80111d0:	d466      	bmi.n	80112a0 <_scanf_float+0x350>
 80111d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80111d6:	6923      	ldr	r3, [r4, #16]
 80111d8:	2965      	cmp	r1, #101	; 0x65
 80111da:	f103 33ff 	add.w	r3, r3, #4294967295
 80111de:	f105 3bff 	add.w	fp, r5, #4294967295
 80111e2:	6123      	str	r3, [r4, #16]
 80111e4:	d00d      	beq.n	8011202 <_scanf_float+0x2b2>
 80111e6:	2945      	cmp	r1, #69	; 0x45
 80111e8:	d00b      	beq.n	8011202 <_scanf_float+0x2b2>
 80111ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80111ee:	4632      	mov	r2, r6
 80111f0:	4638      	mov	r0, r7
 80111f2:	4798      	blx	r3
 80111f4:	6923      	ldr	r3, [r4, #16]
 80111f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	f1a5 0b02 	sub.w	fp, r5, #2
 8011200:	6123      	str	r3, [r4, #16]
 8011202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011206:	4632      	mov	r2, r6
 8011208:	4638      	mov	r0, r7
 801120a:	4798      	blx	r3
 801120c:	465d      	mov	r5, fp
 801120e:	6826      	ldr	r6, [r4, #0]
 8011210:	f016 0610 	ands.w	r6, r6, #16
 8011214:	d170      	bne.n	80112f8 <_scanf_float+0x3a8>
 8011216:	702e      	strb	r6, [r5, #0]
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011222:	d140      	bne.n	80112a6 <_scanf_float+0x356>
 8011224:	9b02      	ldr	r3, [sp, #8]
 8011226:	eba9 0303 	sub.w	r3, r9, r3
 801122a:	425a      	negs	r2, r3
 801122c:	2b00      	cmp	r3, #0
 801122e:	d147      	bne.n	80112c0 <_scanf_float+0x370>
 8011230:	2200      	movs	r2, #0
 8011232:	4638      	mov	r0, r7
 8011234:	4641      	mov	r1, r8
 8011236:	f000 ff3b 	bl	80120b0 <_strtod_r>
 801123a:	6820      	ldr	r0, [r4, #0]
 801123c:	f8da 3000 	ldr.w	r3, [sl]
 8011240:	f010 0f02 	tst.w	r0, #2
 8011244:	f103 0204 	add.w	r2, r3, #4
 8011248:	f8ca 2000 	str.w	r2, [sl]
 801124c:	d043      	beq.n	80112d6 <_scanf_float+0x386>
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	ed83 0b00 	vstr	d0, [r3]
 8011254:	68e3      	ldr	r3, [r4, #12]
 8011256:	3301      	adds	r3, #1
 8011258:	60e3      	str	r3, [r4, #12]
 801125a:	e6c0      	b.n	8010fde <_scanf_float+0x8e>
 801125c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011260:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011264:	4632      	mov	r2, r6
 8011266:	4638      	mov	r0, r7
 8011268:	4798      	blx	r3
 801126a:	6923      	ldr	r3, [r4, #16]
 801126c:	3b01      	subs	r3, #1
 801126e:	6123      	str	r3, [r4, #16]
 8011270:	e7a8      	b.n	80111c4 <_scanf_float+0x274>
 8011272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011276:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801127a:	4632      	mov	r2, r6
 801127c:	4638      	mov	r0, r7
 801127e:	4798      	blx	r3
 8011280:	6923      	ldr	r3, [r4, #16]
 8011282:	3b01      	subs	r3, #1
 8011284:	6123      	str	r3, [r4, #16]
 8011286:	4545      	cmp	r5, r8
 8011288:	d8f3      	bhi.n	8011272 <_scanf_float+0x322>
 801128a:	e6a7      	b.n	8010fdc <_scanf_float+0x8c>
 801128c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011290:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011294:	4632      	mov	r2, r6
 8011296:	4638      	mov	r0, r7
 8011298:	4798      	blx	r3
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	3b01      	subs	r3, #1
 801129e:	6123      	str	r3, [r4, #16]
 80112a0:	4545      	cmp	r5, r8
 80112a2:	d8f3      	bhi.n	801128c <_scanf_float+0x33c>
 80112a4:	e69a      	b.n	8010fdc <_scanf_float+0x8c>
 80112a6:	9b03      	ldr	r3, [sp, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d0c1      	beq.n	8011230 <_scanf_float+0x2e0>
 80112ac:	9904      	ldr	r1, [sp, #16]
 80112ae:	230a      	movs	r3, #10
 80112b0:	4632      	mov	r2, r6
 80112b2:	3101      	adds	r1, #1
 80112b4:	4638      	mov	r0, r7
 80112b6:	f000 ff87 	bl	80121c8 <_strtol_r>
 80112ba:	9b03      	ldr	r3, [sp, #12]
 80112bc:	9d04      	ldr	r5, [sp, #16]
 80112be:	1ac2      	subs	r2, r0, r3
 80112c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80112c4:	429d      	cmp	r5, r3
 80112c6:	bf28      	it	cs
 80112c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80112cc:	490b      	ldr	r1, [pc, #44]	; (80112fc <_scanf_float+0x3ac>)
 80112ce:	4628      	mov	r0, r5
 80112d0:	f000 f8ec 	bl	80114ac <siprintf>
 80112d4:	e7ac      	b.n	8011230 <_scanf_float+0x2e0>
 80112d6:	f010 0004 	ands.w	r0, r0, #4
 80112da:	d1b8      	bne.n	801124e <_scanf_float+0x2fe>
 80112dc:	eeb4 0b40 	vcmp.f64	d0, d0
 80112e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e4:	681d      	ldr	r5, [r3, #0]
 80112e6:	d704      	bvc.n	80112f2 <_scanf_float+0x3a2>
 80112e8:	f000 f896 	bl	8011418 <nanf>
 80112ec:	ed85 0a00 	vstr	s0, [r5]
 80112f0:	e7b0      	b.n	8011254 <_scanf_float+0x304>
 80112f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80112f6:	e7f9      	b.n	80112ec <_scanf_float+0x39c>
 80112f8:	2600      	movs	r6, #0
 80112fa:	e670      	b.n	8010fde <_scanf_float+0x8e>
 80112fc:	08015010 	.word	0x08015010

08011300 <iprintf>:
 8011300:	b40f      	push	{r0, r1, r2, r3}
 8011302:	4b0a      	ldr	r3, [pc, #40]	; (801132c <iprintf+0x2c>)
 8011304:	b513      	push	{r0, r1, r4, lr}
 8011306:	681c      	ldr	r4, [r3, #0]
 8011308:	b124      	cbz	r4, 8011314 <iprintf+0x14>
 801130a:	69a3      	ldr	r3, [r4, #24]
 801130c:	b913      	cbnz	r3, 8011314 <iprintf+0x14>
 801130e:	4620      	mov	r0, r4
 8011310:	f001 fef6 	bl	8013100 <__sinit>
 8011314:	ab05      	add	r3, sp, #20
 8011316:	9a04      	ldr	r2, [sp, #16]
 8011318:	68a1      	ldr	r1, [r4, #8]
 801131a:	9301      	str	r3, [sp, #4]
 801131c:	4620      	mov	r0, r4
 801131e:	f003 f8a7 	bl	8014470 <_vfiprintf_r>
 8011322:	b002      	add	sp, #8
 8011324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011328:	b004      	add	sp, #16
 801132a:	4770      	bx	lr
 801132c:	20000378 	.word	0x20000378

08011330 <_puts_r>:
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	460e      	mov	r6, r1
 8011334:	4605      	mov	r5, r0
 8011336:	b118      	cbz	r0, 8011340 <_puts_r+0x10>
 8011338:	6983      	ldr	r3, [r0, #24]
 801133a:	b90b      	cbnz	r3, 8011340 <_puts_r+0x10>
 801133c:	f001 fee0 	bl	8013100 <__sinit>
 8011340:	69ab      	ldr	r3, [r5, #24]
 8011342:	68ac      	ldr	r4, [r5, #8]
 8011344:	b913      	cbnz	r3, 801134c <_puts_r+0x1c>
 8011346:	4628      	mov	r0, r5
 8011348:	f001 feda 	bl	8013100 <__sinit>
 801134c:	4b23      	ldr	r3, [pc, #140]	; (80113dc <_puts_r+0xac>)
 801134e:	429c      	cmp	r4, r3
 8011350:	d117      	bne.n	8011382 <_puts_r+0x52>
 8011352:	686c      	ldr	r4, [r5, #4]
 8011354:	89a3      	ldrh	r3, [r4, #12]
 8011356:	071b      	lsls	r3, r3, #28
 8011358:	d51d      	bpl.n	8011396 <_puts_r+0x66>
 801135a:	6923      	ldr	r3, [r4, #16]
 801135c:	b1db      	cbz	r3, 8011396 <_puts_r+0x66>
 801135e:	3e01      	subs	r6, #1
 8011360:	68a3      	ldr	r3, [r4, #8]
 8011362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011366:	3b01      	subs	r3, #1
 8011368:	60a3      	str	r3, [r4, #8]
 801136a:	b9e9      	cbnz	r1, 80113a8 <_puts_r+0x78>
 801136c:	2b00      	cmp	r3, #0
 801136e:	da2e      	bge.n	80113ce <_puts_r+0x9e>
 8011370:	4622      	mov	r2, r4
 8011372:	210a      	movs	r1, #10
 8011374:	4628      	mov	r0, r5
 8011376:	f000 ff39 	bl	80121ec <__swbuf_r>
 801137a:	3001      	adds	r0, #1
 801137c:	d011      	beq.n	80113a2 <_puts_r+0x72>
 801137e:	200a      	movs	r0, #10
 8011380:	e011      	b.n	80113a6 <_puts_r+0x76>
 8011382:	4b17      	ldr	r3, [pc, #92]	; (80113e0 <_puts_r+0xb0>)
 8011384:	429c      	cmp	r4, r3
 8011386:	d101      	bne.n	801138c <_puts_r+0x5c>
 8011388:	68ac      	ldr	r4, [r5, #8]
 801138a:	e7e3      	b.n	8011354 <_puts_r+0x24>
 801138c:	4b15      	ldr	r3, [pc, #84]	; (80113e4 <_puts_r+0xb4>)
 801138e:	429c      	cmp	r4, r3
 8011390:	bf08      	it	eq
 8011392:	68ec      	ldreq	r4, [r5, #12]
 8011394:	e7de      	b.n	8011354 <_puts_r+0x24>
 8011396:	4621      	mov	r1, r4
 8011398:	4628      	mov	r0, r5
 801139a:	f000 ff79 	bl	8012290 <__swsetup_r>
 801139e:	2800      	cmp	r0, #0
 80113a0:	d0dd      	beq.n	801135e <_puts_r+0x2e>
 80113a2:	f04f 30ff 	mov.w	r0, #4294967295
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	da04      	bge.n	80113b6 <_puts_r+0x86>
 80113ac:	69a2      	ldr	r2, [r4, #24]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	dc06      	bgt.n	80113c0 <_puts_r+0x90>
 80113b2:	290a      	cmp	r1, #10
 80113b4:	d004      	beq.n	80113c0 <_puts_r+0x90>
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	1c5a      	adds	r2, r3, #1
 80113ba:	6022      	str	r2, [r4, #0]
 80113bc:	7019      	strb	r1, [r3, #0]
 80113be:	e7cf      	b.n	8011360 <_puts_r+0x30>
 80113c0:	4622      	mov	r2, r4
 80113c2:	4628      	mov	r0, r5
 80113c4:	f000 ff12 	bl	80121ec <__swbuf_r>
 80113c8:	3001      	adds	r0, #1
 80113ca:	d1c9      	bne.n	8011360 <_puts_r+0x30>
 80113cc:	e7e9      	b.n	80113a2 <_puts_r+0x72>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	200a      	movs	r0, #10
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	6022      	str	r2, [r4, #0]
 80113d6:	7018      	strb	r0, [r3, #0]
 80113d8:	e7e5      	b.n	80113a6 <_puts_r+0x76>
 80113da:	bf00      	nop
 80113dc:	08015098 	.word	0x08015098
 80113e0:	080150b8 	.word	0x080150b8
 80113e4:	08015078 	.word	0x08015078

080113e8 <puts>:
 80113e8:	4b02      	ldr	r3, [pc, #8]	; (80113f4 <puts+0xc>)
 80113ea:	4601      	mov	r1, r0
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	f7ff bf9f 	b.w	8011330 <_puts_r>
 80113f2:	bf00      	nop
 80113f4:	20000378 	.word	0x20000378

080113f8 <_sbrk_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4c06      	ldr	r4, [pc, #24]	; (8011414 <_sbrk_r+0x1c>)
 80113fc:	2300      	movs	r3, #0
 80113fe:	4605      	mov	r5, r0
 8011400:	4608      	mov	r0, r1
 8011402:	6023      	str	r3, [r4, #0]
 8011404:	f003 fa94 	bl	8014930 <_sbrk>
 8011408:	1c43      	adds	r3, r0, #1
 801140a:	d102      	bne.n	8011412 <_sbrk_r+0x1a>
 801140c:	6823      	ldr	r3, [r4, #0]
 801140e:	b103      	cbz	r3, 8011412 <_sbrk_r+0x1a>
 8011410:	602b      	str	r3, [r5, #0]
 8011412:	bd38      	pop	{r3, r4, r5, pc}
 8011414:	20015e94 	.word	0x20015e94

08011418 <nanf>:
 8011418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011420 <nanf+0x8>
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop
 8011420:	7fc00000 	.word	0x7fc00000

08011424 <_raise_r>:
 8011424:	291f      	cmp	r1, #31
 8011426:	b538      	push	{r3, r4, r5, lr}
 8011428:	4604      	mov	r4, r0
 801142a:	460d      	mov	r5, r1
 801142c:	d904      	bls.n	8011438 <_raise_r+0x14>
 801142e:	2316      	movs	r3, #22
 8011430:	6003      	str	r3, [r0, #0]
 8011432:	f04f 30ff 	mov.w	r0, #4294967295
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801143a:	b112      	cbz	r2, 8011442 <_raise_r+0x1e>
 801143c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011440:	b94b      	cbnz	r3, 8011456 <_raise_r+0x32>
 8011442:	4620      	mov	r0, r4
 8011444:	f000 f830 	bl	80114a8 <_getpid_r>
 8011448:	462a      	mov	r2, r5
 801144a:	4601      	mov	r1, r0
 801144c:	4620      	mov	r0, r4
 801144e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011452:	f000 b817 	b.w	8011484 <_kill_r>
 8011456:	2b01      	cmp	r3, #1
 8011458:	d00a      	beq.n	8011470 <_raise_r+0x4c>
 801145a:	1c59      	adds	r1, r3, #1
 801145c:	d103      	bne.n	8011466 <_raise_r+0x42>
 801145e:	2316      	movs	r3, #22
 8011460:	6003      	str	r3, [r0, #0]
 8011462:	2001      	movs	r0, #1
 8011464:	e7e7      	b.n	8011436 <_raise_r+0x12>
 8011466:	2400      	movs	r4, #0
 8011468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801146c:	4628      	mov	r0, r5
 801146e:	4798      	blx	r3
 8011470:	2000      	movs	r0, #0
 8011472:	e7e0      	b.n	8011436 <_raise_r+0x12>

08011474 <raise>:
 8011474:	4b02      	ldr	r3, [pc, #8]	; (8011480 <raise+0xc>)
 8011476:	4601      	mov	r1, r0
 8011478:	6818      	ldr	r0, [r3, #0]
 801147a:	f7ff bfd3 	b.w	8011424 <_raise_r>
 801147e:	bf00      	nop
 8011480:	20000378 	.word	0x20000378

08011484 <_kill_r>:
 8011484:	b538      	push	{r3, r4, r5, lr}
 8011486:	4c07      	ldr	r4, [pc, #28]	; (80114a4 <_kill_r+0x20>)
 8011488:	2300      	movs	r3, #0
 801148a:	4605      	mov	r5, r0
 801148c:	4608      	mov	r0, r1
 801148e:	4611      	mov	r1, r2
 8011490:	6023      	str	r3, [r4, #0]
 8011492:	f003 fa35 	bl	8014900 <_kill>
 8011496:	1c43      	adds	r3, r0, #1
 8011498:	d102      	bne.n	80114a0 <_kill_r+0x1c>
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	b103      	cbz	r3, 80114a0 <_kill_r+0x1c>
 801149e:	602b      	str	r3, [r5, #0]
 80114a0:	bd38      	pop	{r3, r4, r5, pc}
 80114a2:	bf00      	nop
 80114a4:	20015e94 	.word	0x20015e94

080114a8 <_getpid_r>:
 80114a8:	f003 ba1a 	b.w	80148e0 <_getpid>

080114ac <siprintf>:
 80114ac:	b40e      	push	{r1, r2, r3}
 80114ae:	b500      	push	{lr}
 80114b0:	b09c      	sub	sp, #112	; 0x70
 80114b2:	ab1d      	add	r3, sp, #116	; 0x74
 80114b4:	9002      	str	r0, [sp, #8]
 80114b6:	9006      	str	r0, [sp, #24]
 80114b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114bc:	4809      	ldr	r0, [pc, #36]	; (80114e4 <siprintf+0x38>)
 80114be:	9107      	str	r1, [sp, #28]
 80114c0:	9104      	str	r1, [sp, #16]
 80114c2:	4909      	ldr	r1, [pc, #36]	; (80114e8 <siprintf+0x3c>)
 80114c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80114c8:	9105      	str	r1, [sp, #20]
 80114ca:	6800      	ldr	r0, [r0, #0]
 80114cc:	9301      	str	r3, [sp, #4]
 80114ce:	a902      	add	r1, sp, #8
 80114d0:	f002 feac 	bl	801422c <_svfiprintf_r>
 80114d4:	9b02      	ldr	r3, [sp, #8]
 80114d6:	2200      	movs	r2, #0
 80114d8:	701a      	strb	r2, [r3, #0]
 80114da:	b01c      	add	sp, #112	; 0x70
 80114dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80114e0:	b003      	add	sp, #12
 80114e2:	4770      	bx	lr
 80114e4:	20000378 	.word	0x20000378
 80114e8:	ffff0208 	.word	0xffff0208

080114ec <sulp>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	4604      	mov	r4, r0
 80114f0:	460d      	mov	r5, r1
 80114f2:	4616      	mov	r6, r2
 80114f4:	ec45 4b10 	vmov	d0, r4, r5
 80114f8:	f002 fd0a 	bl	8013f10 <__ulp>
 80114fc:	b17e      	cbz	r6, 801151e <sulp+0x32>
 80114fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011506:	2b00      	cmp	r3, #0
 8011508:	dd09      	ble.n	801151e <sulp+0x32>
 801150a:	051b      	lsls	r3, r3, #20
 801150c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011510:	2000      	movs	r0, #0
 8011512:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011516:	ec41 0b17 	vmov	d7, r0, r1
 801151a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801151e:	bd70      	pop	{r4, r5, r6, pc}

08011520 <_strtod_l>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	ed2d 8b0c 	vpush	{d8-d13}
 8011528:	4698      	mov	r8, r3
 801152a:	b09d      	sub	sp, #116	; 0x74
 801152c:	2300      	movs	r3, #0
 801152e:	4604      	mov	r4, r0
 8011530:	4640      	mov	r0, r8
 8011532:	460e      	mov	r6, r1
 8011534:	9214      	str	r2, [sp, #80]	; 0x50
 8011536:	9318      	str	r3, [sp, #96]	; 0x60
 8011538:	f002 f995 	bl	8013866 <__localeconv_l>
 801153c:	4681      	mov	r9, r0
 801153e:	6800      	ldr	r0, [r0, #0]
 8011540:	f7ee fe7e 	bl	8000240 <strlen>
 8011544:	f04f 0a00 	mov.w	sl, #0
 8011548:	4607      	mov	r7, r0
 801154a:	f04f 0b00 	mov.w	fp, #0
 801154e:	9617      	str	r6, [sp, #92]	; 0x5c
 8011550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011552:	781a      	ldrb	r2, [r3, #0]
 8011554:	2a0d      	cmp	r2, #13
 8011556:	d834      	bhi.n	80115c2 <_strtod_l+0xa2>
 8011558:	2a09      	cmp	r2, #9
 801155a:	d238      	bcs.n	80115ce <_strtod_l+0xae>
 801155c:	2a00      	cmp	r2, #0
 801155e:	d040      	beq.n	80115e2 <_strtod_l+0xc2>
 8011560:	2300      	movs	r3, #0
 8011562:	930d      	str	r3, [sp, #52]	; 0x34
 8011564:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011566:	782b      	ldrb	r3, [r5, #0]
 8011568:	2b30      	cmp	r3, #48	; 0x30
 801156a:	f040 80b3 	bne.w	80116d4 <_strtod_l+0x1b4>
 801156e:	786b      	ldrb	r3, [r5, #1]
 8011570:	2b58      	cmp	r3, #88	; 0x58
 8011572:	d001      	beq.n	8011578 <_strtod_l+0x58>
 8011574:	2b78      	cmp	r3, #120	; 0x78
 8011576:	d169      	bne.n	801164c <_strtod_l+0x12c>
 8011578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801157a:	9301      	str	r3, [sp, #4]
 801157c:	ab18      	add	r3, sp, #96	; 0x60
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	f8cd 8008 	str.w	r8, [sp, #8]
 8011584:	ab19      	add	r3, sp, #100	; 0x64
 8011586:	4a8f      	ldr	r2, [pc, #572]	; (80117c4 <_strtod_l+0x2a4>)
 8011588:	a917      	add	r1, sp, #92	; 0x5c
 801158a:	4620      	mov	r0, r4
 801158c:	f001 fe91 	bl	80132b2 <__gethex>
 8011590:	f010 0607 	ands.w	r6, r0, #7
 8011594:	4607      	mov	r7, r0
 8011596:	d005      	beq.n	80115a4 <_strtod_l+0x84>
 8011598:	2e06      	cmp	r6, #6
 801159a:	d12c      	bne.n	80115f6 <_strtod_l+0xd6>
 801159c:	3501      	adds	r5, #1
 801159e:	2300      	movs	r3, #0
 80115a0:	9517      	str	r5, [sp, #92]	; 0x5c
 80115a2:	930d      	str	r3, [sp, #52]	; 0x34
 80115a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f040 855e 	bne.w	8012068 <_strtod_l+0xb48>
 80115ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115ae:	b1eb      	cbz	r3, 80115ec <_strtod_l+0xcc>
 80115b0:	ec4b ab17 	vmov	d7, sl, fp
 80115b4:	eeb1 0b47 	vneg.f64	d0, d7
 80115b8:	b01d      	add	sp, #116	; 0x74
 80115ba:	ecbd 8b0c 	vpop	{d8-d13}
 80115be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c2:	2a2b      	cmp	r2, #43	; 0x2b
 80115c4:	d015      	beq.n	80115f2 <_strtod_l+0xd2>
 80115c6:	2a2d      	cmp	r2, #45	; 0x2d
 80115c8:	d004      	beq.n	80115d4 <_strtod_l+0xb4>
 80115ca:	2a20      	cmp	r2, #32
 80115cc:	d1c8      	bne.n	8011560 <_strtod_l+0x40>
 80115ce:	3301      	adds	r3, #1
 80115d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80115d2:	e7bd      	b.n	8011550 <_strtod_l+0x30>
 80115d4:	2201      	movs	r2, #1
 80115d6:	920d      	str	r2, [sp, #52]	; 0x34
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	9217      	str	r2, [sp, #92]	; 0x5c
 80115dc:	785b      	ldrb	r3, [r3, #1]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d1c0      	bne.n	8011564 <_strtod_l+0x44>
 80115e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f040 853c 	bne.w	8012064 <_strtod_l+0xb44>
 80115ec:	ec4b ab10 	vmov	d0, sl, fp
 80115f0:	e7e2      	b.n	80115b8 <_strtod_l+0x98>
 80115f2:	2200      	movs	r2, #0
 80115f4:	e7ef      	b.n	80115d6 <_strtod_l+0xb6>
 80115f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80115f8:	b13a      	cbz	r2, 801160a <_strtod_l+0xea>
 80115fa:	2135      	movs	r1, #53	; 0x35
 80115fc:	a81a      	add	r0, sp, #104	; 0x68
 80115fe:	f002 fd80 	bl	8014102 <__copybits>
 8011602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011604:	4620      	mov	r0, r4
 8011606:	f002 f9eb 	bl	80139e0 <_Bfree>
 801160a:	3e01      	subs	r6, #1
 801160c:	2e04      	cmp	r6, #4
 801160e:	d806      	bhi.n	801161e <_strtod_l+0xfe>
 8011610:	e8df f006 	tbb	[pc, r6]
 8011614:	1714030a 	.word	0x1714030a
 8011618:	0a          	.byte	0x0a
 8011619:	00          	.byte	0x00
 801161a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801161e:	073b      	lsls	r3, r7, #28
 8011620:	d5c0      	bpl.n	80115a4 <_strtod_l+0x84>
 8011622:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011626:	e7bd      	b.n	80115a4 <_strtod_l+0x84>
 8011628:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801162c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801162e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011632:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011636:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801163a:	e7f0      	b.n	801161e <_strtod_l+0xfe>
 801163c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80117c8 <_strtod_l+0x2a8>
 8011640:	e7ed      	b.n	801161e <_strtod_l+0xfe>
 8011642:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011646:	f04f 3aff 	mov.w	sl, #4294967295
 801164a:	e7e8      	b.n	801161e <_strtod_l+0xfe>
 801164c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	9217      	str	r2, [sp, #92]	; 0x5c
 8011652:	785b      	ldrb	r3, [r3, #1]
 8011654:	2b30      	cmp	r3, #48	; 0x30
 8011656:	d0f9      	beq.n	801164c <_strtod_l+0x12c>
 8011658:	2b00      	cmp	r3, #0
 801165a:	d0a3      	beq.n	80115a4 <_strtod_l+0x84>
 801165c:	2301      	movs	r3, #1
 801165e:	930a      	str	r3, [sp, #40]	; 0x28
 8011660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011662:	930c      	str	r3, [sp, #48]	; 0x30
 8011664:	2300      	movs	r3, #0
 8011666:	9306      	str	r3, [sp, #24]
 8011668:	9308      	str	r3, [sp, #32]
 801166a:	461d      	mov	r5, r3
 801166c:	220a      	movs	r2, #10
 801166e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011670:	f890 8000 	ldrb.w	r8, [r0]
 8011674:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011678:	b2d9      	uxtb	r1, r3
 801167a:	2909      	cmp	r1, #9
 801167c:	d92c      	bls.n	80116d8 <_strtod_l+0x1b8>
 801167e:	463a      	mov	r2, r7
 8011680:	f8d9 1000 	ldr.w	r1, [r9]
 8011684:	f003 f84d 	bl	8014722 <strncmp>
 8011688:	2800      	cmp	r0, #0
 801168a:	d035      	beq.n	80116f8 <_strtod_l+0x1d8>
 801168c:	2000      	movs	r0, #0
 801168e:	4642      	mov	r2, r8
 8011690:	462b      	mov	r3, r5
 8011692:	4601      	mov	r1, r0
 8011694:	9004      	str	r0, [sp, #16]
 8011696:	2a65      	cmp	r2, #101	; 0x65
 8011698:	d001      	beq.n	801169e <_strtod_l+0x17e>
 801169a:	2a45      	cmp	r2, #69	; 0x45
 801169c:	d117      	bne.n	80116ce <_strtod_l+0x1ae>
 801169e:	b923      	cbnz	r3, 80116aa <_strtod_l+0x18a>
 80116a0:	b910      	cbnz	r0, 80116a8 <_strtod_l+0x188>
 80116a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d09c      	beq.n	80115e2 <_strtod_l+0xc2>
 80116a8:	2300      	movs	r3, #0
 80116aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80116ac:	1c72      	adds	r2, r6, #1
 80116ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80116b0:	7872      	ldrb	r2, [r6, #1]
 80116b2:	2a2b      	cmp	r2, #43	; 0x2b
 80116b4:	f000 8082 	beq.w	80117bc <_strtod_l+0x29c>
 80116b8:	2a2d      	cmp	r2, #45	; 0x2d
 80116ba:	d079      	beq.n	80117b0 <_strtod_l+0x290>
 80116bc:	f04f 0e00 	mov.w	lr, #0
 80116c0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80116c4:	f1bc 0f09 	cmp.w	ip, #9
 80116c8:	f240 8086 	bls.w	80117d8 <_strtod_l+0x2b8>
 80116cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80116ce:	f04f 0800 	mov.w	r8, #0
 80116d2:	e0a8      	b.n	8011826 <_strtod_l+0x306>
 80116d4:	2300      	movs	r3, #0
 80116d6:	e7c2      	b.n	801165e <_strtod_l+0x13e>
 80116d8:	2d08      	cmp	r5, #8
 80116da:	bfd5      	itete	le
 80116dc:	9908      	ldrle	r1, [sp, #32]
 80116de:	9906      	ldrgt	r1, [sp, #24]
 80116e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80116e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80116e8:	f100 0001 	add.w	r0, r0, #1
 80116ec:	bfd4      	ite	le
 80116ee:	9308      	strle	r3, [sp, #32]
 80116f0:	9306      	strgt	r3, [sp, #24]
 80116f2:	3501      	adds	r5, #1
 80116f4:	9017      	str	r0, [sp, #92]	; 0x5c
 80116f6:	e7ba      	b.n	801166e <_strtod_l+0x14e>
 80116f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116fa:	19da      	adds	r2, r3, r7
 80116fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80116fe:	5dda      	ldrb	r2, [r3, r7]
 8011700:	2d00      	cmp	r5, #0
 8011702:	d038      	beq.n	8011776 <_strtod_l+0x256>
 8011704:	4601      	mov	r1, r0
 8011706:	462b      	mov	r3, r5
 8011708:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801170c:	2f09      	cmp	r7, #9
 801170e:	d913      	bls.n	8011738 <_strtod_l+0x218>
 8011710:	2701      	movs	r7, #1
 8011712:	9704      	str	r7, [sp, #16]
 8011714:	e7bf      	b.n	8011696 <_strtod_l+0x176>
 8011716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011718:	1c5a      	adds	r2, r3, #1
 801171a:	9217      	str	r2, [sp, #92]	; 0x5c
 801171c:	785a      	ldrb	r2, [r3, #1]
 801171e:	3001      	adds	r0, #1
 8011720:	2a30      	cmp	r2, #48	; 0x30
 8011722:	d0f8      	beq.n	8011716 <_strtod_l+0x1f6>
 8011724:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011728:	2b08      	cmp	r3, #8
 801172a:	f200 84a2 	bhi.w	8012072 <_strtod_l+0xb52>
 801172e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011730:	930c      	str	r3, [sp, #48]	; 0x30
 8011732:	4601      	mov	r1, r0
 8011734:	2000      	movs	r0, #0
 8011736:	4603      	mov	r3, r0
 8011738:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801173c:	f100 0701 	add.w	r7, r0, #1
 8011740:	d013      	beq.n	801176a <_strtod_l+0x24a>
 8011742:	4439      	add	r1, r7
 8011744:	eb00 0e03 	add.w	lr, r0, r3
 8011748:	461f      	mov	r7, r3
 801174a:	f04f 0c0a 	mov.w	ip, #10
 801174e:	45be      	cmp	lr, r7
 8011750:	d113      	bne.n	801177a <_strtod_l+0x25a>
 8011752:	181f      	adds	r7, r3, r0
 8011754:	2f08      	cmp	r7, #8
 8011756:	f103 0301 	add.w	r3, r3, #1
 801175a:	4403      	add	r3, r0
 801175c:	dc1d      	bgt.n	801179a <_strtod_l+0x27a>
 801175e:	9a08      	ldr	r2, [sp, #32]
 8011760:	200a      	movs	r0, #10
 8011762:	fb00 8202 	mla	r2, r0, r2, r8
 8011766:	9208      	str	r2, [sp, #32]
 8011768:	2700      	movs	r7, #0
 801176a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801176c:	1c50      	adds	r0, r2, #1
 801176e:	9017      	str	r0, [sp, #92]	; 0x5c
 8011770:	7852      	ldrb	r2, [r2, #1]
 8011772:	4638      	mov	r0, r7
 8011774:	e7c8      	b.n	8011708 <_strtod_l+0x1e8>
 8011776:	4628      	mov	r0, r5
 8011778:	e7d2      	b.n	8011720 <_strtod_l+0x200>
 801177a:	2f08      	cmp	r7, #8
 801177c:	f107 0701 	add.w	r7, r7, #1
 8011780:	dc04      	bgt.n	801178c <_strtod_l+0x26c>
 8011782:	9a08      	ldr	r2, [sp, #32]
 8011784:	fb0c f202 	mul.w	r2, ip, r2
 8011788:	9208      	str	r2, [sp, #32]
 801178a:	e7e0      	b.n	801174e <_strtod_l+0x22e>
 801178c:	2f10      	cmp	r7, #16
 801178e:	bfde      	ittt	le
 8011790:	9a06      	ldrle	r2, [sp, #24]
 8011792:	fb0c f202 	mulle.w	r2, ip, r2
 8011796:	9206      	strle	r2, [sp, #24]
 8011798:	e7d9      	b.n	801174e <_strtod_l+0x22e>
 801179a:	2b10      	cmp	r3, #16
 801179c:	bfdf      	itttt	le
 801179e:	9a06      	ldrle	r2, [sp, #24]
 80117a0:	200a      	movle	r0, #10
 80117a2:	fb00 8202 	mlale	r2, r0, r2, r8
 80117a6:	9206      	strle	r2, [sp, #24]
 80117a8:	e7de      	b.n	8011768 <_strtod_l+0x248>
 80117aa:	2301      	movs	r3, #1
 80117ac:	9304      	str	r3, [sp, #16]
 80117ae:	e777      	b.n	80116a0 <_strtod_l+0x180>
 80117b0:	f04f 0e01 	mov.w	lr, #1
 80117b4:	1cb2      	adds	r2, r6, #2
 80117b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80117b8:	78b2      	ldrb	r2, [r6, #2]
 80117ba:	e781      	b.n	80116c0 <_strtod_l+0x1a0>
 80117bc:	f04f 0e00 	mov.w	lr, #0
 80117c0:	e7f8      	b.n	80117b4 <_strtod_l+0x294>
 80117c2:	bf00      	nop
 80117c4:	08015018 	.word	0x08015018
 80117c8:	7ff00000 	.word	0x7ff00000
 80117cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80117ce:	f102 0c01 	add.w	ip, r2, #1
 80117d2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80117d6:	7852      	ldrb	r2, [r2, #1]
 80117d8:	2a30      	cmp	r2, #48	; 0x30
 80117da:	d0f7      	beq.n	80117cc <_strtod_l+0x2ac>
 80117dc:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80117e0:	f1bc 0f08 	cmp.w	ip, #8
 80117e4:	f63f af73 	bhi.w	80116ce <_strtod_l+0x1ae>
 80117e8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80117ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80117ee:	920e      	str	r2, [sp, #56]	; 0x38
 80117f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80117f2:	f102 0c01 	add.w	ip, r2, #1
 80117f6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80117fa:	7852      	ldrb	r2, [r2, #1]
 80117fc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011800:	f1b9 0f09 	cmp.w	r9, #9
 8011804:	d939      	bls.n	801187a <_strtod_l+0x35a>
 8011806:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011808:	ebac 0c07 	sub.w	ip, ip, r7
 801180c:	f1bc 0f08 	cmp.w	ip, #8
 8011810:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011814:	dc37      	bgt.n	8011886 <_strtod_l+0x366>
 8011816:	45e0      	cmp	r8, ip
 8011818:	bfa8      	it	ge
 801181a:	46e0      	movge	r8, ip
 801181c:	f1be 0f00 	cmp.w	lr, #0
 8011820:	d001      	beq.n	8011826 <_strtod_l+0x306>
 8011822:	f1c8 0800 	rsb	r8, r8, #0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d151      	bne.n	80118ce <_strtod_l+0x3ae>
 801182a:	2800      	cmp	r0, #0
 801182c:	f47f aeba 	bne.w	80115a4 <_strtod_l+0x84>
 8011830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011832:	2b00      	cmp	r3, #0
 8011834:	f47f aeb6 	bne.w	80115a4 <_strtod_l+0x84>
 8011838:	9b04      	ldr	r3, [sp, #16]
 801183a:	2b00      	cmp	r3, #0
 801183c:	f47f aed1 	bne.w	80115e2 <_strtod_l+0xc2>
 8011840:	2a4e      	cmp	r2, #78	; 0x4e
 8011842:	d027      	beq.n	8011894 <_strtod_l+0x374>
 8011844:	dc21      	bgt.n	801188a <_strtod_l+0x36a>
 8011846:	2a49      	cmp	r2, #73	; 0x49
 8011848:	f47f aecb 	bne.w	80115e2 <_strtod_l+0xc2>
 801184c:	499a      	ldr	r1, [pc, #616]	; (8011ab8 <_strtod_l+0x598>)
 801184e:	a817      	add	r0, sp, #92	; 0x5c
 8011850:	f001 ff62 	bl	8013718 <__match>
 8011854:	2800      	cmp	r0, #0
 8011856:	f43f aec4 	beq.w	80115e2 <_strtod_l+0xc2>
 801185a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801185c:	4997      	ldr	r1, [pc, #604]	; (8011abc <_strtod_l+0x59c>)
 801185e:	3b01      	subs	r3, #1
 8011860:	a817      	add	r0, sp, #92	; 0x5c
 8011862:	9317      	str	r3, [sp, #92]	; 0x5c
 8011864:	f001 ff58 	bl	8013718 <__match>
 8011868:	b910      	cbnz	r0, 8011870 <_strtod_l+0x350>
 801186a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801186c:	3301      	adds	r3, #1
 801186e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011870:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011ad4 <_strtod_l+0x5b4>
 8011874:	f04f 0a00 	mov.w	sl, #0
 8011878:	e694      	b.n	80115a4 <_strtod_l+0x84>
 801187a:	270a      	movs	r7, #10
 801187c:	fb07 2808 	mla	r8, r7, r8, r2
 8011880:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011884:	e7b4      	b.n	80117f0 <_strtod_l+0x2d0>
 8011886:	46e0      	mov	r8, ip
 8011888:	e7c8      	b.n	801181c <_strtod_l+0x2fc>
 801188a:	2a69      	cmp	r2, #105	; 0x69
 801188c:	d0de      	beq.n	801184c <_strtod_l+0x32c>
 801188e:	2a6e      	cmp	r2, #110	; 0x6e
 8011890:	f47f aea7 	bne.w	80115e2 <_strtod_l+0xc2>
 8011894:	498a      	ldr	r1, [pc, #552]	; (8011ac0 <_strtod_l+0x5a0>)
 8011896:	a817      	add	r0, sp, #92	; 0x5c
 8011898:	f001 ff3e 	bl	8013718 <__match>
 801189c:	2800      	cmp	r0, #0
 801189e:	f43f aea0 	beq.w	80115e2 <_strtod_l+0xc2>
 80118a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	2b28      	cmp	r3, #40	; 0x28
 80118a8:	d10e      	bne.n	80118c8 <_strtod_l+0x3a8>
 80118aa:	aa1a      	add	r2, sp, #104	; 0x68
 80118ac:	4985      	ldr	r1, [pc, #532]	; (8011ac4 <_strtod_l+0x5a4>)
 80118ae:	a817      	add	r0, sp, #92	; 0x5c
 80118b0:	f001 ff46 	bl	8013740 <__hexnan>
 80118b4:	2805      	cmp	r0, #5
 80118b6:	d107      	bne.n	80118c8 <_strtod_l+0x3a8>
 80118b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80118be:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80118c2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80118c6:	e66d      	b.n	80115a4 <_strtod_l+0x84>
 80118c8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011ad8 <_strtod_l+0x5b8>
 80118cc:	e7d2      	b.n	8011874 <_strtod_l+0x354>
 80118ce:	eddd 7a08 	vldr	s15, [sp, #32]
 80118d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80118d6:	eba8 0201 	sub.w	r2, r8, r1
 80118da:	2d00      	cmp	r5, #0
 80118dc:	bf08      	it	eq
 80118de:	461d      	moveq	r5, r3
 80118e0:	2b10      	cmp	r3, #16
 80118e2:	9204      	str	r2, [sp, #16]
 80118e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80118e8:	461a      	mov	r2, r3
 80118ea:	bfa8      	it	ge
 80118ec:	2210      	movge	r2, #16
 80118ee:	2b09      	cmp	r3, #9
 80118f0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80118f4:	dc14      	bgt.n	8011920 <_strtod_l+0x400>
 80118f6:	9904      	ldr	r1, [sp, #16]
 80118f8:	2900      	cmp	r1, #0
 80118fa:	f43f ae53 	beq.w	80115a4 <_strtod_l+0x84>
 80118fe:	9904      	ldr	r1, [sp, #16]
 8011900:	dd72      	ble.n	80119e8 <_strtod_l+0x4c8>
 8011902:	2916      	cmp	r1, #22
 8011904:	dc5a      	bgt.n	80119bc <_strtod_l+0x49c>
 8011906:	4970      	ldr	r1, [pc, #448]	; (8011ac8 <_strtod_l+0x5a8>)
 8011908:	9b04      	ldr	r3, [sp, #16]
 801190a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801190e:	ed91 7b00 	vldr	d7, [r1]
 8011912:	ec4b ab16 	vmov	d6, sl, fp
 8011916:	ee27 7b06 	vmul.f64	d7, d7, d6
 801191a:	ec5b ab17 	vmov	sl, fp, d7
 801191e:	e641      	b.n	80115a4 <_strtod_l+0x84>
 8011920:	4969      	ldr	r1, [pc, #420]	; (8011ac8 <_strtod_l+0x5a8>)
 8011922:	eddd 7a06 	vldr	s15, [sp, #24]
 8011926:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801192a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801192e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011932:	2b0f      	cmp	r3, #15
 8011934:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011938:	eea5 7b06 	vfma.f64	d7, d5, d6
 801193c:	ec5b ab17 	vmov	sl, fp, d7
 8011940:	ddd9      	ble.n	80118f6 <_strtod_l+0x3d6>
 8011942:	9904      	ldr	r1, [sp, #16]
 8011944:	1a9a      	subs	r2, r3, r2
 8011946:	440a      	add	r2, r1
 8011948:	2a00      	cmp	r2, #0
 801194a:	f340 8096 	ble.w	8011a7a <_strtod_l+0x55a>
 801194e:	f012 000f 	ands.w	r0, r2, #15
 8011952:	d00a      	beq.n	801196a <_strtod_l+0x44a>
 8011954:	495c      	ldr	r1, [pc, #368]	; (8011ac8 <_strtod_l+0x5a8>)
 8011956:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801195a:	ed91 7b00 	vldr	d7, [r1]
 801195e:	ec4b ab16 	vmov	d6, sl, fp
 8011962:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011966:	ec5b ab17 	vmov	sl, fp, d7
 801196a:	f032 020f 	bics.w	r2, r2, #15
 801196e:	d072      	beq.n	8011a56 <_strtod_l+0x536>
 8011970:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011974:	dd45      	ble.n	8011a02 <_strtod_l+0x4e2>
 8011976:	2500      	movs	r5, #0
 8011978:	46a8      	mov	r8, r5
 801197a:	9506      	str	r5, [sp, #24]
 801197c:	46a9      	mov	r9, r5
 801197e:	2322      	movs	r3, #34	; 0x22
 8011980:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011ad4 <_strtod_l+0x5b4>
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	f04f 0a00 	mov.w	sl, #0
 801198a:	9b06      	ldr	r3, [sp, #24]
 801198c:	2b00      	cmp	r3, #0
 801198e:	f43f ae09 	beq.w	80115a4 <_strtod_l+0x84>
 8011992:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011994:	4620      	mov	r0, r4
 8011996:	f002 f823 	bl	80139e0 <_Bfree>
 801199a:	4649      	mov	r1, r9
 801199c:	4620      	mov	r0, r4
 801199e:	f002 f81f 	bl	80139e0 <_Bfree>
 80119a2:	4641      	mov	r1, r8
 80119a4:	4620      	mov	r0, r4
 80119a6:	f002 f81b 	bl	80139e0 <_Bfree>
 80119aa:	9906      	ldr	r1, [sp, #24]
 80119ac:	4620      	mov	r0, r4
 80119ae:	f002 f817 	bl	80139e0 <_Bfree>
 80119b2:	4629      	mov	r1, r5
 80119b4:	4620      	mov	r0, r4
 80119b6:	f002 f813 	bl	80139e0 <_Bfree>
 80119ba:	e5f3      	b.n	80115a4 <_strtod_l+0x84>
 80119bc:	9804      	ldr	r0, [sp, #16]
 80119be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80119c2:	4281      	cmp	r1, r0
 80119c4:	dbbd      	blt.n	8011942 <_strtod_l+0x422>
 80119c6:	4a40      	ldr	r2, [pc, #256]	; (8011ac8 <_strtod_l+0x5a8>)
 80119c8:	f1c3 030f 	rsb	r3, r3, #15
 80119cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80119d0:	ed91 7b00 	vldr	d7, [r1]
 80119d4:	ec4b ab16 	vmov	d6, sl, fp
 80119d8:	1ac3      	subs	r3, r0, r3
 80119da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80119de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119e2:	ed92 6b00 	vldr	d6, [r2]
 80119e6:	e796      	b.n	8011916 <_strtod_l+0x3f6>
 80119e8:	3116      	adds	r1, #22
 80119ea:	dbaa      	blt.n	8011942 <_strtod_l+0x422>
 80119ec:	4936      	ldr	r1, [pc, #216]	; (8011ac8 <_strtod_l+0x5a8>)
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80119f4:	ed91 7b00 	vldr	d7, [r1]
 80119f8:	ec4b ab16 	vmov	d6, sl, fp
 80119fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a00:	e78b      	b.n	801191a <_strtod_l+0x3fa>
 8011a02:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011a06:	2000      	movs	r0, #0
 8011a08:	4e30      	ldr	r6, [pc, #192]	; (8011acc <_strtod_l+0x5ac>)
 8011a0a:	1112      	asrs	r2, r2, #4
 8011a0c:	4601      	mov	r1, r0
 8011a0e:	2a01      	cmp	r2, #1
 8011a10:	dc23      	bgt.n	8011a5a <_strtod_l+0x53a>
 8011a12:	b108      	cbz	r0, 8011a18 <_strtod_l+0x4f8>
 8011a14:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011a18:	4a2c      	ldr	r2, [pc, #176]	; (8011acc <_strtod_l+0x5ac>)
 8011a1a:	482d      	ldr	r0, [pc, #180]	; (8011ad0 <_strtod_l+0x5b0>)
 8011a1c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011a20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011a24:	ed91 7b00 	vldr	d7, [r1]
 8011a28:	ec4b ab16 	vmov	d6, sl, fp
 8011a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a30:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a34:	9907      	ldr	r1, [sp, #28]
 8011a36:	4a27      	ldr	r2, [pc, #156]	; (8011ad4 <_strtod_l+0x5b4>)
 8011a38:	400a      	ands	r2, r1
 8011a3a:	4282      	cmp	r2, r0
 8011a3c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011a40:	d899      	bhi.n	8011976 <_strtod_l+0x456>
 8011a42:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011a46:	4282      	cmp	r2, r0
 8011a48:	bf86      	itte	hi
 8011a4a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8011adc <_strtod_l+0x5bc>
 8011a4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011a52:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8011a56:	2700      	movs	r7, #0
 8011a58:	e070      	b.n	8011b3c <_strtod_l+0x61c>
 8011a5a:	07d7      	lsls	r7, r2, #31
 8011a5c:	d50a      	bpl.n	8011a74 <_strtod_l+0x554>
 8011a5e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8011a62:	ed90 7b00 	vldr	d7, [r0]
 8011a66:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011a6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011a6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a72:	2001      	movs	r0, #1
 8011a74:	3101      	adds	r1, #1
 8011a76:	1052      	asrs	r2, r2, #1
 8011a78:	e7c9      	b.n	8011a0e <_strtod_l+0x4ee>
 8011a7a:	d0ec      	beq.n	8011a56 <_strtod_l+0x536>
 8011a7c:	4252      	negs	r2, r2
 8011a7e:	f012 000f 	ands.w	r0, r2, #15
 8011a82:	d00a      	beq.n	8011a9a <_strtod_l+0x57a>
 8011a84:	4910      	ldr	r1, [pc, #64]	; (8011ac8 <_strtod_l+0x5a8>)
 8011a86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011a8a:	ed91 7b00 	vldr	d7, [r1]
 8011a8e:	ec4b ab16 	vmov	d6, sl, fp
 8011a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a96:	ec5b ab17 	vmov	sl, fp, d7
 8011a9a:	1112      	asrs	r2, r2, #4
 8011a9c:	d0db      	beq.n	8011a56 <_strtod_l+0x536>
 8011a9e:	2a1f      	cmp	r2, #31
 8011aa0:	dd1e      	ble.n	8011ae0 <_strtod_l+0x5c0>
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	46a8      	mov	r8, r5
 8011aa6:	9506      	str	r5, [sp, #24]
 8011aa8:	46a9      	mov	r9, r5
 8011aaa:	2322      	movs	r3, #34	; 0x22
 8011aac:	f04f 0a00 	mov.w	sl, #0
 8011ab0:	f04f 0b00 	mov.w	fp, #0
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	e768      	b.n	801198a <_strtod_l+0x46a>
 8011ab8:	08014fe1 	.word	0x08014fe1
 8011abc:	0801506b 	.word	0x0801506b
 8011ac0:	08014fe9 	.word	0x08014fe9
 8011ac4:	0801502c 	.word	0x0801502c
 8011ac8:	08015110 	.word	0x08015110
 8011acc:	080150e8 	.word	0x080150e8
 8011ad0:	7ca00000 	.word	0x7ca00000
 8011ad4:	7ff00000 	.word	0x7ff00000
 8011ad8:	fff80000 	.word	0xfff80000
 8011adc:	7fefffff 	.word	0x7fefffff
 8011ae0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011ae4:	f012 0710 	ands.w	r7, r2, #16
 8011ae8:	49ab      	ldr	r1, [pc, #684]	; (8011d98 <_strtod_l+0x878>)
 8011aea:	bf18      	it	ne
 8011aec:	276a      	movne	r7, #106	; 0x6a
 8011aee:	2000      	movs	r0, #0
 8011af0:	2a00      	cmp	r2, #0
 8011af2:	f300 8113 	bgt.w	8011d1c <_strtod_l+0x7fc>
 8011af6:	b108      	cbz	r0, 8011afc <_strtod_l+0x5dc>
 8011af8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011afc:	b1bf      	cbz	r7, 8011b2e <_strtod_l+0x60e>
 8011afe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011b02:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011b06:	2a00      	cmp	r2, #0
 8011b08:	4659      	mov	r1, fp
 8011b0a:	dd10      	ble.n	8011b2e <_strtod_l+0x60e>
 8011b0c:	2a1f      	cmp	r2, #31
 8011b0e:	f340 8113 	ble.w	8011d38 <_strtod_l+0x818>
 8011b12:	2a34      	cmp	r2, #52	; 0x34
 8011b14:	bfde      	ittt	le
 8011b16:	3a20      	suble	r2, #32
 8011b18:	f04f 30ff 	movle.w	r0, #4294967295
 8011b1c:	fa00 f202 	lslle.w	r2, r0, r2
 8011b20:	f04f 0a00 	mov.w	sl, #0
 8011b24:	bfcc      	ite	gt
 8011b26:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011b2a:	ea02 0b01 	andle.w	fp, r2, r1
 8011b2e:	ec4b ab17 	vmov	d7, sl, fp
 8011b32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3a:	d0b2      	beq.n	8011aa2 <_strtod_l+0x582>
 8011b3c:	9a08      	ldr	r2, [sp, #32]
 8011b3e:	9200      	str	r2, [sp, #0]
 8011b40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b42:	462a      	mov	r2, r5
 8011b44:	4620      	mov	r0, r4
 8011b46:	f001 ff9d 	bl	8013a84 <__s2b>
 8011b4a:	9006      	str	r0, [sp, #24]
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	f43f af12 	beq.w	8011976 <_strtod_l+0x456>
 8011b52:	9a04      	ldr	r2, [sp, #16]
 8011b54:	9b04      	ldr	r3, [sp, #16]
 8011b56:	2a00      	cmp	r2, #0
 8011b58:	f1c3 0300 	rsb	r3, r3, #0
 8011b5c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011d80 <_strtod_l+0x860>
 8011b60:	bfa8      	it	ge
 8011b62:	2300      	movge	r3, #0
 8011b64:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011d88 <_strtod_l+0x868>
 8011b68:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011d90 <_strtod_l+0x870>
 8011b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8011b6e:	2500      	movs	r5, #0
 8011b70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011b74:	9310      	str	r3, [sp, #64]	; 0x40
 8011b76:	46a8      	mov	r8, r5
 8011b78:	9b06      	ldr	r3, [sp, #24]
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	6859      	ldr	r1, [r3, #4]
 8011b7e:	f001 fefb 	bl	8013978 <_Balloc>
 8011b82:	4681      	mov	r9, r0
 8011b84:	2800      	cmp	r0, #0
 8011b86:	f43f aefa 	beq.w	801197e <_strtod_l+0x45e>
 8011b8a:	9b06      	ldr	r3, [sp, #24]
 8011b8c:	691a      	ldr	r2, [r3, #16]
 8011b8e:	3202      	adds	r2, #2
 8011b90:	f103 010c 	add.w	r1, r3, #12
 8011b94:	0092      	lsls	r2, r2, #2
 8011b96:	300c      	adds	r0, #12
 8011b98:	f7fe fcd4 	bl	8010544 <memcpy>
 8011b9c:	aa1a      	add	r2, sp, #104	; 0x68
 8011b9e:	a919      	add	r1, sp, #100	; 0x64
 8011ba0:	ec4b ab10 	vmov	d0, sl, fp
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011baa:	f002 fa27 	bl	8013ffc <__d2b>
 8011bae:	9018      	str	r0, [sp, #96]	; 0x60
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	f43f aee4 	beq.w	801197e <_strtod_l+0x45e>
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f001 ffef 	bl	8013b9c <__i2b>
 8011bbe:	4680      	mov	r8, r0
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f43f aedc 	beq.w	801197e <_strtod_l+0x45e>
 8011bc6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011bc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011bca:	2e00      	cmp	r6, #0
 8011bcc:	bfb1      	iteee	lt
 8011bce:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011bd0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011bd2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011bd4:	18f3      	addge	r3, r6, r3
 8011bd6:	bfba      	itte	lt
 8011bd8:	1b98      	sublt	r0, r3, r6
 8011bda:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011bdc:	9308      	strge	r3, [sp, #32]
 8011bde:	eba6 0607 	sub.w	r6, r6, r7
 8011be2:	bfb8      	it	lt
 8011be4:	9308      	strlt	r3, [sp, #32]
 8011be6:	4416      	add	r6, r2
 8011be8:	4b6c      	ldr	r3, [pc, #432]	; (8011d9c <_strtod_l+0x87c>)
 8011bea:	3e01      	subs	r6, #1
 8011bec:	429e      	cmp	r6, r3
 8011bee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011bf2:	f280 80b4 	bge.w	8011d5e <_strtod_l+0x83e>
 8011bf6:	1b9b      	subs	r3, r3, r6
 8011bf8:	2b1f      	cmp	r3, #31
 8011bfa:	eba2 0203 	sub.w	r2, r2, r3
 8011bfe:	f04f 0101 	mov.w	r1, #1
 8011c02:	f300 80a0 	bgt.w	8011d46 <_strtod_l+0x826>
 8011c06:	fa01 f303 	lsl.w	r3, r1, r3
 8011c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c10:	9b08      	ldr	r3, [sp, #32]
 8011c12:	4413      	add	r3, r2
 8011c14:	4402      	add	r2, r0
 8011c16:	18be      	adds	r6, r7, r2
 8011c18:	9a08      	ldr	r2, [sp, #32]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	bfa8      	it	ge
 8011c1e:	461a      	movge	r2, r3
 8011c20:	42b2      	cmp	r2, r6
 8011c22:	bfa8      	it	ge
 8011c24:	4632      	movge	r2, r6
 8011c26:	2a00      	cmp	r2, #0
 8011c28:	dd04      	ble.n	8011c34 <_strtod_l+0x714>
 8011c2a:	9908      	ldr	r1, [sp, #32]
 8011c2c:	1a9b      	subs	r3, r3, r2
 8011c2e:	1ab6      	subs	r6, r6, r2
 8011c30:	1a8a      	subs	r2, r1, r2
 8011c32:	9208      	str	r2, [sp, #32]
 8011c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c36:	b1c2      	cbz	r2, 8011c6a <_strtod_l+0x74a>
 8011c38:	4641      	mov	r1, r8
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	9315      	str	r3, [sp, #84]	; 0x54
 8011c3e:	f002 f84d 	bl	8013cdc <__pow5mult>
 8011c42:	4680      	mov	r8, r0
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f43f ae9a 	beq.w	801197e <_strtod_l+0x45e>
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f001 ffad 	bl	8013bae <__multiply>
 8011c54:	900c      	str	r0, [sp, #48]	; 0x30
 8011c56:	2800      	cmp	r0, #0
 8011c58:	f43f ae91 	beq.w	801197e <_strtod_l+0x45e>
 8011c5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f001 febe 	bl	80139e0 <_Bfree>
 8011c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c68:	9218      	str	r2, [sp, #96]	; 0x60
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	dc7c      	bgt.n	8011d68 <_strtod_l+0x848>
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	dd08      	ble.n	8011c86 <_strtod_l+0x766>
 8011c74:	4649      	mov	r1, r9
 8011c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f002 f82f 	bl	8013cdc <__pow5mult>
 8011c7e:	4681      	mov	r9, r0
 8011c80:	2800      	cmp	r0, #0
 8011c82:	f43f ae7c 	beq.w	801197e <_strtod_l+0x45e>
 8011c86:	2e00      	cmp	r6, #0
 8011c88:	dd08      	ble.n	8011c9c <_strtod_l+0x77c>
 8011c8a:	4649      	mov	r1, r9
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f002 f872 	bl	8013d78 <__lshift>
 8011c94:	4681      	mov	r9, r0
 8011c96:	2800      	cmp	r0, #0
 8011c98:	f43f ae71 	beq.w	801197e <_strtod_l+0x45e>
 8011c9c:	9b08      	ldr	r3, [sp, #32]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	dd08      	ble.n	8011cb4 <_strtod_l+0x794>
 8011ca2:	4641      	mov	r1, r8
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f002 f866 	bl	8013d78 <__lshift>
 8011cac:	4680      	mov	r8, r0
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f43f ae65 	beq.w	801197e <_strtod_l+0x45e>
 8011cb4:	464a      	mov	r2, r9
 8011cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f002 f8cb 	bl	8013e54 <__mdiff>
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	f43f ae5c 	beq.w	801197e <_strtod_l+0x45e>
 8011cc6:	68c3      	ldr	r3, [r0, #12]
 8011cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8011cca:	2300      	movs	r3, #0
 8011ccc:	60c3      	str	r3, [r0, #12]
 8011cce:	4641      	mov	r1, r8
 8011cd0:	f002 f8a6 	bl	8013e20 <__mcmp>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	da63      	bge.n	8011da0 <_strtod_l+0x880>
 8011cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cda:	b9e3      	cbnz	r3, 8011d16 <_strtod_l+0x7f6>
 8011cdc:	f1ba 0f00 	cmp.w	sl, #0
 8011ce0:	d119      	bne.n	8011d16 <_strtod_l+0x7f6>
 8011ce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ce6:	b9b3      	cbnz	r3, 8011d16 <_strtod_l+0x7f6>
 8011ce8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011cec:	0d1b      	lsrs	r3, r3, #20
 8011cee:	051b      	lsls	r3, r3, #20
 8011cf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011cf4:	d90f      	bls.n	8011d16 <_strtod_l+0x7f6>
 8011cf6:	696b      	ldr	r3, [r5, #20]
 8011cf8:	b913      	cbnz	r3, 8011d00 <_strtod_l+0x7e0>
 8011cfa:	692b      	ldr	r3, [r5, #16]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	dd0a      	ble.n	8011d16 <_strtod_l+0x7f6>
 8011d00:	4629      	mov	r1, r5
 8011d02:	2201      	movs	r2, #1
 8011d04:	4620      	mov	r0, r4
 8011d06:	f002 f837 	bl	8013d78 <__lshift>
 8011d0a:	4641      	mov	r1, r8
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	f002 f887 	bl	8013e20 <__mcmp>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	dc75      	bgt.n	8011e02 <_strtod_l+0x8e2>
 8011d16:	2f00      	cmp	r7, #0
 8011d18:	d17f      	bne.n	8011e1a <_strtod_l+0x8fa>
 8011d1a:	e63a      	b.n	8011992 <_strtod_l+0x472>
 8011d1c:	07d6      	lsls	r6, r2, #31
 8011d1e:	d508      	bpl.n	8011d32 <_strtod_l+0x812>
 8011d20:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011d24:	ed91 7b00 	vldr	d7, [r1]
 8011d28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011d30:	2001      	movs	r0, #1
 8011d32:	1052      	asrs	r2, r2, #1
 8011d34:	3108      	adds	r1, #8
 8011d36:	e6db      	b.n	8011af0 <_strtod_l+0x5d0>
 8011d38:	f04f 31ff 	mov.w	r1, #4294967295
 8011d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8011d40:	ea02 0a0a 	and.w	sl, r2, sl
 8011d44:	e6f3      	b.n	8011b2e <_strtod_l+0x60e>
 8011d46:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011d4a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011d4e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011d52:	36e2      	adds	r6, #226	; 0xe2
 8011d54:	fa01 f306 	lsl.w	r3, r1, r6
 8011d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d5a:	9111      	str	r1, [sp, #68]	; 0x44
 8011d5c:	e758      	b.n	8011c10 <_strtod_l+0x6f0>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d62:	2301      	movs	r3, #1
 8011d64:	9311      	str	r3, [sp, #68]	; 0x44
 8011d66:	e753      	b.n	8011c10 <_strtod_l+0x6f0>
 8011d68:	461a      	mov	r2, r3
 8011d6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f002 f803 	bl	8013d78 <__lshift>
 8011d72:	9018      	str	r0, [sp, #96]	; 0x60
 8011d74:	2800      	cmp	r0, #0
 8011d76:	f47f af7a 	bne.w	8011c6e <_strtod_l+0x74e>
 8011d7a:	e600      	b.n	801197e <_strtod_l+0x45e>
 8011d7c:	f3af 8000 	nop.w
 8011d80:	94a03595 	.word	0x94a03595
 8011d84:	3fdfffff 	.word	0x3fdfffff
 8011d88:	35afe535 	.word	0x35afe535
 8011d8c:	3fe00000 	.word	0x3fe00000
 8011d90:	94a03595 	.word	0x94a03595
 8011d94:	3fcfffff 	.word	0x3fcfffff
 8011d98:	08015040 	.word	0x08015040
 8011d9c:	fffffc02 	.word	0xfffffc02
 8011da0:	f8cd b020 	str.w	fp, [sp, #32]
 8011da4:	f040 8085 	bne.w	8011eb2 <_strtod_l+0x992>
 8011da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011daa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011dae:	b322      	cbz	r2, 8011dfa <_strtod_l+0x8da>
 8011db0:	4ab7      	ldr	r2, [pc, #732]	; (8012090 <_strtod_l+0xb70>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d154      	bne.n	8011e60 <_strtod_l+0x940>
 8011db6:	4651      	mov	r1, sl
 8011db8:	b1e7      	cbz	r7, 8011df4 <_strtod_l+0x8d4>
 8011dba:	4bb6      	ldr	r3, [pc, #728]	; (8012094 <_strtod_l+0xb74>)
 8011dbc:	465a      	mov	r2, fp
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc8:	d803      	bhi.n	8011dd2 <_strtod_l+0x8b2>
 8011dca:	0d1b      	lsrs	r3, r3, #20
 8011dcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011dd0:	409a      	lsls	r2, r3
 8011dd2:	4291      	cmp	r1, r2
 8011dd4:	d144      	bne.n	8011e60 <_strtod_l+0x940>
 8011dd6:	4bb0      	ldr	r3, [pc, #704]	; (8012098 <_strtod_l+0xb78>)
 8011dd8:	9a08      	ldr	r2, [sp, #32]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d102      	bne.n	8011de4 <_strtod_l+0x8c4>
 8011dde:	3101      	adds	r1, #1
 8011de0:	f43f adcd 	beq.w	801197e <_strtod_l+0x45e>
 8011de4:	4bab      	ldr	r3, [pc, #684]	; (8012094 <_strtod_l+0xb74>)
 8011de6:	9a08      	ldr	r2, [sp, #32]
 8011de8:	401a      	ands	r2, r3
 8011dea:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8011dee:	f04f 0a00 	mov.w	sl, #0
 8011df2:	e790      	b.n	8011d16 <_strtod_l+0x7f6>
 8011df4:	f04f 32ff 	mov.w	r2, #4294967295
 8011df8:	e7eb      	b.n	8011dd2 <_strtod_l+0x8b2>
 8011dfa:	bb8b      	cbnz	r3, 8011e60 <_strtod_l+0x940>
 8011dfc:	f1ba 0f00 	cmp.w	sl, #0
 8011e00:	d12e      	bne.n	8011e60 <_strtod_l+0x940>
 8011e02:	465b      	mov	r3, fp
 8011e04:	4aa3      	ldr	r2, [pc, #652]	; (8012094 <_strtod_l+0xb74>)
 8011e06:	b30f      	cbz	r7, 8011e4c <_strtod_l+0x92c>
 8011e08:	ea02 010b 	and.w	r1, r2, fp
 8011e0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e10:	dc1c      	bgt.n	8011e4c <_strtod_l+0x92c>
 8011e12:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011e16:	f77f ae48 	ble.w	8011aaa <_strtod_l+0x58a>
 8011e1a:	4aa0      	ldr	r2, [pc, #640]	; (801209c <_strtod_l+0xb7c>)
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8011e22:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8011e26:	ec4b ab17 	vmov	d7, sl, fp
 8011e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e2e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e32:	9b05      	ldr	r3, [sp, #20]
 8011e34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f47f adaa 	bne.w	8011992 <_strtod_l+0x472>
 8011e3e:	9b04      	ldr	r3, [sp, #16]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f47f ada6 	bne.w	8011992 <_strtod_l+0x472>
 8011e46:	2322      	movs	r3, #34	; 0x22
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	e5a2      	b.n	8011992 <_strtod_l+0x472>
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011e52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011e56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011e5a:	f04f 3aff 	mov.w	sl, #4294967295
 8011e5e:	e75a      	b.n	8011d16 <_strtod_l+0x7f6>
 8011e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e62:	b18b      	cbz	r3, 8011e88 <_strtod_l+0x968>
 8011e64:	9a08      	ldr	r2, [sp, #32]
 8011e66:	4213      	tst	r3, r2
 8011e68:	f43f af55 	beq.w	8011d16 <_strtod_l+0x7f6>
 8011e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e6e:	463a      	mov	r2, r7
 8011e70:	4650      	mov	r0, sl
 8011e72:	4659      	mov	r1, fp
 8011e74:	b163      	cbz	r3, 8011e90 <_strtod_l+0x970>
 8011e76:	f7ff fb39 	bl	80114ec <sulp>
 8011e7a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011e7e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011e82:	ec5b ab17 	vmov	sl, fp, d7
 8011e86:	e746      	b.n	8011d16 <_strtod_l+0x7f6>
 8011e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e8a:	ea13 0f0a 	tst.w	r3, sl
 8011e8e:	e7eb      	b.n	8011e68 <_strtod_l+0x948>
 8011e90:	f7ff fb2c 	bl	80114ec <sulp>
 8011e94:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011e98:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011e9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ea0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011eac:	f43f adfd 	beq.w	8011aaa <_strtod_l+0x58a>
 8011eb0:	e731      	b.n	8011d16 <_strtod_l+0x7f6>
 8011eb2:	4641      	mov	r1, r8
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f002 f8f0 	bl	801409a <__ratio>
 8011eba:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011ebe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec6:	d869      	bhi.n	8011f9c <_strtod_l+0xa7c>
 8011ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d045      	beq.n	8011f5a <_strtod_l+0xa3a>
 8011ece:	4b74      	ldr	r3, [pc, #464]	; (80120a0 <_strtod_l+0xb80>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011ed6:	9808      	ldr	r0, [sp, #32]
 8011ed8:	496e      	ldr	r1, [pc, #440]	; (8012094 <_strtod_l+0xb74>)
 8011eda:	ea00 0601 	and.w	r6, r0, r1
 8011ede:	4871      	ldr	r0, [pc, #452]	; (80120a4 <_strtod_l+0xb84>)
 8011ee0:	4286      	cmp	r6, r0
 8011ee2:	f040 8089 	bne.w	8011ff8 <_strtod_l+0xad8>
 8011ee6:	910f      	str	r1, [sp, #60]	; 0x3c
 8011ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011eec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011ef0:	9908      	ldr	r1, [sp, #32]
 8011ef2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011ef6:	ec4b ab10 	vmov	d0, sl, fp
 8011efa:	ec43 2b1c 	vmov	d12, r2, r3
 8011efe:	f002 f807 	bl	8013f10 <__ulp>
 8011f02:	ec4b ab1d 	vmov	d13, sl, fp
 8011f06:	eeac db00 	vfma.f64	d13, d12, d0
 8011f0a:	ed8d db08 	vstr	d13, [sp, #32]
 8011f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011f12:	4a65      	ldr	r2, [pc, #404]	; (80120a8 <_strtod_l+0xb88>)
 8011f14:	4019      	ands	r1, r3
 8011f16:	4291      	cmp	r1, r2
 8011f18:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8011f1c:	d948      	bls.n	8011fb0 <_strtod_l+0xa90>
 8011f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d103      	bne.n	8011f30 <_strtod_l+0xa10>
 8011f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	f43f ad27 	beq.w	801197e <_strtod_l+0x45e>
 8011f30:	f8df b164 	ldr.w	fp, [pc, #356]	; 8012098 <_strtod_l+0xb78>
 8011f34:	f04f 3aff 	mov.w	sl, #4294967295
 8011f38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f001 fd50 	bl	80139e0 <_Bfree>
 8011f40:	4649      	mov	r1, r9
 8011f42:	4620      	mov	r0, r4
 8011f44:	f001 fd4c 	bl	80139e0 <_Bfree>
 8011f48:	4641      	mov	r1, r8
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f001 fd48 	bl	80139e0 <_Bfree>
 8011f50:	4629      	mov	r1, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	f001 fd44 	bl	80139e0 <_Bfree>
 8011f58:	e60e      	b.n	8011b78 <_strtod_l+0x658>
 8011f5a:	f1ba 0f00 	cmp.w	sl, #0
 8011f5e:	d113      	bne.n	8011f88 <_strtod_l+0xa68>
 8011f60:	9b08      	ldr	r3, [sp, #32]
 8011f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f66:	b9b3      	cbnz	r3, 8011f96 <_strtod_l+0xa76>
 8011f68:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011f6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011f78:	d401      	bmi.n	8011f7e <_strtod_l+0xa5e>
 8011f7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011f7e:	eeb1 7b48 	vneg.f64	d7, d8
 8011f82:	ec53 2b17 	vmov	r2, r3, d7
 8011f86:	e7a6      	b.n	8011ed6 <_strtod_l+0x9b6>
 8011f88:	f1ba 0f01 	cmp.w	sl, #1
 8011f8c:	d103      	bne.n	8011f96 <_strtod_l+0xa76>
 8011f8e:	9b08      	ldr	r3, [sp, #32]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f43f ad8a 	beq.w	8011aaa <_strtod_l+0x58a>
 8011f96:	2200      	movs	r2, #0
 8011f98:	4b44      	ldr	r3, [pc, #272]	; (80120ac <_strtod_l+0xb8c>)
 8011f9a:	e79a      	b.n	8011ed2 <_strtod_l+0x9b2>
 8011f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f9e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011fa2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d0e9      	beq.n	8011f7e <_strtod_l+0xa5e>
 8011faa:	ec53 2b18 	vmov	r2, r3, d8
 8011fae:	e792      	b.n	8011ed6 <_strtod_l+0x9b6>
 8011fb0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011fb4:	2f00      	cmp	r7, #0
 8011fb6:	d1bf      	bne.n	8011f38 <_strtod_l+0xa18>
 8011fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011fbc:	0d1b      	lsrs	r3, r3, #20
 8011fbe:	051b      	lsls	r3, r3, #20
 8011fc0:	429e      	cmp	r6, r3
 8011fc2:	d1b9      	bne.n	8011f38 <_strtod_l+0xa18>
 8011fc4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fca:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011fce:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011fd2:	b92b      	cbnz	r3, 8011fe0 <_strtod_l+0xac0>
 8011fd4:	f1ba 0f00 	cmp.w	sl, #0
 8011fd8:	d102      	bne.n	8011fe0 <_strtod_l+0xac0>
 8011fda:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011fde:	b3d2      	cbz	r2, 8012056 <_strtod_l+0xb36>
 8011fe0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe8:	f53f acd3 	bmi.w	8011992 <_strtod_l+0x472>
 8011fec:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	dda0      	ble.n	8011f38 <_strtod_l+0xa18>
 8011ff6:	e4cc      	b.n	8011992 <_strtod_l+0x472>
 8011ff8:	b1ef      	cbz	r7, 8012036 <_strtod_l+0xb16>
 8011ffa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011ffe:	d81a      	bhi.n	8012036 <_strtod_l+0xb16>
 8012000:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012088 <_strtod_l+0xb68>
 8012004:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200c:	d810      	bhi.n	8012030 <_strtod_l+0xb10>
 801200e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8012012:	ee17 3a90 	vmov	r3, s15
 8012016:	2b00      	cmp	r3, #0
 8012018:	bf08      	it	eq
 801201a:	2301      	moveq	r3, #1
 801201c:	ee07 3a90 	vmov	s15, r3
 8012020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012022:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8012026:	b99b      	cbnz	r3, 8012050 <_strtod_l+0xb30>
 8012028:	eeb1 7b48 	vneg.f64	d7, d8
 801202c:	ec53 2b17 	vmov	r2, r3, d7
 8012030:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012034:	1b8b      	subs	r3, r1, r6
 8012036:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801203a:	ec43 2b1c 	vmov	d12, r2, r3
 801203e:	f001 ff67 	bl	8013f10 <__ulp>
 8012042:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012046:	eeac 7b00 	vfma.f64	d7, d12, d0
 801204a:	ec5b ab17 	vmov	sl, fp, d7
 801204e:	e7b1      	b.n	8011fb4 <_strtod_l+0xa94>
 8012050:	ec53 2b18 	vmov	r2, r3, d8
 8012054:	e7ec      	b.n	8012030 <_strtod_l+0xb10>
 8012056:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205e:	f57f af6b 	bpl.w	8011f38 <_strtod_l+0xa18>
 8012062:	e496      	b.n	8011992 <_strtod_l+0x472>
 8012064:	2300      	movs	r3, #0
 8012066:	930d      	str	r3, [sp, #52]	; 0x34
 8012068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801206a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801206c:	6013      	str	r3, [r2, #0]
 801206e:	f7ff ba9d 	b.w	80115ac <_strtod_l+0x8c>
 8012072:	2a65      	cmp	r2, #101	; 0x65
 8012074:	f04f 0100 	mov.w	r1, #0
 8012078:	f43f ab97 	beq.w	80117aa <_strtod_l+0x28a>
 801207c:	2701      	movs	r7, #1
 801207e:	460b      	mov	r3, r1
 8012080:	9704      	str	r7, [sp, #16]
 8012082:	f7ff bb0a 	b.w	801169a <_strtod_l+0x17a>
 8012086:	bf00      	nop
 8012088:	ffc00000 	.word	0xffc00000
 801208c:	41dfffff 	.word	0x41dfffff
 8012090:	000fffff 	.word	0x000fffff
 8012094:	7ff00000 	.word	0x7ff00000
 8012098:	7fefffff 	.word	0x7fefffff
 801209c:	39500000 	.word	0x39500000
 80120a0:	3ff00000 	.word	0x3ff00000
 80120a4:	7fe00000 	.word	0x7fe00000
 80120a8:	7c9fffff 	.word	0x7c9fffff
 80120ac:	bff00000 	.word	0xbff00000

080120b0 <_strtod_r>:
 80120b0:	4b05      	ldr	r3, [pc, #20]	; (80120c8 <_strtod_r+0x18>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	b410      	push	{r4}
 80120b6:	6a1b      	ldr	r3, [r3, #32]
 80120b8:	4c04      	ldr	r4, [pc, #16]	; (80120cc <_strtod_r+0x1c>)
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	bf08      	it	eq
 80120be:	4623      	moveq	r3, r4
 80120c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120c4:	f7ff ba2c 	b.w	8011520 <_strtod_l>
 80120c8:	20000378 	.word	0x20000378
 80120cc:	200003dc 	.word	0x200003dc

080120d0 <_strtol_l.isra.0>:
 80120d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d4:	4680      	mov	r8, r0
 80120d6:	4689      	mov	r9, r1
 80120d8:	4692      	mov	sl, r2
 80120da:	461e      	mov	r6, r3
 80120dc:	460f      	mov	r7, r1
 80120de:	463d      	mov	r5, r7
 80120e0:	9808      	ldr	r0, [sp, #32]
 80120e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120e6:	f001 fbbb 	bl	8013860 <__locale_ctype_ptr_l>
 80120ea:	4420      	add	r0, r4
 80120ec:	7843      	ldrb	r3, [r0, #1]
 80120ee:	f013 0308 	ands.w	r3, r3, #8
 80120f2:	d132      	bne.n	801215a <_strtol_l.isra.0+0x8a>
 80120f4:	2c2d      	cmp	r4, #45	; 0x2d
 80120f6:	d132      	bne.n	801215e <_strtol_l.isra.0+0x8e>
 80120f8:	787c      	ldrb	r4, [r7, #1]
 80120fa:	1cbd      	adds	r5, r7, #2
 80120fc:	2201      	movs	r2, #1
 80120fe:	2e00      	cmp	r6, #0
 8012100:	d05d      	beq.n	80121be <_strtol_l.isra.0+0xee>
 8012102:	2e10      	cmp	r6, #16
 8012104:	d109      	bne.n	801211a <_strtol_l.isra.0+0x4a>
 8012106:	2c30      	cmp	r4, #48	; 0x30
 8012108:	d107      	bne.n	801211a <_strtol_l.isra.0+0x4a>
 801210a:	782b      	ldrb	r3, [r5, #0]
 801210c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012110:	2b58      	cmp	r3, #88	; 0x58
 8012112:	d14f      	bne.n	80121b4 <_strtol_l.isra.0+0xe4>
 8012114:	786c      	ldrb	r4, [r5, #1]
 8012116:	2610      	movs	r6, #16
 8012118:	3502      	adds	r5, #2
 801211a:	2a00      	cmp	r2, #0
 801211c:	bf14      	ite	ne
 801211e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012122:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012126:	2700      	movs	r7, #0
 8012128:	fbb1 fcf6 	udiv	ip, r1, r6
 801212c:	4638      	mov	r0, r7
 801212e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012132:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012136:	2b09      	cmp	r3, #9
 8012138:	d817      	bhi.n	801216a <_strtol_l.isra.0+0x9a>
 801213a:	461c      	mov	r4, r3
 801213c:	42a6      	cmp	r6, r4
 801213e:	dd23      	ble.n	8012188 <_strtol_l.isra.0+0xb8>
 8012140:	1c7b      	adds	r3, r7, #1
 8012142:	d007      	beq.n	8012154 <_strtol_l.isra.0+0x84>
 8012144:	4584      	cmp	ip, r0
 8012146:	d31c      	bcc.n	8012182 <_strtol_l.isra.0+0xb2>
 8012148:	d101      	bne.n	801214e <_strtol_l.isra.0+0x7e>
 801214a:	45a6      	cmp	lr, r4
 801214c:	db19      	blt.n	8012182 <_strtol_l.isra.0+0xb2>
 801214e:	fb00 4006 	mla	r0, r0, r6, r4
 8012152:	2701      	movs	r7, #1
 8012154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012158:	e7eb      	b.n	8012132 <_strtol_l.isra.0+0x62>
 801215a:	462f      	mov	r7, r5
 801215c:	e7bf      	b.n	80120de <_strtol_l.isra.0+0xe>
 801215e:	2c2b      	cmp	r4, #43	; 0x2b
 8012160:	bf04      	itt	eq
 8012162:	1cbd      	addeq	r5, r7, #2
 8012164:	787c      	ldrbeq	r4, [r7, #1]
 8012166:	461a      	mov	r2, r3
 8012168:	e7c9      	b.n	80120fe <_strtol_l.isra.0+0x2e>
 801216a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801216e:	2b19      	cmp	r3, #25
 8012170:	d801      	bhi.n	8012176 <_strtol_l.isra.0+0xa6>
 8012172:	3c37      	subs	r4, #55	; 0x37
 8012174:	e7e2      	b.n	801213c <_strtol_l.isra.0+0x6c>
 8012176:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801217a:	2b19      	cmp	r3, #25
 801217c:	d804      	bhi.n	8012188 <_strtol_l.isra.0+0xb8>
 801217e:	3c57      	subs	r4, #87	; 0x57
 8012180:	e7dc      	b.n	801213c <_strtol_l.isra.0+0x6c>
 8012182:	f04f 37ff 	mov.w	r7, #4294967295
 8012186:	e7e5      	b.n	8012154 <_strtol_l.isra.0+0x84>
 8012188:	1c7b      	adds	r3, r7, #1
 801218a:	d108      	bne.n	801219e <_strtol_l.isra.0+0xce>
 801218c:	2322      	movs	r3, #34	; 0x22
 801218e:	f8c8 3000 	str.w	r3, [r8]
 8012192:	4608      	mov	r0, r1
 8012194:	f1ba 0f00 	cmp.w	sl, #0
 8012198:	d107      	bne.n	80121aa <_strtol_l.isra.0+0xda>
 801219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801219e:	b102      	cbz	r2, 80121a2 <_strtol_l.isra.0+0xd2>
 80121a0:	4240      	negs	r0, r0
 80121a2:	f1ba 0f00 	cmp.w	sl, #0
 80121a6:	d0f8      	beq.n	801219a <_strtol_l.isra.0+0xca>
 80121a8:	b10f      	cbz	r7, 80121ae <_strtol_l.isra.0+0xde>
 80121aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80121ae:	f8ca 9000 	str.w	r9, [sl]
 80121b2:	e7f2      	b.n	801219a <_strtol_l.isra.0+0xca>
 80121b4:	2430      	movs	r4, #48	; 0x30
 80121b6:	2e00      	cmp	r6, #0
 80121b8:	d1af      	bne.n	801211a <_strtol_l.isra.0+0x4a>
 80121ba:	2608      	movs	r6, #8
 80121bc:	e7ad      	b.n	801211a <_strtol_l.isra.0+0x4a>
 80121be:	2c30      	cmp	r4, #48	; 0x30
 80121c0:	d0a3      	beq.n	801210a <_strtol_l.isra.0+0x3a>
 80121c2:	260a      	movs	r6, #10
 80121c4:	e7a9      	b.n	801211a <_strtol_l.isra.0+0x4a>
	...

080121c8 <_strtol_r>:
 80121c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121ca:	4c06      	ldr	r4, [pc, #24]	; (80121e4 <_strtol_r+0x1c>)
 80121cc:	4d06      	ldr	r5, [pc, #24]	; (80121e8 <_strtol_r+0x20>)
 80121ce:	6824      	ldr	r4, [r4, #0]
 80121d0:	6a24      	ldr	r4, [r4, #32]
 80121d2:	2c00      	cmp	r4, #0
 80121d4:	bf08      	it	eq
 80121d6:	462c      	moveq	r4, r5
 80121d8:	9400      	str	r4, [sp, #0]
 80121da:	f7ff ff79 	bl	80120d0 <_strtol_l.isra.0>
 80121de:	b003      	add	sp, #12
 80121e0:	bd30      	pop	{r4, r5, pc}
 80121e2:	bf00      	nop
 80121e4:	20000378 	.word	0x20000378
 80121e8:	200003dc 	.word	0x200003dc

080121ec <__swbuf_r>:
 80121ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ee:	460e      	mov	r6, r1
 80121f0:	4614      	mov	r4, r2
 80121f2:	4605      	mov	r5, r0
 80121f4:	b118      	cbz	r0, 80121fe <__swbuf_r+0x12>
 80121f6:	6983      	ldr	r3, [r0, #24]
 80121f8:	b90b      	cbnz	r3, 80121fe <__swbuf_r+0x12>
 80121fa:	f000 ff81 	bl	8013100 <__sinit>
 80121fe:	4b21      	ldr	r3, [pc, #132]	; (8012284 <__swbuf_r+0x98>)
 8012200:	429c      	cmp	r4, r3
 8012202:	d12a      	bne.n	801225a <__swbuf_r+0x6e>
 8012204:	686c      	ldr	r4, [r5, #4]
 8012206:	69a3      	ldr	r3, [r4, #24]
 8012208:	60a3      	str	r3, [r4, #8]
 801220a:	89a3      	ldrh	r3, [r4, #12]
 801220c:	071a      	lsls	r2, r3, #28
 801220e:	d52e      	bpl.n	801226e <__swbuf_r+0x82>
 8012210:	6923      	ldr	r3, [r4, #16]
 8012212:	b363      	cbz	r3, 801226e <__swbuf_r+0x82>
 8012214:	6923      	ldr	r3, [r4, #16]
 8012216:	6820      	ldr	r0, [r4, #0]
 8012218:	1ac0      	subs	r0, r0, r3
 801221a:	6963      	ldr	r3, [r4, #20]
 801221c:	b2f6      	uxtb	r6, r6
 801221e:	4283      	cmp	r3, r0
 8012220:	4637      	mov	r7, r6
 8012222:	dc04      	bgt.n	801222e <__swbuf_r+0x42>
 8012224:	4621      	mov	r1, r4
 8012226:	4628      	mov	r0, r5
 8012228:	f000 ff00 	bl	801302c <_fflush_r>
 801222c:	bb28      	cbnz	r0, 801227a <__swbuf_r+0x8e>
 801222e:	68a3      	ldr	r3, [r4, #8]
 8012230:	3b01      	subs	r3, #1
 8012232:	60a3      	str	r3, [r4, #8]
 8012234:	6823      	ldr	r3, [r4, #0]
 8012236:	1c5a      	adds	r2, r3, #1
 8012238:	6022      	str	r2, [r4, #0]
 801223a:	701e      	strb	r6, [r3, #0]
 801223c:	6963      	ldr	r3, [r4, #20]
 801223e:	3001      	adds	r0, #1
 8012240:	4283      	cmp	r3, r0
 8012242:	d004      	beq.n	801224e <__swbuf_r+0x62>
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	07db      	lsls	r3, r3, #31
 8012248:	d519      	bpl.n	801227e <__swbuf_r+0x92>
 801224a:	2e0a      	cmp	r6, #10
 801224c:	d117      	bne.n	801227e <__swbuf_r+0x92>
 801224e:	4621      	mov	r1, r4
 8012250:	4628      	mov	r0, r5
 8012252:	f000 feeb 	bl	801302c <_fflush_r>
 8012256:	b190      	cbz	r0, 801227e <__swbuf_r+0x92>
 8012258:	e00f      	b.n	801227a <__swbuf_r+0x8e>
 801225a:	4b0b      	ldr	r3, [pc, #44]	; (8012288 <__swbuf_r+0x9c>)
 801225c:	429c      	cmp	r4, r3
 801225e:	d101      	bne.n	8012264 <__swbuf_r+0x78>
 8012260:	68ac      	ldr	r4, [r5, #8]
 8012262:	e7d0      	b.n	8012206 <__swbuf_r+0x1a>
 8012264:	4b09      	ldr	r3, [pc, #36]	; (801228c <__swbuf_r+0xa0>)
 8012266:	429c      	cmp	r4, r3
 8012268:	bf08      	it	eq
 801226a:	68ec      	ldreq	r4, [r5, #12]
 801226c:	e7cb      	b.n	8012206 <__swbuf_r+0x1a>
 801226e:	4621      	mov	r1, r4
 8012270:	4628      	mov	r0, r5
 8012272:	f000 f80d 	bl	8012290 <__swsetup_r>
 8012276:	2800      	cmp	r0, #0
 8012278:	d0cc      	beq.n	8012214 <__swbuf_r+0x28>
 801227a:	f04f 37ff 	mov.w	r7, #4294967295
 801227e:	4638      	mov	r0, r7
 8012280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012282:	bf00      	nop
 8012284:	08015098 	.word	0x08015098
 8012288:	080150b8 	.word	0x080150b8
 801228c:	08015078 	.word	0x08015078

08012290 <__swsetup_r>:
 8012290:	4b32      	ldr	r3, [pc, #200]	; (801235c <__swsetup_r+0xcc>)
 8012292:	b570      	push	{r4, r5, r6, lr}
 8012294:	681d      	ldr	r5, [r3, #0]
 8012296:	4606      	mov	r6, r0
 8012298:	460c      	mov	r4, r1
 801229a:	b125      	cbz	r5, 80122a6 <__swsetup_r+0x16>
 801229c:	69ab      	ldr	r3, [r5, #24]
 801229e:	b913      	cbnz	r3, 80122a6 <__swsetup_r+0x16>
 80122a0:	4628      	mov	r0, r5
 80122a2:	f000 ff2d 	bl	8013100 <__sinit>
 80122a6:	4b2e      	ldr	r3, [pc, #184]	; (8012360 <__swsetup_r+0xd0>)
 80122a8:	429c      	cmp	r4, r3
 80122aa:	d10f      	bne.n	80122cc <__swsetup_r+0x3c>
 80122ac:	686c      	ldr	r4, [r5, #4]
 80122ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	0715      	lsls	r5, r2, #28
 80122b6:	d42c      	bmi.n	8012312 <__swsetup_r+0x82>
 80122b8:	06d0      	lsls	r0, r2, #27
 80122ba:	d411      	bmi.n	80122e0 <__swsetup_r+0x50>
 80122bc:	2209      	movs	r2, #9
 80122be:	6032      	str	r2, [r6, #0]
 80122c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122c4:	81a3      	strh	r3, [r4, #12]
 80122c6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ca:	e03e      	b.n	801234a <__swsetup_r+0xba>
 80122cc:	4b25      	ldr	r3, [pc, #148]	; (8012364 <__swsetup_r+0xd4>)
 80122ce:	429c      	cmp	r4, r3
 80122d0:	d101      	bne.n	80122d6 <__swsetup_r+0x46>
 80122d2:	68ac      	ldr	r4, [r5, #8]
 80122d4:	e7eb      	b.n	80122ae <__swsetup_r+0x1e>
 80122d6:	4b24      	ldr	r3, [pc, #144]	; (8012368 <__swsetup_r+0xd8>)
 80122d8:	429c      	cmp	r4, r3
 80122da:	bf08      	it	eq
 80122dc:	68ec      	ldreq	r4, [r5, #12]
 80122de:	e7e6      	b.n	80122ae <__swsetup_r+0x1e>
 80122e0:	0751      	lsls	r1, r2, #29
 80122e2:	d512      	bpl.n	801230a <__swsetup_r+0x7a>
 80122e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122e6:	b141      	cbz	r1, 80122fa <__swsetup_r+0x6a>
 80122e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122ec:	4299      	cmp	r1, r3
 80122ee:	d002      	beq.n	80122f6 <__swsetup_r+0x66>
 80122f0:	4630      	mov	r0, r6
 80122f2:	f7fe f949 	bl	8010588 <_free_r>
 80122f6:	2300      	movs	r3, #0
 80122f8:	6363      	str	r3, [r4, #52]	; 0x34
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012300:	81a3      	strh	r3, [r4, #12]
 8012302:	2300      	movs	r3, #0
 8012304:	6063      	str	r3, [r4, #4]
 8012306:	6923      	ldr	r3, [r4, #16]
 8012308:	6023      	str	r3, [r4, #0]
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	f043 0308 	orr.w	r3, r3, #8
 8012310:	81a3      	strh	r3, [r4, #12]
 8012312:	6923      	ldr	r3, [r4, #16]
 8012314:	b94b      	cbnz	r3, 801232a <__swsetup_r+0x9a>
 8012316:	89a3      	ldrh	r3, [r4, #12]
 8012318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012320:	d003      	beq.n	801232a <__swsetup_r+0x9a>
 8012322:	4621      	mov	r1, r4
 8012324:	4630      	mov	r0, r6
 8012326:	f001 fad3 	bl	80138d0 <__smakebuf_r>
 801232a:	89a2      	ldrh	r2, [r4, #12]
 801232c:	f012 0301 	ands.w	r3, r2, #1
 8012330:	d00c      	beq.n	801234c <__swsetup_r+0xbc>
 8012332:	2300      	movs	r3, #0
 8012334:	60a3      	str	r3, [r4, #8]
 8012336:	6963      	ldr	r3, [r4, #20]
 8012338:	425b      	negs	r3, r3
 801233a:	61a3      	str	r3, [r4, #24]
 801233c:	6923      	ldr	r3, [r4, #16]
 801233e:	b953      	cbnz	r3, 8012356 <__swsetup_r+0xc6>
 8012340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012344:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012348:	d1ba      	bne.n	80122c0 <__swsetup_r+0x30>
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	0792      	lsls	r2, r2, #30
 801234e:	bf58      	it	pl
 8012350:	6963      	ldrpl	r3, [r4, #20]
 8012352:	60a3      	str	r3, [r4, #8]
 8012354:	e7f2      	b.n	801233c <__swsetup_r+0xac>
 8012356:	2000      	movs	r0, #0
 8012358:	e7f7      	b.n	801234a <__swsetup_r+0xba>
 801235a:	bf00      	nop
 801235c:	20000378 	.word	0x20000378
 8012360:	08015098 	.word	0x08015098
 8012364:	080150b8 	.word	0x080150b8
 8012368:	08015078 	.word	0x08015078

0801236c <quorem>:
 801236c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012370:	6903      	ldr	r3, [r0, #16]
 8012372:	690c      	ldr	r4, [r1, #16]
 8012374:	42a3      	cmp	r3, r4
 8012376:	4680      	mov	r8, r0
 8012378:	f2c0 8082 	blt.w	8012480 <quorem+0x114>
 801237c:	3c01      	subs	r4, #1
 801237e:	f101 0714 	add.w	r7, r1, #20
 8012382:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012386:	f100 0614 	add.w	r6, r0, #20
 801238a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801238e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012392:	eb06 030c 	add.w	r3, r6, ip
 8012396:	3501      	adds	r5, #1
 8012398:	eb07 090c 	add.w	r9, r7, ip
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	fbb0 f5f5 	udiv	r5, r0, r5
 80123a2:	b395      	cbz	r5, 801240a <quorem+0x9e>
 80123a4:	f04f 0a00 	mov.w	sl, #0
 80123a8:	4638      	mov	r0, r7
 80123aa:	46b6      	mov	lr, r6
 80123ac:	46d3      	mov	fp, sl
 80123ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80123b2:	b293      	uxth	r3, r2
 80123b4:	fb05 a303 	mla	r3, r5, r3, sl
 80123b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123bc:	b29b      	uxth	r3, r3
 80123be:	ebab 0303 	sub.w	r3, fp, r3
 80123c2:	0c12      	lsrs	r2, r2, #16
 80123c4:	f8de b000 	ldr.w	fp, [lr]
 80123c8:	fb05 a202 	mla	r2, r5, r2, sl
 80123cc:	fa13 f38b 	uxtah	r3, r3, fp
 80123d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80123d4:	fa1f fb82 	uxth.w	fp, r2
 80123d8:	f8de 2000 	ldr.w	r2, [lr]
 80123dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80123e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123ea:	4581      	cmp	r9, r0
 80123ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80123f0:	f84e 3b04 	str.w	r3, [lr], #4
 80123f4:	d2db      	bcs.n	80123ae <quorem+0x42>
 80123f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80123fa:	b933      	cbnz	r3, 801240a <quorem+0x9e>
 80123fc:	9b01      	ldr	r3, [sp, #4]
 80123fe:	3b04      	subs	r3, #4
 8012400:	429e      	cmp	r6, r3
 8012402:	461a      	mov	r2, r3
 8012404:	d330      	bcc.n	8012468 <quorem+0xfc>
 8012406:	f8c8 4010 	str.w	r4, [r8, #16]
 801240a:	4640      	mov	r0, r8
 801240c:	f001 fd08 	bl	8013e20 <__mcmp>
 8012410:	2800      	cmp	r0, #0
 8012412:	db25      	blt.n	8012460 <quorem+0xf4>
 8012414:	3501      	adds	r5, #1
 8012416:	4630      	mov	r0, r6
 8012418:	f04f 0c00 	mov.w	ip, #0
 801241c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012420:	f8d0 e000 	ldr.w	lr, [r0]
 8012424:	b293      	uxth	r3, r2
 8012426:	ebac 0303 	sub.w	r3, ip, r3
 801242a:	0c12      	lsrs	r2, r2, #16
 801242c:	fa13 f38e 	uxtah	r3, r3, lr
 8012430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012438:	b29b      	uxth	r3, r3
 801243a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801243e:	45b9      	cmp	r9, r7
 8012440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012444:	f840 3b04 	str.w	r3, [r0], #4
 8012448:	d2e8      	bcs.n	801241c <quorem+0xb0>
 801244a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801244e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012452:	b92a      	cbnz	r2, 8012460 <quorem+0xf4>
 8012454:	3b04      	subs	r3, #4
 8012456:	429e      	cmp	r6, r3
 8012458:	461a      	mov	r2, r3
 801245a:	d30b      	bcc.n	8012474 <quorem+0x108>
 801245c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012460:	4628      	mov	r0, r5
 8012462:	b003      	add	sp, #12
 8012464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012468:	6812      	ldr	r2, [r2, #0]
 801246a:	3b04      	subs	r3, #4
 801246c:	2a00      	cmp	r2, #0
 801246e:	d1ca      	bne.n	8012406 <quorem+0x9a>
 8012470:	3c01      	subs	r4, #1
 8012472:	e7c5      	b.n	8012400 <quorem+0x94>
 8012474:	6812      	ldr	r2, [r2, #0]
 8012476:	3b04      	subs	r3, #4
 8012478:	2a00      	cmp	r2, #0
 801247a:	d1ef      	bne.n	801245c <quorem+0xf0>
 801247c:	3c01      	subs	r4, #1
 801247e:	e7ea      	b.n	8012456 <quorem+0xea>
 8012480:	2000      	movs	r0, #0
 8012482:	e7ee      	b.n	8012462 <quorem+0xf6>
 8012484:	0000      	movs	r0, r0
	...

08012488 <_dtoa_r>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	ec57 6b10 	vmov	r6, r7, d0
 8012490:	b095      	sub	sp, #84	; 0x54
 8012492:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012494:	9108      	str	r1, [sp, #32]
 8012496:	4604      	mov	r4, r0
 8012498:	920a      	str	r2, [sp, #40]	; 0x28
 801249a:	9311      	str	r3, [sp, #68]	; 0x44
 801249c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80124a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124a4:	b93d      	cbnz	r5, 80124b6 <_dtoa_r+0x2e>
 80124a6:	2010      	movs	r0, #16
 80124a8:	f7fe f844 	bl	8010534 <malloc>
 80124ac:	6260      	str	r0, [r4, #36]	; 0x24
 80124ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124b2:	6005      	str	r5, [r0, #0]
 80124b4:	60c5      	str	r5, [r0, #12]
 80124b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124b8:	6819      	ldr	r1, [r3, #0]
 80124ba:	b151      	cbz	r1, 80124d2 <_dtoa_r+0x4a>
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	604a      	str	r2, [r1, #4]
 80124c0:	2301      	movs	r3, #1
 80124c2:	4093      	lsls	r3, r2
 80124c4:	608b      	str	r3, [r1, #8]
 80124c6:	4620      	mov	r0, r4
 80124c8:	f001 fa8a 	bl	80139e0 <_Bfree>
 80124cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ce:	2200      	movs	r2, #0
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	1e3b      	subs	r3, r7, #0
 80124d4:	bfb9      	ittee	lt
 80124d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80124da:	9303      	strlt	r3, [sp, #12]
 80124dc:	2300      	movge	r3, #0
 80124de:	f8c8 3000 	strge.w	r3, [r8]
 80124e2:	9d03      	ldr	r5, [sp, #12]
 80124e4:	4bac      	ldr	r3, [pc, #688]	; (8012798 <_dtoa_r+0x310>)
 80124e6:	bfbc      	itt	lt
 80124e8:	2201      	movlt	r2, #1
 80124ea:	f8c8 2000 	strlt.w	r2, [r8]
 80124ee:	43ab      	bics	r3, r5
 80124f0:	d11b      	bne.n	801252a <_dtoa_r+0xa2>
 80124f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80124f8:	6013      	str	r3, [r2, #0]
 80124fa:	9b02      	ldr	r3, [sp, #8]
 80124fc:	b923      	cbnz	r3, 8012508 <_dtoa_r+0x80>
 80124fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012502:	2d00      	cmp	r5, #0
 8012504:	f000 84dd 	beq.w	8012ec2 <_dtoa_r+0xa3a>
 8012508:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801250a:	b953      	cbnz	r3, 8012522 <_dtoa_r+0x9a>
 801250c:	4ba3      	ldr	r3, [pc, #652]	; (801279c <_dtoa_r+0x314>)
 801250e:	e020      	b.n	8012552 <_dtoa_r+0xca>
 8012510:	4ba3      	ldr	r3, [pc, #652]	; (80127a0 <_dtoa_r+0x318>)
 8012512:	9304      	str	r3, [sp, #16]
 8012514:	3308      	adds	r3, #8
 8012516:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012518:	6013      	str	r3, [r2, #0]
 801251a:	9804      	ldr	r0, [sp, #16]
 801251c:	b015      	add	sp, #84	; 0x54
 801251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012522:	4b9e      	ldr	r3, [pc, #632]	; (801279c <_dtoa_r+0x314>)
 8012524:	9304      	str	r3, [sp, #16]
 8012526:	3303      	adds	r3, #3
 8012528:	e7f5      	b.n	8012516 <_dtoa_r+0x8e>
 801252a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801252e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	ed8d 7b04 	vstr	d7, [sp, #16]
 801253a:	d10c      	bne.n	8012556 <_dtoa_r+0xce>
 801253c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801253e:	2301      	movs	r3, #1
 8012540:	6013      	str	r3, [r2, #0]
 8012542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012544:	2b00      	cmp	r3, #0
 8012546:	f000 84b9 	beq.w	8012ebc <_dtoa_r+0xa34>
 801254a:	4b96      	ldr	r3, [pc, #600]	; (80127a4 <_dtoa_r+0x31c>)
 801254c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801254e:	6013      	str	r3, [r2, #0]
 8012550:	3b01      	subs	r3, #1
 8012552:	9304      	str	r3, [sp, #16]
 8012554:	e7e1      	b.n	801251a <_dtoa_r+0x92>
 8012556:	a913      	add	r1, sp, #76	; 0x4c
 8012558:	aa12      	add	r2, sp, #72	; 0x48
 801255a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801255e:	4620      	mov	r0, r4
 8012560:	f001 fd4c 	bl	8013ffc <__d2b>
 8012564:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012568:	9001      	str	r0, [sp, #4]
 801256a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801256c:	2e00      	cmp	r6, #0
 801256e:	d046      	beq.n	80125fe <_dtoa_r+0x176>
 8012570:	9805      	ldr	r0, [sp, #20]
 8012572:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801257a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801257e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012582:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012586:	2700      	movs	r7, #0
 8012588:	ee07 aa90 	vmov	s15, sl
 801258c:	ec43 2b16 	vmov	d6, r2, r3
 8012590:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012594:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012780 <_dtoa_r+0x2f8>
 8012598:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801259c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80125a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012788 <_dtoa_r+0x300>
 80125a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80125a8:	eeb0 7b46 	vmov.f64	d7, d6
 80125ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012790 <_dtoa_r+0x308>
 80125b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80125b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80125b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80125bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c0:	ee16 ba90 	vmov	fp, s13
 80125c4:	d508      	bpl.n	80125d8 <_dtoa_r+0x150>
 80125c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80125ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80125ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d2:	bf18      	it	ne
 80125d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80125d8:	f1bb 0f16 	cmp.w	fp, #22
 80125dc:	d834      	bhi.n	8012648 <_dtoa_r+0x1c0>
 80125de:	4b72      	ldr	r3, [pc, #456]	; (80127a8 <_dtoa_r+0x320>)
 80125e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80125e4:	ed93 7b00 	vldr	d7, [r3]
 80125e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80125ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f4:	dd01      	ble.n	80125fa <_dtoa_r+0x172>
 80125f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125fa:	2300      	movs	r3, #0
 80125fc:	e025      	b.n	801264a <_dtoa_r+0x1c2>
 80125fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012600:	eb01 0a03 	add.w	sl, r1, r3
 8012604:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012608:	2b20      	cmp	r3, #32
 801260a:	dd17      	ble.n	801263c <_dtoa_r+0x1b4>
 801260c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012610:	9a02      	ldr	r2, [sp, #8]
 8012612:	409d      	lsls	r5, r3
 8012614:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012618:	fa22 f303 	lsr.w	r3, r2, r3
 801261c:	432b      	orrs	r3, r5
 801261e:	ee07 3a90 	vmov	s15, r3
 8012622:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012626:	f10a 3aff 	add.w	sl, sl, #4294967295
 801262a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801262e:	9805      	ldr	r0, [sp, #20]
 8012630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012634:	2701      	movs	r7, #1
 8012636:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801263a:	e7a5      	b.n	8012588 <_dtoa_r+0x100>
 801263c:	9a02      	ldr	r2, [sp, #8]
 801263e:	f1c3 0320 	rsb	r3, r3, #32
 8012642:	fa02 f303 	lsl.w	r3, r2, r3
 8012646:	e7ea      	b.n	801261e <_dtoa_r+0x196>
 8012648:	2301      	movs	r3, #1
 801264a:	eba1 0a0a 	sub.w	sl, r1, sl
 801264e:	9310      	str	r3, [sp, #64]	; 0x40
 8012650:	f1ba 0301 	subs.w	r3, sl, #1
 8012654:	9307      	str	r3, [sp, #28]
 8012656:	bf43      	ittte	mi
 8012658:	2300      	movmi	r3, #0
 801265a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801265e:	9307      	strmi	r3, [sp, #28]
 8012660:	f04f 0a00 	movpl.w	sl, #0
 8012664:	f1bb 0f00 	cmp.w	fp, #0
 8012668:	db19      	blt.n	801269e <_dtoa_r+0x216>
 801266a:	9b07      	ldr	r3, [sp, #28]
 801266c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012670:	445b      	add	r3, fp
 8012672:	9307      	str	r3, [sp, #28]
 8012674:	f04f 0800 	mov.w	r8, #0
 8012678:	9b08      	ldr	r3, [sp, #32]
 801267a:	2b09      	cmp	r3, #9
 801267c:	d866      	bhi.n	801274c <_dtoa_r+0x2c4>
 801267e:	2b05      	cmp	r3, #5
 8012680:	bfc4      	itt	gt
 8012682:	3b04      	subgt	r3, #4
 8012684:	9308      	strgt	r3, [sp, #32]
 8012686:	9b08      	ldr	r3, [sp, #32]
 8012688:	f1a3 0302 	sub.w	r3, r3, #2
 801268c:	bfcc      	ite	gt
 801268e:	2500      	movgt	r5, #0
 8012690:	2501      	movle	r5, #1
 8012692:	2b03      	cmp	r3, #3
 8012694:	d866      	bhi.n	8012764 <_dtoa_r+0x2dc>
 8012696:	e8df f003 	tbb	[pc, r3]
 801269a:	5755      	.short	0x5755
 801269c:	4909      	.short	0x4909
 801269e:	2300      	movs	r3, #0
 80126a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80126a4:	f1cb 0800 	rsb	r8, fp, #0
 80126a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80126aa:	e7e5      	b.n	8012678 <_dtoa_r+0x1f0>
 80126ac:	2301      	movs	r3, #1
 80126ae:	9309      	str	r3, [sp, #36]	; 0x24
 80126b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	dd59      	ble.n	801276a <_dtoa_r+0x2e2>
 80126b6:	9306      	str	r3, [sp, #24]
 80126b8:	4699      	mov	r9, r3
 80126ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80126bc:	2200      	movs	r2, #0
 80126be:	6072      	str	r2, [r6, #4]
 80126c0:	2204      	movs	r2, #4
 80126c2:	f102 0014 	add.w	r0, r2, #20
 80126c6:	4298      	cmp	r0, r3
 80126c8:	6871      	ldr	r1, [r6, #4]
 80126ca:	d953      	bls.n	8012774 <_dtoa_r+0x2ec>
 80126cc:	4620      	mov	r0, r4
 80126ce:	f001 f953 	bl	8013978 <_Balloc>
 80126d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126d4:	6030      	str	r0, [r6, #0]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	9304      	str	r3, [sp, #16]
 80126da:	f1b9 0f0e 	cmp.w	r9, #14
 80126de:	f200 80c2 	bhi.w	8012866 <_dtoa_r+0x3de>
 80126e2:	2d00      	cmp	r5, #0
 80126e4:	f000 80bf 	beq.w	8012866 <_dtoa_r+0x3de>
 80126e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126ec:	f1bb 0f00 	cmp.w	fp, #0
 80126f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80126f4:	f340 80e6 	ble.w	80128c4 <_dtoa_r+0x43c>
 80126f8:	4a2b      	ldr	r2, [pc, #172]	; (80127a8 <_dtoa_r+0x320>)
 80126fa:	f00b 030f 	and.w	r3, fp, #15
 80126fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012702:	ed93 7b00 	vldr	d7, [r3]
 8012706:	ea4f 132b 	mov.w	r3, fp, asr #4
 801270a:	06da      	lsls	r2, r3, #27
 801270c:	f140 80d8 	bpl.w	80128c0 <_dtoa_r+0x438>
 8012710:	4a26      	ldr	r2, [pc, #152]	; (80127ac <_dtoa_r+0x324>)
 8012712:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012716:	ed92 6b08 	vldr	d6, [r2, #32]
 801271a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801271e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012722:	f003 030f 	and.w	r3, r3, #15
 8012726:	2203      	movs	r2, #3
 8012728:	4920      	ldr	r1, [pc, #128]	; (80127ac <_dtoa_r+0x324>)
 801272a:	e04a      	b.n	80127c2 <_dtoa_r+0x33a>
 801272c:	2301      	movs	r3, #1
 801272e:	9309      	str	r3, [sp, #36]	; 0x24
 8012730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012732:	445b      	add	r3, fp
 8012734:	f103 0901 	add.w	r9, r3, #1
 8012738:	9306      	str	r3, [sp, #24]
 801273a:	464b      	mov	r3, r9
 801273c:	2b01      	cmp	r3, #1
 801273e:	bfb8      	it	lt
 8012740:	2301      	movlt	r3, #1
 8012742:	e7ba      	b.n	80126ba <_dtoa_r+0x232>
 8012744:	2300      	movs	r3, #0
 8012746:	e7b2      	b.n	80126ae <_dtoa_r+0x226>
 8012748:	2300      	movs	r3, #0
 801274a:	e7f0      	b.n	801272e <_dtoa_r+0x2a6>
 801274c:	2501      	movs	r5, #1
 801274e:	2300      	movs	r3, #0
 8012750:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012754:	f04f 33ff 	mov.w	r3, #4294967295
 8012758:	9306      	str	r3, [sp, #24]
 801275a:	4699      	mov	r9, r3
 801275c:	2200      	movs	r2, #0
 801275e:	2312      	movs	r3, #18
 8012760:	920a      	str	r2, [sp, #40]	; 0x28
 8012762:	e7aa      	b.n	80126ba <_dtoa_r+0x232>
 8012764:	2301      	movs	r3, #1
 8012766:	9309      	str	r3, [sp, #36]	; 0x24
 8012768:	e7f4      	b.n	8012754 <_dtoa_r+0x2cc>
 801276a:	2301      	movs	r3, #1
 801276c:	9306      	str	r3, [sp, #24]
 801276e:	4699      	mov	r9, r3
 8012770:	461a      	mov	r2, r3
 8012772:	e7f5      	b.n	8012760 <_dtoa_r+0x2d8>
 8012774:	3101      	adds	r1, #1
 8012776:	6071      	str	r1, [r6, #4]
 8012778:	0052      	lsls	r2, r2, #1
 801277a:	e7a2      	b.n	80126c2 <_dtoa_r+0x23a>
 801277c:	f3af 8000 	nop.w
 8012780:	636f4361 	.word	0x636f4361
 8012784:	3fd287a7 	.word	0x3fd287a7
 8012788:	8b60c8b3 	.word	0x8b60c8b3
 801278c:	3fc68a28 	.word	0x3fc68a28
 8012790:	509f79fb 	.word	0x509f79fb
 8012794:	3fd34413 	.word	0x3fd34413
 8012798:	7ff00000 	.word	0x7ff00000
 801279c:	08015071 	.word	0x08015071
 80127a0:	08015068 	.word	0x08015068
 80127a4:	08014fed 	.word	0x08014fed
 80127a8:	08015110 	.word	0x08015110
 80127ac:	080150e8 	.word	0x080150e8
 80127b0:	07de      	lsls	r6, r3, #31
 80127b2:	d504      	bpl.n	80127be <_dtoa_r+0x336>
 80127b4:	ed91 6b00 	vldr	d6, [r1]
 80127b8:	3201      	adds	r2, #1
 80127ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127be:	105b      	asrs	r3, r3, #1
 80127c0:	3108      	adds	r1, #8
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1f4      	bne.n	80127b0 <_dtoa_r+0x328>
 80127c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80127ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80127ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f000 80a7 	beq.w	8012928 <_dtoa_r+0x4a0>
 80127da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80127de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80127e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ea:	f140 809d 	bpl.w	8012928 <_dtoa_r+0x4a0>
 80127ee:	f1b9 0f00 	cmp.w	r9, #0
 80127f2:	f000 8099 	beq.w	8012928 <_dtoa_r+0x4a0>
 80127f6:	9b06      	ldr	r3, [sp, #24]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	dd30      	ble.n	801285e <_dtoa_r+0x3d6>
 80127fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012800:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012808:	9d06      	ldr	r5, [sp, #24]
 801280a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801280e:	3201      	adds	r2, #1
 8012810:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012814:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012818:	ee07 2a90 	vmov	s15, r2
 801281c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012820:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012824:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012828:	9a03      	ldr	r2, [sp, #12]
 801282a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801282e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012832:	2d00      	cmp	r5, #0
 8012834:	d17b      	bne.n	801292e <_dtoa_r+0x4a6>
 8012836:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801283a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801283e:	ec41 0b17 	vmov	d7, r0, r1
 8012842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284a:	f300 8253 	bgt.w	8012cf4 <_dtoa_r+0x86c>
 801284e:	eeb1 7b47 	vneg.f64	d7, d7
 8012852:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285a:	f100 8249 	bmi.w	8012cf0 <_dtoa_r+0x868>
 801285e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012868:	2b00      	cmp	r3, #0
 801286a:	f2c0 8119 	blt.w	8012aa0 <_dtoa_r+0x618>
 801286e:	f1bb 0f0e 	cmp.w	fp, #14
 8012872:	f300 8115 	bgt.w	8012aa0 <_dtoa_r+0x618>
 8012876:	4bc3      	ldr	r3, [pc, #780]	; (8012b84 <_dtoa_r+0x6fc>)
 8012878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801287c:	ed93 6b00 	vldr	d6, [r3]
 8012880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012882:	2b00      	cmp	r3, #0
 8012884:	f280 80ba 	bge.w	80129fc <_dtoa_r+0x574>
 8012888:	f1b9 0f00 	cmp.w	r9, #0
 801288c:	f300 80b6 	bgt.w	80129fc <_dtoa_r+0x574>
 8012890:	f040 822d 	bne.w	8012cee <_dtoa_r+0x866>
 8012894:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012898:	ee26 6b07 	vmul.f64	d6, d6, d7
 801289c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	464d      	mov	r5, r9
 80128aa:	464f      	mov	r7, r9
 80128ac:	f280 8204 	bge.w	8012cb8 <_dtoa_r+0x830>
 80128b0:	9b04      	ldr	r3, [sp, #16]
 80128b2:	9a04      	ldr	r2, [sp, #16]
 80128b4:	1c5e      	adds	r6, r3, #1
 80128b6:	2331      	movs	r3, #49	; 0x31
 80128b8:	7013      	strb	r3, [r2, #0]
 80128ba:	f10b 0b01 	add.w	fp, fp, #1
 80128be:	e1ff      	b.n	8012cc0 <_dtoa_r+0x838>
 80128c0:	2202      	movs	r2, #2
 80128c2:	e731      	b.n	8012728 <_dtoa_r+0x2a0>
 80128c4:	d02e      	beq.n	8012924 <_dtoa_r+0x49c>
 80128c6:	f1cb 0300 	rsb	r3, fp, #0
 80128ca:	4aae      	ldr	r2, [pc, #696]	; (8012b84 <_dtoa_r+0x6fc>)
 80128cc:	f003 010f 	and.w	r1, r3, #15
 80128d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80128d4:	ed92 7b00 	vldr	d7, [r2]
 80128d8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80128dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80128e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80128e4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80128e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80128ec:	49a6      	ldr	r1, [pc, #664]	; (8012b88 <_dtoa_r+0x700>)
 80128ee:	111b      	asrs	r3, r3, #4
 80128f0:	2000      	movs	r0, #0
 80128f2:	2202      	movs	r2, #2
 80128f4:	b93b      	cbnz	r3, 8012906 <_dtoa_r+0x47e>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	f43f af6b 	beq.w	80127d2 <_dtoa_r+0x34a>
 80128fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012904:	e765      	b.n	80127d2 <_dtoa_r+0x34a>
 8012906:	07dd      	lsls	r5, r3, #31
 8012908:	d509      	bpl.n	801291e <_dtoa_r+0x496>
 801290a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801290e:	ed91 7b00 	vldr	d7, [r1]
 8012912:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012916:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801291a:	3201      	adds	r2, #1
 801291c:	2001      	movs	r0, #1
 801291e:	105b      	asrs	r3, r3, #1
 8012920:	3108      	adds	r1, #8
 8012922:	e7e7      	b.n	80128f4 <_dtoa_r+0x46c>
 8012924:	2202      	movs	r2, #2
 8012926:	e754      	b.n	80127d2 <_dtoa_r+0x34a>
 8012928:	465b      	mov	r3, fp
 801292a:	464d      	mov	r5, r9
 801292c:	e770      	b.n	8012810 <_dtoa_r+0x388>
 801292e:	4a95      	ldr	r2, [pc, #596]	; (8012b84 <_dtoa_r+0x6fc>)
 8012930:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012934:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801293a:	ec41 0b17 	vmov	d7, r0, r1
 801293e:	b35a      	cbz	r2, 8012998 <_dtoa_r+0x510>
 8012940:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012944:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012948:	9e04      	ldr	r6, [sp, #16]
 801294a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801294e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012952:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012956:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801295a:	ee14 2a90 	vmov	r2, s9
 801295e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012962:	3230      	adds	r2, #48	; 0x30
 8012964:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012968:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012970:	f806 2b01 	strb.w	r2, [r6], #1
 8012974:	d43b      	bmi.n	80129ee <_dtoa_r+0x566>
 8012976:	ee32 5b46 	vsub.f64	d5, d2, d6
 801297a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012982:	d472      	bmi.n	8012a6a <_dtoa_r+0x5e2>
 8012984:	9a04      	ldr	r2, [sp, #16]
 8012986:	1ab2      	subs	r2, r6, r2
 8012988:	4295      	cmp	r5, r2
 801298a:	f77f af68 	ble.w	801285e <_dtoa_r+0x3d6>
 801298e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012992:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012996:	e7de      	b.n	8012956 <_dtoa_r+0x4ce>
 8012998:	9a04      	ldr	r2, [sp, #16]
 801299a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801299e:	1956      	adds	r6, r2, r5
 80129a0:	4611      	mov	r1, r2
 80129a2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80129a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80129aa:	ee14 2a90 	vmov	r2, s9
 80129ae:	3230      	adds	r2, #48	; 0x30
 80129b0:	f801 2b01 	strb.w	r2, [r1], #1
 80129b4:	42b1      	cmp	r1, r6
 80129b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80129ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80129be:	d11a      	bne.n	80129f6 <_dtoa_r+0x56e>
 80129c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80129c4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80129c8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80129cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d0:	dc4b      	bgt.n	8012a6a <_dtoa_r+0x5e2>
 80129d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80129d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	f57f af3e 	bpl.w	801285e <_dtoa_r+0x3d6>
 80129e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80129e6:	2a30      	cmp	r2, #48	; 0x30
 80129e8:	f106 31ff 	add.w	r1, r6, #4294967295
 80129ec:	d001      	beq.n	80129f2 <_dtoa_r+0x56a>
 80129ee:	469b      	mov	fp, r3
 80129f0:	e02a      	b.n	8012a48 <_dtoa_r+0x5c0>
 80129f2:	460e      	mov	r6, r1
 80129f4:	e7f5      	b.n	80129e2 <_dtoa_r+0x55a>
 80129f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80129fa:	e7d4      	b.n	80129a6 <_dtoa_r+0x51e>
 80129fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012a04:	9e04      	ldr	r6, [sp, #16]
 8012a06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012a0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012a0e:	ee15 3a10 	vmov	r3, s10
 8012a12:	3330      	adds	r3, #48	; 0x30
 8012a14:	f806 3b01 	strb.w	r3, [r6], #1
 8012a18:	9b04      	ldr	r3, [sp, #16]
 8012a1a:	1af3      	subs	r3, r6, r3
 8012a1c:	4599      	cmp	r9, r3
 8012a1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012a22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012a26:	d133      	bne.n	8012a90 <_dtoa_r+0x608>
 8012a28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a34:	dc18      	bgt.n	8012a68 <_dtoa_r+0x5e0>
 8012a36:	eeb4 7b46 	vcmp.f64	d7, d6
 8012a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3e:	d103      	bne.n	8012a48 <_dtoa_r+0x5c0>
 8012a40:	ee15 3a10 	vmov	r3, s10
 8012a44:	07db      	lsls	r3, r3, #31
 8012a46:	d40f      	bmi.n	8012a68 <_dtoa_r+0x5e0>
 8012a48:	9901      	ldr	r1, [sp, #4]
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	f000 ffc8 	bl	80139e0 <_Bfree>
 8012a50:	2300      	movs	r3, #0
 8012a52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a54:	7033      	strb	r3, [r6, #0]
 8012a56:	f10b 0301 	add.w	r3, fp, #1
 8012a5a:	6013      	str	r3, [r2, #0]
 8012a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f43f ad5b 	beq.w	801251a <_dtoa_r+0x92>
 8012a64:	601e      	str	r6, [r3, #0]
 8012a66:	e558      	b.n	801251a <_dtoa_r+0x92>
 8012a68:	465b      	mov	r3, fp
 8012a6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012a6e:	2939      	cmp	r1, #57	; 0x39
 8012a70:	f106 32ff 	add.w	r2, r6, #4294967295
 8012a74:	d106      	bne.n	8012a84 <_dtoa_r+0x5fc>
 8012a76:	9904      	ldr	r1, [sp, #16]
 8012a78:	4291      	cmp	r1, r2
 8012a7a:	d107      	bne.n	8012a8c <_dtoa_r+0x604>
 8012a7c:	2230      	movs	r2, #48	; 0x30
 8012a7e:	700a      	strb	r2, [r1, #0]
 8012a80:	3301      	adds	r3, #1
 8012a82:	460a      	mov	r2, r1
 8012a84:	7811      	ldrb	r1, [r2, #0]
 8012a86:	3101      	adds	r1, #1
 8012a88:	7011      	strb	r1, [r2, #0]
 8012a8a:	e7b0      	b.n	80129ee <_dtoa_r+0x566>
 8012a8c:	4616      	mov	r6, r2
 8012a8e:	e7ec      	b.n	8012a6a <_dtoa_r+0x5e2>
 8012a90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9c:	d1b3      	bne.n	8012a06 <_dtoa_r+0x57e>
 8012a9e:	e7d3      	b.n	8012a48 <_dtoa_r+0x5c0>
 8012aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aa2:	2a00      	cmp	r2, #0
 8012aa4:	f000 808d 	beq.w	8012bc2 <_dtoa_r+0x73a>
 8012aa8:	9a08      	ldr	r2, [sp, #32]
 8012aaa:	2a01      	cmp	r2, #1
 8012aac:	dc72      	bgt.n	8012b94 <_dtoa_r+0x70c>
 8012aae:	2f00      	cmp	r7, #0
 8012ab0:	d06c      	beq.n	8012b8c <_dtoa_r+0x704>
 8012ab2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ab6:	4645      	mov	r5, r8
 8012ab8:	4656      	mov	r6, sl
 8012aba:	9a07      	ldr	r2, [sp, #28]
 8012abc:	2101      	movs	r1, #1
 8012abe:	441a      	add	r2, r3
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	449a      	add	sl, r3
 8012ac4:	9207      	str	r2, [sp, #28]
 8012ac6:	f001 f869 	bl	8013b9c <__i2b>
 8012aca:	4607      	mov	r7, r0
 8012acc:	2e00      	cmp	r6, #0
 8012ace:	dd0b      	ble.n	8012ae8 <_dtoa_r+0x660>
 8012ad0:	9b07      	ldr	r3, [sp, #28]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	dd08      	ble.n	8012ae8 <_dtoa_r+0x660>
 8012ad6:	42b3      	cmp	r3, r6
 8012ad8:	9a07      	ldr	r2, [sp, #28]
 8012ada:	bfa8      	it	ge
 8012adc:	4633      	movge	r3, r6
 8012ade:	ebaa 0a03 	sub.w	sl, sl, r3
 8012ae2:	1af6      	subs	r6, r6, r3
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	9307      	str	r3, [sp, #28]
 8012ae8:	f1b8 0f00 	cmp.w	r8, #0
 8012aec:	d01d      	beq.n	8012b2a <_dtoa_r+0x6a2>
 8012aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d06a      	beq.n	8012bca <_dtoa_r+0x742>
 8012af4:	b18d      	cbz	r5, 8012b1a <_dtoa_r+0x692>
 8012af6:	4639      	mov	r1, r7
 8012af8:	462a      	mov	r2, r5
 8012afa:	4620      	mov	r0, r4
 8012afc:	f001 f8ee 	bl	8013cdc <__pow5mult>
 8012b00:	9a01      	ldr	r2, [sp, #4]
 8012b02:	4601      	mov	r1, r0
 8012b04:	4607      	mov	r7, r0
 8012b06:	4620      	mov	r0, r4
 8012b08:	f001 f851 	bl	8013bae <__multiply>
 8012b0c:	9901      	ldr	r1, [sp, #4]
 8012b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8012b10:	4620      	mov	r0, r4
 8012b12:	f000 ff65 	bl	80139e0 <_Bfree>
 8012b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	ebb8 0205 	subs.w	r2, r8, r5
 8012b1e:	d004      	beq.n	8012b2a <_dtoa_r+0x6a2>
 8012b20:	9901      	ldr	r1, [sp, #4]
 8012b22:	4620      	mov	r0, r4
 8012b24:	f001 f8da 	bl	8013cdc <__pow5mult>
 8012b28:	9001      	str	r0, [sp, #4]
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f001 f835 	bl	8013b9c <__i2b>
 8012b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b34:	4605      	mov	r5, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 81ca 	beq.w	8012ed0 <_dtoa_r+0xa48>
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	4601      	mov	r1, r0
 8012b40:	4620      	mov	r0, r4
 8012b42:	f001 f8cb 	bl	8013cdc <__pow5mult>
 8012b46:	9b08      	ldr	r3, [sp, #32]
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	dc44      	bgt.n	8012bd8 <_dtoa_r+0x750>
 8012b4e:	9b02      	ldr	r3, [sp, #8]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d13c      	bne.n	8012bce <_dtoa_r+0x746>
 8012b54:	9b03      	ldr	r3, [sp, #12]
 8012b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d137      	bne.n	8012bce <_dtoa_r+0x746>
 8012b5e:	9b03      	ldr	r3, [sp, #12]
 8012b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b64:	0d1b      	lsrs	r3, r3, #20
 8012b66:	051b      	lsls	r3, r3, #20
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d033      	beq.n	8012bd4 <_dtoa_r+0x74c>
 8012b6c:	9b07      	ldr	r3, [sp, #28]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	f10a 0a01 	add.w	sl, sl, #1
 8012b74:	9307      	str	r3, [sp, #28]
 8012b76:	f04f 0801 	mov.w	r8, #1
 8012b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b7c:	bb73      	cbnz	r3, 8012bdc <_dtoa_r+0x754>
 8012b7e:	2001      	movs	r0, #1
 8012b80:	e034      	b.n	8012bec <_dtoa_r+0x764>
 8012b82:	bf00      	nop
 8012b84:	08015110 	.word	0x08015110
 8012b88:	080150e8 	.word	0x080150e8
 8012b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b92:	e790      	b.n	8012ab6 <_dtoa_r+0x62e>
 8012b94:	f109 35ff 	add.w	r5, r9, #4294967295
 8012b98:	45a8      	cmp	r8, r5
 8012b9a:	bfbf      	itttt	lt
 8012b9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8012b9e:	eba5 0808 	sublt.w	r8, r5, r8
 8012ba2:	4443      	addlt	r3, r8
 8012ba4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012ba6:	bfb6      	itet	lt
 8012ba8:	46a8      	movlt	r8, r5
 8012baa:	eba8 0505 	subge.w	r5, r8, r5
 8012bae:	2500      	movlt	r5, #0
 8012bb0:	f1b9 0f00 	cmp.w	r9, #0
 8012bb4:	bfb9      	ittee	lt
 8012bb6:	ebaa 0609 	sublt.w	r6, sl, r9
 8012bba:	2300      	movlt	r3, #0
 8012bbc:	4656      	movge	r6, sl
 8012bbe:	464b      	movge	r3, r9
 8012bc0:	e77b      	b.n	8012aba <_dtoa_r+0x632>
 8012bc2:	4645      	mov	r5, r8
 8012bc4:	4656      	mov	r6, sl
 8012bc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012bc8:	e780      	b.n	8012acc <_dtoa_r+0x644>
 8012bca:	4642      	mov	r2, r8
 8012bcc:	e7a8      	b.n	8012b20 <_dtoa_r+0x698>
 8012bce:	f04f 0800 	mov.w	r8, #0
 8012bd2:	e7d2      	b.n	8012b7a <_dtoa_r+0x6f2>
 8012bd4:	4698      	mov	r8, r3
 8012bd6:	e7d0      	b.n	8012b7a <_dtoa_r+0x6f2>
 8012bd8:	f04f 0800 	mov.w	r8, #0
 8012bdc:	692b      	ldr	r3, [r5, #16]
 8012bde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012be2:	6918      	ldr	r0, [r3, #16]
 8012be4:	f000 ff8c 	bl	8013b00 <__hi0bits>
 8012be8:	f1c0 0020 	rsb	r0, r0, #32
 8012bec:	9b07      	ldr	r3, [sp, #28]
 8012bee:	4418      	add	r0, r3
 8012bf0:	f010 001f 	ands.w	r0, r0, #31
 8012bf4:	d047      	beq.n	8012c86 <_dtoa_r+0x7fe>
 8012bf6:	f1c0 0320 	rsb	r3, r0, #32
 8012bfa:	2b04      	cmp	r3, #4
 8012bfc:	dd3b      	ble.n	8012c76 <_dtoa_r+0x7ee>
 8012bfe:	9b07      	ldr	r3, [sp, #28]
 8012c00:	f1c0 001c 	rsb	r0, r0, #28
 8012c04:	4482      	add	sl, r0
 8012c06:	4406      	add	r6, r0
 8012c08:	4403      	add	r3, r0
 8012c0a:	9307      	str	r3, [sp, #28]
 8012c0c:	f1ba 0f00 	cmp.w	sl, #0
 8012c10:	dd05      	ble.n	8012c1e <_dtoa_r+0x796>
 8012c12:	4652      	mov	r2, sl
 8012c14:	9901      	ldr	r1, [sp, #4]
 8012c16:	4620      	mov	r0, r4
 8012c18:	f001 f8ae 	bl	8013d78 <__lshift>
 8012c1c:	9001      	str	r0, [sp, #4]
 8012c1e:	9b07      	ldr	r3, [sp, #28]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	dd05      	ble.n	8012c30 <_dtoa_r+0x7a8>
 8012c24:	4629      	mov	r1, r5
 8012c26:	461a      	mov	r2, r3
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f001 f8a5 	bl	8013d78 <__lshift>
 8012c2e:	4605      	mov	r5, r0
 8012c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c32:	b353      	cbz	r3, 8012c8a <_dtoa_r+0x802>
 8012c34:	4629      	mov	r1, r5
 8012c36:	9801      	ldr	r0, [sp, #4]
 8012c38:	f001 f8f2 	bl	8013e20 <__mcmp>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	da24      	bge.n	8012c8a <_dtoa_r+0x802>
 8012c40:	2300      	movs	r3, #0
 8012c42:	220a      	movs	r2, #10
 8012c44:	9901      	ldr	r1, [sp, #4]
 8012c46:	4620      	mov	r0, r4
 8012c48:	f000 fee1 	bl	8013a0e <__multadd>
 8012c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4e:	9001      	str	r0, [sp, #4]
 8012c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f000 8142 	beq.w	8012ede <_dtoa_r+0xa56>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	220a      	movs	r2, #10
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 fed4 	bl	8013a0e <__multadd>
 8012c66:	9b06      	ldr	r3, [sp, #24]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	4607      	mov	r7, r0
 8012c6c:	dc4b      	bgt.n	8012d06 <_dtoa_r+0x87e>
 8012c6e:	9b08      	ldr	r3, [sp, #32]
 8012c70:	2b02      	cmp	r3, #2
 8012c72:	dd48      	ble.n	8012d06 <_dtoa_r+0x87e>
 8012c74:	e011      	b.n	8012c9a <_dtoa_r+0x812>
 8012c76:	d0c9      	beq.n	8012c0c <_dtoa_r+0x784>
 8012c78:	9a07      	ldr	r2, [sp, #28]
 8012c7a:	331c      	adds	r3, #28
 8012c7c:	441a      	add	r2, r3
 8012c7e:	449a      	add	sl, r3
 8012c80:	441e      	add	r6, r3
 8012c82:	4613      	mov	r3, r2
 8012c84:	e7c1      	b.n	8012c0a <_dtoa_r+0x782>
 8012c86:	4603      	mov	r3, r0
 8012c88:	e7f6      	b.n	8012c78 <_dtoa_r+0x7f0>
 8012c8a:	f1b9 0f00 	cmp.w	r9, #0
 8012c8e:	dc34      	bgt.n	8012cfa <_dtoa_r+0x872>
 8012c90:	9b08      	ldr	r3, [sp, #32]
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	dd31      	ble.n	8012cfa <_dtoa_r+0x872>
 8012c96:	f8cd 9018 	str.w	r9, [sp, #24]
 8012c9a:	9b06      	ldr	r3, [sp, #24]
 8012c9c:	b963      	cbnz	r3, 8012cb8 <_dtoa_r+0x830>
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	2205      	movs	r2, #5
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f000 feb3 	bl	8013a0e <__multadd>
 8012ca8:	4601      	mov	r1, r0
 8012caa:	4605      	mov	r5, r0
 8012cac:	9801      	ldr	r0, [sp, #4]
 8012cae:	f001 f8b7 	bl	8013e20 <__mcmp>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	f73f adfc 	bgt.w	80128b0 <_dtoa_r+0x428>
 8012cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cba:	9e04      	ldr	r6, [sp, #16]
 8012cbc:	ea6f 0b03 	mvn.w	fp, r3
 8012cc0:	f04f 0900 	mov.w	r9, #0
 8012cc4:	4629      	mov	r1, r5
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f000 fe8a 	bl	80139e0 <_Bfree>
 8012ccc:	2f00      	cmp	r7, #0
 8012cce:	f43f aebb 	beq.w	8012a48 <_dtoa_r+0x5c0>
 8012cd2:	f1b9 0f00 	cmp.w	r9, #0
 8012cd6:	d005      	beq.n	8012ce4 <_dtoa_r+0x85c>
 8012cd8:	45b9      	cmp	r9, r7
 8012cda:	d003      	beq.n	8012ce4 <_dtoa_r+0x85c>
 8012cdc:	4649      	mov	r1, r9
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f000 fe7e 	bl	80139e0 <_Bfree>
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f000 fe7a 	bl	80139e0 <_Bfree>
 8012cec:	e6ac      	b.n	8012a48 <_dtoa_r+0x5c0>
 8012cee:	2500      	movs	r5, #0
 8012cf0:	462f      	mov	r7, r5
 8012cf2:	e7e1      	b.n	8012cb8 <_dtoa_r+0x830>
 8012cf4:	469b      	mov	fp, r3
 8012cf6:	462f      	mov	r7, r5
 8012cf8:	e5da      	b.n	80128b0 <_dtoa_r+0x428>
 8012cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cfc:	f8cd 9018 	str.w	r9, [sp, #24]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f000 80f3 	beq.w	8012eec <_dtoa_r+0xa64>
 8012d06:	2e00      	cmp	r6, #0
 8012d08:	dd05      	ble.n	8012d16 <_dtoa_r+0x88e>
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	4632      	mov	r2, r6
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f001 f832 	bl	8013d78 <__lshift>
 8012d14:	4607      	mov	r7, r0
 8012d16:	f1b8 0f00 	cmp.w	r8, #0
 8012d1a:	d04c      	beq.n	8012db6 <_dtoa_r+0x92e>
 8012d1c:	6879      	ldr	r1, [r7, #4]
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f000 fe2a 	bl	8013978 <_Balloc>
 8012d24:	693a      	ldr	r2, [r7, #16]
 8012d26:	3202      	adds	r2, #2
 8012d28:	4606      	mov	r6, r0
 8012d2a:	0092      	lsls	r2, r2, #2
 8012d2c:	f107 010c 	add.w	r1, r7, #12
 8012d30:	300c      	adds	r0, #12
 8012d32:	f7fd fc07 	bl	8010544 <memcpy>
 8012d36:	2201      	movs	r2, #1
 8012d38:	4631      	mov	r1, r6
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f001 f81c 	bl	8013d78 <__lshift>
 8012d40:	9b02      	ldr	r3, [sp, #8]
 8012d42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012d46:	f003 0301 	and.w	r3, r3, #1
 8012d4a:	46b9      	mov	r9, r7
 8012d4c:	9307      	str	r3, [sp, #28]
 8012d4e:	4607      	mov	r7, r0
 8012d50:	4629      	mov	r1, r5
 8012d52:	9801      	ldr	r0, [sp, #4]
 8012d54:	f7ff fb0a 	bl	801236c <quorem>
 8012d58:	4649      	mov	r1, r9
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d60:	9801      	ldr	r0, [sp, #4]
 8012d62:	f001 f85d 	bl	8013e20 <__mcmp>
 8012d66:	463a      	mov	r2, r7
 8012d68:	9002      	str	r0, [sp, #8]
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f001 f871 	bl	8013e54 <__mdiff>
 8012d72:	68c3      	ldr	r3, [r0, #12]
 8012d74:	4602      	mov	r2, r0
 8012d76:	bb03      	cbnz	r3, 8012dba <_dtoa_r+0x932>
 8012d78:	4601      	mov	r1, r0
 8012d7a:	9009      	str	r0, [sp, #36]	; 0x24
 8012d7c:	9801      	ldr	r0, [sp, #4]
 8012d7e:	f001 f84f 	bl	8013e20 <__mcmp>
 8012d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d84:	4603      	mov	r3, r0
 8012d86:	4611      	mov	r1, r2
 8012d88:	4620      	mov	r0, r4
 8012d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d8c:	f000 fe28 	bl	80139e0 <_Bfree>
 8012d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d92:	b9a3      	cbnz	r3, 8012dbe <_dtoa_r+0x936>
 8012d94:	9a08      	ldr	r2, [sp, #32]
 8012d96:	b992      	cbnz	r2, 8012dbe <_dtoa_r+0x936>
 8012d98:	9a07      	ldr	r2, [sp, #28]
 8012d9a:	b982      	cbnz	r2, 8012dbe <_dtoa_r+0x936>
 8012d9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012da0:	d029      	beq.n	8012df6 <_dtoa_r+0x96e>
 8012da2:	9b02      	ldr	r3, [sp, #8]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	dd01      	ble.n	8012dac <_dtoa_r+0x924>
 8012da8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012dac:	f10a 0601 	add.w	r6, sl, #1
 8012db0:	f88a 8000 	strb.w	r8, [sl]
 8012db4:	e786      	b.n	8012cc4 <_dtoa_r+0x83c>
 8012db6:	4638      	mov	r0, r7
 8012db8:	e7c2      	b.n	8012d40 <_dtoa_r+0x8b8>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e7e3      	b.n	8012d86 <_dtoa_r+0x8fe>
 8012dbe:	9a02      	ldr	r2, [sp, #8]
 8012dc0:	2a00      	cmp	r2, #0
 8012dc2:	db04      	blt.n	8012dce <_dtoa_r+0x946>
 8012dc4:	d124      	bne.n	8012e10 <_dtoa_r+0x988>
 8012dc6:	9a08      	ldr	r2, [sp, #32]
 8012dc8:	bb12      	cbnz	r2, 8012e10 <_dtoa_r+0x988>
 8012dca:	9a07      	ldr	r2, [sp, #28]
 8012dcc:	bb02      	cbnz	r2, 8012e10 <_dtoa_r+0x988>
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	ddec      	ble.n	8012dac <_dtoa_r+0x924>
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	9901      	ldr	r1, [sp, #4]
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 ffce 	bl	8013d78 <__lshift>
 8012ddc:	4629      	mov	r1, r5
 8012dde:	9001      	str	r0, [sp, #4]
 8012de0:	f001 f81e 	bl	8013e20 <__mcmp>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	dc03      	bgt.n	8012df0 <_dtoa_r+0x968>
 8012de8:	d1e0      	bne.n	8012dac <_dtoa_r+0x924>
 8012dea:	f018 0f01 	tst.w	r8, #1
 8012dee:	d0dd      	beq.n	8012dac <_dtoa_r+0x924>
 8012df0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012df4:	d1d8      	bne.n	8012da8 <_dtoa_r+0x920>
 8012df6:	2339      	movs	r3, #57	; 0x39
 8012df8:	f10a 0601 	add.w	r6, sl, #1
 8012dfc:	f88a 3000 	strb.w	r3, [sl]
 8012e00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e04:	2b39      	cmp	r3, #57	; 0x39
 8012e06:	f106 32ff 	add.w	r2, r6, #4294967295
 8012e0a:	d04c      	beq.n	8012ea6 <_dtoa_r+0xa1e>
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	e051      	b.n	8012eb4 <_dtoa_r+0xa2c>
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f10a 0601 	add.w	r6, sl, #1
 8012e16:	dd05      	ble.n	8012e24 <_dtoa_r+0x99c>
 8012e18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e1c:	d0eb      	beq.n	8012df6 <_dtoa_r+0x96e>
 8012e1e:	f108 0801 	add.w	r8, r8, #1
 8012e22:	e7c5      	b.n	8012db0 <_dtoa_r+0x928>
 8012e24:	9b04      	ldr	r3, [sp, #16]
 8012e26:	9a06      	ldr	r2, [sp, #24]
 8012e28:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012e2c:	1af3      	subs	r3, r6, r3
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d021      	beq.n	8012e76 <_dtoa_r+0x9ee>
 8012e32:	2300      	movs	r3, #0
 8012e34:	220a      	movs	r2, #10
 8012e36:	9901      	ldr	r1, [sp, #4]
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 fde8 	bl	8013a0e <__multadd>
 8012e3e:	45b9      	cmp	r9, r7
 8012e40:	9001      	str	r0, [sp, #4]
 8012e42:	f04f 0300 	mov.w	r3, #0
 8012e46:	f04f 020a 	mov.w	r2, #10
 8012e4a:	4649      	mov	r1, r9
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	d105      	bne.n	8012e5c <_dtoa_r+0x9d4>
 8012e50:	f000 fddd 	bl	8013a0e <__multadd>
 8012e54:	4681      	mov	r9, r0
 8012e56:	4607      	mov	r7, r0
 8012e58:	46b2      	mov	sl, r6
 8012e5a:	e779      	b.n	8012d50 <_dtoa_r+0x8c8>
 8012e5c:	f000 fdd7 	bl	8013a0e <__multadd>
 8012e60:	4639      	mov	r1, r7
 8012e62:	4681      	mov	r9, r0
 8012e64:	2300      	movs	r3, #0
 8012e66:	220a      	movs	r2, #10
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 fdd0 	bl	8013a0e <__multadd>
 8012e6e:	4607      	mov	r7, r0
 8012e70:	e7f2      	b.n	8012e58 <_dtoa_r+0x9d0>
 8012e72:	f04f 0900 	mov.w	r9, #0
 8012e76:	2201      	movs	r2, #1
 8012e78:	9901      	ldr	r1, [sp, #4]
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f000 ff7c 	bl	8013d78 <__lshift>
 8012e80:	4629      	mov	r1, r5
 8012e82:	9001      	str	r0, [sp, #4]
 8012e84:	f000 ffcc 	bl	8013e20 <__mcmp>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	dcb9      	bgt.n	8012e00 <_dtoa_r+0x978>
 8012e8c:	d102      	bne.n	8012e94 <_dtoa_r+0xa0c>
 8012e8e:	f018 0f01 	tst.w	r8, #1
 8012e92:	d1b5      	bne.n	8012e00 <_dtoa_r+0x978>
 8012e94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e98:	2b30      	cmp	r3, #48	; 0x30
 8012e9a:	f106 32ff 	add.w	r2, r6, #4294967295
 8012e9e:	f47f af11 	bne.w	8012cc4 <_dtoa_r+0x83c>
 8012ea2:	4616      	mov	r6, r2
 8012ea4:	e7f6      	b.n	8012e94 <_dtoa_r+0xa0c>
 8012ea6:	9b04      	ldr	r3, [sp, #16]
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d105      	bne.n	8012eb8 <_dtoa_r+0xa30>
 8012eac:	9a04      	ldr	r2, [sp, #16]
 8012eae:	f10b 0b01 	add.w	fp, fp, #1
 8012eb2:	2331      	movs	r3, #49	; 0x31
 8012eb4:	7013      	strb	r3, [r2, #0]
 8012eb6:	e705      	b.n	8012cc4 <_dtoa_r+0x83c>
 8012eb8:	4616      	mov	r6, r2
 8012eba:	e7a1      	b.n	8012e00 <_dtoa_r+0x978>
 8012ebc:	4b16      	ldr	r3, [pc, #88]	; (8012f18 <_dtoa_r+0xa90>)
 8012ebe:	f7ff bb48 	b.w	8012552 <_dtoa_r+0xca>
 8012ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f47f ab23 	bne.w	8012510 <_dtoa_r+0x88>
 8012eca:	4b14      	ldr	r3, [pc, #80]	; (8012f1c <_dtoa_r+0xa94>)
 8012ecc:	f7ff bb41 	b.w	8012552 <_dtoa_r+0xca>
 8012ed0:	9b08      	ldr	r3, [sp, #32]
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	f77f ae3b 	ble.w	8012b4e <_dtoa_r+0x6c6>
 8012ed8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012edc:	e64f      	b.n	8012b7e <_dtoa_r+0x6f6>
 8012ede:	9b06      	ldr	r3, [sp, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	dc03      	bgt.n	8012eec <_dtoa_r+0xa64>
 8012ee4:	9b08      	ldr	r3, [sp, #32]
 8012ee6:	2b02      	cmp	r3, #2
 8012ee8:	f73f aed7 	bgt.w	8012c9a <_dtoa_r+0x812>
 8012eec:	9e04      	ldr	r6, [sp, #16]
 8012eee:	9801      	ldr	r0, [sp, #4]
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f7ff fa3b 	bl	801236c <quorem>
 8012ef6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012efa:	f806 8b01 	strb.w	r8, [r6], #1
 8012efe:	9b04      	ldr	r3, [sp, #16]
 8012f00:	9a06      	ldr	r2, [sp, #24]
 8012f02:	1af3      	subs	r3, r6, r3
 8012f04:	429a      	cmp	r2, r3
 8012f06:	ddb4      	ble.n	8012e72 <_dtoa_r+0x9ea>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	220a      	movs	r2, #10
 8012f0c:	9901      	ldr	r1, [sp, #4]
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 fd7d 	bl	8013a0e <__multadd>
 8012f14:	9001      	str	r0, [sp, #4]
 8012f16:	e7ea      	b.n	8012eee <_dtoa_r+0xa66>
 8012f18:	08014fec 	.word	0x08014fec
 8012f1c:	08015068 	.word	0x08015068

08012f20 <__sflush_r>:
 8012f20:	898a      	ldrh	r2, [r1, #12]
 8012f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f26:	4605      	mov	r5, r0
 8012f28:	0710      	lsls	r0, r2, #28
 8012f2a:	460c      	mov	r4, r1
 8012f2c:	d458      	bmi.n	8012fe0 <__sflush_r+0xc0>
 8012f2e:	684b      	ldr	r3, [r1, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	dc05      	bgt.n	8012f40 <__sflush_r+0x20>
 8012f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	dc02      	bgt.n	8012f40 <__sflush_r+0x20>
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f42:	2e00      	cmp	r6, #0
 8012f44:	d0f9      	beq.n	8012f3a <__sflush_r+0x1a>
 8012f46:	2300      	movs	r3, #0
 8012f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f4c:	682f      	ldr	r7, [r5, #0]
 8012f4e:	6a21      	ldr	r1, [r4, #32]
 8012f50:	602b      	str	r3, [r5, #0]
 8012f52:	d032      	beq.n	8012fba <__sflush_r+0x9a>
 8012f54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f56:	89a3      	ldrh	r3, [r4, #12]
 8012f58:	075a      	lsls	r2, r3, #29
 8012f5a:	d505      	bpl.n	8012f68 <__sflush_r+0x48>
 8012f5c:	6863      	ldr	r3, [r4, #4]
 8012f5e:	1ac0      	subs	r0, r0, r3
 8012f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f62:	b10b      	cbz	r3, 8012f68 <__sflush_r+0x48>
 8012f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f66:	1ac0      	subs	r0, r0, r3
 8012f68:	2300      	movs	r3, #0
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f6e:	6a21      	ldr	r1, [r4, #32]
 8012f70:	4628      	mov	r0, r5
 8012f72:	47b0      	blx	r6
 8012f74:	1c43      	adds	r3, r0, #1
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	d106      	bne.n	8012f88 <__sflush_r+0x68>
 8012f7a:	6829      	ldr	r1, [r5, #0]
 8012f7c:	291d      	cmp	r1, #29
 8012f7e:	d848      	bhi.n	8013012 <__sflush_r+0xf2>
 8012f80:	4a29      	ldr	r2, [pc, #164]	; (8013028 <__sflush_r+0x108>)
 8012f82:	40ca      	lsrs	r2, r1
 8012f84:	07d6      	lsls	r6, r2, #31
 8012f86:	d544      	bpl.n	8013012 <__sflush_r+0xf2>
 8012f88:	2200      	movs	r2, #0
 8012f8a:	6062      	str	r2, [r4, #4]
 8012f8c:	04d9      	lsls	r1, r3, #19
 8012f8e:	6922      	ldr	r2, [r4, #16]
 8012f90:	6022      	str	r2, [r4, #0]
 8012f92:	d504      	bpl.n	8012f9e <__sflush_r+0x7e>
 8012f94:	1c42      	adds	r2, r0, #1
 8012f96:	d101      	bne.n	8012f9c <__sflush_r+0x7c>
 8012f98:	682b      	ldr	r3, [r5, #0]
 8012f9a:	b903      	cbnz	r3, 8012f9e <__sflush_r+0x7e>
 8012f9c:	6560      	str	r0, [r4, #84]	; 0x54
 8012f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fa0:	602f      	str	r7, [r5, #0]
 8012fa2:	2900      	cmp	r1, #0
 8012fa4:	d0c9      	beq.n	8012f3a <__sflush_r+0x1a>
 8012fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012faa:	4299      	cmp	r1, r3
 8012fac:	d002      	beq.n	8012fb4 <__sflush_r+0x94>
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f7fd faea 	bl	8010588 <_free_r>
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	6360      	str	r0, [r4, #52]	; 0x34
 8012fb8:	e7c0      	b.n	8012f3c <__sflush_r+0x1c>
 8012fba:	2301      	movs	r3, #1
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	47b0      	blx	r6
 8012fc0:	1c41      	adds	r1, r0, #1
 8012fc2:	d1c8      	bne.n	8012f56 <__sflush_r+0x36>
 8012fc4:	682b      	ldr	r3, [r5, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d0c5      	beq.n	8012f56 <__sflush_r+0x36>
 8012fca:	2b1d      	cmp	r3, #29
 8012fcc:	d001      	beq.n	8012fd2 <__sflush_r+0xb2>
 8012fce:	2b16      	cmp	r3, #22
 8012fd0:	d101      	bne.n	8012fd6 <__sflush_r+0xb6>
 8012fd2:	602f      	str	r7, [r5, #0]
 8012fd4:	e7b1      	b.n	8012f3a <__sflush_r+0x1a>
 8012fd6:	89a3      	ldrh	r3, [r4, #12]
 8012fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fdc:	81a3      	strh	r3, [r4, #12]
 8012fde:	e7ad      	b.n	8012f3c <__sflush_r+0x1c>
 8012fe0:	690f      	ldr	r7, [r1, #16]
 8012fe2:	2f00      	cmp	r7, #0
 8012fe4:	d0a9      	beq.n	8012f3a <__sflush_r+0x1a>
 8012fe6:	0793      	lsls	r3, r2, #30
 8012fe8:	680e      	ldr	r6, [r1, #0]
 8012fea:	bf08      	it	eq
 8012fec:	694b      	ldreq	r3, [r1, #20]
 8012fee:	600f      	str	r7, [r1, #0]
 8012ff0:	bf18      	it	ne
 8012ff2:	2300      	movne	r3, #0
 8012ff4:	eba6 0807 	sub.w	r8, r6, r7
 8012ff8:	608b      	str	r3, [r1, #8]
 8012ffa:	f1b8 0f00 	cmp.w	r8, #0
 8012ffe:	dd9c      	ble.n	8012f3a <__sflush_r+0x1a>
 8013000:	4643      	mov	r3, r8
 8013002:	463a      	mov	r2, r7
 8013004:	6a21      	ldr	r1, [r4, #32]
 8013006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013008:	4628      	mov	r0, r5
 801300a:	47b0      	blx	r6
 801300c:	2800      	cmp	r0, #0
 801300e:	dc06      	bgt.n	801301e <__sflush_r+0xfe>
 8013010:	89a3      	ldrh	r3, [r4, #12]
 8013012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013016:	81a3      	strh	r3, [r4, #12]
 8013018:	f04f 30ff 	mov.w	r0, #4294967295
 801301c:	e78e      	b.n	8012f3c <__sflush_r+0x1c>
 801301e:	4407      	add	r7, r0
 8013020:	eba8 0800 	sub.w	r8, r8, r0
 8013024:	e7e9      	b.n	8012ffa <__sflush_r+0xda>
 8013026:	bf00      	nop
 8013028:	20400001 	.word	0x20400001

0801302c <_fflush_r>:
 801302c:	b538      	push	{r3, r4, r5, lr}
 801302e:	690b      	ldr	r3, [r1, #16]
 8013030:	4605      	mov	r5, r0
 8013032:	460c      	mov	r4, r1
 8013034:	b1db      	cbz	r3, 801306e <_fflush_r+0x42>
 8013036:	b118      	cbz	r0, 8013040 <_fflush_r+0x14>
 8013038:	6983      	ldr	r3, [r0, #24]
 801303a:	b90b      	cbnz	r3, 8013040 <_fflush_r+0x14>
 801303c:	f000 f860 	bl	8013100 <__sinit>
 8013040:	4b0c      	ldr	r3, [pc, #48]	; (8013074 <_fflush_r+0x48>)
 8013042:	429c      	cmp	r4, r3
 8013044:	d109      	bne.n	801305a <_fflush_r+0x2e>
 8013046:	686c      	ldr	r4, [r5, #4]
 8013048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801304c:	b17b      	cbz	r3, 801306e <_fflush_r+0x42>
 801304e:	4621      	mov	r1, r4
 8013050:	4628      	mov	r0, r5
 8013052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013056:	f7ff bf63 	b.w	8012f20 <__sflush_r>
 801305a:	4b07      	ldr	r3, [pc, #28]	; (8013078 <_fflush_r+0x4c>)
 801305c:	429c      	cmp	r4, r3
 801305e:	d101      	bne.n	8013064 <_fflush_r+0x38>
 8013060:	68ac      	ldr	r4, [r5, #8]
 8013062:	e7f1      	b.n	8013048 <_fflush_r+0x1c>
 8013064:	4b05      	ldr	r3, [pc, #20]	; (801307c <_fflush_r+0x50>)
 8013066:	429c      	cmp	r4, r3
 8013068:	bf08      	it	eq
 801306a:	68ec      	ldreq	r4, [r5, #12]
 801306c:	e7ec      	b.n	8013048 <_fflush_r+0x1c>
 801306e:	2000      	movs	r0, #0
 8013070:	bd38      	pop	{r3, r4, r5, pc}
 8013072:	bf00      	nop
 8013074:	08015098 	.word	0x08015098
 8013078:	080150b8 	.word	0x080150b8
 801307c:	08015078 	.word	0x08015078

08013080 <std>:
 8013080:	2300      	movs	r3, #0
 8013082:	b510      	push	{r4, lr}
 8013084:	4604      	mov	r4, r0
 8013086:	e9c0 3300 	strd	r3, r3, [r0]
 801308a:	6083      	str	r3, [r0, #8]
 801308c:	8181      	strh	r1, [r0, #12]
 801308e:	6643      	str	r3, [r0, #100]	; 0x64
 8013090:	81c2      	strh	r2, [r0, #14]
 8013092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013096:	6183      	str	r3, [r0, #24]
 8013098:	4619      	mov	r1, r3
 801309a:	2208      	movs	r2, #8
 801309c:	305c      	adds	r0, #92	; 0x5c
 801309e:	f7fd fa5c 	bl	801055a <memset>
 80130a2:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <std+0x38>)
 80130a4:	6263      	str	r3, [r4, #36]	; 0x24
 80130a6:	4b05      	ldr	r3, [pc, #20]	; (80130bc <std+0x3c>)
 80130a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80130aa:	4b05      	ldr	r3, [pc, #20]	; (80130c0 <std+0x40>)
 80130ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130ae:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <std+0x44>)
 80130b0:	6224      	str	r4, [r4, #32]
 80130b2:	6323      	str	r3, [r4, #48]	; 0x30
 80130b4:	bd10      	pop	{r4, pc}
 80130b6:	bf00      	nop
 80130b8:	0801469d 	.word	0x0801469d
 80130bc:	080146bf 	.word	0x080146bf
 80130c0:	080146f7 	.word	0x080146f7
 80130c4:	0801471b 	.word	0x0801471b

080130c8 <_cleanup_r>:
 80130c8:	4901      	ldr	r1, [pc, #4]	; (80130d0 <_cleanup_r+0x8>)
 80130ca:	f000 b885 	b.w	80131d8 <_fwalk_reent>
 80130ce:	bf00      	nop
 80130d0:	0801302d 	.word	0x0801302d

080130d4 <__sfmoreglue>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	1e4a      	subs	r2, r1, #1
 80130d8:	2568      	movs	r5, #104	; 0x68
 80130da:	4355      	muls	r5, r2
 80130dc:	460e      	mov	r6, r1
 80130de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130e2:	f7fd fa9f 	bl	8010624 <_malloc_r>
 80130e6:	4604      	mov	r4, r0
 80130e8:	b140      	cbz	r0, 80130fc <__sfmoreglue+0x28>
 80130ea:	2100      	movs	r1, #0
 80130ec:	e9c0 1600 	strd	r1, r6, [r0]
 80130f0:	300c      	adds	r0, #12
 80130f2:	60a0      	str	r0, [r4, #8]
 80130f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130f8:	f7fd fa2f 	bl	801055a <memset>
 80130fc:	4620      	mov	r0, r4
 80130fe:	bd70      	pop	{r4, r5, r6, pc}

08013100 <__sinit>:
 8013100:	6983      	ldr	r3, [r0, #24]
 8013102:	b510      	push	{r4, lr}
 8013104:	4604      	mov	r4, r0
 8013106:	bb33      	cbnz	r3, 8013156 <__sinit+0x56>
 8013108:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801310c:	6503      	str	r3, [r0, #80]	; 0x50
 801310e:	4b12      	ldr	r3, [pc, #72]	; (8013158 <__sinit+0x58>)
 8013110:	4a12      	ldr	r2, [pc, #72]	; (801315c <__sinit+0x5c>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6282      	str	r2, [r0, #40]	; 0x28
 8013116:	4298      	cmp	r0, r3
 8013118:	bf04      	itt	eq
 801311a:	2301      	moveq	r3, #1
 801311c:	6183      	streq	r3, [r0, #24]
 801311e:	f000 f81f 	bl	8013160 <__sfp>
 8013122:	6060      	str	r0, [r4, #4]
 8013124:	4620      	mov	r0, r4
 8013126:	f000 f81b 	bl	8013160 <__sfp>
 801312a:	60a0      	str	r0, [r4, #8]
 801312c:	4620      	mov	r0, r4
 801312e:	f000 f817 	bl	8013160 <__sfp>
 8013132:	2200      	movs	r2, #0
 8013134:	60e0      	str	r0, [r4, #12]
 8013136:	2104      	movs	r1, #4
 8013138:	6860      	ldr	r0, [r4, #4]
 801313a:	f7ff ffa1 	bl	8013080 <std>
 801313e:	2201      	movs	r2, #1
 8013140:	2109      	movs	r1, #9
 8013142:	68a0      	ldr	r0, [r4, #8]
 8013144:	f7ff ff9c 	bl	8013080 <std>
 8013148:	2202      	movs	r2, #2
 801314a:	2112      	movs	r1, #18
 801314c:	68e0      	ldr	r0, [r4, #12]
 801314e:	f7ff ff97 	bl	8013080 <std>
 8013152:	2301      	movs	r3, #1
 8013154:	61a3      	str	r3, [r4, #24]
 8013156:	bd10      	pop	{r4, pc}
 8013158:	08014fd8 	.word	0x08014fd8
 801315c:	080130c9 	.word	0x080130c9

08013160 <__sfp>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	4b1b      	ldr	r3, [pc, #108]	; (80131d0 <__sfp+0x70>)
 8013164:	681e      	ldr	r6, [r3, #0]
 8013166:	69b3      	ldr	r3, [r6, #24]
 8013168:	4607      	mov	r7, r0
 801316a:	b913      	cbnz	r3, 8013172 <__sfp+0x12>
 801316c:	4630      	mov	r0, r6
 801316e:	f7ff ffc7 	bl	8013100 <__sinit>
 8013172:	3648      	adds	r6, #72	; 0x48
 8013174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013178:	3b01      	subs	r3, #1
 801317a:	d503      	bpl.n	8013184 <__sfp+0x24>
 801317c:	6833      	ldr	r3, [r6, #0]
 801317e:	b133      	cbz	r3, 801318e <__sfp+0x2e>
 8013180:	6836      	ldr	r6, [r6, #0]
 8013182:	e7f7      	b.n	8013174 <__sfp+0x14>
 8013184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013188:	b16d      	cbz	r5, 80131a6 <__sfp+0x46>
 801318a:	3468      	adds	r4, #104	; 0x68
 801318c:	e7f4      	b.n	8013178 <__sfp+0x18>
 801318e:	2104      	movs	r1, #4
 8013190:	4638      	mov	r0, r7
 8013192:	f7ff ff9f 	bl	80130d4 <__sfmoreglue>
 8013196:	6030      	str	r0, [r6, #0]
 8013198:	2800      	cmp	r0, #0
 801319a:	d1f1      	bne.n	8013180 <__sfp+0x20>
 801319c:	230c      	movs	r3, #12
 801319e:	603b      	str	r3, [r7, #0]
 80131a0:	4604      	mov	r4, r0
 80131a2:	4620      	mov	r0, r4
 80131a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131a6:	4b0b      	ldr	r3, [pc, #44]	; (80131d4 <__sfp+0x74>)
 80131a8:	6665      	str	r5, [r4, #100]	; 0x64
 80131aa:	e9c4 5500 	strd	r5, r5, [r4]
 80131ae:	60a5      	str	r5, [r4, #8]
 80131b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80131b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80131b8:	2208      	movs	r2, #8
 80131ba:	4629      	mov	r1, r5
 80131bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131c0:	f7fd f9cb 	bl	801055a <memset>
 80131c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80131cc:	e7e9      	b.n	80131a2 <__sfp+0x42>
 80131ce:	bf00      	nop
 80131d0:	08014fd8 	.word	0x08014fd8
 80131d4:	ffff0001 	.word	0xffff0001

080131d8 <_fwalk_reent>:
 80131d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131dc:	4680      	mov	r8, r0
 80131de:	4689      	mov	r9, r1
 80131e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131e4:	2600      	movs	r6, #0
 80131e6:	b914      	cbnz	r4, 80131ee <_fwalk_reent+0x16>
 80131e8:	4630      	mov	r0, r6
 80131ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80131f2:	3f01      	subs	r7, #1
 80131f4:	d501      	bpl.n	80131fa <_fwalk_reent+0x22>
 80131f6:	6824      	ldr	r4, [r4, #0]
 80131f8:	e7f5      	b.n	80131e6 <_fwalk_reent+0xe>
 80131fa:	89ab      	ldrh	r3, [r5, #12]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d907      	bls.n	8013210 <_fwalk_reent+0x38>
 8013200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013204:	3301      	adds	r3, #1
 8013206:	d003      	beq.n	8013210 <_fwalk_reent+0x38>
 8013208:	4629      	mov	r1, r5
 801320a:	4640      	mov	r0, r8
 801320c:	47c8      	blx	r9
 801320e:	4306      	orrs	r6, r0
 8013210:	3568      	adds	r5, #104	; 0x68
 8013212:	e7ee      	b.n	80131f2 <_fwalk_reent+0x1a>

08013214 <rshift>:
 8013214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013216:	6906      	ldr	r6, [r0, #16]
 8013218:	114b      	asrs	r3, r1, #5
 801321a:	429e      	cmp	r6, r3
 801321c:	f100 0414 	add.w	r4, r0, #20
 8013220:	dd30      	ble.n	8013284 <rshift+0x70>
 8013222:	f011 011f 	ands.w	r1, r1, #31
 8013226:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801322a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801322e:	d108      	bne.n	8013242 <rshift+0x2e>
 8013230:	4621      	mov	r1, r4
 8013232:	42b2      	cmp	r2, r6
 8013234:	460b      	mov	r3, r1
 8013236:	d211      	bcs.n	801325c <rshift+0x48>
 8013238:	f852 3b04 	ldr.w	r3, [r2], #4
 801323c:	f841 3b04 	str.w	r3, [r1], #4
 8013240:	e7f7      	b.n	8013232 <rshift+0x1e>
 8013242:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013246:	f1c1 0c20 	rsb	ip, r1, #32
 801324a:	40cd      	lsrs	r5, r1
 801324c:	3204      	adds	r2, #4
 801324e:	4623      	mov	r3, r4
 8013250:	42b2      	cmp	r2, r6
 8013252:	4617      	mov	r7, r2
 8013254:	d30c      	bcc.n	8013270 <rshift+0x5c>
 8013256:	601d      	str	r5, [r3, #0]
 8013258:	b105      	cbz	r5, 801325c <rshift+0x48>
 801325a:	3304      	adds	r3, #4
 801325c:	1b1a      	subs	r2, r3, r4
 801325e:	42a3      	cmp	r3, r4
 8013260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013264:	bf08      	it	eq
 8013266:	2300      	moveq	r3, #0
 8013268:	6102      	str	r2, [r0, #16]
 801326a:	bf08      	it	eq
 801326c:	6143      	streq	r3, [r0, #20]
 801326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013270:	683f      	ldr	r7, [r7, #0]
 8013272:	fa07 f70c 	lsl.w	r7, r7, ip
 8013276:	433d      	orrs	r5, r7
 8013278:	f843 5b04 	str.w	r5, [r3], #4
 801327c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013280:	40cd      	lsrs	r5, r1
 8013282:	e7e5      	b.n	8013250 <rshift+0x3c>
 8013284:	4623      	mov	r3, r4
 8013286:	e7e9      	b.n	801325c <rshift+0x48>

08013288 <__hexdig_fun>:
 8013288:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801328c:	2b09      	cmp	r3, #9
 801328e:	d802      	bhi.n	8013296 <__hexdig_fun+0xe>
 8013290:	3820      	subs	r0, #32
 8013292:	b2c0      	uxtb	r0, r0
 8013294:	4770      	bx	lr
 8013296:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801329a:	2b05      	cmp	r3, #5
 801329c:	d801      	bhi.n	80132a2 <__hexdig_fun+0x1a>
 801329e:	3847      	subs	r0, #71	; 0x47
 80132a0:	e7f7      	b.n	8013292 <__hexdig_fun+0xa>
 80132a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80132a6:	2b05      	cmp	r3, #5
 80132a8:	d801      	bhi.n	80132ae <__hexdig_fun+0x26>
 80132aa:	3827      	subs	r0, #39	; 0x27
 80132ac:	e7f1      	b.n	8013292 <__hexdig_fun+0xa>
 80132ae:	2000      	movs	r0, #0
 80132b0:	4770      	bx	lr

080132b2 <__gethex>:
 80132b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b6:	b08b      	sub	sp, #44	; 0x2c
 80132b8:	468a      	mov	sl, r1
 80132ba:	9002      	str	r0, [sp, #8]
 80132bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80132be:	9306      	str	r3, [sp, #24]
 80132c0:	4690      	mov	r8, r2
 80132c2:	f000 fad0 	bl	8013866 <__localeconv_l>
 80132c6:	6803      	ldr	r3, [r0, #0]
 80132c8:	9303      	str	r3, [sp, #12]
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ec ffb8 	bl	8000240 <strlen>
 80132d0:	9b03      	ldr	r3, [sp, #12]
 80132d2:	9001      	str	r0, [sp, #4]
 80132d4:	4403      	add	r3, r0
 80132d6:	f04f 0b00 	mov.w	fp, #0
 80132da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80132de:	9307      	str	r3, [sp, #28]
 80132e0:	f8da 3000 	ldr.w	r3, [sl]
 80132e4:	3302      	adds	r3, #2
 80132e6:	461f      	mov	r7, r3
 80132e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80132ec:	2830      	cmp	r0, #48	; 0x30
 80132ee:	d06c      	beq.n	80133ca <__gethex+0x118>
 80132f0:	f7ff ffca 	bl	8013288 <__hexdig_fun>
 80132f4:	4604      	mov	r4, r0
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d16a      	bne.n	80133d0 <__gethex+0x11e>
 80132fa:	9a01      	ldr	r2, [sp, #4]
 80132fc:	9903      	ldr	r1, [sp, #12]
 80132fe:	4638      	mov	r0, r7
 8013300:	f001 fa0f 	bl	8014722 <strncmp>
 8013304:	2800      	cmp	r0, #0
 8013306:	d166      	bne.n	80133d6 <__gethex+0x124>
 8013308:	9b01      	ldr	r3, [sp, #4]
 801330a:	5cf8      	ldrb	r0, [r7, r3]
 801330c:	18fe      	adds	r6, r7, r3
 801330e:	f7ff ffbb 	bl	8013288 <__hexdig_fun>
 8013312:	2800      	cmp	r0, #0
 8013314:	d062      	beq.n	80133dc <__gethex+0x12a>
 8013316:	4633      	mov	r3, r6
 8013318:	7818      	ldrb	r0, [r3, #0]
 801331a:	2830      	cmp	r0, #48	; 0x30
 801331c:	461f      	mov	r7, r3
 801331e:	f103 0301 	add.w	r3, r3, #1
 8013322:	d0f9      	beq.n	8013318 <__gethex+0x66>
 8013324:	f7ff ffb0 	bl	8013288 <__hexdig_fun>
 8013328:	fab0 f580 	clz	r5, r0
 801332c:	096d      	lsrs	r5, r5, #5
 801332e:	4634      	mov	r4, r6
 8013330:	f04f 0b01 	mov.w	fp, #1
 8013334:	463a      	mov	r2, r7
 8013336:	4616      	mov	r6, r2
 8013338:	3201      	adds	r2, #1
 801333a:	7830      	ldrb	r0, [r6, #0]
 801333c:	f7ff ffa4 	bl	8013288 <__hexdig_fun>
 8013340:	2800      	cmp	r0, #0
 8013342:	d1f8      	bne.n	8013336 <__gethex+0x84>
 8013344:	9a01      	ldr	r2, [sp, #4]
 8013346:	9903      	ldr	r1, [sp, #12]
 8013348:	4630      	mov	r0, r6
 801334a:	f001 f9ea 	bl	8014722 <strncmp>
 801334e:	b950      	cbnz	r0, 8013366 <__gethex+0xb4>
 8013350:	b954      	cbnz	r4, 8013368 <__gethex+0xb6>
 8013352:	9b01      	ldr	r3, [sp, #4]
 8013354:	18f4      	adds	r4, r6, r3
 8013356:	4622      	mov	r2, r4
 8013358:	4616      	mov	r6, r2
 801335a:	3201      	adds	r2, #1
 801335c:	7830      	ldrb	r0, [r6, #0]
 801335e:	f7ff ff93 	bl	8013288 <__hexdig_fun>
 8013362:	2800      	cmp	r0, #0
 8013364:	d1f8      	bne.n	8013358 <__gethex+0xa6>
 8013366:	b10c      	cbz	r4, 801336c <__gethex+0xba>
 8013368:	1ba4      	subs	r4, r4, r6
 801336a:	00a4      	lsls	r4, r4, #2
 801336c:	7833      	ldrb	r3, [r6, #0]
 801336e:	2b50      	cmp	r3, #80	; 0x50
 8013370:	d001      	beq.n	8013376 <__gethex+0xc4>
 8013372:	2b70      	cmp	r3, #112	; 0x70
 8013374:	d140      	bne.n	80133f8 <__gethex+0x146>
 8013376:	7873      	ldrb	r3, [r6, #1]
 8013378:	2b2b      	cmp	r3, #43	; 0x2b
 801337a:	d031      	beq.n	80133e0 <__gethex+0x12e>
 801337c:	2b2d      	cmp	r3, #45	; 0x2d
 801337e:	d033      	beq.n	80133e8 <__gethex+0x136>
 8013380:	1c71      	adds	r1, r6, #1
 8013382:	f04f 0900 	mov.w	r9, #0
 8013386:	7808      	ldrb	r0, [r1, #0]
 8013388:	f7ff ff7e 	bl	8013288 <__hexdig_fun>
 801338c:	1e43      	subs	r3, r0, #1
 801338e:	b2db      	uxtb	r3, r3
 8013390:	2b18      	cmp	r3, #24
 8013392:	d831      	bhi.n	80133f8 <__gethex+0x146>
 8013394:	f1a0 0210 	sub.w	r2, r0, #16
 8013398:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801339c:	f7ff ff74 	bl	8013288 <__hexdig_fun>
 80133a0:	1e43      	subs	r3, r0, #1
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	2b18      	cmp	r3, #24
 80133a6:	d922      	bls.n	80133ee <__gethex+0x13c>
 80133a8:	f1b9 0f00 	cmp.w	r9, #0
 80133ac:	d000      	beq.n	80133b0 <__gethex+0xfe>
 80133ae:	4252      	negs	r2, r2
 80133b0:	4414      	add	r4, r2
 80133b2:	f8ca 1000 	str.w	r1, [sl]
 80133b6:	b30d      	cbz	r5, 80133fc <__gethex+0x14a>
 80133b8:	f1bb 0f00 	cmp.w	fp, #0
 80133bc:	bf0c      	ite	eq
 80133be:	2706      	moveq	r7, #6
 80133c0:	2700      	movne	r7, #0
 80133c2:	4638      	mov	r0, r7
 80133c4:	b00b      	add	sp, #44	; 0x2c
 80133c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ca:	f10b 0b01 	add.w	fp, fp, #1
 80133ce:	e78a      	b.n	80132e6 <__gethex+0x34>
 80133d0:	2500      	movs	r5, #0
 80133d2:	462c      	mov	r4, r5
 80133d4:	e7ae      	b.n	8013334 <__gethex+0x82>
 80133d6:	463e      	mov	r6, r7
 80133d8:	2501      	movs	r5, #1
 80133da:	e7c7      	b.n	801336c <__gethex+0xba>
 80133dc:	4604      	mov	r4, r0
 80133de:	e7fb      	b.n	80133d8 <__gethex+0x126>
 80133e0:	f04f 0900 	mov.w	r9, #0
 80133e4:	1cb1      	adds	r1, r6, #2
 80133e6:	e7ce      	b.n	8013386 <__gethex+0xd4>
 80133e8:	f04f 0901 	mov.w	r9, #1
 80133ec:	e7fa      	b.n	80133e4 <__gethex+0x132>
 80133ee:	230a      	movs	r3, #10
 80133f0:	fb03 0202 	mla	r2, r3, r2, r0
 80133f4:	3a10      	subs	r2, #16
 80133f6:	e7cf      	b.n	8013398 <__gethex+0xe6>
 80133f8:	4631      	mov	r1, r6
 80133fa:	e7da      	b.n	80133b2 <__gethex+0x100>
 80133fc:	1bf3      	subs	r3, r6, r7
 80133fe:	3b01      	subs	r3, #1
 8013400:	4629      	mov	r1, r5
 8013402:	2b07      	cmp	r3, #7
 8013404:	dc49      	bgt.n	801349a <__gethex+0x1e8>
 8013406:	9802      	ldr	r0, [sp, #8]
 8013408:	f000 fab6 	bl	8013978 <_Balloc>
 801340c:	9b01      	ldr	r3, [sp, #4]
 801340e:	f100 0914 	add.w	r9, r0, #20
 8013412:	f04f 0b00 	mov.w	fp, #0
 8013416:	f1c3 0301 	rsb	r3, r3, #1
 801341a:	4605      	mov	r5, r0
 801341c:	f8cd 9010 	str.w	r9, [sp, #16]
 8013420:	46da      	mov	sl, fp
 8013422:	9308      	str	r3, [sp, #32]
 8013424:	42b7      	cmp	r7, r6
 8013426:	d33b      	bcc.n	80134a0 <__gethex+0x1ee>
 8013428:	9804      	ldr	r0, [sp, #16]
 801342a:	f840 ab04 	str.w	sl, [r0], #4
 801342e:	eba0 0009 	sub.w	r0, r0, r9
 8013432:	1080      	asrs	r0, r0, #2
 8013434:	6128      	str	r0, [r5, #16]
 8013436:	0147      	lsls	r7, r0, #5
 8013438:	4650      	mov	r0, sl
 801343a:	f000 fb61 	bl	8013b00 <__hi0bits>
 801343e:	f8d8 6000 	ldr.w	r6, [r8]
 8013442:	1a3f      	subs	r7, r7, r0
 8013444:	42b7      	cmp	r7, r6
 8013446:	dd64      	ble.n	8013512 <__gethex+0x260>
 8013448:	1bbf      	subs	r7, r7, r6
 801344a:	4639      	mov	r1, r7
 801344c:	4628      	mov	r0, r5
 801344e:	f000 fe72 	bl	8014136 <__any_on>
 8013452:	4682      	mov	sl, r0
 8013454:	b178      	cbz	r0, 8013476 <__gethex+0x1c4>
 8013456:	1e7b      	subs	r3, r7, #1
 8013458:	1159      	asrs	r1, r3, #5
 801345a:	f003 021f 	and.w	r2, r3, #31
 801345e:	f04f 0a01 	mov.w	sl, #1
 8013462:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013466:	fa0a f202 	lsl.w	r2, sl, r2
 801346a:	420a      	tst	r2, r1
 801346c:	d003      	beq.n	8013476 <__gethex+0x1c4>
 801346e:	4553      	cmp	r3, sl
 8013470:	dc46      	bgt.n	8013500 <__gethex+0x24e>
 8013472:	f04f 0a02 	mov.w	sl, #2
 8013476:	4639      	mov	r1, r7
 8013478:	4628      	mov	r0, r5
 801347a:	f7ff fecb 	bl	8013214 <rshift>
 801347e:	443c      	add	r4, r7
 8013480:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013484:	42a3      	cmp	r3, r4
 8013486:	da52      	bge.n	801352e <__gethex+0x27c>
 8013488:	4629      	mov	r1, r5
 801348a:	9802      	ldr	r0, [sp, #8]
 801348c:	f000 faa8 	bl	80139e0 <_Bfree>
 8013490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013492:	2300      	movs	r3, #0
 8013494:	6013      	str	r3, [r2, #0]
 8013496:	27a3      	movs	r7, #163	; 0xa3
 8013498:	e793      	b.n	80133c2 <__gethex+0x110>
 801349a:	3101      	adds	r1, #1
 801349c:	105b      	asrs	r3, r3, #1
 801349e:	e7b0      	b.n	8013402 <__gethex+0x150>
 80134a0:	1e73      	subs	r3, r6, #1
 80134a2:	9305      	str	r3, [sp, #20]
 80134a4:	9a07      	ldr	r2, [sp, #28]
 80134a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d018      	beq.n	80134e0 <__gethex+0x22e>
 80134ae:	f1bb 0f20 	cmp.w	fp, #32
 80134b2:	d107      	bne.n	80134c4 <__gethex+0x212>
 80134b4:	9b04      	ldr	r3, [sp, #16]
 80134b6:	f8c3 a000 	str.w	sl, [r3]
 80134ba:	3304      	adds	r3, #4
 80134bc:	f04f 0a00 	mov.w	sl, #0
 80134c0:	9304      	str	r3, [sp, #16]
 80134c2:	46d3      	mov	fp, sl
 80134c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80134c8:	f7ff fede 	bl	8013288 <__hexdig_fun>
 80134cc:	f000 000f 	and.w	r0, r0, #15
 80134d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80134d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80134d8:	f10b 0b04 	add.w	fp, fp, #4
 80134dc:	9b05      	ldr	r3, [sp, #20]
 80134de:	e00d      	b.n	80134fc <__gethex+0x24a>
 80134e0:	9b05      	ldr	r3, [sp, #20]
 80134e2:	9a08      	ldr	r2, [sp, #32]
 80134e4:	4413      	add	r3, r2
 80134e6:	42bb      	cmp	r3, r7
 80134e8:	d3e1      	bcc.n	80134ae <__gethex+0x1fc>
 80134ea:	4618      	mov	r0, r3
 80134ec:	9a01      	ldr	r2, [sp, #4]
 80134ee:	9903      	ldr	r1, [sp, #12]
 80134f0:	9309      	str	r3, [sp, #36]	; 0x24
 80134f2:	f001 f916 	bl	8014722 <strncmp>
 80134f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d1d8      	bne.n	80134ae <__gethex+0x1fc>
 80134fc:	461e      	mov	r6, r3
 80134fe:	e791      	b.n	8013424 <__gethex+0x172>
 8013500:	1eb9      	subs	r1, r7, #2
 8013502:	4628      	mov	r0, r5
 8013504:	f000 fe17 	bl	8014136 <__any_on>
 8013508:	2800      	cmp	r0, #0
 801350a:	d0b2      	beq.n	8013472 <__gethex+0x1c0>
 801350c:	f04f 0a03 	mov.w	sl, #3
 8013510:	e7b1      	b.n	8013476 <__gethex+0x1c4>
 8013512:	da09      	bge.n	8013528 <__gethex+0x276>
 8013514:	1bf7      	subs	r7, r6, r7
 8013516:	4629      	mov	r1, r5
 8013518:	463a      	mov	r2, r7
 801351a:	9802      	ldr	r0, [sp, #8]
 801351c:	f000 fc2c 	bl	8013d78 <__lshift>
 8013520:	1be4      	subs	r4, r4, r7
 8013522:	4605      	mov	r5, r0
 8013524:	f100 0914 	add.w	r9, r0, #20
 8013528:	f04f 0a00 	mov.w	sl, #0
 801352c:	e7a8      	b.n	8013480 <__gethex+0x1ce>
 801352e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013532:	42a0      	cmp	r0, r4
 8013534:	dd6a      	ble.n	801360c <__gethex+0x35a>
 8013536:	1b04      	subs	r4, r0, r4
 8013538:	42a6      	cmp	r6, r4
 801353a:	dc2e      	bgt.n	801359a <__gethex+0x2e8>
 801353c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013540:	2b02      	cmp	r3, #2
 8013542:	d022      	beq.n	801358a <__gethex+0x2d8>
 8013544:	2b03      	cmp	r3, #3
 8013546:	d024      	beq.n	8013592 <__gethex+0x2e0>
 8013548:	2b01      	cmp	r3, #1
 801354a:	d115      	bne.n	8013578 <__gethex+0x2c6>
 801354c:	42a6      	cmp	r6, r4
 801354e:	d113      	bne.n	8013578 <__gethex+0x2c6>
 8013550:	2e01      	cmp	r6, #1
 8013552:	dc0b      	bgt.n	801356c <__gethex+0x2ba>
 8013554:	9a06      	ldr	r2, [sp, #24]
 8013556:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801355a:	6013      	str	r3, [r2, #0]
 801355c:	2301      	movs	r3, #1
 801355e:	612b      	str	r3, [r5, #16]
 8013560:	f8c9 3000 	str.w	r3, [r9]
 8013564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013566:	2762      	movs	r7, #98	; 0x62
 8013568:	601d      	str	r5, [r3, #0]
 801356a:	e72a      	b.n	80133c2 <__gethex+0x110>
 801356c:	1e71      	subs	r1, r6, #1
 801356e:	4628      	mov	r0, r5
 8013570:	f000 fde1 	bl	8014136 <__any_on>
 8013574:	2800      	cmp	r0, #0
 8013576:	d1ed      	bne.n	8013554 <__gethex+0x2a2>
 8013578:	4629      	mov	r1, r5
 801357a:	9802      	ldr	r0, [sp, #8]
 801357c:	f000 fa30 	bl	80139e0 <_Bfree>
 8013580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013582:	2300      	movs	r3, #0
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	2750      	movs	r7, #80	; 0x50
 8013588:	e71b      	b.n	80133c2 <__gethex+0x110>
 801358a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801358c:	2b00      	cmp	r3, #0
 801358e:	d0e1      	beq.n	8013554 <__gethex+0x2a2>
 8013590:	e7f2      	b.n	8013578 <__gethex+0x2c6>
 8013592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1dd      	bne.n	8013554 <__gethex+0x2a2>
 8013598:	e7ee      	b.n	8013578 <__gethex+0x2c6>
 801359a:	1e67      	subs	r7, r4, #1
 801359c:	f1ba 0f00 	cmp.w	sl, #0
 80135a0:	d131      	bne.n	8013606 <__gethex+0x354>
 80135a2:	b127      	cbz	r7, 80135ae <__gethex+0x2fc>
 80135a4:	4639      	mov	r1, r7
 80135a6:	4628      	mov	r0, r5
 80135a8:	f000 fdc5 	bl	8014136 <__any_on>
 80135ac:	4682      	mov	sl, r0
 80135ae:	117a      	asrs	r2, r7, #5
 80135b0:	2301      	movs	r3, #1
 80135b2:	f007 071f 	and.w	r7, r7, #31
 80135b6:	fa03 f707 	lsl.w	r7, r3, r7
 80135ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80135be:	4621      	mov	r1, r4
 80135c0:	421f      	tst	r7, r3
 80135c2:	4628      	mov	r0, r5
 80135c4:	bf18      	it	ne
 80135c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80135ca:	1b36      	subs	r6, r6, r4
 80135cc:	f7ff fe22 	bl	8013214 <rshift>
 80135d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80135d4:	2702      	movs	r7, #2
 80135d6:	f1ba 0f00 	cmp.w	sl, #0
 80135da:	d048      	beq.n	801366e <__gethex+0x3bc>
 80135dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80135e0:	2b02      	cmp	r3, #2
 80135e2:	d015      	beq.n	8013610 <__gethex+0x35e>
 80135e4:	2b03      	cmp	r3, #3
 80135e6:	d017      	beq.n	8013618 <__gethex+0x366>
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d109      	bne.n	8013600 <__gethex+0x34e>
 80135ec:	f01a 0f02 	tst.w	sl, #2
 80135f0:	d006      	beq.n	8013600 <__gethex+0x34e>
 80135f2:	f8d9 3000 	ldr.w	r3, [r9]
 80135f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80135fa:	f01a 0f01 	tst.w	sl, #1
 80135fe:	d10e      	bne.n	801361e <__gethex+0x36c>
 8013600:	f047 0710 	orr.w	r7, r7, #16
 8013604:	e033      	b.n	801366e <__gethex+0x3bc>
 8013606:	f04f 0a01 	mov.w	sl, #1
 801360a:	e7d0      	b.n	80135ae <__gethex+0x2fc>
 801360c:	2701      	movs	r7, #1
 801360e:	e7e2      	b.n	80135d6 <__gethex+0x324>
 8013610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013612:	f1c3 0301 	rsb	r3, r3, #1
 8013616:	9315      	str	r3, [sp, #84]	; 0x54
 8013618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801361a:	2b00      	cmp	r3, #0
 801361c:	d0f0      	beq.n	8013600 <__gethex+0x34e>
 801361e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013622:	f105 0314 	add.w	r3, r5, #20
 8013626:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801362a:	eb03 010a 	add.w	r1, r3, sl
 801362e:	f04f 0c00 	mov.w	ip, #0
 8013632:	4618      	mov	r0, r3
 8013634:	f853 2b04 	ldr.w	r2, [r3], #4
 8013638:	f1b2 3fff 	cmp.w	r2, #4294967295
 801363c:	d01c      	beq.n	8013678 <__gethex+0x3c6>
 801363e:	3201      	adds	r2, #1
 8013640:	6002      	str	r2, [r0, #0]
 8013642:	2f02      	cmp	r7, #2
 8013644:	f105 0314 	add.w	r3, r5, #20
 8013648:	d138      	bne.n	80136bc <__gethex+0x40a>
 801364a:	f8d8 2000 	ldr.w	r2, [r8]
 801364e:	3a01      	subs	r2, #1
 8013650:	42b2      	cmp	r2, r6
 8013652:	d10a      	bne.n	801366a <__gethex+0x3b8>
 8013654:	1171      	asrs	r1, r6, #5
 8013656:	2201      	movs	r2, #1
 8013658:	f006 061f 	and.w	r6, r6, #31
 801365c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013660:	fa02 f606 	lsl.w	r6, r2, r6
 8013664:	421e      	tst	r6, r3
 8013666:	bf18      	it	ne
 8013668:	4617      	movne	r7, r2
 801366a:	f047 0720 	orr.w	r7, r7, #32
 801366e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013670:	601d      	str	r5, [r3, #0]
 8013672:	9b06      	ldr	r3, [sp, #24]
 8013674:	601c      	str	r4, [r3, #0]
 8013676:	e6a4      	b.n	80133c2 <__gethex+0x110>
 8013678:	4299      	cmp	r1, r3
 801367a:	f843 cc04 	str.w	ip, [r3, #-4]
 801367e:	d8d8      	bhi.n	8013632 <__gethex+0x380>
 8013680:	68ab      	ldr	r3, [r5, #8]
 8013682:	4599      	cmp	r9, r3
 8013684:	db12      	blt.n	80136ac <__gethex+0x3fa>
 8013686:	6869      	ldr	r1, [r5, #4]
 8013688:	9802      	ldr	r0, [sp, #8]
 801368a:	3101      	adds	r1, #1
 801368c:	f000 f974 	bl	8013978 <_Balloc>
 8013690:	692a      	ldr	r2, [r5, #16]
 8013692:	3202      	adds	r2, #2
 8013694:	f105 010c 	add.w	r1, r5, #12
 8013698:	4683      	mov	fp, r0
 801369a:	0092      	lsls	r2, r2, #2
 801369c:	300c      	adds	r0, #12
 801369e:	f7fc ff51 	bl	8010544 <memcpy>
 80136a2:	4629      	mov	r1, r5
 80136a4:	9802      	ldr	r0, [sp, #8]
 80136a6:	f000 f99b 	bl	80139e0 <_Bfree>
 80136aa:	465d      	mov	r5, fp
 80136ac:	692b      	ldr	r3, [r5, #16]
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80136b4:	612a      	str	r2, [r5, #16]
 80136b6:	2201      	movs	r2, #1
 80136b8:	615a      	str	r2, [r3, #20]
 80136ba:	e7c2      	b.n	8013642 <__gethex+0x390>
 80136bc:	692a      	ldr	r2, [r5, #16]
 80136be:	454a      	cmp	r2, r9
 80136c0:	dd0b      	ble.n	80136da <__gethex+0x428>
 80136c2:	2101      	movs	r1, #1
 80136c4:	4628      	mov	r0, r5
 80136c6:	f7ff fda5 	bl	8013214 <rshift>
 80136ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80136ce:	3401      	adds	r4, #1
 80136d0:	42a3      	cmp	r3, r4
 80136d2:	f6ff aed9 	blt.w	8013488 <__gethex+0x1d6>
 80136d6:	2701      	movs	r7, #1
 80136d8:	e7c7      	b.n	801366a <__gethex+0x3b8>
 80136da:	f016 061f 	ands.w	r6, r6, #31
 80136de:	d0fa      	beq.n	80136d6 <__gethex+0x424>
 80136e0:	449a      	add	sl, r3
 80136e2:	f1c6 0620 	rsb	r6, r6, #32
 80136e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80136ea:	f000 fa09 	bl	8013b00 <__hi0bits>
 80136ee:	42b0      	cmp	r0, r6
 80136f0:	dbe7      	blt.n	80136c2 <__gethex+0x410>
 80136f2:	e7f0      	b.n	80136d6 <__gethex+0x424>

080136f4 <L_shift>:
 80136f4:	f1c2 0208 	rsb	r2, r2, #8
 80136f8:	0092      	lsls	r2, r2, #2
 80136fa:	b570      	push	{r4, r5, r6, lr}
 80136fc:	f1c2 0620 	rsb	r6, r2, #32
 8013700:	6843      	ldr	r3, [r0, #4]
 8013702:	6804      	ldr	r4, [r0, #0]
 8013704:	fa03 f506 	lsl.w	r5, r3, r6
 8013708:	432c      	orrs	r4, r5
 801370a:	40d3      	lsrs	r3, r2
 801370c:	6004      	str	r4, [r0, #0]
 801370e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013712:	4288      	cmp	r0, r1
 8013714:	d3f4      	bcc.n	8013700 <L_shift+0xc>
 8013716:	bd70      	pop	{r4, r5, r6, pc}

08013718 <__match>:
 8013718:	b530      	push	{r4, r5, lr}
 801371a:	6803      	ldr	r3, [r0, #0]
 801371c:	3301      	adds	r3, #1
 801371e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013722:	b914      	cbnz	r4, 801372a <__match+0x12>
 8013724:	6003      	str	r3, [r0, #0]
 8013726:	2001      	movs	r0, #1
 8013728:	bd30      	pop	{r4, r5, pc}
 801372a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801372e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013732:	2d19      	cmp	r5, #25
 8013734:	bf98      	it	ls
 8013736:	3220      	addls	r2, #32
 8013738:	42a2      	cmp	r2, r4
 801373a:	d0f0      	beq.n	801371e <__match+0x6>
 801373c:	2000      	movs	r0, #0
 801373e:	e7f3      	b.n	8013728 <__match+0x10>

08013740 <__hexnan>:
 8013740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013744:	680b      	ldr	r3, [r1, #0]
 8013746:	6801      	ldr	r1, [r0, #0]
 8013748:	115f      	asrs	r7, r3, #5
 801374a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801374e:	f013 031f 	ands.w	r3, r3, #31
 8013752:	b087      	sub	sp, #28
 8013754:	bf18      	it	ne
 8013756:	3704      	addne	r7, #4
 8013758:	2500      	movs	r5, #0
 801375a:	1f3e      	subs	r6, r7, #4
 801375c:	4682      	mov	sl, r0
 801375e:	4690      	mov	r8, r2
 8013760:	9301      	str	r3, [sp, #4]
 8013762:	f847 5c04 	str.w	r5, [r7, #-4]
 8013766:	46b1      	mov	r9, r6
 8013768:	4634      	mov	r4, r6
 801376a:	9502      	str	r5, [sp, #8]
 801376c:	46ab      	mov	fp, r5
 801376e:	784a      	ldrb	r2, [r1, #1]
 8013770:	1c4b      	adds	r3, r1, #1
 8013772:	9303      	str	r3, [sp, #12]
 8013774:	b342      	cbz	r2, 80137c8 <__hexnan+0x88>
 8013776:	4610      	mov	r0, r2
 8013778:	9105      	str	r1, [sp, #20]
 801377a:	9204      	str	r2, [sp, #16]
 801377c:	f7ff fd84 	bl	8013288 <__hexdig_fun>
 8013780:	2800      	cmp	r0, #0
 8013782:	d143      	bne.n	801380c <__hexnan+0xcc>
 8013784:	9a04      	ldr	r2, [sp, #16]
 8013786:	9905      	ldr	r1, [sp, #20]
 8013788:	2a20      	cmp	r2, #32
 801378a:	d818      	bhi.n	80137be <__hexnan+0x7e>
 801378c:	9b02      	ldr	r3, [sp, #8]
 801378e:	459b      	cmp	fp, r3
 8013790:	dd13      	ble.n	80137ba <__hexnan+0x7a>
 8013792:	454c      	cmp	r4, r9
 8013794:	d206      	bcs.n	80137a4 <__hexnan+0x64>
 8013796:	2d07      	cmp	r5, #7
 8013798:	dc04      	bgt.n	80137a4 <__hexnan+0x64>
 801379a:	462a      	mov	r2, r5
 801379c:	4649      	mov	r1, r9
 801379e:	4620      	mov	r0, r4
 80137a0:	f7ff ffa8 	bl	80136f4 <L_shift>
 80137a4:	4544      	cmp	r4, r8
 80137a6:	d944      	bls.n	8013832 <__hexnan+0xf2>
 80137a8:	2300      	movs	r3, #0
 80137aa:	f1a4 0904 	sub.w	r9, r4, #4
 80137ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80137b2:	f8cd b008 	str.w	fp, [sp, #8]
 80137b6:	464c      	mov	r4, r9
 80137b8:	461d      	mov	r5, r3
 80137ba:	9903      	ldr	r1, [sp, #12]
 80137bc:	e7d7      	b.n	801376e <__hexnan+0x2e>
 80137be:	2a29      	cmp	r2, #41	; 0x29
 80137c0:	d14a      	bne.n	8013858 <__hexnan+0x118>
 80137c2:	3102      	adds	r1, #2
 80137c4:	f8ca 1000 	str.w	r1, [sl]
 80137c8:	f1bb 0f00 	cmp.w	fp, #0
 80137cc:	d044      	beq.n	8013858 <__hexnan+0x118>
 80137ce:	454c      	cmp	r4, r9
 80137d0:	d206      	bcs.n	80137e0 <__hexnan+0xa0>
 80137d2:	2d07      	cmp	r5, #7
 80137d4:	dc04      	bgt.n	80137e0 <__hexnan+0xa0>
 80137d6:	462a      	mov	r2, r5
 80137d8:	4649      	mov	r1, r9
 80137da:	4620      	mov	r0, r4
 80137dc:	f7ff ff8a 	bl	80136f4 <L_shift>
 80137e0:	4544      	cmp	r4, r8
 80137e2:	d928      	bls.n	8013836 <__hexnan+0xf6>
 80137e4:	4643      	mov	r3, r8
 80137e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80137ea:	f843 2b04 	str.w	r2, [r3], #4
 80137ee:	42a6      	cmp	r6, r4
 80137f0:	d2f9      	bcs.n	80137e6 <__hexnan+0xa6>
 80137f2:	2200      	movs	r2, #0
 80137f4:	f843 2b04 	str.w	r2, [r3], #4
 80137f8:	429e      	cmp	r6, r3
 80137fa:	d2fb      	bcs.n	80137f4 <__hexnan+0xb4>
 80137fc:	6833      	ldr	r3, [r6, #0]
 80137fe:	b91b      	cbnz	r3, 8013808 <__hexnan+0xc8>
 8013800:	4546      	cmp	r6, r8
 8013802:	d127      	bne.n	8013854 <__hexnan+0x114>
 8013804:	2301      	movs	r3, #1
 8013806:	6033      	str	r3, [r6, #0]
 8013808:	2005      	movs	r0, #5
 801380a:	e026      	b.n	801385a <__hexnan+0x11a>
 801380c:	3501      	adds	r5, #1
 801380e:	2d08      	cmp	r5, #8
 8013810:	f10b 0b01 	add.w	fp, fp, #1
 8013814:	dd06      	ble.n	8013824 <__hexnan+0xe4>
 8013816:	4544      	cmp	r4, r8
 8013818:	d9cf      	bls.n	80137ba <__hexnan+0x7a>
 801381a:	2300      	movs	r3, #0
 801381c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013820:	2501      	movs	r5, #1
 8013822:	3c04      	subs	r4, #4
 8013824:	6822      	ldr	r2, [r4, #0]
 8013826:	f000 000f 	and.w	r0, r0, #15
 801382a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801382e:	6020      	str	r0, [r4, #0]
 8013830:	e7c3      	b.n	80137ba <__hexnan+0x7a>
 8013832:	2508      	movs	r5, #8
 8013834:	e7c1      	b.n	80137ba <__hexnan+0x7a>
 8013836:	9b01      	ldr	r3, [sp, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d0df      	beq.n	80137fc <__hexnan+0xbc>
 801383c:	f04f 32ff 	mov.w	r2, #4294967295
 8013840:	f1c3 0320 	rsb	r3, r3, #32
 8013844:	fa22 f303 	lsr.w	r3, r2, r3
 8013848:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801384c:	401a      	ands	r2, r3
 801384e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013852:	e7d3      	b.n	80137fc <__hexnan+0xbc>
 8013854:	3e04      	subs	r6, #4
 8013856:	e7d1      	b.n	80137fc <__hexnan+0xbc>
 8013858:	2004      	movs	r0, #4
 801385a:	b007      	add	sp, #28
 801385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013860 <__locale_ctype_ptr_l>:
 8013860:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013864:	4770      	bx	lr

08013866 <__localeconv_l>:
 8013866:	30f0      	adds	r0, #240	; 0xf0
 8013868:	4770      	bx	lr
	...

0801386c <_localeconv_r>:
 801386c:	4b04      	ldr	r3, [pc, #16]	; (8013880 <_localeconv_r+0x14>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	6a18      	ldr	r0, [r3, #32]
 8013872:	4b04      	ldr	r3, [pc, #16]	; (8013884 <_localeconv_r+0x18>)
 8013874:	2800      	cmp	r0, #0
 8013876:	bf08      	it	eq
 8013878:	4618      	moveq	r0, r3
 801387a:	30f0      	adds	r0, #240	; 0xf0
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	20000378 	.word	0x20000378
 8013884:	200003dc 	.word	0x200003dc

08013888 <__swhatbuf_r>:
 8013888:	b570      	push	{r4, r5, r6, lr}
 801388a:	460e      	mov	r6, r1
 801388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013890:	2900      	cmp	r1, #0
 8013892:	b096      	sub	sp, #88	; 0x58
 8013894:	4614      	mov	r4, r2
 8013896:	461d      	mov	r5, r3
 8013898:	da07      	bge.n	80138aa <__swhatbuf_r+0x22>
 801389a:	2300      	movs	r3, #0
 801389c:	602b      	str	r3, [r5, #0]
 801389e:	89b3      	ldrh	r3, [r6, #12]
 80138a0:	061a      	lsls	r2, r3, #24
 80138a2:	d410      	bmi.n	80138c6 <__swhatbuf_r+0x3e>
 80138a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138a8:	e00e      	b.n	80138c8 <__swhatbuf_r+0x40>
 80138aa:	466a      	mov	r2, sp
 80138ac:	f000 ff7a 	bl	80147a4 <_fstat_r>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	dbf2      	blt.n	801389a <__swhatbuf_r+0x12>
 80138b4:	9a01      	ldr	r2, [sp, #4]
 80138b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138be:	425a      	negs	r2, r3
 80138c0:	415a      	adcs	r2, r3
 80138c2:	602a      	str	r2, [r5, #0]
 80138c4:	e7ee      	b.n	80138a4 <__swhatbuf_r+0x1c>
 80138c6:	2340      	movs	r3, #64	; 0x40
 80138c8:	2000      	movs	r0, #0
 80138ca:	6023      	str	r3, [r4, #0]
 80138cc:	b016      	add	sp, #88	; 0x58
 80138ce:	bd70      	pop	{r4, r5, r6, pc}

080138d0 <__smakebuf_r>:
 80138d0:	898b      	ldrh	r3, [r1, #12]
 80138d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138d4:	079d      	lsls	r5, r3, #30
 80138d6:	4606      	mov	r6, r0
 80138d8:	460c      	mov	r4, r1
 80138da:	d507      	bpl.n	80138ec <__smakebuf_r+0x1c>
 80138dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	6123      	str	r3, [r4, #16]
 80138e4:	2301      	movs	r3, #1
 80138e6:	6163      	str	r3, [r4, #20]
 80138e8:	b002      	add	sp, #8
 80138ea:	bd70      	pop	{r4, r5, r6, pc}
 80138ec:	ab01      	add	r3, sp, #4
 80138ee:	466a      	mov	r2, sp
 80138f0:	f7ff ffca 	bl	8013888 <__swhatbuf_r>
 80138f4:	9900      	ldr	r1, [sp, #0]
 80138f6:	4605      	mov	r5, r0
 80138f8:	4630      	mov	r0, r6
 80138fa:	f7fc fe93 	bl	8010624 <_malloc_r>
 80138fe:	b948      	cbnz	r0, 8013914 <__smakebuf_r+0x44>
 8013900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013904:	059a      	lsls	r2, r3, #22
 8013906:	d4ef      	bmi.n	80138e8 <__smakebuf_r+0x18>
 8013908:	f023 0303 	bic.w	r3, r3, #3
 801390c:	f043 0302 	orr.w	r3, r3, #2
 8013910:	81a3      	strh	r3, [r4, #12]
 8013912:	e7e3      	b.n	80138dc <__smakebuf_r+0xc>
 8013914:	4b0d      	ldr	r3, [pc, #52]	; (801394c <__smakebuf_r+0x7c>)
 8013916:	62b3      	str	r3, [r6, #40]	; 0x28
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	6020      	str	r0, [r4, #0]
 801391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013920:	81a3      	strh	r3, [r4, #12]
 8013922:	9b00      	ldr	r3, [sp, #0]
 8013924:	6163      	str	r3, [r4, #20]
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	6120      	str	r0, [r4, #16]
 801392a:	b15b      	cbz	r3, 8013944 <__smakebuf_r+0x74>
 801392c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013930:	4630      	mov	r0, r6
 8013932:	f000 ff49 	bl	80147c8 <_isatty_r>
 8013936:	b128      	cbz	r0, 8013944 <__smakebuf_r+0x74>
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	f023 0303 	bic.w	r3, r3, #3
 801393e:	f043 0301 	orr.w	r3, r3, #1
 8013942:	81a3      	strh	r3, [r4, #12]
 8013944:	89a3      	ldrh	r3, [r4, #12]
 8013946:	431d      	orrs	r5, r3
 8013948:	81a5      	strh	r5, [r4, #12]
 801394a:	e7cd      	b.n	80138e8 <__smakebuf_r+0x18>
 801394c:	080130c9 	.word	0x080130c9

08013950 <__ascii_mbtowc>:
 8013950:	b082      	sub	sp, #8
 8013952:	b901      	cbnz	r1, 8013956 <__ascii_mbtowc+0x6>
 8013954:	a901      	add	r1, sp, #4
 8013956:	b142      	cbz	r2, 801396a <__ascii_mbtowc+0x1a>
 8013958:	b14b      	cbz	r3, 801396e <__ascii_mbtowc+0x1e>
 801395a:	7813      	ldrb	r3, [r2, #0]
 801395c:	600b      	str	r3, [r1, #0]
 801395e:	7812      	ldrb	r2, [r2, #0]
 8013960:	1c10      	adds	r0, r2, #0
 8013962:	bf18      	it	ne
 8013964:	2001      	movne	r0, #1
 8013966:	b002      	add	sp, #8
 8013968:	4770      	bx	lr
 801396a:	4610      	mov	r0, r2
 801396c:	e7fb      	b.n	8013966 <__ascii_mbtowc+0x16>
 801396e:	f06f 0001 	mvn.w	r0, #1
 8013972:	e7f8      	b.n	8013966 <__ascii_mbtowc+0x16>

08013974 <__malloc_lock>:
 8013974:	4770      	bx	lr

08013976 <__malloc_unlock>:
 8013976:	4770      	bx	lr

08013978 <_Balloc>:
 8013978:	b570      	push	{r4, r5, r6, lr}
 801397a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801397c:	4604      	mov	r4, r0
 801397e:	460e      	mov	r6, r1
 8013980:	b93d      	cbnz	r5, 8013992 <_Balloc+0x1a>
 8013982:	2010      	movs	r0, #16
 8013984:	f7fc fdd6 	bl	8010534 <malloc>
 8013988:	6260      	str	r0, [r4, #36]	; 0x24
 801398a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801398e:	6005      	str	r5, [r0, #0]
 8013990:	60c5      	str	r5, [r0, #12]
 8013992:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013994:	68eb      	ldr	r3, [r5, #12]
 8013996:	b183      	cbz	r3, 80139ba <_Balloc+0x42>
 8013998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80139a0:	b9b8      	cbnz	r0, 80139d2 <_Balloc+0x5a>
 80139a2:	2101      	movs	r1, #1
 80139a4:	fa01 f506 	lsl.w	r5, r1, r6
 80139a8:	1d6a      	adds	r2, r5, #5
 80139aa:	0092      	lsls	r2, r2, #2
 80139ac:	4620      	mov	r0, r4
 80139ae:	f7fc fddc 	bl	801056a <_calloc_r>
 80139b2:	b160      	cbz	r0, 80139ce <_Balloc+0x56>
 80139b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80139b8:	e00e      	b.n	80139d8 <_Balloc+0x60>
 80139ba:	2221      	movs	r2, #33	; 0x21
 80139bc:	2104      	movs	r1, #4
 80139be:	4620      	mov	r0, r4
 80139c0:	f7fc fdd3 	bl	801056a <_calloc_r>
 80139c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139c6:	60e8      	str	r0, [r5, #12]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d1e4      	bne.n	8013998 <_Balloc+0x20>
 80139ce:	2000      	movs	r0, #0
 80139d0:	bd70      	pop	{r4, r5, r6, pc}
 80139d2:	6802      	ldr	r2, [r0, #0]
 80139d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80139d8:	2300      	movs	r3, #0
 80139da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80139de:	e7f7      	b.n	80139d0 <_Balloc+0x58>

080139e0 <_Bfree>:
 80139e0:	b570      	push	{r4, r5, r6, lr}
 80139e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80139e4:	4606      	mov	r6, r0
 80139e6:	460d      	mov	r5, r1
 80139e8:	b93c      	cbnz	r4, 80139fa <_Bfree+0x1a>
 80139ea:	2010      	movs	r0, #16
 80139ec:	f7fc fda2 	bl	8010534 <malloc>
 80139f0:	6270      	str	r0, [r6, #36]	; 0x24
 80139f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139f6:	6004      	str	r4, [r0, #0]
 80139f8:	60c4      	str	r4, [r0, #12]
 80139fa:	b13d      	cbz	r5, 8013a0c <_Bfree+0x2c>
 80139fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80139fe:	686a      	ldr	r2, [r5, #4]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a06:	6029      	str	r1, [r5, #0]
 8013a08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013a0c:	bd70      	pop	{r4, r5, r6, pc}

08013a0e <__multadd>:
 8013a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a12:	690d      	ldr	r5, [r1, #16]
 8013a14:	461f      	mov	r7, r3
 8013a16:	4606      	mov	r6, r0
 8013a18:	460c      	mov	r4, r1
 8013a1a:	f101 0c14 	add.w	ip, r1, #20
 8013a1e:	2300      	movs	r3, #0
 8013a20:	f8dc 0000 	ldr.w	r0, [ip]
 8013a24:	b281      	uxth	r1, r0
 8013a26:	fb02 7101 	mla	r1, r2, r1, r7
 8013a2a:	0c0f      	lsrs	r7, r1, #16
 8013a2c:	0c00      	lsrs	r0, r0, #16
 8013a2e:	fb02 7000 	mla	r0, r2, r0, r7
 8013a32:	b289      	uxth	r1, r1
 8013a34:	3301      	adds	r3, #1
 8013a36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013a3a:	429d      	cmp	r5, r3
 8013a3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013a40:	f84c 1b04 	str.w	r1, [ip], #4
 8013a44:	dcec      	bgt.n	8013a20 <__multadd+0x12>
 8013a46:	b1d7      	cbz	r7, 8013a7e <__multadd+0x70>
 8013a48:	68a3      	ldr	r3, [r4, #8]
 8013a4a:	42ab      	cmp	r3, r5
 8013a4c:	dc12      	bgt.n	8013a74 <__multadd+0x66>
 8013a4e:	6861      	ldr	r1, [r4, #4]
 8013a50:	4630      	mov	r0, r6
 8013a52:	3101      	adds	r1, #1
 8013a54:	f7ff ff90 	bl	8013978 <_Balloc>
 8013a58:	6922      	ldr	r2, [r4, #16]
 8013a5a:	3202      	adds	r2, #2
 8013a5c:	f104 010c 	add.w	r1, r4, #12
 8013a60:	4680      	mov	r8, r0
 8013a62:	0092      	lsls	r2, r2, #2
 8013a64:	300c      	adds	r0, #12
 8013a66:	f7fc fd6d 	bl	8010544 <memcpy>
 8013a6a:	4621      	mov	r1, r4
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	f7ff ffb7 	bl	80139e0 <_Bfree>
 8013a72:	4644      	mov	r4, r8
 8013a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a78:	3501      	adds	r5, #1
 8013a7a:	615f      	str	r7, [r3, #20]
 8013a7c:	6125      	str	r5, [r4, #16]
 8013a7e:	4620      	mov	r0, r4
 8013a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a84 <__s2b>:
 8013a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a88:	460c      	mov	r4, r1
 8013a8a:	4615      	mov	r5, r2
 8013a8c:	461f      	mov	r7, r3
 8013a8e:	2209      	movs	r2, #9
 8013a90:	3308      	adds	r3, #8
 8013a92:	4606      	mov	r6, r0
 8013a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a98:	2100      	movs	r1, #0
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	db20      	blt.n	8013ae2 <__s2b+0x5e>
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f7ff ff69 	bl	8013978 <_Balloc>
 8013aa6:	9b08      	ldr	r3, [sp, #32]
 8013aa8:	6143      	str	r3, [r0, #20]
 8013aaa:	2d09      	cmp	r5, #9
 8013aac:	f04f 0301 	mov.w	r3, #1
 8013ab0:	6103      	str	r3, [r0, #16]
 8013ab2:	dd19      	ble.n	8013ae8 <__s2b+0x64>
 8013ab4:	f104 0809 	add.w	r8, r4, #9
 8013ab8:	46c1      	mov	r9, r8
 8013aba:	442c      	add	r4, r5
 8013abc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013ac0:	4601      	mov	r1, r0
 8013ac2:	3b30      	subs	r3, #48	; 0x30
 8013ac4:	220a      	movs	r2, #10
 8013ac6:	4630      	mov	r0, r6
 8013ac8:	f7ff ffa1 	bl	8013a0e <__multadd>
 8013acc:	45a1      	cmp	r9, r4
 8013ace:	d1f5      	bne.n	8013abc <__s2b+0x38>
 8013ad0:	eb08 0405 	add.w	r4, r8, r5
 8013ad4:	3c08      	subs	r4, #8
 8013ad6:	1b2d      	subs	r5, r5, r4
 8013ad8:	1963      	adds	r3, r4, r5
 8013ada:	42bb      	cmp	r3, r7
 8013adc:	db07      	blt.n	8013aee <__s2b+0x6a>
 8013ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ae2:	0052      	lsls	r2, r2, #1
 8013ae4:	3101      	adds	r1, #1
 8013ae6:	e7d9      	b.n	8013a9c <__s2b+0x18>
 8013ae8:	340a      	adds	r4, #10
 8013aea:	2509      	movs	r5, #9
 8013aec:	e7f3      	b.n	8013ad6 <__s2b+0x52>
 8013aee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013af2:	4601      	mov	r1, r0
 8013af4:	3b30      	subs	r3, #48	; 0x30
 8013af6:	220a      	movs	r2, #10
 8013af8:	4630      	mov	r0, r6
 8013afa:	f7ff ff88 	bl	8013a0e <__multadd>
 8013afe:	e7eb      	b.n	8013ad8 <__s2b+0x54>

08013b00 <__hi0bits>:
 8013b00:	0c02      	lsrs	r2, r0, #16
 8013b02:	0412      	lsls	r2, r2, #16
 8013b04:	4603      	mov	r3, r0
 8013b06:	b9b2      	cbnz	r2, 8013b36 <__hi0bits+0x36>
 8013b08:	0403      	lsls	r3, r0, #16
 8013b0a:	2010      	movs	r0, #16
 8013b0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013b10:	bf04      	itt	eq
 8013b12:	021b      	lsleq	r3, r3, #8
 8013b14:	3008      	addeq	r0, #8
 8013b16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013b1a:	bf04      	itt	eq
 8013b1c:	011b      	lsleq	r3, r3, #4
 8013b1e:	3004      	addeq	r0, #4
 8013b20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013b24:	bf04      	itt	eq
 8013b26:	009b      	lsleq	r3, r3, #2
 8013b28:	3002      	addeq	r0, #2
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	db06      	blt.n	8013b3c <__hi0bits+0x3c>
 8013b2e:	005b      	lsls	r3, r3, #1
 8013b30:	d503      	bpl.n	8013b3a <__hi0bits+0x3a>
 8013b32:	3001      	adds	r0, #1
 8013b34:	4770      	bx	lr
 8013b36:	2000      	movs	r0, #0
 8013b38:	e7e8      	b.n	8013b0c <__hi0bits+0xc>
 8013b3a:	2020      	movs	r0, #32
 8013b3c:	4770      	bx	lr

08013b3e <__lo0bits>:
 8013b3e:	6803      	ldr	r3, [r0, #0]
 8013b40:	f013 0207 	ands.w	r2, r3, #7
 8013b44:	4601      	mov	r1, r0
 8013b46:	d00b      	beq.n	8013b60 <__lo0bits+0x22>
 8013b48:	07da      	lsls	r2, r3, #31
 8013b4a:	d423      	bmi.n	8013b94 <__lo0bits+0x56>
 8013b4c:	0798      	lsls	r0, r3, #30
 8013b4e:	bf49      	itett	mi
 8013b50:	085b      	lsrmi	r3, r3, #1
 8013b52:	089b      	lsrpl	r3, r3, #2
 8013b54:	2001      	movmi	r0, #1
 8013b56:	600b      	strmi	r3, [r1, #0]
 8013b58:	bf5c      	itt	pl
 8013b5a:	600b      	strpl	r3, [r1, #0]
 8013b5c:	2002      	movpl	r0, #2
 8013b5e:	4770      	bx	lr
 8013b60:	b298      	uxth	r0, r3
 8013b62:	b9a8      	cbnz	r0, 8013b90 <__lo0bits+0x52>
 8013b64:	0c1b      	lsrs	r3, r3, #16
 8013b66:	2010      	movs	r0, #16
 8013b68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013b6c:	bf04      	itt	eq
 8013b6e:	0a1b      	lsreq	r3, r3, #8
 8013b70:	3008      	addeq	r0, #8
 8013b72:	071a      	lsls	r2, r3, #28
 8013b74:	bf04      	itt	eq
 8013b76:	091b      	lsreq	r3, r3, #4
 8013b78:	3004      	addeq	r0, #4
 8013b7a:	079a      	lsls	r2, r3, #30
 8013b7c:	bf04      	itt	eq
 8013b7e:	089b      	lsreq	r3, r3, #2
 8013b80:	3002      	addeq	r0, #2
 8013b82:	07da      	lsls	r2, r3, #31
 8013b84:	d402      	bmi.n	8013b8c <__lo0bits+0x4e>
 8013b86:	085b      	lsrs	r3, r3, #1
 8013b88:	d006      	beq.n	8013b98 <__lo0bits+0x5a>
 8013b8a:	3001      	adds	r0, #1
 8013b8c:	600b      	str	r3, [r1, #0]
 8013b8e:	4770      	bx	lr
 8013b90:	4610      	mov	r0, r2
 8013b92:	e7e9      	b.n	8013b68 <__lo0bits+0x2a>
 8013b94:	2000      	movs	r0, #0
 8013b96:	4770      	bx	lr
 8013b98:	2020      	movs	r0, #32
 8013b9a:	4770      	bx	lr

08013b9c <__i2b>:
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	2101      	movs	r1, #1
 8013ba2:	f7ff fee9 	bl	8013978 <_Balloc>
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	6144      	str	r4, [r0, #20]
 8013baa:	6102      	str	r2, [r0, #16]
 8013bac:	bd10      	pop	{r4, pc}

08013bae <__multiply>:
 8013bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb2:	4614      	mov	r4, r2
 8013bb4:	690a      	ldr	r2, [r1, #16]
 8013bb6:	6923      	ldr	r3, [r4, #16]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	bfb8      	it	lt
 8013bbc:	460b      	movlt	r3, r1
 8013bbe:	4688      	mov	r8, r1
 8013bc0:	bfbc      	itt	lt
 8013bc2:	46a0      	movlt	r8, r4
 8013bc4:	461c      	movlt	r4, r3
 8013bc6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013bca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013bd2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bd6:	eb07 0609 	add.w	r6, r7, r9
 8013bda:	42b3      	cmp	r3, r6
 8013bdc:	bfb8      	it	lt
 8013bde:	3101      	addlt	r1, #1
 8013be0:	f7ff feca 	bl	8013978 <_Balloc>
 8013be4:	f100 0514 	add.w	r5, r0, #20
 8013be8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013bec:	462b      	mov	r3, r5
 8013bee:	2200      	movs	r2, #0
 8013bf0:	4573      	cmp	r3, lr
 8013bf2:	d316      	bcc.n	8013c22 <__multiply+0x74>
 8013bf4:	f104 0214 	add.w	r2, r4, #20
 8013bf8:	f108 0114 	add.w	r1, r8, #20
 8013bfc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013c00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	9b00      	ldr	r3, [sp, #0]
 8013c08:	9201      	str	r2, [sp, #4]
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d80c      	bhi.n	8013c28 <__multiply+0x7a>
 8013c0e:	2e00      	cmp	r6, #0
 8013c10:	dd03      	ble.n	8013c1a <__multiply+0x6c>
 8013c12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d05d      	beq.n	8013cd6 <__multiply+0x128>
 8013c1a:	6106      	str	r6, [r0, #16]
 8013c1c:	b003      	add	sp, #12
 8013c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c22:	f843 2b04 	str.w	r2, [r3], #4
 8013c26:	e7e3      	b.n	8013bf0 <__multiply+0x42>
 8013c28:	f8b2 b000 	ldrh.w	fp, [r2]
 8013c2c:	f1bb 0f00 	cmp.w	fp, #0
 8013c30:	d023      	beq.n	8013c7a <__multiply+0xcc>
 8013c32:	4689      	mov	r9, r1
 8013c34:	46ac      	mov	ip, r5
 8013c36:	f04f 0800 	mov.w	r8, #0
 8013c3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8013c3e:	f8dc a000 	ldr.w	sl, [ip]
 8013c42:	b2a3      	uxth	r3, r4
 8013c44:	fa1f fa8a 	uxth.w	sl, sl
 8013c48:	fb0b a303 	mla	r3, fp, r3, sl
 8013c4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c50:	f8dc 4000 	ldr.w	r4, [ip]
 8013c54:	4443      	add	r3, r8
 8013c56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8013c5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013c62:	46e2      	mov	sl, ip
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c6a:	454f      	cmp	r7, r9
 8013c6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c70:	f84a 3b04 	str.w	r3, [sl], #4
 8013c74:	d82b      	bhi.n	8013cce <__multiply+0x120>
 8013c76:	f8cc 8004 	str.w	r8, [ip, #4]
 8013c7a:	9b01      	ldr	r3, [sp, #4]
 8013c7c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013c80:	3204      	adds	r2, #4
 8013c82:	f1ba 0f00 	cmp.w	sl, #0
 8013c86:	d020      	beq.n	8013cca <__multiply+0x11c>
 8013c88:	682b      	ldr	r3, [r5, #0]
 8013c8a:	4689      	mov	r9, r1
 8013c8c:	46a8      	mov	r8, r5
 8013c8e:	f04f 0b00 	mov.w	fp, #0
 8013c92:	f8b9 c000 	ldrh.w	ip, [r9]
 8013c96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013c9a:	fb0a 440c 	mla	r4, sl, ip, r4
 8013c9e:	445c      	add	r4, fp
 8013ca0:	46c4      	mov	ip, r8
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8013cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8013cb0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013cb4:	0c1b      	lsrs	r3, r3, #16
 8013cb6:	fb0a b303 	mla	r3, sl, r3, fp
 8013cba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013cbe:	454f      	cmp	r7, r9
 8013cc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013cc4:	d805      	bhi.n	8013cd2 <__multiply+0x124>
 8013cc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8013cca:	3504      	adds	r5, #4
 8013ccc:	e79b      	b.n	8013c06 <__multiply+0x58>
 8013cce:	46d4      	mov	ip, sl
 8013cd0:	e7b3      	b.n	8013c3a <__multiply+0x8c>
 8013cd2:	46e0      	mov	r8, ip
 8013cd4:	e7dd      	b.n	8013c92 <__multiply+0xe4>
 8013cd6:	3e01      	subs	r6, #1
 8013cd8:	e799      	b.n	8013c0e <__multiply+0x60>
	...

08013cdc <__pow5mult>:
 8013cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ce0:	4615      	mov	r5, r2
 8013ce2:	f012 0203 	ands.w	r2, r2, #3
 8013ce6:	4606      	mov	r6, r0
 8013ce8:	460f      	mov	r7, r1
 8013cea:	d007      	beq.n	8013cfc <__pow5mult+0x20>
 8013cec:	3a01      	subs	r2, #1
 8013cee:	4c21      	ldr	r4, [pc, #132]	; (8013d74 <__pow5mult+0x98>)
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cf6:	f7ff fe8a 	bl	8013a0e <__multadd>
 8013cfa:	4607      	mov	r7, r0
 8013cfc:	10ad      	asrs	r5, r5, #2
 8013cfe:	d035      	beq.n	8013d6c <__pow5mult+0x90>
 8013d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013d02:	b93c      	cbnz	r4, 8013d14 <__pow5mult+0x38>
 8013d04:	2010      	movs	r0, #16
 8013d06:	f7fc fc15 	bl	8010534 <malloc>
 8013d0a:	6270      	str	r0, [r6, #36]	; 0x24
 8013d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d10:	6004      	str	r4, [r0, #0]
 8013d12:	60c4      	str	r4, [r0, #12]
 8013d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d1c:	b94c      	cbnz	r4, 8013d32 <__pow5mult+0x56>
 8013d1e:	f240 2171 	movw	r1, #625	; 0x271
 8013d22:	4630      	mov	r0, r6
 8013d24:	f7ff ff3a 	bl	8013b9c <__i2b>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d2e:	4604      	mov	r4, r0
 8013d30:	6003      	str	r3, [r0, #0]
 8013d32:	f04f 0800 	mov.w	r8, #0
 8013d36:	07eb      	lsls	r3, r5, #31
 8013d38:	d50a      	bpl.n	8013d50 <__pow5mult+0x74>
 8013d3a:	4639      	mov	r1, r7
 8013d3c:	4622      	mov	r2, r4
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f7ff ff35 	bl	8013bae <__multiply>
 8013d44:	4639      	mov	r1, r7
 8013d46:	4681      	mov	r9, r0
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f7ff fe49 	bl	80139e0 <_Bfree>
 8013d4e:	464f      	mov	r7, r9
 8013d50:	106d      	asrs	r5, r5, #1
 8013d52:	d00b      	beq.n	8013d6c <__pow5mult+0x90>
 8013d54:	6820      	ldr	r0, [r4, #0]
 8013d56:	b938      	cbnz	r0, 8013d68 <__pow5mult+0x8c>
 8013d58:	4622      	mov	r2, r4
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	4630      	mov	r0, r6
 8013d5e:	f7ff ff26 	bl	8013bae <__multiply>
 8013d62:	6020      	str	r0, [r4, #0]
 8013d64:	f8c0 8000 	str.w	r8, [r0]
 8013d68:	4604      	mov	r4, r0
 8013d6a:	e7e4      	b.n	8013d36 <__pow5mult+0x5a>
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d72:	bf00      	nop
 8013d74:	080151d8 	.word	0x080151d8

08013d78 <__lshift>:
 8013d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d82:	6923      	ldr	r3, [r4, #16]
 8013d84:	6849      	ldr	r1, [r1, #4]
 8013d86:	eb0a 0903 	add.w	r9, sl, r3
 8013d8a:	68a3      	ldr	r3, [r4, #8]
 8013d8c:	4607      	mov	r7, r0
 8013d8e:	4616      	mov	r6, r2
 8013d90:	f109 0501 	add.w	r5, r9, #1
 8013d94:	42ab      	cmp	r3, r5
 8013d96:	db32      	blt.n	8013dfe <__lshift+0x86>
 8013d98:	4638      	mov	r0, r7
 8013d9a:	f7ff fded 	bl	8013978 <_Balloc>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	4680      	mov	r8, r0
 8013da2:	f100 0114 	add.w	r1, r0, #20
 8013da6:	461a      	mov	r2, r3
 8013da8:	4553      	cmp	r3, sl
 8013daa:	db2b      	blt.n	8013e04 <__lshift+0x8c>
 8013dac:	6920      	ldr	r0, [r4, #16]
 8013dae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013db2:	f104 0314 	add.w	r3, r4, #20
 8013db6:	f016 021f 	ands.w	r2, r6, #31
 8013dba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013dbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013dc2:	d025      	beq.n	8013e10 <__lshift+0x98>
 8013dc4:	f1c2 0e20 	rsb	lr, r2, #32
 8013dc8:	2000      	movs	r0, #0
 8013dca:	681e      	ldr	r6, [r3, #0]
 8013dcc:	468a      	mov	sl, r1
 8013dce:	4096      	lsls	r6, r2
 8013dd0:	4330      	orrs	r0, r6
 8013dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8013dd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8013dda:	459c      	cmp	ip, r3
 8013ddc:	fa20 f00e 	lsr.w	r0, r0, lr
 8013de0:	d814      	bhi.n	8013e0c <__lshift+0x94>
 8013de2:	6048      	str	r0, [r1, #4]
 8013de4:	b108      	cbz	r0, 8013dea <__lshift+0x72>
 8013de6:	f109 0502 	add.w	r5, r9, #2
 8013dea:	3d01      	subs	r5, #1
 8013dec:	4638      	mov	r0, r7
 8013dee:	f8c8 5010 	str.w	r5, [r8, #16]
 8013df2:	4621      	mov	r1, r4
 8013df4:	f7ff fdf4 	bl	80139e0 <_Bfree>
 8013df8:	4640      	mov	r0, r8
 8013dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dfe:	3101      	adds	r1, #1
 8013e00:	005b      	lsls	r3, r3, #1
 8013e02:	e7c7      	b.n	8013d94 <__lshift+0x1c>
 8013e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	e7cd      	b.n	8013da8 <__lshift+0x30>
 8013e0c:	4651      	mov	r1, sl
 8013e0e:	e7dc      	b.n	8013dca <__lshift+0x52>
 8013e10:	3904      	subs	r1, #4
 8013e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e16:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e1a:	459c      	cmp	ip, r3
 8013e1c:	d8f9      	bhi.n	8013e12 <__lshift+0x9a>
 8013e1e:	e7e4      	b.n	8013dea <__lshift+0x72>

08013e20 <__mcmp>:
 8013e20:	6903      	ldr	r3, [r0, #16]
 8013e22:	690a      	ldr	r2, [r1, #16]
 8013e24:	1a9b      	subs	r3, r3, r2
 8013e26:	b530      	push	{r4, r5, lr}
 8013e28:	d10c      	bne.n	8013e44 <__mcmp+0x24>
 8013e2a:	0092      	lsls	r2, r2, #2
 8013e2c:	3014      	adds	r0, #20
 8013e2e:	3114      	adds	r1, #20
 8013e30:	1884      	adds	r4, r0, r2
 8013e32:	4411      	add	r1, r2
 8013e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e3c:	4295      	cmp	r5, r2
 8013e3e:	d003      	beq.n	8013e48 <__mcmp+0x28>
 8013e40:	d305      	bcc.n	8013e4e <__mcmp+0x2e>
 8013e42:	2301      	movs	r3, #1
 8013e44:	4618      	mov	r0, r3
 8013e46:	bd30      	pop	{r4, r5, pc}
 8013e48:	42a0      	cmp	r0, r4
 8013e4a:	d3f3      	bcc.n	8013e34 <__mcmp+0x14>
 8013e4c:	e7fa      	b.n	8013e44 <__mcmp+0x24>
 8013e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e52:	e7f7      	b.n	8013e44 <__mcmp+0x24>

08013e54 <__mdiff>:
 8013e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e58:	460d      	mov	r5, r1
 8013e5a:	4607      	mov	r7, r0
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	4628      	mov	r0, r5
 8013e60:	4614      	mov	r4, r2
 8013e62:	f7ff ffdd 	bl	8013e20 <__mcmp>
 8013e66:	1e06      	subs	r6, r0, #0
 8013e68:	d108      	bne.n	8013e7c <__mdiff+0x28>
 8013e6a:	4631      	mov	r1, r6
 8013e6c:	4638      	mov	r0, r7
 8013e6e:	f7ff fd83 	bl	8013978 <_Balloc>
 8013e72:	2301      	movs	r3, #1
 8013e74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7c:	bfa4      	itt	ge
 8013e7e:	4623      	movge	r3, r4
 8013e80:	462c      	movge	r4, r5
 8013e82:	4638      	mov	r0, r7
 8013e84:	6861      	ldr	r1, [r4, #4]
 8013e86:	bfa6      	itte	ge
 8013e88:	461d      	movge	r5, r3
 8013e8a:	2600      	movge	r6, #0
 8013e8c:	2601      	movlt	r6, #1
 8013e8e:	f7ff fd73 	bl	8013978 <_Balloc>
 8013e92:	692b      	ldr	r3, [r5, #16]
 8013e94:	60c6      	str	r6, [r0, #12]
 8013e96:	6926      	ldr	r6, [r4, #16]
 8013e98:	f105 0914 	add.w	r9, r5, #20
 8013e9c:	f104 0214 	add.w	r2, r4, #20
 8013ea0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013ea4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013ea8:	f100 0514 	add.w	r5, r0, #20
 8013eac:	f04f 0e00 	mov.w	lr, #0
 8013eb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8013eb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8013eb8:	fa1e f18a 	uxtah	r1, lr, sl
 8013ebc:	b2a3      	uxth	r3, r4
 8013ebe:	1ac9      	subs	r1, r1, r3
 8013ec0:	0c23      	lsrs	r3, r4, #16
 8013ec2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013ec6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013eca:	b289      	uxth	r1, r1
 8013ecc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013ed0:	45c8      	cmp	r8, r9
 8013ed2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013ed6:	4694      	mov	ip, r2
 8013ed8:	f845 3b04 	str.w	r3, [r5], #4
 8013edc:	d8e8      	bhi.n	8013eb0 <__mdiff+0x5c>
 8013ede:	45bc      	cmp	ip, r7
 8013ee0:	d304      	bcc.n	8013eec <__mdiff+0x98>
 8013ee2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013ee6:	b183      	cbz	r3, 8013f0a <__mdiff+0xb6>
 8013ee8:	6106      	str	r6, [r0, #16]
 8013eea:	e7c5      	b.n	8013e78 <__mdiff+0x24>
 8013eec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013ef0:	fa1e f381 	uxtah	r3, lr, r1
 8013ef4:	141a      	asrs	r2, r3, #16
 8013ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013f04:	f845 3b04 	str.w	r3, [r5], #4
 8013f08:	e7e9      	b.n	8013ede <__mdiff+0x8a>
 8013f0a:	3e01      	subs	r6, #1
 8013f0c:	e7e9      	b.n	8013ee2 <__mdiff+0x8e>
	...

08013f10 <__ulp>:
 8013f10:	4b12      	ldr	r3, [pc, #72]	; (8013f5c <__ulp+0x4c>)
 8013f12:	ee10 2a90 	vmov	r2, s1
 8013f16:	401a      	ands	r2, r3
 8013f18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	dd04      	ble.n	8013f2a <__ulp+0x1a>
 8013f20:	2000      	movs	r0, #0
 8013f22:	4619      	mov	r1, r3
 8013f24:	ec41 0b10 	vmov	d0, r0, r1
 8013f28:	4770      	bx	lr
 8013f2a:	425b      	negs	r3, r3
 8013f2c:	151b      	asrs	r3, r3, #20
 8013f2e:	2b13      	cmp	r3, #19
 8013f30:	f04f 0000 	mov.w	r0, #0
 8013f34:	f04f 0100 	mov.w	r1, #0
 8013f38:	dc04      	bgt.n	8013f44 <__ulp+0x34>
 8013f3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013f3e:	fa42 f103 	asr.w	r1, r2, r3
 8013f42:	e7ef      	b.n	8013f24 <__ulp+0x14>
 8013f44:	3b14      	subs	r3, #20
 8013f46:	2b1e      	cmp	r3, #30
 8013f48:	f04f 0201 	mov.w	r2, #1
 8013f4c:	bfda      	itte	le
 8013f4e:	f1c3 031f 	rsble	r3, r3, #31
 8013f52:	fa02 f303 	lslle.w	r3, r2, r3
 8013f56:	4613      	movgt	r3, r2
 8013f58:	4618      	mov	r0, r3
 8013f5a:	e7e3      	b.n	8013f24 <__ulp+0x14>
 8013f5c:	7ff00000 	.word	0x7ff00000

08013f60 <__b2d>:
 8013f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f62:	6905      	ldr	r5, [r0, #16]
 8013f64:	f100 0714 	add.w	r7, r0, #20
 8013f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f6c:	1f2e      	subs	r6, r5, #4
 8013f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f72:	4620      	mov	r0, r4
 8013f74:	f7ff fdc4 	bl	8013b00 <__hi0bits>
 8013f78:	f1c0 0320 	rsb	r3, r0, #32
 8013f7c:	280a      	cmp	r0, #10
 8013f7e:	600b      	str	r3, [r1, #0]
 8013f80:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013ff8 <__b2d+0x98>
 8013f84:	dc14      	bgt.n	8013fb0 <__b2d+0x50>
 8013f86:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f8e:	42b7      	cmp	r7, r6
 8013f90:	ea41 030c 	orr.w	r3, r1, ip
 8013f94:	bf34      	ite	cc
 8013f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f9a:	2100      	movcs	r1, #0
 8013f9c:	3015      	adds	r0, #21
 8013f9e:	fa04 f000 	lsl.w	r0, r4, r0
 8013fa2:	fa21 f10e 	lsr.w	r1, r1, lr
 8013fa6:	ea40 0201 	orr.w	r2, r0, r1
 8013faa:	ec43 2b10 	vmov	d0, r2, r3
 8013fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fb0:	42b7      	cmp	r7, r6
 8013fb2:	bf3a      	itte	cc
 8013fb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8013fb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fbc:	2100      	movcs	r1, #0
 8013fbe:	380b      	subs	r0, #11
 8013fc0:	d015      	beq.n	8013fee <__b2d+0x8e>
 8013fc2:	4084      	lsls	r4, r0
 8013fc4:	f1c0 0520 	rsb	r5, r0, #32
 8013fc8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013fcc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013fd0:	42be      	cmp	r6, r7
 8013fd2:	fa21 fc05 	lsr.w	ip, r1, r5
 8013fd6:	ea44 030c 	orr.w	r3, r4, ip
 8013fda:	bf8c      	ite	hi
 8013fdc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fe0:	2400      	movls	r4, #0
 8013fe2:	fa01 f000 	lsl.w	r0, r1, r0
 8013fe6:	40ec      	lsrs	r4, r5
 8013fe8:	ea40 0204 	orr.w	r2, r0, r4
 8013fec:	e7dd      	b.n	8013faa <__b2d+0x4a>
 8013fee:	ea44 030c 	orr.w	r3, r4, ip
 8013ff2:	460a      	mov	r2, r1
 8013ff4:	e7d9      	b.n	8013faa <__b2d+0x4a>
 8013ff6:	bf00      	nop
 8013ff8:	3ff00000 	.word	0x3ff00000

08013ffc <__d2b>:
 8013ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014000:	460e      	mov	r6, r1
 8014002:	2101      	movs	r1, #1
 8014004:	ec59 8b10 	vmov	r8, r9, d0
 8014008:	4615      	mov	r5, r2
 801400a:	f7ff fcb5 	bl	8013978 <_Balloc>
 801400e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014012:	4607      	mov	r7, r0
 8014014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014018:	bb34      	cbnz	r4, 8014068 <__d2b+0x6c>
 801401a:	9301      	str	r3, [sp, #4]
 801401c:	f1b8 0300 	subs.w	r3, r8, #0
 8014020:	d027      	beq.n	8014072 <__d2b+0x76>
 8014022:	a802      	add	r0, sp, #8
 8014024:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014028:	f7ff fd89 	bl	8013b3e <__lo0bits>
 801402c:	9900      	ldr	r1, [sp, #0]
 801402e:	b1f0      	cbz	r0, 801406e <__d2b+0x72>
 8014030:	9a01      	ldr	r2, [sp, #4]
 8014032:	f1c0 0320 	rsb	r3, r0, #32
 8014036:	fa02 f303 	lsl.w	r3, r2, r3
 801403a:	430b      	orrs	r3, r1
 801403c:	40c2      	lsrs	r2, r0
 801403e:	617b      	str	r3, [r7, #20]
 8014040:	9201      	str	r2, [sp, #4]
 8014042:	9b01      	ldr	r3, [sp, #4]
 8014044:	61bb      	str	r3, [r7, #24]
 8014046:	2b00      	cmp	r3, #0
 8014048:	bf14      	ite	ne
 801404a:	2102      	movne	r1, #2
 801404c:	2101      	moveq	r1, #1
 801404e:	6139      	str	r1, [r7, #16]
 8014050:	b1c4      	cbz	r4, 8014084 <__d2b+0x88>
 8014052:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014056:	4404      	add	r4, r0
 8014058:	6034      	str	r4, [r6, #0]
 801405a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801405e:	6028      	str	r0, [r5, #0]
 8014060:	4638      	mov	r0, r7
 8014062:	b003      	add	sp, #12
 8014064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801406c:	e7d5      	b.n	801401a <__d2b+0x1e>
 801406e:	6179      	str	r1, [r7, #20]
 8014070:	e7e7      	b.n	8014042 <__d2b+0x46>
 8014072:	a801      	add	r0, sp, #4
 8014074:	f7ff fd63 	bl	8013b3e <__lo0bits>
 8014078:	9b01      	ldr	r3, [sp, #4]
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	2101      	movs	r1, #1
 801407e:	6139      	str	r1, [r7, #16]
 8014080:	3020      	adds	r0, #32
 8014082:	e7e5      	b.n	8014050 <__d2b+0x54>
 8014084:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801408c:	6030      	str	r0, [r6, #0]
 801408e:	6918      	ldr	r0, [r3, #16]
 8014090:	f7ff fd36 	bl	8013b00 <__hi0bits>
 8014094:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014098:	e7e1      	b.n	801405e <__d2b+0x62>

0801409a <__ratio>:
 801409a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801409e:	4688      	mov	r8, r1
 80140a0:	4669      	mov	r1, sp
 80140a2:	4681      	mov	r9, r0
 80140a4:	f7ff ff5c 	bl	8013f60 <__b2d>
 80140a8:	a901      	add	r1, sp, #4
 80140aa:	4640      	mov	r0, r8
 80140ac:	ec57 6b10 	vmov	r6, r7, d0
 80140b0:	ee10 4a10 	vmov	r4, s0
 80140b4:	f7ff ff54 	bl	8013f60 <__b2d>
 80140b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140c0:	eba3 0c02 	sub.w	ip, r3, r2
 80140c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140c8:	1a9b      	subs	r3, r3, r2
 80140ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140ce:	ec51 0b10 	vmov	r0, r1, d0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	ee10 aa10 	vmov	sl, s0
 80140d8:	bfce      	itee	gt
 80140da:	463a      	movgt	r2, r7
 80140dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140e0:	460a      	movle	r2, r1
 80140e2:	463d      	mov	r5, r7
 80140e4:	468b      	mov	fp, r1
 80140e6:	bfcc      	ite	gt
 80140e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80140ec:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80140f0:	ec45 4b17 	vmov	d7, r4, r5
 80140f4:	ec4b ab16 	vmov	d6, sl, fp
 80140f8:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80140fc:	b003      	add	sp, #12
 80140fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014102 <__copybits>:
 8014102:	3901      	subs	r1, #1
 8014104:	b510      	push	{r4, lr}
 8014106:	1149      	asrs	r1, r1, #5
 8014108:	6914      	ldr	r4, [r2, #16]
 801410a:	3101      	adds	r1, #1
 801410c:	f102 0314 	add.w	r3, r2, #20
 8014110:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014114:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014118:	42a3      	cmp	r3, r4
 801411a:	4602      	mov	r2, r0
 801411c:	d303      	bcc.n	8014126 <__copybits+0x24>
 801411e:	2300      	movs	r3, #0
 8014120:	428a      	cmp	r2, r1
 8014122:	d305      	bcc.n	8014130 <__copybits+0x2e>
 8014124:	bd10      	pop	{r4, pc}
 8014126:	f853 2b04 	ldr.w	r2, [r3], #4
 801412a:	f840 2b04 	str.w	r2, [r0], #4
 801412e:	e7f3      	b.n	8014118 <__copybits+0x16>
 8014130:	f842 3b04 	str.w	r3, [r2], #4
 8014134:	e7f4      	b.n	8014120 <__copybits+0x1e>

08014136 <__any_on>:
 8014136:	f100 0214 	add.w	r2, r0, #20
 801413a:	6900      	ldr	r0, [r0, #16]
 801413c:	114b      	asrs	r3, r1, #5
 801413e:	4298      	cmp	r0, r3
 8014140:	b510      	push	{r4, lr}
 8014142:	db11      	blt.n	8014168 <__any_on+0x32>
 8014144:	dd0a      	ble.n	801415c <__any_on+0x26>
 8014146:	f011 011f 	ands.w	r1, r1, #31
 801414a:	d007      	beq.n	801415c <__any_on+0x26>
 801414c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014150:	fa24 f001 	lsr.w	r0, r4, r1
 8014154:	fa00 f101 	lsl.w	r1, r0, r1
 8014158:	428c      	cmp	r4, r1
 801415a:	d10b      	bne.n	8014174 <__any_on+0x3e>
 801415c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014160:	4293      	cmp	r3, r2
 8014162:	d803      	bhi.n	801416c <__any_on+0x36>
 8014164:	2000      	movs	r0, #0
 8014166:	bd10      	pop	{r4, pc}
 8014168:	4603      	mov	r3, r0
 801416a:	e7f7      	b.n	801415c <__any_on+0x26>
 801416c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014170:	2900      	cmp	r1, #0
 8014172:	d0f5      	beq.n	8014160 <__any_on+0x2a>
 8014174:	2001      	movs	r0, #1
 8014176:	e7f6      	b.n	8014166 <__any_on+0x30>

08014178 <__ssputs_r>:
 8014178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801417c:	688e      	ldr	r6, [r1, #8]
 801417e:	429e      	cmp	r6, r3
 8014180:	4682      	mov	sl, r0
 8014182:	460c      	mov	r4, r1
 8014184:	4690      	mov	r8, r2
 8014186:	4699      	mov	r9, r3
 8014188:	d837      	bhi.n	80141fa <__ssputs_r+0x82>
 801418a:	898a      	ldrh	r2, [r1, #12]
 801418c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014190:	d031      	beq.n	80141f6 <__ssputs_r+0x7e>
 8014192:	6825      	ldr	r5, [r4, #0]
 8014194:	6909      	ldr	r1, [r1, #16]
 8014196:	1a6f      	subs	r7, r5, r1
 8014198:	6965      	ldr	r5, [r4, #20]
 801419a:	2302      	movs	r3, #2
 801419c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80141a4:	f109 0301 	add.w	r3, r9, #1
 80141a8:	443b      	add	r3, r7
 80141aa:	429d      	cmp	r5, r3
 80141ac:	bf38      	it	cc
 80141ae:	461d      	movcc	r5, r3
 80141b0:	0553      	lsls	r3, r2, #21
 80141b2:	d530      	bpl.n	8014216 <__ssputs_r+0x9e>
 80141b4:	4629      	mov	r1, r5
 80141b6:	f7fc fa35 	bl	8010624 <_malloc_r>
 80141ba:	4606      	mov	r6, r0
 80141bc:	b950      	cbnz	r0, 80141d4 <__ssputs_r+0x5c>
 80141be:	230c      	movs	r3, #12
 80141c0:	f8ca 3000 	str.w	r3, [sl]
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141ca:	81a3      	strh	r3, [r4, #12]
 80141cc:	f04f 30ff 	mov.w	r0, #4294967295
 80141d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d4:	463a      	mov	r2, r7
 80141d6:	6921      	ldr	r1, [r4, #16]
 80141d8:	f7fc f9b4 	bl	8010544 <memcpy>
 80141dc:	89a3      	ldrh	r3, [r4, #12]
 80141de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80141e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141e6:	81a3      	strh	r3, [r4, #12]
 80141e8:	6126      	str	r6, [r4, #16]
 80141ea:	6165      	str	r5, [r4, #20]
 80141ec:	443e      	add	r6, r7
 80141ee:	1bed      	subs	r5, r5, r7
 80141f0:	6026      	str	r6, [r4, #0]
 80141f2:	60a5      	str	r5, [r4, #8]
 80141f4:	464e      	mov	r6, r9
 80141f6:	454e      	cmp	r6, r9
 80141f8:	d900      	bls.n	80141fc <__ssputs_r+0x84>
 80141fa:	464e      	mov	r6, r9
 80141fc:	4632      	mov	r2, r6
 80141fe:	4641      	mov	r1, r8
 8014200:	6820      	ldr	r0, [r4, #0]
 8014202:	f000 fb03 	bl	801480c <memmove>
 8014206:	68a3      	ldr	r3, [r4, #8]
 8014208:	1b9b      	subs	r3, r3, r6
 801420a:	60a3      	str	r3, [r4, #8]
 801420c:	6823      	ldr	r3, [r4, #0]
 801420e:	441e      	add	r6, r3
 8014210:	6026      	str	r6, [r4, #0]
 8014212:	2000      	movs	r0, #0
 8014214:	e7dc      	b.n	80141d0 <__ssputs_r+0x58>
 8014216:	462a      	mov	r2, r5
 8014218:	f000 fb11 	bl	801483e <_realloc_r>
 801421c:	4606      	mov	r6, r0
 801421e:	2800      	cmp	r0, #0
 8014220:	d1e2      	bne.n	80141e8 <__ssputs_r+0x70>
 8014222:	6921      	ldr	r1, [r4, #16]
 8014224:	4650      	mov	r0, sl
 8014226:	f7fc f9af 	bl	8010588 <_free_r>
 801422a:	e7c8      	b.n	80141be <__ssputs_r+0x46>

0801422c <_svfiprintf_r>:
 801422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014230:	461d      	mov	r5, r3
 8014232:	898b      	ldrh	r3, [r1, #12]
 8014234:	061f      	lsls	r7, r3, #24
 8014236:	b09d      	sub	sp, #116	; 0x74
 8014238:	4680      	mov	r8, r0
 801423a:	460c      	mov	r4, r1
 801423c:	4616      	mov	r6, r2
 801423e:	d50f      	bpl.n	8014260 <_svfiprintf_r+0x34>
 8014240:	690b      	ldr	r3, [r1, #16]
 8014242:	b96b      	cbnz	r3, 8014260 <_svfiprintf_r+0x34>
 8014244:	2140      	movs	r1, #64	; 0x40
 8014246:	f7fc f9ed 	bl	8010624 <_malloc_r>
 801424a:	6020      	str	r0, [r4, #0]
 801424c:	6120      	str	r0, [r4, #16]
 801424e:	b928      	cbnz	r0, 801425c <_svfiprintf_r+0x30>
 8014250:	230c      	movs	r3, #12
 8014252:	f8c8 3000 	str.w	r3, [r8]
 8014256:	f04f 30ff 	mov.w	r0, #4294967295
 801425a:	e0c8      	b.n	80143ee <_svfiprintf_r+0x1c2>
 801425c:	2340      	movs	r3, #64	; 0x40
 801425e:	6163      	str	r3, [r4, #20]
 8014260:	2300      	movs	r3, #0
 8014262:	9309      	str	r3, [sp, #36]	; 0x24
 8014264:	2320      	movs	r3, #32
 8014266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801426a:	2330      	movs	r3, #48	; 0x30
 801426c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014270:	9503      	str	r5, [sp, #12]
 8014272:	f04f 0b01 	mov.w	fp, #1
 8014276:	4637      	mov	r7, r6
 8014278:	463d      	mov	r5, r7
 801427a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801427e:	b10b      	cbz	r3, 8014284 <_svfiprintf_r+0x58>
 8014280:	2b25      	cmp	r3, #37	; 0x25
 8014282:	d13e      	bne.n	8014302 <_svfiprintf_r+0xd6>
 8014284:	ebb7 0a06 	subs.w	sl, r7, r6
 8014288:	d00b      	beq.n	80142a2 <_svfiprintf_r+0x76>
 801428a:	4653      	mov	r3, sl
 801428c:	4632      	mov	r2, r6
 801428e:	4621      	mov	r1, r4
 8014290:	4640      	mov	r0, r8
 8014292:	f7ff ff71 	bl	8014178 <__ssputs_r>
 8014296:	3001      	adds	r0, #1
 8014298:	f000 80a4 	beq.w	80143e4 <_svfiprintf_r+0x1b8>
 801429c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801429e:	4453      	add	r3, sl
 80142a0:	9309      	str	r3, [sp, #36]	; 0x24
 80142a2:	783b      	ldrb	r3, [r7, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	f000 809d 	beq.w	80143e4 <_svfiprintf_r+0x1b8>
 80142aa:	2300      	movs	r3, #0
 80142ac:	f04f 32ff 	mov.w	r2, #4294967295
 80142b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142b4:	9304      	str	r3, [sp, #16]
 80142b6:	9307      	str	r3, [sp, #28]
 80142b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142bc:	931a      	str	r3, [sp, #104]	; 0x68
 80142be:	462f      	mov	r7, r5
 80142c0:	2205      	movs	r2, #5
 80142c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80142c6:	4850      	ldr	r0, [pc, #320]	; (8014408 <_svfiprintf_r+0x1dc>)
 80142c8:	f7eb ffc2 	bl	8000250 <memchr>
 80142cc:	9b04      	ldr	r3, [sp, #16]
 80142ce:	b9d0      	cbnz	r0, 8014306 <_svfiprintf_r+0xda>
 80142d0:	06d9      	lsls	r1, r3, #27
 80142d2:	bf44      	itt	mi
 80142d4:	2220      	movmi	r2, #32
 80142d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142da:	071a      	lsls	r2, r3, #28
 80142dc:	bf44      	itt	mi
 80142de:	222b      	movmi	r2, #43	; 0x2b
 80142e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142e4:	782a      	ldrb	r2, [r5, #0]
 80142e6:	2a2a      	cmp	r2, #42	; 0x2a
 80142e8:	d015      	beq.n	8014316 <_svfiprintf_r+0xea>
 80142ea:	9a07      	ldr	r2, [sp, #28]
 80142ec:	462f      	mov	r7, r5
 80142ee:	2000      	movs	r0, #0
 80142f0:	250a      	movs	r5, #10
 80142f2:	4639      	mov	r1, r7
 80142f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142f8:	3b30      	subs	r3, #48	; 0x30
 80142fa:	2b09      	cmp	r3, #9
 80142fc:	d94d      	bls.n	801439a <_svfiprintf_r+0x16e>
 80142fe:	b1b8      	cbz	r0, 8014330 <_svfiprintf_r+0x104>
 8014300:	e00f      	b.n	8014322 <_svfiprintf_r+0xf6>
 8014302:	462f      	mov	r7, r5
 8014304:	e7b8      	b.n	8014278 <_svfiprintf_r+0x4c>
 8014306:	4a40      	ldr	r2, [pc, #256]	; (8014408 <_svfiprintf_r+0x1dc>)
 8014308:	1a80      	subs	r0, r0, r2
 801430a:	fa0b f000 	lsl.w	r0, fp, r0
 801430e:	4318      	orrs	r0, r3
 8014310:	9004      	str	r0, [sp, #16]
 8014312:	463d      	mov	r5, r7
 8014314:	e7d3      	b.n	80142be <_svfiprintf_r+0x92>
 8014316:	9a03      	ldr	r2, [sp, #12]
 8014318:	1d11      	adds	r1, r2, #4
 801431a:	6812      	ldr	r2, [r2, #0]
 801431c:	9103      	str	r1, [sp, #12]
 801431e:	2a00      	cmp	r2, #0
 8014320:	db01      	blt.n	8014326 <_svfiprintf_r+0xfa>
 8014322:	9207      	str	r2, [sp, #28]
 8014324:	e004      	b.n	8014330 <_svfiprintf_r+0x104>
 8014326:	4252      	negs	r2, r2
 8014328:	f043 0302 	orr.w	r3, r3, #2
 801432c:	9207      	str	r2, [sp, #28]
 801432e:	9304      	str	r3, [sp, #16]
 8014330:	783b      	ldrb	r3, [r7, #0]
 8014332:	2b2e      	cmp	r3, #46	; 0x2e
 8014334:	d10c      	bne.n	8014350 <_svfiprintf_r+0x124>
 8014336:	787b      	ldrb	r3, [r7, #1]
 8014338:	2b2a      	cmp	r3, #42	; 0x2a
 801433a:	d133      	bne.n	80143a4 <_svfiprintf_r+0x178>
 801433c:	9b03      	ldr	r3, [sp, #12]
 801433e:	1d1a      	adds	r2, r3, #4
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	9203      	str	r2, [sp, #12]
 8014344:	2b00      	cmp	r3, #0
 8014346:	bfb8      	it	lt
 8014348:	f04f 33ff 	movlt.w	r3, #4294967295
 801434c:	3702      	adds	r7, #2
 801434e:	9305      	str	r3, [sp, #20]
 8014350:	4d2e      	ldr	r5, [pc, #184]	; (801440c <_svfiprintf_r+0x1e0>)
 8014352:	7839      	ldrb	r1, [r7, #0]
 8014354:	2203      	movs	r2, #3
 8014356:	4628      	mov	r0, r5
 8014358:	f7eb ff7a 	bl	8000250 <memchr>
 801435c:	b138      	cbz	r0, 801436e <_svfiprintf_r+0x142>
 801435e:	2340      	movs	r3, #64	; 0x40
 8014360:	1b40      	subs	r0, r0, r5
 8014362:	fa03 f000 	lsl.w	r0, r3, r0
 8014366:	9b04      	ldr	r3, [sp, #16]
 8014368:	4303      	orrs	r3, r0
 801436a:	3701      	adds	r7, #1
 801436c:	9304      	str	r3, [sp, #16]
 801436e:	7839      	ldrb	r1, [r7, #0]
 8014370:	4827      	ldr	r0, [pc, #156]	; (8014410 <_svfiprintf_r+0x1e4>)
 8014372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014376:	2206      	movs	r2, #6
 8014378:	1c7e      	adds	r6, r7, #1
 801437a:	f7eb ff69 	bl	8000250 <memchr>
 801437e:	2800      	cmp	r0, #0
 8014380:	d038      	beq.n	80143f4 <_svfiprintf_r+0x1c8>
 8014382:	4b24      	ldr	r3, [pc, #144]	; (8014414 <_svfiprintf_r+0x1e8>)
 8014384:	bb13      	cbnz	r3, 80143cc <_svfiprintf_r+0x1a0>
 8014386:	9b03      	ldr	r3, [sp, #12]
 8014388:	3307      	adds	r3, #7
 801438a:	f023 0307 	bic.w	r3, r3, #7
 801438e:	3308      	adds	r3, #8
 8014390:	9303      	str	r3, [sp, #12]
 8014392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014394:	444b      	add	r3, r9
 8014396:	9309      	str	r3, [sp, #36]	; 0x24
 8014398:	e76d      	b.n	8014276 <_svfiprintf_r+0x4a>
 801439a:	fb05 3202 	mla	r2, r5, r2, r3
 801439e:	2001      	movs	r0, #1
 80143a0:	460f      	mov	r7, r1
 80143a2:	e7a6      	b.n	80142f2 <_svfiprintf_r+0xc6>
 80143a4:	2300      	movs	r3, #0
 80143a6:	3701      	adds	r7, #1
 80143a8:	9305      	str	r3, [sp, #20]
 80143aa:	4619      	mov	r1, r3
 80143ac:	250a      	movs	r5, #10
 80143ae:	4638      	mov	r0, r7
 80143b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143b4:	3a30      	subs	r2, #48	; 0x30
 80143b6:	2a09      	cmp	r2, #9
 80143b8:	d903      	bls.n	80143c2 <_svfiprintf_r+0x196>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d0c8      	beq.n	8014350 <_svfiprintf_r+0x124>
 80143be:	9105      	str	r1, [sp, #20]
 80143c0:	e7c6      	b.n	8014350 <_svfiprintf_r+0x124>
 80143c2:	fb05 2101 	mla	r1, r5, r1, r2
 80143c6:	2301      	movs	r3, #1
 80143c8:	4607      	mov	r7, r0
 80143ca:	e7f0      	b.n	80143ae <_svfiprintf_r+0x182>
 80143cc:	ab03      	add	r3, sp, #12
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	4622      	mov	r2, r4
 80143d2:	4b11      	ldr	r3, [pc, #68]	; (8014418 <_svfiprintf_r+0x1ec>)
 80143d4:	a904      	add	r1, sp, #16
 80143d6:	4640      	mov	r0, r8
 80143d8:	f7fc fa06 	bl	80107e8 <_printf_float>
 80143dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80143e0:	4681      	mov	r9, r0
 80143e2:	d1d6      	bne.n	8014392 <_svfiprintf_r+0x166>
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	065b      	lsls	r3, r3, #25
 80143e8:	f53f af35 	bmi.w	8014256 <_svfiprintf_r+0x2a>
 80143ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143ee:	b01d      	add	sp, #116	; 0x74
 80143f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f4:	ab03      	add	r3, sp, #12
 80143f6:	9300      	str	r3, [sp, #0]
 80143f8:	4622      	mov	r2, r4
 80143fa:	4b07      	ldr	r3, [pc, #28]	; (8014418 <_svfiprintf_r+0x1ec>)
 80143fc:	a904      	add	r1, sp, #16
 80143fe:	4640      	mov	r0, r8
 8014400:	f7fc fc94 	bl	8010d2c <_printf_i>
 8014404:	e7ea      	b.n	80143dc <_svfiprintf_r+0x1b0>
 8014406:	bf00      	nop
 8014408:	080151e4 	.word	0x080151e4
 801440c:	080151ea 	.word	0x080151ea
 8014410:	080151ee 	.word	0x080151ee
 8014414:	080107e9 	.word	0x080107e9
 8014418:	08014179 	.word	0x08014179

0801441c <__sfputc_r>:
 801441c:	6893      	ldr	r3, [r2, #8]
 801441e:	3b01      	subs	r3, #1
 8014420:	2b00      	cmp	r3, #0
 8014422:	b410      	push	{r4}
 8014424:	6093      	str	r3, [r2, #8]
 8014426:	da08      	bge.n	801443a <__sfputc_r+0x1e>
 8014428:	6994      	ldr	r4, [r2, #24]
 801442a:	42a3      	cmp	r3, r4
 801442c:	db01      	blt.n	8014432 <__sfputc_r+0x16>
 801442e:	290a      	cmp	r1, #10
 8014430:	d103      	bne.n	801443a <__sfputc_r+0x1e>
 8014432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014436:	f7fd bed9 	b.w	80121ec <__swbuf_r>
 801443a:	6813      	ldr	r3, [r2, #0]
 801443c:	1c58      	adds	r0, r3, #1
 801443e:	6010      	str	r0, [r2, #0]
 8014440:	7019      	strb	r1, [r3, #0]
 8014442:	4608      	mov	r0, r1
 8014444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014448:	4770      	bx	lr

0801444a <__sfputs_r>:
 801444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801444c:	4606      	mov	r6, r0
 801444e:	460f      	mov	r7, r1
 8014450:	4614      	mov	r4, r2
 8014452:	18d5      	adds	r5, r2, r3
 8014454:	42ac      	cmp	r4, r5
 8014456:	d101      	bne.n	801445c <__sfputs_r+0x12>
 8014458:	2000      	movs	r0, #0
 801445a:	e007      	b.n	801446c <__sfputs_r+0x22>
 801445c:	463a      	mov	r2, r7
 801445e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014462:	4630      	mov	r0, r6
 8014464:	f7ff ffda 	bl	801441c <__sfputc_r>
 8014468:	1c43      	adds	r3, r0, #1
 801446a:	d1f3      	bne.n	8014454 <__sfputs_r+0xa>
 801446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014470 <_vfiprintf_r>:
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	460c      	mov	r4, r1
 8014476:	b09d      	sub	sp, #116	; 0x74
 8014478:	4617      	mov	r7, r2
 801447a:	461d      	mov	r5, r3
 801447c:	4606      	mov	r6, r0
 801447e:	b118      	cbz	r0, 8014488 <_vfiprintf_r+0x18>
 8014480:	6983      	ldr	r3, [r0, #24]
 8014482:	b90b      	cbnz	r3, 8014488 <_vfiprintf_r+0x18>
 8014484:	f7fe fe3c 	bl	8013100 <__sinit>
 8014488:	4b7c      	ldr	r3, [pc, #496]	; (801467c <_vfiprintf_r+0x20c>)
 801448a:	429c      	cmp	r4, r3
 801448c:	d158      	bne.n	8014540 <_vfiprintf_r+0xd0>
 801448e:	6874      	ldr	r4, [r6, #4]
 8014490:	89a3      	ldrh	r3, [r4, #12]
 8014492:	0718      	lsls	r0, r3, #28
 8014494:	d55e      	bpl.n	8014554 <_vfiprintf_r+0xe4>
 8014496:	6923      	ldr	r3, [r4, #16]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d05b      	beq.n	8014554 <_vfiprintf_r+0xe4>
 801449c:	2300      	movs	r3, #0
 801449e:	9309      	str	r3, [sp, #36]	; 0x24
 80144a0:	2320      	movs	r3, #32
 80144a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144a6:	2330      	movs	r3, #48	; 0x30
 80144a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144ac:	9503      	str	r5, [sp, #12]
 80144ae:	f04f 0b01 	mov.w	fp, #1
 80144b2:	46b8      	mov	r8, r7
 80144b4:	4645      	mov	r5, r8
 80144b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144ba:	b10b      	cbz	r3, 80144c0 <_vfiprintf_r+0x50>
 80144bc:	2b25      	cmp	r3, #37	; 0x25
 80144be:	d154      	bne.n	801456a <_vfiprintf_r+0xfa>
 80144c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80144c4:	d00b      	beq.n	80144de <_vfiprintf_r+0x6e>
 80144c6:	4653      	mov	r3, sl
 80144c8:	463a      	mov	r2, r7
 80144ca:	4621      	mov	r1, r4
 80144cc:	4630      	mov	r0, r6
 80144ce:	f7ff ffbc 	bl	801444a <__sfputs_r>
 80144d2:	3001      	adds	r0, #1
 80144d4:	f000 80c2 	beq.w	801465c <_vfiprintf_r+0x1ec>
 80144d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144da:	4453      	add	r3, sl
 80144dc:	9309      	str	r3, [sp, #36]	; 0x24
 80144de:	f898 3000 	ldrb.w	r3, [r8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	f000 80ba 	beq.w	801465c <_vfiprintf_r+0x1ec>
 80144e8:	2300      	movs	r3, #0
 80144ea:	f04f 32ff 	mov.w	r2, #4294967295
 80144ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144f2:	9304      	str	r3, [sp, #16]
 80144f4:	9307      	str	r3, [sp, #28]
 80144f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144fa:	931a      	str	r3, [sp, #104]	; 0x68
 80144fc:	46a8      	mov	r8, r5
 80144fe:	2205      	movs	r2, #5
 8014500:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014504:	485e      	ldr	r0, [pc, #376]	; (8014680 <_vfiprintf_r+0x210>)
 8014506:	f7eb fea3 	bl	8000250 <memchr>
 801450a:	9b04      	ldr	r3, [sp, #16]
 801450c:	bb78      	cbnz	r0, 801456e <_vfiprintf_r+0xfe>
 801450e:	06d9      	lsls	r1, r3, #27
 8014510:	bf44      	itt	mi
 8014512:	2220      	movmi	r2, #32
 8014514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014518:	071a      	lsls	r2, r3, #28
 801451a:	bf44      	itt	mi
 801451c:	222b      	movmi	r2, #43	; 0x2b
 801451e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014522:	782a      	ldrb	r2, [r5, #0]
 8014524:	2a2a      	cmp	r2, #42	; 0x2a
 8014526:	d02a      	beq.n	801457e <_vfiprintf_r+0x10e>
 8014528:	9a07      	ldr	r2, [sp, #28]
 801452a:	46a8      	mov	r8, r5
 801452c:	2000      	movs	r0, #0
 801452e:	250a      	movs	r5, #10
 8014530:	4641      	mov	r1, r8
 8014532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014536:	3b30      	subs	r3, #48	; 0x30
 8014538:	2b09      	cmp	r3, #9
 801453a:	d969      	bls.n	8014610 <_vfiprintf_r+0x1a0>
 801453c:	b360      	cbz	r0, 8014598 <_vfiprintf_r+0x128>
 801453e:	e024      	b.n	801458a <_vfiprintf_r+0x11a>
 8014540:	4b50      	ldr	r3, [pc, #320]	; (8014684 <_vfiprintf_r+0x214>)
 8014542:	429c      	cmp	r4, r3
 8014544:	d101      	bne.n	801454a <_vfiprintf_r+0xda>
 8014546:	68b4      	ldr	r4, [r6, #8]
 8014548:	e7a2      	b.n	8014490 <_vfiprintf_r+0x20>
 801454a:	4b4f      	ldr	r3, [pc, #316]	; (8014688 <_vfiprintf_r+0x218>)
 801454c:	429c      	cmp	r4, r3
 801454e:	bf08      	it	eq
 8014550:	68f4      	ldreq	r4, [r6, #12]
 8014552:	e79d      	b.n	8014490 <_vfiprintf_r+0x20>
 8014554:	4621      	mov	r1, r4
 8014556:	4630      	mov	r0, r6
 8014558:	f7fd fe9a 	bl	8012290 <__swsetup_r>
 801455c:	2800      	cmp	r0, #0
 801455e:	d09d      	beq.n	801449c <_vfiprintf_r+0x2c>
 8014560:	f04f 30ff 	mov.w	r0, #4294967295
 8014564:	b01d      	add	sp, #116	; 0x74
 8014566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456a:	46a8      	mov	r8, r5
 801456c:	e7a2      	b.n	80144b4 <_vfiprintf_r+0x44>
 801456e:	4a44      	ldr	r2, [pc, #272]	; (8014680 <_vfiprintf_r+0x210>)
 8014570:	1a80      	subs	r0, r0, r2
 8014572:	fa0b f000 	lsl.w	r0, fp, r0
 8014576:	4318      	orrs	r0, r3
 8014578:	9004      	str	r0, [sp, #16]
 801457a:	4645      	mov	r5, r8
 801457c:	e7be      	b.n	80144fc <_vfiprintf_r+0x8c>
 801457e:	9a03      	ldr	r2, [sp, #12]
 8014580:	1d11      	adds	r1, r2, #4
 8014582:	6812      	ldr	r2, [r2, #0]
 8014584:	9103      	str	r1, [sp, #12]
 8014586:	2a00      	cmp	r2, #0
 8014588:	db01      	blt.n	801458e <_vfiprintf_r+0x11e>
 801458a:	9207      	str	r2, [sp, #28]
 801458c:	e004      	b.n	8014598 <_vfiprintf_r+0x128>
 801458e:	4252      	negs	r2, r2
 8014590:	f043 0302 	orr.w	r3, r3, #2
 8014594:	9207      	str	r2, [sp, #28]
 8014596:	9304      	str	r3, [sp, #16]
 8014598:	f898 3000 	ldrb.w	r3, [r8]
 801459c:	2b2e      	cmp	r3, #46	; 0x2e
 801459e:	d10e      	bne.n	80145be <_vfiprintf_r+0x14e>
 80145a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80145a4:	2b2a      	cmp	r3, #42	; 0x2a
 80145a6:	d138      	bne.n	801461a <_vfiprintf_r+0x1aa>
 80145a8:	9b03      	ldr	r3, [sp, #12]
 80145aa:	1d1a      	adds	r2, r3, #4
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	9203      	str	r2, [sp, #12]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	bfb8      	it	lt
 80145b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80145b8:	f108 0802 	add.w	r8, r8, #2
 80145bc:	9305      	str	r3, [sp, #20]
 80145be:	4d33      	ldr	r5, [pc, #204]	; (801468c <_vfiprintf_r+0x21c>)
 80145c0:	f898 1000 	ldrb.w	r1, [r8]
 80145c4:	2203      	movs	r2, #3
 80145c6:	4628      	mov	r0, r5
 80145c8:	f7eb fe42 	bl	8000250 <memchr>
 80145cc:	b140      	cbz	r0, 80145e0 <_vfiprintf_r+0x170>
 80145ce:	2340      	movs	r3, #64	; 0x40
 80145d0:	1b40      	subs	r0, r0, r5
 80145d2:	fa03 f000 	lsl.w	r0, r3, r0
 80145d6:	9b04      	ldr	r3, [sp, #16]
 80145d8:	4303      	orrs	r3, r0
 80145da:	f108 0801 	add.w	r8, r8, #1
 80145de:	9304      	str	r3, [sp, #16]
 80145e0:	f898 1000 	ldrb.w	r1, [r8]
 80145e4:	482a      	ldr	r0, [pc, #168]	; (8014690 <_vfiprintf_r+0x220>)
 80145e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145ea:	2206      	movs	r2, #6
 80145ec:	f108 0701 	add.w	r7, r8, #1
 80145f0:	f7eb fe2e 	bl	8000250 <memchr>
 80145f4:	2800      	cmp	r0, #0
 80145f6:	d037      	beq.n	8014668 <_vfiprintf_r+0x1f8>
 80145f8:	4b26      	ldr	r3, [pc, #152]	; (8014694 <_vfiprintf_r+0x224>)
 80145fa:	bb1b      	cbnz	r3, 8014644 <_vfiprintf_r+0x1d4>
 80145fc:	9b03      	ldr	r3, [sp, #12]
 80145fe:	3307      	adds	r3, #7
 8014600:	f023 0307 	bic.w	r3, r3, #7
 8014604:	3308      	adds	r3, #8
 8014606:	9303      	str	r3, [sp, #12]
 8014608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460a:	444b      	add	r3, r9
 801460c:	9309      	str	r3, [sp, #36]	; 0x24
 801460e:	e750      	b.n	80144b2 <_vfiprintf_r+0x42>
 8014610:	fb05 3202 	mla	r2, r5, r2, r3
 8014614:	2001      	movs	r0, #1
 8014616:	4688      	mov	r8, r1
 8014618:	e78a      	b.n	8014530 <_vfiprintf_r+0xc0>
 801461a:	2300      	movs	r3, #0
 801461c:	f108 0801 	add.w	r8, r8, #1
 8014620:	9305      	str	r3, [sp, #20]
 8014622:	4619      	mov	r1, r3
 8014624:	250a      	movs	r5, #10
 8014626:	4640      	mov	r0, r8
 8014628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801462c:	3a30      	subs	r2, #48	; 0x30
 801462e:	2a09      	cmp	r2, #9
 8014630:	d903      	bls.n	801463a <_vfiprintf_r+0x1ca>
 8014632:	2b00      	cmp	r3, #0
 8014634:	d0c3      	beq.n	80145be <_vfiprintf_r+0x14e>
 8014636:	9105      	str	r1, [sp, #20]
 8014638:	e7c1      	b.n	80145be <_vfiprintf_r+0x14e>
 801463a:	fb05 2101 	mla	r1, r5, r1, r2
 801463e:	2301      	movs	r3, #1
 8014640:	4680      	mov	r8, r0
 8014642:	e7f0      	b.n	8014626 <_vfiprintf_r+0x1b6>
 8014644:	ab03      	add	r3, sp, #12
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	4622      	mov	r2, r4
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <_vfiprintf_r+0x228>)
 801464c:	a904      	add	r1, sp, #16
 801464e:	4630      	mov	r0, r6
 8014650:	f7fc f8ca 	bl	80107e8 <_printf_float>
 8014654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014658:	4681      	mov	r9, r0
 801465a:	d1d5      	bne.n	8014608 <_vfiprintf_r+0x198>
 801465c:	89a3      	ldrh	r3, [r4, #12]
 801465e:	065b      	lsls	r3, r3, #25
 8014660:	f53f af7e 	bmi.w	8014560 <_vfiprintf_r+0xf0>
 8014664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014666:	e77d      	b.n	8014564 <_vfiprintf_r+0xf4>
 8014668:	ab03      	add	r3, sp, #12
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	4622      	mov	r2, r4
 801466e:	4b0a      	ldr	r3, [pc, #40]	; (8014698 <_vfiprintf_r+0x228>)
 8014670:	a904      	add	r1, sp, #16
 8014672:	4630      	mov	r0, r6
 8014674:	f7fc fb5a 	bl	8010d2c <_printf_i>
 8014678:	e7ec      	b.n	8014654 <_vfiprintf_r+0x1e4>
 801467a:	bf00      	nop
 801467c:	08015098 	.word	0x08015098
 8014680:	080151e4 	.word	0x080151e4
 8014684:	080150b8 	.word	0x080150b8
 8014688:	08015078 	.word	0x08015078
 801468c:	080151ea 	.word	0x080151ea
 8014690:	080151ee 	.word	0x080151ee
 8014694:	080107e9 	.word	0x080107e9
 8014698:	0801444b 	.word	0x0801444b

0801469c <__sread>:
 801469c:	b510      	push	{r4, lr}
 801469e:	460c      	mov	r4, r1
 80146a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146a4:	f000 f8f2 	bl	801488c <_read_r>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	bfab      	itete	ge
 80146ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146ae:	89a3      	ldrhlt	r3, [r4, #12]
 80146b0:	181b      	addge	r3, r3, r0
 80146b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146b6:	bfac      	ite	ge
 80146b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80146ba:	81a3      	strhlt	r3, [r4, #12]
 80146bc:	bd10      	pop	{r4, pc}

080146be <__swrite>:
 80146be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c2:	461f      	mov	r7, r3
 80146c4:	898b      	ldrh	r3, [r1, #12]
 80146c6:	05db      	lsls	r3, r3, #23
 80146c8:	4605      	mov	r5, r0
 80146ca:	460c      	mov	r4, r1
 80146cc:	4616      	mov	r6, r2
 80146ce:	d505      	bpl.n	80146dc <__swrite+0x1e>
 80146d0:	2302      	movs	r3, #2
 80146d2:	2200      	movs	r2, #0
 80146d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d8:	f000 f886 	bl	80147e8 <_lseek_r>
 80146dc:	89a3      	ldrh	r3, [r4, #12]
 80146de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146e6:	81a3      	strh	r3, [r4, #12]
 80146e8:	4632      	mov	r2, r6
 80146ea:	463b      	mov	r3, r7
 80146ec:	4628      	mov	r0, r5
 80146ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146f2:	f000 b835 	b.w	8014760 <_write_r>

080146f6 <__sseek>:
 80146f6:	b510      	push	{r4, lr}
 80146f8:	460c      	mov	r4, r1
 80146fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146fe:	f000 f873 	bl	80147e8 <_lseek_r>
 8014702:	1c43      	adds	r3, r0, #1
 8014704:	89a3      	ldrh	r3, [r4, #12]
 8014706:	bf15      	itete	ne
 8014708:	6560      	strne	r0, [r4, #84]	; 0x54
 801470a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801470e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014712:	81a3      	strheq	r3, [r4, #12]
 8014714:	bf18      	it	ne
 8014716:	81a3      	strhne	r3, [r4, #12]
 8014718:	bd10      	pop	{r4, pc}

0801471a <__sclose>:
 801471a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801471e:	f000 b831 	b.w	8014784 <_close_r>

08014722 <strncmp>:
 8014722:	b510      	push	{r4, lr}
 8014724:	b16a      	cbz	r2, 8014742 <strncmp+0x20>
 8014726:	3901      	subs	r1, #1
 8014728:	1884      	adds	r4, r0, r2
 801472a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801472e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014732:	4293      	cmp	r3, r2
 8014734:	d103      	bne.n	801473e <strncmp+0x1c>
 8014736:	42a0      	cmp	r0, r4
 8014738:	d001      	beq.n	801473e <strncmp+0x1c>
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1f5      	bne.n	801472a <strncmp+0x8>
 801473e:	1a98      	subs	r0, r3, r2
 8014740:	bd10      	pop	{r4, pc}
 8014742:	4610      	mov	r0, r2
 8014744:	e7fc      	b.n	8014740 <strncmp+0x1e>

08014746 <__ascii_wctomb>:
 8014746:	b149      	cbz	r1, 801475c <__ascii_wctomb+0x16>
 8014748:	2aff      	cmp	r2, #255	; 0xff
 801474a:	bf85      	ittet	hi
 801474c:	238a      	movhi	r3, #138	; 0x8a
 801474e:	6003      	strhi	r3, [r0, #0]
 8014750:	700a      	strbls	r2, [r1, #0]
 8014752:	f04f 30ff 	movhi.w	r0, #4294967295
 8014756:	bf98      	it	ls
 8014758:	2001      	movls	r0, #1
 801475a:	4770      	bx	lr
 801475c:	4608      	mov	r0, r1
 801475e:	4770      	bx	lr

08014760 <_write_r>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	4c07      	ldr	r4, [pc, #28]	; (8014780 <_write_r+0x20>)
 8014764:	4605      	mov	r5, r0
 8014766:	4608      	mov	r0, r1
 8014768:	4611      	mov	r1, r2
 801476a:	2200      	movs	r2, #0
 801476c:	6022      	str	r2, [r4, #0]
 801476e:	461a      	mov	r2, r3
 8014770:	f7f9 f8ee 	bl	800d950 <_write>
 8014774:	1c43      	adds	r3, r0, #1
 8014776:	d102      	bne.n	801477e <_write_r+0x1e>
 8014778:	6823      	ldr	r3, [r4, #0]
 801477a:	b103      	cbz	r3, 801477e <_write_r+0x1e>
 801477c:	602b      	str	r3, [r5, #0]
 801477e:	bd38      	pop	{r3, r4, r5, pc}
 8014780:	20015e94 	.word	0x20015e94

08014784 <_close_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	4c06      	ldr	r4, [pc, #24]	; (80147a0 <_close_r+0x1c>)
 8014788:	2300      	movs	r3, #0
 801478a:	4605      	mov	r5, r0
 801478c:	4608      	mov	r0, r1
 801478e:	6023      	str	r3, [r4, #0]
 8014790:	f000 f896 	bl	80148c0 <_close>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	d102      	bne.n	801479e <_close_r+0x1a>
 8014798:	6823      	ldr	r3, [r4, #0]
 801479a:	b103      	cbz	r3, 801479e <_close_r+0x1a>
 801479c:	602b      	str	r3, [r5, #0]
 801479e:	bd38      	pop	{r3, r4, r5, pc}
 80147a0:	20015e94 	.word	0x20015e94

080147a4 <_fstat_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	4c07      	ldr	r4, [pc, #28]	; (80147c4 <_fstat_r+0x20>)
 80147a8:	2300      	movs	r3, #0
 80147aa:	4605      	mov	r5, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	4611      	mov	r1, r2
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	f000 f88d 	bl	80148d0 <_fstat>
 80147b6:	1c43      	adds	r3, r0, #1
 80147b8:	d102      	bne.n	80147c0 <_fstat_r+0x1c>
 80147ba:	6823      	ldr	r3, [r4, #0]
 80147bc:	b103      	cbz	r3, 80147c0 <_fstat_r+0x1c>
 80147be:	602b      	str	r3, [r5, #0]
 80147c0:	bd38      	pop	{r3, r4, r5, pc}
 80147c2:	bf00      	nop
 80147c4:	20015e94 	.word	0x20015e94

080147c8 <_isatty_r>:
 80147c8:	b538      	push	{r3, r4, r5, lr}
 80147ca:	4c06      	ldr	r4, [pc, #24]	; (80147e4 <_isatty_r+0x1c>)
 80147cc:	2300      	movs	r3, #0
 80147ce:	4605      	mov	r5, r0
 80147d0:	4608      	mov	r0, r1
 80147d2:	6023      	str	r3, [r4, #0]
 80147d4:	f000 f88c 	bl	80148f0 <_isatty>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d102      	bne.n	80147e2 <_isatty_r+0x1a>
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	b103      	cbz	r3, 80147e2 <_isatty_r+0x1a>
 80147e0:	602b      	str	r3, [r5, #0]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	20015e94 	.word	0x20015e94

080147e8 <_lseek_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4c07      	ldr	r4, [pc, #28]	; (8014808 <_lseek_r+0x20>)
 80147ec:	4605      	mov	r5, r0
 80147ee:	4608      	mov	r0, r1
 80147f0:	4611      	mov	r1, r2
 80147f2:	2200      	movs	r2, #0
 80147f4:	6022      	str	r2, [r4, #0]
 80147f6:	461a      	mov	r2, r3
 80147f8:	f000 f88a 	bl	8014910 <_lseek>
 80147fc:	1c43      	adds	r3, r0, #1
 80147fe:	d102      	bne.n	8014806 <_lseek_r+0x1e>
 8014800:	6823      	ldr	r3, [r4, #0]
 8014802:	b103      	cbz	r3, 8014806 <_lseek_r+0x1e>
 8014804:	602b      	str	r3, [r5, #0]
 8014806:	bd38      	pop	{r3, r4, r5, pc}
 8014808:	20015e94 	.word	0x20015e94

0801480c <memmove>:
 801480c:	4288      	cmp	r0, r1
 801480e:	b510      	push	{r4, lr}
 8014810:	eb01 0302 	add.w	r3, r1, r2
 8014814:	d807      	bhi.n	8014826 <memmove+0x1a>
 8014816:	1e42      	subs	r2, r0, #1
 8014818:	4299      	cmp	r1, r3
 801481a:	d00a      	beq.n	8014832 <memmove+0x26>
 801481c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014820:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014824:	e7f8      	b.n	8014818 <memmove+0xc>
 8014826:	4283      	cmp	r3, r0
 8014828:	d9f5      	bls.n	8014816 <memmove+0xa>
 801482a:	1881      	adds	r1, r0, r2
 801482c:	1ad2      	subs	r2, r2, r3
 801482e:	42d3      	cmn	r3, r2
 8014830:	d100      	bne.n	8014834 <memmove+0x28>
 8014832:	bd10      	pop	{r4, pc}
 8014834:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014838:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801483c:	e7f7      	b.n	801482e <memmove+0x22>

0801483e <_realloc_r>:
 801483e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014840:	4607      	mov	r7, r0
 8014842:	4614      	mov	r4, r2
 8014844:	460e      	mov	r6, r1
 8014846:	b921      	cbnz	r1, 8014852 <_realloc_r+0x14>
 8014848:	4611      	mov	r1, r2
 801484a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801484e:	f7fb bee9 	b.w	8010624 <_malloc_r>
 8014852:	b922      	cbnz	r2, 801485e <_realloc_r+0x20>
 8014854:	f7fb fe98 	bl	8010588 <_free_r>
 8014858:	4625      	mov	r5, r4
 801485a:	4628      	mov	r0, r5
 801485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801485e:	f000 f827 	bl	80148b0 <_malloc_usable_size_r>
 8014862:	42a0      	cmp	r0, r4
 8014864:	d20f      	bcs.n	8014886 <_realloc_r+0x48>
 8014866:	4621      	mov	r1, r4
 8014868:	4638      	mov	r0, r7
 801486a:	f7fb fedb 	bl	8010624 <_malloc_r>
 801486e:	4605      	mov	r5, r0
 8014870:	2800      	cmp	r0, #0
 8014872:	d0f2      	beq.n	801485a <_realloc_r+0x1c>
 8014874:	4631      	mov	r1, r6
 8014876:	4622      	mov	r2, r4
 8014878:	f7fb fe64 	bl	8010544 <memcpy>
 801487c:	4631      	mov	r1, r6
 801487e:	4638      	mov	r0, r7
 8014880:	f7fb fe82 	bl	8010588 <_free_r>
 8014884:	e7e9      	b.n	801485a <_realloc_r+0x1c>
 8014886:	4635      	mov	r5, r6
 8014888:	e7e7      	b.n	801485a <_realloc_r+0x1c>
	...

0801488c <_read_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4c07      	ldr	r4, [pc, #28]	; (80148ac <_read_r+0x20>)
 8014890:	4605      	mov	r5, r0
 8014892:	4608      	mov	r0, r1
 8014894:	4611      	mov	r1, r2
 8014896:	2200      	movs	r2, #0
 8014898:	6022      	str	r2, [r4, #0]
 801489a:	461a      	mov	r2, r3
 801489c:	f000 f840 	bl	8014920 <_read>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	d102      	bne.n	80148aa <_read_r+0x1e>
 80148a4:	6823      	ldr	r3, [r4, #0]
 80148a6:	b103      	cbz	r3, 80148aa <_read_r+0x1e>
 80148a8:	602b      	str	r3, [r5, #0]
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
 80148ac:	20015e94 	.word	0x20015e94

080148b0 <_malloc_usable_size_r>:
 80148b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b4:	1f18      	subs	r0, r3, #4
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	bfbc      	itt	lt
 80148ba:	580b      	ldrlt	r3, [r1, r0]
 80148bc:	18c0      	addlt	r0, r0, r3
 80148be:	4770      	bx	lr

080148c0 <_close>:
 80148c0:	4b02      	ldr	r3, [pc, #8]	; (80148cc <_close+0xc>)
 80148c2:	2258      	movs	r2, #88	; 0x58
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ca:	4770      	bx	lr
 80148cc:	20015e94 	.word	0x20015e94

080148d0 <_fstat>:
 80148d0:	4b02      	ldr	r3, [pc, #8]	; (80148dc <_fstat+0xc>)
 80148d2:	2258      	movs	r2, #88	; 0x58
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	f04f 30ff 	mov.w	r0, #4294967295
 80148da:	4770      	bx	lr
 80148dc:	20015e94 	.word	0x20015e94

080148e0 <_getpid>:
 80148e0:	4b02      	ldr	r3, [pc, #8]	; (80148ec <_getpid+0xc>)
 80148e2:	2258      	movs	r2, #88	; 0x58
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ea:	4770      	bx	lr
 80148ec:	20015e94 	.word	0x20015e94

080148f0 <_isatty>:
 80148f0:	4b02      	ldr	r3, [pc, #8]	; (80148fc <_isatty+0xc>)
 80148f2:	2258      	movs	r2, #88	; 0x58
 80148f4:	601a      	str	r2, [r3, #0]
 80148f6:	2000      	movs	r0, #0
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	20015e94 	.word	0x20015e94

08014900 <_kill>:
 8014900:	4b02      	ldr	r3, [pc, #8]	; (801490c <_kill+0xc>)
 8014902:	2258      	movs	r2, #88	; 0x58
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	f04f 30ff 	mov.w	r0, #4294967295
 801490a:	4770      	bx	lr
 801490c:	20015e94 	.word	0x20015e94

08014910 <_lseek>:
 8014910:	4b02      	ldr	r3, [pc, #8]	; (801491c <_lseek+0xc>)
 8014912:	2258      	movs	r2, #88	; 0x58
 8014914:	601a      	str	r2, [r3, #0]
 8014916:	f04f 30ff 	mov.w	r0, #4294967295
 801491a:	4770      	bx	lr
 801491c:	20015e94 	.word	0x20015e94

08014920 <_read>:
 8014920:	4b02      	ldr	r3, [pc, #8]	; (801492c <_read+0xc>)
 8014922:	2258      	movs	r2, #88	; 0x58
 8014924:	601a      	str	r2, [r3, #0]
 8014926:	f04f 30ff 	mov.w	r0, #4294967295
 801492a:	4770      	bx	lr
 801492c:	20015e94 	.word	0x20015e94

08014930 <_sbrk>:
 8014930:	4b04      	ldr	r3, [pc, #16]	; (8014944 <_sbrk+0x14>)
 8014932:	6819      	ldr	r1, [r3, #0]
 8014934:	4602      	mov	r2, r0
 8014936:	b909      	cbnz	r1, 801493c <_sbrk+0xc>
 8014938:	4903      	ldr	r1, [pc, #12]	; (8014948 <_sbrk+0x18>)
 801493a:	6019      	str	r1, [r3, #0]
 801493c:	6818      	ldr	r0, [r3, #0]
 801493e:	4402      	add	r2, r0
 8014940:	601a      	str	r2, [r3, #0]
 8014942:	4770      	bx	lr
 8014944:	2000133c 	.word	0x2000133c
 8014948:	20015e98 	.word	0x20015e98

0801494c <_exit>:
 801494c:	e7fe      	b.n	801494c <_exit>
	...

08014950 <_init>:
 8014950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014952:	bf00      	nop
 8014954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014956:	bc08      	pop	{r3}
 8014958:	469e      	mov	lr, r3
 801495a:	4770      	bx	lr

0801495c <_fini>:
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495e:	bf00      	nop
 8014960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014962:	bc08      	pop	{r3}
 8014964:	469e      	mov	lr, r3
 8014966:	4770      	bx	lr
