
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015500  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08015700  08015700  00025700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160a4  080160a4  00030578  2**0
                  CONTENTS
  4 .ARM          00000008  080160a4  080160a4  000260a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160ac  080160ac  00030578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080160ac  080160ac  000260ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160b8  080160b8  000260b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  20000000  080160bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011a08  20000578  08016634  00030578  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011f80  08016634  00031f80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00056d63  00000000  00000000  000305a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a09e  00000000  00000000  00087309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002580  00000000  00000000  000913a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021c0  00000000  00000000  00093928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034daa  00000000  00000000  00095ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ec81  00000000  00000000  000ca892  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117010  00000000  00000000  000f9513  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00210523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae74  00000000  00000000  002105a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  0021b414  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0021b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000578 	.word	0x20000578
 800021c:	00000000 	.word	0x00000000
 8000220:	080156e8 	.word	0x080156e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000057c 	.word	0x2000057c
 800023c:	080156e8 	.word	0x080156e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fe78 	bl	8001cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f007 ff48 	bl	8008e54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f007 ff1e 	bl	8008e04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000272c 	.word	0x2000272c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000272c 	.word	0x2000272c

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e031      	b.n	800108a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f006 fdca 	bl	8007bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_ADC_Init+0x84>)
 8001054:	4013      	ands	r3, r2
 8001056:	f043 0202 	orr.w	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f964 	bl	800132c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
 800107a:	e001      	b.n	8001080 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	ffffeefd 	.word	0xffffeefd

08001098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e12a      	b.n	800130a <HAL_ADC_ConfigChannel+0x272>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d93a      	bls.n	800113a <HAL_ADC_ConfigChannel+0xa2>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010cc:	d035      	beq.n	800113a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68d9      	ldr	r1, [r3, #12]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	3b1e      	subs	r3, #30
 80010e4:	2207      	movs	r2, #7
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	400a      	ands	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a87      	ldr	r2, [pc, #540]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10a      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68d9      	ldr	r1, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	061a      	lsls	r2, r3, #24
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001112:	e035      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	4603      	mov	r3, r0
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4403      	add	r3, r0
 800112c:	3b1e      	subs	r3, #30
 800112e:	409a      	lsls	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	e022      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6919      	ldr	r1, [r3, #16]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43da      	mvns	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	400a      	ands	r2, r1
 800115c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4403      	add	r3, r0
 8001176:	409a      	lsls	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b06      	cmp	r3, #6
 8001186:	d824      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	221f      	movs	r2, #31
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43da      	mvns	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	400a      	ands	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b05      	subs	r3, #5
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
 80011d0:	e04c      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d824      	bhi.n	8001224 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	; 0x23
 80011ec:	221f      	movs	r2, #31
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	3b23      	subs	r3, #35	; 0x23
 8001216:	fa00 f203 	lsl.w	r2, r0, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e023      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	; 0x41
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43da      	mvns	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b41      	subs	r3, #65	; 0x41
 8001260:	fa00 f203 	lsl.w	r2, r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800127e:	d105      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 8001286:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800128a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d109      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d105      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d125      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x22e>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d11c      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d111      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_ADC_ConfigChannel+0x28c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_ADC_ConfigChannel+0x290>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9a      	lsrs	r2, r3, #18
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012f2:	e002      	b.n	80012fa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f9      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	10000012 	.word	0x10000012
 800131c:	40012000 	.word	0x40012000
 8001320:	40012300 	.word	0x40012300
 8001324:	2000000c 	.word	0x2000000c
 8001328:	431bde83 	.word	0x431bde83

0800132c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	4b78      	ldr	r3, [pc, #480]	; (8001518 <ADC_Init+0x1ec>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a77      	ldr	r2, [pc, #476]	; (8001518 <ADC_Init+0x1ec>)
 800133a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800133e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <ADC_Init+0x1ec>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4973      	ldr	r1, [pc, #460]	; (8001518 <ADC_Init+0x1ec>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0ed      	b.n	800170e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f006 fc20 	bl	8007d84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0202 	bic.w	r2, r2, #2
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fd50 	bl	8000ff8 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155a:	e012      	b.n	8001582 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155c:	f7ff fd4c 	bl	8000ff8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d90b      	bls.n	8001582 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0c5      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e5      	bne.n	800155c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	e012      	b.n	80015ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a8:	f7ff fd26 	bl	8000ff8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d90b      	bls.n	80015ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09f      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e5      	beq.n	80015a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e5b      	ldrb	r3, [r3, #25]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e9b      	ldrb	r3, [r3, #26]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0220 	bic.w	r2, r2, #32
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7edb      	ldrb	r3, [r3, #27]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7f1b      	ldrb	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0208 	bic.w	r2, r2, #8
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7f5b      	ldrb	r3, [r3, #29]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0204 	orr.w	r2, r2, #4
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	ea42 0103 	orr.w	r1, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b08a      	sub	sp, #40	; 0x28
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d07c      	beq.n	8001856 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f97d 	bl	8001a78 <HAL_CAN_TxMailbox0CompleteCallback>
 800177e:	e016      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	e00c      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	e002      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f983 	bl	8001ab4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d024      	beq.n	8001802 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f95d 	bl	8001a8c <HAL_CAN_TxMailbox1CompleteCallback>
 80017d2:	e016      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e00c      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e002      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f963 	bl	8001ac8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d024      	beq.n	8001856 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001814:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f93d 	bl	8001aa0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001826:	e016      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
 800183a:	e00c      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	e002      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f943 	bl	8001adc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00c      	beq.n	800187a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2210      	movs	r2, #16
 8001878:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2208      	movs	r2, #8
 8001894:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f92a 	bl	8001af0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f00b ff1f 	bl	800d6f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00c      	beq.n	80018de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2210      	movs	r2, #16
 80018dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2208      	movs	r2, #8
 80018f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f902 	bl	8001b04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f00b ff0b 	bl	800d734 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2210      	movs	r2, #16
 8001938:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8ec 	bl	8001b18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8e5 	bl	8001b2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d075      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06c      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03d      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d038      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019e4:	2b30      	cmp	r3, #48	; 0x30
 80019e6:	d017      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x302>
 80019e8:	2b30      	cmp	r3, #48	; 0x30
 80019ea:	d804      	bhi.n	80019f6 <HAL_CAN_IRQHandler+0x2e0>
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d009      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x2ee>
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d00c      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019f4:	e024      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80019f6:	2b50      	cmp	r3, #80	; 0x50
 80019f8:	d018      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x316>
 80019fa:	2b60      	cmp	r3, #96	; 0x60
 80019fc:	d01b      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x320>
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d00f      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001a02:	e01d      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0c:	e018      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a16:	e013      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a20:	e00e      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2a:	e009      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a34:	e004      	b.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2204      	movs	r2, #4
 8001a56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f868 	bl	8001b40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <__NVIC_SetPriorityGrouping+0x40>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x40>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00
 8001b98:	05fa0000 	.word	0x05fa0000

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff4c 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd6:	f7ff ff61 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f7ff ffb1 	bl	8001c48 <NVIC_EncodePriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff80 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff54 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff f968 	bl	8000ff8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e099      	b.n	8001e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d54:	e00f      	b.n	8001d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d56:	f7ff f94f 	bl	8000ff8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d908      	bls.n	8001d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e078      	b.n	8001e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e8      	bne.n	8001d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_DMA_Init+0x158>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d107      	bne.n	8001de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f023 0307 	bic.w	r3, r3, #7
 8001df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d117      	bne.n	8001e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00e      	beq.n	8001e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb09 	bl	8002434 <DMA_CheckFifoParam>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e36:	2301      	movs	r3, #1
 8001e38:	e016      	b.n	8001e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fac0 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	223f      	movs	r2, #63	; 0x3f
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	e010803f 	.word	0xe010803f

08001e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_DMA_Start_IT+0x26>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e048      	b.n	8001f2c <HAL_DMA_Start_IT+0xb8>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d137      	bne.n	8001f1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa52 	bl	800236c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	223f      	movs	r2, #63	; 0x3f
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0216 	orr.w	r2, r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ef2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e005      	b.n	8001f2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f42:	f7ff f859 	bl	8000ff8 <HAL_GetTick>
 8001f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e052      	b.n	800200c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_Abort+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	e013      	b.n	8001fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb8:	f7ff f81e 	bl	8000ff8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d90c      	bls.n	8001fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e015      	b.n	800200c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e4      	bne.n	8001fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	223f      	movs	r2, #63	; 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00c      	b.n	800204c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002064:	4b92      	ldr	r3, [pc, #584]	; (80022b0 <HAL_DMA_IRQHandler+0x258>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a92      	ldr	r2, [pc, #584]	; (80022b4 <HAL_DMA_IRQHandler+0x25c>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2208      	movs	r2, #8
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2208      	movs	r2, #8
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2204      	movs	r2, #4
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2204      	movs	r2, #4
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2210      	movs	r2, #16
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d043      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2210      	movs	r2, #16
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d018      	beq.n	800219a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d024      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	e01f      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e016      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2220      	movs	r2, #32
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 808e 	beq.w	80022f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8086 	beq.w	80022f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2220      	movs	r2, #32
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d136      	bne.n	8002270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0216 	bic.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_DMA_IRQHandler+0x1da>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0208 	bic.w	r2, r2, #8
 8002240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	223f      	movs	r2, #63	; 0x3f
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07d      	beq.n	8002362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
        }
        return;
 800226e:	e078      	b.n	8002362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01c      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	2b00      	cmp	r3, #0
 8002292:	d030      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e02b      	b.n	80022f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
 80022ae:	e022      	b.n	80022f6 <HAL_DMA_IRQHandler+0x29e>
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0210 	bic.w	r2, r2, #16
 80022d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d032      	beq.n	8002364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d022      	beq.n	8002350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3301      	adds	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	429a      	cmp	r2, r3
 800232c:	d307      	bcc.n	800233e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f2      	bne.n	8002322 <HAL_DMA_IRQHandler+0x2ca>
 800233c:	e000      	b.n	8002340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800233e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e000      	b.n	8002364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002362:	bf00      	nop
    }
  }
}
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop

0800236c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d108      	bne.n	80023ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023aa:	e007      	b.n	80023bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a13      	ldr	r2, [pc, #76]	; (8002428 <DMA_CalcBaseAndBitshift+0x60>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d908      	bls.n	8002408 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023fe:	4013      	ands	r3, r2
 8002400:	1d1a      	adds	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58
 8002406:	e006      	b.n	8002416 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	aaaaaaab 	.word	0xaaaaaaab
 800242c:	08015a64 	.word	0x08015a64
 8002430:	fffffc00 	.word	0xfffffc00

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d855      	bhi.n	8002500 <DMA_CheckFifoParam+0xcc>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002501 	.word	0x08002501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d045      	beq.n	8002504 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e042      	b.n	8002504 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002486:	d13f      	bne.n	8002508 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03c      	b.n	8002508 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d836      	bhi.n	800250c <DMA_CheckFifoParam+0xd8>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e02f      	b.n	800251a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e021      	b.n	8002510 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d4:	d11e      	bne.n	8002514 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01b      	b.n	8002514 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <DMA_CheckFifoParam+0xb4>
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d003      	beq.n	80024ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e6:	e018      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e015      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      break;
 80024fe:	e00b      	b.n	8002518 <DMA_CheckFifoParam+0xe4>
      break;
 8002500:	bf00      	nop
 8002502:	e00a      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002504:	bf00      	nop
 8002506:	e008      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002508:	bf00      	nop
 800250a:	e006      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 800250c:	bf00      	nop
 800250e:	e004      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002510:	bf00      	nop
 8002512:	e002      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;   
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002518:	bf00      	nop
    }
  } 
  
  return status; 
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e175      	b.n	8002834 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8164 	bne.w	800282e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00b      	beq.n	8002586 <HAL_GPIO_Init+0x5e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257a:	2b11      	cmp	r3, #17
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x100>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b12      	cmp	r3, #18
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80be 	beq.w	800282e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_GPIO_Init+0x320>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_GPIO_Init+0x320>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b62      	ldr	r3, [pc, #392]	; (8002848 <HAL_GPIO_Init+0x320>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ca:	4a60      	ldr	r2, [pc, #384]	; (800284c <HAL_GPIO_Init+0x324>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_GPIO_Init+0x328>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d037      	beq.n	8002766 <HAL_GPIO_Init+0x23e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_GPIO_Init+0x32c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d031      	beq.n	8002762 <HAL_GPIO_Init+0x23a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a55      	ldr	r2, [pc, #340]	; (8002858 <HAL_GPIO_Init+0x330>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x236>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a54      	ldr	r2, [pc, #336]	; (800285c <HAL_GPIO_Init+0x334>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x232>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a53      	ldr	r2, [pc, #332]	; (8002860 <HAL_GPIO_Init+0x338>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x22e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_GPIO_Init+0x33c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x22a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a51      	ldr	r2, [pc, #324]	; (8002868 <HAL_GPIO_Init+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x226>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a50      	ldr	r2, [pc, #320]	; (800286c <HAL_GPIO_Init+0x344>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x222>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <HAL_GPIO_Init+0x348>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_GPIO_Init+0x34c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x21a>
 800273e:	2309      	movs	r3, #9
 8002740:	e012      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002742:	230a      	movs	r3, #10
 8002744:	e010      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002746:	2308      	movs	r3, #8
 8002748:	e00e      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800274a:	2307      	movs	r3, #7
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800274e:	2306      	movs	r3, #6
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002778:	4934      	ldr	r1, [pc, #208]	; (800284c <HAL_GPIO_Init+0x324>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002786:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_GPIO_Init+0x350>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027aa:	4a33      	ldr	r2, [pc, #204]	; (8002878 <HAL_GPIO_Init+0x350>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_GPIO_Init+0x350>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d4:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_GPIO_Init+0x350>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_GPIO_Init+0x350>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fe:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_GPIO_Init+0x350>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_GPIO_Init+0x350>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_GPIO_Init+0x350>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae86 	bls.w	8002548 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	3724      	adds	r7, #36	; 0x24
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40022000 	.word	0x40022000
 8002874:	40022400 	.word	0x40022400
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 feb8 	bl	8008644 <HAL_GPIO_EXTI_Callback>
  }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40013c00 	.word	0x40013c00

080028e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f005 fcd2 	bl	80082b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	e006      	b.n	8002968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d104      	bne.n	800297a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_I2C_Init+0x11c>)
 8002986:	430b      	orrs	r3, r1
 8002988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	ea42 0103 	orr.w	r1, r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69d9      	ldr	r1, [r3, #28]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	02008000 	.word	0x02008000

08002a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d138      	bne.n	8002a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e032      	b.n	8002a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d139      	bne.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e033      	b.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2224      	movs	r2, #36	; 0x24
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5e:	f7fe fa4b 	bl	8000ff8 <HAL_GetTick>
 8002b62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b64:	e009      	b.n	8002b7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b66:	f7fe fa47 	bl	8000ff8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b74:	d901      	bls.n	8002b7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e022      	b.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d1ee      	bne.n	8002b66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b94:	f7fe fa30 	bl	8000ff8 <HAL_GetTick>
 8002b98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b9a:	e009      	b.n	8002bb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b9c:	f7fe fa2c 	bl	8000ff8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002baa:	d901      	bls.n	8002bb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e007      	b.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e29b      	b.n	800311e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8087 	beq.w	8002d02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf4:	4b96      	ldr	r3, [pc, #600]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c00:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0x62>
 8002c0c:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x130>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d168      	bne.n	8002d00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e275      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7a>
 8002c3c:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a83      	ldr	r2, [pc, #524]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e02e      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x9c>
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7e      	ldr	r2, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7b      	ldr	r2, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a72      	ldr	r2, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f9a2 	bl	8000ff8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f99e 	bl	8000ff8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e229      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f98e 	bl	8000ff8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe f98a 	bl	8000ff8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e215      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x110>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d069      	beq.n	8002de2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x190>
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1e9      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	493d      	ldr	r1, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e040      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d023      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f940 	bl	8000ff8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe f93c 	bl	8000ff8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1c7      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4929      	ldr	r1, [pc, #164]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
 8002dae:	e018      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f91c 	bl	8000ff8 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f918 	bl	8000ff8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1a3      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d038      	beq.n	8002e60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe f8f9 	bl	8000ff8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f8f5 	bl	8000ff8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e180      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x23a>
 8002e28:	e01a      	b.n	8002e60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe f8df 	bl	8000ff8 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe f8db 	bl	8000ff8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d903      	bls.n	8002e54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e166      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
 8002e50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a4 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a88      	ldr	r2, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ea2:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe f8a3 	bl	8000ff8 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe f89f 	bl	8000ff8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e12a      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x31a>
 8002edc:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a6f      	ldr	r2, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	e02d      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x33c>
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	e01c      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x35e>
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	f043 0304 	orr.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f853 	bl	8000ff8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe f84f 	bl	8000ff8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0d8      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RCC_OscConfig+0x386>
 8002f78:	e014      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f83d 	bl	8000ff8 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe f839 	bl	8000ff8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0c2      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80ae 	beq.w	800311c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc0:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d06d      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d14b      	bne.n	800306c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f80a 	bl	8000ff8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f806 	bl	8000ff8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e091      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fd ffd8 	bl	8000ff8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd ffd4 	bl	8000ff8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e05f      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x47c>
 800306a:	e057      	b.n	800311c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fd ffbe 	bl	8000ff8 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fd ffba 	bl	8000ff8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e045      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x4b0>
 800309e:	e03d      	b.n	800311c <HAL_RCC_OscConfig+0x54c>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_OscConfig+0x558>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d129      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d119      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10f      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d910      	bls.n	8003174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4965      	ldr	r1, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d040      	beq.n	8003250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e073      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4936      	ldr	r1, [pc, #216]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fd feea 	bl	8000ff8 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fd fee6 	bl	8000ff8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e053      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 020f 	bic.w	r2, r3, #15
 8003266:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1cc>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	fa21 f303 	lsr.w	r3, r1, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1d0>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f005 fdb8 	bl	8008e54 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08015a6c 	.word	0x08015a6c
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d007      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x32>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d008      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x38>
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 808d 	bne.w	800344a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003332:	60bb      	str	r3, [r7, #8]
      break;
 8003334:	e08c      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	e089      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003346:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d023      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea03 0501 	and.w	r5, r3, r1
 8003368:	ea04 0602 	and.w	r6, r4, r2
 800336c:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 800336e:	fb02 f106 	mul.w	r1, r2, r6
 8003372:	2200      	movs	r2, #0
 8003374:	fb02 f205 	mul.w	r2, r2, r5
 8003378:	440a      	add	r2, r1
 800337a:	493a      	ldr	r1, [pc, #232]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 800337c:	fba5 0101 	umull	r0, r1, r5, r1
 8003380:	1853      	adds	r3, r2, r1
 8003382:	4619      	mov	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 0400 	mov.w	r4, #0
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	f7fc ffaf 	bl	80002f0 <__aeabi_uldivmod>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e049      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	ea03 0501 	and.w	r5, r3, r1
 80033b0:	ea04 0602 	and.w	r6, r4, r2
 80033b4:	4629      	mov	r1, r5
 80033b6:	4632      	mov	r2, r6
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0154      	lsls	r4, r2, #5
 80033c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033c6:	014b      	lsls	r3, r1, #5
 80033c8:	4619      	mov	r1, r3
 80033ca:	4622      	mov	r2, r4
 80033cc:	1b49      	subs	r1, r1, r5
 80033ce:	eb62 0206 	sbc.w	r2, r2, r6
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0194      	lsls	r4, r2, #6
 80033dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	1a5b      	subs	r3, r3, r1
 80033e4:	eb64 0402 	sbc.w	r4, r4, r2
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	00e2      	lsls	r2, r4, #3
 80033f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	460b      	mov	r3, r1
 80033fa:	4614      	mov	r4, r2
 80033fc:	195b      	adds	r3, r3, r5
 80033fe:	eb44 0406 	adc.w	r4, r4, r6
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	02a2      	lsls	r2, r4, #10
 800340c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003410:	0299      	lsls	r1, r3, #10
 8003412:	460b      	mov	r3, r1
 8003414:	4614      	mov	r4, r2
 8003416:	4618      	mov	r0, r3
 8003418:	4621      	mov	r1, r4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	f7fc ff64 	bl	80002f0 <__aeabi_uldivmod>
 8003428:	4603      	mov	r3, r0
 800342a:	460c      	mov	r4, r1
 800342c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	3301      	adds	r3, #1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	60bb      	str	r3, [r7, #8]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x15c>)
 800344c:	60bb      	str	r3, [r7, #8]
      break;
 800344e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003450:	68bb      	ldr	r3, [r7, #8]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	017d7840 	.word	0x017d7840

08003468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000000c 	.word	0x2000000c

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4601      	mov	r1, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08015a7c 	.word	0x08015a7c

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4601      	mov	r1, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4a03      	ldr	r2, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08015a7c 	.word	0x08015a7c

080034d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	220f      	movs	r2, #15
 80034de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetClockConfig+0x60>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40023c00 	.word	0x40023c00

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d012      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800355c:	4b69      	ldr	r3, [pc, #420]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a68      	ldr	r2, [pc, #416]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003566:	6093      	str	r3, [r2, #8]
 8003568:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	4964      	ldr	r1, [pc, #400]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	4959      	ldr	r1, [pc, #356]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ca:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	494a      	ldr	r1, [pc, #296]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 808b 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	4a39      	ldr	r2, [pc, #228]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	6413      	str	r3, [r2, #64]	; 0x40
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003630:	4b35      	ldr	r3, [pc, #212]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a34      	ldr	r2, [pc, #208]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fd fcdc 	bl	8000ff8 <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fd fcd8 	bl	8000ff8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e38d      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d035      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d02e      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d114      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fd fca0 	bl	8000ff8 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fc9c 	bl	8000ff8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e34f      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ee      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ea:	d111      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	4901      	ldr	r1, [pc, #4]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
 8003702:	e00b      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	0ffffcff 	.word	0x0ffffcff
 8003710:	4bb3      	ldr	r3, [pc, #716]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4ab2      	ldr	r2, [pc, #712]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	4bb0      	ldr	r3, [pc, #704]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	49ad      	ldr	r1, [pc, #692]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372a:	4313      	orrs	r3, r2
 800372c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800373a:	4ba9      	ldr	r3, [pc, #676]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003740:	4aa7      	ldr	r2, [pc, #668]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800374a:	4ba5      	ldr	r3, [pc, #660]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	49a2      	ldr	r1, [pc, #648]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003768:	4b9d      	ldr	r3, [pc, #628]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003776:	499a      	ldr	r1, [pc, #616]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378a:	4b95      	ldr	r3, [pc, #596]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003798:	4991      	ldr	r1, [pc, #580]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ac:	4b8c      	ldr	r3, [pc, #560]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ba:	4989      	ldr	r1, [pc, #548]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ce:	4b84      	ldr	r3, [pc, #528]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4980      	ldr	r1, [pc, #512]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f0:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4978      	ldr	r1, [pc, #480]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003812:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f023 020c 	bic.w	r2, r3, #12
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	496f      	ldr	r1, [pc, #444]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	4967      	ldr	r1, [pc, #412]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003856:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	495e      	ldr	r1, [pc, #376]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	4956      	ldr	r1, [pc, #344]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	494d      	ldr	r1, [pc, #308]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038bc:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	4945      	ldr	r1, [pc, #276]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038de:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	493c      	ldr	r1, [pc, #240]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390e:	4934      	ldr	r1, [pc, #208]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d011      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003930:	492b      	ldr	r1, [pc, #172]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003962:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	491b      	ldr	r1, [pc, #108]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003994:	4912      	ldr	r1, [pc, #72]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b8:	4909      	ldr	r1, [pc, #36]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00f      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	4985      	ldr	r1, [pc, #532]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00b      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039f8:	4b80      	ldr	r3, [pc, #512]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	497c      	ldr	r1, [pc, #496]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d005      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a1e:	f040 80d6 	bne.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a22:	4b76      	ldr	r3, [pc, #472]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a75      	ldr	r2, [pc, #468]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fae3 	bl	8000ff8 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a36:	f7fd fadf 	bl	8000ff8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	; 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e194      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a48:	4b6c      	ldr	r3, [pc, #432]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d021      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11d      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a68:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6e:	0c1b      	lsrs	r3, r3, #16
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a76:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7c:	0e1b      	lsrs	r3, r3, #24
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	019a      	lsls	r2, r3, #6
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	071b      	lsls	r3, r3, #28
 8003a9c:	4957      	ldr	r1, [pc, #348]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d129      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ad0:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae4:	0f1b      	lsrs	r3, r3, #28
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	019a      	lsls	r2, r3, #6
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	493d      	ldr	r1, [pc, #244]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b12:	f023 021f 	bic.w	r2, r3, #31
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4937      	ldr	r1, [pc, #220]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01d      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	0e1b      	lsrs	r3, r3, #24
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	0f1b      	lsrs	r3, r3, #28
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	019a      	lsls	r2, r3, #6
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	071b      	lsls	r3, r3, #28
 8003b64:	4925      	ldr	r1, [pc, #148]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d011      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	019a      	lsls	r2, r3, #6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	061b      	lsls	r3, r3, #24
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	071b      	lsls	r3, r3, #28
 8003b94:	4919      	ldr	r1, [pc, #100]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fa26 	bl	8000ff8 <HAL_GetTick>
 8003bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bb0:	f7fd fa22 	bl	8000ff8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0d7      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 80cd 	bne.w	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be2:	f7fd fa09 	bl	8000ff8 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bea:	f7fd fa05 	bl	8000ff8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	; 0x64
 8003bf6:	d903      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0ba      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c00:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0c:	d0ed      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02e      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d12a      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c36:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c44:	4b4d      	ldr	r3, [pc, #308]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	0f1b      	lsrs	r3, r3, #28
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	019a      	lsls	r2, r3, #6
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	4944      	ldr	r1, [pc, #272]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	493d      	ldr	r1, [pc, #244]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d022      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca0:	d11d      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	0e1b      	lsrs	r3, r3, #24
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb0:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	0f1b      	lsrs	r3, r3, #28
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	019a      	lsls	r2, r3, #6
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	071b      	lsls	r3, r3, #28
 8003cd6:	4929      	ldr	r1, [pc, #164]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d028      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cf8:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	019a      	lsls	r2, r3, #6
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	4911      	ldr	r1, [pc, #68]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fd f956 	bl	8000ff8 <HAL_GetTick>
 8003d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d50:	f7fd f952 	bl	8000ff8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e007      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6e:	d1ef      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800

08003d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e084      	b.n	8003e9c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f004 fd9b 	bl	80088e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd2:	d902      	bls.n	8003dda <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e002      	b.n	8003de0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003de8:	d007      	beq.n	8003dfa <HAL_SPI_Init+0x7a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e0a:	d903      	bls.n	8003e14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
 8003e12:	e002      	b.n	8003e1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	f003 0204 	and.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	ea42 0103 	orr.w	r1, r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e16c      	b.n	800419e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ed2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003eda:	7dbb      	ldrb	r3, [r7, #22]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d00d      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x58>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee6:	d106      	bne.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003ef0:	7dbb      	ldrb	r3, [r7, #22]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003efa:	e14b      	b.n	8004194 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f12:	e13f      	b.n	8004194 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d003      	beq.n	8003f28 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2205      	movs	r2, #5
 8003f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	887a      	ldrh	r2, [r7, #2]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003f70:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f7a:	d908      	bls.n	8003f8e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	e06f      	b.n	800406e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f9c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	d126      	bne.n	8003ff8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fc4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd4:	e010      	b.n	8003ff8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004002:	d134      	bne.n	800406e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004012:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800401a:	b29b      	uxth	r3, r3
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d111      	bne.n	8004048 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004032:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403a:	b29b      	uxth	r3, r3
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004046:	e012      	b.n	800406e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004056:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800405e:	b29b      	uxth	r3, r3
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	b29b      	uxth	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b04      	cmp	r3, #4
 8004078:	d108      	bne.n	800408c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	4a49      	ldr	r2, [pc, #292]	; (80041ac <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c
 800408a:	e007      	b.n	800409c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a47      	ldr	r2, [pc, #284]	; (80041b0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	4a45      	ldr	r2, [pc, #276]	; (80041b8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80040a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	2200      	movs	r2, #0
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	4619      	mov	r1, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	461a      	mov	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f7fd fed5 	bl	8001e74 <HAL_DMA_Start_IT>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f043 0210 	orr.w	r2, r3, #16
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80040e8:	e054      	b.n	8004194 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	2200      	movs	r2, #0
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	2200      	movs	r2, #0
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	2200      	movs	r2, #0
 8004118:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	4619      	mov	r1, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	f7fd fe9f 	bl	8001e74 <HAL_DMA_Start_IT>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004154:	e01e      	b.n	8004194 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d007      	beq.n	8004174 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0220 	orr.w	r2, r2, #32
 8004182:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0202 	orr.w	r2, r2, #2
 8004192:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	08004511 	.word	0x08004511
 80041ac:	080043f9 	.word	0x080043f9
 80041b0:	0800452d 	.word	0x0800452d
 80041b4:	0800447f 	.word	0x0800447f
 80041b8:	08004549 	.word	0x08004549

080041bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10f      	bne.n	8004200 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
    return;
 80041fe:	e0d8      	b.n	80043b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_SPI_IRQHandler+0x66>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	09db      	lsrs	r3, r3, #7
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
    return;
 8004220:	e0c7      	b.n	80043b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_SPI_IRQHandler+0x8c>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_SPI_IRQHandler+0x8c>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80b5 	beq.w	80043b2 <HAL_SPI_IRQHandler+0x1f6>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80ae 	beq.w	80043b2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d023      	beq.n	80042aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d011      	beq.n	8004292 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	e00b      	b.n	80042aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
        return;
 80042a8:	e083      	b.n	80043b2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d014      	beq.n	80042e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	f043 0208 	orr.w	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	2b00      	cmp	r3, #0
 800430c:	d050      	beq.n	80043b0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800431c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <HAL_SPI_IRQHandler+0x17e>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d034      	beq.n	80043a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0203 	bic.w	r2, r2, #3
 8004348:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	2b00      	cmp	r3, #0
 8004350:	d011      	beq.n	8004376 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_SPI_IRQHandler+0x1fc>)
 8004358:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fe58 	bl	8002014 <HAL_DMA_Abort_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <HAL_SPI_IRQHandler+0x1fc>)
 8004384:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fe42 	bl	8002014 <HAL_DMA_Abort_IT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80043a2:	e003      	b.n	80043ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f004 f941 	bl	800862c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043aa:	e000      	b.n	80043ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80043ac:	bf00      	nop
    return;
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
  }
}
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	08004589 	.word	0x08004589

080043bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004406:	f7fc fdf7 	bl	8000ff8 <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d02a      	beq.n	8004472 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0220 	bic.w	r2, r2, #32
 800442a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0203 	bic.w	r2, r2, #3
 800443a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f98d 	bl	8004760 <SPI_EndRxTransaction>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f004 f8de 	bl	800862c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004470:	e002      	b.n	8004478 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff ffa2 	bl	80043bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800448c:	f7fc fdb4 	bl	8000ff8 <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a0:	d030      	beq.n	8004504 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0220 	bic.w	r2, r2, #32
 80044b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	2164      	movs	r1, #100	; 0x64
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f9aa 	bl	8004810 <SPI_EndRxTxTransaction>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0203 	bic.w	r2, r2, #3
 80044dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f004 f895 	bl	800862c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004502:	e002      	b.n	800450a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f004 f883 	bl	8008610 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff ff56 	bl	80043d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff ff52 	bl	80043e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0203 	bic.w	r2, r2, #3
 8004564:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f004 f856 	bl	800862c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f004 f841 	bl	800862c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c2:	e04c      	b.n	800465e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d048      	beq.n	800465e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045cc:	f7fc fd14 	bl	8000ff8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d902      	bls.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d13d      	bne.n	800465e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d111      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004604:	d004      	beq.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460e:	d107      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004628:	d10f      	bne.n	800464a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d1a3      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004694:	e057      	b.n	8004746 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800469c:	d106      	bne.n	80046ac <SPI_WaitFifoStateUntilTimeout+0x26>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d048      	beq.n	8004746 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046b4:	f7fc fca0 	bl	8000ff8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d902      	bls.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x44>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d13d      	bne.n	8004746 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e2:	d111      	bne.n	8004708 <SPI_WaitFifoStateUntilTimeout+0x82>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ec:	d004      	beq.n	80046f8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f6:	d107      	bne.n	8004708 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004710:	d10f      	bne.n	8004732 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e008      	b.n	8004758 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d19f      	bne.n	8004696 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004774:	d111      	bne.n	800479a <SPI_EndRxTransaction+0x3a>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477e:	d004      	beq.n	800478a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004788:	d107      	bne.n	800479a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004798:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff ff04 	bl	80045b2 <SPI_WaitFlagStateUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e023      	b.n	8004808 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c8:	d11d      	bne.n	8004806 <SPI_EndRxTransaction+0xa6>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d2:	d004      	beq.n	80047de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d113      	bne.n	8004806 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff4b 	bl	8004686 <SPI_WaitFifoStateUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e000      	b.n	8004808 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff ff2c 	bl	8004686 <SPI_WaitFifoStateUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e027      	b.n	8004894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff feaf 	bl	80045b2 <SPI_WaitFlagStateUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e014      	b.n	8004894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff05 	bl	8004686 <SPI_WaitFifoStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e000      	b.n	8004894 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e01d      	b.n	80048ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f005 f8f8 	bl	8009ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f000 fbbe 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_TIM_Base_Start_IT+0x50>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d00b      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0x42>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d007      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	00010007 	.word	0x00010007

08004948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e01d      	b.n	8004996 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f005 f95a 	bl	8009c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f000 fb68 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 feea 	bl	800578c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_TIM_PWM_Start+0x7c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_PWM_Start+0x2c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_TIM_PWM_Start+0x80>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x30>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_TIM_PWM_Start+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_TIM_PWM_Start+0x84>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d00b      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x70>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0202 	mvn.w	r2, #2
 8004a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fad8 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 faca 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fadb 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0204 	mvn.w	r2, #4
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 faae 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 faa0 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fab1 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0208 	mvn.w	r2, #8
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa84 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa76 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa87 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0210 	mvn.w	r2, #16
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2208      	movs	r2, #8
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa5a 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa4c 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa5d 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0201 	mvn.w	r2, #1
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f003 fd92 	bl	80086d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ff16 	bl	8005a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 ff09 	bl	8005a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d10e      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa0b 	bl	8005048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d10e      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d107      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0220 	mvn.w	r2, #32
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fec9 	bl	80059f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e105      	b.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b14      	cmp	r3, #20
 8004c96:	f200 80f0 	bhi.w	8004e7a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cf5 	.word	0x08004cf5
 8004ca4:	08004e7b 	.word	0x08004e7b
 8004ca8:	08004e7b 	.word	0x08004e7b
 8004cac:	08004e7b 	.word	0x08004e7b
 8004cb0:	08004d35 	.word	0x08004d35
 8004cb4:	08004e7b 	.word	0x08004e7b
 8004cb8:	08004e7b 	.word	0x08004e7b
 8004cbc:	08004e7b 	.word	0x08004e7b
 8004cc0:	08004d77 	.word	0x08004d77
 8004cc4:	08004e7b 	.word	0x08004e7b
 8004cc8:	08004e7b 	.word	0x08004e7b
 8004ccc:	08004e7b 	.word	0x08004e7b
 8004cd0:	08004db7 	.word	0x08004db7
 8004cd4:	08004e7b 	.word	0x08004e7b
 8004cd8:	08004e7b 	.word	0x08004e7b
 8004cdc:	08004e7b 	.word	0x08004e7b
 8004ce0:	08004df9 	.word	0x08004df9
 8004ce4:	08004e7b 	.word	0x08004e7b
 8004ce8:	08004e7b 	.word	0x08004e7b
 8004cec:	08004e7b 	.word	0x08004e7b
 8004cf0:	08004e39 	.word	0x08004e39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fa4e 	bl	800519c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0204 	bic.w	r2, r2, #4
 8004d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6999      	ldr	r1, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	619a      	str	r2, [r3, #24]
      break;
 8004d32:	e0a3      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 faa0 	bl	8005280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
      break;
 8004d74:	e082      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 faf7 	bl	8005370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0208 	orr.w	r2, r2, #8
 8004d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0204 	bic.w	r2, r2, #4
 8004da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	61da      	str	r2, [r3, #28]
      break;
 8004db4:	e062      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fb4d 	bl	800545c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	021a      	lsls	r2, r3, #8
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	61da      	str	r2, [r3, #28]
      break;
 8004df6:	e041      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb84 	bl	800550c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0204 	bic.w	r2, r2, #4
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e36:	e021      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbb6 	bl	80055b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e78:	e000      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004e7a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop

08004e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_ConfigClockSource+0x18>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0a6      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <HAL_TIM_ConfigClockSource+0x170>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d067      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x120>
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d80b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x6c>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d073      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d802      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0x62>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d06f      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ef8:	e078      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d06c      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	d06a      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f02:	e073      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d00d      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x8c>
 8004f08:	2b70      	cmp	r3, #112	; 0x70
 8004f0a:	d804      	bhi.n	8004f16 <HAL_TIM_ConfigClockSource+0x7e>
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d033      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0xe0>
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d041      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f14:	e06a      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d066      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x152>
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d017      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f22:	e063      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 fc0a 	bl	800574c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
      break;
 8004f50:	e04c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f000 fbf3 	bl	800574c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f74:	609a      	str	r2, [r3, #8]
      break;
 8004f76:	e039      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f000 fb67 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2150      	movs	r1, #80	; 0x50
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fbc0 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004f96:	e029      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f000 fb86 	bl	80056b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2160      	movs	r1, #96	; 0x60
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fbb0 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e019      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f000 fb47 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2140      	movs	r1, #64	; 0x40
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fba0 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004fd6:	e009      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 fb97 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	fffeff88 	.word	0xfffeff88

0800500c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a40      	ldr	r2, [pc, #256]	; (8005170 <TIM_Base_SetConfig+0x114>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d00f      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3d      	ldr	r2, [pc, #244]	; (8005174 <TIM_Base_SetConfig+0x118>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <TIM_Base_SetConfig+0x11c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a3b      	ldr	r2, [pc, #236]	; (800517c <TIM_Base_SetConfig+0x120>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a3a      	ldr	r2, [pc, #232]	; (8005180 <TIM_Base_SetConfig+0x124>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <TIM_Base_SetConfig+0x114>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	d027      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <TIM_Base_SetConfig+0x118>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d023      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <TIM_Base_SetConfig+0x11c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2a      	ldr	r2, [pc, #168]	; (800517c <TIM_Base_SetConfig+0x120>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a29      	ldr	r2, [pc, #164]	; (8005180 <TIM_Base_SetConfig+0x124>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d017      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <TIM_Base_SetConfig+0x128>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <TIM_Base_SetConfig+0x12c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a26      	ldr	r2, [pc, #152]	; (800518c <TIM_Base_SetConfig+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a25      	ldr	r2, [pc, #148]	; (8005190 <TIM_Base_SetConfig+0x134>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <TIM_Base_SetConfig+0x138>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a23      	ldr	r2, [pc, #140]	; (8005198 <TIM_Base_SetConfig+0x13c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <TIM_Base_SetConfig+0x114>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_Base_SetConfig+0xf8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <TIM_Base_SetConfig+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	615a      	str	r2, [r3, #20]
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40000c00 	.word	0x40000c00
 8005180:	40010400 	.word	0x40010400
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800
 8005190:	40001800 	.word	0x40001800
 8005194:	40001c00 	.word	0x40001c00
 8005198:	40002000 	.word	0x40002000

0800519c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4b2b      	ldr	r3, [pc, #172]	; (8005274 <TIM_OC1_SetConfig+0xd8>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <TIM_OC1_SetConfig+0xdc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC1_SetConfig+0x64>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a20      	ldr	r2, [pc, #128]	; (800527c <TIM_OC1_SetConfig+0xe0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10c      	bne.n	800521a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0308 	bic.w	r3, r3, #8
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <TIM_OC1_SetConfig+0xdc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC1_SetConfig+0x8e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a15      	ldr	r2, [pc, #84]	; (800527c <TIM_OC1_SetConfig+0xe0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d111      	bne.n	800524e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	fffeff8f 	.word	0xfffeff8f
 8005278:	40010000 	.word	0x40010000
 800527c:	40010400 	.word	0x40010400

08005280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0210 	bic.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <TIM_OC2_SetConfig+0xe4>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0320 	bic.w	r3, r3, #32
 80052ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a23      	ldr	r2, [pc, #140]	; (8005368 <TIM_OC2_SetConfig+0xe8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_OC2_SetConfig+0x68>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a22      	ldr	r2, [pc, #136]	; (800536c <TIM_OC2_SetConfig+0xec>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10d      	bne.n	8005304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <TIM_OC2_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_OC2_SetConfig+0x94>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <TIM_OC2_SetConfig+0xec>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d113      	bne.n	800533c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800531a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	feff8fff 	.word	0xfeff8fff
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400

08005370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <TIM_OC3_SetConfig+0xe0>)
 800539c:	4013      	ands	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <TIM_OC3_SetConfig+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC3_SetConfig+0x66>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <TIM_OC3_SetConfig+0xe8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10d      	bne.n	80053f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <TIM_OC3_SetConfig+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC3_SetConfig+0x92>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <TIM_OC3_SetConfig+0xe8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	fffeff8f 	.word	0xfffeff8f
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <TIM_OC4_SetConfig+0xa4>)
 8005488:	4013      	ands	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <TIM_OC4_SetConfig+0xa8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC4_SetConfig+0x68>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a12      	ldr	r2, [pc, #72]	; (8005508 <TIM_OC4_SetConfig+0xac>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d109      	bne.n	80054d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	feff8fff 	.word	0xfeff8fff
 8005504:	40010000 	.word	0x40010000
 8005508:	40010400 	.word	0x40010400

0800550c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <TIM_OC5_SetConfig+0x98>)
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800554c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a12      	ldr	r2, [pc, #72]	; (80055a8 <TIM_OC5_SetConfig+0x9c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC5_SetConfig+0x5e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <TIM_OC5_SetConfig+0xa0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d109      	bne.n	800557e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	fffeff8f 	.word	0xfffeff8f
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010400 	.word	0x40010400

080055b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <TIM_OC6_SetConfig+0x9c>)
 80055dc:	4013      	ands	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	051b      	lsls	r3, r3, #20
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <TIM_OC6_SetConfig+0xa0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC6_SetConfig+0x60>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a12      	ldr	r2, [pc, #72]	; (8005654 <TIM_OC6_SetConfig+0xa4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	feff8fff 	.word	0xfeff8fff
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 030a 	bic.w	r3, r3, #10
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0210 	bic.w	r2, r3, #16
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	031b      	lsls	r3, r3, #12
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 0307 	orr.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	431a      	orrs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2201      	movs	r2, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1a      	ldr	r2, [r3, #32]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	401a      	ands	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e06d      	b.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a30      	ldr	r2, [pc, #192]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800582a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d01d      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10c      	bne.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40001800 	.word	0x40001800

080058f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800590c:	2302      	movs	r3, #2
 800590e:	e065      	b.n	80059dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d115      	bne.n	80059ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400

080059f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e040      	b.n	8005ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f004 fb50 	bl	800a0f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 faa4 	bl	8005fb8 <UART_SetConfig>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e022      	b.n	8005ac0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd42 	bl	800650c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fdc9 	bl	8006650 <UART_CheckIdleState>
 8005abe:	4603      	mov	r3, r0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d164      	bne.n	8005ba8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_UART_Transmit_DMA+0x22>
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e05d      	b.n	8005baa <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_UART_Transmit_DMA+0x34>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e056      	b.n	8005baa <HAL_UART_Transmit_DMA+0xe2>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2221      	movs	r2, #33	; 0x21
 8005b24:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d02a      	beq.n	8005b84 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b32:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <HAL_UART_Transmit_DMA+0xec>)
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <HAL_UART_Transmit_DMA+0xf0>)
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b42:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_UART_Transmit_DMA+0xf4>)
 8005b44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	4619      	mov	r1, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3328      	adds	r3, #40	; 0x28
 8005b5e:	461a      	mov	r2, r3
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	f7fc f987 	bl	8001e74 <HAL_DMA_Start_IT>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e012      	b.n	8005baa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2240      	movs	r2, #64	; 0x40
 8005b8a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ba2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0800683b 	.word	0x0800683b
 8005bb8:	0800688b 	.word	0x0800688b
 8005bbc:	08006927 	.word	0x08006927

08005bc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d16c      	bne.n	8005cb0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_Receive_DMA+0x22>
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e065      	b.n	8005cb2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Receive_DMA+0x34>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e05e      	b.n	8005cb2 <HAL_UART_Receive_DMA+0xf2>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	; 0x22
 8005c14:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02a      	beq.n	8005c74 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <HAL_UART_Receive_DMA+0xfc>)
 8005c24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_UART_Receive_DMA+0x100>)
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <HAL_UART_Receive_DMA+0x104>)
 8005c34:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3324      	adds	r3, #36	; 0x24
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4e:	461a      	mov	r2, r3
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	f7fc f90f 	bl	8001e74 <HAL_DMA_Start_IT>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2210      	movs	r2, #16
 8005c60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e01e      	b.n	8005cb2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005caa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	080068a7 	.word	0x080068a7
 8005cc0:	0800690b 	.word	0x0800690b
 8005cc4:	08006927 	.word	0x08006927

08005cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d113      	bne.n	8005d20 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00e      	beq.n	8005d20 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8114 	beq.w	8005f3e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
      }
      return;
 8005d1e:	e10e      	b.n	8005f3e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80d6 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80cb 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <HAL_UART_IRQHandler+0x9e>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2201      	movs	r2, #1
 8005d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <HAL_UART_IRQHandler+0xc6>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d86:	f043 0204 	orr.w	r2, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00e      	beq.n	8005db6 <HAL_UART_IRQHandler+0xee>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2204      	movs	r2, #4
 8005da8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dae:	f043 0202 	orr.w	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de0:	f043 0208 	orr.w	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <HAL_UART_IRQHandler+0x14a>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8093 	beq.w	8005f42 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d004      	beq.n	8005e5e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d031      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fccb 	bl	80067fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d123      	bne.n	8005eba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_UART_IRQHandler+0x288>)
 8005e90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fc f8bc 	bl	8002014 <HAL_DMA_Abort_IT>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e00e      	b.n	8005ed0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f86c 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e00a      	b.n	8005ed0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f868 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e006      	b.n	8005ed0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f864 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005ece:	e038      	b.n	8005f42 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	bf00      	nop
    return;
 8005ed2:	e036      	b.n	8005f42 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <HAL_UART_IRQHandler+0x232>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f856 	bl	8005fa4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef8:	e026      	b.n	8005f48 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00d      	beq.n	8005f20 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
    }
    return;
 8005f1e:	e012      	b.n	8005f46 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <HAL_UART_IRQHandler+0x280>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d009      	beq.n	8005f48 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fd48 	bl	80069ca <UART_EndTransmit_IT>
    return;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_UART_IRQHandler+0x280>
      return;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_UART_IRQHandler+0x280>
    return;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_UART_IRQHandler+0x280>
    return;
 8005f46:	bf00      	nop
  }

}
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	0800699f 	.word	0x0800699f

08005f54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4bb1      	ldr	r3, [pc, #708]	; (80062ac <UART_SetConfig+0x2f4>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a9f      	ldr	r2, [pc, #636]	; (80062b0 <UART_SetConfig+0x2f8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d121      	bne.n	800607c <UART_SetConfig+0xc4>
 8006038:	4b9e      	ldr	r3, [pc, #632]	; (80062b4 <UART_SetConfig+0x2fc>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b03      	cmp	r3, #3
 8006044:	d816      	bhi.n	8006074 <UART_SetConfig+0xbc>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x94>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	0800605d 	.word	0x0800605d
 8006050:	08006069 	.word	0x08006069
 8006054:	08006063 	.word	0x08006063
 8006058:	0800606f 	.word	0x0800606f
 800605c:	2301      	movs	r3, #1
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e151      	b.n	8006306 <UART_SetConfig+0x34e>
 8006062:	2302      	movs	r3, #2
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e14e      	b.n	8006306 <UART_SetConfig+0x34e>
 8006068:	2304      	movs	r3, #4
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e14b      	b.n	8006306 <UART_SetConfig+0x34e>
 800606e:	2308      	movs	r3, #8
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e148      	b.n	8006306 <UART_SetConfig+0x34e>
 8006074:	2310      	movs	r3, #16
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	bf00      	nop
 800607a:	e144      	b.n	8006306 <UART_SetConfig+0x34e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a8d      	ldr	r2, [pc, #564]	; (80062b8 <UART_SetConfig+0x300>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d134      	bne.n	80060f0 <UART_SetConfig+0x138>
 8006086:	4b8b      	ldr	r3, [pc, #556]	; (80062b4 <UART_SetConfig+0x2fc>)
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b0c      	cmp	r3, #12
 8006092:	d829      	bhi.n	80060e8 <UART_SetConfig+0x130>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0xe4>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080060e9 	.word	0x080060e9
 80060a4:	080060e9 	.word	0x080060e9
 80060a8:	080060e9 	.word	0x080060e9
 80060ac:	080060dd 	.word	0x080060dd
 80060b0:	080060e9 	.word	0x080060e9
 80060b4:	080060e9 	.word	0x080060e9
 80060b8:	080060e9 	.word	0x080060e9
 80060bc:	080060d7 	.word	0x080060d7
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060e9 	.word	0x080060e9
 80060cc:	080060e3 	.word	0x080060e3
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e117      	b.n	8006306 <UART_SetConfig+0x34e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e114      	b.n	8006306 <UART_SetConfig+0x34e>
 80060dc:	2304      	movs	r3, #4
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e111      	b.n	8006306 <UART_SetConfig+0x34e>
 80060e2:	2308      	movs	r3, #8
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e10e      	b.n	8006306 <UART_SetConfig+0x34e>
 80060e8:	2310      	movs	r3, #16
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	bf00      	nop
 80060ee:	e10a      	b.n	8006306 <UART_SetConfig+0x34e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a71      	ldr	r2, [pc, #452]	; (80062bc <UART_SetConfig+0x304>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d120      	bne.n	800613c <UART_SetConfig+0x184>
 80060fa:	4b6e      	ldr	r3, [pc, #440]	; (80062b4 <UART_SetConfig+0x2fc>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006104:	2b10      	cmp	r3, #16
 8006106:	d00f      	beq.n	8006128 <UART_SetConfig+0x170>
 8006108:	2b10      	cmp	r3, #16
 800610a:	d802      	bhi.n	8006112 <UART_SetConfig+0x15a>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <UART_SetConfig+0x164>
 8006110:	e010      	b.n	8006134 <UART_SetConfig+0x17c>
 8006112:	2b20      	cmp	r3, #32
 8006114:	d005      	beq.n	8006122 <UART_SetConfig+0x16a>
 8006116:	2b30      	cmp	r3, #48	; 0x30
 8006118:	d009      	beq.n	800612e <UART_SetConfig+0x176>
 800611a:	e00b      	b.n	8006134 <UART_SetConfig+0x17c>
 800611c:	2300      	movs	r3, #0
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e0f1      	b.n	8006306 <UART_SetConfig+0x34e>
 8006122:	2302      	movs	r3, #2
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e0ee      	b.n	8006306 <UART_SetConfig+0x34e>
 8006128:	2304      	movs	r3, #4
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e0eb      	b.n	8006306 <UART_SetConfig+0x34e>
 800612e:	2308      	movs	r3, #8
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e0e8      	b.n	8006306 <UART_SetConfig+0x34e>
 8006134:	2310      	movs	r3, #16
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	bf00      	nop
 800613a:	e0e4      	b.n	8006306 <UART_SetConfig+0x34e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a5f      	ldr	r2, [pc, #380]	; (80062c0 <UART_SetConfig+0x308>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d120      	bne.n	8006188 <UART_SetConfig+0x1d0>
 8006146:	4b5b      	ldr	r3, [pc, #364]	; (80062b4 <UART_SetConfig+0x2fc>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d00f      	beq.n	8006174 <UART_SetConfig+0x1bc>
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d802      	bhi.n	800615e <UART_SetConfig+0x1a6>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <UART_SetConfig+0x1b0>
 800615c:	e010      	b.n	8006180 <UART_SetConfig+0x1c8>
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d005      	beq.n	800616e <UART_SetConfig+0x1b6>
 8006162:	2bc0      	cmp	r3, #192	; 0xc0
 8006164:	d009      	beq.n	800617a <UART_SetConfig+0x1c2>
 8006166:	e00b      	b.n	8006180 <UART_SetConfig+0x1c8>
 8006168:	2300      	movs	r3, #0
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e0cb      	b.n	8006306 <UART_SetConfig+0x34e>
 800616e:	2302      	movs	r3, #2
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e0c8      	b.n	8006306 <UART_SetConfig+0x34e>
 8006174:	2304      	movs	r3, #4
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e0c5      	b.n	8006306 <UART_SetConfig+0x34e>
 800617a:	2308      	movs	r3, #8
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e0c2      	b.n	8006306 <UART_SetConfig+0x34e>
 8006180:	2310      	movs	r3, #16
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	bf00      	nop
 8006186:	e0be      	b.n	8006306 <UART_SetConfig+0x34e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4d      	ldr	r2, [pc, #308]	; (80062c4 <UART_SetConfig+0x30c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d124      	bne.n	80061dc <UART_SetConfig+0x224>
 8006192:	4b48      	ldr	r3, [pc, #288]	; (80062b4 <UART_SetConfig+0x2fc>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a0:	d012      	beq.n	80061c8 <UART_SetConfig+0x210>
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d802      	bhi.n	80061ae <UART_SetConfig+0x1f6>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <UART_SetConfig+0x204>
 80061ac:	e012      	b.n	80061d4 <UART_SetConfig+0x21c>
 80061ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b2:	d006      	beq.n	80061c2 <UART_SetConfig+0x20a>
 80061b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0x216>
 80061ba:	e00b      	b.n	80061d4 <UART_SetConfig+0x21c>
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e0a1      	b.n	8006306 <UART_SetConfig+0x34e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e09e      	b.n	8006306 <UART_SetConfig+0x34e>
 80061c8:	2304      	movs	r3, #4
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e09b      	b.n	8006306 <UART_SetConfig+0x34e>
 80061ce:	2308      	movs	r3, #8
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e098      	b.n	8006306 <UART_SetConfig+0x34e>
 80061d4:	2310      	movs	r3, #16
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	bf00      	nop
 80061da:	e094      	b.n	8006306 <UART_SetConfig+0x34e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a39      	ldr	r2, [pc, #228]	; (80062c8 <UART_SetConfig+0x310>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d124      	bne.n	8006230 <UART_SetConfig+0x278>
 80061e6:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <UART_SetConfig+0x2fc>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f4:	d012      	beq.n	800621c <UART_SetConfig+0x264>
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d802      	bhi.n	8006202 <UART_SetConfig+0x24a>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <UART_SetConfig+0x258>
 8006200:	e012      	b.n	8006228 <UART_SetConfig+0x270>
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006206:	d006      	beq.n	8006216 <UART_SetConfig+0x25e>
 8006208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800620c:	d009      	beq.n	8006222 <UART_SetConfig+0x26a>
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x270>
 8006210:	2301      	movs	r3, #1
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e077      	b.n	8006306 <UART_SetConfig+0x34e>
 8006216:	2302      	movs	r3, #2
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e074      	b.n	8006306 <UART_SetConfig+0x34e>
 800621c:	2304      	movs	r3, #4
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e071      	b.n	8006306 <UART_SetConfig+0x34e>
 8006222:	2308      	movs	r3, #8
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e06e      	b.n	8006306 <UART_SetConfig+0x34e>
 8006228:	2310      	movs	r3, #16
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	bf00      	nop
 800622e:	e06a      	b.n	8006306 <UART_SetConfig+0x34e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <UART_SetConfig+0x314>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d124      	bne.n	8006284 <UART_SetConfig+0x2cc>
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <UART_SetConfig+0x2fc>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006248:	d012      	beq.n	8006270 <UART_SetConfig+0x2b8>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d802      	bhi.n	8006256 <UART_SetConfig+0x29e>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <UART_SetConfig+0x2ac>
 8006254:	e012      	b.n	800627c <UART_SetConfig+0x2c4>
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625a:	d006      	beq.n	800626a <UART_SetConfig+0x2b2>
 800625c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006260:	d009      	beq.n	8006276 <UART_SetConfig+0x2be>
 8006262:	e00b      	b.n	800627c <UART_SetConfig+0x2c4>
 8006264:	2300      	movs	r3, #0
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e04d      	b.n	8006306 <UART_SetConfig+0x34e>
 800626a:	2302      	movs	r3, #2
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e04a      	b.n	8006306 <UART_SetConfig+0x34e>
 8006270:	2304      	movs	r3, #4
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e047      	b.n	8006306 <UART_SetConfig+0x34e>
 8006276:	2308      	movs	r3, #8
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e044      	b.n	8006306 <UART_SetConfig+0x34e>
 800627c:	2310      	movs	r3, #16
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	bf00      	nop
 8006282:	e040      	b.n	8006306 <UART_SetConfig+0x34e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <UART_SetConfig+0x318>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d139      	bne.n	8006302 <UART_SetConfig+0x34a>
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <UART_SetConfig+0x2fc>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629c:	d027      	beq.n	80062ee <UART_SetConfig+0x336>
 800629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a2:	d817      	bhi.n	80062d4 <UART_SetConfig+0x31c>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01c      	beq.n	80062e2 <UART_SetConfig+0x32a>
 80062a8:	e027      	b.n	80062fa <UART_SetConfig+0x342>
 80062aa:	bf00      	nop
 80062ac:	efff69f3 	.word	0xefff69f3
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40004400 	.word	0x40004400
 80062bc:	40004800 	.word	0x40004800
 80062c0:	40004c00 	.word	0x40004c00
 80062c4:	40005000 	.word	0x40005000
 80062c8:	40011400 	.word	0x40011400
 80062cc:	40007800 	.word	0x40007800
 80062d0:	40007c00 	.word	0x40007c00
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d8:	d006      	beq.n	80062e8 <UART_SetConfig+0x330>
 80062da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062de:	d009      	beq.n	80062f4 <UART_SetConfig+0x33c>
 80062e0:	e00b      	b.n	80062fa <UART_SetConfig+0x342>
 80062e2:	2300      	movs	r3, #0
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e00e      	b.n	8006306 <UART_SetConfig+0x34e>
 80062e8:	2302      	movs	r3, #2
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e00b      	b.n	8006306 <UART_SetConfig+0x34e>
 80062ee:	2304      	movs	r3, #4
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e008      	b.n	8006306 <UART_SetConfig+0x34e>
 80062f4:	2308      	movs	r3, #8
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e005      	b.n	8006306 <UART_SetConfig+0x34e>
 80062fa:	2310      	movs	r3, #16
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	bf00      	nop
 8006300:	e001      	b.n	8006306 <UART_SetConfig+0x34e>
 8006302:	2310      	movs	r3, #16
 8006304:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630e:	d17f      	bne.n	8006410 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006310:	7ffb      	ldrb	r3, [r7, #31]
 8006312:	2b08      	cmp	r3, #8
 8006314:	d85c      	bhi.n	80063d0 <UART_SetConfig+0x418>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x364>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006341 	.word	0x08006341
 8006320:	08006361 	.word	0x08006361
 8006324:	08006381 	.word	0x08006381
 8006328:	080063d1 	.word	0x080063d1
 800632c:	08006399 	.word	0x08006399
 8006330:	080063d1 	.word	0x080063d1
 8006334:	080063d1 	.word	0x080063d1
 8006338:	080063d1 	.word	0x080063d1
 800633c:	080063b9 	.word	0x080063b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7fd f89e 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8006344:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	005a      	lsls	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	61bb      	str	r3, [r7, #24]
        break;
 800635e:	e03a      	b.n	80063d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fd f8a2 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8006364:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	005a      	lsls	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	61bb      	str	r3, [r7, #24]
        break;
 800637e:	e02a      	b.n	80063d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	085a      	lsrs	r2, r3, #1
 8006386:	4b5f      	ldr	r3, [pc, #380]	; (8006504 <UART_SetConfig+0x54c>)
 8006388:	4413      	add	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6852      	ldr	r2, [r2, #4]
 800638e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006392:	b29b      	uxth	r3, r3
 8006394:	61bb      	str	r3, [r7, #24]
        break;
 8006396:	e01e      	b.n	80063d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006398:	f7fc ffb4 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 800639c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	005a      	lsls	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	61bb      	str	r3, [r7, #24]
        break;
 80063b6:	e00e      	b.n	80063d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	61bb      	str	r3, [r7, #24]
        break;
 80063ce:	e002      	b.n	80063d6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
        break;
 80063d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b0f      	cmp	r3, #15
 80063da:	d916      	bls.n	800640a <UART_SetConfig+0x452>
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d212      	bcs.n	800640a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f023 030f 	bic.w	r3, r3, #15
 80063ec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	897b      	ldrh	r3, [r7, #10]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	897a      	ldrh	r2, [r7, #10]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	e070      	b.n	80064ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	e06d      	b.n	80064ec <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	2b08      	cmp	r3, #8
 8006414:	d859      	bhi.n	80064ca <UART_SetConfig+0x512>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x464>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006441 	.word	0x08006441
 8006420:	0800645f 	.word	0x0800645f
 8006424:	0800647d 	.word	0x0800647d
 8006428:	080064cb 	.word	0x080064cb
 800642c:	08006495 	.word	0x08006495
 8006430:	080064cb 	.word	0x080064cb
 8006434:	080064cb 	.word	0x080064cb
 8006438:	080064cb 	.word	0x080064cb
 800643c:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fd f81e 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8006444:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	085a      	lsrs	r2, r3, #1
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	b29b      	uxth	r3, r3
 800645a:	61bb      	str	r3, [r7, #24]
        break;
 800645c:	e038      	b.n	80064d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800645e:	f7fd f823 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8006462:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	085a      	lsrs	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	441a      	add	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	b29b      	uxth	r3, r3
 8006478:	61bb      	str	r3, [r7, #24]
        break;
 800647a:	e029      	b.n	80064d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	085a      	lsrs	r2, r3, #1
 8006482:	4b21      	ldr	r3, [pc, #132]	; (8006508 <UART_SetConfig+0x550>)
 8006484:	4413      	add	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6852      	ldr	r2, [r2, #4]
 800648a:	fbb3 f3f2 	udiv	r3, r3, r2
 800648e:	b29b      	uxth	r3, r3
 8006490:	61bb      	str	r3, [r7, #24]
        break;
 8006492:	e01d      	b.n	80064d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006494:	f7fc ff36 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8006498:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	085a      	lsrs	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	441a      	add	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	61bb      	str	r3, [r7, #24]
        break;
 80064b0:	e00e      	b.n	80064d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	61bb      	str	r3, [r7, #24]
        break;
 80064c8:	e002      	b.n	80064d0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
        break;
 80064ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d908      	bls.n	80064e8 <UART_SetConfig+0x530>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d204      	bcs.n	80064e8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	e001      	b.n	80064ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	01e84800 	.word	0x01e84800
 8006508:	00f42400 	.word	0x00f42400

0800650c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01a      	beq.n	8006622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660a:	d10a      	bne.n	8006622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af02      	add	r7, sp, #8
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800665e:	f7fa fccb 	bl	8000ff8 <HAL_GetTick>
 8006662:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b08      	cmp	r3, #8
 8006670:	d10e      	bne.n	8006690 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f82a 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e020      	b.n	80066d2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b04      	cmp	r3, #4
 800669c:	d10e      	bne.n	80066bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f814 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e00a      	b.n	80066d2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	4613      	mov	r3, r2
 80066e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ea:	e05d      	b.n	80067a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d059      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7fa fc80 	bl	8000ff8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <UART_WaitOnFlagUntilTimeout+0x30>
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11b      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006718:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e042      	b.n	80067c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02b      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800675a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675e:	d123      	bne.n	80067a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006768:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006778:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e00f      	b.n	80067c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d092      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067e6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006810:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	d014      	beq.n	800687c <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006868:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006878:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800687a:	e002      	b.n	8006882 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f006 fbdb 	bl	800d038 <HAL_UART_TxCpltCallback>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff fb5b 	bl	8005f54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068bc:	d01e      	beq.n	80068fc <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fb33 	bl	8005f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fb2f 	bl	8005f7c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006938:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b80      	cmp	r3, #128	; 0x80
 800694c:	d109      	bne.n	8006962 <UART_DMAError+0x3c>
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b21      	cmp	r3, #33	; 0x21
 8006952:	d106      	bne.n	8006962 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800695c:	6978      	ldr	r0, [r7, #20]
 800695e:	f7ff ff37 	bl	80067d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d109      	bne.n	8006984 <UART_DMAError+0x5e>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b22      	cmp	r3, #34	; 0x22
 8006974:	d106      	bne.n	8006984 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff ff3b 	bl	80067fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006988:	f043 0210 	orr.w	r2, r3, #16
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006990:	6978      	ldr	r0, [r7, #20]
 8006992:	f7ff fafd 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fae7 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f006 fb22 	bl	800d038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	0a5a      	lsrs	r2, r3, #9
 8006a0c:	490f      	ldr	r1, [pc, #60]	; (8006a4c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006a0e:	fba1 1202 	umull	r1, r2, r1, r2
 8006a12:	09d2      	lsrs	r2, r2, #7
 8006a14:	490e      	ldr	r1, [pc, #56]	; (8006a50 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006a16:	fb01 f202 	mul.w	r2, r1, r2
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	00044b83 	.word	0x00044b83
 8006a50:	3b9aca00 	.word	0x3b9aca00

08006a54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a66:	2b84      	cmp	r3, #132	; 0x84
 8006a68:	d005      	beq.n	8006a76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	3303      	adds	r3, #3
 8006a74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a88:	f000 fab6 	bl	8006ff8 <vTaskStartScheduler>
  
  return osOK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a94:	b089      	sub	sp, #36	; 0x24
 8006a96:	af04      	add	r7, sp, #16
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685c      	ldr	r4, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681d      	ldr	r5, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691e      	ldr	r6, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ffd0 	bl	8006a54 <makeFreeRtosPriority>
 8006ab4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006abe:	9202      	str	r2, [sp, #8]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	9100      	str	r1, [sp, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f8c5 	bl	8006c5a <xTaskCreateStatic>
 8006ad0:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006adc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ae0:	f000 fd6c 	bl	80075bc <xTaskGetSchedulerState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d001      	beq.n	8006aee <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006aea:	f000 ff85 	bl	80079f8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 0208 	add.w	r2, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 0208 	add.w	r2, r3, #8
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f103 0208 	add.w	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d103      	bne.n	8006bb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e00c      	b.n	8006bce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e002      	b.n	8006bc2 <vListInsert+0x2e>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d2f6      	bcs.n	8006bbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6892      	ldr	r2, [r2, #8]
 8006c1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d103      	bne.n	8006c3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	1e5a      	subs	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b08e      	sub	sp, #56	; 0x38
 8006c5e:	af04      	add	r7, sp, #16
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	b672      	cpsid	i
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	b662      	cpsie	i
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	e7fe      	b.n	8006c84 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <xTaskCreateStatic+0x4a>
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	b672      	cpsid	i
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	b662      	cpsie	i
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	e7fe      	b.n	8006ca2 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ca4:	2354      	movs	r3, #84	; 0x54
 8006ca6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b54      	cmp	r3, #84	; 0x54
 8006cac:	d00b      	beq.n	8006cc6 <xTaskCreateStatic+0x6c>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	b672      	cpsid	i
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	b662      	cpsie	i
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e7fe      	b.n	8006cc4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01a      	beq.n	8006d04 <xTaskCreateStatic+0xaa>
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d017      	beq.n	8006d04 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	9302      	str	r3, [sp, #8]
 8006ce6:	f107 0314 	add.w	r3, r7, #20
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f80b 	bl	8006d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cfe:	f000 f891 	bl	8006e24 <prvAddNewTaskToReadyList>
 8006d02:	e001      	b.n	8006d08 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d08:	697b      	ldr	r3, [r7, #20]
	}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3728      	adds	r7, #40	; 0x28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d2a:	440b      	add	r3, r1
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <prvInitialiseNewTask+0x4a>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e7fe      	b.n	8006d5a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01f      	beq.n	8006da2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e012      	b.n	8006d8e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	7819      	ldrb	r1, [r3, #0]
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	3334      	adds	r3, #52	; 0x34
 8006d78:	460a      	mov	r2, r1
 8006d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9e9      	bls.n	8006d68 <prvInitialiseNewTask+0x56>
 8006d94:	e000      	b.n	8006d98 <prvInitialiseNewTask+0x86>
			{
				break;
 8006d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da0:	e003      	b.n	8006daa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	2b06      	cmp	r3, #6
 8006dae:	d901      	bls.n	8006db4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db0:	2306      	movs	r3, #6
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff feb1 	bl	8006b32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	3318      	adds	r3, #24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff feac 	bl	8006b32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	f1c3 0207 	rsb	r2, r3, #7
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68f9      	ldr	r1, [r7, #12]
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f000 fc5e 	bl	80076c4 <pxPortInitialiseStack>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e2c:	f000 fd54 	bl	80078d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a29      	ldr	r2, [pc, #164]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e42:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e48:	4b24      	ldr	r3, [pc, #144]	; (8006edc <prvAddNewTaskToReadyList+0xb8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d110      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e50:	f000 fb1e 	bl	8007490 <prvInitialiseTaskLists>
 8006e54:	e00d      	b.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e56:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <prvAddNewTaskToReadyList+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e5e:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d802      	bhi.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7ff fe51 	bl	8006b4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eaa:	f000 fd47 	bl	800793c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <prvAddNewTaskToReadyList+0xc0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00e      	beq.n	8006ed4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <prvAddNewTaskToReadyList+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d207      	bcs.n	8006ed4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000694 	.word	0x20000694
 8006ee0:	20000594 	.word	0x20000594
 8006ee4:	200006a0 	.word	0x200006a0
 8006ee8:	200006b0 	.word	0x200006b0
 8006eec:	2000069c 	.word	0x2000069c
 8006ef0:	20000598 	.word	0x20000598
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <vTaskDelayUntil+0x2c>
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e7fe      	b.n	8006f22 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <vTaskDelayUntil+0x4a>
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	b672      	cpsid	i
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	b662      	cpsie	i
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	e7fe      	b.n	8006f40 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006f42:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <vTaskDelayUntil+0xf4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <vTaskDelayUntil+0x6a>
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	b672      	cpsid	i
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	b662      	cpsie	i
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e7fe      	b.n	8006f60 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8006f62:	f000 f8ab 	bl	80070bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <vTaskDelayUntil+0xf8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	4413      	add	r3, r2
 8006f74:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d20b      	bcs.n	8006f98 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d211      	bcs.n	8006fae <vTaskDelayUntil+0xb6>
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d90d      	bls.n	8006fae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	e00a      	b.n	8006fae <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d303      	bcc.n	8006faa <vTaskDelayUntil+0xb2>
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d901      	bls.n	8006fae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fb18 	bl	80075f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006fc8:	f000 f886 	bl	80070d8 <xTaskResumeAll>
 8006fcc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d107      	bne.n	8006fe4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <vTaskDelayUntil+0xfc>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fe4:	bf00      	nop
 8006fe6:	3728      	adds	r7, #40	; 0x28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200006bc 	.word	0x200006bc
 8006ff0:	20000698 	.word	0x20000698
 8006ff4:	e000ed04 	.word	0xe000ed04

08006ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007006:	463a      	mov	r2, r7
 8007008:	1d39      	adds	r1, r7, #4
 800700a:	f107 0308 	add.w	r3, r7, #8
 800700e:	4618      	mov	r0, r3
 8007010:	f000 ff8e 	bl	8007f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	9202      	str	r2, [sp, #8]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	2300      	movs	r3, #0
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2300      	movs	r3, #0
 8007024:	460a      	mov	r2, r1
 8007026:	491f      	ldr	r1, [pc, #124]	; (80070a4 <vTaskStartScheduler+0xac>)
 8007028:	481f      	ldr	r0, [pc, #124]	; (80070a8 <vTaskStartScheduler+0xb0>)
 800702a:	f7ff fe16 	bl	8006c5a <xTaskCreateStatic>
 800702e:	4602      	mov	r2, r0
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <vTaskStartScheduler+0xb4>)
 8007032:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <vTaskStartScheduler+0xb4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800703c:	2301      	movs	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	e001      	b.n	8007046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d117      	bne.n	800707c <vTaskStartScheduler+0x84>
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	b672      	cpsid	i
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	b662      	cpsie	i
 8007060:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <vTaskStartScheduler+0xb8>)
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <vTaskStartScheduler+0xbc>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007070:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <vTaskStartScheduler+0xc0>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007076:	f000 fbb3 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800707a:	e00f      	b.n	800709c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d10b      	bne.n	800709c <vTaskStartScheduler+0xa4>
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	b672      	cpsid	i
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	b662      	cpsie	i
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	e7fe      	b.n	800709a <vTaskStartScheduler+0xa2>
}
 800709c:	bf00      	nop
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08015700 	.word	0x08015700
 80070a8:	08007461 	.word	0x08007461
 80070ac:	200006b8 	.word	0x200006b8
 80070b0:	200006b4 	.word	0x200006b4
 80070b4:	200006a0 	.word	0x200006a0
 80070b8:	20000698 	.word	0x20000698

080070bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070c0:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <vTaskSuspendAll+0x18>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a03      	ldr	r2, [pc, #12]	; (80070d4 <vTaskSuspendAll+0x18>)
 80070c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80070ca:	bf00      	nop
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	200006bc 	.word	0x200006bc

080070d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070e6:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <xTaskResumeAll+0x118>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <xTaskResumeAll+0x2e>
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	b672      	cpsid	i
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	b662      	cpsie	i
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	e7fe      	b.n	8007104 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007106:	f000 fbe7 	bl	80078d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <xTaskResumeAll+0x118>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3b01      	subs	r3, #1
 8007110:	4a37      	ldr	r2, [pc, #220]	; (80071f0 <xTaskResumeAll+0x118>)
 8007112:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007114:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <xTaskResumeAll+0x118>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d161      	bne.n	80071e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800711c:	4b35      	ldr	r3, [pc, #212]	; (80071f4 <xTaskResumeAll+0x11c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d05d      	beq.n	80071e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007124:	e02e      	b.n	8007184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <xTaskResumeAll+0x120>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3318      	adds	r3, #24
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fd67 	bl	8006c06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fd62 	bl	8006c06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	2201      	movs	r2, #1
 8007148:	409a      	lsls	r2, r3
 800714a:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <xTaskResumeAll+0x124>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4313      	orrs	r3, r2
 8007150:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <xTaskResumeAll+0x124>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a27      	ldr	r2, [pc, #156]	; (8007200 <xTaskResumeAll+0x128>)
 8007162:	441a      	add	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7ff fcee 	bl	8006b4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	4b23      	ldr	r3, [pc, #140]	; (8007204 <xTaskResumeAll+0x12c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800717e:	4b22      	ldr	r3, [pc, #136]	; (8007208 <xTaskResumeAll+0x130>)
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <xTaskResumeAll+0x120>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1cc      	bne.n	8007126 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007192:	f000 f9f3 	bl	800757c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <xTaskResumeAll+0x134>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071a2:	f000 f847 	bl	8007234 <xTaskIncrementTick>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <xTaskResumeAll+0x130>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f1      	bne.n	80071a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80071be:	4b13      	ldr	r3, [pc, #76]	; (800720c <xTaskResumeAll+0x134>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <xTaskResumeAll+0x130>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071d0:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <xTaskResumeAll+0x138>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071e0:	f000 fbac 	bl	800793c <vPortExitCritical>

	return xAlreadyYielded;
 80071e4:	68bb      	ldr	r3, [r7, #8]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200006bc 	.word	0x200006bc
 80071f4:	20000694 	.word	0x20000694
 80071f8:	20000654 	.word	0x20000654
 80071fc:	2000069c 	.word	0x2000069c
 8007200:	20000598 	.word	0x20000598
 8007204:	20000594 	.word	0x20000594
 8007208:	200006a8 	.word	0x200006a8
 800720c:	200006a4 	.word	0x200006a4
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <xTaskGetTickCount+0x1c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000698 	.word	0x20000698

08007234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800723e:	4b4f      	ldr	r3, [pc, #316]	; (800737c <xTaskIncrementTick+0x148>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f040 8089 	bne.w	800735a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007248:	4b4d      	ldr	r3, [pc, #308]	; (8007380 <xTaskIncrementTick+0x14c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007250:	4a4b      	ldr	r2, [pc, #300]	; (8007380 <xTaskIncrementTick+0x14c>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d121      	bne.n	80072a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800725c:	4b49      	ldr	r3, [pc, #292]	; (8007384 <xTaskIncrementTick+0x150>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <xTaskIncrementTick+0x4a>
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	b672      	cpsid	i
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	b662      	cpsie	i
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	e7fe      	b.n	800727c <xTaskIncrementTick+0x48>
 800727e:	4b41      	ldr	r3, [pc, #260]	; (8007384 <xTaskIncrementTick+0x150>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	4b40      	ldr	r3, [pc, #256]	; (8007388 <xTaskIncrementTick+0x154>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a3e      	ldr	r2, [pc, #248]	; (8007384 <xTaskIncrementTick+0x150>)
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	4a3e      	ldr	r2, [pc, #248]	; (8007388 <xTaskIncrementTick+0x154>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	4b3e      	ldr	r3, [pc, #248]	; (800738c <xTaskIncrementTick+0x158>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3301      	adds	r3, #1
 8007298:	4a3c      	ldr	r2, [pc, #240]	; (800738c <xTaskIncrementTick+0x158>)
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	f000 f96e 	bl	800757c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072a0:	4b3b      	ldr	r3, [pc, #236]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d348      	bcc.n	800733c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072aa:	4b36      	ldr	r3, [pc, #216]	; (8007384 <xTaskIncrementTick+0x150>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b4:	4b36      	ldr	r3, [pc, #216]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ba:	601a      	str	r2, [r3, #0]
					break;
 80072bc:	e03e      	b.n	800733c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <xTaskIncrementTick+0x150>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d203      	bcs.n	80072de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072d6:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072dc:	e02e      	b.n	800733c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fc8f 	bl	8006c06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3318      	adds	r3, #24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fc86 	bl	8006c06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	2201      	movs	r2, #1
 8007300:	409a      	lsls	r2, r3
 8007302:	4b24      	ldr	r3, [pc, #144]	; (8007394 <xTaskIncrementTick+0x160>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4313      	orrs	r3, r2
 8007308:	4a22      	ldr	r2, [pc, #136]	; (8007394 <xTaskIncrementTick+0x160>)
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <xTaskIncrementTick+0x164>)
 800731a:	441a      	add	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7ff fc12 	bl	8006b4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <xTaskIncrementTick+0x168>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	429a      	cmp	r2, r3
 8007334:	d3b9      	bcc.n	80072aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007336:	2301      	movs	r3, #1
 8007338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733a:	e7b6      	b.n	80072aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800733c:	4b17      	ldr	r3, [pc, #92]	; (800739c <xTaskIncrementTick+0x168>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	4915      	ldr	r1, [pc, #84]	; (8007398 <xTaskIncrementTick+0x164>)
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d907      	bls.n	8007364 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e004      	b.n	8007364 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800735a:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <xTaskIncrementTick+0x16c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <xTaskIncrementTick+0x16c>)
 8007362:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <xTaskIncrementTick+0x170>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007370:	697b      	ldr	r3, [r7, #20]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200006bc 	.word	0x200006bc
 8007380:	20000698 	.word	0x20000698
 8007384:	2000064c 	.word	0x2000064c
 8007388:	20000650 	.word	0x20000650
 800738c:	200006ac 	.word	0x200006ac
 8007390:	200006b4 	.word	0x200006b4
 8007394:	2000069c 	.word	0x2000069c
 8007398:	20000598 	.word	0x20000598
 800739c:	20000594 	.word	0x20000594
 80073a0:	200006a4 	.word	0x200006a4
 80073a4:	200006a8 	.word	0x200006a8

080073a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ae:	4b27      	ldr	r3, [pc, #156]	; (800744c <vTaskSwitchContext+0xa4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073b6:	4b26      	ldr	r3, [pc, #152]	; (8007450 <vTaskSwitchContext+0xa8>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073bc:	e040      	b.n	8007440 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80073be:	4b24      	ldr	r3, [pc, #144]	; (8007450 <vTaskSwitchContext+0xa8>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c4:	4b23      	ldr	r3, [pc, #140]	; (8007454 <vTaskSwitchContext+0xac>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	fab3 f383 	clz	r3, r3
 80073d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	f1c3 031f 	rsb	r3, r3, #31
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	491f      	ldr	r1, [pc, #124]	; (8007458 <vTaskSwitchContext+0xb0>)
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <vTaskSwitchContext+0x5e>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	b672      	cpsid	i
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	b662      	cpsie	i
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	e7fe      	b.n	8007404 <vTaskSwitchContext+0x5c>
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a11      	ldr	r2, [pc, #68]	; (8007458 <vTaskSwitchContext+0xb0>)
 8007412:	4413      	add	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3308      	adds	r3, #8
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <vTaskSwitchContext+0x8e>
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4a07      	ldr	r2, [pc, #28]	; (800745c <vTaskSwitchContext+0xb4>)
 800743e:	6013      	str	r3, [r2, #0]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	200006bc 	.word	0x200006bc
 8007450:	200006a8 	.word	0x200006a8
 8007454:	2000069c 	.word	0x2000069c
 8007458:	20000598 	.word	0x20000598
 800745c:	20000594 	.word	0x20000594

08007460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007468:	f000 f852 	bl	8007510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <prvIdleTask+0x28>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d9f9      	bls.n	8007468 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <prvIdleTask+0x2c>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007484:	e7f0      	b.n	8007468 <prvIdleTask+0x8>
 8007486:	bf00      	nop
 8007488:	20000598 	.word	0x20000598
 800748c:	e000ed04 	.word	0xe000ed04

08007490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	e00c      	b.n	80074b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <prvInitialiseTaskLists+0x60>)
 80074a8:	4413      	add	r3, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fb21 	bl	8006af2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3301      	adds	r3, #1
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d9ef      	bls.n	800749c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074bc:	480d      	ldr	r0, [pc, #52]	; (80074f4 <prvInitialiseTaskLists+0x64>)
 80074be:	f7ff fb18 	bl	8006af2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074c2:	480d      	ldr	r0, [pc, #52]	; (80074f8 <prvInitialiseTaskLists+0x68>)
 80074c4:	f7ff fb15 	bl	8006af2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074c8:	480c      	ldr	r0, [pc, #48]	; (80074fc <prvInitialiseTaskLists+0x6c>)
 80074ca:	f7ff fb12 	bl	8006af2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074ce:	480c      	ldr	r0, [pc, #48]	; (8007500 <prvInitialiseTaskLists+0x70>)
 80074d0:	f7ff fb0f 	bl	8006af2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074d4:	480b      	ldr	r0, [pc, #44]	; (8007504 <prvInitialiseTaskLists+0x74>)
 80074d6:	f7ff fb0c 	bl	8006af2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <prvInitialiseTaskLists+0x78>)
 80074dc:	4a05      	ldr	r2, [pc, #20]	; (80074f4 <prvInitialiseTaskLists+0x64>)
 80074de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <prvInitialiseTaskLists+0x7c>)
 80074e2:	4a05      	ldr	r2, [pc, #20]	; (80074f8 <prvInitialiseTaskLists+0x68>)
 80074e4:	601a      	str	r2, [r3, #0]
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000598 	.word	0x20000598
 80074f4:	20000624 	.word	0x20000624
 80074f8:	20000638 	.word	0x20000638
 80074fc:	20000654 	.word	0x20000654
 8007500:	20000668 	.word	0x20000668
 8007504:	20000680 	.word	0x20000680
 8007508:	2000064c 	.word	0x2000064c
 800750c:	20000650 	.word	0x20000650

08007510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007516:	e019      	b.n	800754c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007518:	f000 f9de 	bl	80078d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <prvCheckTasksWaitingTermination+0x4c>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fb6c 	bl	8006c06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <prvCheckTasksWaitingTermination+0x50>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3b01      	subs	r3, #1
 8007534:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <prvCheckTasksWaitingTermination+0x50>)
 8007536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <prvCheckTasksWaitingTermination+0x54>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <prvCheckTasksWaitingTermination+0x54>)
 8007540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007542:	f000 f9fb 	bl	800793c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f80e 	bl	8007568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <prvCheckTasksWaitingTermination+0x54>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e1      	bne.n	8007518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000668 	.word	0x20000668
 8007560:	20000694 	.word	0x20000694
 8007564:	2000067c 	.word	0x2000067c

08007568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007582:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007594:	e008      	b.n	80075a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 80075a6:	6013      	str	r3, [r2, #0]
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	2000064c 	.word	0x2000064c
 80075b8:	200006b4 	.word	0x200006b4

080075bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <xTaskGetSchedulerState+0x34>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ca:	2301      	movs	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	e008      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <xTaskGetSchedulerState+0x38>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075d8:	2302      	movs	r3, #2
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e001      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075e2:	687b      	ldr	r3, [r7, #4]
	}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	200006a0 	.word	0x200006a0
 80075f4:	200006bc 	.word	0x200006bc

080075f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007602:	4b29      	ldr	r3, [pc, #164]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007608:	4b28      	ldr	r3, [pc, #160]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff faf9 	bl	8006c06 <uxListRemove>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	2201      	movs	r2, #1
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43da      	mvns	r2, r3
 8007628:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4013      	ands	r3, r2
 800762e:	4a20      	ldr	r2, [pc, #128]	; (80076b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007630:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d10a      	bne.n	8007650 <prvAddCurrentTaskToDelayedList+0x58>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	481a      	ldr	r0, [pc, #104]	; (80076b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800764a:	f7ff fa7f 	bl	8006b4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800764e:	e026      	b.n	800769e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007658:	4b14      	ldr	r3, [pc, #80]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	429a      	cmp	r2, r3
 8007666:	d209      	bcs.n	800767c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007668:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7ff fa8d 	bl	8006b94 <vListInsert>
}
 800767a:	e010      	b.n	800769e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767c:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7ff fa83 	bl	8006b94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800768e:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d202      	bcs.n	800769e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6013      	str	r3, [r2, #0]
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000698 	.word	0x20000698
 80076ac:	20000594 	.word	0x20000594
 80076b0:	2000069c 	.word	0x2000069c
 80076b4:	20000680 	.word	0x20000680
 80076b8:	20000650 	.word	0x20000650
 80076bc:	2000064c 	.word	0x2000064c
 80076c0:	200006b4 	.word	0x200006b4

080076c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3b04      	subs	r3, #4
 80076d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 0201 	bic.w	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3b04      	subs	r3, #4
 80076f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076f4:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <pxPortInitialiseStack+0x64>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b14      	subs	r3, #20
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3b04      	subs	r3, #4
 800770a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f06f 0202 	mvn.w	r2, #2
 8007712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3b20      	subs	r3, #32
 8007718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800771a:	68fb      	ldr	r3, [r7, #12]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	0800772d 	.word	0x0800772d

0800772c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <prvTaskExitError+0x58>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d00b      	beq.n	8007758 <prvTaskExitError+0x2c>
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	b672      	cpsid	i
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	b662      	cpsie	i
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e7fe      	b.n	8007756 <prvTaskExitError+0x2a>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	b672      	cpsid	i
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	b662      	cpsie	i
 800776c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800776e:	bf00      	nop
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0fc      	beq.n	8007770 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000008 	.word	0x20000008
	...

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	; (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077e6:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <xPortStartScheduler+0xe0>)
 80077e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	22ff      	movs	r2, #255	; 0xff
 80077f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4b2e      	ldr	r3, [pc, #184]	; (80078c4 <xPortStartScheduler+0xe4>)
 800780c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <xPortStartScheduler+0xe8>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007814:	e009      	b.n	800782a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007816:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <xPortStartScheduler+0xe8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <xPortStartScheduler+0xe8>)
 800781e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b80      	cmp	r3, #128	; 0x80
 8007834:	d0ef      	beq.n	8007816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007836:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <xPortStartScheduler+0xe8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1c3 0307 	rsb	r3, r3, #7
 800783e:	2b04      	cmp	r3, #4
 8007840:	d00b      	beq.n	800785a <xPortStartScheduler+0x7a>
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	60bb      	str	r3, [r7, #8]
 8007858:	e7fe      	b.n	8007858 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <xPortStartScheduler+0xe8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <xPortStartScheduler+0xe8>)
 8007862:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <xPortStartScheduler+0xe8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800786c:	4a16      	ldr	r2, [pc, #88]	; (80078c8 <xPortStartScheduler+0xe8>)
 800786e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007878:	4b14      	ldr	r3, [pc, #80]	; (80078cc <xPortStartScheduler+0xec>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a13      	ldr	r2, [pc, #76]	; (80078cc <xPortStartScheduler+0xec>)
 800787e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007882:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <xPortStartScheduler+0xec>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a10      	ldr	r2, [pc, #64]	; (80078cc <xPortStartScheduler+0xec>)
 800788a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800788e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007890:	f000 f8d4 	bl	8007a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007894:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <xPortStartScheduler+0xf0>)
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800789a:	f000 f8f3 	bl	8007a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <xPortStartScheduler+0xf4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0c      	ldr	r2, [pc, #48]	; (80078d4 <xPortStartScheduler+0xf4>)
 80078a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078aa:	f7ff ff85 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078ae:	f7ff fd7b 	bl	80073a8 <vTaskSwitchContext>
	prvTaskExitError();
 80078b2:	f7ff ff3b 	bl	800772c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	e000e400 	.word	0xe000e400
 80078c4:	200006c0 	.word	0x200006c0
 80078c8:	200006c4 	.word	0x200006c4
 80078cc:	e000ed20 	.word	0xe000ed20
 80078d0:	20000008 	.word	0x20000008
 80078d4:	e000ef34 	.word	0xe000ef34

080078d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	b672      	cpsid	i
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	b662      	cpsie	i
 80078f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <vPortEnterCritical+0x5c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a0e      	ldr	r2, [pc, #56]	; (8007934 <vPortEnterCritical+0x5c>)
 80078fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <vPortEnterCritical+0x5c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d110      	bne.n	8007928 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007906:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <vPortEnterCritical+0x60>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <vPortEnterCritical+0x50>
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	b672      	cpsid	i
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	b662      	cpsie	i
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	e7fe      	b.n	8007926 <vPortEnterCritical+0x4e>
	}
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	20000008 	.word	0x20000008
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <vPortExitCritical+0x26>
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	607b      	str	r3, [r7, #4]
 8007960:	e7fe      	b.n	8007960 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <vPortExitCritical+0x50>)
 800796a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <vPortExitCritical+0x50>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <vPortExitCritical+0x42>
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000008 	.word	0x20000008

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f380 8811 	msr	BASEPRI, r0
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	f7ff fcf0 	bl	80073a8 <vTaskSwitchContext>
 80079c8:	f04f 0000 	mov.w	r0, #0
 80079cc:	f380 8811 	msr	BASEPRI, r0
 80079d0:	bc09      	pop	{r0, r3}
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	f01e 0f10 	tst.w	lr, #16
 80079de:	bf08      	it	eq
 80079e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e4:	f380 8809 	msr	PSP, r0
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop

080079f0 <pxCurrentTCBConst>:
 80079f0:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	b672      	cpsid	i
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	b662      	cpsie	i
 8007a12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a14:	f7ff fc0e 	bl	8007234 <xTaskIncrementTick>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <xPortSysTickHandler+0x40>)
 8007a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <vPortSetupTimerInterrupt+0x38>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x3c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <vPortSetupTimerInterrupt+0x40>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <vPortSetupTimerInterrupt+0x44>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010
 8007a74:	e000e018 	.word	0xe000e018
 8007a78:	2000000c 	.word	0x2000000c
 8007a7c:	10624dd3 	.word	0x10624dd3
 8007a80:	e000e014 	.word	0xe000e014

08007a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a94 <vPortEnableVFP+0x10>
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a8e:	6001      	str	r1, [r0, #0]
 8007a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed88 	.word	0xe000ed88

08007a98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007aaa:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007aac:	4a44      	ldr	r2, [pc, #272]	; (8007bc0 <MX_ADC1_Init+0x128>)
 8007aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007ab0:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ab6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007ab8:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007abe:	4b3f      	ldr	r3, [pc, #252]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007ac4:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007aca:	4b3c      	ldr	r3, [pc, #240]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ad8:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ada:	4a3a      	ldr	r2, [pc, #232]	; (8007bc4 <MX_ADC1_Init+0x12c>)
 8007adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007ade:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8007ae4:	4b35      	ldr	r3, [pc, #212]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ae6:	2206      	movs	r2, #6
 8007ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007aea:	4b34      	ldr	r3, [pc, #208]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007af2:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007af8:	4830      	ldr	r0, [pc, #192]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007afa:	f7f9 fa89 	bl	8001010 <HAL_ADC_Init>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007b04:	f000 fdf6 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007b10:	2307      	movs	r3, #7
 8007b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b14:	463b      	mov	r3, r7
 8007b16:	4619      	mov	r1, r3
 8007b18:	4828      	ldr	r0, [pc, #160]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007b1a:	f7f9 fabd 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007b24:	f000 fde6 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007b28:	2304      	movs	r3, #4
 8007b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b30:	463b      	mov	r3, r7
 8007b32:	4619      	mov	r1, r3
 8007b34:	4821      	ldr	r0, [pc, #132]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007b36:	f7f9 faaf 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007b40:	f000 fdd8 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007b44:	2309      	movs	r3, #9
 8007b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	4619      	mov	r1, r3
 8007b50:	481a      	ldr	r0, [pc, #104]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007b52:	f7f9 faa1 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8007b5c:	f000 fdca 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007b60:	230a      	movs	r3, #10
 8007b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007b64:	2304      	movs	r3, #4
 8007b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b68:	463b      	mov	r3, r7
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4813      	ldr	r0, [pc, #76]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007b6e:	f7f9 fa93 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8007b78:	f000 fdbc 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007b80:	2305      	movs	r3, #5
 8007b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b84:	463b      	mov	r3, r7
 8007b86:	4619      	mov	r1, r3
 8007b88:	480c      	ldr	r0, [pc, #48]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007b8a:	f7f9 fa85 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8007b94:	f000 fdae 	bl	80086f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007b98:	230d      	movs	r3, #13
 8007b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007b9c:	2306      	movs	r3, #6
 8007b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <MX_ADC1_Init+0x124>)
 8007ba6:	f7f9 fa77 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8007bb0:	f000 fda0 	bl	80086f4 <Error_Handler>
  }

}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20002730 	.word	0x20002730
 8007bc0:	40012000 	.word	0x40012000
 8007bc4:	0f000001 	.word	0x0f000001

08007bc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08c      	sub	sp, #48	; 0x30
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd0:	f107 031c 	add.w	r3, r7, #28
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	609a      	str	r2, [r3, #8]
 8007bdc:	60da      	str	r2, [r3, #12]
 8007bde:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a45      	ldr	r2, [pc, #276]	; (8007cfc <HAL_ADC_MspInit+0x134>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	f040 8084 	bne.w	8007cf4 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bec:	4b44      	ldr	r3, [pc, #272]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	4a43      	ldr	r2, [pc, #268]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf8:	4b41      	ldr	r3, [pc, #260]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c04:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	4a3d      	ldr	r2, [pc, #244]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c0a:	f043 0304 	orr.w	r3, r3, #4
 8007c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c10:	4b3b      	ldr	r3, [pc, #236]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1c:	4b38      	ldr	r3, [pc, #224]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	4a37      	ldr	r2, [pc, #220]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	6313      	str	r3, [r2, #48]	; 0x30
 8007c28:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c34:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	4a31      	ldr	r2, [pc, #196]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c3a:	f043 0302 	orr.w	r3, r3, #2
 8007c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c40:	4b2f      	ldr	r3, [pc, #188]	; (8007d00 <HAL_ADC_MspInit+0x138>)
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 8007c4c:	230d      	movs	r3, #13
 8007c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c50:	2303      	movs	r3, #3
 8007c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c58:	f107 031c 	add.w	r3, r7, #28
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4829      	ldr	r0, [pc, #164]	; (8007d04 <HAL_ADC_MspInit+0x13c>)
 8007c60:	f7fa fc62 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8007c64:	2318      	movs	r3, #24
 8007c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c70:	f107 031c 	add.w	r3, r7, #28
 8007c74:	4619      	mov	r1, r3
 8007c76:	4824      	ldr	r0, [pc, #144]	; (8007d08 <HAL_ADC_MspInit+0x140>)
 8007c78:	f7fa fc56 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c80:	2303      	movs	r3, #3
 8007c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8007c88:	f107 031c 	add.w	r3, r7, #28
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	481f      	ldr	r0, [pc, #124]	; (8007d0c <HAL_ADC_MspInit+0x144>)
 8007c90:	f7fa fc4a 	bl	8002528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007c94:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007c96:	4a1f      	ldr	r2, [pc, #124]	; (8007d14 <HAL_ADC_MspInit+0x14c>)
 8007c98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007cac:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007cbc:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cc2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007cc4:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007ccc:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007cd8:	480d      	ldr	r0, [pc, #52]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cda:	f7fa f81d 	bl	8001d18 <HAL_DMA_Init>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8007ce4:	f000 fd06 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
 8007cee:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <HAL_ADC_MspInit+0x148>)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	3730      	adds	r7, #48	; 0x30
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40012000 	.word	0x40012000
 8007d00:	40023800 	.word	0x40023800
 8007d04:	40020800 	.word	0x40020800
 8007d08:	40020000 	.word	0x40020000
 8007d0c:	40020400 	.word	0x40020400
 8007d10:	20002778 	.word	0x20002778
 8007d14:	40026470 	.word	0x40026470

08007d18 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8007d1c:	4b17      	ldr	r3, [pc, #92]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d1e:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <MX_CAN1_Init+0x68>)
 8007d20:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8007d22:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d24:	2206      	movs	r2, #6
 8007d26:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007d28:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8007d34:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d36:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8007d3a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d3c:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007d42:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007d4e:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8007d54:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007d5a:	4b08      	ldr	r3, [pc, #32]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007d66:	4805      	ldr	r0, [pc, #20]	; (8007d7c <MX_CAN1_Init+0x64>)
 8007d68:	f7f9 fbda 	bl	8001520 <HAL_CAN_Init>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8007d72:	f000 fcbf 	bl	80086f4 <Error_Handler>
  }

}
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200027d8 	.word	0x200027d8
 8007d80:	40006400 	.word	0x40006400

08007d84 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	; 0x28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	f107 0314 	add.w	r3, r7, #20
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <HAL_CAN_MspInit+0x9c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d137      	bne.n	8007e16 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007da6:	4b1f      	ldr	r3, [pc, #124]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007db0:	6413      	str	r3, [r2, #64]	; 0x40
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dbe:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	4a18      	ldr	r2, [pc, #96]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007dc4:	f043 0308 	orr.w	r3, r3, #8
 8007dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dca:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <HAL_CAN_MspInit+0xa0>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007de2:	2303      	movs	r3, #3
 8007de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007de6:	2309      	movs	r3, #9
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	4619      	mov	r1, r3
 8007df0:	480d      	ldr	r0, [pc, #52]	; (8007e28 <HAL_CAN_MspInit+0xa4>)
 8007df2:	f7fa fb99 	bl	8002528 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2105      	movs	r1, #5
 8007dfa:	2014      	movs	r0, #20
 8007dfc:	f7f9 ff62 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007e00:	2014      	movs	r0, #20
 8007e02:	f7f9 ff7b 	bl	8001cfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007e06:	2200      	movs	r2, #0
 8007e08:	2105      	movs	r1, #5
 8007e0a:	2015      	movs	r0, #21
 8007e0c:	f7f9 ff5a 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007e10:	2015      	movs	r0, #21
 8007e12:	f7f9 ff73 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007e16:	bf00      	nop
 8007e18:	3728      	adds	r7, #40	; 0x28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40006400 	.word	0x40006400
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40020c00 	.word	0x40020c00

08007e2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007e32:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	4a3d      	ldr	r2, [pc, #244]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e3e:	4b3b      	ldr	r3, [pc, #236]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007e4a:	4b38      	ldr	r3, [pc, #224]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	4a37      	ldr	r2, [pc, #220]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e54:	6313      	str	r3, [r2, #48]	; 0x30
 8007e56:	4b35      	ldr	r3, [pc, #212]	; (8007f2c <MX_DMA_Init+0x100>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2105      	movs	r1, #5
 8007e66:	200b      	movs	r0, #11
 8007e68:	f7f9 ff2c 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007e6c:	200b      	movs	r0, #11
 8007e6e:	f7f9 ff45 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2105      	movs	r1, #5
 8007e76:	200c      	movs	r0, #12
 8007e78:	f7f9 ff24 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007e7c:	200c      	movs	r0, #12
 8007e7e:	f7f9 ff3d 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2105      	movs	r1, #5
 8007e86:	200f      	movs	r0, #15
 8007e88:	f7f9 ff1c 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007e8c:	200f      	movs	r0, #15
 8007e8e:	f7f9 ff35 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007e92:	2200      	movs	r2, #0
 8007e94:	2105      	movs	r1, #5
 8007e96:	2010      	movs	r0, #16
 8007e98:	f7f9 ff14 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007e9c:	2010      	movs	r0, #16
 8007e9e:	f7f9 ff2d 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2105      	movs	r1, #5
 8007ea6:	2011      	movs	r0, #17
 8007ea8:	f7f9 ff0c 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007eac:	2011      	movs	r0, #17
 8007eae:	f7f9 ff25 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2105      	movs	r1, #5
 8007eb6:	2038      	movs	r0, #56	; 0x38
 8007eb8:	f7f9 ff04 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007ebc:	2038      	movs	r0, #56	; 0x38
 8007ebe:	f7f9 ff1d 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2105      	movs	r1, #5
 8007ec6:	2039      	movs	r0, #57	; 0x39
 8007ec8:	f7f9 fefc 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007ecc:	2039      	movs	r0, #57	; 0x39
 8007ece:	f7f9 ff15 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2105      	movs	r1, #5
 8007ed6:	203a      	movs	r0, #58	; 0x3a
 8007ed8:	f7f9 fef4 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007edc:	203a      	movs	r0, #58	; 0x3a
 8007ede:	f7f9 ff0d 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2105      	movs	r1, #5
 8007ee6:	203b      	movs	r0, #59	; 0x3b
 8007ee8:	f7f9 feec 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007eec:	203b      	movs	r0, #59	; 0x3b
 8007eee:	f7f9 ff05 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2105      	movs	r1, #5
 8007ef6:	203c      	movs	r0, #60	; 0x3c
 8007ef8:	f7f9 fee4 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007efc:	203c      	movs	r0, #60	; 0x3c
 8007efe:	f7f9 fefd 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8007f02:	2200      	movs	r2, #0
 8007f04:	2105      	movs	r1, #5
 8007f06:	2044      	movs	r0, #68	; 0x44
 8007f08:	f7f9 fedc 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007f0c:	2044      	movs	r0, #68	; 0x44
 8007f0e:	f7f9 fef5 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007f12:	2200      	movs	r2, #0
 8007f14:	2105      	movs	r1, #5
 8007f16:	2046      	movs	r0, #70	; 0x46
 8007f18:	f7f9 fed4 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007f1c:	2046      	movs	r0, #70	; 0x46
 8007f1e:	f7f9 feed 	bl	8001cfc <HAL_NVIC_EnableIRQ>

}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800

08007f30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8007f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4a06      	ldr	r2, [pc, #24]	; (8007f60 <vApplicationGetIdleTaskMemory+0x30>)
 8007f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	200006c8 	.word	0x200006c8
 8007f60:	2000071c 	.word	0x2000071c

08007f64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007f64:	b5b0      	push	{r4, r5, r7, lr}
 8007f66:	b08e      	sub	sp, #56	; 0x38
 8007f68:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <MX_FREERTOS_Init+0x58>)
 8007f6c:	f107 041c 	add.w	r4, r7, #28
 8007f70:	461d      	mov	r5, r3
 8007f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 8007f7e:	f107 031c 	add.w	r3, r7, #28
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fd84 	bl	8006a92 <osThreadCreate>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <MX_FREERTOS_Init+0x5c>)
 8007f8e:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <MX_FREERTOS_Init+0x60>)
 8007f92:	463c      	mov	r4, r7
 8007f94:	461d      	mov	r5, r3
 8007f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fd73 	bl	8006a92 <osThreadCreate>
 8007fac:	4602      	mov	r2, r0
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <MX_FREERTOS_Init+0x64>)
 8007fb0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007fb2:	bf00      	nop
 8007fb4:	3738      	adds	r7, #56	; 0x38
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	08015714 	.word	0x08015714
 8007fc0:	20006800 	.word	0x20006800
 8007fc4:	0801573c 	.word	0x0801573c
 8007fc8:	20006858 	.word	0x20006858

08007fcc <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007fd4:	f7ff f91e 	bl	8007214 <xTaskGetTickCount>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 8007fdc:	2301      	movs	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <sendTaskFunc+0x44>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <sendTaskFunc+0x44>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <sendTaskFunc+0x44>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <sendTaskFunc+0x48>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	db04      	blt.n	8008000 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <sendTaskFunc+0x44>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 8007ffc:	f007 fcae 	bl	800f95c <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8008000:	f107 0308 	add.w	r3, r7, #8
 8008004:	68f9      	ldr	r1, [r7, #12]
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe ff76 	bl	8006ef8 <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 800800c:	e7e8      	b.n	8007fe0 <sendTaskFunc+0x14>
 800800e:	bf00      	nop
 8008010:	2000091c 	.word	0x2000091c
 8008014:	20000218 	.word	0x20000218

08008018 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008020:	f7ff f8f8 	bl	8007214 <xTaskGetTickCount>
 8008024:	4603      	mov	r3, r0
 8008026:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 8008028:	2301      	movs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 800802c:	f002 fb62 	bl	800a6f4 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceivePolling();
 8008030:	f005 f936 	bl	800d2a0 <Usart_ReceivePolling>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008034:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <controlTaskFunc+0x4c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <controlTaskFunc+0x4c>)
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <controlTaskFunc+0x4c>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <controlTaskFunc+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	db04      	blt.n	8008054 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <controlTaskFunc+0x4c>)
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
		loop();
 8008050:	f007 fb8e 	bl	800f770 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8008054:	f107 0308 	add.w	r3, r7, #8
 8008058:	68f9      	ldr	r1, [r7, #12]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe ff4c 	bl	8006ef8 <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8008060:	e7e4      	b.n	800802c <controlTaskFunc+0x14>
 8008062:	bf00      	nop
 8008064:	20000920 	.word	0x20000920
 8008068:	20000214 	.word	0x20000214

0800806c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008072:	f107 031c 	add.w	r3, r7, #28
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	609a      	str	r2, [r3, #8]
 800807e:	60da      	str	r2, [r3, #12]
 8008080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008082:	4b65      	ldr	r3, [pc, #404]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4a64      	ldr	r2, [pc, #400]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008088:	f043 0310 	orr.w	r3, r3, #16
 800808c:	6313      	str	r3, [r2, #48]	; 0x30
 800808e:	4b62      	ldr	r3, [pc, #392]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800809a:	4b5f      	ldr	r3, [pc, #380]	; (8008218 <MX_GPIO_Init+0x1ac>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	4a5e      	ldr	r2, [pc, #376]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080a0:	f043 0320 	orr.w	r3, r3, #32
 80080a4:	6313      	str	r3, [r2, #48]	; 0x30
 80080a6:	4b5c      	ldr	r3, [pc, #368]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080b2:	4b59      	ldr	r3, [pc, #356]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	4a58      	ldr	r2, [pc, #352]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080b8:	f043 0304 	orr.w	r3, r3, #4
 80080bc:	6313      	str	r3, [r2, #48]	; 0x30
 80080be:	4b56      	ldr	r3, [pc, #344]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ca:	4b53      	ldr	r3, [pc, #332]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4a52      	ldr	r2, [pc, #328]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	6313      	str	r3, [r2, #48]	; 0x30
 80080d6:	4b50      	ldr	r3, [pc, #320]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80080e2:	4b4d      	ldr	r3, [pc, #308]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	4a4c      	ldr	r2, [pc, #304]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080e8:	f043 0302 	orr.w	r3, r3, #2
 80080ec:	6313      	str	r3, [r2, #48]	; 0x30
 80080ee:	4b4a      	ldr	r3, [pc, #296]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80080fa:	4b47      	ldr	r3, [pc, #284]	; (8008218 <MX_GPIO_Init+0x1ac>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	4a46      	ldr	r2, [pc, #280]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008104:	6313      	str	r3, [r2, #48]	; 0x30
 8008106:	4b44      	ldr	r3, [pc, #272]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008112:	4b41      	ldr	r3, [pc, #260]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	4a40      	ldr	r2, [pc, #256]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008118:	f043 0308 	orr.w	r3, r3, #8
 800811c:	6313      	str	r3, [r2, #48]	; 0x30
 800811e:	4b3e      	ldr	r3, [pc, #248]	; (8008218 <MX_GPIO_Init+0x1ac>)
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 800812a:	2200      	movs	r2, #0
 800812c:	f240 119b 	movw	r1, #411	; 0x19b
 8008130:	483a      	ldr	r0, [pc, #232]	; (800821c <MX_GPIO_Init+0x1b0>)
 8008132:	f7fa fba3 	bl	800287c <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8008136:	2200      	movs	r2, #0
 8008138:	f64f 5138 	movw	r1, #64824	; 0xfd38
 800813c:	4838      	ldr	r0, [pc, #224]	; (8008220 <MX_GPIO_Init+0x1b4>)
 800813e:	f7fa fb9d 	bl	800287c <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8008142:	f240 139b 	movw	r3, #411	; 0x19b
 8008146:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008148:	2301      	movs	r3, #1
 800814a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800814c:	2302      	movs	r3, #2
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008150:	2300      	movs	r3, #0
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008154:	f107 031c 	add.w	r3, r7, #28
 8008158:	4619      	mov	r1, r3
 800815a:	4830      	ldr	r0, [pc, #192]	; (800821c <MX_GPIO_Init+0x1b0>)
 800815c:	f7fa f9e4 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8008160:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8008164:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008166:	2301      	movs	r3, #1
 8008168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800816a:	2302      	movs	r3, #2
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816e:	2300      	movs	r3, #0
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008172:	f107 031c 	add.w	r3, r7, #28
 8008176:	4619      	mov	r1, r3
 8008178:	4829      	ldr	r0, [pc, #164]	; (8008220 <MX_GPIO_Init+0x1b4>)
 800817a:	f7fa f9d5 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 800817e:	233f      	movs	r3, #63	; 0x3f
 8008180:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008182:	4b28      	ldr	r3, [pc, #160]	; (8008224 <MX_GPIO_Init+0x1b8>)
 8008184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008186:	2302      	movs	r3, #2
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800818a:	f107 031c 	add.w	r3, r7, #28
 800818e:	4619      	mov	r1, r3
 8008190:	4825      	ldr	r0, [pc, #148]	; (8008228 <MX_GPIO_Init+0x1bc>)
 8008192:	f7fa f9c9 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 8008196:	239c      	movs	r3, #156	; 0x9c
 8008198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800819a:	2300      	movs	r3, #0
 800819c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80081a2:	f107 031c 	add.w	r3, r7, #28
 80081a6:	4619      	mov	r1, r3
 80081a8:	4820      	ldr	r0, [pc, #128]	; (800822c <MX_GPIO_Init+0x1c0>)
 80081aa:	f7fa f9bd 	bl	8002528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2105      	movs	r1, #5
 80081b2:	2006      	movs	r0, #6
 80081b4:	f7f9 fd86 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80081b8:	2006      	movs	r0, #6
 80081ba:	f7f9 fd9f 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80081be:	2200      	movs	r2, #0
 80081c0:	2105      	movs	r1, #5
 80081c2:	2007      	movs	r0, #7
 80081c4:	f7f9 fd7e 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80081c8:	2007      	movs	r0, #7
 80081ca:	f7f9 fd97 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80081ce:	2200      	movs	r2, #0
 80081d0:	2105      	movs	r1, #5
 80081d2:	2008      	movs	r0, #8
 80081d4:	f7f9 fd76 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80081d8:	2008      	movs	r0, #8
 80081da:	f7f9 fd8f 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80081de:	2200      	movs	r2, #0
 80081e0:	2105      	movs	r1, #5
 80081e2:	2009      	movs	r0, #9
 80081e4:	f7f9 fd6e 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80081e8:	2009      	movs	r0, #9
 80081ea:	f7f9 fd87 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80081ee:	2200      	movs	r2, #0
 80081f0:	2105      	movs	r1, #5
 80081f2:	200a      	movs	r0, #10
 80081f4:	f7f9 fd66 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80081f8:	200a      	movs	r0, #10
 80081fa:	f7f9 fd7f 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80081fe:	2200      	movs	r2, #0
 8008200:	2105      	movs	r1, #5
 8008202:	2017      	movs	r0, #23
 8008204:	f7f9 fd5e 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008208:	2017      	movs	r0, #23
 800820a:	f7f9 fd77 	bl	8001cfc <HAL_NVIC_EnableIRQ>

}
 800820e:	bf00      	nop
 8008210:	3730      	adds	r7, #48	; 0x30
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40023800 	.word	0x40023800
 800821c:	40021000 	.word	0x40021000
 8008220:	40021400 	.word	0x40021400
 8008224:	10210000 	.word	0x10210000
 8008228:	40021800 	.word	0x40021800
 800822c:	40020c00 	.word	0x40020c00

08008230 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008234:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008236:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <MX_I2C1_Init+0x78>)
 8008238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800823a:	4b1a      	ldr	r3, [pc, #104]	; (80082a4 <MX_I2C1_Init+0x74>)
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <MX_I2C1_Init+0x7c>)
 800823e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008240:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008242:	2200      	movs	r2, #0
 8008244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008246:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008248:	2201      	movs	r2, #1
 800824a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800824c:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <MX_I2C1_Init+0x74>)
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008254:	2200      	movs	r2, #0
 8008256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <MX_I2C1_Init+0x74>)
 800825a:	2200      	movs	r2, #0
 800825c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008260:	2200      	movs	r2, #0
 8008262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008266:	2200      	movs	r2, #0
 8008268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800826a:	480e      	ldr	r0, [pc, #56]	; (80082a4 <MX_I2C1_Init+0x74>)
 800826c:	f7fa fb38 	bl	80028e0 <HAL_I2C_Init>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008276:	f000 fa3d 	bl	80086f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800827a:	2100      	movs	r1, #0
 800827c:	4809      	ldr	r0, [pc, #36]	; (80082a4 <MX_I2C1_Init+0x74>)
 800827e:	f7fa fbbf 	bl	8002a00 <HAL_I2CEx_ConfigAnalogFilter>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008288:	f000 fa34 	bl	80086f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800828c:	2100      	movs	r1, #0
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <MX_I2C1_Init+0x74>)
 8008290:	f7fa fc01 	bl	8002a96 <HAL_I2CEx_ConfigDigitalFilter>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800829a:	f000 fa2b 	bl	80086f4 <Error_Handler>
  }

}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	2000a910 	.word	0x2000a910
 80082a8:	40005400 	.word	0x40005400
 80082ac:	6000030d 	.word	0x6000030d

080082b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b8:	f107 0314 	add.w	r3, r7, #20
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	609a      	str	r2, [r3, #8]
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2e      	ldr	r2, [pc, #184]	; (8008388 <HAL_I2C_MspInit+0xd8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d156      	bne.n	8008380 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <HAL_I2C_MspInit+0xdc>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4a2d      	ldr	r2, [pc, #180]	; (800838c <HAL_I2C_MspInit+0xdc>)
 80082d8:	f043 0302 	orr.w	r3, r3, #2
 80082dc:	6313      	str	r3, [r2, #48]	; 0x30
 80082de:	4b2b      	ldr	r3, [pc, #172]	; (800838c <HAL_I2C_MspInit+0xdc>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80082ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082f0:	2312      	movs	r3, #18
 80082f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082f4:	2301      	movs	r3, #1
 80082f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f8:	2303      	movs	r3, #3
 80082fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80082fc:	2304      	movs	r3, #4
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4619      	mov	r1, r3
 8008306:	4822      	ldr	r0, [pc, #136]	; (8008390 <HAL_I2C_MspInit+0xe0>)
 8008308:	f7fa f90e 	bl	8002528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800830c:	4b1f      	ldr	r3, [pc, #124]	; (800838c <HAL_I2C_MspInit+0xdc>)
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	4a1e      	ldr	r2, [pc, #120]	; (800838c <HAL_I2C_MspInit+0xdc>)
 8008312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008316:	6413      	str	r3, [r2, #64]	; 0x40
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <HAL_I2C_MspInit+0xdc>)
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008324:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008326:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <HAL_I2C_MspInit+0xe8>)
 8008328:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800832a:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 800832c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008330:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008334:	2240      	movs	r2, #64	; 0x40
 8008336:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 800833a:	2200      	movs	r2, #0
 800833c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800833e:	4b15      	ldr	r3, [pc, #84]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008344:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008348:	2200      	movs	r2, #0
 800834a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 800834e:	2200      	movs	r2, #0
 8008350:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008352:	4b10      	ldr	r3, [pc, #64]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008354:	2200      	movs	r2, #0
 8008356:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 800835a:	2200      	movs	r2, #0
 800835c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008360:	2200      	movs	r2, #0
 8008362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008364:	480b      	ldr	r0, [pc, #44]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008366:	f7f9 fcd7 	bl	8001d18 <HAL_DMA_Init>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008370:	f000 f9c0 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
 800837a:	4a06      	ldr	r2, [pc, #24]	; (8008394 <HAL_I2C_MspInit+0xe4>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008380:	bf00      	nop
 8008382:	3728      	adds	r7, #40	; 0x28
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40005400 	.word	0x40005400
 800838c:	40023800 	.word	0x40023800
 8008390:	40020400 	.word	0x40020400
 8008394:	2000a8b0 	.word	0x2000a8b0
 8008398:	400260a0 	.word	0x400260a0

0800839c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80083a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083a4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80083a8:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <SCB_EnableICache+0x3c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80083b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <SCB_EnableICache+0x3c>)
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	4a06      	ldr	r2, [pc, #24]	; (80083d8 <SCB_EnableICache+0x3c>)
 80083be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80083c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	e000ed00 	.word	0xe000ed00

080083dc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80083e2:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <SCB_EnableDCache+0x7c>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80083ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80083ee:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <SCB_EnableDCache+0x7c>)
 80083f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083f4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	0b5b      	lsrs	r3, r3, #13
 80083fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083fe:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	08db      	lsrs	r3, r3, #3
 8008404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008408:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008412:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008418:	490f      	ldr	r1, [pc, #60]	; (8008458 <SCB_EnableDCache+0x7c>)
 800841a:	4313      	orrs	r3, r2
 800841c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	60ba      	str	r2, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1ef      	bne.n	800840a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	60fa      	str	r2, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e5      	bne.n	8008400 <SCB_EnableDCache+0x24>
 8008434:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <SCB_EnableDCache+0x7c>)
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	4a06      	ldr	r2, [pc, #24]	; (8008458 <SCB_EnableDCache+0x7c>)
 800843e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008442:	6153      	str	r3, [r2, #20]
 8008444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008448:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	e000ed00 	.word	0xe000ed00

0800845c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008460:	f7ff ff9c 	bl	800839c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008464:	f7ff ffba 	bl	80083dc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008468:	f7f8 fda4 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800846c:	f000 f83a 	bl	80084e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008470:	f7ff fdfc 	bl	800806c <MX_GPIO_Init>
  MX_DMA_Init();
 8008474:	f7ff fcda 	bl	8007e2c <MX_DMA_Init>
  MX_ADC1_Init();
 8008478:	f7ff fb0e 	bl	8007a98 <MX_ADC1_Init>
  MX_TIM1_Init();
 800847c:	f000 fe94 	bl	80091a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008480:	f000 ff4c 	bl	800931c <MX_TIM2_Init>
  MX_TIM3_Init();
 8008484:	f000 ffd8 	bl	8009438 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008488:	f001 f852 	bl	8009530 <MX_TIM4_Init>
  MX_TIM7_Init();
 800848c:	f001 f8cc 	bl	8009628 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008490:	f001 f900 	bl	8009694 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008494:	f001 f9b8 	bl	8009808 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008498:	f001 fa24 	bl	80098e4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800849c:	f001 fa70 	bl	8009980 <MX_TIM11_Init>
  MX_TIM14_Init();
 80084a0:	f001 fabc 	bl	8009a1c <MX_TIM14_Init>
  MX_SPI1_Init();
 80084a4:	f000 f92e 	bl	8008704 <MX_SPI1_Init>
  MX_SPI3_Init();
 80084a8:	f000 f964 	bl	8008774 <MX_SPI3_Init>
  MX_SPI4_Init();
 80084ac:	f000 f9a0 	bl	80087f0 <MX_SPI4_Init>
  MX_SPI6_Init();
 80084b0:	f000 f9dc 	bl	800886c <MX_SPI6_Init>
  MX_USART1_UART_Init();
 80084b4:	f001 fd8e 	bl	8009fd4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80084b8:	f001 fdec 	bl	800a094 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80084bc:	f7ff feb8 	bl	8008230 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80084c0:	f001 fdb8 	bl	800a034 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80084c4:	f7ff fc28 	bl	8007d18 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 80084c8:	f004 fc6a 	bl	800cda0 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 80084cc:	f002 f95c 	bl	800a788 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 80084d0:	f003 fd8c 	bl	800bfec <PWMBuiltIn_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 80084d4:	f007 f8e4 	bl	800f6a0 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80084d8:	f7ff fd44 	bl	8007f64 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80084dc:	f7fe fad2 	bl	8006a84 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80084e0:	e7fe      	b.n	80084e0 <main+0x84>
	...

080084e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b0b8      	sub	sp, #224	; 0xe0
 80084e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80084ee:	2234      	movs	r2, #52	; 0x34
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f008 fac1 	bl	8010a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	2290      	movs	r2, #144	; 0x90
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f008 fab2 	bl	8010a7a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008516:	4b3c      	ldr	r3, [pc, #240]	; (8008608 <SystemClock_Config+0x124>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <SystemClock_Config+0x124>)
 800851c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008520:	6413      	str	r3, [r2, #64]	; 0x40
 8008522:	4b39      	ldr	r3, [pc, #228]	; (8008608 <SystemClock_Config+0x124>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800852e:	4b37      	ldr	r3, [pc, #220]	; (800860c <SystemClock_Config+0x128>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a36      	ldr	r2, [pc, #216]	; (800860c <SystemClock_Config+0x128>)
 8008534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <SystemClock_Config+0x128>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008546:	2302      	movs	r3, #2
 8008548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800854c:	2301      	movs	r3, #1
 800854e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008552:	2310      	movs	r3, #16
 8008554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008558:	2302      	movs	r3, #2
 800855a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800855e:	2300      	movs	r3, #0
 8008560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008564:	2308      	movs	r3, #8
 8008566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800856a:	23d8      	movs	r3, #216	; 0xd8
 800856c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008570:	2302      	movs	r3, #2
 8008572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008576:	2302      	movs	r3, #2
 8008578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800857c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008580:	4618      	mov	r0, r3
 8008582:	f7fa fb25 	bl	8002bd0 <HAL_RCC_OscConfig>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800858c:	f000 f8b2 	bl	80086f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008590:	f7fa face 	bl	8002b30 <HAL_PWREx_EnableOverDrive>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800859a:	f000 f8ab 	bl	80086f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800859e:	230f      	movs	r3, #15
 80085a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085a4:	2302      	movs	r3, #2
 80085a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80085c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085c4:	2107      	movs	r1, #7
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fa fdb0 	bl	800312c <HAL_RCC_ClockConfig>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80085d2:	f000 f88f 	bl	80086f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80085d6:	f244 13c0 	movw	r3, #16832	; 0x41c0
 80085da:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80085dc:	2300      	movs	r3, #0
 80085de:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80085e0:	2300      	movs	r3, #0
 80085e2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80085e4:	2300      	movs	r3, #0
 80085e6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80085e8:	2300      	movs	r3, #0
 80085ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fa ff9f 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80085fc:	f000 f87a 	bl	80086f4 <Error_Handler>
  }
}
 8008600:	bf00      	nop
 8008602:	37e0      	adds	r7, #224	; 0xe0
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	40023800 	.word	0x40023800
 800860c:	40007000 	.word	0x40007000

08008610 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 ffb9 	bl	800a590 <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f007 fade 	bl	800fbe0 <slaveSPITxRxCpltCallback>

}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f007 fafd 	bl	800fc34 <slaveSPIErrorCallback>

}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d103      	bne.n	8008660 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008658:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e021      	b.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d103      	bne.n	800866e <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008666:	4b19      	ldr	r3, [pc, #100]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 8008668:	2201      	movs	r2, #1
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	e01a      	b.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	2b04      	cmp	r3, #4
 8008672:	d103      	bne.n	800867c <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008674:	4b15      	ldr	r3, [pc, #84]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 8008676:	2202      	movs	r2, #2
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e013      	b.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	2b08      	cmp	r3, #8
 8008680:	d103      	bne.n	800868a <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 8008684:	2203      	movs	r2, #3
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e00c      	b.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d103      	bne.n	8008698 <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008690:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 8008692:	2204      	movs	r2, #4
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e005      	b.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	2b20      	cmp	r3, #32
 800869c:	d102      	bne.n	80086a4 <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 80086a0:	2205      	movs	r2, #5
 80086a2:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 80086a4:	4b09      	ldr	r3, [pc, #36]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 ff38 	bl	800a520 <ADBoard_BUSYCallback>
 80086b0:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 80086b8:	4b04      	ldr	r3, [pc, #16]	; (80086cc <HAL_GPIO_EXTI_Callback+0x88>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f002 ffcd 	bl	800b65c <interruptCallback>
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000924 	.word	0x20000924

080086d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80086e2:	f7f8 fc75 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40000c00 	.word	0x40000c00

080086f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
	...

08008704 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008708:	4b18      	ldr	r3, [pc, #96]	; (800876c <MX_SPI1_Init+0x68>)
 800870a:	4a19      	ldr	r2, [pc, #100]	; (8008770 <MX_SPI1_Init+0x6c>)
 800870c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800870e:	4b17      	ldr	r3, [pc, #92]	; (800876c <MX_SPI1_Init+0x68>)
 8008710:	2200      	movs	r2, #0
 8008712:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008714:	4b15      	ldr	r3, [pc, #84]	; (800876c <MX_SPI1_Init+0x68>)
 8008716:	2200      	movs	r2, #0
 8008718:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <MX_SPI1_Init+0x68>)
 800871c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <MX_SPI1_Init+0x68>)
 8008724:	2200      	movs	r2, #0
 8008726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <MX_SPI1_Init+0x68>)
 800872a:	2201      	movs	r2, #1
 800872c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <MX_SPI1_Init+0x68>)
 8008730:	2200      	movs	r2, #0
 8008732:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <MX_SPI1_Init+0x68>)
 8008736:	2200      	movs	r2, #0
 8008738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <MX_SPI1_Init+0x68>)
 800873c:	2200      	movs	r2, #0
 800873e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <MX_SPI1_Init+0x68>)
 8008742:	2200      	movs	r2, #0
 8008744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <MX_SPI1_Init+0x68>)
 8008748:	2207      	movs	r2, #7
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <MX_SPI1_Init+0x68>)
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <MX_SPI1_Init+0x68>)
 8008754:	2200      	movs	r2, #0
 8008756:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008758:	4804      	ldr	r0, [pc, #16]	; (800876c <MX_SPI1_Init+0x68>)
 800875a:	f7fb fb11 	bl	8003d80 <HAL_SPI_Init>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008764:	f7ff ffc6 	bl	80086f4 <Error_Handler>
  }

}
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}
 800876c:	2000aba8 	.word	0x2000aba8
 8008770:	40013000 	.word	0x40013000

08008774 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <MX_SPI3_Init+0x74>)
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <MX_SPI3_Init+0x78>)
 800877c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800877e:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <MX_SPI3_Init+0x74>)
 8008780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008784:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008786:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <MX_SPI3_Init+0x74>)
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800878c:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <MX_SPI3_Init+0x74>)
 800878e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008792:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008794:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <MX_SPI3_Init+0x74>)
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <MX_SPI3_Init+0x74>)
 800879c:	2200      	movs	r2, #0
 800879e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087bc:	2200      	movs	r2, #0
 80087be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087c2:	2207      	movs	r2, #7
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087ce:	2208      	movs	r2, #8
 80087d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <MX_SPI3_Init+0x74>)
 80087d4:	f7fb fad4 	bl	8003d80 <HAL_SPI_Init>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80087de:	f7ff ff89 	bl	80086f4 <Error_Handler>
  }

}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	2000aa20 	.word	0x2000aa20
 80087ec:	40003c00 	.word	0x40003c00

080087f0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <MX_SPI4_Init+0x74>)
 80087f6:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <MX_SPI4_Init+0x78>)
 80087f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80087fa:	4b1a      	ldr	r3, [pc, #104]	; (8008864 <MX_SPI4_Init+0x74>)
 80087fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008800:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008802:	4b18      	ldr	r3, [pc, #96]	; (8008864 <MX_SPI4_Init+0x74>)
 8008804:	2200      	movs	r2, #0
 8008806:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <MX_SPI4_Init+0x74>)
 800880a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800880e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008810:	4b14      	ldr	r3, [pc, #80]	; (8008864 <MX_SPI4_Init+0x74>)
 8008812:	2202      	movs	r2, #2
 8008814:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <MX_SPI4_Init+0x74>)
 8008818:	2200      	movs	r2, #0
 800881a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800881c:	4b11      	ldr	r3, [pc, #68]	; (8008864 <MX_SPI4_Init+0x74>)
 800881e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008822:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <MX_SPI4_Init+0x74>)
 8008826:	2210      	movs	r2, #16
 8008828:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <MX_SPI4_Init+0x74>)
 800882c:	2200      	movs	r2, #0
 800882e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008830:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <MX_SPI4_Init+0x74>)
 8008832:	2200      	movs	r2, #0
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008836:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <MX_SPI4_Init+0x74>)
 8008838:	2200      	movs	r2, #0
 800883a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <MX_SPI4_Init+0x74>)
 800883e:	2207      	movs	r2, #7
 8008840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008842:	4b08      	ldr	r3, [pc, #32]	; (8008864 <MX_SPI4_Init+0x74>)
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <MX_SPI4_Init+0x74>)
 800884a:	2208      	movs	r2, #8
 800884c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800884e:	4805      	ldr	r0, [pc, #20]	; (8008864 <MX_SPI4_Init+0x74>)
 8008850:	f7fb fa96 	bl	8003d80 <HAL_SPI_Init>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800885a:	f7ff ff4b 	bl	80086f4 <Error_Handler>
  }

}
 800885e:	bf00      	nop
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	2000ab44 	.word	0x2000ab44
 8008868:	40013400 	.word	0x40013400

0800886c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <MX_SPI6_Init+0x74>)
 8008872:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <MX_SPI6_Init+0x78>)
 8008874:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <MX_SPI6_Init+0x74>)
 8008878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800887c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800887e:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <MX_SPI6_Init+0x74>)
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8008884:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <MX_SPI6_Init+0x74>)
 8008886:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800888a:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800888c:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <MX_SPI6_Init+0x74>)
 800888e:	2200      	movs	r2, #0
 8008890:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <MX_SPI6_Init+0x74>)
 8008894:	2200      	movs	r2, #0
 8008896:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <MX_SPI6_Init+0x74>)
 800889a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889e:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088a2:	2230      	movs	r2, #48	; 0x30
 80088a4:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80088a6:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80088b8:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088ba:	2207      	movs	r2, #7
 80088bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80088be:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088c6:	2208      	movs	r2, #8
 80088c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80088ca:	4805      	ldr	r0, [pc, #20]	; (80088e0 <MX_SPI6_Init+0x74>)
 80088cc:	f7fb fa58 	bl	8003d80 <HAL_SPI_Init>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80088d6:	f7ff ff0d 	bl	80086f4 <Error_Handler>
  }

}
 80088da:	bf00      	nop
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	2000a9bc 	.word	0x2000a9bc
 80088e4:	40015400 	.word	0x40015400

080088e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b092      	sub	sp, #72	; 0x48
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a5b      	ldr	r2, [pc, #364]	; (8008a74 <HAL_SPI_MspInit+0x18c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	f040 80c4 	bne.w	8008a94 <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800890c:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	4a59      	ldr	r2, [pc, #356]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 8008912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008916:	6453      	str	r3, [r2, #68]	; 0x44
 8008918:	4b57      	ldr	r3, [pc, #348]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 800891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008920:	633b      	str	r3, [r7, #48]	; 0x30
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008924:	4b54      	ldr	r3, [pc, #336]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 8008926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008928:	4a53      	ldr	r2, [pc, #332]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	6313      	str	r3, [r2, #48]	; 0x30
 8008930:	4b51      	ldr	r3, [pc, #324]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800893c:	4b4e      	ldr	r3, [pc, #312]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	4a4d      	ldr	r2, [pc, #308]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 8008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008946:	6313      	str	r3, [r2, #48]	; 0x30
 8008948:	4b4b      	ldr	r3, [pc, #300]	; (8008a78 <HAL_SPI_MspInit+0x190>)
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	62bb      	str	r3, [r7, #40]	; 0x28
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008954:	2360      	movs	r3, #96	; 0x60
 8008956:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	2302      	movs	r3, #2
 800895a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895c:	2300      	movs	r3, #0
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008960:	2303      	movs	r3, #3
 8008962:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008964:	2305      	movs	r3, #5
 8008966:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800896c:	4619      	mov	r1, r3
 800896e:	4843      	ldr	r0, [pc, #268]	; (8008a7c <HAL_SPI_MspInit+0x194>)
 8008970:	f7f9 fdda 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008978:	2302      	movs	r3, #2
 800897a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800897c:	2301      	movs	r3, #1
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008980:	2303      	movs	r3, #3
 8008982:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008984:	2305      	movs	r3, #5
 8008986:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800898c:	4619      	mov	r1, r3
 800898e:	483b      	ldr	r0, [pc, #236]	; (8008a7c <HAL_SPI_MspInit+0x194>)
 8008990:	f7f9 fdca 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800899a:	2302      	movs	r3, #2
 800899c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a2:	2303      	movs	r3, #3
 80089a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80089a6:	2305      	movs	r3, #5
 80089a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089ae:	4619      	mov	r1, r3
 80089b0:	4833      	ldr	r0, [pc, #204]	; (8008a80 <HAL_SPI_MspInit+0x198>)
 80089b2:	f7f9 fdb9 	bl	8002528 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80089b6:	4b33      	ldr	r3, [pc, #204]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089b8:	4a33      	ldr	r2, [pc, #204]	; (8008a88 <HAL_SPI_MspInit+0x1a0>)
 80089ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80089bc:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80089c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089c4:	4b2f      	ldr	r3, [pc, #188]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089ca:	4b2e      	ldr	r3, [pc, #184]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089d0:	4b2c      	ldr	r3, [pc, #176]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089d8:	4b2a      	ldr	r3, [pc, #168]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089da:	2200      	movs	r2, #0
 80089dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089de:	4b29      	ldr	r3, [pc, #164]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80089e4:	4b27      	ldr	r3, [pc, #156]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089ea:	4b26      	ldr	r3, [pc, #152]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80089f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80089f8:	4822      	ldr	r0, [pc, #136]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 80089fa:	f7f9 f98d 	bl	8001d18 <HAL_DMA_Init>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8008a04:	f7ff fe76 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 8008a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <HAL_SPI_MspInit+0x19c>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008a14:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a16:	4a1e      	ldr	r2, [pc, #120]	; (8008a90 <HAL_SPI_MspInit+0x1a8>)
 8008a18:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8008a1a:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a1c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008a20:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a22:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a28:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a2e:	4b17      	ldr	r3, [pc, #92]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a34:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a3c:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008a4e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a50:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008a56:	480d      	ldr	r0, [pc, #52]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a58:	f7f9 f95e 	bl	8001d18 <HAL_DMA_Init>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 8008a62:	f7ff fe47 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a6a:	655a      	str	r2, [r3, #84]	; 0x54
 8008a6c:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <HAL_SPI_MspInit+0x1a4>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008a72:	e1bb      	b.n	8008dec <HAL_SPI_MspInit+0x504>
 8008a74:	40013000 	.word	0x40013000
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	40020000 	.word	0x40020000
 8008a80:	40021800 	.word	0x40021800
 8008a84:	2000ac0c 	.word	0x2000ac0c
 8008a88:	40026440 	.word	0x40026440
 8008a8c:	2000ac6c 	.word	0x2000ac6c
 8008a90:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a9d      	ldr	r2, [pc, #628]	; (8008d10 <HAL_SPI_MspInit+0x428>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f040 80a6 	bne.w	8008bec <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008aa0:	4b9c      	ldr	r3, [pc, #624]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	4a9b      	ldr	r2, [pc, #620]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8008aac:	4b99      	ldr	r3, [pc, #612]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ab8:	4b96      	ldr	r3, [pc, #600]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	4a95      	ldr	r2, [pc, #596]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008abe:	f043 0302 	orr.w	r3, r3, #2
 8008ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ac4:	4b93      	ldr	r3, [pc, #588]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	623b      	str	r3, [r7, #32]
 8008ace:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ad0:	4b90      	ldr	r3, [pc, #576]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	4a8f      	ldr	r2, [pc, #572]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008ad6:	f043 0304 	orr.w	r3, r3, #4
 8008ada:	6313      	str	r3, [r2, #48]	; 0x30
 8008adc:	4b8d      	ldr	r3, [pc, #564]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008ae8:	2304      	movs	r3, #4
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aec:	2302      	movs	r3, #2
 8008aee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af4:	2303      	movs	r3, #3
 8008af6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008af8:	2307      	movs	r3, #7
 8008afa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b00:	4619      	mov	r1, r3
 8008b02:	4885      	ldr	r0, [pc, #532]	; (8008d18 <HAL_SPI_MspInit+0x430>)
 8008b04:	f7f9 fd10 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008b08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b16:	2303      	movs	r3, #3
 8008b18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b1a:	2306      	movs	r3, #6
 8008b1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b22:	4619      	mov	r1, r3
 8008b24:	487d      	ldr	r0, [pc, #500]	; (8008d1c <HAL_SPI_MspInit+0x434>)
 8008b26:	f7f9 fcff 	bl	8002528 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8008b2a:	4b7d      	ldr	r3, [pc, #500]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b2c:	4a7d      	ldr	r2, [pc, #500]	; (8008d24 <HAL_SPI_MspInit+0x43c>)
 8008b2e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008b30:	4b7b      	ldr	r3, [pc, #492]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b36:	4b7a      	ldr	r3, [pc, #488]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b3c:	4b78      	ldr	r3, [pc, #480]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b42:	4b77      	ldr	r3, [pc, #476]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b48:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b4a:	4b75      	ldr	r3, [pc, #468]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b50:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b52:	4b73      	ldr	r3, [pc, #460]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b58:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8008b5a:	4b71      	ldr	r3, [pc, #452]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008b60:	4b6f      	ldr	r3, [pc, #444]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b66:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b68:	4b6d      	ldr	r3, [pc, #436]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8008b6e:	486c      	ldr	r0, [pc, #432]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b70:	f7f9 f8d2 	bl	8001d18 <HAL_DMA_Init>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_SPI_MspInit+0x296>
      Error_Handler();
 8008b7a:	f7ff fdbb 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a67      	ldr	r2, [pc, #412]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b82:	659a      	str	r2, [r3, #88]	; 0x58
 8008b84:	4a66      	ldr	r2, [pc, #408]	; (8008d20 <HAL_SPI_MspInit+0x438>)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008b8c:	4a67      	ldr	r2, [pc, #412]	; (8008d2c <HAL_SPI_MspInit+0x444>)
 8008b8e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8008b90:	4b65      	ldr	r3, [pc, #404]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b96:	4b64      	ldr	r3, [pc, #400]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008b98:	2240      	movs	r2, #64	; 0x40
 8008b9a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b9c:	4b62      	ldr	r3, [pc, #392]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ba2:	4b61      	ldr	r3, [pc, #388]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ba8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008baa:	4b5f      	ldr	r3, [pc, #380]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bb0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008bb2:	4b5d      	ldr	r3, [pc, #372]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bb8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8008bba:	4b5b      	ldr	r3, [pc, #364]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008bc0:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008bc6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008bc8:	4b57      	ldr	r3, [pc, #348]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008bce:	4856      	ldr	r0, [pc, #344]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008bd0:	f7f9 f8a2 	bl	8001d18 <HAL_DMA_Init>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 8008bda:	f7ff fd8b 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a51      	ldr	r2, [pc, #324]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008be2:	655a      	str	r2, [r3, #84]	; 0x54
 8008be4:	4a50      	ldr	r2, [pc, #320]	; (8008d28 <HAL_SPI_MspInit+0x440>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008bea:	e0ff      	b.n	8008dec <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a4f      	ldr	r2, [pc, #316]	; (8008d30 <HAL_SPI_MspInit+0x448>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f040 80a8 	bne.w	8008d48 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008bf8:	4b46      	ldr	r3, [pc, #280]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfc:	4a45      	ldr	r2, [pc, #276]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c02:	6453      	str	r3, [r2, #68]	; 0x44
 8008c04:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c10:	4b40      	ldr	r3, [pc, #256]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	4a3f      	ldr	r2, [pc, #252]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008c16:	f043 0310 	orr.w	r3, r3, #16
 8008c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1c:	4b3d      	ldr	r3, [pc, #244]	; (8008d14 <HAL_SPI_MspInit+0x42c>)
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8008c28:	f246 0304 	movw	r3, #24580	; 0x6004
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c36:	2303      	movs	r3, #3
 8008c38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008c3a:	2305      	movs	r3, #5
 8008c3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c42:	4619      	mov	r1, r3
 8008c44:	483b      	ldr	r0, [pc, #236]	; (8008d34 <HAL_SPI_MspInit+0x44c>)
 8008c46:	f7f9 fc6f 	bl	8002528 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8008c4a:	4b3b      	ldr	r3, [pc, #236]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c4c:	4a3b      	ldr	r2, [pc, #236]	; (8008d3c <HAL_SPI_MspInit+0x454>)
 8008c4e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8008c50:	4b39      	ldr	r3, [pc, #228]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c56:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c58:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c5e:	4b36      	ldr	r3, [pc, #216]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c64:	4b34      	ldr	r3, [pc, #208]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c6a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008c6c:	4b32      	ldr	r3, [pc, #200]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c72:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008c74:	4b30      	ldr	r3, [pc, #192]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c7a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8008c7c:	4b2e      	ldr	r3, [pc, #184]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008c82:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c88:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c8a:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008c90:	4829      	ldr	r0, [pc, #164]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008c92:	f7f9 f841 	bl	8001d18 <HAL_DMA_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 8008c9c:	f7ff fd2a 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a25      	ldr	r2, [pc, #148]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8008ca6:	4a24      	ldr	r2, [pc, #144]	; (8008d38 <HAL_SPI_MspInit+0x450>)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8008cac:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cae:	4a25      	ldr	r2, [pc, #148]	; (8008d44 <HAL_SPI_MspInit+0x45c>)
 8008cb0:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8008cb2:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008cb8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cba:	4b21      	ldr	r3, [pc, #132]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cbc:	2240      	movs	r2, #64	; 0x40
 8008cbe:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cc0:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ccc:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008cce:	4b1c      	ldr	r3, [pc, #112]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cd4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cdc:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8008cde:	4b18      	ldr	r3, [pc, #96]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008ce4:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008cea:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008cf2:	4813      	ldr	r0, [pc, #76]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008cf4:	f7f9 f810 	bl	8001d18 <HAL_DMA_Init>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 8008cfe:	f7ff fcf9 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a0e      	ldr	r2, [pc, #56]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008d06:	655a      	str	r2, [r3, #84]	; 0x54
 8008d08:	4a0d      	ldr	r2, [pc, #52]	; (8008d40 <HAL_SPI_MspInit+0x458>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008d0e:	e06d      	b.n	8008dec <HAL_SPI_MspInit+0x504>
 8008d10:	40003c00 	.word	0x40003c00
 8008d14:	40023800 	.word	0x40023800
 8008d18:	40020400 	.word	0x40020400
 8008d1c:	40020800 	.word	0x40020800
 8008d20:	2000accc 	.word	0x2000accc
 8008d24:	40026010 	.word	0x40026010
 8008d28:	2000aa84 	.word	0x2000aa84
 8008d2c:	40026088 	.word	0x40026088
 8008d30:	40013400 	.word	0x40013400
 8008d34:	40021000 	.word	0x40021000
 8008d38:	2000a95c 	.word	0x2000a95c
 8008d3c:	40026410 	.word	0x40026410
 8008d40:	2000aae4 	.word	0x2000aae4
 8008d44:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a29      	ldr	r2, [pc, #164]	; (8008df4 <HAL_SPI_MspInit+0x50c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d14c      	bne.n	8008dec <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8008d52:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	4a28      	ldr	r2, [pc, #160]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d5e:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d6a:	4b23      	ldr	r3, [pc, #140]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30
 8008d76:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	4a1c      	ldr	r2, [pc, #112]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d88:	f043 0302 	orr.w	r3, r3, #2
 8008d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8e:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <HAL_SPI_MspInit+0x510>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8008d9a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8008d9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da0:	2302      	movs	r3, #2
 8008da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da8:	2303      	movs	r3, #3
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8008dac:	2305      	movs	r3, #5
 8008dae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008db4:	4619      	mov	r1, r3
 8008db6:	4811      	ldr	r0, [pc, #68]	; (8008dfc <HAL_SPI_MspInit+0x514>)
 8008db8:	f7f9 fbb6 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008dcc:	2308      	movs	r3, #8
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	480a      	ldr	r0, [pc, #40]	; (8008e00 <HAL_SPI_MspInit+0x518>)
 8008dd8:	f7f9 fba6 	bl	8002528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2105      	movs	r1, #5
 8008de0:	2056      	movs	r0, #86	; 0x56
 8008de2:	f7f8 ff6f 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8008de6:	2056      	movs	r0, #86	; 0x56
 8008de8:	f7f8 ff88 	bl	8001cfc <HAL_NVIC_EnableIRQ>
}
 8008dec:	bf00      	nop
 8008dee:	3748      	adds	r7, #72	; 0x48
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40015400 	.word	0x40015400
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40021800 	.word	0x40021800
 8008e00:	40020400 	.word	0x40020400

08008e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008e0a:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	4a10      	ldr	r2, [pc, #64]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e14:	6413      	str	r3, [r2, #64]	; 0x40
 8008e16:	4b0e      	ldr	r3, [pc, #56]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	607b      	str	r3, [r7, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_MspInit+0x4c>)
 8008e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	210f      	movs	r1, #15
 8008e3e:	f06f 0001 	mvn.w	r0, #1
 8008e42:	f7f8 ff3f 	bl	8001cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40023800 	.word	0x40023800

08008e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08c      	sub	sp, #48	; 0x30
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8008e64:	2200      	movs	r2, #0
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	2032      	movs	r0, #50	; 0x32
 8008e6a:	f7f8 ff2b 	bl	8001cc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8008e6e:	2032      	movs	r0, #50	; 0x32
 8008e70:	f7f8 ff44 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8008e74:	4b1f      	ldr	r3, [pc, #124]	; (8008ef4 <HAL_InitTick+0xa0>)
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <HAL_InitTick+0xa0>)
 8008e7a:	f043 0308 	orr.w	r3, r3, #8
 8008e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8008e80:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <HAL_InitTick+0xa0>)
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008e8c:	f107 0210 	add.w	r2, r7, #16
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fa fb1a 	bl	80034d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008e9c:	f7fa faf0 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <HAL_InitTick+0xa4>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	0c9b      	lsrs	r3, r3, #18
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8008eb4:	4b11      	ldr	r3, [pc, #68]	; (8008efc <HAL_InitTick+0xa8>)
 8008eb6:	4a12      	ldr	r2, [pc, #72]	; (8008f00 <HAL_InitTick+0xac>)
 8008eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8008eba:	4b10      	ldr	r3, [pc, #64]	; (8008efc <HAL_InitTick+0xa8>)
 8008ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ec0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8008ec2:	4a0e      	ldr	r2, [pc, #56]	; (8008efc <HAL_InitTick+0xa8>)
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <HAL_InitTick+0xa8>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ece:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <HAL_InitTick+0xa8>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <HAL_InitTick+0xa8>)
 8008ed6:	f7fb fce1 	bl	800489c <HAL_TIM_Base_Init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8008ee0:	4806      	ldr	r0, [pc, #24]	; (8008efc <HAL_InitTick+0xa8>)
 8008ee2:	f7fb fd07 	bl	80048f4 <HAL_TIM_Base_Start_IT>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	e000      	b.n	8008eec <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3730      	adds	r7, #48	; 0x30
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	431bde83 	.word	0x431bde83
 8008efc:	2000ad2c 	.word	0x2000ad2c
 8008f00:	40000c00 	.word	0x40000c00

08008f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f12:	b480      	push	{r7}
 8008f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f16:	e7fe      	b.n	8008f16 <HardFault_Handler+0x4>

08008f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f1c:	e7fe      	b.n	8008f1c <MemManage_Handler+0x4>

08008f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f22:	e7fe      	b.n	8008f22 <BusFault_Handler+0x4>

08008f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f28:	e7fe      	b.n	8008f28 <UsageFault_Handler+0x4>

08008f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f2e:	bf00      	nop
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7f9 fcb7 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008f4a:	2002      	movs	r0, #2
 8008f4c:	f7f9 fcb0 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008f50:	bf00      	nop
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008f58:	2004      	movs	r0, #4
 8008f5a:	f7f9 fca9 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008f5e:	bf00      	nop
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008f66:	2008      	movs	r0, #8
 8008f68:	f7f9 fca2 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008f6c:	bf00      	nop
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008f74:	2010      	movs	r0, #16
 8008f76:	f7f9 fc9b 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008f7a:	bf00      	nop
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8008f84:	4802      	ldr	r0, [pc, #8]	; (8008f90 <DMA1_Stream0_IRQHandler+0x10>)
 8008f86:	f7f9 f867 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008f8a:	bf00      	nop
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000accc 	.word	0x2000accc

08008f94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <DMA1_Stream1_IRQHandler+0x10>)
 8008f9a:	f7f9 f85d 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000afec 	.word	0x2000afec

08008fa8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008fac:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <DMA1_Stream4_IRQHandler+0x10>)
 8008fae:	f7f9 f853 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000b0cc 	.word	0x2000b0cc

08008fbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8008fc0:	4802      	ldr	r0, [pc, #8]	; (8008fcc <DMA1_Stream5_IRQHandler+0x10>)
 8008fc2:	f7f9 f849 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	2000aa84 	.word	0x2000aa84

08008fd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008fd4:	4802      	ldr	r0, [pc, #8]	; (8008fe0 <DMA1_Stream6_IRQHandler+0x10>)
 8008fd6:	f7f9 f83f 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008fda:	bf00      	nop
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	2000a8b0 	.word	0x2000a8b0

08008fe4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008fe8:	4802      	ldr	r0, [pc, #8]	; (8008ff4 <CAN1_RX0_IRQHandler+0x10>)
 8008fea:	f7f8 fb94 	bl	8001716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	200027d8 	.word	0x200027d8

08008ff8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008ffc:	4802      	ldr	r0, [pc, #8]	; (8009008 <CAN1_RX1_IRQHandler+0x10>)
 8008ffe:	f7f8 fb8a 	bl	8001716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200027d8 	.word	0x200027d8

0800900c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8009010:	2020      	movs	r0, #32
 8009012:	f7f9 fc4d 	bl	80028b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009020:	4803      	ldr	r0, [pc, #12]	; (8009030 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8009022:	f7fb fd01 	bl	8004a28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8009026:	4803      	ldr	r0, [pc, #12]	; (8009034 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8009028:	f7fb fcfe 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800902c:	bf00      	nop
 800902e:	bd80      	pop	{r7, pc}
 8009030:	2000aeac 	.word	0x2000aeac
 8009034:	2000adec 	.word	0x2000adec

08009038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800903c:	4802      	ldr	r0, [pc, #8]	; (8009048 <USART1_IRQHandler+0x10>)
 800903e:	f7fc fe43 	bl	8005cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009042:	bf00      	nop
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000b1ec 	.word	0x2000b1ec

0800904c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	myUsartIntIRQ(&huart2);
 8009050:	4803      	ldr	r0, [pc, #12]	; (8009060 <USART2_IRQHandler+0x14>)
 8009052:	f004 f8c1 	bl	800d1d8 <myUsartIntIRQ>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009056:	4802      	ldr	r0, [pc, #8]	; (8009060 <USART2_IRQHandler+0x14>)
 8009058:	f7fc fe36 	bl	8005cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800905c:	bf00      	nop
 800905e:	bd80      	pop	{r7, pc}
 8009060:	2000b26c 	.word	0x2000b26c

08009064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	myUsartDMAIdleIRQ(&huart3);
 8009068:	4803      	ldr	r0, [pc, #12]	; (8009078 <USART3_IRQHandler+0x14>)
 800906a:	f004 f883 	bl	800d174 <myUsartDMAIdleIRQ>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800906e:	4802      	ldr	r0, [pc, #8]	; (8009078 <USART3_IRQHandler+0x14>)
 8009070:	f7fc fe2a 	bl	8005cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009074:	bf00      	nop
 8009076:	bd80      	pop	{r7, pc}
 8009078:	2000b04c 	.word	0x2000b04c

0800907c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009080:	4802      	ldr	r0, [pc, #8]	; (800908c <TIM5_IRQHandler+0x10>)
 8009082:	f7fb fcd1 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000ad2c 	.word	0x2000ad2c

08009090 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8009094:	4802      	ldr	r0, [pc, #8]	; (80090a0 <DMA2_Stream0_IRQHandler+0x10>)
 8009096:	f7f8 ffdf 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	2000a95c 	.word	0x2000a95c

080090a4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80090a8:	4802      	ldr	r0, [pc, #8]	; (80090b4 <DMA2_Stream1_IRQHandler+0x10>)
 80090aa:	f7f8 ffd5 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	2000aae4 	.word	0x2000aae4

080090b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80090bc:	4802      	ldr	r0, [pc, #8]	; (80090c8 <DMA2_Stream2_IRQHandler+0x10>)
 80090be:	f7f8 ffcb 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80090c2:	bf00      	nop
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	2000ac0c 	.word	0x2000ac0c

080090cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80090d0:	4802      	ldr	r0, [pc, #8]	; (80090dc <DMA2_Stream3_IRQHandler+0x10>)
 80090d2:	f7f8 ffc1 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	2000ac6c 	.word	0x2000ac6c

080090e0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80090e4:	4802      	ldr	r0, [pc, #8]	; (80090f0 <DMA2_Stream4_IRQHandler+0x10>)
 80090e6:	f7f8 ffb7 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20002778 	.word	0x20002778

080090f4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80090f8:	4802      	ldr	r0, [pc, #8]	; (8009104 <DMA2_Stream5_IRQHandler+0x10>)
 80090fa:	f7f8 ffad 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2000b18c 	.word	0x2000b18c

08009108 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800910c:	4802      	ldr	r0, [pc, #8]	; (8009118 <DMA2_Stream7_IRQHandler+0x10>)
 800910e:	f7f8 ffa3 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	2000b12c 	.word	0x2000b12c

0800911c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8009120:	4802      	ldr	r0, [pc, #8]	; (800912c <SPI6_IRQHandler+0x10>)
 8009122:	f7fb f84b 	bl	80041bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2000a9bc 	.word	0x2000a9bc

08009130 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8009134:	f7fd fcd2 	bl	8006adc <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009138:	bf00      	nop
 800913a:	bd80      	pop	{r7, pc}

0800913c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009140:	4b15      	ldr	r3, [pc, #84]	; (8009198 <SystemInit+0x5c>)
 8009142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009146:	4a14      	ldr	r2, [pc, #80]	; (8009198 <SystemInit+0x5c>)
 8009148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800914c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009150:	4b12      	ldr	r3, [pc, #72]	; (800919c <SystemInit+0x60>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a11      	ldr	r2, [pc, #68]	; (800919c <SystemInit+0x60>)
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800915c:	4b0f      	ldr	r3, [pc, #60]	; (800919c <SystemInit+0x60>)
 800915e:	2200      	movs	r2, #0
 8009160:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <SystemInit+0x60>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	490d      	ldr	r1, [pc, #52]	; (800919c <SystemInit+0x60>)
 8009168:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <SystemInit+0x64>)
 800916a:	4013      	ands	r3, r2
 800916c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800916e:	4b0b      	ldr	r3, [pc, #44]	; (800919c <SystemInit+0x60>)
 8009170:	4a0c      	ldr	r2, [pc, #48]	; (80091a4 <SystemInit+0x68>)
 8009172:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <SystemInit+0x60>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a08      	ldr	r2, [pc, #32]	; (800919c <SystemInit+0x60>)
 800917a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <SystemInit+0x60>)
 8009182:	2200      	movs	r2, #0
 8009184:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <SystemInit+0x5c>)
 8009188:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800918c:	609a      	str	r2, [r3, #8]
#endif
}
 800918e:	bf00      	nop
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	e000ed00 	.word	0xe000ed00
 800919c:	40023800 	.word	0x40023800
 80091a0:	fef6ffff 	.word	0xfef6ffff
 80091a4:	24003010 	.word	0x24003010

080091a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b09a      	sub	sp, #104	; 0x68
 80091ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	605a      	str	r2, [r3, #4]
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	609a      	str	r2, [r3, #8]
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	611a      	str	r2, [r3, #16]
 80091d8:	615a      	str	r2, [r3, #20]
 80091da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	222c      	movs	r2, #44	; 0x2c
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f007 fc49 	bl	8010a7a <memset>

  htim1.Instance = TIM1;
 80091e8:	4b4a      	ldr	r3, [pc, #296]	; (8009314 <MX_TIM1_Init+0x16c>)
 80091ea:	4a4b      	ldr	r2, [pc, #300]	; (8009318 <MX_TIM1_Init+0x170>)
 80091ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80091ee:	4b49      	ldr	r3, [pc, #292]	; (8009314 <MX_TIM1_Init+0x16c>)
 80091f0:	f245 425f 	movw	r2, #21599	; 0x545f
 80091f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091f6:	4b47      	ldr	r3, [pc, #284]	; (8009314 <MX_TIM1_Init+0x16c>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80091fc:	4b45      	ldr	r3, [pc, #276]	; (8009314 <MX_TIM1_Init+0x16c>)
 80091fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009204:	4b43      	ldr	r3, [pc, #268]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009206:	2200      	movs	r2, #0
 8009208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800920a:	4b42      	ldr	r3, [pc, #264]	; (8009314 <MX_TIM1_Init+0x16c>)
 800920c:	2200      	movs	r2, #0
 800920e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009210:	4b40      	ldr	r3, [pc, #256]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009212:	2200      	movs	r2, #0
 8009214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009216:	483f      	ldr	r0, [pc, #252]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009218:	f7fb fb40 	bl	800489c <HAL_TIM_Base_Init>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8009222:	f7ff fa67 	bl	80086f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800922c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009230:	4619      	mov	r1, r3
 8009232:	4838      	ldr	r0, [pc, #224]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009234:	f7fb fe30 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800923e:	f7ff fa59 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009242:	4834      	ldr	r0, [pc, #208]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009244:	f7fb fb80 	bl	8004948 <HAL_TIM_PWM_Init>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800924e:	f7ff fa51 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009252:	2300      	movs	r3, #0
 8009254:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009256:	2300      	movs	r3, #0
 8009258:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800925a:	2300      	movs	r3, #0
 800925c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800925e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009262:	4619      	mov	r1, r3
 8009264:	482b      	ldr	r0, [pc, #172]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009266:	f7fc fab7 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8009270:	f7ff fa40 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009274:	2360      	movs	r3, #96	; 0x60
 8009276:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800927c:	2300      	movs	r3, #0
 800927e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009280:	2300      	movs	r3, #0
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009284:	2300      	movs	r3, #0
 8009286:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009288:	2300      	movs	r3, #0
 800928a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800928c:	2300      	movs	r3, #0
 800928e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009294:	2200      	movs	r2, #0
 8009296:	4619      	mov	r1, r3
 8009298:	481e      	ldr	r0, [pc, #120]	; (8009314 <MX_TIM1_Init+0x16c>)
 800929a:	f7fb fce5 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80092a4:	f7ff fa26 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80092a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092ac:	2204      	movs	r2, #4
 80092ae:	4619      	mov	r1, r3
 80092b0:	4818      	ldr	r0, [pc, #96]	; (8009314 <MX_TIM1_Init+0x16c>)
 80092b2:	f7fb fcd9 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80092bc:	f7ff fa1a 	bl	80086f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80092d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80092de:	2300      	movs	r3, #0
 80092e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80092e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80092f0:	1d3b      	adds	r3, r7, #4
 80092f2:	4619      	mov	r1, r3
 80092f4:	4807      	ldr	r0, [pc, #28]	; (8009314 <MX_TIM1_Init+0x16c>)
 80092f6:	f7fc fafd 	bl	80058f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009300:	f7ff f9f8 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009304:	4803      	ldr	r0, [pc, #12]	; (8009314 <MX_TIM1_Init+0x16c>)
 8009306:	f000 fcc3 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 800930a:	bf00      	nop
 800930c:	3768      	adds	r7, #104	; 0x68
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000aeac 	.word	0x2000aeac
 8009318:	40010000 	.word	0x40010000

0800931c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	; 0x38
 8009320:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	605a      	str	r2, [r3, #4]
 800932c:	609a      	str	r2, [r3, #8]
 800932e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009330:	f107 031c 	add.w	r3, r7, #28
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800933c:	463b      	mov	r3, r7
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	605a      	str	r2, [r3, #4]
 8009344:	609a      	str	r2, [r3, #8]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	615a      	str	r2, [r3, #20]
 800934c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800934e:	4b39      	ldr	r3, [pc, #228]	; (8009434 <MX_TIM2_Init+0x118>)
 8009350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8009356:	4b37      	ldr	r3, [pc, #220]	; (8009434 <MX_TIM2_Init+0x118>)
 8009358:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800935c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800935e:	4b35      	ldr	r3, [pc, #212]	; (8009434 <MX_TIM2_Init+0x118>)
 8009360:	2200      	movs	r2, #0
 8009362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009364:	4b33      	ldr	r3, [pc, #204]	; (8009434 <MX_TIM2_Init+0x118>)
 8009366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800936a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800936c:	4b31      	ldr	r3, [pc, #196]	; (8009434 <MX_TIM2_Init+0x118>)
 800936e:	2200      	movs	r2, #0
 8009370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009372:	4b30      	ldr	r3, [pc, #192]	; (8009434 <MX_TIM2_Init+0x118>)
 8009374:	2200      	movs	r2, #0
 8009376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009378:	482e      	ldr	r0, [pc, #184]	; (8009434 <MX_TIM2_Init+0x118>)
 800937a:	f7fb fa8f 	bl	800489c <HAL_TIM_Base_Init>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009384:	f7ff f9b6 	bl	80086f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800938c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800938e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009392:	4619      	mov	r1, r3
 8009394:	4827      	ldr	r0, [pc, #156]	; (8009434 <MX_TIM2_Init+0x118>)
 8009396:	f7fb fd7f 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80093a0:	f7ff f9a8 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80093a4:	4823      	ldr	r0, [pc, #140]	; (8009434 <MX_TIM2_Init+0x118>)
 80093a6:	f7fb facf 	bl	8004948 <HAL_TIM_PWM_Init>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80093b0:	f7ff f9a0 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80093bc:	f107 031c 	add.w	r3, r7, #28
 80093c0:	4619      	mov	r1, r3
 80093c2:	481c      	ldr	r0, [pc, #112]	; (8009434 <MX_TIM2_Init+0x118>)
 80093c4:	f7fc fa08 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80093ce:	f7ff f991 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093d2:	2360      	movs	r3, #96	; 0x60
 80093d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093da:	2300      	movs	r3, #0
 80093dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093de:	2300      	movs	r3, #0
 80093e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80093e2:	463b      	mov	r3, r7
 80093e4:	2200      	movs	r2, #0
 80093e6:	4619      	mov	r1, r3
 80093e8:	4812      	ldr	r0, [pc, #72]	; (8009434 <MX_TIM2_Init+0x118>)
 80093ea:	f7fb fc3d 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80093f4:	f7ff f97e 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80093f8:	463b      	mov	r3, r7
 80093fa:	2208      	movs	r2, #8
 80093fc:	4619      	mov	r1, r3
 80093fe:	480d      	ldr	r0, [pc, #52]	; (8009434 <MX_TIM2_Init+0x118>)
 8009400:	f7fb fc32 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800940a:	f7ff f973 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800940e:	463b      	mov	r3, r7
 8009410:	220c      	movs	r2, #12
 8009412:	4619      	mov	r1, r3
 8009414:	4807      	ldr	r0, [pc, #28]	; (8009434 <MX_TIM2_Init+0x118>)
 8009416:	f7fb fc27 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009420:	f7ff f968 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009424:	4803      	ldr	r0, [pc, #12]	; (8009434 <MX_TIM2_Init+0x118>)
 8009426:	f000 fc33 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 800942a:	bf00      	nop
 800942c:	3738      	adds	r7, #56	; 0x38
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	2000af2c 	.word	0x2000af2c

08009438 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800943e:	f107 031c 	add.w	r3, r7, #28
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800944a:	463b      	mov	r3, r7
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
 8009458:	615a      	str	r2, [r3, #20]
 800945a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800945c:	4b32      	ldr	r3, [pc, #200]	; (8009528 <MX_TIM3_Init+0xf0>)
 800945e:	4a33      	ldr	r2, [pc, #204]	; (800952c <MX_TIM3_Init+0xf4>)
 8009460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8009462:	4b31      	ldr	r3, [pc, #196]	; (8009528 <MX_TIM3_Init+0xf0>)
 8009464:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800946a:	4b2f      	ldr	r3, [pc, #188]	; (8009528 <MX_TIM3_Init+0xf0>)
 800946c:	2200      	movs	r2, #0
 800946e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009470:	4b2d      	ldr	r3, [pc, #180]	; (8009528 <MX_TIM3_Init+0xf0>)
 8009472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009478:	4b2b      	ldr	r3, [pc, #172]	; (8009528 <MX_TIM3_Init+0xf0>)
 800947a:	2200      	movs	r2, #0
 800947c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800947e:	4b2a      	ldr	r3, [pc, #168]	; (8009528 <MX_TIM3_Init+0xf0>)
 8009480:	2200      	movs	r2, #0
 8009482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009484:	4828      	ldr	r0, [pc, #160]	; (8009528 <MX_TIM3_Init+0xf0>)
 8009486:	f7fb fa5f 	bl	8004948 <HAL_TIM_PWM_Init>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009490:	f7ff f930 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009498:	2300      	movs	r3, #0
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800949c:	f107 031c 	add.w	r3, r7, #28
 80094a0:	4619      	mov	r1, r3
 80094a2:	4821      	ldr	r0, [pc, #132]	; (8009528 <MX_TIM3_Init+0xf0>)
 80094a4:	f7fc f998 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80094ae:	f7ff f921 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094b2:	2360      	movs	r3, #96	; 0x60
 80094b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094c2:	463b      	mov	r3, r7
 80094c4:	2200      	movs	r2, #0
 80094c6:	4619      	mov	r1, r3
 80094c8:	4817      	ldr	r0, [pc, #92]	; (8009528 <MX_TIM3_Init+0xf0>)
 80094ca:	f7fb fbcd 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80094d4:	f7ff f90e 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80094d8:	463b      	mov	r3, r7
 80094da:	2204      	movs	r2, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4812      	ldr	r0, [pc, #72]	; (8009528 <MX_TIM3_Init+0xf0>)
 80094e0:	f7fb fbc2 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80094ea:	f7ff f903 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80094ee:	463b      	mov	r3, r7
 80094f0:	2208      	movs	r2, #8
 80094f2:	4619      	mov	r1, r3
 80094f4:	480c      	ldr	r0, [pc, #48]	; (8009528 <MX_TIM3_Init+0xf0>)
 80094f6:	f7fb fbb7 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009500:	f7ff f8f8 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009504:	463b      	mov	r3, r7
 8009506:	220c      	movs	r2, #12
 8009508:	4619      	mov	r1, r3
 800950a:	4807      	ldr	r0, [pc, #28]	; (8009528 <MX_TIM3_Init+0xf0>)
 800950c:	f7fb fbac 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009516:	f7ff f8ed 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800951a:	4803      	ldr	r0, [pc, #12]	; (8009528 <MX_TIM3_Init+0xf0>)
 800951c:	f000 fbb8 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 8009520:	bf00      	nop
 8009522:	3728      	adds	r7, #40	; 0x28
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	2000ae2c 	.word	0x2000ae2c
 800952c:	40000400 	.word	0x40000400

08009530 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08a      	sub	sp, #40	; 0x28
 8009534:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009536:	f107 031c 	add.w	r3, r7, #28
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	605a      	str	r2, [r3, #4]
 8009540:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009542:	463b      	mov	r3, r7
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	605a      	str	r2, [r3, #4]
 800954a:	609a      	str	r2, [r3, #8]
 800954c:	60da      	str	r2, [r3, #12]
 800954e:	611a      	str	r2, [r3, #16]
 8009550:	615a      	str	r2, [r3, #20]
 8009552:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009554:	4b32      	ldr	r3, [pc, #200]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009556:	4a33      	ldr	r2, [pc, #204]	; (8009624 <MX_TIM4_Init+0xf4>)
 8009558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 800955a:	4b31      	ldr	r3, [pc, #196]	; (8009620 <MX_TIM4_Init+0xf0>)
 800955c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009560:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009564:	2200      	movs	r2, #0
 8009566:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009568:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <MX_TIM4_Init+0xf0>)
 800956a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800956e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009570:	4b2b      	ldr	r3, [pc, #172]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009572:	2200      	movs	r2, #0
 8009574:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009576:	4b2a      	ldr	r3, [pc, #168]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009578:	2200      	movs	r2, #0
 800957a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800957c:	4828      	ldr	r0, [pc, #160]	; (8009620 <MX_TIM4_Init+0xf0>)
 800957e:	f7fb f9e3 	bl	8004948 <HAL_TIM_PWM_Init>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009588:	f7ff f8b4 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800958c:	2300      	movs	r3, #0
 800958e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009590:	2300      	movs	r3, #0
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009594:	f107 031c 	add.w	r3, r7, #28
 8009598:	4619      	mov	r1, r3
 800959a:	4821      	ldr	r0, [pc, #132]	; (8009620 <MX_TIM4_Init+0xf0>)
 800959c:	f7fc f91c 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80095a6:	f7ff f8a5 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095aa:	2360      	movs	r3, #96	; 0x60
 80095ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095ba:	463b      	mov	r3, r7
 80095bc:	2200      	movs	r2, #0
 80095be:	4619      	mov	r1, r3
 80095c0:	4817      	ldr	r0, [pc, #92]	; (8009620 <MX_TIM4_Init+0xf0>)
 80095c2:	f7fb fb51 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80095cc:	f7ff f892 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80095d0:	463b      	mov	r3, r7
 80095d2:	2204      	movs	r2, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	4812      	ldr	r0, [pc, #72]	; (8009620 <MX_TIM4_Init+0xf0>)
 80095d8:	f7fb fb46 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80095e2:	f7ff f887 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80095e6:	463b      	mov	r3, r7
 80095e8:	2208      	movs	r2, #8
 80095ea:	4619      	mov	r1, r3
 80095ec:	480c      	ldr	r0, [pc, #48]	; (8009620 <MX_TIM4_Init+0xf0>)
 80095ee:	f7fb fb3b 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80095f8:	f7ff f87c 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80095fc:	463b      	mov	r3, r7
 80095fe:	220c      	movs	r2, #12
 8009600:	4619      	mov	r1, r3
 8009602:	4807      	ldr	r0, [pc, #28]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009604:	f7fb fb30 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800960e:	f7ff f871 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <MX_TIM4_Init+0xf0>)
 8009614:	f000 fb3c 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 8009618:	bf00      	nop
 800961a:	3728      	adds	r7, #40	; 0x28
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000adac 	.word	0x2000adac
 8009624:	40000800 	.word	0x40000800

08009628 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800962e:	1d3b      	adds	r3, r7, #4
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009638:	4b14      	ldr	r3, [pc, #80]	; (800968c <MX_TIM7_Init+0x64>)
 800963a:	4a15      	ldr	r2, [pc, #84]	; (8009690 <MX_TIM7_Init+0x68>)
 800963c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <MX_TIM7_Init+0x64>)
 8009640:	2200      	movs	r2, #0
 8009642:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009644:	4b11      	ldr	r3, [pc, #68]	; (800968c <MX_TIM7_Init+0x64>)
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800964a:	4b10      	ldr	r3, [pc, #64]	; (800968c <MX_TIM7_Init+0x64>)
 800964c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009650:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009652:	4b0e      	ldr	r3, [pc, #56]	; (800968c <MX_TIM7_Init+0x64>)
 8009654:	2200      	movs	r2, #0
 8009656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009658:	480c      	ldr	r0, [pc, #48]	; (800968c <MX_TIM7_Init+0x64>)
 800965a:	f7fb f91f 	bl	800489c <HAL_TIM_Base_Init>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009664:	f7ff f846 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009668:	2300      	movs	r3, #0
 800966a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009670:	1d3b      	adds	r3, r7, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4805      	ldr	r0, [pc, #20]	; (800968c <MX_TIM7_Init+0x64>)
 8009676:	f7fc f8af 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009680:	f7ff f838 	bl	80086f4 <Error_Handler>
  }

}
 8009684:	bf00      	nop
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	2000afac 	.word	0x2000afac
 8009690:	40001400 	.word	0x40001400

08009694 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b09a      	sub	sp, #104	; 0x68
 8009698:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800969a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	605a      	str	r2, [r3, #4]
 80096a4:	609a      	str	r2, [r3, #8]
 80096a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	605a      	str	r2, [r3, #4]
 80096b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80096b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	611a      	str	r2, [r3, #16]
 80096c4:	615a      	str	r2, [r3, #20]
 80096c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	222c      	movs	r2, #44	; 0x2c
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f007 f9d3 	bl	8010a7a <memset>

  htim8.Instance = TIM8;
 80096d4:	4b4a      	ldr	r3, [pc, #296]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096d6:	4a4b      	ldr	r2, [pc, #300]	; (8009804 <MX_TIM8_Init+0x170>)
 80096d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 80096da:	4b49      	ldr	r3, [pc, #292]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096dc:	f245 425f 	movw	r2, #21599	; 0x545f
 80096e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096e2:	4b47      	ldr	r3, [pc, #284]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80096e8:	4b45      	ldr	r3, [pc, #276]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80096ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096f0:	4b43      	ldr	r3, [pc, #268]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80096f6:	4b42      	ldr	r3, [pc, #264]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096fc:	4b40      	ldr	r3, [pc, #256]	; (8009800 <MX_TIM8_Init+0x16c>)
 80096fe:	2200      	movs	r2, #0
 8009700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009702:	483f      	ldr	r0, [pc, #252]	; (8009800 <MX_TIM8_Init+0x16c>)
 8009704:	f7fb f8ca 	bl	800489c <HAL_TIM_Base_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800970e:	f7fe fff1 	bl	80086f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009716:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009718:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800971c:	4619      	mov	r1, r3
 800971e:	4838      	ldr	r0, [pc, #224]	; (8009800 <MX_TIM8_Init+0x16c>)
 8009720:	f7fb fbba 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800972a:	f7fe ffe3 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800972e:	4834      	ldr	r0, [pc, #208]	; (8009800 <MX_TIM8_Init+0x16c>)
 8009730:	f7fb f90a 	bl	8004948 <HAL_TIM_PWM_Init>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800973a:	f7fe ffdb 	bl	80086f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800973e:	2300      	movs	r3, #0
 8009740:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009742:	2300      	movs	r3, #0
 8009744:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009746:	2300      	movs	r3, #0
 8009748:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800974a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800974e:	4619      	mov	r1, r3
 8009750:	482b      	ldr	r0, [pc, #172]	; (8009800 <MX_TIM8_Init+0x16c>)
 8009752:	f7fc f841 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800975c:	f7fe ffca 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009760:	2360      	movs	r3, #96	; 0x60
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009768:	2300      	movs	r3, #0
 800976a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009770:	2300      	movs	r3, #0
 8009772:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009774:	2300      	movs	r3, #0
 8009776:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009778:	2300      	movs	r3, #0
 800977a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800977c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009780:	2200      	movs	r2, #0
 8009782:	4619      	mov	r1, r3
 8009784:	481e      	ldr	r0, [pc, #120]	; (8009800 <MX_TIM8_Init+0x16c>)
 8009786:	f7fb fa6f 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009790:	f7fe ffb0 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009798:	2204      	movs	r2, #4
 800979a:	4619      	mov	r1, r3
 800979c:	4818      	ldr	r0, [pc, #96]	; (8009800 <MX_TIM8_Init+0x16c>)
 800979e:	f7fb fa63 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80097a8:	f7fe ffa4 	bl	80086f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80097c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80097ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80097d8:	2300      	movs	r3, #0
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4807      	ldr	r0, [pc, #28]	; (8009800 <MX_TIM8_Init+0x16c>)
 80097e2:	f7fc f887 	bl	80058f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 80097ec:	f7fe ff82 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80097f0:	4803      	ldr	r0, [pc, #12]	; (8009800 <MX_TIM8_Init+0x16c>)
 80097f2:	f000 fa4d 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 80097f6:	bf00      	nop
 80097f8:	3768      	adds	r7, #104	; 0x68
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000ad6c 	.word	0x2000ad6c
 8009804:	40010400 	.word	0x40010400

08009808 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08c      	sub	sp, #48	; 0x30
 800980c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800980e:	f107 0320 	add.w	r3, r7, #32
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	605a      	str	r2, [r3, #4]
 8009818:	609a      	str	r2, [r3, #8]
 800981a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	605a      	str	r2, [r3, #4]
 8009824:	609a      	str	r2, [r3, #8]
 8009826:	60da      	str	r2, [r3, #12]
 8009828:	611a      	str	r2, [r3, #16]
 800982a:	615a      	str	r2, [r3, #20]
 800982c:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 800982e:	4b2b      	ldr	r3, [pc, #172]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009830:	4a2b      	ldr	r2, [pc, #172]	; (80098e0 <MX_TIM9_Init+0xd8>)
 8009832:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 8009834:	4b29      	ldr	r3, [pc, #164]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009836:	f245 425f 	movw	r2, #21599	; 0x545f
 800983a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800983c:	4b27      	ldr	r3, [pc, #156]	; (80098dc <MX_TIM9_Init+0xd4>)
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8009842:	4b26      	ldr	r3, [pc, #152]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009848:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <MX_TIM9_Init+0xd4>)
 800984c:	2200      	movs	r2, #0
 800984e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009850:	4b22      	ldr	r3, [pc, #136]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009852:	2200      	movs	r2, #0
 8009854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009856:	4821      	ldr	r0, [pc, #132]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009858:	f7fb f820 	bl	800489c <HAL_TIM_Base_Init>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009862:	f7fe ff47 	bl	80086f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800986a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800986c:	f107 0320 	add.w	r3, r7, #32
 8009870:	4619      	mov	r1, r3
 8009872:	481a      	ldr	r0, [pc, #104]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009874:	f7fb fb10 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800987e:	f7fe ff39 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009882:	4816      	ldr	r0, [pc, #88]	; (80098dc <MX_TIM9_Init+0xd4>)
 8009884:	f7fb f860 	bl	8004948 <HAL_TIM_PWM_Init>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800988e:	f7fe ff31 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009892:	2360      	movs	r3, #96	; 0x60
 8009894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098a2:	1d3b      	adds	r3, r7, #4
 80098a4:	2200      	movs	r2, #0
 80098a6:	4619      	mov	r1, r3
 80098a8:	480c      	ldr	r0, [pc, #48]	; (80098dc <MX_TIM9_Init+0xd4>)
 80098aa:	f7fb f9dd 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80098b4:	f7fe ff1e 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80098b8:	1d3b      	adds	r3, r7, #4
 80098ba:	2204      	movs	r2, #4
 80098bc:	4619      	mov	r1, r3
 80098be:	4807      	ldr	r0, [pc, #28]	; (80098dc <MX_TIM9_Init+0xd4>)
 80098c0:	f7fb f9d2 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80098ca:	f7fe ff13 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 80098ce:	4803      	ldr	r0, [pc, #12]	; (80098dc <MX_TIM9_Init+0xd4>)
 80098d0:	f000 f9de 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 80098d4:	bf00      	nop
 80098d6:	3730      	adds	r7, #48	; 0x30
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	2000aeec 	.word	0x2000aeec
 80098e0:	40014000 	.word	0x40014000

080098e4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098ea:	1d3b      	adds	r3, r7, #4
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	611a      	str	r2, [r3, #16]
 80098f8:	615a      	str	r2, [r3, #20]
 80098fa:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 80098fc:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <MX_TIM10_Init+0x94>)
 80098fe:	4a1f      	ldr	r2, [pc, #124]	; (800997c <MX_TIM10_Init+0x98>)
 8009900:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <MX_TIM10_Init+0x94>)
 8009904:	f245 425f 	movw	r2, #21599	; 0x545f
 8009908:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800990a:	4b1b      	ldr	r3, [pc, #108]	; (8009978 <MX_TIM10_Init+0x94>)
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009910:	4b19      	ldr	r3, [pc, #100]	; (8009978 <MX_TIM10_Init+0x94>)
 8009912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009916:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009918:	4b17      	ldr	r3, [pc, #92]	; (8009978 <MX_TIM10_Init+0x94>)
 800991a:	2200      	movs	r2, #0
 800991c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <MX_TIM10_Init+0x94>)
 8009920:	2200      	movs	r2, #0
 8009922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009924:	4814      	ldr	r0, [pc, #80]	; (8009978 <MX_TIM10_Init+0x94>)
 8009926:	f7fa ffb9 	bl	800489c <HAL_TIM_Base_Init>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8009930:	f7fe fee0 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009934:	4810      	ldr	r0, [pc, #64]	; (8009978 <MX_TIM10_Init+0x94>)
 8009936:	f7fb f807 	bl	8004948 <HAL_TIM_PWM_Init>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8009940:	f7fe fed8 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009944:	2360      	movs	r3, #96	; 0x60
 8009946:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009954:	1d3b      	adds	r3, r7, #4
 8009956:	2200      	movs	r2, #0
 8009958:	4619      	mov	r1, r3
 800995a:	4807      	ldr	r0, [pc, #28]	; (8009978 <MX_TIM10_Init+0x94>)
 800995c:	f7fb f984 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8009966:	f7fe fec5 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800996a:	4803      	ldr	r0, [pc, #12]	; (8009978 <MX_TIM10_Init+0x94>)
 800996c:	f000 f990 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 8009970:	bf00      	nop
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	2000adec 	.word	0x2000adec
 800997c:	40014400 	.word	0x40014400

08009980 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	609a      	str	r2, [r3, #8]
 8009990:	60da      	str	r2, [r3, #12]
 8009992:	611a      	str	r2, [r3, #16]
 8009994:	615a      	str	r2, [r3, #20]
 8009996:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8009998:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <MX_TIM11_Init+0x94>)
 800999a:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <MX_TIM11_Init+0x98>)
 800999c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099a0:	f245 425f 	movw	r2, #21599	; 0x545f
 80099a4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099a6:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80099ac:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099b2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099b4:	4b17      	ldr	r3, [pc, #92]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099ba:	4b16      	ldr	r3, [pc, #88]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099bc:	2200      	movs	r2, #0
 80099be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80099c0:	4814      	ldr	r0, [pc, #80]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099c2:	f7fa ff6b 	bl	800489c <HAL_TIM_Base_Init>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80099cc:	f7fe fe92 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80099d0:	4810      	ldr	r0, [pc, #64]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099d2:	f7fa ffb9 	bl	8004948 <HAL_TIM_PWM_Init>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80099dc:	f7fe fe8a 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80099e0:	2360      	movs	r3, #96	; 0x60
 80099e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099f0:	1d3b      	adds	r3, r7, #4
 80099f2:	2200      	movs	r2, #0
 80099f4:	4619      	mov	r1, r3
 80099f6:	4807      	ldr	r0, [pc, #28]	; (8009a14 <MX_TIM11_Init+0x94>)
 80099f8:	f7fb f936 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8009a02:	f7fe fe77 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8009a06:	4803      	ldr	r0, [pc, #12]	; (8009a14 <MX_TIM11_Init+0x94>)
 8009a08:	f000 f942 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 8009a0c:	bf00      	nop
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	2000ae6c 	.word	0x2000ae6c
 8009a18:	40014800 	.word	0x40014800

08009a1c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a22:	1d3b      	adds	r3, r7, #4
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	605a      	str	r2, [r3, #4]
 8009a2a:	609a      	str	r2, [r3, #8]
 8009a2c:	60da      	str	r2, [r3, #12]
 8009a2e:	611a      	str	r2, [r3, #16]
 8009a30:	615a      	str	r2, [r3, #20]
 8009a32:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8009a34:	4b1e      	ldr	r3, [pc, #120]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a36:	4a1f      	ldr	r2, [pc, #124]	; (8009ab4 <MX_TIM14_Init+0x98>)
 8009a38:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 8009a3a:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a3c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009a40:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a42:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8009a48:	4b19      	ldr	r3, [pc, #100]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a4e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a50:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a56:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009a5c:	4814      	ldr	r0, [pc, #80]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a5e:	f7fa ff1d 	bl	800489c <HAL_TIM_Base_Init>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8009a68:	f7fe fe44 	bl	80086f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009a6c:	4810      	ldr	r0, [pc, #64]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a6e:	f7fa ff6b 	bl	8004948 <HAL_TIM_PWM_Init>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8009a78:	f7fe fe3c 	bl	80086f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a7c:	2360      	movs	r3, #96	; 0x60
 8009a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a8c:	1d3b      	adds	r3, r7, #4
 8009a8e:	2200      	movs	r2, #0
 8009a90:	4619      	mov	r1, r3
 8009a92:	4807      	ldr	r0, [pc, #28]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009a94:	f7fb f8e8 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8009a9e:	f7fe fe29 	bl	80086f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8009aa2:	4803      	ldr	r0, [pc, #12]	; (8009ab0 <MX_TIM14_Init+0x94>)
 8009aa4:	f000 f8f4 	bl	8009c90 <HAL_TIM_MspPostInit>

}
 8009aa8:	bf00      	nop
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	2000af6c 	.word	0x2000af6c
 8009ab4:	40002000 	.word	0x40002000

08009ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a50      	ldr	r2, [pc, #320]	; (8009c08 <HAL_TIM_Base_MspInit+0x150>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d114      	bne.n	8009af4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009aca:	4b50      	ldr	r3, [pc, #320]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ace:	4a4f      	ldr	r2, [pc, #316]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009ad0:	f043 0301 	orr.w	r3, r3, #1
 8009ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad6:	4b4d      	ldr	r3, [pc, #308]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2105      	movs	r1, #5
 8009ae6:	2019      	movs	r0, #25
 8009ae8:	f7f8 f8ec 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009aec:	2019      	movs	r0, #25
 8009aee:	f7f8 f905 	bl	8001cfc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009af2:	e084      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afc:	d10c      	bne.n	8009b18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009afe:	4b43      	ldr	r3, [pc, #268]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	4a42      	ldr	r2, [pc, #264]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b04:	f043 0301 	orr.w	r3, r3, #1
 8009b08:	6413      	str	r3, [r2, #64]	; 0x40
 8009b0a:	4b40      	ldr	r3, [pc, #256]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	623b      	str	r3, [r7, #32]
 8009b14:	6a3b      	ldr	r3, [r7, #32]
}
 8009b16:	e072      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a3c      	ldr	r2, [pc, #240]	; (8009c10 <HAL_TIM_Base_MspInit+0x158>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d10c      	bne.n	8009b3c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009b22:	4b3a      	ldr	r3, [pc, #232]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	4a39      	ldr	r2, [pc, #228]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b2e:	4b37      	ldr	r3, [pc, #220]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	69fb      	ldr	r3, [r7, #28]
}
 8009b3a:	e060      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a34      	ldr	r2, [pc, #208]	; (8009c14 <HAL_TIM_Base_MspInit+0x15c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d10c      	bne.n	8009b60 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009b46:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	4a30      	ldr	r2, [pc, #192]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b4c:	f043 0302 	orr.w	r3, r3, #2
 8009b50:	6453      	str	r3, [r2, #68]	; 0x44
 8009b52:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	61bb      	str	r3, [r7, #24]
 8009b5c:	69bb      	ldr	r3, [r7, #24]
}
 8009b5e:	e04e      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a2c      	ldr	r2, [pc, #176]	; (8009c18 <HAL_TIM_Base_MspInit+0x160>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d10c      	bne.n	8009b84 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009b6a:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	4a27      	ldr	r2, [pc, #156]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b74:	6453      	str	r3, [r2, #68]	; 0x44
 8009b76:	4b25      	ldr	r3, [pc, #148]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697b      	ldr	r3, [r7, #20]
}
 8009b82:	e03c      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a24      	ldr	r2, [pc, #144]	; (8009c1c <HAL_TIM_Base_MspInit+0x164>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d114      	bne.n	8009bb8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009b8e:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	4a1e      	ldr	r2, [pc, #120]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b98:	6453      	str	r3, [r2, #68]	; 0x44
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2105      	movs	r1, #5
 8009baa:	2019      	movs	r0, #25
 8009bac:	f7f8 f88a 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009bb0:	2019      	movs	r0, #25
 8009bb2:	f7f8 f8a3 	bl	8001cfc <HAL_NVIC_EnableIRQ>
}
 8009bb6:	e022      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <HAL_TIM_Base_MspInit+0x168>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d10c      	bne.n	8009bdc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	4a11      	ldr	r2, [pc, #68]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
}
 8009bda:	e010      	b.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a10      	ldr	r2, [pc, #64]	; (8009c24 <HAL_TIM_Base_MspInit+0x16c>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d10b      	bne.n	8009bfe <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8009bf2:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <HAL_TIM_Base_MspInit+0x154>)
 8009bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bfa:	60bb      	str	r3, [r7, #8]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
}
 8009bfe:	bf00      	nop
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	40010000 	.word	0x40010000
 8009c0c:	40023800 	.word	0x40023800
 8009c10:	40001400 	.word	0x40001400
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800
 8009c24:	40002000 	.word	0x40002000

08009c28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a13      	ldr	r2, [pc, #76]	; (8009c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d10c      	bne.n	8009c54 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009c3a:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	4a12      	ldr	r2, [pc, #72]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c40:	f043 0302 	orr.w	r3, r3, #2
 8009c44:	6413      	str	r3, [r2, #64]	; 0x40
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009c52:	e010      	b.n	8009c76 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <HAL_TIM_PWM_MspInit+0x64>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d10b      	bne.n	8009c76 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	4a09      	ldr	r2, [pc, #36]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c64:	f043 0304 	orr.w	r3, r3, #4
 8009c68:	6413      	str	r3, [r2, #64]	; 0x40
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <HAL_TIM_PWM_MspInit+0x60>)
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	68bb      	ldr	r3, [r7, #8]
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	40000400 	.word	0x40000400
 8009c88:	40023800 	.word	0x40023800
 8009c8c:	40000800 	.word	0x40000800

08009c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b092      	sub	sp, #72	; 0x48
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	609a      	str	r2, [r3, #8]
 8009ca4:	60da      	str	r2, [r3, #12]
 8009ca6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4aa5      	ldr	r2, [pc, #660]	; (8009f44 <HAL_TIM_MspPostInit+0x2b4>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d11d      	bne.n	8009cee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009cb2:	4ba5      	ldr	r3, [pc, #660]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	4aa4      	ldr	r2, [pc, #656]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009cb8:	f043 0310 	orr.w	r3, r3, #16
 8009cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009cbe:	4ba2      	ldr	r3, [pc, #648]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 8009cca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009cce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4899      	ldr	r0, [pc, #612]	; (8009f4c <HAL_TIM_MspPostInit+0x2bc>)
 8009ce8:	f7f8 fc1e 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8009cec:	e168      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf6:	d13a      	bne.n	8009d6e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009cf8:	4b93      	ldr	r3, [pc, #588]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	4a92      	ldr	r2, [pc, #584]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	6313      	str	r3, [r2, #48]	; 0x30
 8009d04:	4b90      	ldr	r3, [pc, #576]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d10:	4b8d      	ldr	r3, [pc, #564]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d14:	4a8c      	ldr	r2, [pc, #560]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d16:	f043 0301 	orr.w	r3, r3, #1
 8009d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8009d1c:	4b8a      	ldr	r3, [pc, #552]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 8009d28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d36:	2300      	movs	r3, #0
 8009d38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d42:	4619      	mov	r1, r3
 8009d44:	4882      	ldr	r0, [pc, #520]	; (8009f50 <HAL_TIM_MspPostInit+0x2c0>)
 8009d46:	f7f8 fbef 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 8009d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d50:	2302      	movs	r3, #2
 8009d52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d54:	2300      	movs	r3, #0
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8009d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d64:	4619      	mov	r1, r3
 8009d66:	487b      	ldr	r0, [pc, #492]	; (8009f54 <HAL_TIM_MspPostInit+0x2c4>)
 8009d68:	f7f8 fbde 	bl	8002528 <HAL_GPIO_Init>
}
 8009d6c:	e128      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a79      	ldr	r2, [pc, #484]	; (8009f58 <HAL_TIM_MspPostInit+0x2c8>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d139      	bne.n	8009dec <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d78:	4b73      	ldr	r3, [pc, #460]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	4a72      	ldr	r2, [pc, #456]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	6313      	str	r3, [r2, #48]	; 0x30
 8009d84:	4b70      	ldr	r3, [pc, #448]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d90:	4b6d      	ldr	r3, [pc, #436]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d94:	4a6c      	ldr	r2, [pc, #432]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d96:	f043 0302 	orr.w	r3, r3, #2
 8009d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8009d9c:	4b6a      	ldr	r3, [pc, #424]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	623b      	str	r3, [r7, #32]
 8009da6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 8009da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dae:	2302      	movs	r3, #2
 8009db0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009db6:	2300      	movs	r3, #0
 8009db8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4865      	ldr	r0, [pc, #404]	; (8009f5c <HAL_TIM_MspPostInit+0x2cc>)
 8009dc6:	f7f8 fbaf 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 8009dca:	2330      	movs	r3, #48	; 0x30
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009de2:	4619      	mov	r1, r3
 8009de4:	485a      	ldr	r0, [pc, #360]	; (8009f50 <HAL_TIM_MspPostInit+0x2c0>)
 8009de6:	f7f8 fb9f 	bl	8002528 <HAL_GPIO_Init>
}
 8009dea:	e0e9      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a5b      	ldr	r2, [pc, #364]	; (8009f60 <HAL_TIM_MspPostInit+0x2d0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d11d      	bne.n	8009e32 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009df6:	4b54      	ldr	r3, [pc, #336]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	4a53      	ldr	r2, [pc, #332]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009dfc:	f043 0308 	orr.w	r3, r3, #8
 8009e00:	6313      	str	r3, [r2, #48]	; 0x30
 8009e02:	4b51      	ldr	r3, [pc, #324]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 8009e0e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009e12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e14:	2302      	movs	r3, #2
 8009e16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009e20:	2302      	movs	r3, #2
 8009e22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e28:	4619      	mov	r1, r3
 8009e2a:	484e      	ldr	r0, [pc, #312]	; (8009f64 <HAL_TIM_MspPostInit+0x2d4>)
 8009e2c:	f7f8 fb7c 	bl	8002528 <HAL_GPIO_Init>
}
 8009e30:	e0c6      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a4c      	ldr	r2, [pc, #304]	; (8009f68 <HAL_TIM_MspPostInit+0x2d8>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d11c      	bne.n	8009e76 <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e3c:	4b42      	ldr	r3, [pc, #264]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	4a41      	ldr	r2, [pc, #260]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e42:	f043 0304 	orr.w	r3, r3, #4
 8009e46:	6313      	str	r3, [r2, #48]	; 0x30
 8009e48:	4b3f      	ldr	r3, [pc, #252]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 8009e54:	23c0      	movs	r3, #192	; 0xc0
 8009e56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e60:	2300      	movs	r3, #0
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009e64:	2303      	movs	r3, #3
 8009e66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	483b      	ldr	r0, [pc, #236]	; (8009f5c <HAL_TIM_MspPostInit+0x2cc>)
 8009e70:	f7f8 fb5a 	bl	8002528 <HAL_GPIO_Init>
}
 8009e74:	e0a4      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a3c      	ldr	r2, [pc, #240]	; (8009f6c <HAL_TIM_MspPostInit+0x2dc>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d11c      	bne.n	8009eba <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e80:	4b31      	ldr	r3, [pc, #196]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	4a30      	ldr	r2, [pc, #192]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e86:	f043 0310 	orr.w	r3, r3, #16
 8009e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8009e8c:	4b2e      	ldr	r3, [pc, #184]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e90:	f003 0310 	and.w	r3, r3, #16
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 8009e98:	2360      	movs	r3, #96	; 0x60
 8009e9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4826      	ldr	r0, [pc, #152]	; (8009f4c <HAL_TIM_MspPostInit+0x2bc>)
 8009eb4:	f7f8 fb38 	bl	8002528 <HAL_GPIO_Init>
}
 8009eb8:	e082      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a2c      	ldr	r2, [pc, #176]	; (8009f70 <HAL_TIM_MspPostInit+0x2e0>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d11c      	bne.n	8009efe <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ec4:	4b20      	ldr	r3, [pc, #128]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009eca:	f043 0320 	orr.w	r3, r3, #32
 8009ece:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed0:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	613b      	str	r3, [r7, #16]
 8009eda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8009eec:	2303      	movs	r3, #3
 8009eee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 8009ef0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	481f      	ldr	r0, [pc, #124]	; (8009f74 <HAL_TIM_MspPostInit+0x2e4>)
 8009ef8:	f7f8 fb16 	bl	8002528 <HAL_GPIO_Init>
}
 8009efc:	e060      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a1d      	ldr	r2, [pc, #116]	; (8009f78 <HAL_TIM_MspPostInit+0x2e8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d139      	bne.n	8009f7c <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009f08:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	4a0e      	ldr	r2, [pc, #56]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009f0e:	f043 0320 	orr.w	r3, r3, #32
 8009f12:	6313      	str	r3, [r2, #48]	; 0x30
 8009f14:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <HAL_TIM_MspPostInit+0x2b8>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 8009f20:	2380      	movs	r3, #128	; 0x80
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f24:	2302      	movs	r3, #2
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8009f30:	2303      	movs	r3, #3
 8009f32:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 8009f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f38:	4619      	mov	r1, r3
 8009f3a:	480e      	ldr	r0, [pc, #56]	; (8009f74 <HAL_TIM_MspPostInit+0x2e4>)
 8009f3c:	f7f8 faf4 	bl	8002528 <HAL_GPIO_Init>
}
 8009f40:	e03e      	b.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
 8009f42:	bf00      	nop
 8009f44:	40010000 	.word	0x40010000
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	40020400 	.word	0x40020400
 8009f54:	40020000 	.word	0x40020000
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40020800 	.word	0x40020800
 8009f60:	40000800 	.word	0x40000800
 8009f64:	40020c00 	.word	0x40020c00
 8009f68:	40010400 	.word	0x40010400
 8009f6c:	40014000 	.word	0x40014000
 8009f70:	40014400 	.word	0x40014400
 8009f74:	40021400 	.word	0x40021400
 8009f78:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a11      	ldr	r2, [pc, #68]	; (8009fc8 <HAL_TIM_MspPostInit+0x338>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d11c      	bne.n	8009fc0 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009f86:	4b11      	ldr	r3, [pc, #68]	; (8009fcc <HAL_TIM_MspPostInit+0x33c>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <HAL_TIM_MspPostInit+0x33c>)
 8009f8c:	f043 0320 	orr.w	r3, r3, #32
 8009f90:	6313      	str	r3, [r2, #48]	; 0x30
 8009f92:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <HAL_TIM_MspPostInit+0x33c>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	60bb      	str	r3, [r7, #8]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 8009f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fac:	2300      	movs	r3, #0
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009fb0:	2309      	movs	r3, #9
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 8009fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <HAL_TIM_MspPostInit+0x340>)
 8009fbc:	f7f8 fab4 	bl	8002528 <HAL_GPIO_Init>
}
 8009fc0:	bf00      	nop
 8009fc2:	3748      	adds	r7, #72	; 0x48
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	40002000 	.word	0x40002000
 8009fcc:	40023800 	.word	0x40023800
 8009fd0:	40021400 	.word	0x40021400

08009fd4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009fd8:	4b14      	ldr	r3, [pc, #80]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009fda:	4a15      	ldr	r2, [pc, #84]	; (800a030 <MX_USART1_UART_Init+0x5c>)
 8009fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009fe0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8009fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009fe6:	4b11      	ldr	r3, [pc, #68]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009fec:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <MX_USART1_UART_Init+0x58>)
 8009ffa:	220c      	movs	r2, #12
 8009ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <MX_USART1_UART_Init+0x58>)
 800a000:	2200      	movs	r2, #0
 800a002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <MX_USART1_UART_Init+0x58>)
 800a006:	2200      	movs	r2, #0
 800a008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <MX_USART1_UART_Init+0x58>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <MX_USART1_UART_Init+0x58>)
 800a012:	2200      	movs	r2, #0
 800a014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a016:	4805      	ldr	r0, [pc, #20]	; (800a02c <MX_USART1_UART_Init+0x58>)
 800a018:	f7fb fd08 	bl	8005a2c <HAL_UART_Init>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a022:	f7fe fb67 	bl	80086f4 <Error_Handler>
  }

}
 800a026:	bf00      	nop
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000b1ec 	.word	0x2000b1ec
 800a030:	40011000 	.word	0x40011000

0800a034 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a038:	4b14      	ldr	r3, [pc, #80]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a03a:	4a15      	ldr	r2, [pc, #84]	; (800a090 <MX_USART2_UART_Init+0x5c>)
 800a03c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a046:	4b11      	ldr	r3, [pc, #68]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a048:	2200      	movs	r2, #0
 800a04a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a04c:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a04e:	2200      	movs	r2, #0
 800a050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a052:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a054:	2200      	movs	r2, #0
 800a056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a058:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a05a:	220c      	movs	r2, #12
 800a05c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a05e:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a060:	2200      	movs	r2, #0
 800a062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a064:	4b09      	ldr	r3, [pc, #36]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a066:	2200      	movs	r2, #0
 800a068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a072:	2200      	movs	r2, #0
 800a074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <MX_USART2_UART_Init+0x58>)
 800a078:	f7fb fcd8 	bl	8005a2c <HAL_UART_Init>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a082:	f7fe fb37 	bl	80086f4 <Error_Handler>
  }

}
 800a086:	bf00      	nop
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	2000b26c 	.word	0x2000b26c
 800a090:	40004400 	.word	0x40004400

0800a094 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a098:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a09a:	4a15      	ldr	r2, [pc, #84]	; (800a0f0 <MX_USART3_UART_Init+0x5c>)
 800a09c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a09e:	4b13      	ldr	r3, [pc, #76]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0a0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a0a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a0b2:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0ba:	220c      	movs	r2, #12
 800a0bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a0ca:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a0d6:	4805      	ldr	r0, [pc, #20]	; (800a0ec <MX_USART3_UART_Init+0x58>)
 800a0d8:	f7fb fca8 	bl	8005a2c <HAL_UART_Init>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a0e2:	f7fe fb07 	bl	80086f4 <Error_Handler>
  }

}
 800a0e6:	bf00      	nop
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000b04c 	.word	0x2000b04c
 800a0f0:	40004800 	.word	0x40004800

0800a0f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08e      	sub	sp, #56	; 0x38
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	605a      	str	r2, [r3, #4]
 800a106:	609a      	str	r2, [r3, #8]
 800a108:	60da      	str	r2, [r3, #12]
 800a10a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a6c      	ldr	r2, [pc, #432]	; (800a2c4 <HAL_UART_MspInit+0x1d0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	f040 809f 	bne.w	800a256 <HAL_UART_MspInit+0x162>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a118:	4b6b      	ldr	r3, [pc, #428]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11c:	4a6a      	ldr	r2, [pc, #424]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a11e:	f043 0310 	orr.w	r3, r3, #16
 800a122:	6453      	str	r3, [r2, #68]	; 0x44
 800a124:	4b68      	ldr	r3, [pc, #416]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	623b      	str	r3, [r7, #32]
 800a12e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a130:	4b65      	ldr	r3, [pc, #404]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a134:	4a64      	ldr	r2, [pc, #400]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a136:	f043 0302 	orr.w	r3, r3, #2
 800a13a:	6313      	str	r3, [r2, #48]	; 0x30
 800a13c:	4b62      	ldr	r3, [pc, #392]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a140:	f003 0302 	and.w	r3, r3, #2
 800a144:	61fb      	str	r3, [r7, #28]
 800a146:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a14e:	2302      	movs	r3, #2
 800a150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a152:	2302      	movs	r3, #2
 800a154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a156:	2303      	movs	r3, #3
 800a158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a15a:	2304      	movs	r3, #4
 800a15c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a15e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a162:	4619      	mov	r1, r3
 800a164:	4859      	ldr	r0, [pc, #356]	; (800a2cc <HAL_UART_MspInit+0x1d8>)
 800a166:	f7f8 f9df 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16e:	2302      	movs	r3, #2
 800a170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a172:	2302      	movs	r3, #2
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a176:	2303      	movs	r3, #3
 800a178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a17a:	2307      	movs	r3, #7
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a17e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a182:	4619      	mov	r1, r3
 800a184:	4851      	ldr	r0, [pc, #324]	; (800a2cc <HAL_UART_MspInit+0x1d8>)
 800a186:	f7f8 f9cf 	bl	8002528 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a18a:	4b51      	ldr	r3, [pc, #324]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a18c:	4a51      	ldr	r2, [pc, #324]	; (800a2d4 <HAL_UART_MspInit+0x1e0>)
 800a18e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a190:	4b4f      	ldr	r3, [pc, #316]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a196:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a198:	4b4d      	ldr	r3, [pc, #308]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a19e:	4b4c      	ldr	r3, [pc, #304]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a1a4:	4b4a      	ldr	r3, [pc, #296]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a1ac:	4b48      	ldr	r3, [pc, #288]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a1b2:	4b47      	ldr	r3, [pc, #284]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a1b8:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a1c0:	4b43      	ldr	r3, [pc, #268]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a1c6:	4b42      	ldr	r3, [pc, #264]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a1cc:	4840      	ldr	r0, [pc, #256]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1ce:	f7f7 fda3 	bl	8001d18 <HAL_DMA_Init>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800a1d8:	f7fe fa8c 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a3c      	ldr	r2, [pc, #240]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800a1e2:	4a3b      	ldr	r2, [pc, #236]	; (800a2d0 <HAL_UART_MspInit+0x1dc>)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a1ea:	4a3c      	ldr	r2, [pc, #240]	; (800a2dc <HAL_UART_MspInit+0x1e8>)
 800a1ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a1ee:	4b3a      	ldr	r3, [pc, #232]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a1f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a1f6:	4b38      	ldr	r3, [pc, #224]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a1f8:	2240      	movs	r2, #64	; 0x40
 800a1fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1fc:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a202:	4b35      	ldr	r3, [pc, #212]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a208:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a20a:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a210:	4b31      	ldr	r3, [pc, #196]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a212:	2200      	movs	r2, #0
 800a214:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a216:	4b30      	ldr	r3, [pc, #192]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a218:	2200      	movs	r2, #0
 800a21a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a222:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a224:	2200      	movs	r2, #0
 800a226:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a228:	482b      	ldr	r0, [pc, #172]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a22a:	f7f7 fd75 	bl	8001d18 <HAL_DMA_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 800a234:	f7fe fa5e 	bl	80086f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a27      	ldr	r2, [pc, #156]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a23c:	669a      	str	r2, [r3, #104]	; 0x68
 800a23e:	4a26      	ldr	r2, [pc, #152]	; (800a2d8 <HAL_UART_MspInit+0x1e4>)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a244:	2200      	movs	r2, #0
 800a246:	2105      	movs	r1, #5
 800a248:	2025      	movs	r0, #37	; 0x25
 800a24a:	f7f7 fd3b 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a24e:	2025      	movs	r0, #37	; 0x25
 800a250:	f7f7 fd54 	bl	8001cfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a254:	e0dd      	b.n	800a412 <HAL_UART_MspInit+0x31e>
  else if(uartHandle->Instance==USART2)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a21      	ldr	r2, [pc, #132]	; (800a2e0 <HAL_UART_MspInit+0x1ec>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d143      	bne.n	800a2e8 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a260:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a264:	4a18      	ldr	r2, [pc, #96]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a26a:	6413      	str	r3, [r2, #64]	; 0x40
 800a26c:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a278:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	4a12      	ldr	r2, [pc, #72]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a27e:	f043 0308 	orr.w	r3, r3, #8
 800a282:	6313      	str	r3, [r2, #48]	; 0x30
 800a284:	4b10      	ldr	r3, [pc, #64]	; (800a2c8 <HAL_UART_MspInit+0x1d4>)
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	f003 0308 	and.w	r3, r3, #8
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a290:	2360      	movs	r3, #96	; 0x60
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a294:	2302      	movs	r3, #2
 800a296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a298:	2302      	movs	r3, #2
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a29c:	2303      	movs	r3, #3
 800a29e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a2a0:	2307      	movs	r3, #7
 800a2a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	480e      	ldr	r0, [pc, #56]	; (800a2e4 <HAL_UART_MspInit+0x1f0>)
 800a2ac:	f7f8 f93c 	bl	8002528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2105      	movs	r1, #5
 800a2b4:	2026      	movs	r0, #38	; 0x26
 800a2b6:	f7f7 fd05 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a2ba:	2026      	movs	r0, #38	; 0x26
 800a2bc:	f7f7 fd1e 	bl	8001cfc <HAL_NVIC_EnableIRQ>
}
 800a2c0:	e0a7      	b.n	800a412 <HAL_UART_MspInit+0x31e>
 800a2c2:	bf00      	nop
 800a2c4:	40011000 	.word	0x40011000
 800a2c8:	40023800 	.word	0x40023800
 800a2cc:	40020400 	.word	0x40020400
 800a2d0:	2000b18c 	.word	0x2000b18c
 800a2d4:	40026488 	.word	0x40026488
 800a2d8:	2000b12c 	.word	0x2000b12c
 800a2dc:	400264b8 	.word	0x400264b8
 800a2e0:	40004400 	.word	0x40004400
 800a2e4:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a4b      	ldr	r2, [pc, #300]	; (800a41c <HAL_UART_MspInit+0x328>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f040 808f 	bne.w	800a412 <HAL_UART_MspInit+0x31e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a2f4:	4b4a      	ldr	r3, [pc, #296]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	4a49      	ldr	r2, [pc, #292]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a2fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2fe:	6413      	str	r3, [r2, #64]	; 0x40
 800a300:	4b47      	ldr	r3, [pc, #284]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a30c:	4b44      	ldr	r3, [pc, #272]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a310:	4a43      	ldr	r2, [pc, #268]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a312:	f043 0308 	orr.w	r3, r3, #8
 800a316:	6313      	str	r3, [r2, #48]	; 0x30
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <HAL_UART_MspInit+0x32c>)
 800a31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31c:	f003 0308 	and.w	r3, r3, #8
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a324:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a32a:	2302      	movs	r3, #2
 800a32c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a32e:	2302      	movs	r3, #2
 800a330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a332:	2303      	movs	r3, #3
 800a334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a336:	2307      	movs	r3, #7
 800a338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a33e:	4619      	mov	r1, r3
 800a340:	4838      	ldr	r0, [pc, #224]	; (800a424 <HAL_UART_MspInit+0x330>)
 800a342:	f7f8 f8f1 	bl	8002528 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a346:	4b38      	ldr	r3, [pc, #224]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a348:	4a38      	ldr	r2, [pc, #224]	; (800a42c <HAL_UART_MspInit+0x338>)
 800a34a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a34c:	4b36      	ldr	r3, [pc, #216]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a34e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a352:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a354:	4b34      	ldr	r3, [pc, #208]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a356:	2200      	movs	r2, #0
 800a358:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a35a:	4b33      	ldr	r3, [pc, #204]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a360:	4b31      	ldr	r3, [pc, #196]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a366:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a368:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a36e:	4b2e      	ldr	r3, [pc, #184]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a370:	2200      	movs	r2, #0
 800a372:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a374:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a376:	2200      	movs	r2, #0
 800a378:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a37a:	4b2b      	ldr	r3, [pc, #172]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a37c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a380:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a382:	4b29      	ldr	r3, [pc, #164]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a384:	2200      	movs	r2, #0
 800a386:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a388:	4827      	ldr	r0, [pc, #156]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a38a:	f7f7 fcc5 	bl	8001d18 <HAL_DMA_Init>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800a394:	f7fe f9ae 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a23      	ldr	r2, [pc, #140]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a39c:	66da      	str	r2, [r3, #108]	; 0x6c
 800a39e:	4a22      	ldr	r2, [pc, #136]	; (800a428 <HAL_UART_MspInit+0x334>)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800a3a4:	4b22      	ldr	r3, [pc, #136]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3a6:	4a23      	ldr	r2, [pc, #140]	; (800a434 <HAL_UART_MspInit+0x340>)
 800a3a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800a3aa:	4b21      	ldr	r3, [pc, #132]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3ac:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800a3b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3b2:	4b1f      	ldr	r3, [pc, #124]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3b4:	2240      	movs	r2, #64	; 0x40
 800a3b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3b8:	4b1d      	ldr	r3, [pc, #116]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a3be:	4b1c      	ldr	r3, [pc, #112]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3cc:	4b18      	ldr	r3, [pc, #96]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800a3d2:	4b17      	ldr	r3, [pc, #92]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a3d8:	4b15      	ldr	r3, [pc, #84]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a3de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a3e0:	4b13      	ldr	r3, [pc, #76]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a3e6:	4812      	ldr	r0, [pc, #72]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3e8:	f7f7 fc96 	bl	8001d18 <HAL_DMA_Init>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <HAL_UART_MspInit+0x302>
      Error_Handler();
 800a3f2:	f7fe f97f 	bl	80086f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a0d      	ldr	r2, [pc, #52]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3fa:	669a      	str	r2, [r3, #104]	; 0x68
 800a3fc:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <HAL_UART_MspInit+0x33c>)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a402:	2200      	movs	r2, #0
 800a404:	2105      	movs	r1, #5
 800a406:	2027      	movs	r0, #39	; 0x27
 800a408:	f7f7 fc5c 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a40c:	2027      	movs	r0, #39	; 0x27
 800a40e:	f7f7 fc75 	bl	8001cfc <HAL_NVIC_EnableIRQ>
}
 800a412:	bf00      	nop
 800a414:	3738      	adds	r7, #56	; 0x38
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40004800 	.word	0x40004800
 800a420:	40023800 	.word	0x40023800
 800a424:	40020c00 	.word	0x40020c00
 800a428:	2000afec 	.word	0x2000afec
 800a42c:	40026028 	.word	0x40026028
 800a430:	2000b0cc 	.word	0x2000b0cc
 800a434:	40026070 	.word	0x40026070

0800a438 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800a446:	2100      	movs	r1, #0
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 f8df 	bl	800b60c <DigitalWrite>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800a464:	2101      	movs	r1, #1
 800a466:	4618      	mov	r0, r3
 800a468:	f001 f8d0 	bl	800b60c <DigitalWrite>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800a482:	2100      	movs	r1, #0
 800a484:	4618      	mov	r0, r3
 800a486:	f001 f8c1 	bl	800b60c <DigitalWrite>
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 f8b2 	bl	800b60c <DigitalWrite>
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 f8a3 	bl	800b60c <DigitalWrite>
}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800a4dc:	2101      	movs	r1, #1
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 f894 	bl	800b60c <DigitalWrite>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ffc8 	bl	800a492 <AD_CONV_HIGH>
	delay_ns(200);
 800a502:	20c8      	movs	r0, #200	; 0xc8
 800a504:	f001 f8fa 	bl	800b6fc <delay_ns>
	AD_CONV_LOW(ptADDev);}
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ffb3 	bl	800a474 <AD_CONV_LOW>
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
	delay_ns(200);
	AD_CONV_HIGH(ptADDev);}
	ptADDev->ucDataFlag = 0;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800a52a:	2301      	movs	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	e021      	b.n	800a578 <ADBoard_BUSYCallback+0x58>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a534:	4b14      	ldr	r3, [pc, #80]	; (800a588 <ADBoard_BUSYCallback+0x68>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	01db      	lsls	r3, r3, #7
 800a53c:	4413      	add	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d112      	bne.n	800a572 <ADBoard_BUSYCallback+0x52>
			{
				ptADBoardDevices->curADBoardNum=i;
 800a54c:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <ADBoard_BUSYCallback+0x68>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	b292      	uxth	r2, r2
 800a554:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				AD_CS_LOW(ptADDev);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7ff ff6d 	bl	800a438 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	2310      	movs	r3, #16
 800a566:	4909      	ldr	r1, [pc, #36]	; (800a58c <ADBoard_BUSYCallback+0x6c>)
 800a568:	f7f9 fc9c 	bl	8003ea4 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
				break;
 800a570:	e005      	b.n	800a57e <ADBoard_BUSYCallback+0x5e>
	for(int i=0;i<ADBOARD_NUM;i++)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3301      	adds	r3, #1
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	ddda      	ble.n	800a534 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800a57e:	697b      	ldr	r3, [r7, #20]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20000010 	.word	0x20000010
 800a58c:	20000014 	.word	0x20000014

0800a590 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	int ret=1;
 800a598:	2301      	movs	r3, #1
 800a59a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800a59c:	2300      	movs	r3, #0
 800a59e:	613b      	str	r3, [r7, #16]
 800a5a0:	e07e      	b.n	800a6a0 <ADBoard_SPICallback+0x110>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a5a2:	4b44      	ldr	r3, [pc, #272]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	01db      	lsls	r3, r3, #7
 800a5aa:	4413      	add	r3, r2
 800a5ac:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d170      	bne.n	800a69a <ADBoard_SPICallback+0x10a>
				{
					ptADBoardDevices->curADBoardNum=i;
 800a5b8:	4b3e      	ldr	r3, [pc, #248]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	b292      	uxth	r2, r2
 800a5c0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					AD_CS_HIGH(ptADDev);
 800a5c4:	68b8      	ldr	r0, [r7, #8]
 800a5c6:	f7ff ff46 	bl	800a456 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
					ptADDev->chosen = 0;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	e01a      	b.n	800a616 <ADBoard_SPICallback+0x86>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5f0:	eddf 6a31 	vldr	s13, [pc, #196]	; 800a6b8 <ADBoard_SPICallback+0x128>
 800a5f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3308      	adds	r3, #8
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b0f      	cmp	r3, #15
 800a61a:	dde1      	ble.n	800a5e0 <ADBoard_SPICallback+0x50>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800a61c:	4b25      	ldr	r3, [pc, #148]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a624:	3301      	adds	r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	dc15      	bgt.n	800a656 <ADBoard_SPICallback+0xc6>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800a62a:	4b22      	ldr	r3, [pc, #136]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800a632:	4b20      	ldr	r3, [pc, #128]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3201      	adds	r2, #1
 800a638:	b292      	uxth	r2, r2
 800a63a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a63e:	4b1d      	ldr	r3, [pc, #116]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a64a:	01db      	lsls	r3, r3, #7
 800a64c:	4413      	add	r3, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff ff4c 	bl	800a4ec <AD7616_getVoltage>
 800a654:	e01e      	b.n	800a694 <ADBoard_SPICallback+0x104>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800a656:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a65e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						ptADBoardDevices->ucDataFlag = 1;
 800a662:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
						ptADBoardDevices->ADTimeEnd=micros();
 800a66c:	f001 f816 	bl	800b69c <micros>
 800a670:	4602      	mov	r2, r0
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800a67a:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a682:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a68a:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <ADBoard_SPICallback+0x124>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	1a8a      	subs	r2, r1, r2
 800a690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					}
					ret=0;
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]
					break;
 800a698:	e006      	b.n	800a6a8 <ADBoard_SPICallback+0x118>
		for(int i=0;i<ADBOARD_NUM;i++)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	3301      	adds	r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f77f af7d 	ble.w	800a5a2 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800a6a8:	697b      	ldr	r3, [r7, #20]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000010 	.word	0x20000010
 800a6b8:	47800000 	.word	0x47800000

0800a6bc <ADBoard_Reset>:

void ADBoard_Reset()
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 if (ADBOARD_TYPE==AD7616){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <ADBoard_Reset+0x34>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	607b      	str	r3, [r7, #4]
	AD_RESET_HIGH(ptADDev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff ff00 	bl	800a4ce <AD_RESET_HIGH>
	delay_us(5);
 800a6ce:	2005      	movs	r0, #5
 800a6d0:	f000 fffa 	bl	800b6c8 <delay_us>
	AD_RESET_LOW(ptADDev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff feeb 	bl	800a4b0 <AD_RESET_LOW>
	delay_us(5);
 800a6da:	2005      	movs	r0, #5
 800a6dc:	f000 fff4 	bl	800b6c8 <delay_us>
	AD_RESET_HIGH(ptADDev);}
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff fef4 	bl	800a4ce <AD_RESET_HIGH>
	delay_us(5);
	AD_RESET_HIGH(ptADDev);
	delay_us(5);
	AD_RESET_LOW(ptADDev);}

}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000010 	.word	0x20000010

0800a6f4 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <ADBoard_updateVoltage+0x40>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	ptADBoardDevices->curADBoardNum = 0;
 800a702:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <ADBoard_updateVoltage+0x40>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2200      	movs	r2, #0
 800a708:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	ptADBoardDevices->ADTimeStart=micros();
 800a70c:	f000 ffc6 	bl	800b69c <micros>
 800a710:	4602      	mov	r2, r0
 800a712:	4b08      	ldr	r3, [pc, #32]	; (800a734 <ADBoard_updateVoltage+0x40>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <ADBoard_updateVoltage+0x40>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <ADBoard_updateVoltage+0x40>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a726:	01db      	lsls	r3, r3, #7
 800a728:	4413      	add	r3, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fede 	bl	800a4ec <AD7616_getVoltage>
}
 800a730:	bf00      	nop
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20000010 	.word	0x20000010

0800a738 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	2b0f      	cmp	r3, #15
 800a746:	d811      	bhi.n	800a76c <AnalogRead_External+0x34>
	{
		uint16_t boardnum=num/AD76x6_CHANNELNUM;
 800a748:	88fb      	ldrh	r3, [r7, #6]
 800a74a:	091b      	lsrs	r3, r3, #4
 800a74c:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD76x6_CHANNELNUM;
 800a74e:	88fb      	ldrh	r3, [r7, #6]
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800a756:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <AnalogRead_External+0x4c>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	89f9      	ldrh	r1, [r7, #14]
 800a75c:	89bb      	ldrh	r3, [r7, #12]
 800a75e:	0149      	lsls	r1, r1, #5
 800a760:	440b      	add	r3, r1
 800a762:	3308      	adds	r3, #8
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	e001      	b.n	800a770 <AnalogRead_External+0x38>
	}
	else
		return 0;
 800a76c:	f04f 0300 	mov.w	r3, #0
 800a770:	ee07 3a90 	vmov	s15, r3
}
 800a774:	eeb0 0a67 	vmov.f32	s0, s15
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20000010 	.word	0x20000010

0800a788 <ADBoard_Init>:

void ADBoard_Init()
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800a78e:	230b      	movs	r3, #11
 800a790:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800a792:	230c      	movs	r3, #12
 800a794:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800a796:	230d      	movs	r3, #13
 800a798:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800a79a:	2303      	movs	r3, #3
 800a79c:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800a79e:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <ADBoard_Init+0xc0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7a6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	ptADBoardDevices->ucDataFlag = 0;
 800a7aa:	4b27      	ldr	r3, [pc, #156]	; (800a848 <ADBoard_Init+0xc0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	ptADBoardDevices->ADTime=0;
 800a7b4:	4b24      	ldr	r3, [pc, #144]	; (800a848 <ADBoard_Init+0xc0>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptADBoardDevices->ADTimeStart=0;
 800a7be:	4b22      	ldr	r3, [pc, #136]	; (800a848 <ADBoard_Init+0xc0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ptADBoardDevices->ADTimeEnd=0;
 800a7c8:	4b1f      	ldr	r3, [pc, #124]	; (800a848 <ADBoard_Init+0xc0>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -5;
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <ADBoard_Init+0xc0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <ADBoard_Init+0xc4>)
 800a7d8:	661a      	str	r2, [r3, #96]	; 0x60
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 5;
 800a7da:	4b1b      	ldr	r3, [pc, #108]	; (800a848 <ADBoard_Init+0xc0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a1c      	ldr	r2, [pc, #112]	; (800a850 <ADBoard_Init+0xc8>)
 800a7e0:	665a      	str	r2, [r3, #100]	; 0x64
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800a7e2:	4b19      	ldr	r3, [pc, #100]	; (800a848 <ADBoard_Init+0xc0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800a7ea:	4b17      	ldr	r3, [pc, #92]	; (800a848 <ADBoard_Init+0xc0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800a7f2:	4b15      	ldr	r3, [pc, #84]	; (800a848 <ADBoard_Init+0xc0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7fa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <ADBoard_Init+0xc0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a14      	ldr	r2, [pc, #80]	; (800a854 <ADBoard_Init+0xcc>)
 800a804:	671a      	str	r2, [r3, #112]	; 0x70
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800a806:	4b10      	ldr	r3, [pc, #64]	; (800a848 <ADBoard_Init+0xc0>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	79fa      	ldrb	r2, [r7, #7]
 800a80c:	b292      	uxth	r2, r2
 800a80e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800a812:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <ADBoard_Init+0xc0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	797a      	ldrb	r2, [r7, #5]
 800a818:	b292      	uxth	r2, r2
 800a81a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800a81e:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <ADBoard_Init+0xc0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	79ba      	ldrb	r2, [r7, #6]
 800a824:	b292      	uxth	r2, r2
 800a826:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <ADBoard_Init+0xc0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	793a      	ldrb	r2, [r7, #4]
 800a830:	b292      	uxth	r2, r2
 800a832:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	ADBoard_Reset();
 800a836:	f7ff ff41 	bl	800a6bc <ADBoard_Reset>

	ADBoard_updateVoltage();
 800a83a:	f7ff ff5b 	bl	800a6f4 <ADBoard_updateVoltage>
}
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20000010 	.word	0x20000010
 800a84c:	c0a00000 	.word	0xc0a00000
 800a850:	40a00000 	.word	0x40a00000
 800a854:	2000ab44 	.word	0x2000ab44

0800a858 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800a858:	b5b0      	push	{r4, r5, r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3304      	adds	r3, #4
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 ffad 	bl	800b7cc <_ZN14SOLENOID_VALVEC1Ei>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	331c      	adds	r3, #28
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 ffa7 	bl	800b7cc <_ZN14SOLENOID_VALVEC1Ei>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3334      	adds	r3, #52	; 0x34
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fbef 	bl	800b068 <_ZN15PRESSURE_SENSORC1Ei>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3350      	adds	r3, #80	; 0x50
 800a88e:	4618      	mov	r0, r3
 800a890:	f002 fece 	bl	800d630 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	f241 036c 	movw	r3, #4204	; 0x106c
 800a89a:	4413      	add	r3, r2
 800a89c:	4a67      	ldr	r2, [pc, #412]	; (800aa3c <_ZN7CHAMBERC1Eiii+0x1e4>)
 800a89e:	461c      	mov	r4, r3
 800a8a0:	4615      	mov	r5, r2
 800a8a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800a8b8:	4a61      	ldr	r2, [pc, #388]	; (800aa40 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	4615      	mov	r5, r2
 800a8be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4a5b      	ldr	r2, [pc, #364]	; (800aa44 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800a8d8:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800a8e0:	4413      	add	r3, r2
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	68f9      	ldr	r1, [r7, #12]
 800a8e6:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800a8ea:	440b      	add	r3, r1
 800a8ec:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4a55      	ldr	r2, [pc, #340]	; (800aa48 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800a8f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pressure=0;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pressureDeadZone = 2000;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4a4a      	ldr	r2, [pc, #296]	; (800aa4c <_ZN7CHAMBERC1Eiii+0x1f4>)
 800a924:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4a49      	ldr	r2, [pc, #292]	; (800aa50 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800a92a:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4a49      	ldr	r2, [pc, #292]	; (800aa54 <_ZN7CHAMBERC1Eiii+0x1fc>)
 800a930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pressureOffset=0;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	fulOpening=1;
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f241 035c 	movw	r3, #4188	; 0x105c
 800a944:	4413      	add	r3, r2
 800a946:	2201      	movs	r2, #1
 800a948:	601a      	str	r2, [r3, #0]
	opening = 0;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da00      	bge.n	800a964 <_ZN7CHAMBERC1Eiii+0x10c>
 800a962:	3301      	adds	r3, #1
 800a964:	105b      	asrs	r3, r3, #1
 800a966:	4a3c      	ldr	r2, [pc, #240]	; (800aa58 <_ZN7CHAMBERC1Eiii+0x200>)
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	4413      	add	r3, r2
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	da00      	bge.n	800a97c <_ZN7CHAMBERC1Eiii+0x124>
 800a97a:	3301      	adds	r3, #1
 800a97c:	105b      	asrs	r3, r3, #1
 800a97e:	4a36      	ldr	r2, [pc, #216]	; (800aa58 <_ZN7CHAMBERC1Eiii+0x200>)
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	4413      	add	r3, r2
 800a984:	3304      	adds	r3, #4
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	da00      	bge.n	800a996 <_ZN7CHAMBERC1Eiii+0x13e>
 800a994:	3301      	adds	r3, #1
 800a996:	105b      	asrs	r3, r3, #1
 800a998:	4a2f      	ldr	r2, [pc, #188]	; (800aa58 <_ZN7CHAMBERC1Eiii+0x200>)
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	4413      	add	r3, r2
 800a99e:	3308      	adds	r3, #8
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da00      	bge.n	800a9b0 <_ZN7CHAMBERC1Eiii+0x158>
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	105b      	asrs	r3, r3, #1
 800a9b2:	4a29      	ldr	r2, [pc, #164]	; (800aa58 <_ZN7CHAMBERC1Eiii+0x200>)
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	4413      	add	r3, r2
 800a9b8:	330c      	adds	r3, #12
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a9c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800a9cc:	eddf 4a23 	vldr	s9, [pc, #140]	; 800aa5c <_ZN7CHAMBERC1Eiii+0x204>
 800a9d0:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800aa60 <_ZN7CHAMBERC1Eiii+0x208>
 800a9d4:	eddf 3a23 	vldr	s7, [pc, #140]	; 800aa64 <_ZN7CHAMBERC1Eiii+0x20c>
 800a9d8:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800aa64 <_ZN7CHAMBERC1Eiii+0x20c>
 800a9dc:	eddf 2a22 	vldr	s5, [pc, #136]	; 800aa68 <_ZN7CHAMBERC1Eiii+0x210>
 800a9e0:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800aa6c <_ZN7CHAMBERC1Eiii+0x214>
 800a9e4:	eddf 1a22 	vldr	s3, [pc, #136]	; 800aa70 <_ZN7CHAMBERC1Eiii+0x218>
 800a9e8:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800aa74 <_ZN7CHAMBERC1Eiii+0x21c>
 800a9ec:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800aa64 <_ZN7CHAMBERC1Eiii+0x20c>
 800a9f0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800aa78 <_ZN7CHAMBERC1Eiii+0x220>
 800a9f4:	f000 fad6 	bl	800afa4 <NewPressureController>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	f241 0364 	movw	r3, #4196	; 0x1064
 800aa04:	4413      	add	r3, r2
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800aa10:	2200      	movs	r2, #0
 800aa12:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	f241 0368 	movw	r3, #4200	; 0x1068
 800aa1a:	4413      	add	r3, r2
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	33bc      	adds	r3, #188	; 0xbc
 800aa24:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f006 f825 	bl	8010a7a <memset>

}
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bdb0      	pop	{r4, r5, r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	08015758 	.word	0x08015758
 800aa40:	0801578c 	.word	0x0801578c
 800aa44:	3e99999a 	.word	0x3e99999a
 800aa48:	3c23d70a 	.word	0x3c23d70a
 800aa4c:	44fa0000 	.word	0x44fa0000
 800aa50:	46ea6000 	.word	0x46ea6000
 800aa54:	c6ea6000 	.word	0xc6ea6000
 800aa58:	20000034 	.word	0x20000034
 800aa5c:	3e99999a 	.word	0x3e99999a
 800aa60:	387ba882 	.word	0x387ba882
 800aa64:	00000000 	.word	0x00000000
 800aa68:	37a7c5ac 	.word	0x37a7c5ac
 800aa6c:	471c4000 	.word	0x471c4000
 800aa70:	501502f9 	.word	0x501502f9
 800aa74:	3a83126f 	.word	0x3a83126f
 800aa78:	48435000 	.word	0x48435000

0800aa7c <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fec5 	bl	800b820 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	331c      	adds	r3, #28
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 febf 	bl	800b820 <_ZN14SOLENOID_VALVE6attachEi>
	writeOpening(0);
 800aaa2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800aac0 <_ZN7CHAMBER6attachEiii+0x44>
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 f962 	bl	800ad70 <_ZN7CHAMBER12writeOpeningEf>
	pressureSensor.attach(AnalogPort);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3334      	adds	r3, #52	; 0x34
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fb3a 	bl	800b12c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	00000000 	.word	0x00000000

0800aac4 <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <_ZN7CHAMBER12readPressureEv>:

float CHAMBER::readPressure(){
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]

	/************************customize the correct pressure souce according to the project**********/

	pressureRaw = pressureSensor.read();
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3334      	adds	r3, #52	; 0x34
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fadf 	bl	800b0b4 <_ZN15PRESSURE_SENSOR4readEv>
 800aaf6:	eef0 7a40 	vmov.f32	s15, s0
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	//pressureRaw = pressureSensorspi.read();
	pressure=pressureRaw-pressureOffset;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800ab0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab1c:	ee07 3a90 	vmov	s15, r3
}
 800ab20:	eeb0 0a67 	vmov.f32	s0, s15
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <_ZN7CHAMBER15readPressureExtEf>:

float CHAMBER::readPressureExt(float pressureExt){
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	ed87 0a00 	vstr	s0, [r7]

	/************************read from external pressure source**********/
	pressureRaw=pressureExt;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=pressureRaw-pressureOffset;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800ab4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab5a:	ee07 3a90 	vmov	s15, r3
}
 800ab5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800ab78:	edd7 7a00 	vldr	s15, [r7]
 800ab7c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800ad60 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800ab80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab88:	d501      	bpl.n	800ab8e <_ZN7CHAMBER13writePressureEf+0x22>
 800ab8a:	4b76      	ldr	r3, [pc, #472]	; (800ad64 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800ab8c:	e00b      	b.n	800aba6 <_ZN7CHAMBER13writePressureEf+0x3a>
 800ab8e:	edd7 7a00 	vldr	s15, [r7]
 800ab92:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800ad68 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800ab96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9e:	dd01      	ble.n	800aba4 <_ZN7CHAMBER13writePressureEf+0x38>
 800aba0:	4b72      	ldr	r3, [pc, #456]	; (800ad6c <_ZN7CHAMBER13writePressureEf+0x200>)
 800aba2:	e000      	b.n	800aba6 <_ZN7CHAMBER13writePressureEf+0x3a>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	float pErr = pressureCommand-pressure;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800abb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abbc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800abc6:	edd7 7a03 	vldr	s15, [r7, #12]
 800abca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd2:	d54e      	bpl.n	800ac72 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800abe0:	edd7 7a03 	vldr	s15, [r7, #12]
 800abe4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800abe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abec:	dd03      	ble.n	800abf6 <_ZN7CHAMBER13writePressureEf+0x8a>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800abf4:	e019      	b.n	800ac2a <_ZN7CHAMBER13writePressureEf+0xbe>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ac02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ac06:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac0a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	d508      	bpl.n	800ac26 <_ZN7CHAMBER13writePressureEf+0xba>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ac20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac24:	e001      	b.n	800ac2a <_ZN7CHAMBER13writePressureEf+0xbe>
 800ac26:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800ac30:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800ac40:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ac44:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ac54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ac5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ac62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ac66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800ac70:	e06a      	b.n	800ad48 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ac78:	eeb1 7a67 	vneg.f32	s14, s15
 800ac7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac88:	dd59      	ble.n	800ad3e <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ac9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800aca0:	edd7 7a03 	vldr	s15, [r7, #12]
 800aca4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800aca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acac:	dd08      	ble.n	800acc0 <_ZN7CHAMBER13writePressureEf+0x154>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800acba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acbe:	e013      	b.n	800ace8 <_ZN7CHAMBER13writePressureEf+0x17c>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800acc6:	eef1 6a67 	vneg.f32	s13, s15
 800acca:	edd7 7a03 	vldr	s15, [r7, #12]
 800acce:	eef4 6ae7 	vcmpe.f32	s13, s15
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	d505      	bpl.n	800ace4 <_ZN7CHAMBER13writePressureEf+0x178>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800acde:	eef1 7a67 	vneg.f32	s15, s15
 800ace2:	e001      	b.n	800ace8 <_ZN7CHAMBER13writePressureEf+0x17c>
 800ace4:	edd7 7a03 	vldr	s15, [r7, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800acf4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800acf8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800ad08:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ad0c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ad16:	eef1 6a67 	vneg.f32	s13, s15
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ad26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ad2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ad2e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ad32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800ad3c:	e004      	b.n	800ad48 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f04f 0200 	mov.w	r2, #0
 800ad44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ad4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f80c 	bl	800ad70 <_ZN7CHAMBER12writeOpeningEf>
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	c7c35000 	.word	0xc7c35000
 800ad64:	c7c35000 	.word	0xc7c35000
 800ad68:	482fc800 	.word	0x482fc800
 800ad6c:	482fc800 	.word	0x482fc800

0800ad70 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800ad7c:	edd7 7a00 	vldr	s15, [r7]
 800ad80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad88:	dd2b      	ble.n	800ade2 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800ad8a:	edd7 7a00 	vldr	s15, [r7]
 800ad8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad96:	d502      	bpl.n	800ad9e <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800ad98:	f04f 0300 	mov.w	r3, #0
 800ad9c:	e00c      	b.n	800adb8 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800ad9e:	edd7 7a00 	vldr	s15, [r7]
 800ada2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	dd02      	ble.n	800adb6 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800adb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800adb4:	e000      	b.n	800adb8 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1d1a      	adds	r2, r3, #4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800adc8:	eeb0 0a67 	vmov.f32	s0, s15
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 fd37 	bl	800b840 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	331c      	adds	r3, #28
 800add6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800ae44 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fd30 	bl	800b840 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800ade0:	e02c      	b.n	800ae3c <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800ade2:	edd7 7a00 	vldr	s15, [r7]
 800ade6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800adea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf2:	d501      	bpl.n	800adf8 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800adf4:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800adf6:	e00a      	b.n	800ae0e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800adf8:	edd7 7a00 	vldr	s15, [r7]
 800adfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	dd02      	ble.n	800ae0c <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800ae06:	f04f 0300 	mov.w	r3, #0
 800ae0a:	e000      	b.n	800ae0e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3304      	adds	r3, #4
 800ae18:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ae44 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 fd0f 	bl	800b840 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f103 021c 	add.w	r2, r3, #28
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ae2e:	eef1 7a67 	vneg.f32	s15, s15
 800ae32:	eeb0 0a67 	vmov.f32	s0, s15
 800ae36:	4610      	mov	r0, r2
 800ae38:	f000 fd02 	bl	800b840 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	00000000 	.word	0x00000000
 800ae48:	bf800000 	.word	0xbf800000
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800ae5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae5e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800ae62:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae66:	eef0 7ae7 	vabs.f32	s15, s15
 800ae6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ae6e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800ae90 <mySAT+0x40>
 800ae72:	ee37 6b06 	vadd.f64	d6, d7, d6
 800ae76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ae7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800ae7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	f3af 8000 	nop.w
 800ae90:	47ae147b 	.word	0x47ae147b
 800ae94:	3f847ae1 	.word	0x3f847ae1

0800ae98 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	ed87 0a02 	vstr	s0, [r7, #8]
 800aea4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	ed93 7a08 	vldr	s14, [r3, #32]
 800aeba:	edd7 7a01 	vldr	s15, [r7, #4]
 800aebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	edd3 6a07 	vldr	s13, [r3, #28]
 800aec8:	edd7 7a02 	vldr	s15, [r7, #8]
 800aecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aed4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800af6c <superTwisting2rdSMCUpdate+0xd4>
 800aed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	edd3 7a02 	vldr	s15, [r3, #8]
 800aee8:	eeb0 0a67 	vmov.f32	s0, s15
 800aeec:	f7ff ffb0 	bl	800ae50 <mySAT>
 800aef0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	edd3 7a02 	vldr	s15, [r3, #8]
 800aefa:	eeb0 7ae7 	vabs.f32	s14, s15
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	edd3 7a04 	vldr	s15, [r3, #16]
 800af04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af08:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800af0c:	f04f 0300 	mov.w	r3, #0
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	f107 0314 	add.w	r3, r7, #20
 800af1a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800af1c:	edd7 7a07 	vldr	s15, [r7, #28]
 800af20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	db09      	blt.n	800af3e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800af2a:	ed97 0a07 	vldr	s0, [r7, #28]
 800af2e:	f004 ff53 	bl	800fdd8 <sqrtf>
 800af32:	eef0 7a40 	vmov.f32	s15, s0
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	edc3 7a00 	vstr	s15, [r3]
 800af3c:	e003      	b.n	800af46 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	f04f 0200 	mov.w	r2, #0
 800af44:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800af46:	ed97 7a05 	vldr	s14, [r7, #20]
 800af4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	ee07 3a90 	vmov	s15, r3
}
 800af60:	eeb0 0a67 	vmov.f32	s0, s15
 800af64:	3728      	adds	r7, #40	; 0x28
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	447a0000 	.word	0x447a0000

0800af70 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	ed87 0a02 	vstr	s0, [r7, #8]
 800af7c:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3324      	adds	r3, #36	; 0x24
 800af84:	edd7 0a01 	vldr	s1, [r7, #4]
 800af88:	ed97 0a02 	vldr	s0, [r7, #8]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff ff83 	bl	800ae98 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	ee07 3a90 	vmov	s15, r3
}
 800af9a:	eeb0 0a67 	vmov.f32	s0, s15
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800afae:	edc7 0a08 	vstr	s1, [r7, #32]
 800afb2:	ed87 1a07 	vstr	s2, [r7, #28]
 800afb6:	edc7 1a06 	vstr	s3, [r7, #24]
 800afba:	ed87 2a05 	vstr	s4, [r7, #20]
 800afbe:	edc7 2a04 	vstr	s5, [r7, #16]
 800afc2:	ed87 3a03 	vstr	s6, [r7, #12]
 800afc6:	edc7 3a02 	vstr	s7, [r7, #8]
 800afca:	ed87 4a01 	vstr	s8, [r7, #4]
 800afce:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800afd2:	204c      	movs	r0, #76	; 0x4c
 800afd4:	f005 fd3e 	bl	8010a54 <malloc>
 800afd8:	4603      	mov	r3, r0
 800afda:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800afdc:	224c      	movs	r2, #76	; 0x4c
 800afde:	2100      	movs	r1, #0
 800afe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afe2:	f005 fd4a 	bl	8010a7a <memset>
	pController->psource = psource;
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afea:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afee:	6a3a      	ldr	r2, [r7, #32]
 800aff0:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	69fa      	ldr	r2, [r7, #28]
 800aff6:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800aff8:	ed97 1a07 	vldr	s2, [r7, #28]
 800affc:	edd7 0a05 	vldr	s1, [r7, #20]
 800b000:	ed97 0a06 	vldr	s0, [r7, #24]
 800b004:	f001 fa5a 	bl	800c4bc <newSimpleKalmanFilter>
 800b008:	4602      	mov	r2, r0
 800b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b00e:	edd7 2a00 	vldr	s5, [r7]
 800b012:	ed97 2a01 	vldr	s4, [r7, #4]
 800b016:	edd7 1a07 	vldr	s3, [r7, #28]
 800b01a:	ed97 1a02 	vldr	s2, [r7, #8]
 800b01e:	edd7 0a03 	vldr	s1, [r7, #12]
 800b022:	ed97 0a04 	vldr	s0, [r7, #16]
 800b026:	f001 fe89 	bl	800cd3c <newPID>
 800b02a:	4602      	mov	r2, r0
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	69fa      	ldr	r2, [r7, #28]
 800b034:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	4a08      	ldr	r2, [pc, #32]	; (800b05c <NewPressureController+0xb8>)
 800b03a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b042:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b046:	4a06      	ldr	r2, [pc, #24]	; (800b060 <NewPressureController+0xbc>)
 800b048:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	4a05      	ldr	r2, [pc, #20]	; (800b064 <NewPressureController+0xc0>)
 800b04e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b052:	4618      	mov	r0, r3
 800b054:	3730      	adds	r7, #48	; 0x30
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	3627c5ac 	.word	0x3627c5ac
 800b060:	41a00000 	.word	0x41a00000
 800b064:	0800af71 	.word	0x0800af71

0800b068 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	605a      	str	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f851 	bl	800b12c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b08a:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b0ac <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b08e:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b0b0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b092:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b096:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f854 	bl	800b148 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	48927c00 	.word	0x48927c00
 800b0b0:	00000000 	.word	0x00000000

0800b0b4 <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fa7f 	bl	800b5c6 <AnalogRead>
 800b0c8:	eef0 7a40 	vmov.f32	s15, s0
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	ed93 7a05 	vldr	s14, [r3, #20]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	edd3 6a01 	vldr	s13, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b0e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	ed93 6a06 	vldr	s12, [r3, #24]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800b0f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b0f8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	edd3 6a04 	vldr	s13, [r3, #16]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	edd3 7a03 	vldr	s15, [r3, #12]
 800b108:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b10c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b110:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	ee07 3a90 	vmov	s15, r3
}
 800b122:	eeb0 0a67 	vmov.f32	s0, s15
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	601a      	str	r2, [r3, #0]

}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6178      	str	r0, [r7, #20]
 800b150:	ed87 0a04 	vstr	s0, [r7, #16]
 800b154:	edc7 0a03 	vstr	s1, [r7, #12]
 800b158:	ed87 1a02 	vstr	s2, [r7, #8]
 800b15c:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	619a      	str	r2, [r3, #24]
}
 800b178:	bf00      	nop
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3304      	adds	r3, #4
 800b194:	2100      	movs	r1, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f91d 	bl	800b3d6 <_ZN4PUMPC1Ei>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ff60 	bl	800b068 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f81b 	bl	800b1e8 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
	direction=0;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	635a      	str	r2, [r3, #52]	; 0x34
	pressureUpper=0;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38
	pressureOffset=0;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b1f4:	68b9      	ldr	r1, [r7, #8]
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 f808 	bl	800b20c <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 f818 	bl	800b234 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b204:	bf00      	nop
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3304      	adds	r3, #4
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 f8eb 	bl	800b3f8 <_ZN4PUMP6attachEi>
	pump.stop();
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f906 	bl	800b438 <_ZN4PUMP4stopEv>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	330c      	adds	r3, #12
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff ff71 	bl	800b12c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <_ZN15PRESSURE_SOURCE16maintainPressureEf>:

void PRESSURE_SOURCE::maintainPressure(float p){
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	ed87 0a00 	vstr	s0, [r7]
	if(p>=0){
 800b260:	edd7 7a00 	vldr	s15, [r7]
 800b264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	db0d      	blt.n	800b28a <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x36>
		maintainPressureRange(p,p+10000);
 800b26e:	edd7 7a00 	vldr	s15, [r7]
 800b272:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b2ac <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x58>
 800b276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b27a:	eef0 0a67 	vmov.f32	s1, s15
 800b27e:	ed97 0a00 	vldr	s0, [r7]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f814 	bl	800b2b0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>
	}
	else
		maintainPressureRange(p-10000,p);
}
 800b288:	e00c      	b.n	800b2a4 <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x50>
		maintainPressureRange(p-10000,p);
 800b28a:	edd7 7a00 	vldr	s15, [r7]
 800b28e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800b2ac <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x58>
 800b292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b296:	edd7 0a00 	vldr	s1, [r7]
 800b29a:	eeb0 0a67 	vmov.f32	s0, s15
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f806 	bl	800b2b0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	461c4000 	.word	0x461c4000

0800b2b0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>:

void PRESSURE_SOURCE::maintainPressureRange(float p_low,float p_high) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2bc:	edc7 0a01 	vstr	s1, [r7, #4]



	if(p_low<p_high)
 800b2c0:	ed97 7a02 	vldr	s14, [r7, #8]
 800b2c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d0:	d506      	bpl.n	800b2e0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x30>
	{
		pressureLower=p_low;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	635a      	str	r2, [r3, #52]	; 0x34
		pressureUpper=p_high;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b2de:	e005      	b.n	800b2ec <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x3c>
	}
	else{
		pressureLower=p_high;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	635a      	str	r2, [r3, #52]	; 0x34
		pressureUpper=p_low;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	639a      	str	r2, [r3, #56]	; 0x38
	}
	readPressure();
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 f842 	bl	800b376 <_ZN15PRESSURE_SOURCE12readPressureEv>

	if(pressure<pressureLower)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b2fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b306:	d513      	bpl.n	800b330 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x80>
	{
		if(pressureLower>0)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b30e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b316:	dd05      	ble.n	800b324 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x74>
			pump.start();
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3304      	adds	r3, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 f879 	bl	800b414 <_ZN4PUMP5startEv>
			pump.start();
		else
			pump.stop();
	}

}
 800b322:	e024      	b.n	800b36e <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
			pump.stop();
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3304      	adds	r3, #4
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 f885 	bl	800b438 <_ZN4PUMP4stopEv>
}
 800b32e:	e01e      	b.n	800b36e <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
	else if(pressure>pressureUpper)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b33c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b344:	dc00      	bgt.n	800b348 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x98>
}
 800b346:	e012      	b.n	800b36e <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
		if(pressureUpper<0)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b34e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b356:	d505      	bpl.n	800b364 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xb4>
			pump.start();
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f859 	bl	800b414 <_ZN4PUMP5startEv>
}
 800b362:	e004      	b.n	800b36e <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
			pump.stop();
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 f865 	bl	800b438 <_ZN4PUMP4stopEv>
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <_ZN15PRESSURE_SOURCE12readPressureEv>:
{
	pump.stop();
}


float PRESSURE_SOURCE::readPressure() {
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
	pressureRaw=pressureSensor.read();
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	330c      	adds	r3, #12
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff fe96 	bl	800b0b4 <_ZN15PRESSURE_SENSOR4readEv>
 800b388:	eef0 7a40 	vmov.f32	s15, s0
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pressure=pressureRaw-pressureOffset;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b39e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	return pressure;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	ee07 3a90 	vmov	s15, r3
}
 800b3b0:	eeb0 0a67 	vmov.f32	s0, s15
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <_ZN15PRESSURE_SOURCE12zeroPressureEv>:

void PRESSURE_SOURCE::zeroPressure(){
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
	status=0;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	605a      	str	r2, [r3, #4]
	attach(num);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f805 	bl	800b3f8 <_ZN4PUMP6attachEi>
}
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	601a      	str	r2, [r3, #0]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <_ZN4PUMP5startEv>:

void PUMP::start()
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

	DigitalWrite(DigitalPort,1-PWM_DIGITAL_OUTPUT_REVERSED);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	b29b      	uxth	r3, r3
 800b422:	2100      	movs	r1, #0
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f8f1 	bl	800b60c <DigitalWrite>
	status=1;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	605a      	str	r2, [r3, #4]

}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <_ZN4PUMP4stopEv>:

void PUMP::stop()
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	DigitalWrite(DigitalPort,PWM_DIGITAL_OUTPUT_REVERSED);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	b29b      	uxth	r3, r3
 800b446:	2101      	movs	r1, #1
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f8df 	bl	800b60c <DigitalWrite>
	status=0;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	605a      	str	r2, [r3, #4]

}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	330c      	adds	r3, #12
 800b46a:	2200      	movs	r2, #0
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff fe88 	bl	800b184 <_ZN15PRESSURE_SOURCEC1Eii>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	334c      	adds	r3, #76	; 0x4c
 800b478:	2200      	movs	r2, #0
 800b47a:	2100      	movs	r1, #0
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fe81 	bl	800b184 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2104      	movs	r1, #4
 800b48e:	4618      	mov	r0, r3
 800b490:	f005 faae 	bl	80109f0 <calloc>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2104      	movs	r1, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f005 faa5 	bl	80109f0 <calloc>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	889b      	ldrh	r3, [r3, #4]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	da18      	bge.n	800b4f0 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800b4be:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800b4c2:	f004 fbdc 	bl	800fc7e <_Znwj>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	461c      	mov	r4, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	0059      	lsls	r1, r3, #1
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7ff f9be 	bl	800a858 <_ZN7CHAMBERC1Eiii>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e7e0      	b.n	800b4b2 <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a06      	ldr	r2, [pc, #24]	; (800b50c <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800b4f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    frequency = 40;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a05      	ldr	r2, [pc, #20]	; (800b510 <_ZN9PNEUDRIVEC1Ei+0xb4>)
 800b4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	bd90      	pop	{r4, r7, pc}
 800b50a:	bf00      	nop
 800b50c:	44fa0000 	.word	0x44fa0000
 800b510:	42200000 	.word	0x42200000

0800b514 <_ZN9PNEUDRIVE12readPressureEi>:
	}
}


float PNEUDRIVE::readPressure(int num)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	return (chambers[num]->readPressure());
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689a      	ldr	r2, [r3, #8]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fada 	bl	800aae4 <_ZN7CHAMBER12readPressureEv>
 800b530:	eef0 7a40 	vmov.f32	s15, s0
}
 800b534:	eeb0 0a67 	vmov.f32	s0, s15
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <_ZN9PNEUDRIVE13writePressureEif>:

void PNEUDRIVE::writePressure(int num,float preCommand)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	ed87 0a01 	vstr	s0, [r7, #4]
	bufferPressure(num,preCommand);
 800b54c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 f808 	bl	800b568 <_ZN9PNEUDRIVE14bufferPressureEif>
	writeBufferedPressure(num);
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f818 	bl	800b590 <_ZN9PNEUDRIVE21writeBufferedPressureEi>
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <_ZN9PNEUDRIVE14bufferPressureEif>:

void PNEUDRIVE::bufferPressure(int num,float preCommand)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	ed87 0a01 	vstr	s0, [r7, #4]
	pressureCommands[num]=preCommand;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	601a      	str	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <_ZN9PNEUDRIVE21writeBufferedPressureEi>:
void PNEUDRIVE::writeBufferedPressure(int num)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
	chambers[num]->writePressure(pressureCommands[num]);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	6819      	ldr	r1, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	edd3 7a00 	vldr	s15, [r3]
 800b5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	f7ff fad7 	bl	800ab6c <_ZN7CHAMBER13writePressureEf>
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800b5d0:	f04f 0300 	mov.w	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800b5d6:	88fb      	ldrh	r3, [r7, #6]
 800b5d8:	2b05      	cmp	r3, #5
 800b5da:	d806      	bhi.n	800b5ea <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800b5dc:	88fb      	ldrh	r3, [r7, #6]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f986 	bl	800b8f0 <AnalogRead_BuiltIn>
 800b5e4:	ed87 0a03 	vstr	s0, [r7, #12]
 800b5e8:	e008      	b.n	800b5fc <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	3b06      	subs	r3, #6
 800b5ee:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800b5f0:	88fb      	ldrh	r3, [r7, #6]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff f8a0 	bl	800a738 <AnalogRead_External>
 800b5f8:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	ee07 3a90 	vmov	s15, r3

}
 800b602:	eeb0 0a67 	vmov.f32	s0, s15
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	460a      	mov	r2, r1
 800b616:	80fb      	strh	r3, [r7, #6]
 800b618:	4613      	mov	r3, r2
 800b61a:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800b61c:	88ba      	ldrh	r2, [r7, #4]
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	4611      	mov	r1, r2
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f99e 	bl	800b964 <DigitalBuiltIn_Write>
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	ed87 0a00 	vstr	s0, [r7]
 800b63c:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800b63e:	88fb      	ldrh	r3, [r7, #6]
 800b640:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800b642:	88fb      	ldrh	r3, [r7, #6]
 800b644:	2b13      	cmp	r3, #19
 800b646:	d805      	bhi.n	800b654 <PWMWriteDuty+0x24>
		PWMBuiltIn_writeDuty(num,fduty);
 800b648:	88fb      	ldrh	r3, [r7, #6]
 800b64a:	ed97 0a00 	vldr	s0, [r7]
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fa24 	bl	800ba9c <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
};
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <serial2Callback>:
	printf("Running default serial1Callback()\r\n");
}
;

__weak  void serial2Callback(char *pSerialPort4Buffer)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	printf("Running default serial2Callback()\r\n");
 800b678:	4803      	ldr	r0, [pc, #12]	; (800b688 <serial2Callback+0x18>)
 800b67a:	f006 f945 	bl	8011908 <puts>
};
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	08015860 	.word	0x08015860

0800b68c <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800b690:	f7f5 fcb2 	bl	8000ff8 <HAL_GetTick>
 800b694:	4603      	mov	r3, r0
}
 800b696:	4618      	mov	r0, r3
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <micros>:

uint32_t micros()
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800b6a2:	f7ff fff3 	bl	800b68c <millis>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6ac:	fb03 f202 	mul.w	r2, r3, r2
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <micros+0x28>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	4413      	add	r3, r2
 800b6b8:	607b      	str	r3, [r7, #4]
	return t;
 800b6ba:	687b      	ldr	r3, [r7, #4]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	2000ad2c 	.word	0x2000ad2c

0800b6c8 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800b6d0:	f7ff ffe4 	bl	800b69c <micros>
 800b6d4:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800b6d6:	f7ff ffe1 	bl	800b69c <micros>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	bfcc      	ite	gt
 800b6e8:	2301      	movgt	r3, #1
 800b6ea:	2300      	movle	r3, #0
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d000      	beq.n	800b6f4 <delay_us+0x2c>
 800b6f2:	e7f0      	b.n	800b6d6 <delay_us+0xe>
}
 800b6f4:	bf00      	nop
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800b704:	4b20      	ldr	r3, [pc, #128]	; (800b788 <delay_ns+0x8c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b1f      	ldr	r3, [pc, #124]	; (800b788 <delay_ns+0x8c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800b714:	4b1c      	ldr	r3, [pc, #112]	; (800b788 <delay_ns+0x8c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4293      	cmp	r3, r2
 800b720:	bfcc      	ite	gt
 800b722:	2301      	movgt	r3, #1
 800b724:	2300      	movle	r3, #0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d000      	beq.n	800b72e <delay_ns+0x32>
 800b72c:	e7f2      	b.n	800b714 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <delay_ns+0x8c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6a1a      	ldr	r2, [r3, #32]
 800b734:	f241 1311 	movw	r3, #4369	; 0x1111
 800b738:	4013      	ands	r3, r2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bf0c      	ite	eq
 800b73e:	2301      	moveq	r3, #1
 800b740:	2300      	movne	r3, #0
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d014      	beq.n	800b772 <delay_ns+0x76>
 800b748:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <delay_ns+0x8c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6a1a      	ldr	r2, [r3, #32]
 800b74e:	f240 4344 	movw	r3, #1092	; 0x444
 800b752:	4013      	ands	r3, r2
 800b754:	2b00      	cmp	r3, #0
 800b756:	bf0c      	ite	eq
 800b758:	2301      	moveq	r3, #1
 800b75a:	2300      	movne	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d007      	beq.n	800b772 <delay_ns+0x76>
 800b762:	4b09      	ldr	r3, [pc, #36]	; (800b788 <delay_ns+0x8c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	4b07      	ldr	r3, [pc, #28]	; (800b788 <delay_ns+0x8c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0201 	bic.w	r2, r2, #1
 800b770:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <delay_ns+0x8c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2200      	movs	r2, #0
 800b778:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	2000afac 	.word	0x2000afac

0800b78c <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800b794:	4a04      	ldr	r2, [pc, #16]	; (800b7a8 <setPeriodControlLoop+0x1c>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6013      	str	r3, [r2, #0]
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000214 	.word	0x20000214

0800b7ac <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800b7b4:	4a04      	ldr	r2, [pc, #16]	; (800b7c8 <setPeriodSendLoop+0x1c>)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6013      	str	r3, [r2, #0]
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	20000218 	.word	0x20000218

0800b7cc <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]

	_duty=0;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f04f 0200 	mov.w	r2, #0
 800b7dc:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800b7e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a09      	ldr	r2, [pc, #36]	; (800b81c <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800b7f6:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b806:	615a      	str	r2, [r3, #20]
	attach(num);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f808 	bl	800b820 <_ZN14SOLENOID_VALVE6attachEi>
}
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	41200000 	.word	0x41200000

0800b820 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	601a      	str	r2, [r3, #0]
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	0000      	movs	r0, r0
	...

0800b840 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	ed93 7a04 	vldr	s14, [r3, #16]
 800b852:	edd7 7a00 	vldr	s15, [r7]
 800b856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85e:	dd02      	ble.n	800b866 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	e00d      	b.n	800b882 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	ed93 7a05 	vldr	s14, [r3, #20]
 800b86c:	edd7 7a00 	vldr	s15, [r7]
 800b870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b878:	d502      	bpl.n	800b880 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	e000      	b.n	800b882 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800b884:	ed97 7a00 	vldr	s14, [r7]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b892:	eef0 7ae7 	vabs.f32	s15, s15
 800b896:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b89a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800b8e8 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800b89e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	dc00      	bgt.n	800b8aa <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800b8a8:	e017      	b.n	800b8da <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b8b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b8d0:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f7ff feab 	bl	800b630 <PWMWriteDuty>
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	f3af 8000 	nop.w
 800b8e8:	a0b5ed8d 	.word	0xa0b5ed8d
 800b8ec:	3eb0c6f7 	.word	0x3eb0c6f7

0800b8f0 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	db1e      	blt.n	800b93c <AnalogRead_BuiltIn+0x4c>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b05      	cmp	r3, #5
 800b902:	dc1b      	bgt.n	800b93c <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800b904:	4a13      	ldr	r2, [pc, #76]	; (800b954 <AnalogRead_BuiltIn+0x64>)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b914:	eddf 6a10 	vldr	s13, [pc, #64]	; 800b958 <AnalogRead_BuiltIn+0x68>
 800b918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b91c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b95c <AnalogRead_BuiltIn+0x6c>
 800b920:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b924:	4a0e      	ldr	r2, [pc, #56]	; (800b960 <AnalogRead_BuiltIn+0x70>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800b930:	4a0b      	ldr	r2, [pc, #44]	; (800b960 <AnalogRead_BuiltIn+0x70>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	e001      	b.n	800b940 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800b93c:	f04f 0300 	mov.w	r3, #0
 800b940:	ee07 3a90 	vmov	s15, r3
}
 800b944:	eeb0 0a67 	vmov.f32	s0, s15
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	2000b394 	.word	0x2000b394
 800b958:	45800000 	.word	0x45800000
 800b95c:	40533333 	.word	0x40533333
 800b960:	2000b37c 	.word	0x2000b37c

0800b964 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	460a      	mov	r2, r1
 800b96e:	80fb      	strh	r3, [r7, #6]
 800b970:	4613      	mov	r3, r2
 800b972:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800b974:	88bb      	ldrh	r3, [r7, #4]
 800b976:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	2b0f      	cmp	r3, #15
 800b97c:	d80b      	bhi.n	800b996 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	4a07      	ldr	r2, [pc, #28]	; (800b9a0 <DigitalBuiltIn_Write+0x3c>)
 800b982:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b986:	88fb      	ldrh	r3, [r7, #6]
 800b988:	4a06      	ldr	r2, [pc, #24]	; (800b9a4 <DigitalBuiltIn_Write+0x40>)
 800b98a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b98e:	7bfa      	ldrb	r2, [r7, #15]
 800b990:	4619      	mov	r1, r3
 800b992:	f7f6 ff73 	bl	800287c <HAL_GPIO_WritePin>
	}
}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	2000021c 	.word	0x2000021c
 800b9a4:	2000025c 	.word	0x2000025c

0800b9a8 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	ee07 3a90 	vmov	s15, r3
 800b9bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9c0:	edd7 7a00 	vldr	s15, [r7]
 800b9c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b9cc:	eeb0 0b47 	vmov.f64	d0, d7
 800b9d0:	f004 f980 	bl	800fcd4 <round>
 800b9d4:	eeb0 7b40 	vmov.f64	d7, d0
 800b9d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b9dc:	ee17 3a90 	vmov	r3, s15
 800b9e0:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	bf28      	it	cs
 800b9ec:	4613      	movcs	r3, r2
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3301      	adds	r3, #1
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	ed97 7a03 	vldr	s14, [r7, #12]
 800ba1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ba22:	eef0 7a66 	vmov.f32	s15, s13
}
 800ba26:	eeb0 0a67 	vmov.f32	s0, s15
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a0f      	ldr	r2, [pc, #60]	; (800ba80 <getTIM_SOURCECLK+0x4c>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d013      	beq.n	800ba6e <getTIM_SOURCECLK+0x3a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a0e      	ldr	r2, [pc, #56]	; (800ba84 <getTIM_SOURCECLK+0x50>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00e      	beq.n	800ba6e <getTIM_SOURCECLK+0x3a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a0c      	ldr	r2, [pc, #48]	; (800ba88 <getTIM_SOURCECLK+0x54>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d009      	beq.n	800ba6e <getTIM_SOURCECLK+0x3a>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a0b      	ldr	r2, [pc, #44]	; (800ba8c <getTIM_SOURCECLK+0x58>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d004      	beq.n	800ba6e <getTIM_SOURCECLK+0x3a>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a09      	ldr	r2, [pc, #36]	; (800ba90 <getTIM_SOURCECLK+0x5c>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d101      	bne.n	800ba72 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800ba6e:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <getTIM_SOURCECLK+0x60>)
 800ba70:	e000      	b.n	800ba74 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <getTIM_SOURCECLK+0x64>)
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	40010000 	.word	0x40010000
 800ba84:	40010400 	.word	0x40010400
 800ba88:	40014000 	.word	0x40014000
 800ba8c:	40014400 	.word	0x40014400
 800ba90:	40014800 	.word	0x40014800
 800ba94:	0cdfe600 	.word	0x0cdfe600
 800ba98:	066ff300 	.word	0x066ff300

0800ba9c <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	ed87 0a00 	vstr	s0, [r7]
 800baa8:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	4a48      	ldr	r2, [pc, #288]	; (800bbd0 <PWMBuiltIn_writeDuty+0x134>)
 800baae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d112      	bne.n	800badc <PWMBuiltIn_writeDuty+0x40>
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800baba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bac2:	88fb      	ldrh	r3, [r7, #6]
 800bac4:	4a43      	ldr	r2, [pc, #268]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baca:	681c      	ldr	r4, [r3, #0]
 800bacc:	ed97 0a00 	vldr	s0, [r7]
 800bad0:	4608      	mov	r0, r1
 800bad2:	f7ff ff69 	bl	800b9a8 <duty2CCR>
 800bad6:	4603      	mov	r3, r0
 800bad8:	6363      	str	r3, [r4, #52]	; 0x34

}
 800bada:	e075      	b.n	800bbc8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800badc:	88fb      	ldrh	r3, [r7, #6]
 800bade:	4a3c      	ldr	r2, [pc, #240]	; (800bbd0 <PWMBuiltIn_writeDuty+0x134>)
 800bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d112      	bne.n	800bb0e <PWMBuiltIn_writeDuty+0x72>
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	4a3a      	ldr	r2, [pc, #232]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800baec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800baf4:	88fb      	ldrh	r3, [r7, #6]
 800baf6:	4a37      	ldr	r2, [pc, #220]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800baf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bafc:	681c      	ldr	r4, [r3, #0]
 800bafe:	ed97 0a00 	vldr	s0, [r7]
 800bb02:	4608      	mov	r0, r1
 800bb04:	f7ff ff50 	bl	800b9a8 <duty2CCR>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800bb0c:	e05c      	b.n	800bbc8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bb0e:	88fb      	ldrh	r3, [r7, #6]
 800bb10:	4a2f      	ldr	r2, [pc, #188]	; (800bbd0 <PWMBuiltIn_writeDuty+0x134>)
 800bb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb16:	2b08      	cmp	r3, #8
 800bb18:	d112      	bne.n	800bb40 <PWMBuiltIn_writeDuty+0xa4>
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	4a2d      	ldr	r2, [pc, #180]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bb26:	88fb      	ldrh	r3, [r7, #6]
 800bb28:	4a2a      	ldr	r2, [pc, #168]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb2e:	681c      	ldr	r4, [r3, #0]
 800bb30:	ed97 0a00 	vldr	s0, [r7]
 800bb34:	4608      	mov	r0, r1
 800bb36:	f7ff ff37 	bl	800b9a8 <duty2CCR>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800bb3e:	e043      	b.n	800bbc8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bb40:	88fb      	ldrh	r3, [r7, #6]
 800bb42:	4a23      	ldr	r2, [pc, #140]	; (800bbd0 <PWMBuiltIn_writeDuty+0x134>)
 800bb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb48:	2b0c      	cmp	r3, #12
 800bb4a:	d112      	bne.n	800bb72 <PWMBuiltIn_writeDuty+0xd6>
 800bb4c:	88fb      	ldrh	r3, [r7, #6]
 800bb4e:	4a21      	ldr	r2, [pc, #132]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	4a1e      	ldr	r2, [pc, #120]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb60:	681c      	ldr	r4, [r3, #0]
 800bb62:	ed97 0a00 	vldr	s0, [r7]
 800bb66:	4608      	mov	r0, r1
 800bb68:	f7ff ff1e 	bl	800b9a8 <duty2CCR>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	6423      	str	r3, [r4, #64]	; 0x40
}
 800bb70:	e02a      	b.n	800bbc8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	4a16      	ldr	r2, [pc, #88]	; (800bbd0 <PWMBuiltIn_writeDuty+0x134>)
 800bb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d112      	bne.n	800bba4 <PWMBuiltIn_writeDuty+0x108>
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	4a14      	ldr	r2, [pc, #80]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	4a11      	ldr	r2, [pc, #68]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb92:	681c      	ldr	r4, [r3, #0]
 800bb94:	ed97 0a00 	vldr	s0, [r7]
 800bb98:	4608      	mov	r0, r1
 800bb9a:	f7ff ff05 	bl	800b9a8 <duty2CCR>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800bba2:	e011      	b.n	800bbc8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bba4:	88fb      	ldrh	r3, [r7, #6]
 800bba6:	4a0b      	ldr	r2, [pc, #44]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbb0:	88fb      	ldrh	r3, [r7, #6]
 800bbb2:	4a08      	ldr	r2, [pc, #32]	; (800bbd4 <PWMBuiltIn_writeDuty+0x138>)
 800bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb8:	681c      	ldr	r4, [r3, #0]
 800bbba:	ed97 0a00 	vldr	s0, [r7]
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	f7ff fef2 	bl	800b9a8 <duty2CCR>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd90      	pop	{r4, r7, pc}
 800bbd0:	200002cc 	.word	0x200002cc
 800bbd4:	2000027c 	.word	0x2000027c

0800bbd8 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	ed87 0a00 	vstr	s0, [r7]
 800bbe4:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800bbe6:	edd7 7a00 	vldr	s15, [r7]
 800bbea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bbee:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800bea8 <PWMBuiltIn_writeFrequency+0x2d0>
 800bbf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfa:	d501      	bpl.n	800bc00 <PWMBuiltIn_writeFrequency+0x28>
 800bbfc:	4bac      	ldr	r3, [pc, #688]	; (800beb0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800bbfe:	e00b      	b.n	800bc18 <PWMBuiltIn_writeFrequency+0x40>
 800bc00:	edd7 7a00 	vldr	s15, [r7]
 800bc04:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800beb4 <PWMBuiltIn_writeFrequency+0x2dc>
 800bc08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc10:	dd01      	ble.n	800bc16 <PWMBuiltIn_writeFrequency+0x3e>
 800bc12:	4ba9      	ldr	r3, [pc, #676]	; (800beb8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800bc14:	e000      	b.n	800bc18 <PWMBuiltIn_writeFrequency+0x40>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800bc1e:	2301      	movs	r3, #1
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	e06f      	b.n	800bd04 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800bc24:	88fa      	ldrh	r2, [r7, #6]
 800bc26:	49a5      	ldr	r1, [pc, #660]	; (800bebc <PWMBuiltIn_writeFrequency+0x2e4>)
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	edd3 7a00 	vldr	s15, [r3]
 800bc3c:	ed97 7a00 	vldr	s14, [r7]
 800bc40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc48:	d859      	bhi.n	800bcfe <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800bc4a:	4a9d      	ldr	r2, [pc, #628]	; (800bec0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	499a      	ldr	r1, [pc, #616]	; (800bec0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bc58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d124      	bne.n	800bcaa <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800bc60:	4a97      	ldr	r2, [pc, #604]	; (800bec0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc68:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800bc6a:	88fb      	ldrh	r3, [r7, #6]
 800bc6c:	4a95      	ldr	r2, [pc, #596]	; (800bec4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800bc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc7a:	edd7 7a00 	vldr	s15, [r7]
 800bc7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	3301      	adds	r3, #1
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc96:	ee17 1a90 	vmov	r1, s15
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	4a8a      	ldr	r2, [pc, #552]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	1e4a      	subs	r2, r1, #1
 800bca6:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800bca8:	e02f      	b.n	800bd0a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800bcaa:	88fb      	ldrh	r3, [r7, #6]
 800bcac:	4a86      	ldr	r2, [pc, #536]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4985      	ldr	r1, [pc, #532]	; (800becc <PWMBuiltIn_writeFrequency+0x2f4>)
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bcbc:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	4a80      	ldr	r2, [pc, #512]	; (800bec4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800bcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcce:	edd7 7a00 	vldr	s15, [r7]
 800bcd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	4a7b      	ldr	r2, [pc, #492]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce2:	3301      	adds	r3, #1
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf4:	ee17 3a90 	vmov	r3, s15
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	617b      	str	r3, [r7, #20]
			break;
 800bcfc:	e005      	b.n	800bd0a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	3301      	adds	r3, #1
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	dd8c      	ble.n	800bc24 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	4a6e      	ldr	r2, [pc, #440]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	f000 80be 	beq.w	800be9a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
 800bd22:	e0a9      	b.n	800be78 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800bd24:	4a68      	ldr	r2, [pc, #416]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	4966      	ldr	r1, [pc, #408]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bd30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f040 809c 	bne.w	800be72 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800bd3a:	4a65      	ldr	r2, [pc, #404]	; (800bed0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d113      	bne.n	800bd6e <PWMBuiltIn_writeFrequency+0x196>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f8c2 	bl	800bed4 <PWMBuiltIn_readDuty>
 800bd50:	eef0 7a40 	vmov.f32	s15, s0
 800bd54:	4a5c      	ldr	r2, [pc, #368]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd5c:	681c      	ldr	r4, [r3, #0]
 800bd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd62:	6978      	ldr	r0, [r7, #20]
 800bd64:	f7ff fe20 	bl	800b9a8 <duty2CCR>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	6363      	str	r3, [r4, #52]	; 0x34
 800bd6c:	e07a      	b.n	800be64 <PWMBuiltIn_writeFrequency+0x28c>
 800bd6e:	4a58      	ldr	r2, [pc, #352]	; (800bed0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d113      	bne.n	800bda2 <PWMBuiltIn_writeFrequency+0x1ca>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 f8a8 	bl	800bed4 <PWMBuiltIn_readDuty>
 800bd84:	eef0 7a40 	vmov.f32	s15, s0
 800bd88:	4a4f      	ldr	r2, [pc, #316]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd90:	681c      	ldr	r4, [r3, #0]
 800bd92:	eeb0 0a67 	vmov.f32	s0, s15
 800bd96:	6978      	ldr	r0, [r7, #20]
 800bd98:	f7ff fe06 	bl	800b9a8 <duty2CCR>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bda0:	e060      	b.n	800be64 <PWMBuiltIn_writeFrequency+0x28c>
 800bda2:	4a4b      	ldr	r2, [pc, #300]	; (800bed0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdaa:	2b08      	cmp	r3, #8
 800bdac:	d113      	bne.n	800bdd6 <PWMBuiltIn_writeFrequency+0x1fe>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 f88e 	bl	800bed4 <PWMBuiltIn_readDuty>
 800bdb8:	eef0 7a40 	vmov.f32	s15, s0
 800bdbc:	4a42      	ldr	r2, [pc, #264]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc4:	681c      	ldr	r4, [r3, #0]
 800bdc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f7ff fdec 	bl	800b9a8 <duty2CCR>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bdd4:	e046      	b.n	800be64 <PWMBuiltIn_writeFrequency+0x28c>
 800bdd6:	4a3e      	ldr	r2, [pc, #248]	; (800bed0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdde:	2b0c      	cmp	r3, #12
 800bde0:	d113      	bne.n	800be0a <PWMBuiltIn_writeFrequency+0x232>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 f874 	bl	800bed4 <PWMBuiltIn_readDuty>
 800bdec:	eef0 7a40 	vmov.f32	s15, s0
 800bdf0:	4a35      	ldr	r2, [pc, #212]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	681c      	ldr	r4, [r3, #0]
 800bdfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f7ff fdd2 	bl	800b9a8 <duty2CCR>
 800be04:	4603      	mov	r3, r0
 800be06:	6423      	str	r3, [r4, #64]	; 0x40
 800be08:	e02c      	b.n	800be64 <PWMBuiltIn_writeFrequency+0x28c>
 800be0a:	4a31      	ldr	r2, [pc, #196]	; (800bed0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be12:	2b10      	cmp	r3, #16
 800be14:	d113      	bne.n	800be3e <PWMBuiltIn_writeFrequency+0x266>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f85a 	bl	800bed4 <PWMBuiltIn_readDuty>
 800be20:	eef0 7a40 	vmov.f32	s15, s0
 800be24:	4a28      	ldr	r2, [pc, #160]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be2c:	681c      	ldr	r4, [r3, #0]
 800be2e:	eeb0 0a67 	vmov.f32	s0, s15
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	f7ff fdb8 	bl	800b9a8 <duty2CCR>
 800be38:	4603      	mov	r3, r0
 800be3a:	65a3      	str	r3, [r4, #88]	; 0x58
 800be3c:	e012      	b.n	800be64 <PWMBuiltIn_writeFrequency+0x28c>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	b29b      	uxth	r3, r3
 800be42:	4618      	mov	r0, r3
 800be44:	f000 f846 	bl	800bed4 <PWMBuiltIn_readDuty>
 800be48:	eef0 7a40 	vmov.f32	s15, s0
 800be4c:	4a1e      	ldr	r2, [pc, #120]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	eeb0 0a67 	vmov.f32	s0, s15
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	f7ff fda4 	bl	800b9a8 <duty2CCR>
 800be60:	4603      	mov	r3, r0
 800be62:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800be64:	4a18      	ldr	r2, [pc, #96]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2200      	movs	r2, #0
 800be70:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3301      	adds	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b13      	cmp	r3, #19
 800be7c:	f77f af52 	ble.w	800bd24 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800be80:	88fb      	ldrh	r3, [r7, #6]
 800be82:	4a11      	ldr	r2, [pc, #68]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	62da      	str	r2, [r3, #44]	; 0x2c
 800be8e:	88fb      	ldrh	r3, [r7, #6]
 800be90:	4a0d      	ldr	r2, [pc, #52]	; (800bec8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	60da      	str	r2, [r3, #12]
	}
}
 800be9a:	bf00      	nop
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd90      	pop	{r4, r7, pc}
 800bea2:	bf00      	nop
 800bea4:	f3af 8000 	nop.w
 800bea8:	eb851eb8 	.word	0xeb851eb8
 800beac:	3f9eb851 	.word	0x3f9eb851
 800beb0:	3cf5c28f 	.word	0x3cf5c28f
 800beb4:	4bcdfe60 	.word	0x4bcdfe60
 800beb8:	4bcdfe60 	.word	0x4bcdfe60
 800bebc:	200009c8 	.word	0x200009c8
 800bec0:	20000978 	.word	0x20000978
 800bec4:	20000928 	.word	0x20000928
 800bec8:	2000027c 	.word	0x2000027c
 800becc:	200009a0 	.word	0x200009a0
 800bed0:	200002cc 	.word	0x200002cc

0800bed4 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800bede:	88fb      	ldrh	r3, [r7, #6]
 800bee0:	4a2a      	ldr	r2, [pc, #168]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800beea:	88fb      	ldrh	r3, [r7, #6]
 800beec:	4a28      	ldr	r2, [pc, #160]	; (800bf90 <PWMBuiltIn_readDuty+0xbc>)
 800beee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <PWMBuiltIn_readDuty+0x30>
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	4a24      	ldr	r2, [pc, #144]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800befa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf02:	e039      	b.n	800bf78 <PWMBuiltIn_readDuty+0xa4>
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	4a22      	ldr	r2, [pc, #136]	; (800bf90 <PWMBuiltIn_readDuty+0xbc>)
 800bf08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	d106      	bne.n	800bf1e <PWMBuiltIn_readDuty+0x4a>
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	4a1e      	ldr	r2, [pc, #120]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1c:	e02c      	b.n	800bf78 <PWMBuiltIn_readDuty+0xa4>
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <PWMBuiltIn_readDuty+0xbc>)
 800bf22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d106      	bne.n	800bf38 <PWMBuiltIn_readDuty+0x64>
 800bf2a:	88fb      	ldrh	r3, [r7, #6]
 800bf2c:	4a17      	ldr	r2, [pc, #92]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf36:	e01f      	b.n	800bf78 <PWMBuiltIn_readDuty+0xa4>
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	4a15      	ldr	r2, [pc, #84]	; (800bf90 <PWMBuiltIn_readDuty+0xbc>)
 800bf3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf40:	2b0c      	cmp	r3, #12
 800bf42:	d106      	bne.n	800bf52 <PWMBuiltIn_readDuty+0x7e>
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	4a11      	ldr	r2, [pc, #68]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf50:	e012      	b.n	800bf78 <PWMBuiltIn_readDuty+0xa4>
 800bf52:	88fb      	ldrh	r3, [r7, #6]
 800bf54:	4a0e      	ldr	r2, [pc, #56]	; (800bf90 <PWMBuiltIn_readDuty+0xbc>)
 800bf56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf5a:	2b10      	cmp	r3, #16
 800bf5c:	d106      	bne.n	800bf6c <PWMBuiltIn_readDuty+0x98>
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	4a0a      	ldr	r2, [pc, #40]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6a:	e005      	b.n	800bf78 <PWMBuiltIn_readDuty+0xa4>
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	4a07      	ldr	r2, [pc, #28]	; (800bf8c <PWMBuiltIn_readDuty+0xb8>)
 800bf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f7ff fd3c 	bl	800b9f6 <CCR2duty>
 800bf7e:	eef0 7a40 	vmov.f32	s15, s0
}
 800bf82:	eeb0 0a67 	vmov.f32	s0, s15
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	2000027c 	.word	0x2000027c
 800bf90:	200002cc 	.word	0x200002cc

0800bf94 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800bf9c:	4a07      	ldr	r2, [pc, #28]	; (800bfbc <PWMBuiltInStartChannel+0x28>)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bfa4:	4a06      	ldr	r2, [pc, #24]	; (800bfc0 <PWMBuiltInStartChannel+0x2c>)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfac:	4619      	mov	r1, r3
 800bfae:	f7f8 fcf7 	bl	80049a0 <HAL_TIM_PWM_Start>
}
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	2000027c 	.word	0x2000027c
 800bfc0:	200002cc 	.word	0x200002cc

0800bfc4 <PWMBuiltInStart>:
{
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
}

void PWMBuiltInStart()
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bfca:	2300      	movs	r3, #0
 800bfcc:	607b      	str	r3, [r7, #4]
 800bfce:	e005      	b.n	800bfdc <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff ffdf 	bl	800bf94 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b13      	cmp	r3, #19
 800bfe0:	ddf6      	ble.n	800bfd0 <PWMBuiltInStart+0xc>
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	e072      	b.n	800c0de <PWMBuiltIn_init+0xf2>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800bff8:	4a3d      	ldr	r2, [pc, #244]	; (800c0f0 <PWMBuiltIn_init+0x104>)
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fd17 	bl	800ba34 <getTIM_SOURCECLK>
 800c006:	4601      	mov	r1, r0
 800c008:	4a3a      	ldr	r2, [pc, #232]	; (800c0f4 <PWMBuiltIn_init+0x108>)
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c010:	2300      	movs	r3, #0
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	e04c      	b.n	800c0b0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800c016:	4a38      	ldr	r2, [pc, #224]	; (800c0f8 <PWMBuiltIn_init+0x10c>)
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c01e:	2201      	movs	r2, #1
 800c020:	fa02 f303 	lsl.w	r3, r2, r3
 800c024:	1e5a      	subs	r2, r3, #1
 800c026:	4935      	ldr	r1, [pc, #212]	; (800c0fc <PWMBuiltIn_init+0x110>)
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800c02e:	4a34      	ldr	r2, [pc, #208]	; (800c100 <PWMBuiltIn_init+0x114>)
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c036:	2201      	movs	r2, #1
 800c038:	fa02 f303 	lsl.w	r3, r2, r3
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	4931      	ldr	r1, [pc, #196]	; (800c104 <PWMBuiltIn_init+0x118>)
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800c046:	4a2d      	ldr	r2, [pc, #180]	; (800c0fc <PWMBuiltIn_init+0x110>)
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c04e:	3301      	adds	r3, #1
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c058:	edc7 7a02 	vstr	s15, [r7, #8]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800c05c:	4a29      	ldr	r2, [pc, #164]	; (800c104 <PWMBuiltIn_init+0x118>)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c064:	3301      	adds	r3, #1
 800c066:	ee07 3a90 	vmov	s15, r3
 800c06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06e:	edc7 7a01 	vstr	s15, [r7, #4]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800c072:	4a20      	ldr	r2, [pc, #128]	; (800c0f4 <PWMBuiltIn_init+0x108>)
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c082:	edd7 7a02 	vldr	s15, [r7, #8]
 800c086:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c08a:	ed97 7a01 	vldr	s14, [r7, #4]
 800c08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c092:	491d      	ldr	r1, [pc, #116]	; (800c108 <PWMBuiltIn_init+0x11c>)
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	613b      	str	r3, [r7, #16]
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	ddaf      	ble.n	800c016 <PWMBuiltIn_init+0x2a>
		}
		float _duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?0:1;
 800c0b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ba:	60fb      	str	r3, [r7, #12]
		PWMBuiltIn_writeDuty(i,_duty);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	ed97 0a03 	vldr	s0, [r7, #12]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7ff fce9 	bl	800ba9c <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800c10c <PWMBuiltIn_init+0x120>
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fd80 	bl	800bbd8 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2b13      	cmp	r3, #19
 800c0e2:	dd89      	ble.n	800bff8 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800c0e4:	f7ff ff6e 	bl	800bfc4 <PWMBuiltInStart>
}
 800c0e8:	bf00      	nop
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	2000027c 	.word	0x2000027c
 800c0f4:	20000928 	.word	0x20000928
 800c0f8:	2000031c 	.word	0x2000031c
 800c0fc:	20000978 	.word	0x20000978
 800c100:	20000344 	.word	0x20000344
 800c104:	200009a0 	.word	0x200009a0
 800c108:	200009c8 	.word	0x200009c8
 800c10c:	42200000 	.word	0x42200000

0800c110 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	460b      	mov	r3, r1
 800c11a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c11e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]
}
 800c12e:	bf00      	nop
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
	...

0800c13c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c14c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c154:	2b00      	cmp	r3, #0
 800c156:	d15b      	bne.n	800c210 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	ed93 7a00 	vldr	s14, [r3]
 800c15e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c162:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c166:	edd7 7a03 	vldr	s15, [r7, #12]
 800c16a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c16e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c172:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c176:	edd7 7a03 	vldr	s15, [r7, #12]
 800c17a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c182:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c18a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	ed93 7a00 	vldr	s14, [r3]
 800c194:	edd7 7a03 	vldr	s15, [r7, #12]
 800c198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c19c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c1b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c1ba:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	ed93 7a00 	vldr	s14, [r3]
 800c1c4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c1e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c1ea:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	ed93 7a00 	vldr	s14, [r3]
 800c1f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c200:	330c      	adds	r3, #12
 800c202:	edd7 7a03 	vldr	s15, [r7, #12]
 800c206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c20a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800c20e:	e0fc      	b.n	800c40a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c216:	2b01      	cmp	r3, #1
 800c218:	f040 80f7 	bne.w	800c40a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	ed93 7a00 	vldr	s14, [r3]
 800c222:	edd7 7a03 	vldr	s15, [r7, #12]
 800c226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c22a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c22e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c232:	edd7 7a03 	vldr	s15, [r7, #12]
 800c236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c23a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c23e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c242:	edd7 7a03 	vldr	s15, [r7, #12]
 800c246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c24a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c256:	eddf 6a70 	vldr	s13, [pc, #448]	; 800c418 <kalman_setQ+0x2dc>
 800c25a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c25e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	ed93 7a00 	vldr	s14, [r3]
 800c268:	edd7 7a03 	vldr	s15, [r7, #12]
 800c26c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c270:	edd7 7a03 	vldr	s15, [r7, #12]
 800c274:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c278:	edd7 7a03 	vldr	s15, [r7, #12]
 800c27c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c280:	edd7 7a03 	vldr	s15, [r7, #12]
 800c284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c288:	edd7 7a03 	vldr	s15, [r7, #12]
 800c28c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c294:	3304      	adds	r3, #4
 800c296:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c29a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c29e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	ed93 7a00 	vldr	s14, [r3]
 800c2a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c2d6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	ed93 7a00 	vldr	s14, [r3]
 800c2e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c300:	edd7 7a03 	vldr	s15, [r7, #12]
 800c304:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30c:	330c      	adds	r3, #12
 800c30e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c316:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	ed93 7a00 	vldr	s14, [r3]
 800c320:	edd7 7a03 	vldr	s15, [r7, #12]
 800c324:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c328:	edd7 7a03 	vldr	s15, [r7, #12]
 800c32c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c330:	edd7 7a03 	vldr	s15, [r7, #12]
 800c334:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c338:	edd7 7a03 	vldr	s15, [r7, #12]
 800c33c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c344:	3310      	adds	r3, #16
 800c346:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c34a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c34e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	ed93 7a00 	vldr	s14, [r3]
 800c358:	edd7 7a03 	vldr	s15, [r7, #12]
 800c35c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c360:	edd7 7a03 	vldr	s15, [r7, #12]
 800c364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c368:	edd7 7a03 	vldr	s15, [r7, #12]
 800c36c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c374:	3314      	adds	r3, #20
 800c376:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c37a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c37e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	ed93 7a00 	vldr	s14, [r3]
 800c388:	edd7 7a03 	vldr	s15, [r7, #12]
 800c38c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c390:	edd7 7a03 	vldr	s15, [r7, #12]
 800c394:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c398:	edd7 7a03 	vldr	s15, [r7, #12]
 800c39c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ac:	3318      	adds	r3, #24
 800c3ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c3b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3b6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	ed93 7a00 	vldr	s14, [r3]
 800c3c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3dc:	331c      	adds	r3, #28
 800c3de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c3e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3e6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	ed93 7a00 	vldr	s14, [r3]
 800c3f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	3320      	adds	r3, #32
 800c3fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800c402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c406:	edc3 7a00 	vstr	s15, [r3]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	42100000 	.word	0x42100000

0800c41c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d105      	bne.n	800c43c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	6812      	ldr	r2, [r2, #0]
 800c438:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800c43a:	e039      	b.n	800c4b0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c442:	2b01      	cmp	r3, #1
 800c444:	d134      	bne.n	800c4b0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	6812      	ldr	r2, [r2, #0]
 800c44e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c454:	3304      	adds	r3, #4
 800c456:	f04f 0200 	mov.w	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c460:	3308      	adds	r3, #8
 800c462:	f04f 0200 	mov.w	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46c:	330c      	adds	r3, #12
 800c46e:	f04f 0200 	mov.w	r2, #0
 800c472:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c478:	3310      	adds	r3, #16
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	6852      	ldr	r2, [r2, #4]
 800c47e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c484:	3314      	adds	r3, #20
 800c486:	f04f 0200 	mov.w	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c490:	3318      	adds	r3, #24
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c49c:	331c      	adds	r3, #28
 800c49e:	f04f 0200 	mov.w	r2, #0
 800c4a2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a8:	3320      	adds	r3, #32
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	6892      	ldr	r2, [r2, #8]
 800c4ae:	601a      	str	r2, [r3, #0]
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	ed87 0a03 	vstr	s0, [r7, #12]
 800c4c6:	edc7 0a02 	vstr	s1, [r7, #8]
 800c4ca:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800c4ce:	f107 0108 	add.w	r1, r7, #8
 800c4d2:	f107 030c 	add.w	r3, r7, #12
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	ed97 0a01 	vldr	s0, [r7, #4]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 f807 	bl	800c4f0 <KALMANFILTER>
 800c4e2:	6178      	str	r0, [r7, #20]
	return pk;
 800c4e4:	697b      	ldr	r3, [r7, #20]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4fe:	4613      	mov	r3, r2
 800c500:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800c502:	20c4      	movs	r0, #196	; 0xc4
 800c504:	f004 faa6 	bl	8010a54 <malloc>
 800c508:	4603      	mov	r3, r0
 800c50a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <KALMANFILTER+0x26>
		return NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	e10e      	b.n	800c734 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800c516:	22c4      	movs	r2, #196	; 0xc4
 800c518:	2100      	movs	r1, #0
 800c51a:	6978      	ldr	r0, [r7, #20]
 800c51c:	f004 faad 	bl	8010a7a <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	887a      	ldrh	r2, [r7, #2]
 800c524:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800c528:	6978      	ldr	r0, [r7, #20]
 800c52a:	f000 f90f 	bl	800c74c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	4a82      	ldr	r2, [pc, #520]	; (800c73c <KALMANFILTER+0x24c>)
 800c532:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	4a81      	ldr	r2, [pc, #516]	; (800c740 <KALMANFILTER+0x250>)
 800c53a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	4a80      	ldr	r2, [pc, #512]	; (800c744 <KALMANFILTER+0x254>)
 800c542:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	4a7f      	ldr	r2, [pc, #508]	; (800c748 <KALMANFILTER+0x258>)
 800c54a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800c556:	887b      	ldrh	r3, [r7, #2]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	f040 8095 	bne.w	800c688 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c566:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	3304      	adds	r3, #4
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800c572:	ed97 7a01 	vldr	s14, [r7, #4]
 800c576:	edd7 7a01 	vldr	s15, [r7, #4]
 800c57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	3308      	adds	r3, #8
 800c584:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c58c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	330c      	adds	r3, #12
 800c596:	f04f 0200 	mov.w	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c5a6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	3314      	adds	r3, #20
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	3318      	adds	r3, #24
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	331c      	adds	r3, #28
 800c5c4:	f04f 0200 	mov.w	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	3320      	adds	r3, #32
 800c5d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c5d4:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	f04f 0200 	mov.w	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	f04f 0200 	mov.w	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c5f6:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c600:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c606:	3304      	adds	r3, #4
 800c608:	f04f 0200 	mov.w	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c612:	3308      	adds	r3, #8
 800c614:	f04f 0200 	mov.w	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	330c      	adds	r3, #12
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62a:	3310      	adds	r3, #16
 800c62c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c630:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	3314      	adds	r3, #20
 800c638:	f04f 0200 	mov.w	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c642:	3318      	adds	r3, #24
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64e:	331c      	adds	r3, #28
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	3320      	adds	r3, #32
 800c65c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c660:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f103 0210 	add.w	r2, r3, #16
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	3350      	adds	r3, #80	; 0x50
 800c66c:	4619      	mov	r1, r3
 800c66e:	4610      	mov	r0, r2
 800c670:	f7f4 fc27 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	f103 0220 	add.w	r2, r3, #32
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	3358      	adds	r3, #88	; 0x58
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7f4 fc1e 	bl	8000ec2 <arm_mat_trans_f32>
 800c686:	e048      	b.n	800c71a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800c688:	887b      	ldrh	r3, [r7, #2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d145      	bne.n	800c71a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c696:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	3304      	adds	r3, #4
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	330c      	adds	r3, #12
 800c6b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6b8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800c6ba:	ed97 7a01 	vldr	s14, [r7, #4]
 800c6be:	edd7 7a01 	vldr	s15, [r7, #4]
 800c6c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c6ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6d2:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6e8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	f04f 0200 	mov.w	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f103 0210 	add.w	r2, r3, #16
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	3350      	adds	r3, #80	; 0x50
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f7f4 fbdd 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f103 0220 	add.w	r2, r3, #32
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	3358      	adds	r3, #88	; 0x58
 800c712:	4619      	mov	r1, r3
 800c714:	4610      	mov	r0, r2
 800c716:	f7f4 fbd4 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c720:	68f9      	ldr	r1, [r7, #12]
 800c722:	6978      	ldr	r0, [r7, #20]
 800c724:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	6978      	ldr	r0, [r7, #20]
 800c730:	4798      	blx	r3

	return ptKalmanFilter;
 800c732:	697b      	ldr	r3, [r7, #20]
	
}
 800c734:	4618      	mov	r0, r3
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	0800cabd 	.word	0x0800cabd
 800c740:	0800c13d 	.word	0x0800c13d
 800c744:	0800c41d 	.word	0x0800c41d
 800c748:	0800c111 	.word	0x0800c111

0800c74c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	f040 80d9 	bne.w	800c912 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800c760:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800c764:	f004 f976 	bl	8010a54 <malloc>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c778:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800c77a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800c77e:	2100      	movs	r1, #0
 800c780:	68b8      	ldr	r0, [r7, #8]
 800c782:	f004 f97a 	bl	8010a7a <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2201      	movs	r2, #1
 800c78c:	2103      	movs	r1, #3
 800c78e:	f7f3 ffc7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f103 0010 	add.w	r0, r3, #16
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	330c      	adds	r3, #12
 800c79c:	2203      	movs	r2, #3
 800c79e:	2103      	movs	r1, #3
 800c7a0:	f7f3 ffbe 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f103 0018 	add.w	r0, r3, #24
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	3330      	adds	r3, #48	; 0x30
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	2103      	movs	r1, #3
 800c7b2:	f7f3 ffb5 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 0008 	add.w	r0, r3, #8
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	333c      	adds	r3, #60	; 0x3c
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	f7f3 ffac 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f103 0020 	add.w	r0, r3, #32
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	3340      	adds	r3, #64	; 0x40
 800c7d2:	2203      	movs	r2, #3
 800c7d4:	2103      	movs	r1, #3
 800c7d6:	f7f3 ffa3 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	33f4      	adds	r3, #244	; 0xf4
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	2103      	movs	r1, #3
 800c7e8:	f7f3 ff9a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	3364      	adds	r3, #100	; 0x64
 800c7f6:	2203      	movs	r2, #3
 800c7f8:	2103      	movs	r1, #3
 800c7fa:	f7f3 ff91 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	3388      	adds	r3, #136	; 0x88
 800c808:	2203      	movs	r2, #3
 800c80a:	2103      	movs	r1, #3
 800c80c:	f7f3 ff88 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	33ac      	adds	r3, #172	; 0xac
 800c81a:	2203      	movs	r2, #3
 800c81c:	2103      	movs	r1, #3
 800c81e:	f7f3 ff7f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	33d0      	adds	r3, #208	; 0xd0
 800c82c:	2203      	movs	r2, #3
 800c82e:	2103      	movs	r1, #3
 800c830:	f7f3 ff76 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c840:	2203      	movs	r2, #3
 800c842:	2103      	movs	r1, #3
 800c844:	f7f3 ff6c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c854:	2203      	movs	r2, #3
 800c856:	2103      	movs	r1, #3
 800c858:	f7f3 ff62 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c868:	2203      	movs	r2, #3
 800c86a:	2103      	movs	r1, #3
 800c86c:	f7f3 ff58 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c87c:	2203      	movs	r2, #3
 800c87e:	2103      	movs	r1, #3
 800c880:	f7f3 ff4e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c890:	2203      	movs	r2, #3
 800c892:	2103      	movs	r1, #3
 800c894:	f7f3 ff44 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c8a4:	2203      	movs	r2, #3
 800c8a6:	2103      	movs	r1, #3
 800c8a8:	f7f3 ff3a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	2103      	movs	r1, #3
 800c8bc:	f7f3 ff30 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	2103      	movs	r1, #3
 800c8d0:	f7f3 ff26 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	2103      	movs	r1, #3
 800c8e4:	f7f3 ff1c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	2103      	movs	r1, #3
 800c8f8:	f7f3 ff12 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800c908:	2201      	movs	r2, #1
 800c90a:	2103      	movs	r1, #3
 800c90c:	f7f3 ff08 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800c910:	e0d0      	b.n	800cab4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f040 80cb 	bne.w	800cab4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800c91e:	20bc      	movs	r0, #188	; 0xbc
 800c920:	f004 f898 	bl	8010a54 <malloc>
 800c924:	4603      	mov	r3, r0
 800c926:	461a      	mov	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c934:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800c936:	22bc      	movs	r2, #188	; 0xbc
 800c938:	2100      	movs	r1, #0
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f004 f89d 	bl	8010a7a <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2201      	movs	r2, #1
 800c946:	2102      	movs	r1, #2
 800c948:	f7f3 feea 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f103 0010 	add.w	r0, r3, #16
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3308      	adds	r3, #8
 800c956:	2202      	movs	r2, #2
 800c958:	2102      	movs	r1, #2
 800c95a:	f7f3 fee1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f103 0018 	add.w	r0, r3, #24
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3318      	adds	r3, #24
 800c968:	2201      	movs	r2, #1
 800c96a:	2102      	movs	r1, #2
 800c96c:	f7f3 fed8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f103 0008 	add.w	r0, r3, #8
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3320      	adds	r3, #32
 800c97a:	2201      	movs	r2, #1
 800c97c:	2101      	movs	r1, #1
 800c97e:	f7f3 fecf 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f103 0020 	add.w	r0, r3, #32
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3324      	adds	r3, #36	; 0x24
 800c98c:	2202      	movs	r2, #2
 800c98e:	2101      	movs	r1, #1
 800c990:	f7f3 fec6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3358      	adds	r3, #88	; 0x58
 800c99e:	2201      	movs	r2, #1
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	f7f3 febd 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	332c      	adds	r3, #44	; 0x2c
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	2102      	movs	r1, #2
 800c9b4:	f7f3 feb4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	333c      	adds	r3, #60	; 0x3c
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	2102      	movs	r1, #2
 800c9c6:	f7f3 feab 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	334c      	adds	r3, #76	; 0x4c
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	2101      	movs	r1, #1
 800c9d8:	f7f3 fea2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3350      	adds	r3, #80	; 0x50
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	2102      	movs	r1, #2
 800c9ea:	f7f3 fe99 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	335c      	adds	r3, #92	; 0x5c
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	2102      	movs	r1, #2
 800c9fc:	f7f3 fe90 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	336c      	adds	r3, #108	; 0x6c
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	2102      	movs	r1, #2
 800ca0e:	f7f3 fe87 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3374      	adds	r3, #116	; 0x74
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	2102      	movs	r1, #2
 800ca20:	f7f3 fe7e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	337c      	adds	r3, #124	; 0x7c
 800ca2e:	2202      	movs	r2, #2
 800ca30:	2102      	movs	r1, #2
 800ca32:	f7f3 fe75 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	338c      	adds	r3, #140	; 0x8c
 800ca40:	2202      	movs	r2, #2
 800ca42:	2102      	movs	r1, #2
 800ca44:	f7f3 fe6c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	339c      	adds	r3, #156	; 0x9c
 800ca52:	2201      	movs	r2, #1
 800ca54:	2101      	movs	r1, #1
 800ca56:	f7f3 fe63 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	33a0      	adds	r3, #160	; 0xa0
 800ca64:	2201      	movs	r2, #1
 800ca66:	2101      	movs	r1, #1
 800ca68:	f7f3 fe5a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	33a4      	adds	r3, #164	; 0xa4
 800ca76:	2201      	movs	r2, #1
 800ca78:	2101      	movs	r1, #1
 800ca7a:	f7f3 fe51 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	33a8      	adds	r3, #168	; 0xa8
 800ca88:	2201      	movs	r2, #1
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	f7f3 fe48 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	33ac      	adds	r3, #172	; 0xac
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	f7f3 fe3f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	33b4      	adds	r3, #180	; 0xb4
 800caac:	2201      	movs	r2, #1
 800caae:	2102      	movs	r1, #2
 800cab0:	f7f3 fe36 	bl	8000720 <arm_mat_init_f32>
}
 800cab4:	bf00      	nop
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f103 0010 	add.w	r0, r3, #16
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3398      	adds	r3, #152	; 0x98
 800cad0:	461a      	mov	r2, r3
 800cad2:	f7f4 f875 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f103 0010 	add.w	r0, r3, #16
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3368      	adds	r3, #104	; 0x68
 800cae6:	461a      	mov	r2, r3
 800cae8:	f7f4 f86a 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3370      	adds	r3, #112	; 0x70
 800cafc:	461a      	mov	r2, r3
 800cafe:	f7f4 f85f 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3368      	adds	r3, #104	; 0x68
 800cb12:	461a      	mov	r2, r3
 800cb14:	f7f3 fd6c 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3360      	adds	r3, #96	; 0x60
 800cb28:	461a      	mov	r2, r3
 800cb2a:	f7f4 f849 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f103 0020 	add.w	r0, r3, #32
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3378      	adds	r3, #120	; 0x78
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f4 f83e 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3380      	adds	r3, #128	; 0x80
 800cb54:	461a      	mov	r2, r3
 800cb56:	f7f3 fd4b 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3378      	adds	r3, #120	; 0x78
 800cb64:	4619      	mov	r1, r3
 800cb66:	4610      	mov	r0, r2
 800cb68:	f7f3 fdf2 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3348      	adds	r3, #72	; 0x48
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	f7f4 f81f 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f103 0020 	add.w	r0, r3, #32
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3388      	adds	r3, #136	; 0x88
 800cb92:	461a      	mov	r2, r3
 800cb94:	f7f4 f814 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	3390      	adds	r3, #144	; 0x90
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f7f4 f8f2 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	33a0      	adds	r3, #160	; 0xa0
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f7f3 fffe 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	33a0      	adds	r3, #160	; 0xa0
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7f3 fd0d 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f103 0120 	add.w	r1, r3, #32
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3330      	adds	r3, #48	; 0x30
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	f7f3 ffea 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3370      	adds	r3, #112	; 0x70
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f7f3 ffdf 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3330      	adds	r3, #48	; 0x30
 800cc12:	461a      	mov	r2, r3
 800cc14:	f7f4 f8bd 	bl	8000d92 <arm_mat_sub_f32>

}
 800cc18:	bf00      	nop
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b089      	sub	sp, #36	; 0x24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	61f8      	str	r0, [r7, #28]
 800cc28:	ed87 0a06 	vstr	s0, [r7, #24]
 800cc2c:	edc7 0a05 	vstr	s1, [r7, #20]
 800cc30:	ed87 1a04 	vstr	s2, [r7, #16]
 800cc34:	edc7 1a03 	vstr	s3, [r7, #12]
 800cc38:	ed87 2a02 	vstr	s4, [r7, #8]
 800cc3c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc58:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	f04f 0200 	mov.w	r2, #0
 800cc60:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc6e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	f04f 0200 	mov.w	r2, #0
 800cc76:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	4a2f      	ldr	r2, [pc, #188]	; (800cd38 <initPID+0x118>)
 800cc7c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	edd3 6a02 	vldr	s13, [r3, #8]
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	ed93 7a00 	vldr	s14, [r3]
 800cc8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	edd3 6a08 	vldr	s13, [r3, #32]
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	ed93 7a08 	vldr	s14, [r3, #32]
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	ed93 6a07 	vldr	s12, [r3, #28]
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	edd3 7a05 	vldr	s15, [r3, #20]
 800ccac:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ccb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	edd3 7a00 	vldr	s15, [r3]
 800ccc4:	eeb1 7a67 	vneg.f32	s14, s15
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	edd3 7a07 	vldr	s15, [r3, #28]
 800ccce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ccd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	f04f 0200 	mov.w	r2, #0
 800cce8:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	f04f 0200 	mov.w	r2, #0
 800ccf0:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	f04f 0200 	mov.w	r2, #0
 800cd00:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800cd08:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd0c:	eef1 7a67 	vneg.f32	s15, s15
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800cd1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd20:	eef1 7a67 	vneg.f32	s15, s15
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800cd2a:	bf00      	nop
 800cd2c:	3724      	adds	r7, #36	; 0x24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	41700000 	.word	0x41700000

0800cd3c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	ed87 0a05 	vstr	s0, [r7, #20]
 800cd46:	edc7 0a04 	vstr	s1, [r7, #16]
 800cd4a:	ed87 1a03 	vstr	s2, [r7, #12]
 800cd4e:	edc7 1a02 	vstr	s3, [r7, #8]
 800cd52:	ed87 2a01 	vstr	s4, [r7, #4]
 800cd56:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800cd5a:	2054      	movs	r0, #84	; 0x54
 800cd5c:	f003 fe7a 	bl	8010a54 <malloc>
 800cd60:	4603      	mov	r3, r0
 800cd62:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <newPID+0x32>
		return NULL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e014      	b.n	800cd98 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800cd6e:	2254      	movs	r2, #84	; 0x54
 800cd70:	2100      	movs	r1, #0
 800cd72:	69f8      	ldr	r0, [r7, #28]
 800cd74:	f003 fe81 	bl	8010a7a <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800cd78:	edd7 2a00 	vldr	s5, [r7]
 800cd7c:	ed97 2a01 	vldr	s4, [r7, #4]
 800cd80:	edd7 1a02 	vldr	s3, [r7, #8]
 800cd84:	ed97 1a03 	vldr	s2, [r7, #12]
 800cd88:	edd7 0a04 	vldr	s1, [r7, #16]
 800cd8c:	ed97 0a05 	vldr	s0, [r7, #20]
 800cd90:	69f8      	ldr	r0, [r7, #28]
 800cd92:	f7ff ff45 	bl	800cc20 <initPID>
	return pp;
 800cd96:	69fb      	ldr	r3, [r7, #28]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0

	 //Usart 1 is connected to raspberry pi, we handle Tx, rosserial handles Rx
	 myInitUsartMode(&huart1,usartDMACircularMode);
 800cda4:	2102      	movs	r1, #2
 800cda6:	4807      	ldr	r0, [pc, #28]	; (800cdc4 <my_UsartInit+0x24>)
 800cda8:	f000 f812 	bl	800cdd0 <myInitUsartMode>

	 //for application use
	 myInitUsartMode(&huart2,usartIntMode);
 800cdac:	2100      	movs	r1, #0
 800cdae:	4806      	ldr	r0, [pc, #24]	; (800cdc8 <my_UsartInit+0x28>)
 800cdb0:	f000 f80e 	bl	800cdd0 <myInitUsartMode>

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,usartDMAIdleMode);
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	4805      	ldr	r0, [pc, #20]	; (800cdcc <my_UsartInit+0x2c>)
 800cdb8:	f000 f80a 	bl	800cdd0 <myInitUsartMode>

	 //Enable printf Binany
	 printfBin_init();
 800cdbc:	f000 fc1a 	bl	800d5f4 <printfBin_init>
}
 800cdc0:	bf00      	nop
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	2000b1ec 	.word	0x2000b1ec
 800cdc8:	2000b26c 	.word	0x2000b26c
 800cdcc:	2000b04c 	.word	0x2000b04c

0800cdd0 <myInitUsartMode>:

static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f85b 	bl	800ce98 <getUsartDevice>
 800cde2:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800cde4:	f242 32f4 	movw	r2, #9204	; 0x23f4
 800cde8:	2100      	movs	r1, #0
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f003 fe45 	bl	8010a7a <memset>
	uartDev->huart = huart;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	f242 1354 	movw	r3, #8532	; 0x2154
 800ce02:	440b      	add	r3, r1
 800ce04:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f242 1258 	movw	r2, #8536	; 0x2158
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68f9      	ldr	r1, [r7, #12]
 800ce10:	f242 334c 	movw	r3, #9036	; 0x234c
 800ce14:	440b      	add	r3, r1
 800ce16:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	f242 33e0 	movw	r3, #9184	; 0x23e0
 800ce24:	440b      	add	r3, r1
 800ce26:	601a      	str	r2, [r3, #0]
	uartDev->usartmode=usartMode;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	78fa      	ldrb	r2, [r7, #3]
 800ce2c:	711a      	strb	r2, [r3, #4]
	if(usartMode==usartIntMode){
 800ce2e:	78fb      	ldrb	r3, [r7, #3]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d108      	bne.n	800ce46 <myInitUsartMode+0x76>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f042 0220 	orr.w	r2, r2, #32
 800ce42:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800ce44:	e024      	b.n	800ce90 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMACircularMode){
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d10a      	bne.n	800ce62 <myInitUsartMode+0x92>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6818      	ldr	r0, [r3, #0]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800ce56:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f7f8 feb0 	bl	8005bc0 <HAL_UART_Receive_DMA>
}
 800ce60:	e016      	b.n	800ce90 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMAIdleMode){
 800ce62:	78fb      	ldrb	r3, [r7, #3]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d113      	bne.n	800ce90 <myInitUsartMode+0xc0>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800ce72:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ce76:	4619      	mov	r1, r3
 800ce78:	f7f8 fea2 	bl	8005bc0 <HAL_UART_Receive_DMA>
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f042 0210 	orr.w	r2, r2, #16
 800ce8e:	601a      	str	r2, [r3, #0]
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <getUsartDevice>:

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a0c      	ldr	r2, [pc, #48]	; (800ced4 <getUsartDevice+0x3c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d101      	bne.n	800ceac <getUsartDevice+0x14>
		return &Usart1Device;
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <getUsartDevice+0x40>)
 800ceaa:	e00c      	b.n	800cec6 <getUsartDevice+0x2e>
	if(huart==&huart2)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a0b      	ldr	r2, [pc, #44]	; (800cedc <getUsartDevice+0x44>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d101      	bne.n	800ceb8 <getUsartDevice+0x20>
		return &Usart2Device;
 800ceb4:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <getUsartDevice+0x48>)
 800ceb6:	e006      	b.n	800cec6 <getUsartDevice+0x2e>
	if(huart==&huart3)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a0a      	ldr	r2, [pc, #40]	; (800cee4 <getUsartDevice+0x4c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d101      	bne.n	800cec4 <getUsartDevice+0x2c>
		return &Usart3Device;
 800cec0:	4b09      	ldr	r3, [pc, #36]	; (800cee8 <getUsartDevice+0x50>)
 800cec2:	e000      	b.n	800cec6 <getUsartDevice+0x2e>
	return &Usart3Device;
 800cec4:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <getUsartDevice+0x50>)
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	2000b1ec 	.word	0x2000b1ec
 800ced8:	2000d794 	.word	0x2000d794
 800cedc:	2000b26c 	.word	0x2000b26c
 800cee0:	2000b3a0 	.word	0x2000b3a0
 800cee4:	2000b04c 	.word	0x2000b04c
 800cee8:	2000fb88 	.word	0x2000fb88

0800ceec <_write>:
/************************************			*************************************/
/************************************	Transfer*************************************/
/************************************			************************************/
/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len){
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
	return my_write_DMA(&huart3,(uint8_t *)pSrc,len);
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	68b9      	ldr	r1, [r7, #8]
 800cefc:	4803      	ldr	r0, [pc, #12]	; (800cf0c <_write+0x20>)
 800cefe:	f000 f807 	bl	800cf10 <my_write_DMA>
 800cf02:	4603      	mov	r3, r0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	2000b04c 	.word	0x2000b04c

0800cf10 <my_write_DMA>:
int my_write_DMA(UART_HandleTypeDef *huart, uint8_t *pSrc, int len)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff ffbb 	bl	800ce98 <getUsartDevice>
 800cf22:	6178      	str	r0, [r7, #20]
	uint8_t *pDes=uartDev->TxBuf[uartDev->producerTxBufNum];
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cf2a:	4413      	add	r3, r2
 800cf2c:	881b      	ldrh	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cf34:	fb03 f302 	mul.w	r3, r3, r2
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3305      	adds	r3, #5
 800cf3e:	613b      	str	r3, [r7, #16]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	461a      	mov	r2, r3
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	6938      	ldr	r0, [r7, #16]
 800cf48:	f003 fd8c 	bl	8010a64 <memcpy>
	*(pDes+len)='\0';
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	4413      	add	r3, r2
 800cf52:	2200      	movs	r2, #0
 800cf54:	701a      	strb	r2, [r3, #0]
	uartDev->countTxBuf[uartDev->producerTxBufNum] = len;
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cf5c:	4413      	add	r3, r2
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	b291      	uxth	r1, r2
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	4413      	add	r3, r2
 800cf6e:	460a      	mov	r2, r1
 800cf70:	809a      	strh	r2, [r3, #4]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	uartDev->bufferedTxNum++;
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cf78:	4413      	add	r3, r2
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	b299      	uxth	r1, r3
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cf86:	4413      	add	r3, r2
 800cf88:	460a      	mov	r2, r1
 800cf8a:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(uartDev->bufferedTxNum == 1){
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cf92:	4413      	add	r3, r2
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d119      	bne.n	800cfce <my_write_DMA+0xbe>
		HAL_UART_Transmit_DMA(uartDev->huart,pDes,uartDev->countTxBuf[uartDev->producerTxBufNum]);
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cfa4:	4413      	add	r3, r2
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	889b      	ldrh	r3, [r3, #4]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6939      	ldr	r1, [r7, #16]
 800cfb8:	f7f8 fd86 	bl	8005ac8 <HAL_UART_Transmit_DMA>
		uartDev->TxStart = micros();
 800cfbc:	f7fe fb6e 	bl	800b69c <micros>
 800cfc0:	4601      	mov	r1, r0
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800cfc8:	4413      	add	r3, r2
 800cfca:	6019      	str	r1, [r3, #0]
 800cfcc:	e00a      	b.n	800cfe4 <my_write_DMA+0xd4>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the uartDevs would somehow suddenly lost the configurations
		uartDev->bufferedTxNum=uartDev->bufferedTxNum-1+1;
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cfd4:	4413      	add	r3, r2
 800cfd6:	8819      	ldrh	r1, [r3, #0]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cfde:	4413      	add	r3, r2
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	uartDev->producerTxBufNum++;
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cfea:	4413      	add	r3, r2
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	b299      	uxth	r1, r3
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cff8:	4413      	add	r3, r2
 800cffa:	460a      	mov	r2, r1
 800cffc:	801a      	strh	r2, [r3, #0]
	uartDev->producerTxBufNum%=UART_TX_BUF_NUM;
 800cffe:	697a      	ldr	r2, [r7, #20]
 800d000:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d004:	4413      	add	r3, r2
 800d006:	881a      	ldrh	r2, [r3, #0]
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <my_write_DMA+0x124>)
 800d00a:	fba3 1302 	umull	r1, r3, r3, r2
 800d00e:	08d9      	lsrs	r1, r3, #3
 800d010:	460b      	mov	r3, r1
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	440b      	add	r3, r1
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	b299      	uxth	r1, r3
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d022:	4413      	add	r3, r2
 800d024:	460a      	mov	r2, r1
 800d026:	801a      	strh	r2, [r3, #0]
//	while(uartDev->bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800d028:	687b      	ldr	r3, [r7, #4]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	cccccccd 	.word	0xcccccccd

0800d038 <HAL_UART_TxCpltCallback>:
/************************************							*************************************/
/************************************Transfer Complete Callback*************************************/
/************************************							************************************/
/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback for all usart*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff ff29 	bl	800ce98 <getUsartDevice>
 800d046:	6178      	str	r0, [r7, #20]
	if(uartDev->usartmode==usartDMAIdleMode){
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	791b      	ldrb	r3, [r3, #4]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	f040 808a 	bne.w	800d166 <HAL_UART_TxCpltCallback+0x12e>
		UART_DEVICE *uartDev=getUsartDevice(huart);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff ff20 	bl	800ce98 <getUsartDevice>
 800d058:	6138      	str	r0, [r7, #16]
		 /*update information*/
		 uartDev->TxEnd = micros();
 800d05a:	f7fe fb1f 	bl	800b69c <micros>
 800d05e:	4601      	mov	r1, r0
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800d066:	4413      	add	r3, r2
 800d068:	6019      	str	r1, [r3, #0]
		 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800d070:	4413      	add	r3, r2
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	6939      	ldr	r1, [r7, #16]
 800d076:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800d07a:	440b      	add	r3, r1
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	1ad2      	subs	r2, r2, r3
 800d080:	6939      	ldr	r1, [r7, #16]
 800d082:	f242 33ec 	movw	r3, #9196	; 0x23ec
 800d086:	440b      	add	r3, r1
 800d088:	601a      	str	r2, [r3, #0]
		 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d090:	4413      	add	r3, r2
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	4413      	add	r3, r2
 800d09e:	889b      	ldrh	r3, [r3, #4]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	f242 33f0 	movw	r3, #9200	; 0x23f0
 800d0a8:	4413      	add	r3, r2
 800d0aa:	6019      	str	r1, [r3, #0]

		/*One consumption done. move consumer forward*/
		uartDev->consumerTxBufNum++;
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d0b2:	4413      	add	r3, r2
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	b299      	uxth	r1, r3
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d0c0:	4413      	add	r3, r2
 800d0c2:	460a      	mov	r2, r1
 800d0c4:	801a      	strh	r2, [r3, #0]
		uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d0cc:	4413      	add	r3, r2
 800d0ce:	881a      	ldrh	r2, [r3, #0]
 800d0d0:	4b27      	ldr	r3, [pc, #156]	; (800d170 <HAL_UART_TxCpltCallback+0x138>)
 800d0d2:	fba3 1302 	umull	r1, r3, r3, r2
 800d0d6:	08d9      	lsrs	r1, r3, #3
 800d0d8:	460b      	mov	r3, r1
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	440b      	add	r3, r1
 800d0de:	005b      	lsls	r3, r3, #1
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	b299      	uxth	r1, r3
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d0ea:	4413      	add	r3, r2
 800d0ec:	460a      	mov	r2, r1
 800d0ee:	801a      	strh	r2, [r3, #0]

		/*reduce one bufferedTxNum*/
		 uartDev->bufferedTxNum--;
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d0f6:	4413      	add	r3, r2
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	b299      	uxth	r1, r3
 800d0fe:	693a      	ldr	r2, [r7, #16]
 800d100:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d104:	4413      	add	r3, r2
 800d106:	460a      	mov	r2, r1
 800d108:	801a      	strh	r2, [r3, #0]

		/*If it is still positive, go on consume next*/
		if(uartDev->bufferedTxNum>0){
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d110:	4413      	add	r3, r2
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d026      	beq.n	800d166 <HAL_UART_TxCpltCallback+0x12e>
			uartDev->TxStart = micros();
 800d118:	f7fe fac0 	bl	800b69c <micros>
 800d11c:	4601      	mov	r1, r0
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800d124:	4413      	add	r3, r2
 800d126:	6019      	str	r1, [r3, #0]
			uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d12e:	4413      	add	r3, r2
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d138:	fb03 f302 	mul.w	r3, r3, r2
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	4413      	add	r3, r2
 800d140:	3305      	adds	r3, #5
 800d142:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800d14e:	4413      	add	r3, r2
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	4413      	add	r3, r2
 800d15c:	889b      	ldrh	r3, [r3, #4]
 800d15e:	461a      	mov	r2, r3
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	f7f8 fcb1 	bl	8005ac8 <HAL_UART_Transmit_DMA>
		}
	}

}
 800d166:	bf00      	nop
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	cccccccd 	.word	0xcccccccd

0800d174 <myUsartDMAIdleIRQ>:
		myUsartDMAIRQ(&huart3) ;
		HAL_UART_IRQHandler(&huart3);
	}
*/
void myUsartDMAIdleIRQ(UART_HandleTypeDef *huart)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fe8b 	bl	800ce98 <getUsartDevice>
 800d182:	6178      	str	r0, [r7, #20]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	69db      	ldr	r3, [r3, #28]
 800d18a:	f003 0310 	and.w	r3, r3, #16
 800d18e:	2b10      	cmp	r3, #16
 800d190:	bf0c      	ite	eq
 800d192:	2301      	moveq	r3, #1
 800d194:	2300      	movne	r3, #0
 800d196:	b2db      	uxtb	r3, r3
 800d198:	613b      	str	r3, [r7, #16]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0310 	and.w	r3, r3, #16
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	bf14      	ite	ne
 800d1a8:	2301      	movne	r3, #1
 800d1aa:	2300      	moveq	r3, #0
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	60fb      	str	r3, [r7, #12]
	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00c      	beq.n	800d1d0 <myUsartDMAIdleIRQ+0x5c>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d009      	beq.n	800d1d0 <myUsartDMAIdleIRQ+0x5c>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2210      	movs	r2, #16
 800d1c2:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		uartDev->Received = 1;
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	f242 33de 	movw	r3, #9182	; 0x23de
 800d1ca:	4413      	add	r3, r2
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	801a      	strh	r2, [r3, #0]
		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/
	}
}
 800d1d0:	bf00      	nop
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <myUsartIntIRQ>:
	  myUsartIntIRQ(&huart2);
	  HAL_UART_IRQHandler(&huart2);
	}
*/
void myUsartIntIRQ(UART_HandleTypeDef *huart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fe59 	bl	800ce98 <getUsartDevice>
 800d1e6:	60f8      	str	r0, [r7, #12]
	if(uartDev->usartmode==usartIntMode){
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	791b      	ldrb	r3, [r3, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d153      	bne.n	800d298 <myUsartIntIRQ+0xc0>
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff fe51 	bl	800ce98 <getUsartDevice>
 800d1f6:	60b8      	str	r0, [r7, #8]
 	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b20      	cmp	r3, #32
 800d204:	d148      	bne.n	800d298 <myUsartIntIRQ+0xc0>
	{
		*(uartDev->pRxBuf)=(uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	f242 1354 	movw	r3, #8532	; 0x2154
 800d212:	4413      	add	r3, r2
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	b2ca      	uxtb	r2, r1
 800d218:	701a      	strb	r2, [r3, #0]
		if(*(uartDev->pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	f242 1354 	movw	r3, #8532	; 0x2154
 800d220:	4413      	add	r3, r2
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b0a      	cmp	r3, #10
 800d228:	d12b      	bne.n	800d282 <myUsartIntIRQ+0xaa>
		{
			if((uartDev->pRxBuf)!=(uartDev->RxBuf)) // if '0x0a' is not in the beginning
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	f242 1354 	movw	r3, #8532	; 0x2154
 800d230:	4413      	add	r3, r2
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d02c      	beq.n	800d298 <myUsartIntIRQ+0xc0>
			{
				if(*(uartDev->pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	f242 1354 	movw	r3, #8532	; 0x2154
 800d244:	4413      	add	r3, r2
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3b01      	subs	r3, #1
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b0d      	cmp	r3, #13
 800d24e:	d106      	bne.n	800d25e <myUsartIntIRQ+0x86>
			    {
					uartDev->Received = 1;
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	f242 33de 	movw	r3, #9182	; 0x23de
 800d256:	4413      	add	r3, r2
 800d258:	2201      	movs	r2, #1
 800d25a:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else uartDev->pRxBuf++;
	}
	}
}
 800d25c:	e01c      	b.n	800d298 <myUsartIntIRQ+0xc0>
					memset(uartDev->RxBuf,0,UART_RX_BUF_SIZE);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d264:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d268:	2100      	movs	r1, #0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f003 fc05 	bl	8010a7a <memset>
					uartDev->pRxBuf=uartDev->RxBuf;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800d276:	68b9      	ldr	r1, [r7, #8]
 800d278:	f242 1354 	movw	r3, #8532	; 0x2154
 800d27c:	440b      	add	r3, r1
 800d27e:	601a      	str	r2, [r3, #0]
}
 800d280:	e00a      	b.n	800d298 <myUsartIntIRQ+0xc0>
		else uartDev->pRxBuf++;
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	f242 1354 	movw	r3, #8532	; 0x2154
 800d288:	4413      	add	r3, r2
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	f242 1354 	movw	r3, #8532	; 0x2154
 800d294:	440b      	add	r3, r1
 800d296:	601a      	str	r2, [r3, #0]
}
 800d298:	bf00      	nop
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <Usart_ReceivePolling>:

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceivePolling()
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
	/********************************Usart 1 DMA reception is circular****************************/

	/********************************Usart 2 Int reception****************************/
	UsartRxIntReceivedPolling(&Usart2Device);
 800d2a4:	4803      	ldr	r0, [pc, #12]	; (800d2b4 <Usart_ReceivePolling+0x14>)
 800d2a6:	f000 f831 	bl	800d30c <UsartRxIntReceivedPolling>

	/********************************Usart 3 DMA reception****************************/
	UsartRxDMAIdleReceivedPolling(&Usart3Device);
 800d2aa:	4803      	ldr	r0, [pc, #12]	; (800d2b8 <Usart_ReceivePolling+0x18>)
 800d2ac:	f000 f857 	bl	800d35e <UsartRxDMAIdleReceivedPolling>
}
 800d2b0:	bf00      	nop
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	2000b3a0 	.word	0x2000b3a0
 800d2b8:	2000fb88 	.word	0x2000fb88

0800d2bc <_serialCallback>:


inline static void _serialCallback(UART_DEVICE *usartDevice){
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	char *pSerialBuf=(usartDevice->usartmode==usartDMACircularMode)?((char *)usartDevice->RxLineBuf):((char *)usartDevice->RxBuf);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	791b      	ldrb	r3, [r3, #4]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d104      	bne.n	800d2d6 <_serialCallback+0x1a>
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f242 1358 	movw	r3, #8536	; 0x2158
 800d2d2:	4413      	add	r3, r2
 800d2d4:	e002      	b.n	800d2dc <_serialCallback+0x20>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d2dc:	60fb      	str	r3, [r7, #12]

	if(usartDevice==&Usart2Device){
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a08      	ldr	r2, [pc, #32]	; (800d304 <_serialCallback+0x48>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d103      	bne.n	800d2ee <_serialCallback+0x32>
		serial2Callback(pSerialBuf);
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f7fe f9c2 	bl	800b670 <serial2Callback>
	}
	else if(usartDevice==&Usart3Device){
		serial3Callback(pSerialBuf);
	}
}
 800d2ec:	e006      	b.n	800d2fc <_serialCallback+0x40>
	else if(usartDevice==&Usart3Device){
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a05      	ldr	r2, [pc, #20]	; (800d308 <_serialCallback+0x4c>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d102      	bne.n	800d2fc <_serialCallback+0x40>
		serial3Callback(pSerialBuf);
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f002 fbb0 	bl	800fa5c <serial3Callback>
}
 800d2fc:	bf00      	nop
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	2000b3a0 	.word	0x2000b3a0
 800d308:	2000fb88 	.word	0x2000fb88

0800d30c <UsartRxIntReceivedPolling>:

static void UsartRxIntReceivedPolling(UART_DEVICE *UsartDevice){
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	if (UsartDevice->Received == 1) {
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	f242 33de 	movw	r3, #9182	; 0x23de
 800d31a:	4413      	add	r3, r2
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d119      	bne.n	800d356 <UsartRxIntReceivedPolling+0x4a>
		_serialCallback(UsartDevice);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7ff ffca 	bl	800d2bc <_serialCallback>
		memset(UsartDevice->RxBuf,0,UART_RX_BUF_SIZE);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d32e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d332:	2100      	movs	r1, #0
 800d334:	4618      	mov	r0, r3
 800d336:	f003 fba0 	bl	8010a7a <memset>
		UsartDevice->pRxBuf=UsartDevice->RxBuf;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	f242 1354 	movw	r3, #8532	; 0x2154
 800d346:	440b      	add	r3, r1
 800d348:	601a      	str	r2, [r3, #0]
		UsartDevice->Received = 0;
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	f242 33de 	movw	r3, #9182	; 0x23de
 800d350:	4413      	add	r3, r2
 800d352:	2200      	movs	r2, #0
 800d354:	801a      	strh	r2, [r3, #0]
	}
}
 800d356:	bf00      	nop
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <UsartRxDMAIdleReceivedPolling>:

static void UsartRxDMAIdleReceivedPolling(UART_DEVICE *UsartDevice)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	f242 33de 	movw	r3, #9182	; 0x23de
 800d36c:	4413      	add	r3, r2
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	2b01      	cmp	r3, #1
 800d372:	f040 80f1 	bne.w	800d558 <UsartRxDMAIdleReceivedPolling+0x1fa>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d37c:	2b22      	cmp	r3, #34	; 0x22
 800d37e:	d14b      	bne.n	800d418 <UsartRxDMAIdleReceivedPolling+0xba>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	d143      	bne.n	800d418 <UsartRxDMAIdleReceivedPolling+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3a2:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01c      	beq.n	800d3e8 <UsartRxDMAIdleReceivedPolling+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	b299      	uxth	r1, r3
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800d3cc:	4413      	add	r3, r2
 800d3ce:	460a      	mov	r2, r1
 800d3d0:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f4 fda6 	bl	8001f34 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d3fa:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689a      	ldr	r2, [r3, #8]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0201 	bic.w	r2, r2, #1
 800d40e:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2220      	movs	r2, #32
 800d416:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	f242 3350 	movw	r3, #9040	; 0x2350
 800d41e:	4413      	add	r3, r2
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	4619      	mov	r1, r3
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800d42a:	4413      	add	r3, r2
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	440b      	add	r3, r1
 800d430:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d438:	dd19      	ble.n	800d46e <UsartRxDMAIdleReceivedPolling+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	f242 1358 	movw	r3, #8536	; 0x2158
 800d440:	4413      	add	r3, r2
 800d442:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d446:	2100      	movs	r1, #0
 800d448:	4618      	mov	r0, r3
 800d44a:	f003 fb16 	bl	8010a7a <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f242 1258 	movw	r2, #8536	; 0x2158
 800d454:	441a      	add	r2, r3
 800d456:	6879      	ldr	r1, [r7, #4]
 800d458:	f242 334c 	movw	r3, #9036	; 0x234c
 800d45c:	440b      	add	r3, r1
 800d45e:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	f242 3350 	movw	r3, #9040	; 0x2350
 800d466:	4413      	add	r3, r2
 800d468:	2200      	movs	r2, #0
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e056      	b.n	800d51c <UsartRxDMAIdleReceivedPolling+0x1be>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	f242 3350 	movw	r3, #9040	; 0x2350
 800d474:	4413      	add	r3, r2
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	f242 1358 	movw	r3, #8536	; 0x2158
 800d47e:	4413      	add	r3, r2
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	18d0      	adds	r0, r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f503 51fb 	add.w	r1, r3, #8032	; 0x1f60
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800d490:	4413      	add	r3, r2
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	f003 fae5 	bl	8010a64 <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	f242 334c 	movw	r3, #9036	; 0x234c
 800d4a0:	4413      	add	r3, r2
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800d4aa:	440b      	add	r3, r1
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	441a      	add	r2, r3
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	f242 334c 	movw	r3, #9036	; 0x234c
 800d4b6:	440b      	add	r3, r1
 800d4b8:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	b299      	uxth	r1, r3
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	f242 3350 	movw	r3, #9040	; 0x2350
 800d4c4:	4413      	add	r3, r2
 800d4c6:	460a      	mov	r2, r1
 800d4c8:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	f242 3350 	movw	r3, #9040	; 0x2350
 800d4d0:	4413      	add	r3, r2
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	441a      	add	r2, r3
 800d4da:	f242 1358 	movw	r3, #8536	; 0x2158
 800d4de:	4413      	add	r3, r2
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b0a      	cmp	r3, #10
 800d4e4:	d11a      	bne.n	800d51c <UsartRxDMAIdleReceivedPolling+0x1be>
				{
					_serialCallback(UsartDevice);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fee8 	bl	800d2bc <_serialCallback>
					memset(UsartDevice->RxLineBuf,0,len);
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	f242 1358 	movw	r3, #8536	; 0x2158
 800d4f2:	4413      	add	r3, r2
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f003 fabe 	bl	8010a7a <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f242 1258 	movw	r2, #8536	; 0x2158
 800d504:	441a      	add	r2, r3
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	f242 334c 	movw	r3, #9036	; 0x234c
 800d50c:	440b      	add	r3, r1
 800d50e:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	f242 3350 	movw	r3, #9040	; 0x2350
 800d516:	4413      	add	r3, r2
 800d518:	2200      	movs	r2, #0
 800d51a:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	f242 33de 	movw	r3, #9182	; 0x23de
 800d522:	4413      	add	r3, r2
 800d524:	2200      	movs	r2, #0
 800d526:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	f242 3358 	movw	r3, #9048	; 0x2358
 800d52e:	4413      	add	r3, r2
 800d530:	2264      	movs	r2, #100	; 0x64
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f003 faa0 	bl	8010a7a <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d540:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f003 fa97 	bl	8010a7a <memset>
			UsartDevice->countRxBuf = 0;
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800d552:	4413      	add	r3, r2
 800d554:	2200      	movs	r2, #0
 800d556:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d562:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d566:	4619      	mov	r1, r3
 800d568:	f7f8 fb2a 	bl	8005bc0 <HAL_UART_Receive_DMA>
}
 800d56c:	bf00      	nop
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <my_read_DMA_byte>:


int my_read_DMA_byte(UART_HandleTypeDef *huart){
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	int c=-1;
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295
 800d580:	617b      	str	r3, [r7, #20]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fc88 	bl	800ce98 <getUsartDevice>
 800d588:	6138      	str	r0, [r7, #16]
	uint32_t RdmaInd=(UART_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (UART_RX_BUF_SIZE - 1);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800d596:	f240 13f3 	movw	r3, #499	; 0x1f3
 800d59a:	4013      	ands	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]
    if(uartDev->RxInd != RdmaInd){
 800d59e:	693a      	ldr	r2, [r7, #16]
 800d5a0:	f242 3354 	movw	r3, #9044	; 0x2354
 800d5a4:	4413      	add	r3, r2
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d01d      	beq.n	800d5ea <my_read_DMA_byte+0x76>
      c = uartDev->RxBuf[uartDev->RxInd++];
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	f242 3354 	movw	r3, #9044	; 0x2354
 800d5b4:	4413      	add	r3, r2
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	1c51      	adds	r1, r2, #1
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f242 3354 	movw	r3, #9044	; 0x2354
 800d5c0:	4403      	add	r3, r0
 800d5c2:	6019      	str	r1, [r3, #0]
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	617b      	str	r3, [r7, #20]
      uartDev->RxInd &= (UART_RX_BUF_SIZE - 1);
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	f242 3354 	movw	r3, #9044	; 0x2354
 800d5d6:	4413      	add	r3, r2
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d5de:	401a      	ands	r2, r3
 800d5e0:	6939      	ldr	r1, [r7, #16]
 800d5e2:	f242 3354 	movw	r3, #9044	; 0x2354
 800d5e6:	440b      	add	r3, r1
 800d5e8:	601a      	str	r2, [r3, #0]
    }
    return c;
 800d5ea:	697b      	ldr	r3, [r7, #20]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <printfBin_init>:
 */
static PRINTFBINSTRUCT printfBinStruct;
//input: array pointer, and data number
//function: add header and tail, send into buffer
static void printfBin_init()
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800d5f8:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	480a      	ldr	r0, [pc, #40]	; (800d628 <printfBin_init+0x34>)
 800d600:	f003 fa3b 	bl	8010a7a <memset>
	printfBinStruct.header[0]=0x5a;
 800d604:	4b08      	ldr	r3, [pc, #32]	; (800d628 <printfBin_init+0x34>)
 800d606:	225a      	movs	r2, #90	; 0x5a
 800d608:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800d60a:	4b07      	ldr	r3, [pc, #28]	; (800d628 <printfBin_init+0x34>)
 800d60c:	225a      	movs	r2, #90	; 0x5a
 800d60e:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800d610:	4b05      	ldr	r3, [pc, #20]	; (800d628 <printfBin_init+0x34>)
 800d612:	22a5      	movs	r2, #165	; 0xa5
 800d614:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800d616:	4b04      	ldr	r3, [pc, #16]	; (800d628 <printfBin_init+0x34>)
 800d618:	22a5      	movs	r2, #165	; 0xa5
 800d61a:	70da      	strb	r2, [r3, #3]
	printfBinStruct.pData=printfBinStruct.data;
 800d61c:	4b02      	ldr	r3, [pc, #8]	; (800d628 <printfBin_init+0x34>)
 800d61e:	4a03      	ldr	r2, [pc, #12]	; (800d62c <printfBin_init+0x38>)
 800d620:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000ce8 	.word	0x20000ce8
 800d62c:	20000cec 	.word	0x20000cec

0800d630 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f04f 0200 	mov.w	r2, #0
 800d650:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a0e      	ldr	r2, [pc, #56]	; (800d698 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800d65e:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f04f 0200 	mov.w	r2, #0
 800d666:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f240 6266 	movw	r2, #1638	; 0x666
 800d66e:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f643 1299 	movw	r2, #14745	; 0x3999
 800d676:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a08      	ldr	r2, [pc, #32]	; (800d69c <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800d67c:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a07      	ldr	r2, [pc, #28]	; (800d6a0 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800d682:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2210      	movs	r2, #16
 800d688:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	48ca0080 	.word	0x48ca0080
 800d69c:	2000a9bc 	.word	0x2000a9bc
 800d6a0:	40021000 	.word	0x40021000

0800d6a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d6a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d6dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d6a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d6aa:	e003      	b.n	800d6b4 <LoopCopyDataInit>

0800d6ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d6ac:	4b0c      	ldr	r3, [pc, #48]	; (800d6e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d6ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d6b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d6b2:	3104      	adds	r1, #4

0800d6b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d6b4:	480b      	ldr	r0, [pc, #44]	; (800d6e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d6b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d6ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d6bc:	d3f6      	bcc.n	800d6ac <CopyDataInit>
  ldr  r2, =_sbss
 800d6be:	4a0b      	ldr	r2, [pc, #44]	; (800d6ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d6c0:	e002      	b.n	800d6c8 <LoopFillZerobss>

0800d6c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d6c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d6c4:	f842 3b04 	str.w	r3, [r2], #4

0800d6c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d6c8:	4b09      	ldr	r3, [pc, #36]	; (800d6f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d6ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d6cc:	d3f9      	bcc.n	800d6c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d6ce:	f7fb fd35 	bl	800913c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d6d2:	f003 f99b 	bl	8010a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d6d6:	f7fa fec1 	bl	800845c <main>
  bx  lr    
 800d6da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d6dc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800d6e0:	080160bc 	.word	0x080160bc
  ldr  r0, =_sdata
 800d6e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d6e8:	20000578 	.word	0x20000578
  ldr  r2, =_sbss
 800d6ec:	20000578 	.word	0x20000578
  ldr  r3, = _ebss
 800d6f0:	20011f80 	.word	0x20011f80

0800d6f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d6f4:	e7fe      	b.n	800d6f4 <ADC_IRQHandler>
	...

0800d6f8 <HAL_CAN_RxFifo0MsgPendingCallback>:



/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  /* Get RX message */

  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800d702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d704:	4a0a      	ldr	r2, [pc, #40]	; (800d730 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800d706:	2100      	movs	r1, #0
 800d708:	4808      	ldr	r0, [pc, #32]	; (800d72c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800d70a:	f000 f831 	bl	800d770 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	bf14      	ite	ne
 800d714:	2301      	movne	r3, #1
 800d716:	2300      	moveq	r3, #0
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800d71e:	f7fa ffe9 	bl	80086f4 <Error_Handler>
  }
  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
  //printf("ID[%d]: %x %x %x %x %x %x %x %x\r\n", canbus.RxHeader.StdId, canbus.RxData[0], canbus.RxData[1], canbus.RxData[2], canbus.RxData[3], canbus.RxData[4], canbus.RxData[5], canbus.RxData[6], canbus.RxData[7]);
  //printf("FIFO0: ID[%d]\r\n", canbus.RxHeader.StdId, canbus.RxData);
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20001010 	.word	0x20001010
 800d730:	20001050 	.word	0x20001050

0800d734 <HAL_CAN_RxFifo1MsgPendingCallback>:

/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Get RX message */


  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800d73c:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800d73e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d740:	4a0a      	ldr	r2, [pc, #40]	; (800d76c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800d742:	2101      	movs	r1, #1
 800d744:	4808      	ldr	r0, [pc, #32]	; (800d768 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800d746:	f000 f813 	bl	800d770 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bf14      	ite	ne
 800d750:	2301      	movne	r3, #1
 800d752:	2300      	moveq	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800d75a:	f7fa ffcb 	bl	80086f4 <Error_Handler>
  }
  //printf("FIFO1: ID[%d]\r\n", canbus.RxHeader.StdId);

  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
}
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20001010 	.word	0x20001010
 800d76c:	20001050 	.word	0x20001050

0800d770 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>:

static HAL_StatusTypeDef my_HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b088      	sub	sp, #32
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d784:	77fb      	strb	r3, [r7, #31]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d786:	7ffb      	ldrb	r3, [r7, #31]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d003      	beq.n	800d794 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x24>
 800d78c:	7ffb      	ldrb	r3, [r7, #31]
 800d78e:	2b02      	cmp	r3, #2
 800d790:	f040 814a 	bne.w	800da28 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b8>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d113      	bne.n	800d7c2 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f003 0303 	and.w	r3, r3, #3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	bf0c      	ite	eq
 800d7a8:	2301      	moveq	r3, #1
 800d7aa:	2300      	movne	r3, #0
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d01b      	beq.n	800d7ea <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e139      	b.n	800da36 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f003 0303 	and.w	r3, r3, #3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bf0c      	ite	eq
 800d7d0:	2301      	moveq	r3, #1
 800d7d2:	2300      	movne	r3, #0
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d007      	beq.n	800d7ea <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e125      	b.n	800da36 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	331b      	adds	r3, #27
 800d7f2:	011b      	lsls	r3, r3, #4
 800d7f4:	4413      	add	r3, r2
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0204 	and.w	r2, r3, #4
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10c      	bne.n	800d822 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xb2>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	331b      	adds	r3, #27
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	4413      	add	r3, r2
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	0d5b      	lsrs	r3, r3, #21
 800d818:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e00b      	b.n	800d83a <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xca>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	331b      	adds	r3, #27
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	4413      	add	r3, r2
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	08db      	lsrs	r3, r3, #3
 800d832:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	331b      	adds	r3, #27
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	4413      	add	r3, r2
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0202 	and.w	r2, r3, #2
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	331b      	adds	r3, #27
 800d858:	011b      	lsls	r3, r3, #4
 800d85a:	4413      	add	r3, r2
 800d85c:	3304      	adds	r3, #4
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 020f 	and.w	r2, r3, #15
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	331b      	adds	r3, #27
 800d870:	011b      	lsls	r3, r3, #4
 800d872:	4413      	add	r3, r2
 800d874:	3304      	adds	r3, #4
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	331b      	adds	r3, #27
 800d888:	011b      	lsls	r3, r3, #4
 800d88a:	4413      	add	r3, r2
 800d88c:	3304      	adds	r3, #4
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	0c1b      	lsrs	r3, r3, #16
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	615a      	str	r2, [r3, #20]



    /**********************  added  ******************************************/
	int i = pHeader->StdId/6;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a68      	ldr	r2, [pc, #416]	; (800da40 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800d89e:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a2:	089b      	lsrs	r3, r3, #2
 800d8a4:	61bb      	str	r3, [r7, #24]
    int j = pHeader->StdId%6;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6819      	ldr	r1, [r3, #0]
 800d8aa:	4b65      	ldr	r3, [pc, #404]	; (800da40 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800d8ac:	fba3 2301 	umull	r2, r3, r3, r1
 800d8b0:	089a      	lsrs	r2, r3, #2
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4413      	add	r3, r2
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	1aca      	subs	r2, r1, r3
 800d8bc:	617a      	str	r2, [r7, #20]
    softArm.actuatorOnline[j][j]=10;
 800d8be:	4961      	ldr	r1, [pc, #388]	; (800da44 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	18ca      	adds	r2, r1, r3
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f603 732a 	addw	r3, r3, #3882	; 0xf2a
 800d8d4:	220a      	movs	r2, #10
 800d8d6:	701a      	strb	r2, [r3, #0]
    aData=(uint8_t *)(&softArm.sensorDataBuffer[i][j]);
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	4413      	add	r3, r2
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	697a      	ldr	r2, [r7, #20]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	33b8      	adds	r3, #184	; 0xb8
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	4a56      	ldr	r2, [pc, #344]	; (800da44 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800d8ec:	4413      	add	r3, r2
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	603b      	str	r3, [r7, #0]
    /****************************************************************/

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	011b      	lsls	r3, r3, #4
 800d8fa:	4413      	add	r3, r2
 800d8fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	b2da      	uxtb	r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	4413      	add	r3, r2
 800d912:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	0a1a      	lsrs	r2, r3, #8
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	011b      	lsls	r3, r3, #4
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	0c1a      	lsrs	r2, r3, #16
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	3302      	adds	r3, #2
 800d938:	b2d2      	uxtb	r2, r2
 800d93a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	4413      	add	r3, r2
 800d946:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	0e1a      	lsrs	r2, r3, #24
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	3303      	adds	r3, #3
 800d952:	b2d2      	uxtb	r2, r2
 800d954:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	011b      	lsls	r3, r3, #4
 800d95e:	4413      	add	r3, r2
 800d960:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	3304      	adds	r3, #4
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	4413      	add	r3, r2
 800d978:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	0a1a      	lsrs	r2, r3, #8
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	3305      	adds	r3, #5
 800d984:	b2d2      	uxtb	r2, r2
 800d986:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	4413      	add	r3, r2
 800d992:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	0c1a      	lsrs	r2, r3, #16
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	3306      	adds	r3, #6
 800d99e:	b2d2      	uxtb	r2, r2
 800d9a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	011b      	lsls	r3, r3, #4
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	0e1a      	lsrs	r2, r3, #24
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	3307      	adds	r3, #7
 800d9b8:	b2d2      	uxtb	r2, r2
 800d9ba:	701a      	strb	r2, [r3, #0]


    /**********************  Added Docode the sensor Data to SPI buffer*******************************/
    decodeSensorData(&softArm.sensorDataBuffer[i][j],&(softArm.sensorData.data[i][j]));
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4413      	add	r3, r2
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	33b8      	adds	r3, #184	; 0xb8
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	4a1d      	ldr	r2, [pc, #116]	; (800da44 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800d9d0:	4413      	add	r3, r2
 800d9d2:	1d18      	adds	r0, r3, #4
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	0052      	lsls	r2, r2, #1
 800d9da:	441a      	add	r2, r3
 800d9dc:	0093      	lsls	r3, r2, #2
 800d9de:	461a      	mov	r2, r3
 800d9e0:	69b9      	ldr	r1, [r7, #24]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	00db      	lsls	r3, r3, #3
 800d9e6:	440b      	add	r3, r1
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800d9f0:	4a14      	ldr	r2, [pc, #80]	; (800da44 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800d9f2:	4413      	add	r3, r2
 800d9f4:	3306      	adds	r3, #6
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	f001 fddb 	bl	800f5b2 <decodeSensorData>
    /*******************************************************************/


    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d108      	bne.n	800da14 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2a4>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68da      	ldr	r2, [r3, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f042 0220 	orr.w	r2, r2, #32
 800da10:	60da      	str	r2, [r3, #12]
 800da12:	e007      	b.n	800da24 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b4>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f042 0220 	orr.w	r2, r2, #32
 800da22:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    //printf("sensor[%d]: %hu\r\n", pHeader->StdId, softArm.sensorData[i][j].pressure);

    return HAL_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	e006      	b.n	800da36 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
  }
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	aaaaaaab 	.word	0xaaaaaaab
 800da44:	200015e0 	.word	0x200015e0

0800da48 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	4a04      	ldr	r2, [pc, #16]	; (800da64 <_ZN3ros3MsgC1Ev+0x1c>)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr
 800da64:	08015b78 	.word	0x08015b78

0800da68 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
      data(0)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff ffe8 	bl	800da48 <_ZN3ros3MsgC1Ev>
 800da78:	4a05      	ldr	r2, [pc, #20]	; (800da90 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	809a      	strh	r2, [r3, #4]
    {
    }
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4618      	mov	r0, r3
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	08015b60 	.word	0x08015b60

0800da94 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8899      	ldrh	r1, [r3, #4]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	4413      	add	r3, r2
 800daac:	b2ca      	uxtb	r2, r1
 800daae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	889b      	ldrh	r3, [r3, #4]
 800dab4:	0a1b      	lsrs	r3, r3, #8
 800dab6:	b299      	uxth	r1, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3301      	adds	r3, #1
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	4413      	add	r3, r2
 800dac0:	b2ca      	uxtb	r2, r1
 800dac2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3302      	adds	r3, #2
 800dac8:	60fb      	str	r3, [r7, #12]
      return offset;
 800daca:	68fb      	ldr	r3, [r7, #12]
    }
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	4413      	add	r3, r2
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	889b      	ldrh	r3, [r3, #4]
 800daf8:	b21a      	sxth	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3301      	adds	r3, #1
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	440b      	add	r3, r1
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	021b      	lsls	r3, r3, #8
 800db06:	b21b      	sxth	r3, r3
 800db08:	4313      	orrs	r3, r2
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3302      	adds	r3, #2
 800db16:	60fb      	str	r3, [r7, #12]
     return offset;
 800db18:	68fb      	ldr	r3, [r7, #12]
    }
 800db1a:	4618      	mov	r0, r3
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
	...

0800db28 <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	4b03      	ldr	r3, [pc, #12]	; (800db40 <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800db32:	4618      	mov	r0, r3
 800db34:	370c      	adds	r7, #12
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	08015884 	.word	0x08015884

0800db44 <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	4b03      	ldr	r3, [pc, #12]	; (800db5c <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	08015894 	.word	0x08015894

0800db60 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7ff ff6c 	bl	800da48 <_ZN3ros3MsgC1Ev>
 800db70:	4a06      	ldr	r2, [pc, #24]	; (800db8c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	711a      	strb	r2, [r3, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4a04      	ldr	r2, [pc, #16]	; (800db90 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800db80:	609a      	str	r2, [r3, #8]
    {
    }
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	08015b48 	.word	0x08015b48
 800db90:	080158b8 	.word	0x080158b8

0800db94 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	4413      	add	r3, r2
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7912      	ldrb	r2, [r2, #4]
 800dbac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f2 fb41 	bl	8000240 <strlen>
 800dbbe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f000 fe6f 	bl	800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	683a      	ldr	r2, [r7, #0]
 800dbd8:	18d0      	adds	r0, r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	f002 ff3f 	bl	8010a64 <memcpy>
      offset += length_msg;
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	4413      	add	r3, r2
 800dbec:	60fb      	str	r3, [r7, #12]
      return offset;
 800dbee:	68fb      	ldr	r3, [r7, #12]
    }
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	781a      	ldrb	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3301      	adds	r3, #1
 800dc16:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	441a      	add	r2, r3
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	4611      	mov	r1, r2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 fe5f 	bl	800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	4413      	add	r3, r2
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d20c      	bcs.n	800dc5a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	441a      	add	r2, r3
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	440b      	add	r3, r1
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	3301      	adds	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e7ec      	b.n	800dc34 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800dc5a:	693a      	ldr	r2, [r7, #16]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	3b01      	subs	r3, #1
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	4413      	add	r3, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	441a      	add	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	613b      	str	r3, [r7, #16]
     return offset;
 800dc7e:	693b      	ldr	r3, [r7, #16]
    }
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	080158bc 	.word	0x080158bc

0800dca4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	4b03      	ldr	r3, [pc, #12]	; (800dcbc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800dcae:	4618      	mov	r0, r3
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	080158d0 	.word	0x080158d0

0800dcc0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff febc 	bl	800da48 <_ZN3ros3MsgC1Ev>
 800dcd0:	4a0c      	ldr	r2, [pc, #48]	; (800dd04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	605a      	str	r2, [r3, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	60da      	str	r2, [r3, #12]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	611a      	str	r2, [r3, #16]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	619a      	str	r2, [r3, #24]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	61da      	str	r2, [r3, #28]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	08015b30 	.word	0x08015b30

0800dd08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08a      	sub	sp, #40	; 0x28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6859      	ldr	r1, [r3, #4]
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	4413      	add	r3, r2
 800dd20:	b2ca      	uxtb	r2, r1
 800dd22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	0a19      	lsrs	r1, r3, #8
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	4413      	add	r3, r2
 800dd32:	b2ca      	uxtb	r2, r1
 800dd34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	0c19      	lsrs	r1, r3, #16
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	3302      	adds	r3, #2
 800dd40:	683a      	ldr	r2, [r7, #0]
 800dd42:	4413      	add	r3, r2
 800dd44:	b2ca      	uxtb	r2, r1
 800dd46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	0e19      	lsrs	r1, r3, #24
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	3303      	adds	r3, #3
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	4413      	add	r3, r2
 800dd56:	b2ca      	uxtb	r2, r1
 800dd58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800dd60:	2300      	movs	r3, #0
 800dd62:	623b      	str	r3, [r7, #32]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	6a3a      	ldr	r2, [r7, #32]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d22b      	bcs.n	800ddc6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68da      	ldr	r2, [r3, #12]
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800dd7c:	6939      	ldr	r1, [r7, #16]
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	4413      	add	r3, r2
 800dd84:	b2ca      	uxtb	r2, r1
 800dd86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	0a19      	lsrs	r1, r3, #8
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	3301      	adds	r3, #1
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	4413      	add	r3, r2
 800dd94:	b2ca      	uxtb	r2, r1
 800dd96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	0c19      	lsrs	r1, r3, #16
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	3302      	adds	r3, #2
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	4413      	add	r3, r2
 800dda4:	b2ca      	uxtb	r2, r1
 800dda6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	0e19      	lsrs	r1, r3, #24
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	3303      	adds	r3, #3
 800ddb0:	683a      	ldr	r2, [r7, #0]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	b2ca      	uxtb	r2, r1
 800ddb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	3304      	adds	r3, #4
 800ddbc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	623b      	str	r3, [r7, #32]
 800ddc4:	e7ce      	b.n	800dd64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6919      	ldr	r1, [r3, #16]
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	4413      	add	r3, r2
 800ddd0:	b2ca      	uxtb	r2, r1
 800ddd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	0a19      	lsrs	r1, r3, #8
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	3301      	adds	r3, #1
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	4413      	add	r3, r2
 800dde2:	b2ca      	uxtb	r2, r1
 800dde4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	0c19      	lsrs	r1, r3, #16
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	3302      	adds	r3, #2
 800ddf0:	683a      	ldr	r2, [r7, #0]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	b2ca      	uxtb	r2, r1
 800ddf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	0e19      	lsrs	r1, r3, #24
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	3303      	adds	r3, #3
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4413      	add	r3, r2
 800de06:	b2ca      	uxtb	r2, r1
 800de08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	3304      	adds	r3, #4
 800de0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	69fa      	ldr	r2, [r7, #28]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d22b      	bcs.n	800de76 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	699a      	ldr	r2, [r3, #24]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800de2c:	68f9      	ldr	r1, [r7, #12]
 800de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	4413      	add	r3, r2
 800de34:	b2ca      	uxtb	r2, r1
 800de36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	0a19      	lsrs	r1, r3, #8
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	3301      	adds	r3, #1
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	4413      	add	r3, r2
 800de44:	b2ca      	uxtb	r2, r1
 800de46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	0c19      	lsrs	r1, r3, #16
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	3302      	adds	r3, #2
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	4413      	add	r3, r2
 800de54:	b2ca      	uxtb	r2, r1
 800de56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	0e19      	lsrs	r1, r3, #24
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	3303      	adds	r3, #3
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	4413      	add	r3, r2
 800de64:	b2ca      	uxtb	r2, r1
 800de66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	3304      	adds	r3, #4
 800de6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	3301      	adds	r3, #1
 800de72:	61fb      	str	r3, [r7, #28]
 800de74:	e7ce      	b.n	800de14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	69d9      	ldr	r1, [r3, #28]
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	4413      	add	r3, r2
 800de80:	b2ca      	uxtb	r2, r1
 800de82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	69db      	ldr	r3, [r3, #28]
 800de88:	0a19      	lsrs	r1, r3, #8
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	3301      	adds	r3, #1
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4413      	add	r3, r2
 800de92:	b2ca      	uxtb	r2, r1
 800de94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	0c19      	lsrs	r1, r3, #16
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	3302      	adds	r3, #2
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	4413      	add	r3, r2
 800dea4:	b2ca      	uxtb	r2, r1
 800dea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	69db      	ldr	r3, [r3, #28]
 800deac:	0e19      	lsrs	r1, r3, #24
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	3303      	adds	r3, #3
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	4413      	add	r3, r2
 800deb6:	b2ca      	uxtb	r2, r1
 800deb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	3304      	adds	r3, #4
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800dec0:	2300      	movs	r3, #0
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	69ba      	ldr	r2, [r7, #24]
 800deca:	429a      	cmp	r2, r3
 800decc:	d228      	bcs.n	800df20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f2 f9b0 	bl	8000240 <strlen>
 800dee0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	4413      	add	r3, r2
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fcde 	bl	800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	3304      	adds	r3, #4
 800def4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	18d0      	adds	r0, r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4413      	add	r3, r2
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	697a      	ldr	r2, [r7, #20]
 800df0a:	4619      	mov	r1, r3
 800df0c:	f002 fdaa 	bl	8010a64 <memcpy>
      offset += length_stringsi;
 800df10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	4413      	add	r3, r2
 800df16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	3301      	adds	r3, #1
 800df1c:	61bb      	str	r3, [r7, #24]
 800df1e:	e7d1      	b.n	800dec4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800df22:	4618      	mov	r0, r3
 800df24:	3728      	adds	r7, #40	; 0x28
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b08e      	sub	sp, #56	; 0x38
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800df38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4413      	add	r3, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800df42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df44:	3301      	adds	r3, #1
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4413      	add	r3, r2
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	021b      	lsls	r3, r3, #8
 800df4e:	6a3a      	ldr	r2, [r7, #32]
 800df50:	4313      	orrs	r3, r2
 800df52:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800df54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df56:	3302      	adds	r3, #2
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	4413      	add	r3, r2
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	041b      	lsls	r3, r3, #16
 800df60:	6a3a      	ldr	r2, [r7, #32]
 800df62:	4313      	orrs	r3, r2
 800df64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800df66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df68:	3303      	adds	r3, #3
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	4413      	add	r3, r2
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	061b      	lsls	r3, r3, #24
 800df72:	6a3a      	ldr	r2, [r7, #32]
 800df74:	4313      	orrs	r3, r2
 800df76:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800df78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7a:	3304      	adds	r3, #4
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	6a3a      	ldr	r2, [r7, #32]
 800df84:	429a      	cmp	r2, r3
 800df86:	d90a      	bls.n	800df9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68da      	ldr	r2, [r3, #12]
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f003 fcc0 	bl	8011918 <realloc>
 800df98:	4602      	mov	r2, r0
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a3a      	ldr	r2, [r7, #32]
 800dfa2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d236      	bcs.n	800e020 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	440a      	add	r2, r1
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800dfc4:	697a      	ldr	r2, [r7, #20]
 800dfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc8:	3301      	adds	r3, #1
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	440b      	add	r3, r1
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	021b      	lsls	r3, r3, #8
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfda:	3302      	adds	r3, #2
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	440b      	add	r3, r1
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	041b      	lsls	r3, r3, #16
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfec:	3303      	adds	r3, #3
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	440b      	add	r3, r1
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	061b      	lsls	r3, r3, #24
 800dff6:	4313      	orrs	r3, r2
 800dff8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800dffa:	697a      	ldr	r2, [r7, #20]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800e000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e002:	3304      	adds	r3, #4
 800e004:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68da      	ldr	r2, [r3, #12]
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	3208      	adds	r2, #8
 800e014:	6812      	ldr	r2, [r2, #0]
 800e016:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	3301      	adds	r3, #1
 800e01c:	633b      	str	r3, [r7, #48]	; 0x30
 800e01e:	e7c3      	b.n	800dfa8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800e020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	4413      	add	r3, r2
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800e02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02c:	3301      	adds	r3, #1
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	4413      	add	r3, r2
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	69fa      	ldr	r2, [r7, #28]
 800e038:	4313      	orrs	r3, r2
 800e03a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800e03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03e:	3302      	adds	r3, #2
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	041b      	lsls	r3, r3, #16
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800e04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e050:	3303      	adds	r3, #3
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	4413      	add	r3, r2
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	061b      	lsls	r3, r3, #24
 800e05a:	69fa      	ldr	r2, [r7, #28]
 800e05c:	4313      	orrs	r3, r2
 800e05e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800e060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e062:	3304      	adds	r3, #4
 800e064:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d90a      	bls.n	800e086 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699a      	ldr	r2, [r3, #24]
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f003 fc4c 	bl	8011918 <realloc>
 800e080:	4602      	mov	r2, r0
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800e08c:	2300      	movs	r3, #0
 800e08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e096:	429a      	cmp	r2, r3
 800e098:	d236      	bcs.n	800e108 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	440a      	add	r2, r1
 800e0a6:	7812      	ldrb	r2, [r2, #0]
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e0ac:	693a      	ldr	r2, [r7, #16]
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	440b      	add	r3, r1
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	021b      	lsls	r3, r3, #8
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	440b      	add	r3, r1
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	041b      	lsls	r3, r3, #16
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d4:	3303      	adds	r3, #3
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	440b      	add	r3, r1
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	061b      	lsls	r3, r3, #24
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800e0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	699a      	ldr	r2, [r3, #24]
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	3214      	adds	r2, #20
 800e0fc:	6812      	ldr	r2, [r2, #0]
 800e0fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	3301      	adds	r3, #1
 800e104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e106:	e7c3      	b.n	800e090 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800e108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	4413      	add	r3, r2
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800e112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e114:	3301      	adds	r3, #1
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	4413      	add	r3, r2
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	021b      	lsls	r3, r3, #8
 800e11e:	69ba      	ldr	r2, [r7, #24]
 800e120:	4313      	orrs	r3, r2
 800e122:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800e124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e126:	3302      	adds	r3, #2
 800e128:	683a      	ldr	r2, [r7, #0]
 800e12a:	4413      	add	r3, r2
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	041b      	lsls	r3, r3, #16
 800e130:	69ba      	ldr	r2, [r7, #24]
 800e132:	4313      	orrs	r3, r2
 800e134:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800e136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e138:	3303      	adds	r3, #3
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	4413      	add	r3, r2
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	061b      	lsls	r3, r3, #24
 800e142:	69ba      	ldr	r2, [r7, #24]
 800e144:	4313      	orrs	r3, r2
 800e146:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800e148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14a:	3304      	adds	r3, #4
 800e14c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	69ba      	ldr	r2, [r7, #24]
 800e154:	429a      	cmp	r2, r3
 800e156:	d90a      	bls.n	800e16e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f003 fbd8 	bl	8011918 <realloc>
 800e168:	4602      	mov	r2, r0
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800e174:	2300      	movs	r3, #0
 800e176:	62bb      	str	r3, [r7, #40]	; 0x28
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e17e:	429a      	cmp	r2, r3
 800e180:	d23f      	bcs.n	800e202 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800e182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	441a      	add	r2, r3
 800e188:	f107 030c 	add.w	r3, r7, #12
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 fbaa 	bl	800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800e194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e196:	3304      	adds	r3, #4
 800e198:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800e19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
 800e19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d20c      	bcs.n	800e1c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	441a      	add	r2, r3
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	440b      	add	r3, r1
 800e1b8:	7812      	ldrb	r2, [r2, #0]
 800e1ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	3301      	adds	r3, #1
 800e1c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e1c2:	e7ec      	b.n	800e19e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800e1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	683a      	ldr	r2, [r7, #0]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800e1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	441a      	add	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800e1e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	3220      	adds	r2, #32
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800e200:	e7ba      	b.n	800e178 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800e202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800e204:	4618      	mov	r0, r3
 800e206:	3738      	adds	r7, #56	; 0x38
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	4b03      	ldr	r3, [pc, #12]	; (800e224 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800e216:	4618      	mov	r0, r3
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	08015a84 	.word	0x08015a84

0800e228 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	4b03      	ldr	r3, [pc, #12]	; (800e240 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	080158f4 	.word	0x080158f4

0800e244 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff fbfa 	bl	800da48 <_ZN3ros3MsgC1Ev>
 800e254:	4a0b      	ldr	r2, [pc, #44]	; (800e284 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	809a      	strh	r2, [r3, #4]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a09      	ldr	r2, [pc, #36]	; (800e288 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800e264:	609a      	str	r2, [r3, #8]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4a07      	ldr	r2, [pc, #28]	; (800e288 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800e26a:	60da      	str	r2, [r3, #12]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a06      	ldr	r2, [pc, #24]	; (800e288 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800e270:	611a      	str	r2, [r3, #16]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	615a      	str	r2, [r3, #20]
    {
    }
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4618      	mov	r0, r3
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	08015b18 	.word	0x08015b18
 800e288:	080158b8 	.word	0x080158b8

0800e28c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b088      	sub	sp, #32
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8899      	ldrh	r1, [r3, #4]
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	b2ca      	uxtb	r2, r1
 800e2a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	889b      	ldrh	r3, [r3, #4]
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	b299      	uxth	r1, r3
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	b2ca      	uxtb	r2, r1
 800e2ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	3302      	adds	r3, #2
 800e2c0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f1 ffba 	bl	8000240 <strlen>
 800e2cc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	683a      	ldr	r2, [r7, #0]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	69b9      	ldr	r1, [r7, #24]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f000 fae8 	bl	800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	18d0      	adds	r0, r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	f002 fbb8 	bl	8010a64 <memcpy>
      offset += length_topic_name;
 800e2f4:	69fa      	ldr	r2, [r7, #28]
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	4618      	mov	r0, r3
 800e302:	f7f1 ff9d 	bl	8000240 <strlen>
 800e306:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	683a      	ldr	r2, [r7, #0]
 800e30c:	4413      	add	r3, r2
 800e30e:	6979      	ldr	r1, [r7, #20]
 800e310:	4618      	mov	r0, r3
 800e312:	f000 facb 	bl	800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	3304      	adds	r3, #4
 800e31a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	18d0      	adds	r0, r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4619      	mov	r1, r3
 800e32a:	f002 fb9b 	bl	8010a64 <memcpy>
      offset += length_message_type;
 800e32e:	69fa      	ldr	r2, [r7, #28]
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	4413      	add	r3, r2
 800e334:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f1 ff80 	bl	8000240 <strlen>
 800e340:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	4413      	add	r3, r2
 800e348:	6939      	ldr	r1, [r7, #16]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 faae 	bl	800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	3304      	adds	r3, #4
 800e354:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	683a      	ldr	r2, [r7, #0]
 800e35a:	18d0      	adds	r0, r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	4619      	mov	r1, r3
 800e364:	f002 fb7e 	bl	8010a64 <memcpy>
      offset += length_md5sum;
 800e368:	69fa      	ldr	r2, [r7, #28]
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	4413      	add	r3, r2
 800e36e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800e376:	68f9      	ldr	r1, [r7, #12]
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4413      	add	r3, r2
 800e37e:	b2ca      	uxtb	r2, r1
 800e380:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	0a19      	lsrs	r1, r3, #8
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	3301      	adds	r3, #1
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	4413      	add	r3, r2
 800e38e:	b2ca      	uxtb	r2, r1
 800e390:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	0c19      	lsrs	r1, r3, #16
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	3302      	adds	r3, #2
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	b2ca      	uxtb	r2, r1
 800e3a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	0e19      	lsrs	r1, r3, #24
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	3303      	adds	r3, #3
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	b2ca      	uxtb	r2, r1
 800e3b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	61fb      	str	r3, [r7, #28]
      return offset;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
    }
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b08a      	sub	sp, #40	; 0x28
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
 800e3ca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	889b      	ldrh	r3, [r3, #4]
 800e3e2:	b21a      	sxth	r2, r3
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	440b      	add	r3, r1
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	b21b      	sxth	r3, r3
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	b21b      	sxth	r3, r3
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	3302      	adds	r3, #2
 800e400:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	441a      	add	r2, r3
 800e408:	f107 0314 	add.w	r3, r7, #20
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 fa6a 	bl	800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	3304      	adds	r3, #4
 800e418:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	627b      	str	r3, [r7, #36]	; 0x24
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	4413      	add	r3, r2
 800e424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e426:	429a      	cmp	r2, r3
 800e428:	d20c      	bcs.n	800e444 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	441a      	add	r2, r3
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	3b01      	subs	r3, #1
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	440b      	add	r3, r1
 800e438:	7812      	ldrb	r2, [r2, #0]
 800e43a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	3301      	adds	r3, #1
 800e440:	627b      	str	r3, [r7, #36]	; 0x24
 800e442:	e7ec      	b.n	800e41e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	4413      	add	r3, r2
 800e44a:	3b01      	subs	r3, #1
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	4413      	add	r3, r2
 800e450:	2200      	movs	r2, #0
 800e452:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	3b01      	subs	r3, #1
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	441a      	add	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	4413      	add	r3, r2
 800e466:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	441a      	add	r2, r3
 800e46e:	f107 0310 	add.w	r3, r7, #16
 800e472:	4611      	mov	r1, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f000 fa37 	bl	800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	3304      	adds	r3, #4
 800e47e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	623b      	str	r3, [r7, #32]
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	4413      	add	r3, r2
 800e48a:	6a3a      	ldr	r2, [r7, #32]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d20c      	bcs.n	800e4aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	441a      	add	r2, r3
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	3b01      	subs	r3, #1
 800e49a:	6839      	ldr	r1, [r7, #0]
 800e49c:	440b      	add	r3, r1
 800e49e:	7812      	ldrb	r2, [r2, #0]
 800e4a0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	623b      	str	r3, [r7, #32]
 800e4a8:	e7ec      	b.n	800e484 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800e4aa:	69ba      	ldr	r2, [r7, #24]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	441a      	add	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800e4c6:	69ba      	ldr	r2, [r7, #24]
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	683a      	ldr	r2, [r7, #0]
 800e4d2:	441a      	add	r2, r3
 800e4d4:	f107 030c 	add.w	r3, r7, #12
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 fa04 	bl	800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	61fb      	str	r3, [r7, #28]
 800e4ea:	69ba      	ldr	r2, [r7, #24]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	69fa      	ldr	r2, [r7, #28]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d20c      	bcs.n	800e510 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	441a      	add	r2, r3
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	440b      	add	r3, r1
 800e504:	7812      	ldrb	r2, [r2, #0]
 800e506:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	3301      	adds	r3, #1
 800e50c:	61fb      	str	r3, [r7, #28]
 800e50e:	e7ec      	b.n	800e4ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800e510:	69ba      	ldr	r2, [r7, #24]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4413      	add	r3, r2
 800e516:	3b01      	subs	r3, #1
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	4413      	add	r3, r2
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	3b01      	subs	r3, #1
 800e524:	683a      	ldr	r2, [r7, #0]
 800e526:	441a      	add	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800e52c:	69ba      	ldr	r2, [r7, #24]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	4413      	add	r3, r2
 800e532:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	69ba      	ldr	r2, [r7, #24]
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	440a      	add	r2, r1
 800e540:	7812      	ldrb	r2, [r2, #0]
 800e542:	4313      	orrs	r3, r2
 800e544:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	3301      	adds	r3, #1
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	440b      	add	r3, r1
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	021b      	lsls	r3, r3, #8
 800e554:	4313      	orrs	r3, r2
 800e556:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	3302      	adds	r3, #2
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	440b      	add	r3, r1
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	041b      	lsls	r3, r3, #16
 800e566:	4313      	orrs	r3, r2
 800e568:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	3303      	adds	r3, #3
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	440b      	add	r3, r1
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	061b      	lsls	r3, r3, #24
 800e578:	4313      	orrs	r3, r2
 800e57a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	3304      	adds	r3, #4
 800e586:	61bb      	str	r3, [r7, #24]
     return offset;
 800e588:	69bb      	ldr	r3, [r7, #24]
    }
 800e58a:	4618      	mov	r0, r3
 800e58c:	3728      	adds	r7, #40	; 0x28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800e59e:	4618      	mov	r0, r3
 800e5a0:	370c      	adds	r7, #12
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	08015918 	.word	0x08015918

0800e5b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	4b03      	ldr	r3, [pc, #12]	; (800e5c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop
 800e5c8:	08015934 	.word	0x08015934

0800e5cc <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	605a      	str	r2, [r3, #4]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
	...

0800e5f0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
      data()
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fa24 	bl	800da48 <_ZN3ros3MsgC1Ev>
 800e600:	4a06      	ldr	r2, [pc, #24]	; (800e61c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	601a      	str	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	3304      	adds	r3, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff ffde 	bl	800e5cc <_ZN3ros4TimeC1Ev>
    {
    }
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	08015b00 	.word	0x08015b00

0800e620 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6859      	ldr	r1, [r3, #4]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	4413      	add	r3, r2
 800e638:	b2ca      	uxtb	r2, r1
 800e63a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	0a19      	lsrs	r1, r3, #8
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	4413      	add	r3, r2
 800e64a:	b2ca      	uxtb	r2, r1
 800e64c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	0c19      	lsrs	r1, r3, #16
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3302      	adds	r3, #2
 800e658:	683a      	ldr	r2, [r7, #0]
 800e65a:	4413      	add	r3, r2
 800e65c:	b2ca      	uxtb	r2, r1
 800e65e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	0e19      	lsrs	r1, r3, #24
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3303      	adds	r3, #3
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	4413      	add	r3, r2
 800e66e:	b2ca      	uxtb	r2, r1
 800e670:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	3304      	adds	r3, #4
 800e676:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6899      	ldr	r1, [r3, #8]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	4413      	add	r3, r2
 800e682:	b2ca      	uxtb	r2, r1
 800e684:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	0a19      	lsrs	r1, r3, #8
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	4413      	add	r3, r2
 800e694:	b2ca      	uxtb	r2, r1
 800e696:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	0c19      	lsrs	r1, r3, #16
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3302      	adds	r3, #2
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	b2ca      	uxtb	r2, r1
 800e6a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	0e19      	lsrs	r1, r3, #24
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3303      	adds	r3, #3
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	b2ca      	uxtb	r2, r1
 800e6ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	60fb      	str	r3, [r7, #12]
      return offset;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
    }
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	685a      	ldr	r2, [r3, #4]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	021b      	lsls	r3, r3, #8
 800e6fc:	431a      	orrs	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3302      	adds	r3, #2
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	440b      	add	r3, r1
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	041b      	lsls	r3, r3, #16
 800e712:	431a      	orrs	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3303      	adds	r3, #3
 800e720:	6839      	ldr	r1, [r7, #0]
 800e722:	440b      	add	r3, r1
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	061b      	lsls	r3, r3, #24
 800e728:	431a      	orrs	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3304      	adds	r3, #4
 800e732:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	4413      	add	r3, r2
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	461a      	mov	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	689a      	ldr	r2, [r3, #8]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3301      	adds	r3, #1
 800e74a:	6839      	ldr	r1, [r7, #0]
 800e74c:	440b      	add	r3, r1
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	021b      	lsls	r3, r3, #8
 800e752:	431a      	orrs	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	689a      	ldr	r2, [r3, #8]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	3302      	adds	r3, #2
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	440b      	add	r3, r1
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	041b      	lsls	r3, r3, #16
 800e768:	431a      	orrs	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	689a      	ldr	r2, [r3, #8]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3303      	adds	r3, #3
 800e776:	6839      	ldr	r1, [r7, #0]
 800e778:	440b      	add	r3, r1
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	061b      	lsls	r3, r3, #24
 800e77e:	431a      	orrs	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3304      	adds	r3, #4
 800e788:	60fb      	str	r3, [r7, #12]
     return offset;
 800e78a:	68fb      	ldr	r3, [r7, #12]
    }
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	4b03      	ldr	r3, [pc, #12]	; (800e7b0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	08015958 	.word	0x08015958

0800e7b4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	4b03      	ldr	r3, [pc, #12]	; (800e7cc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800e7be:	4618      	mov	r0, r3
 800e7c0:	370c      	adds	r7, #12
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	08015968 	.word	0x08015968

0800e7d0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	601a      	str	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	611a      	str	r2, [r3, #16]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3714      	adds	r7, #20
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	691b      	ldr	r3, [r3, #16]
  }
 800e80a:	4618      	mov	r0, r3
 800e80c:	370c      	adds	r7, #12
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
	...

0800e818 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    UART_HandleTypeDef *huart;

  public:
    STM32Hardware():
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
      huart(&huart1){
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a04      	ldr	r2, [pc, #16]	; (800e834 <_ZN13STM32HardwareC1Ev+0x1c>)
 800e824:	601a      	str	r2, [r3, #0]
    }
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2000b1ec 	.word	0x2000b1ec

0800e838 <_ZN13STM32Hardware4readEv>:

    void init(){

    }

    int read(){
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
      return my_read_DMA_byte(huart);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4618      	mov	r0, r3
 800e846:	f7fe fe95 	bl	800d574 <my_read_DMA_byte>
 800e84a:	4603      	mov	r3, r0
    }
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
    	my_write_DMA(huart, data, length);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fb51 	bl	800cf10 <my_write_DMA>
    }
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
    	return HAL_GetTick();
 800e87e:	f7f2 fbbb 	bl	8000ff8 <HAL_GetTick>
 800e882:	4603      	mov	r3, r0
    }
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_Z12rosNodeSubCBRKN8std_msgs6UInt16E>:
void rosNodePub(){
	pubData.data=2;
	_pub.publish(&pubData);
}

void rosNodeSubCB(const std_msgs::UInt16& msg){
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	printf("Receive test topi %d\r\n",msg.data);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	889b      	ldrh	r3, [r3, #4]
 800e898:	4619      	mov	r1, r3
 800e89a:	4803      	ldr	r0, [pc, #12]	; (800e8a8 <_Z12rosNodeSubCBRKN8std_msgs6UInt16E+0x1c>)
 800e89c:	f002 ffc0 	bl	8011820 <iprintf>
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	0801598c 	.word	0x0801598c

0800e8ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d80d      	bhi.n	800e8dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	fa22 f103 	lsr.w	r1, r2, r3
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	b2ca      	uxtb	r2, r1
 800e8d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	e7ee      	b.n	800e8ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800e8dc:	bf00      	nop
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b03      	cmp	r3, #3
 800e900:	d811      	bhi.n	800e926 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6839      	ldr	r1, [r7, #0]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	440a      	add	r2, r1
 800e90c:	7812      	ldrb	r2, [r2, #0]
 800e90e:	4611      	mov	r1, r2
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	00d2      	lsls	r2, r2, #3
 800e914:	fa01 f202 	lsl.w	r2, r1, r2
 800e918:	431a      	orrs	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3301      	adds	r3, #1
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	e7ea      	b.n	800e8fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800e926:	bf00      	nop
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
	...

0800e934 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	4a04      	ldr	r2, [pc, #16]	; (800e950 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4618      	mov	r0, r3
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	08015aec 	.word	0x08015aec

0800e954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4618      	mov	r0, r3
 800e960:	f7ff ffe8 	bl	800e934 <_ZN3ros15NodeHandleBase_C1Ev>
 800e964:	4a39      	ldr	r2, [pc, #228]	; (800ea4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	3304      	adds	r3, #4
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ff52 	bl	800e818 <_ZN13STM32HardwareC1Ev>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff f99c 	bl	800dcc0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b18      	cmp	r3, #24
 800e990:	d80a      	bhi.n	800e9a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e99a:	2100      	movs	r1, #0
 800e99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	e7f1      	b.n	800e98c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	613b      	str	r3, [r7, #16]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	2b18      	cmp	r3, #24
 800e9b0:	d80b      	bhi.n	800e9ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	2200      	movs	r2, #0
 800e9c0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	e7f0      	b.n	800e9ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9d4:	d209      	bcs.n	800e9ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	4413      	add	r3, r2
 800e9dc:	3318      	adds	r3, #24
 800e9de:	2200      	movs	r2, #0
 800e9e0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	e7f1      	b.n	800e9ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60bb      	str	r3, [r7, #8]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f4:	d20a      	bcs.n	800ea0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ea00:	2200      	movs	r2, #0
 800ea02:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	3301      	adds	r3, #1
 800ea08:	60bb      	str	r3, [r7, #8]
 800ea0a:	e7f0      	b.n	800e9ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	615a      	str	r2, [r3, #20]
  }
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4618      	mov	r0, r3
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	08015ac0 	.word	0x08015ac0

0800ea50 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	4a04      	ldr	r2, [pc, #16]	; (800ea6c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	08015ad4 	.word	0x08015ad4

0800ea70 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7ff ffe5 	bl	800ea50 <_ZN3ros11Subscriber_C1Ev>
 800ea86:	4a0b      	ldr	r2, [pc, #44]	; (800eab4 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	601a      	str	r2, [r3, #0]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	330c      	adds	r3, #12
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fe ffe9 	bl	800da68 <_ZN8std_msgs6UInt16C1Ev>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	615a      	str	r2, [r3, #20]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	609a      	str	r2, [r3, #8]
  };
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	08015aa8 	.word	0x08015aa8

0800eab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3304      	adds	r3, #4
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff fed6 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800eaca:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800eada:	4293      	cmp	r3, r2
 800eadc:	d903      	bls.n	800eae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d009      	beq.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d903      	bls.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d013      	beq.n	800eb34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff feb0 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800eb16:	4602      	mov	r2, r0
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	1ad2      	subs	r2, r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	bf8c      	ite	hi
 800eb24:	2301      	movhi	r3, #1
 800eb26:	2300      	movls	r3, #0
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800eb2e:	f06f 0301 	mvn.w	r3, #1
 800eb32:	e193      	b.n	800ee5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      int data = hardware_.read();
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3304      	adds	r3, #4
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fe7d 	bl	800e838 <_ZN13STM32Hardware4readEv>
 800eb3e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f2c0 8173 	blt.w	800ee2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
        break;
      checksum_ += data;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	441a      	add	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb5e:	2b07      	cmp	r3, #7
 800eb60:	d11d      	bne.n	800eb9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
      {
        message_in[index_++] = data;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800eb68:	1c59      	adds	r1, r3, #1
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	b2d1      	uxtb	r1, r2
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	4413      	add	r3, r2
 800eb78:	460a      	mov	r2, r1
 800eb7a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800eb82:	1e5a      	subs	r2, r3, #1
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1b7      	bne.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2208      	movs	r2, #8
 800eb98:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800eb9c:	e7b2      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d128      	bne.n	800ebfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
      {
        if (data == 0xff)
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2bff      	cmp	r3, #255	; 0xff
 800ebac:	d10d      	bne.n	800ebca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
        {
          mode_++;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f103 0214 	add.w	r2, r3, #20
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800ebc8:	e79c      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	3304      	adds	r3, #4
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff fe51 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	bf8c      	ite	hi
 800ebe2:	2301      	movhi	r3, #1
 800ebe4:	2300      	movls	r3, #0
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d08b      	beq.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800ebf4:	f06f 0301 	mvn.w	r3, #1
 800ebf8:	e130      	b.n	800ee5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d11b      	bne.n	800ec3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	2bfe      	cmp	r3, #254	; 0xfe
 800ec08:	d107      	bne.n	800ec1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
        {
          mode_++;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ec18:	e774      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ec28:	f083 0301 	eor.w	r3, r3, #1
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f43f af68 	beq.w	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f915 	bl	800ee64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800ec3a:	e763      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d113      	bne.n	800ec6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800ec6c:	e74a      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d110      	bne.n	800ec9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	441a      	add	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ec98:	e734      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d116      	bne.n	800ecd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800ecaa:	425a      	negs	r2, r3
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	b2d2      	uxtb	r2, r2
 800ecb0:	bf58      	it	pl
 800ecb2:	4253      	negpl	r3, r2
 800ecb4:	2bff      	cmp	r3, #255	; 0xff
 800ecb6:	d107      	bne.n	800ecc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ecbe:	1c5a      	adds	r2, r3, #1
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ecc6:	e71d      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ecd0:	e718      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ecd8:	2b05      	cmp	r3, #5
 800ecda:	d10f      	bne.n	800ecfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800ecfa:	e703      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ed02:	2b06      	cmp	r3, #6
 800ed04:	d117      	bne.n	800ed36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	021b      	lsls	r3, r3, #8
 800ed10:	441a      	add	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2207      	movs	r2, #7
 800ed1c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f47f aeec 	bne.w	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2208      	movs	r2, #8
 800ed30:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ed34:	e6e6      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	f47f aee1 	bne.w	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800ed50:	425a      	negs	r2, r3
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	bf58      	it	pl
 800ed58:	4253      	negpl	r3, r2
 800ed5a:	2bff      	cmp	r3, #255	; 0xff
 800ed5c:	f47f aed2 	bne.w	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d110      	bne.n	800ed8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f87a 	bl	800ee64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 f894 	bl	800ee9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800ed86:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8a:	e067      	b.n	800ee5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ed92:	2b0a      	cmp	r3, #10
 800ed94:	d106      	bne.n	800eda4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
          {
            syncTime(message_in);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3318      	adds	r3, #24
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f95f 	bl	800f060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800eda2:	e6af      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800edaa:	2b06      	cmp	r3, #6
 800edac:	d10d      	bne.n	800edca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
          {
            req_param_resp.deserialize(message_in);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3318      	adds	r3, #24
 800edb8:	4619      	mov	r1, r3
 800edba:	4610      	mov	r0, r2
 800edbc:	f7ff f8b5 	bl	800df2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800edc8:	e69c      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800edd0:	2b0b      	cmp	r3, #11
 800edd2:	d104      	bne.n	800edde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
          {
            configured_ = false;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800eddc:	e692      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ede4:	3b64      	subs	r3, #100	; 0x64
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	4413      	add	r3, r2
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f43f ae86 	beq.w	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800edfe:	3b64      	subs	r3, #100	; 0x64
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	6858      	ldr	r0, [r3, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ee12:	3b64      	subs	r3, #100	; 0x64
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4413      	add	r3, r2
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	3218      	adds	r2, #24
 800ee28:	4611      	mov	r1, r2
 800ee2a:	4798      	blx	r3
    while (true)
 800ee2c:	e66a      	b.n	800eb04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800ee2e:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00f      	beq.n	800ee5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d906      	bls.n	800ee5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
    {
      requestSyncTime();
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f809 	bl	800ee64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    }

    return SPIN_OK;
 800ee5a:	2300      	movs	r3, #0
  }
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 800ee6c:	f107 030c 	add.w	r3, r7, #12
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff fbbd 	bl	800e5f0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f107 020c 	add.w	r2, r7, #12
 800ee80:	210a      	movs	r1, #10
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	4798      	blx	r3
    rt_time = hardware_.time();
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	3304      	adds	r3, #4
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff fcf3 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800ee90:	4602      	mov	r2, r0
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	609a      	str	r2, [r3, #8]
  }
 800ee96:	bf00      	nop
 800ee98:	3718      	adds	r7, #24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800ee9e:	b590      	push	{r4, r7, lr}
 800eea0:	b08b      	sub	sp, #44	; 0x2c
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800eea6:	f107 030c 	add.w	r3, r7, #12
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff f9ca 	bl	800e244 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	2b18      	cmp	r3, #24
 800eeb8:	dc5b      	bgt.n	800ef72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eebe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800eec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d04f      	beq.n	800ef6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eece:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800eed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800eee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800eef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eef8:	6859      	ldr	r1, [r3, #4]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eefe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800ef02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	3308      	adds	r3, #8
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4798      	blx	r3
 800ef12:	4603      	mov	r3, r0
 800ef14:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef1a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800ef1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef22:	6859      	ldr	r1, [r3, #4]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef28:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800ef2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	330c      	adds	r3, #12
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4608      	mov	r0, r1
 800ef3a:	4798      	blx	r3
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800ef40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef44:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681c      	ldr	r4, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef50:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800ef54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff fc50 	bl	800e7fe <_ZN3ros9Publisher15getEndpointTypeEv>
 800ef5e:	4601      	mov	r1, r0
 800ef60:	f107 030c 	add.w	r3, r7, #12
 800ef64:	461a      	mov	r2, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ef70:	e7a0      	b.n	800eeb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800ef72:	2300      	movs	r3, #0
 800ef74:	627b      	str	r3, [r7, #36]	; 0x24
 800ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef78:	2b18      	cmp	r3, #24
 800ef7a:	dc68      	bgt.n	800f04e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d05b      	beq.n	800f046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4413      	add	r3, r2
 800efc0:	6859      	ldr	r1, [r3, #4]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3308      	adds	r3, #8
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4608      	mov	r0, r1
 800efd8:	4798      	blx	r3
 800efda:	4603      	mov	r3, r0
 800efdc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4413      	add	r3, r2
 800efea:	6859      	ldr	r1, [r3, #4]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	4413      	add	r3, r2
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	330c      	adds	r3, #12
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4608      	mov	r0, r1
 800f002:	4798      	blx	r3
 800f004:	4603      	mov	r3, r0
 800f006:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800f008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f00c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681c      	ldr	r4, [r3, #0]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f018:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4413      	add	r3, r2
 800f020:	6859      	ldr	r1, [r3, #4]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3304      	adds	r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4608      	mov	r0, r1
 800f038:	4798      	blx	r3
 800f03a:	4601      	mov	r1, r0
 800f03c:	f107 030c 	add.w	r3, r7, #12
 800f040:	461a      	mov	r2, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	3301      	adds	r3, #1
 800f04a:	627b      	str	r3, [r7, #36]	; 0x24
 800f04c:	e793      	b.n	800ef76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800f056:	bf00      	nop
 800f058:	372c      	adds	r7, #44	; 0x2c
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd90      	pop	{r4, r7, pc}
	...

0800f060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff fabe 	bl	800e5f0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3304      	adds	r3, #4
 800f078:	4618      	mov	r0, r3
 800f07a:	f7ff fbfc 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800f07e:	4602      	mov	r2, r0
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800f088:	f107 0308 	add.w	r3, r7, #8
 800f08c:	6839      	ldr	r1, [r7, #0]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7ff fb1e 	bl	800e6d0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	4914      	ldr	r1, [pc, #80]	; (800f0ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800f09a:	fba1 1303 	umull	r1, r3, r1, r3
 800f09e:	099b      	lsrs	r3, r3, #6
 800f0a0:	4413      	add	r3, r2
 800f0a2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800f0a4:	6939      	ldr	r1, [r7, #16]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	4b10      	ldr	r3, [pc, #64]	; (800f0ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800f0aa:	fba3 0302 	umull	r0, r3, r3, r2
 800f0ae:	099b      	lsrs	r3, r3, #6
 800f0b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f0b4:	fb00 f303 	mul.w	r3, r0, r3
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	4a0d      	ldr	r2, [pc, #52]	; (800f0f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800f0bc:	fb02 f303 	mul.w	r3, r2, r3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800f0c4:	f107 0308 	add.w	r3, r7, #8
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 f8a3 	bl	800f218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff fbcd 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800f0e4:	bf00      	nop
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	10624dd3 	.word	0x10624dd3
 800f0f0:	000f4240 	.word	0x000f4240

0800f0f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b088      	sub	sp, #32
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b63      	cmp	r3, #99	; 0x63
 800f104:	dd09      	ble.n	800f11a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f10c:	f083 0301 	eor.w	r3, r3, #1
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800f116:	2300      	movs	r3, #0
 800f118:	e077      	b.n	800f20a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800f126:	3207      	adds	r2, #7
 800f128:	4611      	mov	r1, r2
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	4798      	blx	r3
 800f12e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	22ff      	movs	r2, #255	; 0xff
 800f134:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	22fe      	movs	r2, #254	; 0xfe
 800f13c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	b2da      	uxtb	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	121b      	asrs	r3, r3, #8
 800f150:	b2da      	uxtb	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800f164:	4413      	add	r3, r2
 800f166:	b2db      	uxtb	r3, r3
 800f168:	43db      	mvns	r3, r3
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	b2da      	uxtb	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	b21b      	sxth	r3, r3
 800f180:	121b      	asrs	r3, r3, #8
 800f182:	b2da      	uxtb	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800f18e:	2305      	movs	r3, #5
 800f190:	61bb      	str	r3, [r7, #24]
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	3307      	adds	r3, #7
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	429a      	cmp	r2, r3
 800f19a:	da0d      	bge.n	800f1b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	61bb      	str	r3, [r7, #24]
 800f1b6:	e7ec      	b.n	800f192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	3307      	adds	r3, #7
 800f1bc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	425a      	negs	r2, r3
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	b2d2      	uxtb	r2, r2
 800f1c6:	bf58      	it	pl
 800f1c8:	4253      	negpl	r3, r2
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	1c59      	adds	r1, r3, #1
 800f1d0:	6179      	str	r1, [r7, #20]
 800f1d2:	43d2      	mvns	r2, r2
 800f1d4:	b2d1      	uxtb	r1, r2
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	4413      	add	r3, r2
 800f1da:	460a      	mov	r2, r1
 800f1dc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1e6:	dc0a      	bgt.n	800f1fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	1d18      	adds	r0, r3, #4
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	f7ff fb2d 	bl	800e854 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	e005      	b.n	800f20a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800f1fe:	4905      	ldr	r1, [pc, #20]	; (800f214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f000 f847 	bl	800f294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800f206:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	080159a4 	.word	0x080159a4

0800f218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3304      	adds	r3, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fb25 	bl	800e876 <_ZN13STM32Hardware4timeEv>
 800f22c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4914      	ldr	r1, [pc, #80]	; (800f288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800f236:	fba1 1303 	umull	r1, r3, r1, r3
 800f23a:	099b      	lsrs	r3, r3, #6
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	1e5a      	subs	r2, r3, #1
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	6859      	ldr	r1, [r3, #4]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4b0f      	ldr	r3, [pc, #60]	; (800f288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800f24c:	fba3 0302 	umull	r0, r3, r3, r2
 800f250:	099b      	lsrs	r3, r3, #6
 800f252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f256:	fb00 f303 	mul.w	r3, r0, r3
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	4a0b      	ldr	r2, [pc, #44]	; (800f28c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800f25e:	fb02 f303 	mul.w	r3, r2, r3
 800f262:	1aca      	subs	r2, r1, r3
 800f264:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800f266:	4413      	add	r3, r2
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f103 020c 	add.w	r2, r3, #12
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	3310      	adds	r3, #16
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7f7 fbbf 	bl	80069fc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800f27e:	bf00      	nop
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	10624dd3 	.word	0x10624dd3
 800f28c:	000f4240 	.word	0x000f4240
 800f290:	3b9aca00 	.word	0x3b9aca00

0800f294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	2103      	movs	r1, #3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f804 	bl	800f2b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800f2be:	f107 0314 	add.w	r3, r7, #20
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fe fc4c 	bl	800db60 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800f2c8:	7afb      	ldrb	r3, [r7, #11]
 800f2ca:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f107 0214 	add.w	r2, r7, #20
 800f2da:	2107      	movs	r1, #7
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	4798      	blx	r3
  }
 800f2e0:	bf00      	nop
 800f2e2:	3720      	adds	r7, #32
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <_Z41__static_initialization_and_destruction_0ii>:
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d116      	bne.n	800f326 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d111      	bne.n	800f326 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle rosSerialNode;
 800f302:	480b      	ldr	r0, [pc, #44]	; (800f330 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800f304:	f7ff fb26 	bl	800e954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt16 pubData;
 800f308:	480a      	ldr	r0, [pc, #40]	; (800f334 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f30a:	f7fe fbad 	bl	800da68 <_ZN8std_msgs6UInt16C1Ev>
ros::Publisher _pub("pubTopicName", &pubData);
 800f30e:	2300      	movs	r3, #0
 800f310:	4a08      	ldr	r2, [pc, #32]	; (800f334 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f312:	4909      	ldr	r1, [pc, #36]	; (800f338 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800f314:	4809      	ldr	r0, [pc, #36]	; (800f33c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f316:	f7ff fa5b 	bl	800e7d0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
 800f31a:	2301      	movs	r3, #1
 800f31c:	4a08      	ldr	r2, [pc, #32]	; (800f340 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800f31e:	4909      	ldr	r1, [pc, #36]	; (800f344 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800f320:	4809      	ldr	r0, [pc, #36]	; (800f348 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800f322:	f7ff fba5 	bl	800ea70 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
}
 800f326:	bf00      	nop
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	20001078 	.word	0x20001078
 800f334:	200015a8 	.word	0x200015a8
 800f338:	080159e0 	.word	0x080159e0
 800f33c:	200015b0 	.word	0x200015b0
 800f340:	0800e88d 	.word	0x0800e88d
 800f344:	080159f0 	.word	0x080159f0
 800f348:	200015c4 	.word	0x200015c4

0800f34c <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	330c      	adds	r3, #12
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fe fbbb 	bl	800dad8 <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	695b      	ldr	r3, [r3, #20]
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	320c      	adds	r2, #12
 800f36a:	4610      	mov	r0, r2
 800f36c:	4798      	blx	r3
  }
 800f36e:	bf00      	nop
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	699b      	ldr	r3, [r3, #24]
  }
 800f382:	4618      	mov	r0, r3
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	330c      	adds	r3, #12
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fbc4 	bl	800db28 <_ZN8std_msgs6UInt167getTypeEv>
 800f3a0:	4603      	mov	r3, r0
  }
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b082      	sub	sp, #8
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	330c      	adds	r3, #12
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fe fbc4 	bl	800db44 <_ZN8std_msgs6UInt166getMD5Ev>
 800f3bc:	4603      	mov	r3, r0
  }
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800f3c6:	b480      	push	{r7}
 800f3c8:	b083      	sub	sp, #12
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
    return configured_;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <_GLOBAL__sub_I_rosSerialNode>:
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f7ff ff7d 	bl	800f2e8 <_Z41__static_initialization_and_destruction_0ii>
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 800f3f0:	b5b0      	push	{r4, r5, r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2408      	movs	r4, #8
 800f3fc:	461d      	mov	r5, r3
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	db06      	blt.n	800f410 <_ZN8SOFT_ARMC1Ev+0x20>
 800f402:	2106      	movs	r1, #6
 800f404:	4628      	mov	r0, r5
 800f406:	f000 f808 	bl	800f41a <_ZN16SOFT_ARM_SEGMENTC1Ei>
 800f40a:	35a4      	adds	r5, #164	; 0xa4
 800f40c:	3c01      	subs	r4, #1
 800f40e:	e7f6      	b.n	800f3fe <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bdb0      	pop	{r4, r5, r7, pc}

0800f41a <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800f41a:	b590      	push	{r4, r7, lr}
 800f41c:	b085      	sub	sp, #20
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
 800f424:	2094      	movs	r0, #148	; 0x94
 800f426:	f000 fc2a 	bl	800fc7e <_Znwj>
 800f42a:	4603      	mov	r3, r0
 800f42c:	461c      	mov	r4, r3
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	4620      	mov	r0, r4
 800f432:	f7fc f813 	bl	800b45c <_ZN9PNEUDRIVEC1Ei>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 800f43a:	2300      	movs	r3, #0
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b05      	cmp	r3, #5
 800f442:	dc0f      	bgt.n	800f464 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f448:	689a      	ldr	r2, [r3, #8]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	4413      	add	r3, r2
 800f450:	6819      	ldr	r1, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	3216      	adds	r2, #22
 800f458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3301      	adds	r3, #1
 800f460:	60fb      	str	r3, [r7, #12]
 800f462:	e7ec      	b.n	800f43e <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4618      	mov	r0, r3
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd90      	pop	{r4, r7, pc}

0800f46e <unpackQuaternion>:
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOri->imuData[maxLoc])&0x8000))>>15;
}

void unpackQuaternion(QUATERNIONCOMPACT *qCom,QUATERNION *qOri){
 800f46e:	b580      	push	{r7, lr}
 800f470:	b088      	sub	sp, #32
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
	int32_t lastNumOri=0;
 800f478:	2300      	movs	r3, #0
 800f47a:	61fb      	str	r3, [r7, #28]
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f484:	b2db      	uxtb	r3, r3
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	b21a      	sxth	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	78db      	ldrb	r3, [r3, #3]
 800f48e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f492:	b2db      	uxtb	r3, r3
 800f494:	b21b      	sxth	r3, r3
 800f496:	4313      	orrs	r3, r2
 800f498:	b21b      	sxth	r3, r3
 800f49a:	837b      	strh	r3, [r7, #26]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<COMPACT_SHIFT_BIT);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	833b      	strh	r3, [r7, #24]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<COMPACT_SHIFT_BIT);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	885b      	ldrh	r3, [r3, #2]
 800f4ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	82fb      	strh	r3, [r7, #22]
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<COMPACT_SHIFT_BIT);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	889b      	ldrh	r3, [r3, #4]
 800f4bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	82bb      	strh	r3, [r7, #20]

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 800f4c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f4ca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f4ce:	fb02 f203 	mul.w	r2, r2, r3
 800f4d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4d6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800f4da:	fb01 f303 	mul.w	r3, r1, r3
 800f4de:	441a      	add	r2, r3
 800f4e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f4e4:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800f4e8:	fb01 f303 	mul.w	r3, r1, r3
 800f4ec:	4413      	add	r3, r2
 800f4ee:	613b      	str	r3, [r7, #16]
	const int maxNum=(uint32_t)(1<<30);
 800f4f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4f4:	60fb      	str	r3, [r7, #12]
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d207      	bcs.n	800f50e <unpackQuaternion+0xa0>
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	4618      	mov	r0, r3
 800f506:	f000 f893 	bl	800f630 <fastSqrt32>
 800f50a:	4603      	mov	r3, r0
 800f50c:	e000      	b.n	800f510 <unpackQuaternion+0xa2>
 800f50e:	2300      	movs	r3, #0
 800f510:	61fb      	str	r3, [r7, #28]
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	795b      	ldrb	r3, [r3, #5]
 800f516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d005      	beq.n	800f52c <unpackQuaternion+0xbe>
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	b29b      	uxth	r3, r3
 800f524:	425b      	negs	r3, r3
 800f526:	b29b      	uxth	r3, r3
 800f528:	b21b      	sxth	r3, r3
 800f52a:	e001      	b.n	800f530 <unpackQuaternion+0xc2>
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	b21b      	sxth	r3, r3
 800f530:	817b      	strh	r3, [r7, #10]
	if(maxLoc==0)
 800f532:	8b7b      	ldrh	r3, [r7, #26]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10c      	bne.n	800f552 <unpackQuaternion+0xe4>
	{
		qOri->imuData[1]=qRes0;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	8b3a      	ldrh	r2, [r7, #24]
 800f53c:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes1;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	8afa      	ldrh	r2, [r7, #22]
 800f542:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	8aba      	ldrh	r2, [r7, #20]
 800f548:	80da      	strh	r2, [r3, #6]
		qOri->imuData[0]=lastNum;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	897a      	ldrh	r2, [r7, #10]
 800f54e:	801a      	strh	r2, [r3, #0]
		qOri->imuData[0]=qRes0;
		qOri->imuData[1]=qRes1;
		qOri->imuData[2]=qRes2;
		qOri->imuData[3]=lastNum;
	}
}
 800f550:	e02b      	b.n	800f5aa <unpackQuaternion+0x13c>
	else if (maxLoc==1){
 800f552:	8b7b      	ldrh	r3, [r7, #26]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d10c      	bne.n	800f572 <unpackQuaternion+0x104>
		qOri->imuData[0]=qRes0;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	8b3a      	ldrh	r2, [r7, #24]
 800f55c:	801a      	strh	r2, [r3, #0]
		qOri->imuData[2]=qRes1;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	8afa      	ldrh	r2, [r7, #22]
 800f562:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	8aba      	ldrh	r2, [r7, #20]
 800f568:	80da      	strh	r2, [r3, #6]
		qOri->imuData[1]=lastNum;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	897a      	ldrh	r2, [r7, #10]
 800f56e:	805a      	strh	r2, [r3, #2]
}
 800f570:	e01b      	b.n	800f5aa <unpackQuaternion+0x13c>
	else if(maxLoc==2){
 800f572:	8b7b      	ldrh	r3, [r7, #26]
 800f574:	2b02      	cmp	r3, #2
 800f576:	d10c      	bne.n	800f592 <unpackQuaternion+0x124>
		qOri->imuData[0]=qRes0;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	8b3a      	ldrh	r2, [r7, #24]
 800f57c:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	8afa      	ldrh	r2, [r7, #22]
 800f582:	805a      	strh	r2, [r3, #2]
		qOri->imuData[3]=qRes2;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	8aba      	ldrh	r2, [r7, #20]
 800f588:	80da      	strh	r2, [r3, #6]
		qOri->imuData[2]=lastNum;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	897a      	ldrh	r2, [r7, #10]
 800f58e:	809a      	strh	r2, [r3, #4]
}
 800f590:	e00b      	b.n	800f5aa <unpackQuaternion+0x13c>
		qOri->imuData[0]=qRes0;
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	8b3a      	ldrh	r2, [r7, #24]
 800f596:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	8afa      	ldrh	r2, [r7, #22]
 800f59c:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes2;
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	8aba      	ldrh	r2, [r7, #20]
 800f5a2:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=lastNum;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	897a      	ldrh	r2, [r7, #10]
 800f5a8:	80da      	strh	r2, [r3, #6]
}
 800f5aa:	bf00      	nop
 800f5ac:	3720      	adds	r7, #32
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <decodeSensorData>:


void decodeSensorData(SENSORDATACOMPACT *scom, SENSORDATA *s) {
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	6039      	str	r1, [r7, #0]


#if COMPACT_VERSION_PRESSURE_HPA==1
	s->pressure=scom->pressure;    //absolute hpa
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	b21a      	sxth	r2, r3
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	801a      	strh	r2, [r3, #0]
	s->distance= ((uint16_t)(scom->distance<<3)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	785b      	ldrb	r3, [r3, #1]
 800f5d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit2<<2)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	78db      	ldrb	r3, [r3, #3]
 800f5e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit1<<1)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	795b      	ldrb	r3, [r3, #5]
 800f5f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4413      	add	r3, r2
 800f602:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit0));
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	79db      	ldrb	r3, [r3, #7]
 800f608:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	b29b      	uxth	r3, r3
 800f610:	4413      	add	r3, r2
 800f612:	b29a      	uxth	r2, r3
	s->distance= ((uint16_t)(scom->distance<<3)
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	805a      	strh	r2, [r3, #2]
#else
	s->pressure=scom->pressure;    //absolute
	s->distance=scom->distance;
#endif
	unpackQuaternion(&(scom->quaternionCom),&(s->quaternion));
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	1c9a      	adds	r2, r3, #2
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	3304      	adds	r3, #4
 800f620:	4619      	mov	r1, r3
 800f622:	4610      	mov	r0, r2
 800f624:	f7ff ff23 	bl	800f46e <unpackQuaternion>
}
 800f628:	bf00      	nop
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <fastSqrt32>:


static unsigned int fastSqrt32(unsigned long n)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
    unsigned int c = 0x8000;
 800f638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f63c:	60fb      	str	r3, [r7, #12]
    unsigned int g = 0x8000;
 800f63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f642:	60bb      	str	r3, [r7, #8]

    for(;;) {
        if(g*g > n)
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	fb02 f303 	mul.w	r3, r2, r3
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d203      	bcs.n	800f65a <fastSqrt32+0x2a>
            g ^= c;
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4053      	eors	r3, r2
 800f658:	60bb      	str	r3, [r7, #8]
        c >>= 1;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	085b      	lsrs	r3, r3, #1
 800f65e:	60fb      	str	r3, [r7, #12]
        if(c == 0)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <fastSqrt32+0x3a>
            return g;
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	e004      	b.n	800f674 <fastSqrt32+0x44>
        g |= c;
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4313      	orrs	r3, r2
 800f670:	60bb      	str	r3, [r7, #8]
        if(g*g > n)
 800f672:	e7e7      	b.n	800f644 <fastSqrt32+0x14>
    }
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	ed87 0a01 	vstr	s0, [r7, #4]
 800f68a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f68e:	fef8 7a67 	vrinta.f32	s15, s15
 800f692:	eeb0 0a67 	vmov.f32	s0, s15
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <setup>:
float chamber0p=0;
float chamber1p=0;

PRESSURE_SOURCE pSink2(7,analogPort_sink);

void setup() {
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	af00      	add	r7, sp, #0


	/*setup 1000Hz control loop*/
	setPeriodControlLoop(loopms);
 800f6a4:	2002      	movs	r0, #2
 800f6a6:	f7fc f871 	bl	800b78c <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(50);
 800f6aa:	2032      	movs	r0, #50	; 0x32
 800f6ac:	f7fc f87e 	bl	800b7ac <setPeriodSendLoop>



	/*Configure the pump port and sensor paramter of the source*/
	pneudrive.pSource.attach(0,analogPort_source);
 800f6b0:	4b17      	ldr	r3, [pc, #92]	; (800f710 <setup+0x70>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4816      	ldr	r0, [pc, #88]	; (800f714 <setup+0x74>)
 800f6ba:	f7fb fd95 	bl	800b1e8 <_ZN15PRESSURE_SOURCE6attachEii>

	/*Configure the pump port and sensor parameter of the sink*/
	pneudrive.pSink.attach(1,analogPort_sink);
 800f6be:	4b16      	ldr	r3, [pc, #88]	; (800f718 <setup+0x78>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	4815      	ldr	r0, [pc, #84]	; (800f71c <setup+0x7c>)
 800f6c8:	f7fb fd8e 	bl	800b1e8 <_ZN15PRESSURE_SOURCE6attachEii>

	/*Attach the valves and pressure sensors of chamber 0 to corresponding ports.
	 *Set the pressure sensor range. The parameter list are (vMin, vMax, pMin, pMax).
	 * vMin vMax have the unit of voltage. pMin pMax use the gauge pressure, has the unit of Pa. For example, atmosphere is 0, and vacuum is -101325.*/
	pneudrive.chambers[0]->attach(0, 2,analogPort_chamber0);
 800f6cc:	4b14      	ldr	r3, [pc, #80]	; (800f720 <setup+0x80>)
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	4b14      	ldr	r3, [pc, #80]	; (800f724 <setup+0x84>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	2100      	movs	r1, #0
 800f6da:	f7fb f9cf 	bl	800aa7c <_ZN7CHAMBER6attachEiii>
	pneudrive.chambers[1]->attach(1, 3,analogPort_chamber1);
 800f6de:	4b10      	ldr	r3, [pc, #64]	; (800f720 <setup+0x80>)
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	6818      	ldr	r0, [r3, #0]
 800f6e6:	4b10      	ldr	r3, [pc, #64]	; (800f728 <setup+0x88>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2203      	movs	r2, #3
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	f7fb f9c5 	bl	800aa7c <_ZN7CHAMBER6attachEiii>

	numUpdateValue=1000/loopms/fre;
 800f6f2:	4b0e      	ldr	r3, [pc, #56]	; (800f72c <setup+0x8c>)
 800f6f4:	ed93 7a00 	vldr	s14, [r3]
 800f6f8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800f730 <setup+0x90>
 800f6fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f704:	ee17 2a90 	vmov	r2, s15
 800f708:	4b0a      	ldr	r3, [pc, #40]	; (800f734 <setup+0x94>)
 800f70a:	601a      	str	r2, [r3, #0]
}
 800f70c:	bf00      	nop
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	2000036c 	.word	0x2000036c
 800f714:	2000262c 	.word	0x2000262c
 800f718:	20000370 	.word	0x20000370
 800f71c:	2000266c 	.word	0x2000266c
 800f720:	20002620 	.word	0x20002620
 800f724:	20000374 	.word	0x20000374
 800f728:	20000378 	.word	0x20000378
 800f72c:	20000388 	.word	0x20000388
 800f730:	43fa0000 	.word	0x43fa0000
 800f734:	2000038c 	.word	0x2000038c

0800f738 <_Z10readLengthh>:

float readLength(uint8_t port){
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	71fb      	strb	r3, [r7, #7]
	return (AnalogRead(port)*14-35);  //135-v/5.0*(35-(-35));
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	b29b      	uxth	r3, r3
 800f746:	4618      	mov	r0, r3
 800f748:	f7fb ff3d 	bl	800b5c6 <AnalogRead>
 800f74c:	eeb0 7a40 	vmov.f32	s14, s0
 800f750:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 800f754:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f758:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800f76c <_Z10readLengthh+0x34>
 800f75c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800f760:	eeb0 0a67 	vmov.f32	s0, s15
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	420c0000 	.word	0x420c0000

0800f770 <loop>:

void loop() {
 800f770:	b580      	push	{r7, lr}
 800f772:	af00      	add	r7, sp, #0

	/*Update sensor data of chamber 0*/
	pneudrive.pSource.readPressure();
 800f774:	4862      	ldr	r0, [pc, #392]	; (800f900 <loop+0x190>)
 800f776:	f7fb fdfe 	bl	800b376 <_ZN15PRESSURE_SOURCE12readPressureEv>
	pneudrive.pSink.readPressure();
 800f77a:	4862      	ldr	r0, [pc, #392]	; (800f904 <loop+0x194>)
 800f77c:	f7fb fdfb 	bl	800b376 <_ZN15PRESSURE_SOURCE12readPressureEv>

	chamber0p=pneudrive.readPressure(0);
 800f780:	2100      	movs	r1, #0
 800f782:	4861      	ldr	r0, [pc, #388]	; (800f908 <loop+0x198>)
 800f784:	f7fb fec6 	bl	800b514 <_ZN9PNEUDRIVE12readPressureEi>
 800f788:	eef0 7a40 	vmov.f32	s15, s0
 800f78c:	4b5f      	ldr	r3, [pc, #380]	; (800f90c <loop+0x19c>)
 800f78e:	edc3 7a00 	vstr	s15, [r3]
	pneudrive.chambers[1]->readPressureExt(chamber0p);//using the chamber0 's pressure as the chamber 1's pressure
 800f792:	4b5d      	ldr	r3, [pc, #372]	; (800f908 <loop+0x198>)
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	3304      	adds	r3, #4
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4b5c      	ldr	r3, [pc, #368]	; (800f90c <loop+0x19c>)
 800f79c:	edd3 7a00 	vldr	s15, [r3]
 800f7a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	f7fb f9c0 	bl	800ab2a <_ZN7CHAMBER15readPressureExtEf>

	length=readLength(analogPort_laser);
 800f7aa:	4b59      	ldr	r3, [pc, #356]	; (800f910 <loop+0x1a0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7ff ffc1 	bl	800f738 <_Z10readLengthh>
 800f7b6:	eef0 7a40 	vmov.f32	s15, s0
 800f7ba:	4b56      	ldr	r3, [pc, #344]	; (800f914 <loop+0x1a4>)
 800f7bc:	edc3 7a00 	vstr	s15, [r3]

	/*customized switch flag*/
	if (loop_gogogo) {
 800f7c0:	4b55      	ldr	r3, [pc, #340]	; (800f918 <loop+0x1a8>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 8091 	beq.w	800f8ec <loop+0x17c>

		if(!t0flag){
 800f7ca:	4b54      	ldr	r3, [pc, #336]	; (800f91c <loop+0x1ac>)
 800f7cc:	f993 3000 	ldrsb.w	r3, [r3]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d107      	bne.n	800f7e4 <loop+0x74>
			t0=millis();
 800f7d4:	f7fb ff5a 	bl	800b68c <millis>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	4b51      	ldr	r3, [pc, #324]	; (800f920 <loop+0x1b0>)
 800f7dc:	601a      	str	r2, [r3, #0]
			t0flag=1;
 800f7de:	4b4f      	ldr	r3, [pc, #316]	; (800f91c <loop+0x1ac>)
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	701a      	strb	r2, [r3, #0]
		}

		/*maintain the upper stream and lower stream pressure*/
		pneudrive.pSource.maintainPressure(upstreamPressure);
 800f7e4:	4b4f      	ldr	r3, [pc, #316]	; (800f924 <loop+0x1b4>)
 800f7e6:	edd3 7a00 	vldr	s15, [r3]
 800f7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ee:	4844      	ldr	r0, [pc, #272]	; (800f900 <loop+0x190>)
 800f7f0:	f7fb fd30 	bl	800b254 <_ZN15PRESSURE_SOURCE16maintainPressureEf>

		/*maintain a downsteam pressure if necessary*/
	//	pneudrive.pSink.maintainPressure(downstreamPressure);

		pSink2.maintainPressure(downstreamPressure);
 800f7f4:	4b4c      	ldr	r3, [pc, #304]	; (800f928 <loop+0x1b8>)
 800f7f6:	edd3 7a00 	vldr	s15, [r3]
 800f7fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f7fe:	484b      	ldr	r0, [pc, #300]	; (800f92c <loop+0x1bc>)
 800f800:	f7fb fd28 	bl	800b254 <_ZN15PRESSURE_SOURCE16maintainPressureEf>

		tcur=millis();
 800f804:	f7fb ff42 	bl	800b68c <millis>
 800f808:	4602      	mov	r2, r0
 800f80a:	4b49      	ldr	r3, [pc, #292]	; (800f930 <loop+0x1c0>)
 800f80c:	601a      	str	r2, [r3, #0]
		sinbase=sin(2*M_PI*fre*(tcur-t0)*0.001);
 800f80e:	4b49      	ldr	r3, [pc, #292]	; (800f934 <loop+0x1c4>)
 800f810:	edd3 7a00 	vldr	s15, [r3]
 800f814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f818:	ed9f 6b35 	vldr	d6, [pc, #212]	; 800f8f0 <loop+0x180>
 800f81c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f820:	4b43      	ldr	r3, [pc, #268]	; (800f930 <loop+0x1c0>)
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	4b3e      	ldr	r3, [pc, #248]	; (800f920 <loop+0x1b0>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	ee07 3a90 	vmov	s15, r3
 800f82e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f832:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f836:	ed9f 6b30 	vldr	d6, [pc, #192]	; 800f8f8 <loop+0x188>
 800f83a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f83e:	eeb0 0b47 	vmov.f64	d0, d7
 800f842:	f000 fa8d 	bl	800fd60 <sin>
 800f846:	eeb0 7b40 	vmov.f64	d7, d0
 800f84a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f84e:	4b3a      	ldr	r3, [pc, #232]	; (800f938 <loop+0x1c8>)
 800f850:	edc3 7a00 	vstr	s15, [r3]
		sinbase=sinbase>=ratio?1:-1;
 800f854:	4b38      	ldr	r3, [pc, #224]	; (800f938 <loop+0x1c8>)
 800f856:	ed93 7a00 	vldr	s14, [r3]
 800f85a:	4b38      	ldr	r3, [pc, #224]	; (800f93c <loop+0x1cc>)
 800f85c:	edd3 7a00 	vldr	s15, [r3]
 800f860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f868:	db02      	blt.n	800f870 <loop+0x100>
 800f86a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f86e:	e000      	b.n	800f872 <loop+0x102>
 800f870:	4b33      	ldr	r3, [pc, #204]	; (800f940 <loop+0x1d0>)
 800f872:	4a31      	ldr	r2, [pc, #196]	; (800f938 <loop+0x1c8>)
 800f874:	6013      	str	r3, [r2, #0]
		externPd=amp*sinbase+offset;
 800f876:	4b33      	ldr	r3, [pc, #204]	; (800f944 <loop+0x1d4>)
 800f878:	ed93 7a00 	vldr	s14, [r3]
 800f87c:	4b2e      	ldr	r3, [pc, #184]	; (800f938 <loop+0x1c8>)
 800f87e:	edd3 7a00 	vldr	s15, [r3]
 800f882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f886:	4b30      	ldr	r3, [pc, #192]	; (800f948 <loop+0x1d8>)
 800f888:	edd3 7a00 	vldr	s15, [r3]
 800f88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f890:	4b2e      	ldr	r3, [pc, #184]	; (800f94c <loop+0x1dc>)
 800f892:	edc3 7a00 	vstr	s15, [r3]
		pneudrive.writePressure(0,externPd);
 800f896:	4b2d      	ldr	r3, [pc, #180]	; (800f94c <loop+0x1dc>)
 800f898:	edd3 7a00 	vldr	s15, [r3]
 800f89c:	eeb0 0a67 	vmov.f32	s0, s15
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4819      	ldr	r0, [pc, #100]	; (800f908 <loop+0x198>)
 800f8a4:	f7fb fe4b 	bl	800b53e <_ZN9PNEUDRIVE13writePressureEif>
		pneudrive.writePressure(1,externPd);
 800f8a8:	4b28      	ldr	r3, [pc, #160]	; (800f94c <loop+0x1dc>)
 800f8aa:	edd3 7a00 	vldr	s15, [r3]
 800f8ae:	eeb0 0a67 	vmov.f32	s0, s15
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	4814      	ldr	r0, [pc, #80]	; (800f908 <loop+0x198>)
 800f8b6:	f7fb fe42 	bl	800b53e <_ZN9PNEUDRIVE13writePressureEif>

		localCounter++;
 800f8ba:	4b25      	ldr	r3, [pc, #148]	; (800f950 <loop+0x1e0>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	4a23      	ldr	r2, [pc, #140]	; (800f950 <loop+0x1e0>)
 800f8c2:	6013      	str	r3, [r2, #0]
		localCounter%=numUpdateValue;
 800f8c4:	4b22      	ldr	r3, [pc, #136]	; (800f950 <loop+0x1e0>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4a22      	ldr	r2, [pc, #136]	; (800f954 <loop+0x1e4>)
 800f8ca:	6812      	ldr	r2, [r2, #0]
 800f8cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8d0:	fb02 f201 	mul.w	r2, r2, r1
 800f8d4:	1a9b      	subs	r3, r3, r2
 800f8d6:	4a1e      	ldr	r2, [pc, #120]	; (800f950 <loop+0x1e0>)
 800f8d8:	6013      	str	r3, [r2, #0]
		if(localCounter==0){
 800f8da:	4b1d      	ldr	r3, [pc, #116]	; (800f950 <loop+0x1e0>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d104      	bne.n	800f8ec <loop+0x17c>
			totalNum++;
 800f8e2:	4b1d      	ldr	r3, [pc, #116]	; (800f958 <loop+0x1e8>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	4a1b      	ldr	r2, [pc, #108]	; (800f958 <loop+0x1e8>)
 800f8ea:	6013      	str	r3, [r2, #0]
			}
		}*/


	}
}
 800f8ec:	bf00      	nop
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	54442d18 	.word	0x54442d18
 800f8f4:	401921fb 	.word	0x401921fb
 800f8f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f8fc:	3f50624d 	.word	0x3f50624d
 800f900:	2000262c 	.word	0x2000262c
 800f904:	2000266c 	.word	0x2000266c
 800f908:	20002620 	.word	0x20002620
 800f90c:	200026d8 	.word	0x200026d8
 800f910:	2000037c 	.word	0x2000037c
 800f914:	200026b8 	.word	0x200026b8
 800f918:	200026bc 	.word	0x200026bc
 800f91c:	200026cc 	.word	0x200026cc
 800f920:	200026c4 	.word	0x200026c4
 800f924:	20000390 	.word	0x20000390
 800f928:	20000394 	.word	0x20000394
 800f92c:	200026dc 	.word	0x200026dc
 800f930:	200026c8 	.word	0x200026c8
 800f934:	20000388 	.word	0x20000388
 800f938:	200026d4 	.word	0x200026d4
 800f93c:	20000398 	.word	0x20000398
 800f940:	bf800000 	.word	0xbf800000
 800f944:	20000380 	.word	0x20000380
 800f948:	20000384 	.word	0x20000384
 800f94c:	200026d0 	.word	0x200026d0
 800f950:	200026c0 	.word	0x200026c0
 800f954:	2000038c 	.word	0x2000038c
 800f958:	200026b4 	.word	0x200026b4

0800f95c <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 800f95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f95e:	b089      	sub	sp, #36	; 0x24
 800f960:	af08      	add	r7, sp, #32
	//printf("Time: %d\r\n",millis());
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f962:	f7fb fe93 	bl	800b68c <millis>
 800f966:	4684      	mov	ip, r0
			millis(),
			(int)(pneudrive.pSource.pressure/1000),
 800f968:	4b33      	ldr	r3, [pc, #204]	; (800fa38 <serialDisplay+0xdc>)
 800f96a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800f96e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800fa3c <serialDisplay+0xe0>
 800f972:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f976:	eebd 6ae7 	vcvt.s32.f32	s12, s15
			(int)(pneudrive.pSink.pressure/1000),
 800f97a:	4b2f      	ldr	r3, [pc, #188]	; (800fa38 <serialDisplay+0xdc>)
 800f97c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f980:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800fa3c <serialDisplay+0xe0>
 800f984:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f988:	eefd 5ae7 	vcvt.s32.f32	s11, s15
			(int)(externPd/1000),
 800f98c:	4b2c      	ldr	r3, [pc, #176]	; (800fa40 <serialDisplay+0xe4>)
 800f98e:	ed93 7a00 	vldr	s14, [r3]
 800f992:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800fa3c <serialDisplay+0xe0>
 800f996:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f99e:	ee17 2a90 	vmov	r2, s15
			(int)(amp/1000),
 800f9a2:	4b28      	ldr	r3, [pc, #160]	; (800fa44 <serialDisplay+0xe8>)
 800f9a4:	ed93 7a00 	vldr	s14, [r3]
 800f9a8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fa3c <serialDisplay+0xe0>
 800f9ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f9b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9b4:	ee17 1a90 	vmov	r1, s15
			(int)(offset/1000),
 800f9b8:	4b23      	ldr	r3, [pc, #140]	; (800fa48 <serialDisplay+0xec>)
 800f9ba:	ed93 7a00 	vldr	s14, [r3]
 800f9be:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800fa3c <serialDisplay+0xe0>
 800f9c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f9c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9ca:	ee17 0a90 	vmov	r0, s15
			(int)(fre*10),
 800f9ce:	4b1f      	ldr	r3, [pc, #124]	; (800fa4c <serialDisplay+0xf0>)
 800f9d0:	edd3 7a00 	vldr	s15, [r3]
 800f9d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f9dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9e0:	ee17 4a90 	vmov	r4, s15
			(int)(pneudrive.chambers[0]->pressure/1000),
 800f9e4:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <serialDisplay+0xdc>)
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800f9ee:	eddf 6a13 	vldr	s13, [pc, #76]	; 800fa3c <serialDisplay+0xe0>
 800f9f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d  %d  %d  %d %d %d %d %d\r\n",
 800f9f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9fa:	ee17 5a90 	vmov	r5, s15
 800f9fe:	4b14      	ldr	r3, [pc, #80]	; (800fa50 <serialDisplay+0xf4>)
 800fa00:	edd3 7a00 	vldr	s15, [r3]
 800fa04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa08:	ee17 6a90 	vmov	r6, s15
 800fa0c:	4b11      	ldr	r3, [pc, #68]	; (800fa54 <serialDisplay+0xf8>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	9306      	str	r3, [sp, #24]
 800fa12:	9605      	str	r6, [sp, #20]
 800fa14:	9504      	str	r5, [sp, #16]
 800fa16:	9403      	str	r4, [sp, #12]
 800fa18:	9002      	str	r0, [sp, #8]
 800fa1a:	9101      	str	r1, [sp, #4]
 800fa1c:	9200      	str	r2, [sp, #0]
 800fa1e:	ee15 3a90 	vmov	r3, s11
 800fa22:	ee16 2a10 	vmov	r2, s12
 800fa26:	4661      	mov	r1, ip
 800fa28:	480b      	ldr	r0, [pc, #44]	; (800fa58 <serialDisplay+0xfc>)
 800fa2a:	f001 fef9 	bl	8011820 <iprintf>
			(int)(length),
			totalNum
			);
}
 800fa2e:	bf00      	nop
 800fa30:	3704      	adds	r7, #4
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20002620 	.word	0x20002620
 800fa3c:	447a0000 	.word	0x447a0000
 800fa40:	200026d0 	.word	0x200026d0
 800fa44:	20000380 	.word	0x20000380
 800fa48:	20000384 	.word	0x20000384
 800fa4c:	20000388 	.word	0x20000388
 800fa50:	200026b8 	.word	0x200026b8
 800fa54:	200026b4 	.word	0x200026b4
 800fa58:	08015a00 	.word	0x08015a00

0800fa5c <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]

	char commandChar;
	float pCommand = 0;
 800fa64:	f04f 0300 	mov.w	r3, #0
 800fa68:	60bb      	str	r3, [r7, #8]

	//Read the received buffer with customized message. The first char means command type. The second number represents the interested chamber number. The third float number is the pressure command.
	sscanf(pSerialReceiveBuffer, "%c %f", &commandChar, &pCommand);
 800fa6a:	f107 0308 	add.w	r3, r7, #8
 800fa6e:	f107 020f 	add.w	r2, r7, #15
 800fa72:	4935      	ldr	r1, [pc, #212]	; (800fb48 <serial3Callback+0xec>)
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f001 ffd1 	bl	8011a1c <siscanf>


	if (commandChar == 'g') {
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	2b67      	cmp	r3, #103	; 0x67
 800fa7e:	d103      	bne.n	800fa88 <serial3Callback+0x2c>
		loop_gogogo = 1;
 800fa80:	4b32      	ldr	r3, [pc, #200]	; (800fb4c <serial3Callback+0xf0>)
 800fa82:	2201      	movs	r2, #1
 800fa84:	601a      	str	r2, [r3, #0]
		}
	else if(commandChar == 'r') {
		ratio=pCommand;
		}

}
 800fa86:	e05a      	b.n	800fb3e <serial3Callback+0xe2>
	} else if (commandChar == 's') {
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
 800fa8a:	2b73      	cmp	r3, #115	; 0x73
 800fa8c:	d10b      	bne.n	800faa6 <serial3Callback+0x4a>
		loop_gogogo = 0;
 800fa8e:	4b2f      	ldr	r3, [pc, #188]	; (800fb4c <serial3Callback+0xf0>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
		pneudrive.chambers[0]->writePressure(0);
 800fa94:	4b2e      	ldr	r3, [pc, #184]	; (800fb50 <serial3Callback+0xf4>)
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800fb54 <serial3Callback+0xf8>
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fb f864 	bl	800ab6c <_ZN7CHAMBER13writePressureEf>
}
 800faa4:	e04b      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'a') {
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
 800faa8:	2b61      	cmp	r3, #97	; 0x61
 800faaa:	d103      	bne.n	800fab4 <serial3Callback+0x58>
		amp=pCommand;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	4a2a      	ldr	r2, [pc, #168]	; (800fb58 <serial3Callback+0xfc>)
 800fab0:	6013      	str	r3, [r2, #0]
}
 800fab2:	e044      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'f') {
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
 800fab6:	2b66      	cmp	r3, #102	; 0x66
 800fab8:	d116      	bne.n	800fae8 <serial3Callback+0x8c>
			fre=pCommand;
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	4a27      	ldr	r2, [pc, #156]	; (800fb5c <serial3Callback+0x100>)
 800fabe:	6013      	str	r3, [r2, #0]
			numUpdateValue=round(500/fre);
 800fac0:	4b26      	ldr	r3, [pc, #152]	; (800fb5c <serial3Callback+0x100>)
 800fac2:	edd3 7a00 	vldr	s15, [r3]
 800fac6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800fb60 <serial3Callback+0x104>
 800faca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800face:	eeb0 0a66 	vmov.f32	s0, s13
 800fad2:	f7ff fdd5 	bl	800f680 <_ZSt5roundf>
 800fad6:	eef0 7a40 	vmov.f32	s15, s0
 800fada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fade:	ee17 2a90 	vmov	r2, s15
 800fae2:	4b20      	ldr	r3, [pc, #128]	; (800fb64 <serial3Callback+0x108>)
 800fae4:	601a      	str	r2, [r3, #0]
}
 800fae6:	e02a      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'o') {
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	2b6f      	cmp	r3, #111	; 0x6f
 800faec:	d103      	bne.n	800faf6 <serial3Callback+0x9a>
			offset=pCommand;
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	4a1d      	ldr	r2, [pc, #116]	; (800fb68 <serial3Callback+0x10c>)
 800faf2:	6013      	str	r3, [r2, #0]
}
 800faf4:	e023      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'z') {
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	2b7a      	cmp	r3, #122	; 0x7a
 800fafa:	d10c      	bne.n	800fb16 <serial3Callback+0xba>
			pneudrive.chambers[0]->zeroPressure();
 800fafc:	4b14      	ldr	r3, [pc, #80]	; (800fb50 <serial3Callback+0xf4>)
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fa ffde 	bl	800aac4 <_ZN7CHAMBER12zeroPressureEv>
			pneudrive.pSource.zeroPressure();
 800fb08:	4818      	ldr	r0, [pc, #96]	; (800fb6c <serial3Callback+0x110>)
 800fb0a:	f7fb fc56 	bl	800b3ba <_ZN15PRESSURE_SOURCE12zeroPressureEv>
			pneudrive.pSink.zeroPressure();
 800fb0e:	4818      	ldr	r0, [pc, #96]	; (800fb70 <serial3Callback+0x114>)
 800fb10:	f7fb fc53 	bl	800b3ba <_ZN15PRESSURE_SOURCE12zeroPressureEv>
}
 800fb14:	e013      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'u') {
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
 800fb18:	2b75      	cmp	r3, #117	; 0x75
 800fb1a:	d103      	bne.n	800fb24 <serial3Callback+0xc8>
		upstreamPressure=pCommand;
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	4a15      	ldr	r2, [pc, #84]	; (800fb74 <serial3Callback+0x118>)
 800fb20:	6013      	str	r3, [r2, #0]
}
 800fb22:	e00c      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'd') {
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	2b64      	cmp	r3, #100	; 0x64
 800fb28:	d103      	bne.n	800fb32 <serial3Callback+0xd6>
		downstreamPressure=pCommand;
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	4a12      	ldr	r2, [pc, #72]	; (800fb78 <serial3Callback+0x11c>)
 800fb2e:	6013      	str	r3, [r2, #0]
}
 800fb30:	e005      	b.n	800fb3e <serial3Callback+0xe2>
	else if(commandChar == 'r') {
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	2b72      	cmp	r3, #114	; 0x72
 800fb36:	d102      	bne.n	800fb3e <serial3Callback+0xe2>
		ratio=pCommand;
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	4a10      	ldr	r2, [pc, #64]	; (800fb7c <serial3Callback+0x120>)
 800fb3c:	6013      	str	r3, [r2, #0]
}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	08015a28 	.word	0x08015a28
 800fb4c:	200026bc 	.word	0x200026bc
 800fb50:	20002620 	.word	0x20002620
 800fb54:	00000000 	.word	0x00000000
 800fb58:	20000380 	.word	0x20000380
 800fb5c:	20000388 	.word	0x20000388
 800fb60:	43fa0000 	.word	0x43fa0000
 800fb64:	2000038c 	.word	0x2000038c
 800fb68:	20000384 	.word	0x20000384
 800fb6c:	2000262c 	.word	0x2000262c
 800fb70:	2000266c 	.word	0x2000266c
 800fb74:	20000390 	.word	0x20000390
 800fb78:	20000394 	.word	0x20000394
 800fb7c:	20000398 	.word	0x20000398

0800fb80 <_Z41__static_initialization_and_destruction_0ii>:
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d112      	bne.n	800fbb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d10d      	bne.n	800fbb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
SOFT_ARM softArm;
 800fb9a:	4809      	ldr	r0, [pc, #36]	; (800fbc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fb9c:	f7ff fc28 	bl	800f3f0 <_ZN8SOFT_ARMC1Ev>
PNEUDRIVE pneudrive(2);
 800fba0:	2102      	movs	r1, #2
 800fba2:	4808      	ldr	r0, [pc, #32]	; (800fbc4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800fba4:	f7fb fc5a 	bl	800b45c <_ZN9PNEUDRIVEC1Ei>
PRESSURE_SOURCE pSink2(7,analogPort_sink);
 800fba8:	4b07      	ldr	r3, [pc, #28]	; (800fbc8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	461a      	mov	r2, r3
 800fbae:	2107      	movs	r1, #7
 800fbb0:	4806      	ldr	r0, [pc, #24]	; (800fbcc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800fbb2:	f7fb fae7 	bl	800b184 <_ZN15PRESSURE_SOURCEC1Eii>
}
 800fbb6:	bf00      	nop
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	200015e0 	.word	0x200015e0
 800fbc4:	20002620 	.word	0x20002620
 800fbc8:	20000370 	.word	0x20000370
 800fbcc:	200026dc 	.word	0x200026dc

0800fbd0 <_GLOBAL__sub_I_softArm>:
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbd8:	2001      	movs	r0, #1
 800fbda:	f7ff ffd1 	bl	800fb80 <_Z41__static_initialization_and_destruction_0ii>
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <slaveSPITxRxCpltCallback>:
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
}



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800fbe8:	4b0d      	ldr	r3, [pc, #52]	; (800fc20 <slaveSPITxRxCpltCallback+0x40>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d111      	bne.n	800fc16 <slaveSPITxRxCpltCallback+0x36>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 800fbf2:	4a0c      	ldr	r2, [pc, #48]	; (800fc24 <slaveSPITxRxCpltCallback+0x44>)
 800fbf4:	4b0b      	ldr	r3, [pc, #44]	; (800fc24 <slaveSPITxRxCpltCallback+0x44>)
 800fbf6:	f602 4098 	addw	r0, r2, #3224	; 0xc98
 800fbfa:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800fbfe:	f240 2292 	movw	r2, #658	; 0x292
 800fc02:	4619      	mov	r1, r3
 800fc04:	f000 ff2e 	bl	8010a64 <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800fc08:	f240 2392 	movw	r3, #658	; 0x292
 800fc0c:	4a06      	ldr	r2, [pc, #24]	; (800fc28 <slaveSPITxRxCpltCallback+0x48>)
 800fc0e:	4907      	ldr	r1, [pc, #28]	; (800fc2c <slaveSPITxRxCpltCallback+0x4c>)
 800fc10:	4807      	ldr	r0, [pc, #28]	; (800fc30 <slaveSPITxRxCpltCallback+0x50>)
 800fc12:	f7f4 f947 	bl	8003ea4 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800fc16:	bf00      	nop
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	2000039c 	.word	0x2000039c
 800fc24:	200015e0 	.word	0x200015e0
 800fc28:	20001d54 	.word	0x20001d54
 800fc2c:	20001fe6 	.word	0x20001fe6
 800fc30:	2000aba8 	.word	0x2000aba8

0800fc34 <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800fc3c:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <slaveSPIErrorCallback+0x30>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d109      	bne.n	800fc5a <slaveSPIErrorCallback+0x26>
		printf("Error SPI 1 communication with RPI4\r\n");
 800fc46:	4808      	ldr	r0, [pc, #32]	; (800fc68 <slaveSPIErrorCallback+0x34>)
 800fc48:	f001 fe5e 	bl	8011908 <puts>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800fc4c:	f240 2392 	movw	r3, #658	; 0x292
 800fc50:	4a06      	ldr	r2, [pc, #24]	; (800fc6c <slaveSPIErrorCallback+0x38>)
 800fc52:	4907      	ldr	r1, [pc, #28]	; (800fc70 <slaveSPIErrorCallback+0x3c>)
 800fc54:	4807      	ldr	r0, [pc, #28]	; (800fc74 <slaveSPIErrorCallback+0x40>)
 800fc56:	f7f4 f925 	bl	8003ea4 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800fc5a:	bf00      	nop
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	2000039c 	.word	0x2000039c
 800fc68:	08015a30 	.word	0x08015a30
 800fc6c:	20001d54 	.word	0x20001d54
 800fc70:	20001fe6 	.word	0x20001fe6
 800fc74:	2000aba8 	.word	0x2000aba8

0800fc78 <__cxa_pure_virtual>:
 800fc78:	b508      	push	{r3, lr}
 800fc7a:	f000 f825 	bl	800fcc8 <_ZSt9terminatev>

0800fc7e <_Znwj>:
 800fc7e:	b510      	push	{r4, lr}
 800fc80:	2800      	cmp	r0, #0
 800fc82:	bf14      	ite	ne
 800fc84:	4604      	movne	r4, r0
 800fc86:	2401      	moveq	r4, #1
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 fee3 	bl	8010a54 <malloc>
 800fc8e:	b930      	cbnz	r0, 800fc9e <_Znwj+0x20>
 800fc90:	f000 f806 	bl	800fca0 <_ZSt15get_new_handlerv>
 800fc94:	b908      	cbnz	r0, 800fc9a <_Znwj+0x1c>
 800fc96:	f000 fea4 	bl	80109e2 <abort>
 800fc9a:	4780      	blx	r0
 800fc9c:	e7f4      	b.n	800fc88 <_Znwj+0xa>
 800fc9e:	bd10      	pop	{r4, pc}

0800fca0 <_ZSt15get_new_handlerv>:
 800fca0:	4b02      	ldr	r3, [pc, #8]	; (800fcac <_ZSt15get_new_handlerv+0xc>)
 800fca2:	6818      	ldr	r0, [r3, #0]
 800fca4:	f3bf 8f5b 	dmb	ish
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	2000271c 	.word	0x2000271c

0800fcb0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fcb0:	b508      	push	{r3, lr}
 800fcb2:	4780      	blx	r0
 800fcb4:	f000 fe95 	bl	80109e2 <abort>

0800fcb8 <_ZSt13get_terminatev>:
 800fcb8:	4b02      	ldr	r3, [pc, #8]	; (800fcc4 <_ZSt13get_terminatev+0xc>)
 800fcba:	6818      	ldr	r0, [r3, #0]
 800fcbc:	f3bf 8f5b 	dmb	ish
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	200003a0 	.word	0x200003a0

0800fcc8 <_ZSt9terminatev>:
 800fcc8:	b508      	push	{r3, lr}
 800fcca:	f7ff fff5 	bl	800fcb8 <_ZSt13get_terminatev>
 800fcce:	f7ff ffef 	bl	800fcb0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800fcd4 <round>:
 800fcd4:	ee10 3a90 	vmov	r3, s1
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800fcde:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800fce2:	2913      	cmp	r1, #19
 800fce4:	ee10 5a90 	vmov	r5, s1
 800fce8:	ee10 2a10 	vmov	r2, s0
 800fcec:	dc17      	bgt.n	800fd1e <round+0x4a>
 800fcee:	2900      	cmp	r1, #0
 800fcf0:	da09      	bge.n	800fd06 <round+0x32>
 800fcf2:	3101      	adds	r1, #1
 800fcf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcf8:	d103      	bne.n	800fd02 <round+0x2e>
 800fcfa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fcfe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd02:	2200      	movs	r2, #0
 800fd04:	e024      	b.n	800fd50 <round+0x7c>
 800fd06:	4815      	ldr	r0, [pc, #84]	; (800fd5c <round+0x88>)
 800fd08:	4108      	asrs	r0, r1
 800fd0a:	4203      	tst	r3, r0
 800fd0c:	d100      	bne.n	800fd10 <round+0x3c>
 800fd0e:	b16a      	cbz	r2, 800fd2c <round+0x58>
 800fd10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd14:	410b      	asrs	r3, r1
 800fd16:	442b      	add	r3, r5
 800fd18:	ea23 0300 	bic.w	r3, r3, r0
 800fd1c:	e7f1      	b.n	800fd02 <round+0x2e>
 800fd1e:	2933      	cmp	r1, #51	; 0x33
 800fd20:	dd05      	ble.n	800fd2e <round+0x5a>
 800fd22:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fd26:	d101      	bne.n	800fd2c <round+0x58>
 800fd28:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fd2c:	bd30      	pop	{r4, r5, pc}
 800fd2e:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800fd32:	f04f 34ff 	mov.w	r4, #4294967295
 800fd36:	40c4      	lsrs	r4, r0
 800fd38:	4222      	tst	r2, r4
 800fd3a:	d0f7      	beq.n	800fd2c <round+0x58>
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800fd42:	fa00 f101 	lsl.w	r1, r0, r1
 800fd46:	1852      	adds	r2, r2, r1
 800fd48:	bf28      	it	cs
 800fd4a:	181b      	addcs	r3, r3, r0
 800fd4c:	ea22 0204 	bic.w	r2, r2, r4
 800fd50:	4619      	mov	r1, r3
 800fd52:	4610      	mov	r0, r2
 800fd54:	ec41 0b10 	vmov	d0, r0, r1
 800fd58:	e7e8      	b.n	800fd2c <round+0x58>
 800fd5a:	bf00      	nop
 800fd5c:	000fffff 	.word	0x000fffff

0800fd60 <sin>:
 800fd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd62:	eeb0 7b40 	vmov.f64	d7, d0
 800fd66:	ee17 3a90 	vmov	r3, s15
 800fd6a:	4a19      	ldr	r2, [pc, #100]	; (800fdd0 <sin+0x70>)
 800fd6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd70:	4293      	cmp	r3, r2
 800fd72:	dc05      	bgt.n	800fd80 <sin+0x20>
 800fd74:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800fdc8 <sin+0x68>
 800fd78:	2000      	movs	r0, #0
 800fd7a:	f000 fcc5 	bl	8010708 <__kernel_sin>
 800fd7e:	e004      	b.n	800fd8a <sin+0x2a>
 800fd80:	4a14      	ldr	r2, [pc, #80]	; (800fdd4 <sin+0x74>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	dd04      	ble.n	800fd90 <sin+0x30>
 800fd86:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fd8a:	b005      	add	sp, #20
 800fd8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd90:	4668      	mov	r0, sp
 800fd92:	f000 f871 	bl	800fe78 <__ieee754_rem_pio2>
 800fd96:	f000 0003 	and.w	r0, r0, #3
 800fd9a:	2801      	cmp	r0, #1
 800fd9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fda0:	ed9d 0b00 	vldr	d0, [sp]
 800fda4:	d004      	beq.n	800fdb0 <sin+0x50>
 800fda6:	2802      	cmp	r0, #2
 800fda8:	d005      	beq.n	800fdb6 <sin+0x56>
 800fdaa:	b950      	cbnz	r0, 800fdc2 <sin+0x62>
 800fdac:	2001      	movs	r0, #1
 800fdae:	e7e4      	b.n	800fd7a <sin+0x1a>
 800fdb0:	f000 f9a2 	bl	80100f8 <__kernel_cos>
 800fdb4:	e7e9      	b.n	800fd8a <sin+0x2a>
 800fdb6:	2001      	movs	r0, #1
 800fdb8:	f000 fca6 	bl	8010708 <__kernel_sin>
 800fdbc:	eeb1 0b40 	vneg.f64	d0, d0
 800fdc0:	e7e3      	b.n	800fd8a <sin+0x2a>
 800fdc2:	f000 f999 	bl	80100f8 <__kernel_cos>
 800fdc6:	e7f9      	b.n	800fdbc <sin+0x5c>
	...
 800fdd0:	3fe921fb 	.word	0x3fe921fb
 800fdd4:	7fefffff 	.word	0x7fefffff

0800fdd8 <sqrtf>:
 800fdd8:	b500      	push	{lr}
 800fdda:	ed2d 8b02 	vpush	{d8}
 800fdde:	b08b      	sub	sp, #44	; 0x2c
 800fde0:	eeb0 8a40 	vmov.f32	s16, s0
 800fde4:	f000 f984 	bl	80100f0 <__ieee754_sqrtf>
 800fde8:	4b21      	ldr	r3, [pc, #132]	; (800fe70 <sqrtf+0x98>)
 800fdea:	f993 3000 	ldrsb.w	r3, [r3]
 800fdee:	1c5a      	adds	r2, r3, #1
 800fdf0:	d028      	beq.n	800fe44 <sqrtf+0x6c>
 800fdf2:	eeb4 8a48 	vcmp.f32	s16, s16
 800fdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfa:	d623      	bvs.n	800fe44 <sqrtf+0x6c>
 800fdfc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe04:	d51e      	bpl.n	800fe44 <sqrtf+0x6c>
 800fe06:	2201      	movs	r2, #1
 800fe08:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800fe0c:	9200      	str	r2, [sp, #0]
 800fe0e:	4a19      	ldr	r2, [pc, #100]	; (800fe74 <sqrtf+0x9c>)
 800fe10:	9201      	str	r2, [sp, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	9208      	str	r2, [sp, #32]
 800fe16:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fe1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fe1e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800fe68 <sqrtf+0x90>
 800fe22:	b9a3      	cbnz	r3, 800fe4e <sqrtf+0x76>
 800fe24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe28:	4668      	mov	r0, sp
 800fe2a:	f000 fd49 	bl	80108c0 <matherr>
 800fe2e:	b1a0      	cbz	r0, 800fe5a <sqrtf+0x82>
 800fe30:	9b08      	ldr	r3, [sp, #32]
 800fe32:	b11b      	cbz	r3, 800fe3c <sqrtf+0x64>
 800fe34:	f000 fde4 	bl	8010a00 <__errno>
 800fe38:	9b08      	ldr	r3, [sp, #32]
 800fe3a:	6003      	str	r3, [r0, #0]
 800fe3c:	ed9d 0b06 	vldr	d0, [sp, #24]
 800fe40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fe44:	b00b      	add	sp, #44	; 0x2c
 800fe46:	ecbd 8b02 	vpop	{d8}
 800fe4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800fe54:	ed8d 6b06 	vstr	d6, [sp, #24]
 800fe58:	d1e6      	bne.n	800fe28 <sqrtf+0x50>
 800fe5a:	f000 fdd1 	bl	8010a00 <__errno>
 800fe5e:	2321      	movs	r3, #33	; 0x21
 800fe60:	6003      	str	r3, [r0, #0]
 800fe62:	e7e5      	b.n	800fe30 <sqrtf+0x58>
 800fe64:	f3af 8000 	nop.w
	...
 800fe70:	200003a4 	.word	0x200003a4
 800fe74:	08015b88 	.word	0x08015b88

0800fe78 <__ieee754_rem_pio2>:
 800fe78:	b570      	push	{r4, r5, r6, lr}
 800fe7a:	eeb0 7b40 	vmov.f64	d7, d0
 800fe7e:	ee17 5a90 	vmov	r5, s15
 800fe82:	4b95      	ldr	r3, [pc, #596]	; (80100d8 <__ieee754_rem_pio2+0x260>)
 800fe84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe88:	429e      	cmp	r6, r3
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	dc07      	bgt.n	800fea0 <__ieee754_rem_pio2+0x28>
 800fe90:	2200      	movs	r2, #0
 800fe92:	2300      	movs	r3, #0
 800fe94:	ed84 0b00 	vstr	d0, [r4]
 800fe98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	e01b      	b.n	800fed8 <__ieee754_rem_pio2+0x60>
 800fea0:	4b8e      	ldr	r3, [pc, #568]	; (80100dc <__ieee754_rem_pio2+0x264>)
 800fea2:	429e      	cmp	r6, r3
 800fea4:	dc3b      	bgt.n	800ff1e <__ieee754_rem_pio2+0xa6>
 800fea6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800feaa:	2d00      	cmp	r5, #0
 800feac:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010098 <__ieee754_rem_pio2+0x220>
 800feb0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800feb4:	dd19      	ble.n	800feea <__ieee754_rem_pio2+0x72>
 800feb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800feba:	429e      	cmp	r6, r3
 800febc:	d00e      	beq.n	800fedc <__ieee754_rem_pio2+0x64>
 800febe:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80100a0 <__ieee754_rem_pio2+0x228>
 800fec2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800fec6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800feca:	ed84 5b00 	vstr	d5, [r4]
 800fece:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fed2:	ed84 7b02 	vstr	d7, [r4, #8]
 800fed6:	2001      	movs	r0, #1
 800fed8:	b008      	add	sp, #32
 800feda:	bd70      	pop	{r4, r5, r6, pc}
 800fedc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80100a8 <__ieee754_rem_pio2+0x230>
 800fee0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fee4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80100b0 <__ieee754_rem_pio2+0x238>
 800fee8:	e7eb      	b.n	800fec2 <__ieee754_rem_pio2+0x4a>
 800feea:	429e      	cmp	r6, r3
 800feec:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fef0:	d00e      	beq.n	800ff10 <__ieee754_rem_pio2+0x98>
 800fef2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80100a0 <__ieee754_rem_pio2+0x228>
 800fef6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800fefa:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fefe:	ed84 5b00 	vstr	d5, [r4]
 800ff02:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ff06:	f04f 30ff 	mov.w	r0, #4294967295
 800ff0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ff0e:	e7e3      	b.n	800fed8 <__ieee754_rem_pio2+0x60>
 800ff10:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80100a8 <__ieee754_rem_pio2+0x230>
 800ff14:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ff18:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80100b0 <__ieee754_rem_pio2+0x238>
 800ff1c:	e7eb      	b.n	800fef6 <__ieee754_rem_pio2+0x7e>
 800ff1e:	4b70      	ldr	r3, [pc, #448]	; (80100e0 <__ieee754_rem_pio2+0x268>)
 800ff20:	429e      	cmp	r6, r3
 800ff22:	dc6c      	bgt.n	800fffe <__ieee754_rem_pio2+0x186>
 800ff24:	f000 fc48 	bl	80107b8 <fabs>
 800ff28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ff2c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80100b8 <__ieee754_rem_pio2+0x240>
 800ff30:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ff34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ff38:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ff3c:	ee17 0a90 	vmov	r0, s15
 800ff40:	eeb1 5b44 	vneg.f64	d5, d4
 800ff44:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8010098 <__ieee754_rem_pio2+0x220>
 800ff48:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ff4c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80100a0 <__ieee754_rem_pio2+0x228>
 800ff50:	281f      	cmp	r0, #31
 800ff52:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ff56:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ff5a:	dc08      	bgt.n	800ff6e <__ieee754_rem_pio2+0xf6>
 800ff5c:	1e42      	subs	r2, r0, #1
 800ff5e:	4b61      	ldr	r3, [pc, #388]	; (80100e4 <__ieee754_rem_pio2+0x26c>)
 800ff60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff64:	42b3      	cmp	r3, r6
 800ff66:	d002      	beq.n	800ff6e <__ieee754_rem_pio2+0xf6>
 800ff68:	ed84 6b00 	vstr	d6, [r4]
 800ff6c:	e022      	b.n	800ffb4 <__ieee754_rem_pio2+0x13c>
 800ff6e:	ee16 3a90 	vmov	r3, s13
 800ff72:	1536      	asrs	r6, r6, #20
 800ff74:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ff78:	1af3      	subs	r3, r6, r3
 800ff7a:	2b10      	cmp	r3, #16
 800ff7c:	ddf4      	ble.n	800ff68 <__ieee754_rem_pio2+0xf0>
 800ff7e:	eeb0 6b40 	vmov.f64	d6, d0
 800ff82:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80100a8 <__ieee754_rem_pio2+0x230>
 800ff86:	eea5 6b03 	vfma.f64	d6, d5, d3
 800ff8a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ff8e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ff92:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80100b0 <__ieee754_rem_pio2+0x238>
 800ff96:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800ff9a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ff9e:	ee13 3a90 	vmov	r3, s7
 800ffa2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ffa6:	1af6      	subs	r6, r6, r3
 800ffa8:	2e31      	cmp	r6, #49	; 0x31
 800ffaa:	dc17      	bgt.n	800ffdc <__ieee754_rem_pio2+0x164>
 800ffac:	eeb0 0b46 	vmov.f64	d0, d6
 800ffb0:	ed84 3b00 	vstr	d3, [r4]
 800ffb4:	ed94 6b00 	vldr	d6, [r4]
 800ffb8:	2d00      	cmp	r5, #0
 800ffba:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ffbe:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ffc2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ffc6:	da87      	bge.n	800fed8 <__ieee754_rem_pio2+0x60>
 800ffc8:	eeb1 6b46 	vneg.f64	d6, d6
 800ffcc:	ed84 6b00 	vstr	d6, [r4]
 800ffd0:	eeb1 7b47 	vneg.f64	d7, d7
 800ffd4:	4240      	negs	r0, r0
 800ffd6:	ed84 7b02 	vstr	d7, [r4, #8]
 800ffda:	e77d      	b.n	800fed8 <__ieee754_rem_pio2+0x60>
 800ffdc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 80100c0 <__ieee754_rem_pio2+0x248>
 800ffe0:	eeb0 0b46 	vmov.f64	d0, d6
 800ffe4:	eea5 0b03 	vfma.f64	d0, d5, d3
 800ffe8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ffec:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80100c8 <__ieee754_rem_pio2+0x250>
 800fff0:	eea5 7b03 	vfma.f64	d7, d5, d3
 800fff4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800fff8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fffc:	e7b4      	b.n	800ff68 <__ieee754_rem_pio2+0xf0>
 800fffe:	4b3a      	ldr	r3, [pc, #232]	; (80100e8 <__ieee754_rem_pio2+0x270>)
 8010000:	429e      	cmp	r6, r3
 8010002:	dd06      	ble.n	8010012 <__ieee754_rem_pio2+0x19a>
 8010004:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010008:	ed80 7b02 	vstr	d7, [r0, #8]
 801000c:	ed80 7b00 	vstr	d7, [r0]
 8010010:	e744      	b.n	800fe9c <__ieee754_rem_pio2+0x24>
 8010012:	1532      	asrs	r2, r6, #20
 8010014:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010018:	ee10 0a10 	vmov	r0, s0
 801001c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010020:	ec41 0b17 	vmov	d7, r0, r1
 8010024:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010028:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80100d0 <__ieee754_rem_pio2+0x258>
 801002c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010030:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010034:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010038:	ee27 7b05 	vmul.f64	d7, d7, d5
 801003c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010040:	a908      	add	r1, sp, #32
 8010042:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010046:	ee37 7b46 	vsub.f64	d7, d7, d6
 801004a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801004e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010052:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010056:	2303      	movs	r3, #3
 8010058:	ed31 7b02 	vldmdb	r1!, {d7}
 801005c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	f103 30ff 	add.w	r0, r3, #4294967295
 8010068:	d013      	beq.n	8010092 <__ieee754_rem_pio2+0x21a>
 801006a:	4920      	ldr	r1, [pc, #128]	; (80100ec <__ieee754_rem_pio2+0x274>)
 801006c:	9101      	str	r1, [sp, #4]
 801006e:	2102      	movs	r1, #2
 8010070:	9100      	str	r1, [sp, #0]
 8010072:	a802      	add	r0, sp, #8
 8010074:	4621      	mov	r1, r4
 8010076:	f000 f8ab 	bl	80101d0 <__kernel_rem_pio2>
 801007a:	2d00      	cmp	r5, #0
 801007c:	f6bf af2c 	bge.w	800fed8 <__ieee754_rem_pio2+0x60>
 8010080:	ed94 7b00 	vldr	d7, [r4]
 8010084:	eeb1 7b47 	vneg.f64	d7, d7
 8010088:	ed84 7b00 	vstr	d7, [r4]
 801008c:	ed94 7b02 	vldr	d7, [r4, #8]
 8010090:	e79e      	b.n	800ffd0 <__ieee754_rem_pio2+0x158>
 8010092:	4603      	mov	r3, r0
 8010094:	e7e0      	b.n	8010058 <__ieee754_rem_pio2+0x1e0>
 8010096:	bf00      	nop
 8010098:	54400000 	.word	0x54400000
 801009c:	3ff921fb 	.word	0x3ff921fb
 80100a0:	1a626331 	.word	0x1a626331
 80100a4:	3dd0b461 	.word	0x3dd0b461
 80100a8:	1a600000 	.word	0x1a600000
 80100ac:	3dd0b461 	.word	0x3dd0b461
 80100b0:	2e037073 	.word	0x2e037073
 80100b4:	3ba3198a 	.word	0x3ba3198a
 80100b8:	6dc9c883 	.word	0x6dc9c883
 80100bc:	3fe45f30 	.word	0x3fe45f30
 80100c0:	2e000000 	.word	0x2e000000
 80100c4:	3ba3198a 	.word	0x3ba3198a
 80100c8:	252049c1 	.word	0x252049c1
 80100cc:	397b839a 	.word	0x397b839a
 80100d0:	00000000 	.word	0x00000000
 80100d4:	41700000 	.word	0x41700000
 80100d8:	3fe921fb 	.word	0x3fe921fb
 80100dc:	4002d97b 	.word	0x4002d97b
 80100e0:	413921fb 	.word	0x413921fb
 80100e4:	08015b90 	.word	0x08015b90
 80100e8:	7fefffff 	.word	0x7fefffff
 80100ec:	08015c10 	.word	0x08015c10

080100f0 <__ieee754_sqrtf>:
 80100f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80100f4:	4770      	bx	lr
	...

080100f8 <__kernel_cos>:
 80100f8:	ee10 1a90 	vmov	r1, s1
 80100fc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010104:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010108:	da05      	bge.n	8010116 <__kernel_cos+0x1e>
 801010a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801010e:	ee16 3a90 	vmov	r3, s13
 8010112:	2b00      	cmp	r3, #0
 8010114:	d03d      	beq.n	8010192 <__kernel_cos+0x9a>
 8010116:	ee20 4b00 	vmul.f64	d4, d0, d0
 801011a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801011e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8010198 <__kernel_cos+0xa0>
 8010122:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8010126:	ee24 6b06 	vmul.f64	d6, d4, d6
 801012a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80101a0 <__kernel_cos+0xa8>
 801012e:	eea4 5b03 	vfma.f64	d5, d4, d3
 8010132:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80101a8 <__kernel_cos+0xb0>
 8010136:	eea5 3b04 	vfma.f64	d3, d5, d4
 801013a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80101b0 <__kernel_cos+0xb8>
 801013e:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010142:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80101b8 <__kernel_cos+0xc0>
 8010146:	4b20      	ldr	r3, [pc, #128]	; (80101c8 <__kernel_cos+0xd0>)
 8010148:	eea5 3b04 	vfma.f64	d3, d5, d4
 801014c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80101c0 <__kernel_cos+0xc8>
 8010150:	4299      	cmp	r1, r3
 8010152:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010156:	ee25 5b04 	vmul.f64	d5, d5, d4
 801015a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801015e:	dc04      	bgt.n	801016a <__kernel_cos+0x72>
 8010160:	ee36 6b41 	vsub.f64	d6, d6, d1
 8010164:	ee37 0b46 	vsub.f64	d0, d7, d6
 8010168:	4770      	bx	lr
 801016a:	4b18      	ldr	r3, [pc, #96]	; (80101cc <__kernel_cos+0xd4>)
 801016c:	4299      	cmp	r1, r3
 801016e:	dc0d      	bgt.n	801018c <__kernel_cos+0x94>
 8010170:	2200      	movs	r2, #0
 8010172:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010176:	ec43 2b15 	vmov	d5, r2, r3
 801017a:	ee37 0b45 	vsub.f64	d0, d7, d5
 801017e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010182:	ee36 6b41 	vsub.f64	d6, d6, d1
 8010186:	ee30 0b46 	vsub.f64	d0, d0, d6
 801018a:	4770      	bx	lr
 801018c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010190:	e7f3      	b.n	801017a <__kernel_cos+0x82>
 8010192:	eeb0 0b47 	vmov.f64	d0, d7
 8010196:	4770      	bx	lr
 8010198:	be8838d4 	.word	0xbe8838d4
 801019c:	bda8fae9 	.word	0xbda8fae9
 80101a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80101a4:	3e21ee9e 	.word	0x3e21ee9e
 80101a8:	809c52ad 	.word	0x809c52ad
 80101ac:	be927e4f 	.word	0xbe927e4f
 80101b0:	19cb1590 	.word	0x19cb1590
 80101b4:	3efa01a0 	.word	0x3efa01a0
 80101b8:	16c15177 	.word	0x16c15177
 80101bc:	bf56c16c 	.word	0xbf56c16c
 80101c0:	5555554c 	.word	0x5555554c
 80101c4:	3fa55555 	.word	0x3fa55555
 80101c8:	3fd33332 	.word	0x3fd33332
 80101cc:	3fe90000 	.word	0x3fe90000

080101d0 <__kernel_rem_pio2>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	ed2d 8b06 	vpush	{d8-d10}
 80101d8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80101dc:	469b      	mov	fp, r3
 80101de:	460e      	mov	r6, r1
 80101e0:	4bc7      	ldr	r3, [pc, #796]	; (8010500 <__kernel_rem_pio2+0x330>)
 80101e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80101e4:	9002      	str	r0, [sp, #8]
 80101e6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80101ea:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 80101ec:	1ed1      	subs	r1, r2, #3
 80101ee:	2318      	movs	r3, #24
 80101f0:	f06f 0417 	mvn.w	r4, #23
 80101f4:	fb91 f1f3 	sdiv	r1, r1, r3
 80101f8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80101fc:	f10b 3aff 	add.w	sl, fp, #4294967295
 8010200:	fb01 4404 	mla	r4, r1, r4, r4
 8010204:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80104e8 <__kernel_rem_pio2+0x318>
 8010208:	4414      	add	r4, r2
 801020a:	eba1 050a 	sub.w	r5, r1, sl
 801020e:	aa1a      	add	r2, sp, #104	; 0x68
 8010210:	eb09 070a 	add.w	r7, r9, sl
 8010214:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8010218:	4696      	mov	lr, r2
 801021a:	2300      	movs	r3, #0
 801021c:	42bb      	cmp	r3, r7
 801021e:	dd0f      	ble.n	8010240 <__kernel_rem_pio2+0x70>
 8010220:	af6a      	add	r7, sp, #424	; 0x1a8
 8010222:	2200      	movs	r2, #0
 8010224:	454a      	cmp	r2, r9
 8010226:	dc28      	bgt.n	801027a <__kernel_rem_pio2+0xaa>
 8010228:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801022c:	eb0b 0302 	add.w	r3, fp, r2
 8010230:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8010234:	9d02      	ldr	r5, [sp, #8]
 8010236:	ed9f 7bac 	vldr	d7, [pc, #688]	; 80104e8 <__kernel_rem_pio2+0x318>
 801023a:	f04f 0c00 	mov.w	ip, #0
 801023e:	e016      	b.n	801026e <__kernel_rem_pio2+0x9e>
 8010240:	42dd      	cmn	r5, r3
 8010242:	d409      	bmi.n	8010258 <__kernel_rem_pio2+0x88>
 8010244:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8010248:	ee07 2a90 	vmov	s15, r2
 801024c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010250:	ecae 7b02 	vstmia	lr!, {d7}
 8010254:	3301      	adds	r3, #1
 8010256:	e7e1      	b.n	801021c <__kernel_rem_pio2+0x4c>
 8010258:	eeb0 7b46 	vmov.f64	d7, d6
 801025c:	e7f8      	b.n	8010250 <__kernel_rem_pio2+0x80>
 801025e:	ecb5 5b02 	vldmia	r5!, {d5}
 8010262:	ed33 6b02 	vldmdb	r3!, {d6}
 8010266:	f10c 0c01 	add.w	ip, ip, #1
 801026a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801026e:	45d4      	cmp	ip, sl
 8010270:	ddf5      	ble.n	801025e <__kernel_rem_pio2+0x8e>
 8010272:	eca7 7b02 	vstmia	r7!, {d7}
 8010276:	3201      	adds	r2, #1
 8010278:	e7d4      	b.n	8010224 <__kernel_rem_pio2+0x54>
 801027a:	ab06      	add	r3, sp, #24
 801027c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010280:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 80104f0 <__kernel_rem_pio2+0x320>
 8010284:	ed9f ab9c 	vldr	d10, [pc, #624]	; 80104f8 <__kernel_rem_pio2+0x328>
 8010288:	9304      	str	r3, [sp, #16]
 801028a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	464d      	mov	r5, r9
 8010292:	ab92      	add	r3, sp, #584	; 0x248
 8010294:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8010298:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801029c:	3f01      	subs	r7, #1
 801029e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80102a2:	00ff      	lsls	r7, r7, #3
 80102a4:	ab92      	add	r3, sp, #584	; 0x248
 80102a6:	19da      	adds	r2, r3, r7
 80102a8:	3a98      	subs	r2, #152	; 0x98
 80102aa:	2300      	movs	r3, #0
 80102ac:	1ae9      	subs	r1, r5, r3
 80102ae:	2900      	cmp	r1, #0
 80102b0:	dc4e      	bgt.n	8010350 <__kernel_rem_pio2+0x180>
 80102b2:	4620      	mov	r0, r4
 80102b4:	f000 fb08 	bl	80108c8 <scalbn>
 80102b8:	eeb0 8b40 	vmov.f64	d8, d0
 80102bc:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80102c0:	ee28 0b00 	vmul.f64	d0, d8, d0
 80102c4:	f000 fa84 	bl	80107d0 <floor>
 80102c8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80102cc:	eea0 8b47 	vfms.f64	d8, d0, d7
 80102d0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80102d4:	2c00      	cmp	r4, #0
 80102d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80102da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80102de:	ee38 8b47 	vsub.f64	d8, d8, d7
 80102e2:	dd4a      	ble.n	801037a <__kernel_rem_pio2+0x1aa>
 80102e4:	1e69      	subs	r1, r5, #1
 80102e6:	ab06      	add	r3, sp, #24
 80102e8:	f1c4 0018 	rsb	r0, r4, #24
 80102ec:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80102f0:	9a01      	ldr	r2, [sp, #4]
 80102f2:	fa4c f300 	asr.w	r3, ip, r0
 80102f6:	441a      	add	r2, r3
 80102f8:	4083      	lsls	r3, r0
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	ebac 0203 	sub.w	r2, ip, r3
 8010300:	ab06      	add	r3, sp, #24
 8010302:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8010306:	f1c4 0317 	rsb	r3, r4, #23
 801030a:	fa42 f803 	asr.w	r8, r2, r3
 801030e:	f1b8 0f00 	cmp.w	r8, #0
 8010312:	dd43      	ble.n	801039c <__kernel_rem_pio2+0x1cc>
 8010314:	9b01      	ldr	r3, [sp, #4]
 8010316:	2000      	movs	r0, #0
 8010318:	3301      	adds	r3, #1
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	4601      	mov	r1, r0
 801031e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8010322:	4285      	cmp	r5, r0
 8010324:	dc6e      	bgt.n	8010404 <__kernel_rem_pio2+0x234>
 8010326:	2c00      	cmp	r4, #0
 8010328:	dd04      	ble.n	8010334 <__kernel_rem_pio2+0x164>
 801032a:	2c01      	cmp	r4, #1
 801032c:	d07f      	beq.n	801042e <__kernel_rem_pio2+0x25e>
 801032e:	2c02      	cmp	r4, #2
 8010330:	f000 8087 	beq.w	8010442 <__kernel_rem_pio2+0x272>
 8010334:	f1b8 0f02 	cmp.w	r8, #2
 8010338:	d130      	bne.n	801039c <__kernel_rem_pio2+0x1cc>
 801033a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801033e:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010342:	b359      	cbz	r1, 801039c <__kernel_rem_pio2+0x1cc>
 8010344:	4620      	mov	r0, r4
 8010346:	f000 fabf 	bl	80108c8 <scalbn>
 801034a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801034e:	e025      	b.n	801039c <__kernel_rem_pio2+0x1cc>
 8010350:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010354:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010358:	a806      	add	r0, sp, #24
 801035a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801035e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010362:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010366:	ee10 1a10 	vmov	r1, s0
 801036a:	ed32 0b02 	vldmdb	r2!, {d0}
 801036e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8010372:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010376:	3301      	adds	r3, #1
 8010378:	e798      	b.n	80102ac <__kernel_rem_pio2+0xdc>
 801037a:	d106      	bne.n	801038a <__kernel_rem_pio2+0x1ba>
 801037c:	1e6b      	subs	r3, r5, #1
 801037e:	aa06      	add	r2, sp, #24
 8010380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010384:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8010388:	e7c1      	b.n	801030e <__kernel_rem_pio2+0x13e>
 801038a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801038e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010396:	da32      	bge.n	80103fe <__kernel_rem_pio2+0x22e>
 8010398:	f04f 0800 	mov.w	r8, #0
 801039c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a4:	f040 80b0 	bne.w	8010508 <__kernel_rem_pio2+0x338>
 80103a8:	1e6b      	subs	r3, r5, #1
 80103aa:	4618      	mov	r0, r3
 80103ac:	2200      	movs	r2, #0
 80103ae:	4548      	cmp	r0, r9
 80103b0:	da4e      	bge.n	8010450 <__kernel_rem_pio2+0x280>
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	f000 8088 	beq.w	80104c8 <__kernel_rem_pio2+0x2f8>
 80103b8:	aa06      	add	r2, sp, #24
 80103ba:	3c18      	subs	r4, #24
 80103bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80103c0:	2900      	cmp	r1, #0
 80103c2:	f000 808e 	beq.w	80104e2 <__kernel_rem_pio2+0x312>
 80103c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80103ca:	4620      	mov	r0, r4
 80103cc:	9302      	str	r3, [sp, #8]
 80103ce:	f000 fa7b 	bl	80108c8 <scalbn>
 80103d2:	9b02      	ldr	r3, [sp, #8]
 80103d4:	aa6a      	add	r2, sp, #424	; 0x1a8
 80103d6:	00d9      	lsls	r1, r3, #3
 80103d8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80104f0 <__kernel_rem_pio2+0x320>
 80103dc:	1850      	adds	r0, r2, r1
 80103de:	f100 0508 	add.w	r5, r0, #8
 80103e2:	461c      	mov	r4, r3
 80103e4:	2c00      	cmp	r4, #0
 80103e6:	f280 80bd 	bge.w	8010564 <__kernel_rem_pio2+0x394>
 80103ea:	2500      	movs	r5, #0
 80103ec:	1b5c      	subs	r4, r3, r5
 80103ee:	2c00      	cmp	r4, #0
 80103f0:	f2c0 80dd 	blt.w	80105ae <__kernel_rem_pio2+0x3de>
 80103f4:	4f43      	ldr	r7, [pc, #268]	; (8010504 <__kernel_rem_pio2+0x334>)
 80103f6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 80104e8 <__kernel_rem_pio2+0x318>
 80103fa:	2400      	movs	r4, #0
 80103fc:	e0cb      	b.n	8010596 <__kernel_rem_pio2+0x3c6>
 80103fe:	f04f 0802 	mov.w	r8, #2
 8010402:	e787      	b.n	8010314 <__kernel_rem_pio2+0x144>
 8010404:	ab06      	add	r3, sp, #24
 8010406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801040a:	b949      	cbnz	r1, 8010420 <__kernel_rem_pio2+0x250>
 801040c:	b12b      	cbz	r3, 801041a <__kernel_rem_pio2+0x24a>
 801040e:	aa06      	add	r2, sp, #24
 8010410:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010414:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010418:	2301      	movs	r3, #1
 801041a:	3001      	adds	r0, #1
 801041c:	4619      	mov	r1, r3
 801041e:	e780      	b.n	8010322 <__kernel_rem_pio2+0x152>
 8010420:	aa06      	add	r2, sp, #24
 8010422:	ebac 0303 	sub.w	r3, ip, r3
 8010426:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801042a:	460b      	mov	r3, r1
 801042c:	e7f5      	b.n	801041a <__kernel_rem_pio2+0x24a>
 801042e:	1e68      	subs	r0, r5, #1
 8010430:	ab06      	add	r3, sp, #24
 8010432:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010436:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801043a:	aa06      	add	r2, sp, #24
 801043c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010440:	e778      	b.n	8010334 <__kernel_rem_pio2+0x164>
 8010442:	1e68      	subs	r0, r5, #1
 8010444:	ab06      	add	r3, sp, #24
 8010446:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801044a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801044e:	e7f4      	b.n	801043a <__kernel_rem_pio2+0x26a>
 8010450:	a906      	add	r1, sp, #24
 8010452:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010456:	3801      	subs	r0, #1
 8010458:	430a      	orrs	r2, r1
 801045a:	e7a8      	b.n	80103ae <__kernel_rem_pio2+0x1de>
 801045c:	f10c 0c01 	add.w	ip, ip, #1
 8010460:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010464:	2a00      	cmp	r2, #0
 8010466:	d0f9      	beq.n	801045c <__kernel_rem_pio2+0x28c>
 8010468:	eb0b 0305 	add.w	r3, fp, r5
 801046c:	aa1a      	add	r2, sp, #104	; 0x68
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	1898      	adds	r0, r3, r2
 8010472:	3008      	adds	r0, #8
 8010474:	1c69      	adds	r1, r5, #1
 8010476:	3708      	adds	r7, #8
 8010478:	2200      	movs	r2, #0
 801047a:	4465      	add	r5, ip
 801047c:	9005      	str	r0, [sp, #20]
 801047e:	428d      	cmp	r5, r1
 8010480:	f6ff af07 	blt.w	8010292 <__kernel_rem_pio2+0xc2>
 8010484:	a81a      	add	r0, sp, #104	; 0x68
 8010486:	eb02 0c03 	add.w	ip, r2, r3
 801048a:	4484      	add	ip, r0
 801048c:	9803      	ldr	r0, [sp, #12]
 801048e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010492:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8010496:	9001      	str	r0, [sp, #4]
 8010498:	ee07 0a90 	vmov	s15, r0
 801049c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80104a0:	9805      	ldr	r0, [sp, #20]
 80104a2:	ed8c 7b00 	vstr	d7, [ip]
 80104a6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80104e8 <__kernel_rem_pio2+0x318>
 80104aa:	eb00 0802 	add.w	r8, r0, r2
 80104ae:	f04f 0c00 	mov.w	ip, #0
 80104b2:	45d4      	cmp	ip, sl
 80104b4:	dd0c      	ble.n	80104d0 <__kernel_rem_pio2+0x300>
 80104b6:	eb02 0c07 	add.w	ip, r2, r7
 80104ba:	a86a      	add	r0, sp, #424	; 0x1a8
 80104bc:	4484      	add	ip, r0
 80104be:	ed8c 7b02 	vstr	d7, [ip, #8]
 80104c2:	3101      	adds	r1, #1
 80104c4:	3208      	adds	r2, #8
 80104c6:	e7da      	b.n	801047e <__kernel_rem_pio2+0x2ae>
 80104c8:	9b04      	ldr	r3, [sp, #16]
 80104ca:	f04f 0c01 	mov.w	ip, #1
 80104ce:	e7c7      	b.n	8010460 <__kernel_rem_pio2+0x290>
 80104d0:	ecbe 5b02 	vldmia	lr!, {d5}
 80104d4:	ed38 6b02 	vldmdb	r8!, {d6}
 80104d8:	f10c 0c01 	add.w	ip, ip, #1
 80104dc:	eea5 7b06 	vfma.f64	d7, d5, d6
 80104e0:	e7e7      	b.n	80104b2 <__kernel_rem_pio2+0x2e2>
 80104e2:	3b01      	subs	r3, #1
 80104e4:	e768      	b.n	80103b8 <__kernel_rem_pio2+0x1e8>
 80104e6:	bf00      	nop
	...
 80104f4:	3e700000 	.word	0x3e700000
 80104f8:	00000000 	.word	0x00000000
 80104fc:	41700000 	.word	0x41700000
 8010500:	08015d58 	.word	0x08015d58
 8010504:	08015d18 	.word	0x08015d18
 8010508:	4260      	negs	r0, r4
 801050a:	eeb0 0b48 	vmov.f64	d0, d8
 801050e:	f000 f9db 	bl	80108c8 <scalbn>
 8010512:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80106f0 <__kernel_rem_pio2+0x520>
 8010516:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051e:	db18      	blt.n	8010552 <__kernel_rem_pio2+0x382>
 8010520:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80106f8 <__kernel_rem_pio2+0x528>
 8010524:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010528:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801052c:	aa06      	add	r2, sp, #24
 801052e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010532:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010536:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801053a:	a906      	add	r1, sp, #24
 801053c:	ee10 3a10 	vmov	r3, s0
 8010540:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010544:	1c6b      	adds	r3, r5, #1
 8010546:	ee17 2a10 	vmov	r2, s14
 801054a:	3418      	adds	r4, #24
 801054c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010550:	e739      	b.n	80103c6 <__kernel_rem_pio2+0x1f6>
 8010552:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010556:	aa06      	add	r2, sp, #24
 8010558:	ee10 3a10 	vmov	r3, s0
 801055c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010560:	462b      	mov	r3, r5
 8010562:	e730      	b.n	80103c6 <__kernel_rem_pio2+0x1f6>
 8010564:	aa06      	add	r2, sp, #24
 8010566:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801056a:	9202      	str	r2, [sp, #8]
 801056c:	ee07 2a90 	vmov	s15, r2
 8010570:	3c01      	subs	r4, #1
 8010572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010576:	ee27 7b00 	vmul.f64	d7, d7, d0
 801057a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801057e:	ed25 7b02 	vstmdb	r5!, {d7}
 8010582:	e72f      	b.n	80103e4 <__kernel_rem_pio2+0x214>
 8010584:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8010588:	ecb7 5b02 	vldmia	r7!, {d5}
 801058c:	ed9c 6b00 	vldr	d6, [ip]
 8010590:	3401      	adds	r4, #1
 8010592:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010596:	454c      	cmp	r4, r9
 8010598:	dc01      	bgt.n	801059e <__kernel_rem_pio2+0x3ce>
 801059a:	42a5      	cmp	r5, r4
 801059c:	daf2      	bge.n	8010584 <__kernel_rem_pio2+0x3b4>
 801059e:	aa42      	add	r2, sp, #264	; 0x108
 80105a0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80105a4:	ed84 7b00 	vstr	d7, [r4]
 80105a8:	3501      	adds	r5, #1
 80105aa:	3808      	subs	r0, #8
 80105ac:	e71e      	b.n	80103ec <__kernel_rem_pio2+0x21c>
 80105ae:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80105b0:	2a03      	cmp	r2, #3
 80105b2:	d84e      	bhi.n	8010652 <__kernel_rem_pio2+0x482>
 80105b4:	e8df f002 	tbb	[pc, r2]
 80105b8:	021f1f3e 	.word	0x021f1f3e
 80105bc:	3108      	adds	r1, #8
 80105be:	aa42      	add	r2, sp, #264	; 0x108
 80105c0:	4411      	add	r1, r2
 80105c2:	4608      	mov	r0, r1
 80105c4:	461c      	mov	r4, r3
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	dc61      	bgt.n	801068e <__kernel_rem_pio2+0x4be>
 80105ca:	4608      	mov	r0, r1
 80105cc:	461c      	mov	r4, r3
 80105ce:	2c01      	cmp	r4, #1
 80105d0:	dc6d      	bgt.n	80106ae <__kernel_rem_pio2+0x4de>
 80105d2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010700 <__kernel_rem_pio2+0x530>
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	dc79      	bgt.n	80106ce <__kernel_rem_pio2+0x4fe>
 80105da:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80105de:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80105e2:	f1b8 0f00 	cmp.w	r8, #0
 80105e6:	d178      	bne.n	80106da <__kernel_rem_pio2+0x50a>
 80105e8:	ed86 5b00 	vstr	d5, [r6]
 80105ec:	ed86 6b02 	vstr	d6, [r6, #8]
 80105f0:	ed86 7b04 	vstr	d7, [r6, #16]
 80105f4:	e02d      	b.n	8010652 <__kernel_rem_pio2+0x482>
 80105f6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8010700 <__kernel_rem_pio2+0x530>
 80105fa:	3108      	adds	r1, #8
 80105fc:	aa42      	add	r2, sp, #264	; 0x108
 80105fe:	4411      	add	r1, r2
 8010600:	4618      	mov	r0, r3
 8010602:	2800      	cmp	r0, #0
 8010604:	da34      	bge.n	8010670 <__kernel_rem_pio2+0x4a0>
 8010606:	f1b8 0f00 	cmp.w	r8, #0
 801060a:	d037      	beq.n	801067c <__kernel_rem_pio2+0x4ac>
 801060c:	eeb1 7b46 	vneg.f64	d7, d6
 8010610:	ed86 7b00 	vstr	d7, [r6]
 8010614:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8010618:	a844      	add	r0, sp, #272	; 0x110
 801061a:	2101      	movs	r1, #1
 801061c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010620:	428b      	cmp	r3, r1
 8010622:	da2e      	bge.n	8010682 <__kernel_rem_pio2+0x4b2>
 8010624:	f1b8 0f00 	cmp.w	r8, #0
 8010628:	d001      	beq.n	801062e <__kernel_rem_pio2+0x45e>
 801062a:	eeb1 7b47 	vneg.f64	d7, d7
 801062e:	ed86 7b02 	vstr	d7, [r6, #8]
 8010632:	e00e      	b.n	8010652 <__kernel_rem_pio2+0x482>
 8010634:	aa92      	add	r2, sp, #584	; 0x248
 8010636:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8010700 <__kernel_rem_pio2+0x530>
 801063a:	4411      	add	r1, r2
 801063c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8010640:	2b00      	cmp	r3, #0
 8010642:	da0f      	bge.n	8010664 <__kernel_rem_pio2+0x494>
 8010644:	f1b8 0f00 	cmp.w	r8, #0
 8010648:	d001      	beq.n	801064e <__kernel_rem_pio2+0x47e>
 801064a:	eeb1 7b47 	vneg.f64	d7, d7
 801064e:	ed86 7b00 	vstr	d7, [r6]
 8010652:	9b01      	ldr	r3, [sp, #4]
 8010654:	f003 0007 	and.w	r0, r3, #7
 8010658:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801065c:	ecbd 8b06 	vpop	{d8-d10}
 8010660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010664:	ed31 6b02 	vldmdb	r1!, {d6}
 8010668:	3b01      	subs	r3, #1
 801066a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801066e:	e7e7      	b.n	8010640 <__kernel_rem_pio2+0x470>
 8010670:	ed31 7b02 	vldmdb	r1!, {d7}
 8010674:	3801      	subs	r0, #1
 8010676:	ee36 6b07 	vadd.f64	d6, d6, d7
 801067a:	e7c2      	b.n	8010602 <__kernel_rem_pio2+0x432>
 801067c:	eeb0 7b46 	vmov.f64	d7, d6
 8010680:	e7c6      	b.n	8010610 <__kernel_rem_pio2+0x440>
 8010682:	ecb0 6b02 	vldmia	r0!, {d6}
 8010686:	3101      	adds	r1, #1
 8010688:	ee37 7b06 	vadd.f64	d7, d7, d6
 801068c:	e7c8      	b.n	8010620 <__kernel_rem_pio2+0x450>
 801068e:	ed10 7b04 	vldr	d7, [r0, #-16]
 8010692:	ed30 5b02 	vldmdb	r0!, {d5}
 8010696:	3c01      	subs	r4, #1
 8010698:	ee37 6b05 	vadd.f64	d6, d7, d5
 801069c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106a0:	ed00 6b02 	vstr	d6, [r0, #-8]
 80106a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80106a8:	ed80 7b00 	vstr	d7, [r0]
 80106ac:	e78b      	b.n	80105c6 <__kernel_rem_pio2+0x3f6>
 80106ae:	ed10 7b04 	vldr	d7, [r0, #-16]
 80106b2:	ed30 5b02 	vldmdb	r0!, {d5}
 80106b6:	3c01      	subs	r4, #1
 80106b8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80106bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106c0:	ed00 6b02 	vstr	d6, [r0, #-8]
 80106c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80106c8:	ed80 7b00 	vstr	d7, [r0]
 80106cc:	e77f      	b.n	80105ce <__kernel_rem_pio2+0x3fe>
 80106ce:	ed31 6b02 	vldmdb	r1!, {d6}
 80106d2:	3b01      	subs	r3, #1
 80106d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106d8:	e77d      	b.n	80105d6 <__kernel_rem_pio2+0x406>
 80106da:	eeb1 5b45 	vneg.f64	d5, d5
 80106de:	eeb1 6b46 	vneg.f64	d6, d6
 80106e2:	ed86 5b00 	vstr	d5, [r6]
 80106e6:	eeb1 7b47 	vneg.f64	d7, d7
 80106ea:	ed86 6b02 	vstr	d6, [r6, #8]
 80106ee:	e77f      	b.n	80105f0 <__kernel_rem_pio2+0x420>
 80106f0:	00000000 	.word	0x00000000
 80106f4:	41700000 	.word	0x41700000
 80106f8:	00000000 	.word	0x00000000
 80106fc:	3e700000 	.word	0x3e700000
	...

08010708 <__kernel_sin>:
 8010708:	ee10 3a90 	vmov	r3, s1
 801070c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010710:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010714:	da04      	bge.n	8010720 <__kernel_sin+0x18>
 8010716:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801071a:	ee17 3a90 	vmov	r3, s15
 801071e:	b35b      	cbz	r3, 8010778 <__kernel_sin+0x70>
 8010720:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010724:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010728:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010780 <__kernel_sin+0x78>
 801072c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010788 <__kernel_sin+0x80>
 8010730:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010734:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010790 <__kernel_sin+0x88>
 8010738:	eea4 7b06 	vfma.f64	d7, d4, d6
 801073c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010798 <__kernel_sin+0x90>
 8010740:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010744:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80107a0 <__kernel_sin+0x98>
 8010748:	eea4 7b06 	vfma.f64	d7, d4, d6
 801074c:	b930      	cbnz	r0, 801075c <__kernel_sin+0x54>
 801074e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80107a8 <__kernel_sin+0xa0>
 8010752:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010756:	eea4 0b05 	vfma.f64	d0, d4, d5
 801075a:	4770      	bx	lr
 801075c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010760:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010764:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010768:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801076c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80107b0 <__kernel_sin+0xa8>
 8010770:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010774:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	5acfd57c 	.word	0x5acfd57c
 8010784:	3de5d93a 	.word	0x3de5d93a
 8010788:	8a2b9ceb 	.word	0x8a2b9ceb
 801078c:	be5ae5e6 	.word	0xbe5ae5e6
 8010790:	57b1fe7d 	.word	0x57b1fe7d
 8010794:	3ec71de3 	.word	0x3ec71de3
 8010798:	19c161d5 	.word	0x19c161d5
 801079c:	bf2a01a0 	.word	0xbf2a01a0
 80107a0:	1110f8a6 	.word	0x1110f8a6
 80107a4:	3f811111 	.word	0x3f811111
 80107a8:	55555549 	.word	0x55555549
 80107ac:	bfc55555 	.word	0xbfc55555
 80107b0:	55555549 	.word	0x55555549
 80107b4:	3fc55555 	.word	0x3fc55555

080107b8 <fabs>:
 80107b8:	ec51 0b10 	vmov	r0, r1, d0
 80107bc:	ee10 2a10 	vmov	r2, s0
 80107c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107c4:	ec43 2b10 	vmov	d0, r2, r3
 80107c8:	4770      	bx	lr
 80107ca:	0000      	movs	r0, r0
 80107cc:	0000      	movs	r0, r0
	...

080107d0 <floor>:
 80107d0:	ee10 1a90 	vmov	r1, s1
 80107d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80107dc:	2b13      	cmp	r3, #19
 80107de:	b530      	push	{r4, r5, lr}
 80107e0:	ee10 0a10 	vmov	r0, s0
 80107e4:	ee10 5a10 	vmov	r5, s0
 80107e8:	dc33      	bgt.n	8010852 <floor+0x82>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	da17      	bge.n	801081e <floor+0x4e>
 80107ee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80108b0 <floor+0xe0>
 80107f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80107fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fe:	dd09      	ble.n	8010814 <floor+0x44>
 8010800:	2900      	cmp	r1, #0
 8010802:	da50      	bge.n	80108a6 <floor+0xd6>
 8010804:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010808:	4a2b      	ldr	r2, [pc, #172]	; (80108b8 <floor+0xe8>)
 801080a:	4303      	orrs	r3, r0
 801080c:	2000      	movs	r0, #0
 801080e:	4283      	cmp	r3, r0
 8010810:	bf18      	it	ne
 8010812:	4611      	movne	r1, r2
 8010814:	460b      	mov	r3, r1
 8010816:	4602      	mov	r2, r0
 8010818:	ec43 2b10 	vmov	d0, r2, r3
 801081c:	e020      	b.n	8010860 <floor+0x90>
 801081e:	4a27      	ldr	r2, [pc, #156]	; (80108bc <floor+0xec>)
 8010820:	411a      	asrs	r2, r3
 8010822:	ea01 0402 	and.w	r4, r1, r2
 8010826:	4304      	orrs	r4, r0
 8010828:	d01a      	beq.n	8010860 <floor+0x90>
 801082a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80108b0 <floor+0xe0>
 801082e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010832:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083a:	ddeb      	ble.n	8010814 <floor+0x44>
 801083c:	2900      	cmp	r1, #0
 801083e:	bfbe      	ittt	lt
 8010840:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010844:	fa40 f303 	asrlt.w	r3, r0, r3
 8010848:	18c9      	addlt	r1, r1, r3
 801084a:	ea21 0102 	bic.w	r1, r1, r2
 801084e:	2000      	movs	r0, #0
 8010850:	e7e0      	b.n	8010814 <floor+0x44>
 8010852:	2b33      	cmp	r3, #51	; 0x33
 8010854:	dd05      	ble.n	8010862 <floor+0x92>
 8010856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801085a:	d101      	bne.n	8010860 <floor+0x90>
 801085c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010860:	bd30      	pop	{r4, r5, pc}
 8010862:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010866:	f04f 32ff 	mov.w	r2, #4294967295
 801086a:	40e2      	lsrs	r2, r4
 801086c:	4202      	tst	r2, r0
 801086e:	d0f7      	beq.n	8010860 <floor+0x90>
 8010870:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80108b0 <floor+0xe0>
 8010874:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010878:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010880:	ddc8      	ble.n	8010814 <floor+0x44>
 8010882:	2900      	cmp	r1, #0
 8010884:	da02      	bge.n	801088c <floor+0xbc>
 8010886:	2b14      	cmp	r3, #20
 8010888:	d103      	bne.n	8010892 <floor+0xc2>
 801088a:	3101      	adds	r1, #1
 801088c:	ea20 0002 	bic.w	r0, r0, r2
 8010890:	e7c0      	b.n	8010814 <floor+0x44>
 8010892:	2401      	movs	r4, #1
 8010894:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010898:	fa04 f303 	lsl.w	r3, r4, r3
 801089c:	4418      	add	r0, r3
 801089e:	42a8      	cmp	r0, r5
 80108a0:	bf38      	it	cc
 80108a2:	1909      	addcc	r1, r1, r4
 80108a4:	e7f2      	b.n	801088c <floor+0xbc>
 80108a6:	2000      	movs	r0, #0
 80108a8:	4601      	mov	r1, r0
 80108aa:	e7b3      	b.n	8010814 <floor+0x44>
 80108ac:	f3af 8000 	nop.w
 80108b0:	8800759c 	.word	0x8800759c
 80108b4:	7e37e43c 	.word	0x7e37e43c
 80108b8:	bff00000 	.word	0xbff00000
 80108bc:	000fffff 	.word	0x000fffff

080108c0 <matherr>:
 80108c0:	2000      	movs	r0, #0
 80108c2:	4770      	bx	lr
 80108c4:	0000      	movs	r0, r0
	...

080108c8 <scalbn>:
 80108c8:	b500      	push	{lr}
 80108ca:	ed2d 8b02 	vpush	{d8}
 80108ce:	b083      	sub	sp, #12
 80108d0:	ed8d 0b00 	vstr	d0, [sp]
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80108da:	b9a2      	cbnz	r2, 8010906 <scalbn+0x3e>
 80108dc:	9a00      	ldr	r2, [sp, #0]
 80108de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108e2:	4313      	orrs	r3, r2
 80108e4:	d03a      	beq.n	801095c <scalbn+0x94>
 80108e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80109a0 <scalbn+0xd8>
 80108ea:	4b35      	ldr	r3, [pc, #212]	; (80109c0 <scalbn+0xf8>)
 80108ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 80108f0:	4298      	cmp	r0, r3
 80108f2:	ed8d 7b00 	vstr	d7, [sp]
 80108f6:	da11      	bge.n	801091c <scalbn+0x54>
 80108f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80109a8 <scalbn+0xe0>
 80108fc:	ed9d 6b00 	vldr	d6, [sp]
 8010900:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010904:	e007      	b.n	8010916 <scalbn+0x4e>
 8010906:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801090a:	428a      	cmp	r2, r1
 801090c:	d10a      	bne.n	8010924 <scalbn+0x5c>
 801090e:	ed9d 7b00 	vldr	d7, [sp]
 8010912:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010916:	ed8d 7b00 	vstr	d7, [sp]
 801091a:	e01f      	b.n	801095c <scalbn+0x94>
 801091c:	9b01      	ldr	r3, [sp, #4]
 801091e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010922:	3a36      	subs	r2, #54	; 0x36
 8010924:	4402      	add	r2, r0
 8010926:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801092a:	428a      	cmp	r2, r1
 801092c:	dd0a      	ble.n	8010944 <scalbn+0x7c>
 801092e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80109b0 <scalbn+0xe8>
 8010932:	eeb0 0b48 	vmov.f64	d0, d8
 8010936:	ed9d 1b00 	vldr	d1, [sp]
 801093a:	f000 f843 	bl	80109c4 <copysign>
 801093e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8010942:	e7e8      	b.n	8010916 <scalbn+0x4e>
 8010944:	2a00      	cmp	r2, #0
 8010946:	dd10      	ble.n	801096a <scalbn+0xa2>
 8010948:	e9dd 0100 	ldrd	r0, r1, [sp]
 801094c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010950:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010954:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010958:	e9cd 0100 	strd	r0, r1, [sp]
 801095c:	ed9d 0b00 	vldr	d0, [sp]
 8010960:	b003      	add	sp, #12
 8010962:	ecbd 8b02 	vpop	{d8}
 8010966:	f85d fb04 	ldr.w	pc, [sp], #4
 801096a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801096e:	da06      	bge.n	801097e <scalbn+0xb6>
 8010970:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010974:	4298      	cmp	r0, r3
 8010976:	dcda      	bgt.n	801092e <scalbn+0x66>
 8010978:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80109a8 <scalbn+0xe0>
 801097c:	e7d9      	b.n	8010932 <scalbn+0x6a>
 801097e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010982:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010986:	3236      	adds	r2, #54	; 0x36
 8010988:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801098c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010990:	ec41 0b17 	vmov	d7, r0, r1
 8010994:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80109b8 <scalbn+0xf0>
 8010998:	e7b2      	b.n	8010900 <scalbn+0x38>
 801099a:	bf00      	nop
 801099c:	f3af 8000 	nop.w
 80109a0:	00000000 	.word	0x00000000
 80109a4:	43500000 	.word	0x43500000
 80109a8:	c2f8f359 	.word	0xc2f8f359
 80109ac:	01a56e1f 	.word	0x01a56e1f
 80109b0:	8800759c 	.word	0x8800759c
 80109b4:	7e37e43c 	.word	0x7e37e43c
 80109b8:	00000000 	.word	0x00000000
 80109bc:	3c900000 	.word	0x3c900000
 80109c0:	ffff3cb0 	.word	0xffff3cb0

080109c4 <copysign>:
 80109c4:	ec51 0b10 	vmov	r0, r1, d0
 80109c8:	ee11 0a90 	vmov	r0, s3
 80109cc:	ee10 2a10 	vmov	r2, s0
 80109d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80109d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80109d8:	ea41 0300 	orr.w	r3, r1, r0
 80109dc:	ec43 2b10 	vmov	d0, r2, r3
 80109e0:	4770      	bx	lr

080109e2 <abort>:
 80109e2:	b508      	push	{r3, lr}
 80109e4:	2006      	movs	r0, #6
 80109e6:	f000 ffdd 	bl	80119a4 <raise>
 80109ea:	2001      	movs	r0, #1
 80109ec:	f004 fe7a 	bl	80156e4 <_exit>

080109f0 <calloc>:
 80109f0:	4b02      	ldr	r3, [pc, #8]	; (80109fc <calloc+0xc>)
 80109f2:	460a      	mov	r2, r1
 80109f4:	4601      	mov	r1, r0
 80109f6:	6818      	ldr	r0, [r3, #0]
 80109f8:	f000 b847 	b.w	8010a8a <_calloc_r>
 80109fc:	200003a8 	.word	0x200003a8

08010a00 <__errno>:
 8010a00:	4b01      	ldr	r3, [pc, #4]	; (8010a08 <__errno+0x8>)
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	200003a8 	.word	0x200003a8

08010a0c <__libc_init_array>:
 8010a0c:	b570      	push	{r4, r5, r6, lr}
 8010a0e:	4e0d      	ldr	r6, [pc, #52]	; (8010a44 <__libc_init_array+0x38>)
 8010a10:	4c0d      	ldr	r4, [pc, #52]	; (8010a48 <__libc_init_array+0x3c>)
 8010a12:	1ba4      	subs	r4, r4, r6
 8010a14:	10a4      	asrs	r4, r4, #2
 8010a16:	2500      	movs	r5, #0
 8010a18:	42a5      	cmp	r5, r4
 8010a1a:	d109      	bne.n	8010a30 <__libc_init_array+0x24>
 8010a1c:	4e0b      	ldr	r6, [pc, #44]	; (8010a4c <__libc_init_array+0x40>)
 8010a1e:	4c0c      	ldr	r4, [pc, #48]	; (8010a50 <__libc_init_array+0x44>)
 8010a20:	f004 fe62 	bl	80156e8 <_init>
 8010a24:	1ba4      	subs	r4, r4, r6
 8010a26:	10a4      	asrs	r4, r4, #2
 8010a28:	2500      	movs	r5, #0
 8010a2a:	42a5      	cmp	r5, r4
 8010a2c:	d105      	bne.n	8010a3a <__libc_init_array+0x2e>
 8010a2e:	bd70      	pop	{r4, r5, r6, pc}
 8010a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a34:	4798      	blx	r3
 8010a36:	3501      	adds	r5, #1
 8010a38:	e7ee      	b.n	8010a18 <__libc_init_array+0xc>
 8010a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a3e:	4798      	blx	r3
 8010a40:	3501      	adds	r5, #1
 8010a42:	e7f2      	b.n	8010a2a <__libc_init_array+0x1e>
 8010a44:	080160ac 	.word	0x080160ac
 8010a48:	080160ac 	.word	0x080160ac
 8010a4c:	080160ac 	.word	0x080160ac
 8010a50:	080160b8 	.word	0x080160b8

08010a54 <malloc>:
 8010a54:	4b02      	ldr	r3, [pc, #8]	; (8010a60 <malloc+0xc>)
 8010a56:	4601      	mov	r1, r0
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	f000 b873 	b.w	8010b44 <_malloc_r>
 8010a5e:	bf00      	nop
 8010a60:	200003a8 	.word	0x200003a8

08010a64 <memcpy>:
 8010a64:	b510      	push	{r4, lr}
 8010a66:	1e43      	subs	r3, r0, #1
 8010a68:	440a      	add	r2, r1
 8010a6a:	4291      	cmp	r1, r2
 8010a6c:	d100      	bne.n	8010a70 <memcpy+0xc>
 8010a6e:	bd10      	pop	{r4, pc}
 8010a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a78:	e7f7      	b.n	8010a6a <memcpy+0x6>

08010a7a <memset>:
 8010a7a:	4402      	add	r2, r0
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d100      	bne.n	8010a84 <memset+0xa>
 8010a82:	4770      	bx	lr
 8010a84:	f803 1b01 	strb.w	r1, [r3], #1
 8010a88:	e7f9      	b.n	8010a7e <memset+0x4>

08010a8a <_calloc_r>:
 8010a8a:	b538      	push	{r3, r4, r5, lr}
 8010a8c:	fb02 f401 	mul.w	r4, r2, r1
 8010a90:	4621      	mov	r1, r4
 8010a92:	f000 f857 	bl	8010b44 <_malloc_r>
 8010a96:	4605      	mov	r5, r0
 8010a98:	b118      	cbz	r0, 8010aa2 <_calloc_r+0x18>
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	f7ff ffec 	bl	8010a7a <memset>
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
	...

08010aa8 <_free_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4605      	mov	r5, r0
 8010aac:	2900      	cmp	r1, #0
 8010aae:	d045      	beq.n	8010b3c <_free_r+0x94>
 8010ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ab4:	1f0c      	subs	r4, r1, #4
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	bfb8      	it	lt
 8010aba:	18e4      	addlt	r4, r4, r3
 8010abc:	f003 faa2 	bl	8014004 <__malloc_lock>
 8010ac0:	4a1f      	ldr	r2, [pc, #124]	; (8010b40 <_free_r+0x98>)
 8010ac2:	6813      	ldr	r3, [r2, #0]
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	b933      	cbnz	r3, 8010ad6 <_free_r+0x2e>
 8010ac8:	6063      	str	r3, [r4, #4]
 8010aca:	6014      	str	r4, [r2, #0]
 8010acc:	4628      	mov	r0, r5
 8010ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ad2:	f003 ba98 	b.w	8014006 <__malloc_unlock>
 8010ad6:	42a3      	cmp	r3, r4
 8010ad8:	d90c      	bls.n	8010af4 <_free_r+0x4c>
 8010ada:	6821      	ldr	r1, [r4, #0]
 8010adc:	1862      	adds	r2, r4, r1
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	bf04      	itt	eq
 8010ae2:	681a      	ldreq	r2, [r3, #0]
 8010ae4:	685b      	ldreq	r3, [r3, #4]
 8010ae6:	6063      	str	r3, [r4, #4]
 8010ae8:	bf04      	itt	eq
 8010aea:	1852      	addeq	r2, r2, r1
 8010aec:	6022      	streq	r2, [r4, #0]
 8010aee:	6004      	str	r4, [r0, #0]
 8010af0:	e7ec      	b.n	8010acc <_free_r+0x24>
 8010af2:	4613      	mov	r3, r2
 8010af4:	685a      	ldr	r2, [r3, #4]
 8010af6:	b10a      	cbz	r2, 8010afc <_free_r+0x54>
 8010af8:	42a2      	cmp	r2, r4
 8010afa:	d9fa      	bls.n	8010af2 <_free_r+0x4a>
 8010afc:	6819      	ldr	r1, [r3, #0]
 8010afe:	1858      	adds	r0, r3, r1
 8010b00:	42a0      	cmp	r0, r4
 8010b02:	d10b      	bne.n	8010b1c <_free_r+0x74>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	4401      	add	r1, r0
 8010b08:	1858      	adds	r0, r3, r1
 8010b0a:	4282      	cmp	r2, r0
 8010b0c:	6019      	str	r1, [r3, #0]
 8010b0e:	d1dd      	bne.n	8010acc <_free_r+0x24>
 8010b10:	6810      	ldr	r0, [r2, #0]
 8010b12:	6852      	ldr	r2, [r2, #4]
 8010b14:	605a      	str	r2, [r3, #4]
 8010b16:	4401      	add	r1, r0
 8010b18:	6019      	str	r1, [r3, #0]
 8010b1a:	e7d7      	b.n	8010acc <_free_r+0x24>
 8010b1c:	d902      	bls.n	8010b24 <_free_r+0x7c>
 8010b1e:	230c      	movs	r3, #12
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	e7d3      	b.n	8010acc <_free_r+0x24>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	1821      	adds	r1, r4, r0
 8010b28:	428a      	cmp	r2, r1
 8010b2a:	bf04      	itt	eq
 8010b2c:	6811      	ldreq	r1, [r2, #0]
 8010b2e:	6852      	ldreq	r2, [r2, #4]
 8010b30:	6062      	str	r2, [r4, #4]
 8010b32:	bf04      	itt	eq
 8010b34:	1809      	addeq	r1, r1, r0
 8010b36:	6021      	streq	r1, [r4, #0]
 8010b38:	605c      	str	r4, [r3, #4]
 8010b3a:	e7c7      	b.n	8010acc <_free_r+0x24>
 8010b3c:	bd38      	pop	{r3, r4, r5, pc}
 8010b3e:	bf00      	nop
 8010b40:	20002720 	.word	0x20002720

08010b44 <_malloc_r>:
 8010b44:	b570      	push	{r4, r5, r6, lr}
 8010b46:	1ccd      	adds	r5, r1, #3
 8010b48:	f025 0503 	bic.w	r5, r5, #3
 8010b4c:	3508      	adds	r5, #8
 8010b4e:	2d0c      	cmp	r5, #12
 8010b50:	bf38      	it	cc
 8010b52:	250c      	movcc	r5, #12
 8010b54:	2d00      	cmp	r5, #0
 8010b56:	4606      	mov	r6, r0
 8010b58:	db01      	blt.n	8010b5e <_malloc_r+0x1a>
 8010b5a:	42a9      	cmp	r1, r5
 8010b5c:	d903      	bls.n	8010b66 <_malloc_r+0x22>
 8010b5e:	230c      	movs	r3, #12
 8010b60:	6033      	str	r3, [r6, #0]
 8010b62:	2000      	movs	r0, #0
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	f003 fa4d 	bl	8014004 <__malloc_lock>
 8010b6a:	4a21      	ldr	r2, [pc, #132]	; (8010bf0 <_malloc_r+0xac>)
 8010b6c:	6814      	ldr	r4, [r2, #0]
 8010b6e:	4621      	mov	r1, r4
 8010b70:	b991      	cbnz	r1, 8010b98 <_malloc_r+0x54>
 8010b72:	4c20      	ldr	r4, [pc, #128]	; (8010bf4 <_malloc_r+0xb0>)
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	b91b      	cbnz	r3, 8010b80 <_malloc_r+0x3c>
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f000 fed5 	bl	8011928 <_sbrk_r>
 8010b7e:	6020      	str	r0, [r4, #0]
 8010b80:	4629      	mov	r1, r5
 8010b82:	4630      	mov	r0, r6
 8010b84:	f000 fed0 	bl	8011928 <_sbrk_r>
 8010b88:	1c43      	adds	r3, r0, #1
 8010b8a:	d124      	bne.n	8010bd6 <_malloc_r+0x92>
 8010b8c:	230c      	movs	r3, #12
 8010b8e:	6033      	str	r3, [r6, #0]
 8010b90:	4630      	mov	r0, r6
 8010b92:	f003 fa38 	bl	8014006 <__malloc_unlock>
 8010b96:	e7e4      	b.n	8010b62 <_malloc_r+0x1e>
 8010b98:	680b      	ldr	r3, [r1, #0]
 8010b9a:	1b5b      	subs	r3, r3, r5
 8010b9c:	d418      	bmi.n	8010bd0 <_malloc_r+0x8c>
 8010b9e:	2b0b      	cmp	r3, #11
 8010ba0:	d90f      	bls.n	8010bc2 <_malloc_r+0x7e>
 8010ba2:	600b      	str	r3, [r1, #0]
 8010ba4:	50cd      	str	r5, [r1, r3]
 8010ba6:	18cc      	adds	r4, r1, r3
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f003 fa2c 	bl	8014006 <__malloc_unlock>
 8010bae:	f104 000b 	add.w	r0, r4, #11
 8010bb2:	1d23      	adds	r3, r4, #4
 8010bb4:	f020 0007 	bic.w	r0, r0, #7
 8010bb8:	1ac3      	subs	r3, r0, r3
 8010bba:	d0d3      	beq.n	8010b64 <_malloc_r+0x20>
 8010bbc:	425a      	negs	r2, r3
 8010bbe:	50e2      	str	r2, [r4, r3]
 8010bc0:	e7d0      	b.n	8010b64 <_malloc_r+0x20>
 8010bc2:	428c      	cmp	r4, r1
 8010bc4:	684b      	ldr	r3, [r1, #4]
 8010bc6:	bf16      	itet	ne
 8010bc8:	6063      	strne	r3, [r4, #4]
 8010bca:	6013      	streq	r3, [r2, #0]
 8010bcc:	460c      	movne	r4, r1
 8010bce:	e7eb      	b.n	8010ba8 <_malloc_r+0x64>
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	6849      	ldr	r1, [r1, #4]
 8010bd4:	e7cc      	b.n	8010b70 <_malloc_r+0x2c>
 8010bd6:	1cc4      	adds	r4, r0, #3
 8010bd8:	f024 0403 	bic.w	r4, r4, #3
 8010bdc:	42a0      	cmp	r0, r4
 8010bde:	d005      	beq.n	8010bec <_malloc_r+0xa8>
 8010be0:	1a21      	subs	r1, r4, r0
 8010be2:	4630      	mov	r0, r6
 8010be4:	f000 fea0 	bl	8011928 <_sbrk_r>
 8010be8:	3001      	adds	r0, #1
 8010bea:	d0cf      	beq.n	8010b8c <_malloc_r+0x48>
 8010bec:	6025      	str	r5, [r4, #0]
 8010bee:	e7db      	b.n	8010ba8 <_malloc_r+0x64>
 8010bf0:	20002720 	.word	0x20002720
 8010bf4:	20002724 	.word	0x20002724

08010bf8 <__cvt>:
 8010bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bfa:	ed2d 8b02 	vpush	{d8}
 8010bfe:	eeb0 8b40 	vmov.f64	d8, d0
 8010c02:	b085      	sub	sp, #20
 8010c04:	4617      	mov	r7, r2
 8010c06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010c08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010c0a:	ee18 2a90 	vmov	r2, s17
 8010c0e:	f025 0520 	bic.w	r5, r5, #32
 8010c12:	2a00      	cmp	r2, #0
 8010c14:	bfb6      	itet	lt
 8010c16:	222d      	movlt	r2, #45	; 0x2d
 8010c18:	2200      	movge	r2, #0
 8010c1a:	eeb1 8b40 	vneglt.f64	d8, d0
 8010c1e:	2d46      	cmp	r5, #70	; 0x46
 8010c20:	460c      	mov	r4, r1
 8010c22:	701a      	strb	r2, [r3, #0]
 8010c24:	d004      	beq.n	8010c30 <__cvt+0x38>
 8010c26:	2d45      	cmp	r5, #69	; 0x45
 8010c28:	d100      	bne.n	8010c2c <__cvt+0x34>
 8010c2a:	3401      	adds	r4, #1
 8010c2c:	2102      	movs	r1, #2
 8010c2e:	e000      	b.n	8010c32 <__cvt+0x3a>
 8010c30:	2103      	movs	r1, #3
 8010c32:	ab03      	add	r3, sp, #12
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	ab02      	add	r3, sp, #8
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	4633      	mov	r3, r6
 8010c3e:	eeb0 0b48 	vmov.f64	d0, d8
 8010c42:	f001 ff49 	bl	8012ad8 <_dtoa_r>
 8010c46:	2d47      	cmp	r5, #71	; 0x47
 8010c48:	d101      	bne.n	8010c4e <__cvt+0x56>
 8010c4a:	07fb      	lsls	r3, r7, #31
 8010c4c:	d51e      	bpl.n	8010c8c <__cvt+0x94>
 8010c4e:	2d46      	cmp	r5, #70	; 0x46
 8010c50:	eb00 0304 	add.w	r3, r0, r4
 8010c54:	d10c      	bne.n	8010c70 <__cvt+0x78>
 8010c56:	7802      	ldrb	r2, [r0, #0]
 8010c58:	2a30      	cmp	r2, #48	; 0x30
 8010c5a:	d107      	bne.n	8010c6c <__cvt+0x74>
 8010c5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c64:	bf1c      	itt	ne
 8010c66:	f1c4 0401 	rsbne	r4, r4, #1
 8010c6a:	6034      	strne	r4, [r6, #0]
 8010c6c:	6832      	ldr	r2, [r6, #0]
 8010c6e:	4413      	add	r3, r2
 8010c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c78:	d007      	beq.n	8010c8a <__cvt+0x92>
 8010c7a:	2130      	movs	r1, #48	; 0x30
 8010c7c:	9a03      	ldr	r2, [sp, #12]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d204      	bcs.n	8010c8c <__cvt+0x94>
 8010c82:	1c54      	adds	r4, r2, #1
 8010c84:	9403      	str	r4, [sp, #12]
 8010c86:	7011      	strb	r1, [r2, #0]
 8010c88:	e7f8      	b.n	8010c7c <__cvt+0x84>
 8010c8a:	9303      	str	r3, [sp, #12]
 8010c8c:	9b03      	ldr	r3, [sp, #12]
 8010c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c90:	1a1b      	subs	r3, r3, r0
 8010c92:	6013      	str	r3, [r2, #0]
 8010c94:	b005      	add	sp, #20
 8010c96:	ecbd 8b02 	vpop	{d8}
 8010c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c9c <__exponent>:
 8010c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	bfba      	itte	lt
 8010ca4:	4249      	neglt	r1, r1
 8010ca6:	232d      	movlt	r3, #45	; 0x2d
 8010ca8:	232b      	movge	r3, #43	; 0x2b
 8010caa:	2909      	cmp	r1, #9
 8010cac:	f804 2b02 	strb.w	r2, [r4], #2
 8010cb0:	7043      	strb	r3, [r0, #1]
 8010cb2:	dd20      	ble.n	8010cf6 <__exponent+0x5a>
 8010cb4:	f10d 0307 	add.w	r3, sp, #7
 8010cb8:	461f      	mov	r7, r3
 8010cba:	260a      	movs	r6, #10
 8010cbc:	fb91 f5f6 	sdiv	r5, r1, r6
 8010cc0:	fb06 1115 	mls	r1, r6, r5, r1
 8010cc4:	3130      	adds	r1, #48	; 0x30
 8010cc6:	2d09      	cmp	r5, #9
 8010cc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ccc:	f103 32ff 	add.w	r2, r3, #4294967295
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	dc09      	bgt.n	8010ce8 <__exponent+0x4c>
 8010cd4:	3130      	adds	r1, #48	; 0x30
 8010cd6:	3b02      	subs	r3, #2
 8010cd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010cdc:	42bb      	cmp	r3, r7
 8010cde:	4622      	mov	r2, r4
 8010ce0:	d304      	bcc.n	8010cec <__exponent+0x50>
 8010ce2:	1a10      	subs	r0, r2, r0
 8010ce4:	b003      	add	sp, #12
 8010ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ce8:	4613      	mov	r3, r2
 8010cea:	e7e7      	b.n	8010cbc <__exponent+0x20>
 8010cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cf0:	f804 2b01 	strb.w	r2, [r4], #1
 8010cf4:	e7f2      	b.n	8010cdc <__exponent+0x40>
 8010cf6:	2330      	movs	r3, #48	; 0x30
 8010cf8:	4419      	add	r1, r3
 8010cfa:	7083      	strb	r3, [r0, #2]
 8010cfc:	1d02      	adds	r2, r0, #4
 8010cfe:	70c1      	strb	r1, [r0, #3]
 8010d00:	e7ef      	b.n	8010ce2 <__exponent+0x46>
 8010d02:	0000      	movs	r0, r0
 8010d04:	0000      	movs	r0, r0
	...

08010d08 <_printf_float>:
 8010d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0c:	b08d      	sub	sp, #52	; 0x34
 8010d0e:	460c      	mov	r4, r1
 8010d10:	4616      	mov	r6, r2
 8010d12:	461f      	mov	r7, r3
 8010d14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010d18:	4605      	mov	r5, r0
 8010d1a:	f003 f8dd 	bl	8013ed8 <_localeconv_r>
 8010d1e:	f8d0 b000 	ldr.w	fp, [r0]
 8010d22:	4658      	mov	r0, fp
 8010d24:	f7ef fa8c 	bl	8000240 <strlen>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8010d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8010d30:	9005      	str	r0, [sp, #20]
 8010d32:	3307      	adds	r3, #7
 8010d34:	f023 0307 	bic.w	r3, r3, #7
 8010d38:	f103 0108 	add.w	r1, r3, #8
 8010d3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010d40:	6822      	ldr	r2, [r4, #0]
 8010d42:	f8c8 1000 	str.w	r1, [r8]
 8010d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010d4e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010fd8 <_printf_float+0x2d0>
 8010d52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010d56:	eeb0 6bc0 	vabs.f64	d6, d0
 8010d5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d62:	dd24      	ble.n	8010dae <_printf_float+0xa6>
 8010d64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6c:	d502      	bpl.n	8010d74 <_printf_float+0x6c>
 8010d6e:	232d      	movs	r3, #45	; 0x2d
 8010d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d74:	499a      	ldr	r1, [pc, #616]	; (8010fe0 <_printf_float+0x2d8>)
 8010d76:	4b9b      	ldr	r3, [pc, #620]	; (8010fe4 <_printf_float+0x2dc>)
 8010d78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010d7c:	bf8c      	ite	hi
 8010d7e:	4688      	movhi	r8, r1
 8010d80:	4698      	movls	r8, r3
 8010d82:	f022 0204 	bic.w	r2, r2, #4
 8010d86:	2303      	movs	r3, #3
 8010d88:	6123      	str	r3, [r4, #16]
 8010d8a:	6022      	str	r2, [r4, #0]
 8010d8c:	f04f 0a00 	mov.w	sl, #0
 8010d90:	9700      	str	r7, [sp, #0]
 8010d92:	4633      	mov	r3, r6
 8010d94:	aa0b      	add	r2, sp, #44	; 0x2c
 8010d96:	4621      	mov	r1, r4
 8010d98:	4628      	mov	r0, r5
 8010d9a:	f000 f9e1 	bl	8011160 <_printf_common>
 8010d9e:	3001      	adds	r0, #1
 8010da0:	f040 8089 	bne.w	8010eb6 <_printf_float+0x1ae>
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	b00d      	add	sp, #52	; 0x34
 8010daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dae:	eeb4 0b40 	vcmp.f64	d0, d0
 8010db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db6:	d702      	bvc.n	8010dbe <_printf_float+0xb6>
 8010db8:	498b      	ldr	r1, [pc, #556]	; (8010fe8 <_printf_float+0x2e0>)
 8010dba:	4b8c      	ldr	r3, [pc, #560]	; (8010fec <_printf_float+0x2e4>)
 8010dbc:	e7dc      	b.n	8010d78 <_printf_float+0x70>
 8010dbe:	6861      	ldr	r1, [r4, #4]
 8010dc0:	1c4b      	adds	r3, r1, #1
 8010dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010dc6:	ab0a      	add	r3, sp, #40	; 0x28
 8010dc8:	a809      	add	r0, sp, #36	; 0x24
 8010dca:	d13b      	bne.n	8010e44 <_printf_float+0x13c>
 8010dcc:	2106      	movs	r1, #6
 8010dce:	6061      	str	r1, [r4, #4]
 8010dd0:	f04f 0c00 	mov.w	ip, #0
 8010dd4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010dd8:	e9cd 0900 	strd	r0, r9, [sp]
 8010ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010de0:	6022      	str	r2, [r4, #0]
 8010de2:	6861      	ldr	r1, [r4, #4]
 8010de4:	4628      	mov	r0, r5
 8010de6:	f7ff ff07 	bl	8010bf8 <__cvt>
 8010dea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010dee:	2b47      	cmp	r3, #71	; 0x47
 8010df0:	4680      	mov	r8, r0
 8010df2:	d109      	bne.n	8010e08 <_printf_float+0x100>
 8010df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df6:	1cd8      	adds	r0, r3, #3
 8010df8:	db02      	blt.n	8010e00 <_printf_float+0xf8>
 8010dfa:	6862      	ldr	r2, [r4, #4]
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	dd47      	ble.n	8010e90 <_printf_float+0x188>
 8010e00:	f1a9 0902 	sub.w	r9, r9, #2
 8010e04:	fa5f f989 	uxtb.w	r9, r9
 8010e08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e0e:	d824      	bhi.n	8010e5a <_printf_float+0x152>
 8010e10:	3901      	subs	r1, #1
 8010e12:	464a      	mov	r2, r9
 8010e14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010e18:	9109      	str	r1, [sp, #36]	; 0x24
 8010e1a:	f7ff ff3f 	bl	8010c9c <__exponent>
 8010e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e20:	1813      	adds	r3, r2, r0
 8010e22:	2a01      	cmp	r2, #1
 8010e24:	4682      	mov	sl, r0
 8010e26:	6123      	str	r3, [r4, #16]
 8010e28:	dc02      	bgt.n	8010e30 <_printf_float+0x128>
 8010e2a:	6822      	ldr	r2, [r4, #0]
 8010e2c:	07d1      	lsls	r1, r2, #31
 8010e2e:	d501      	bpl.n	8010e34 <_printf_float+0x12c>
 8010e30:	3301      	adds	r3, #1
 8010e32:	6123      	str	r3, [r4, #16]
 8010e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d0a9      	beq.n	8010d90 <_printf_float+0x88>
 8010e3c:	232d      	movs	r3, #45	; 0x2d
 8010e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e42:	e7a5      	b.n	8010d90 <_printf_float+0x88>
 8010e44:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010e48:	f000 8178 	beq.w	801113c <_printf_float+0x434>
 8010e4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010e50:	d1be      	bne.n	8010dd0 <_printf_float+0xc8>
 8010e52:	2900      	cmp	r1, #0
 8010e54:	d1bc      	bne.n	8010dd0 <_printf_float+0xc8>
 8010e56:	2101      	movs	r1, #1
 8010e58:	e7b9      	b.n	8010dce <_printf_float+0xc6>
 8010e5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010e5e:	d119      	bne.n	8010e94 <_printf_float+0x18c>
 8010e60:	2900      	cmp	r1, #0
 8010e62:	6863      	ldr	r3, [r4, #4]
 8010e64:	dd0c      	ble.n	8010e80 <_printf_float+0x178>
 8010e66:	6121      	str	r1, [r4, #16]
 8010e68:	b913      	cbnz	r3, 8010e70 <_printf_float+0x168>
 8010e6a:	6822      	ldr	r2, [r4, #0]
 8010e6c:	07d2      	lsls	r2, r2, #31
 8010e6e:	d502      	bpl.n	8010e76 <_printf_float+0x16e>
 8010e70:	3301      	adds	r3, #1
 8010e72:	440b      	add	r3, r1
 8010e74:	6123      	str	r3, [r4, #16]
 8010e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e78:	65a3      	str	r3, [r4, #88]	; 0x58
 8010e7a:	f04f 0a00 	mov.w	sl, #0
 8010e7e:	e7d9      	b.n	8010e34 <_printf_float+0x12c>
 8010e80:	b913      	cbnz	r3, 8010e88 <_printf_float+0x180>
 8010e82:	6822      	ldr	r2, [r4, #0]
 8010e84:	07d0      	lsls	r0, r2, #31
 8010e86:	d501      	bpl.n	8010e8c <_printf_float+0x184>
 8010e88:	3302      	adds	r3, #2
 8010e8a:	e7f3      	b.n	8010e74 <_printf_float+0x16c>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e7f1      	b.n	8010e74 <_printf_float+0x16c>
 8010e90:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010e94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	db05      	blt.n	8010ea8 <_printf_float+0x1a0>
 8010e9c:	6822      	ldr	r2, [r4, #0]
 8010e9e:	6123      	str	r3, [r4, #16]
 8010ea0:	07d1      	lsls	r1, r2, #31
 8010ea2:	d5e8      	bpl.n	8010e76 <_printf_float+0x16e>
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	e7e5      	b.n	8010e74 <_printf_float+0x16c>
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	bfd4      	ite	le
 8010eac:	f1c3 0302 	rsble	r3, r3, #2
 8010eb0:	2301      	movgt	r3, #1
 8010eb2:	4413      	add	r3, r2
 8010eb4:	e7de      	b.n	8010e74 <_printf_float+0x16c>
 8010eb6:	6823      	ldr	r3, [r4, #0]
 8010eb8:	055a      	lsls	r2, r3, #21
 8010eba:	d407      	bmi.n	8010ecc <_printf_float+0x1c4>
 8010ebc:	6923      	ldr	r3, [r4, #16]
 8010ebe:	4642      	mov	r2, r8
 8010ec0:	4631      	mov	r1, r6
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	47b8      	blx	r7
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	d12a      	bne.n	8010f20 <_printf_float+0x218>
 8010eca:	e76b      	b.n	8010da4 <_printf_float+0x9c>
 8010ecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010ed0:	f240 80de 	bls.w	8011090 <_printf_float+0x388>
 8010ed4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010ed8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	d133      	bne.n	8010f4a <_printf_float+0x242>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	4a42      	ldr	r2, [pc, #264]	; (8010ff0 <_printf_float+0x2e8>)
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	4628      	mov	r0, r5
 8010eea:	47b8      	blx	r7
 8010eec:	3001      	adds	r0, #1
 8010eee:	f43f af59 	beq.w	8010da4 <_printf_float+0x9c>
 8010ef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	db02      	blt.n	8010f00 <_printf_float+0x1f8>
 8010efa:	6823      	ldr	r3, [r4, #0]
 8010efc:	07d8      	lsls	r0, r3, #31
 8010efe:	d50f      	bpl.n	8010f20 <_printf_float+0x218>
 8010f00:	9b05      	ldr	r3, [sp, #20]
 8010f02:	465a      	mov	r2, fp
 8010f04:	4631      	mov	r1, r6
 8010f06:	4628      	mov	r0, r5
 8010f08:	47b8      	blx	r7
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	f43f af4a 	beq.w	8010da4 <_printf_float+0x9c>
 8010f10:	f04f 0800 	mov.w	r8, #0
 8010f14:	f104 091a 	add.w	r9, r4, #26
 8010f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	4543      	cmp	r3, r8
 8010f1e:	dc09      	bgt.n	8010f34 <_printf_float+0x22c>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	079b      	lsls	r3, r3, #30
 8010f24:	f100 8105 	bmi.w	8011132 <_printf_float+0x42a>
 8010f28:	68e0      	ldr	r0, [r4, #12]
 8010f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f2c:	4298      	cmp	r0, r3
 8010f2e:	bfb8      	it	lt
 8010f30:	4618      	movlt	r0, r3
 8010f32:	e739      	b.n	8010da8 <_printf_float+0xa0>
 8010f34:	2301      	movs	r3, #1
 8010f36:	464a      	mov	r2, r9
 8010f38:	4631      	mov	r1, r6
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	47b8      	blx	r7
 8010f3e:	3001      	adds	r0, #1
 8010f40:	f43f af30 	beq.w	8010da4 <_printf_float+0x9c>
 8010f44:	f108 0801 	add.w	r8, r8, #1
 8010f48:	e7e6      	b.n	8010f18 <_printf_float+0x210>
 8010f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	dc2b      	bgt.n	8010fa8 <_printf_float+0x2a0>
 8010f50:	2301      	movs	r3, #1
 8010f52:	4a27      	ldr	r2, [pc, #156]	; (8010ff0 <_printf_float+0x2e8>)
 8010f54:	4631      	mov	r1, r6
 8010f56:	4628      	mov	r0, r5
 8010f58:	47b8      	blx	r7
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	f43f af22 	beq.w	8010da4 <_printf_float+0x9c>
 8010f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f62:	b923      	cbnz	r3, 8010f6e <_printf_float+0x266>
 8010f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f66:	b913      	cbnz	r3, 8010f6e <_printf_float+0x266>
 8010f68:	6823      	ldr	r3, [r4, #0]
 8010f6a:	07d9      	lsls	r1, r3, #31
 8010f6c:	d5d8      	bpl.n	8010f20 <_printf_float+0x218>
 8010f6e:	9b05      	ldr	r3, [sp, #20]
 8010f70:	465a      	mov	r2, fp
 8010f72:	4631      	mov	r1, r6
 8010f74:	4628      	mov	r0, r5
 8010f76:	47b8      	blx	r7
 8010f78:	3001      	adds	r0, #1
 8010f7a:	f43f af13 	beq.w	8010da4 <_printf_float+0x9c>
 8010f7e:	f04f 0900 	mov.w	r9, #0
 8010f82:	f104 0a1a 	add.w	sl, r4, #26
 8010f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f88:	425b      	negs	r3, r3
 8010f8a:	454b      	cmp	r3, r9
 8010f8c:	dc01      	bgt.n	8010f92 <_printf_float+0x28a>
 8010f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f90:	e795      	b.n	8010ebe <_printf_float+0x1b6>
 8010f92:	2301      	movs	r3, #1
 8010f94:	4652      	mov	r2, sl
 8010f96:	4631      	mov	r1, r6
 8010f98:	4628      	mov	r0, r5
 8010f9a:	47b8      	blx	r7
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	f43f af01 	beq.w	8010da4 <_printf_float+0x9c>
 8010fa2:	f109 0901 	add.w	r9, r9, #1
 8010fa6:	e7ee      	b.n	8010f86 <_printf_float+0x27e>
 8010fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010fac:	429a      	cmp	r2, r3
 8010fae:	bfa8      	it	ge
 8010fb0:	461a      	movge	r2, r3
 8010fb2:	2a00      	cmp	r2, #0
 8010fb4:	4691      	mov	r9, r2
 8010fb6:	dd07      	ble.n	8010fc8 <_printf_float+0x2c0>
 8010fb8:	4613      	mov	r3, r2
 8010fba:	4631      	mov	r1, r6
 8010fbc:	4642      	mov	r2, r8
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	47b8      	blx	r7
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	f43f aeee 	beq.w	8010da4 <_printf_float+0x9c>
 8010fc8:	f104 031a 	add.w	r3, r4, #26
 8010fcc:	f04f 0a00 	mov.w	sl, #0
 8010fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010fd4:	9307      	str	r3, [sp, #28]
 8010fd6:	e017      	b.n	8011008 <_printf_float+0x300>
 8010fd8:	ffffffff 	.word	0xffffffff
 8010fdc:	7fefffff 	.word	0x7fefffff
 8010fe0:	08015d70 	.word	0x08015d70
 8010fe4:	08015d6c 	.word	0x08015d6c
 8010fe8:	08015d78 	.word	0x08015d78
 8010fec:	08015d74 	.word	0x08015d74
 8010ff0:	08015f9b 	.word	0x08015f9b
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	9a07      	ldr	r2, [sp, #28]
 8010ff8:	4631      	mov	r1, r6
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	47b8      	blx	r7
 8010ffe:	3001      	adds	r0, #1
 8011000:	f43f aed0 	beq.w	8010da4 <_printf_float+0x9c>
 8011004:	f10a 0a01 	add.w	sl, sl, #1
 8011008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801100a:	9306      	str	r3, [sp, #24]
 801100c:	eba3 0309 	sub.w	r3, r3, r9
 8011010:	4553      	cmp	r3, sl
 8011012:	dcef      	bgt.n	8010ff4 <_printf_float+0x2ec>
 8011014:	9b06      	ldr	r3, [sp, #24]
 8011016:	4498      	add	r8, r3
 8011018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801101c:	429a      	cmp	r2, r3
 801101e:	db15      	blt.n	801104c <_printf_float+0x344>
 8011020:	6823      	ldr	r3, [r4, #0]
 8011022:	07da      	lsls	r2, r3, #31
 8011024:	d412      	bmi.n	801104c <_printf_float+0x344>
 8011026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011028:	9a06      	ldr	r2, [sp, #24]
 801102a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801102c:	1a9a      	subs	r2, r3, r2
 801102e:	eba3 0a01 	sub.w	sl, r3, r1
 8011032:	4592      	cmp	sl, r2
 8011034:	bfa8      	it	ge
 8011036:	4692      	movge	sl, r2
 8011038:	f1ba 0f00 	cmp.w	sl, #0
 801103c:	dc0e      	bgt.n	801105c <_printf_float+0x354>
 801103e:	f04f 0800 	mov.w	r8, #0
 8011042:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011046:	f104 091a 	add.w	r9, r4, #26
 801104a:	e019      	b.n	8011080 <_printf_float+0x378>
 801104c:	9b05      	ldr	r3, [sp, #20]
 801104e:	465a      	mov	r2, fp
 8011050:	4631      	mov	r1, r6
 8011052:	4628      	mov	r0, r5
 8011054:	47b8      	blx	r7
 8011056:	3001      	adds	r0, #1
 8011058:	d1e5      	bne.n	8011026 <_printf_float+0x31e>
 801105a:	e6a3      	b.n	8010da4 <_printf_float+0x9c>
 801105c:	4653      	mov	r3, sl
 801105e:	4642      	mov	r2, r8
 8011060:	4631      	mov	r1, r6
 8011062:	4628      	mov	r0, r5
 8011064:	47b8      	blx	r7
 8011066:	3001      	adds	r0, #1
 8011068:	d1e9      	bne.n	801103e <_printf_float+0x336>
 801106a:	e69b      	b.n	8010da4 <_printf_float+0x9c>
 801106c:	2301      	movs	r3, #1
 801106e:	464a      	mov	r2, r9
 8011070:	4631      	mov	r1, r6
 8011072:	4628      	mov	r0, r5
 8011074:	47b8      	blx	r7
 8011076:	3001      	adds	r0, #1
 8011078:	f43f ae94 	beq.w	8010da4 <_printf_float+0x9c>
 801107c:	f108 0801 	add.w	r8, r8, #1
 8011080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011084:	1a9b      	subs	r3, r3, r2
 8011086:	eba3 030a 	sub.w	r3, r3, sl
 801108a:	4543      	cmp	r3, r8
 801108c:	dcee      	bgt.n	801106c <_printf_float+0x364>
 801108e:	e747      	b.n	8010f20 <_printf_float+0x218>
 8011090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011092:	2a01      	cmp	r2, #1
 8011094:	dc01      	bgt.n	801109a <_printf_float+0x392>
 8011096:	07db      	lsls	r3, r3, #31
 8011098:	d539      	bpl.n	801110e <_printf_float+0x406>
 801109a:	2301      	movs	r3, #1
 801109c:	4642      	mov	r2, r8
 801109e:	4631      	mov	r1, r6
 80110a0:	4628      	mov	r0, r5
 80110a2:	47b8      	blx	r7
 80110a4:	3001      	adds	r0, #1
 80110a6:	f43f ae7d 	beq.w	8010da4 <_printf_float+0x9c>
 80110aa:	9b05      	ldr	r3, [sp, #20]
 80110ac:	465a      	mov	r2, fp
 80110ae:	4631      	mov	r1, r6
 80110b0:	4628      	mov	r0, r5
 80110b2:	47b8      	blx	r7
 80110b4:	3001      	adds	r0, #1
 80110b6:	f108 0801 	add.w	r8, r8, #1
 80110ba:	f43f ae73 	beq.w	8010da4 <_printf_float+0x9c>
 80110be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80110c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80110d0:	d018      	beq.n	8011104 <_printf_float+0x3fc>
 80110d2:	4642      	mov	r2, r8
 80110d4:	4631      	mov	r1, r6
 80110d6:	4628      	mov	r0, r5
 80110d8:	47b8      	blx	r7
 80110da:	3001      	adds	r0, #1
 80110dc:	d10e      	bne.n	80110fc <_printf_float+0x3f4>
 80110de:	e661      	b.n	8010da4 <_printf_float+0x9c>
 80110e0:	2301      	movs	r3, #1
 80110e2:	464a      	mov	r2, r9
 80110e4:	4631      	mov	r1, r6
 80110e6:	4628      	mov	r0, r5
 80110e8:	47b8      	blx	r7
 80110ea:	3001      	adds	r0, #1
 80110ec:	f43f ae5a 	beq.w	8010da4 <_printf_float+0x9c>
 80110f0:	f108 0801 	add.w	r8, r8, #1
 80110f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f6:	3b01      	subs	r3, #1
 80110f8:	4543      	cmp	r3, r8
 80110fa:	dcf1      	bgt.n	80110e0 <_printf_float+0x3d8>
 80110fc:	4653      	mov	r3, sl
 80110fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011102:	e6dd      	b.n	8010ec0 <_printf_float+0x1b8>
 8011104:	f04f 0800 	mov.w	r8, #0
 8011108:	f104 091a 	add.w	r9, r4, #26
 801110c:	e7f2      	b.n	80110f4 <_printf_float+0x3ec>
 801110e:	2301      	movs	r3, #1
 8011110:	e7df      	b.n	80110d2 <_printf_float+0x3ca>
 8011112:	2301      	movs	r3, #1
 8011114:	464a      	mov	r2, r9
 8011116:	4631      	mov	r1, r6
 8011118:	4628      	mov	r0, r5
 801111a:	47b8      	blx	r7
 801111c:	3001      	adds	r0, #1
 801111e:	f43f ae41 	beq.w	8010da4 <_printf_float+0x9c>
 8011122:	f108 0801 	add.w	r8, r8, #1
 8011126:	68e3      	ldr	r3, [r4, #12]
 8011128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801112a:	1a9b      	subs	r3, r3, r2
 801112c:	4543      	cmp	r3, r8
 801112e:	dcf0      	bgt.n	8011112 <_printf_float+0x40a>
 8011130:	e6fa      	b.n	8010f28 <_printf_float+0x220>
 8011132:	f04f 0800 	mov.w	r8, #0
 8011136:	f104 0919 	add.w	r9, r4, #25
 801113a:	e7f4      	b.n	8011126 <_printf_float+0x41e>
 801113c:	2900      	cmp	r1, #0
 801113e:	f43f ae8a 	beq.w	8010e56 <_printf_float+0x14e>
 8011142:	f04f 0c00 	mov.w	ip, #0
 8011146:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801114a:	e9cd 0900 	strd	r0, r9, [sp]
 801114e:	6022      	str	r2, [r4, #0]
 8011150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011154:	4628      	mov	r0, r5
 8011156:	f7ff fd4f 	bl	8010bf8 <__cvt>
 801115a:	4680      	mov	r8, r0
 801115c:	e64a      	b.n	8010df4 <_printf_float+0xec>
 801115e:	bf00      	nop

08011160 <_printf_common>:
 8011160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011164:	4691      	mov	r9, r2
 8011166:	461f      	mov	r7, r3
 8011168:	688a      	ldr	r2, [r1, #8]
 801116a:	690b      	ldr	r3, [r1, #16]
 801116c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011170:	4293      	cmp	r3, r2
 8011172:	bfb8      	it	lt
 8011174:	4613      	movlt	r3, r2
 8011176:	f8c9 3000 	str.w	r3, [r9]
 801117a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801117e:	4606      	mov	r6, r0
 8011180:	460c      	mov	r4, r1
 8011182:	b112      	cbz	r2, 801118a <_printf_common+0x2a>
 8011184:	3301      	adds	r3, #1
 8011186:	f8c9 3000 	str.w	r3, [r9]
 801118a:	6823      	ldr	r3, [r4, #0]
 801118c:	0699      	lsls	r1, r3, #26
 801118e:	bf42      	ittt	mi
 8011190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011194:	3302      	addmi	r3, #2
 8011196:	f8c9 3000 	strmi.w	r3, [r9]
 801119a:	6825      	ldr	r5, [r4, #0]
 801119c:	f015 0506 	ands.w	r5, r5, #6
 80111a0:	d107      	bne.n	80111b2 <_printf_common+0x52>
 80111a2:	f104 0a19 	add.w	sl, r4, #25
 80111a6:	68e3      	ldr	r3, [r4, #12]
 80111a8:	f8d9 2000 	ldr.w	r2, [r9]
 80111ac:	1a9b      	subs	r3, r3, r2
 80111ae:	42ab      	cmp	r3, r5
 80111b0:	dc28      	bgt.n	8011204 <_printf_common+0xa4>
 80111b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80111b6:	6822      	ldr	r2, [r4, #0]
 80111b8:	3300      	adds	r3, #0
 80111ba:	bf18      	it	ne
 80111bc:	2301      	movne	r3, #1
 80111be:	0692      	lsls	r2, r2, #26
 80111c0:	d42d      	bmi.n	801121e <_printf_common+0xbe>
 80111c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111c6:	4639      	mov	r1, r7
 80111c8:	4630      	mov	r0, r6
 80111ca:	47c0      	blx	r8
 80111cc:	3001      	adds	r0, #1
 80111ce:	d020      	beq.n	8011212 <_printf_common+0xb2>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	68e5      	ldr	r5, [r4, #12]
 80111d4:	f8d9 2000 	ldr.w	r2, [r9]
 80111d8:	f003 0306 	and.w	r3, r3, #6
 80111dc:	2b04      	cmp	r3, #4
 80111de:	bf08      	it	eq
 80111e0:	1aad      	subeq	r5, r5, r2
 80111e2:	68a3      	ldr	r3, [r4, #8]
 80111e4:	6922      	ldr	r2, [r4, #16]
 80111e6:	bf0c      	ite	eq
 80111e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111ec:	2500      	movne	r5, #0
 80111ee:	4293      	cmp	r3, r2
 80111f0:	bfc4      	itt	gt
 80111f2:	1a9b      	subgt	r3, r3, r2
 80111f4:	18ed      	addgt	r5, r5, r3
 80111f6:	f04f 0900 	mov.w	r9, #0
 80111fa:	341a      	adds	r4, #26
 80111fc:	454d      	cmp	r5, r9
 80111fe:	d11a      	bne.n	8011236 <_printf_common+0xd6>
 8011200:	2000      	movs	r0, #0
 8011202:	e008      	b.n	8011216 <_printf_common+0xb6>
 8011204:	2301      	movs	r3, #1
 8011206:	4652      	mov	r2, sl
 8011208:	4639      	mov	r1, r7
 801120a:	4630      	mov	r0, r6
 801120c:	47c0      	blx	r8
 801120e:	3001      	adds	r0, #1
 8011210:	d103      	bne.n	801121a <_printf_common+0xba>
 8011212:	f04f 30ff 	mov.w	r0, #4294967295
 8011216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801121a:	3501      	adds	r5, #1
 801121c:	e7c3      	b.n	80111a6 <_printf_common+0x46>
 801121e:	18e1      	adds	r1, r4, r3
 8011220:	1c5a      	adds	r2, r3, #1
 8011222:	2030      	movs	r0, #48	; 0x30
 8011224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011228:	4422      	add	r2, r4
 801122a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801122e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011232:	3302      	adds	r3, #2
 8011234:	e7c5      	b.n	80111c2 <_printf_common+0x62>
 8011236:	2301      	movs	r3, #1
 8011238:	4622      	mov	r2, r4
 801123a:	4639      	mov	r1, r7
 801123c:	4630      	mov	r0, r6
 801123e:	47c0      	blx	r8
 8011240:	3001      	adds	r0, #1
 8011242:	d0e6      	beq.n	8011212 <_printf_common+0xb2>
 8011244:	f109 0901 	add.w	r9, r9, #1
 8011248:	e7d8      	b.n	80111fc <_printf_common+0x9c>
	...

0801124c <_printf_i>:
 801124c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011254:	460c      	mov	r4, r1
 8011256:	7e09      	ldrb	r1, [r1, #24]
 8011258:	b085      	sub	sp, #20
 801125a:	296e      	cmp	r1, #110	; 0x6e
 801125c:	4617      	mov	r7, r2
 801125e:	4606      	mov	r6, r0
 8011260:	4698      	mov	r8, r3
 8011262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011264:	f000 80b3 	beq.w	80113ce <_printf_i+0x182>
 8011268:	d822      	bhi.n	80112b0 <_printf_i+0x64>
 801126a:	2963      	cmp	r1, #99	; 0x63
 801126c:	d036      	beq.n	80112dc <_printf_i+0x90>
 801126e:	d80a      	bhi.n	8011286 <_printf_i+0x3a>
 8011270:	2900      	cmp	r1, #0
 8011272:	f000 80b9 	beq.w	80113e8 <_printf_i+0x19c>
 8011276:	2958      	cmp	r1, #88	; 0x58
 8011278:	f000 8083 	beq.w	8011382 <_printf_i+0x136>
 801127c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011284:	e032      	b.n	80112ec <_printf_i+0xa0>
 8011286:	2964      	cmp	r1, #100	; 0x64
 8011288:	d001      	beq.n	801128e <_printf_i+0x42>
 801128a:	2969      	cmp	r1, #105	; 0x69
 801128c:	d1f6      	bne.n	801127c <_printf_i+0x30>
 801128e:	6820      	ldr	r0, [r4, #0]
 8011290:	6813      	ldr	r3, [r2, #0]
 8011292:	0605      	lsls	r5, r0, #24
 8011294:	f103 0104 	add.w	r1, r3, #4
 8011298:	d52a      	bpl.n	80112f0 <_printf_i+0xa4>
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	6011      	str	r1, [r2, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	da03      	bge.n	80112aa <_printf_i+0x5e>
 80112a2:	222d      	movs	r2, #45	; 0x2d
 80112a4:	425b      	negs	r3, r3
 80112a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80112aa:	486f      	ldr	r0, [pc, #444]	; (8011468 <_printf_i+0x21c>)
 80112ac:	220a      	movs	r2, #10
 80112ae:	e039      	b.n	8011324 <_printf_i+0xd8>
 80112b0:	2973      	cmp	r1, #115	; 0x73
 80112b2:	f000 809d 	beq.w	80113f0 <_printf_i+0x1a4>
 80112b6:	d808      	bhi.n	80112ca <_printf_i+0x7e>
 80112b8:	296f      	cmp	r1, #111	; 0x6f
 80112ba:	d020      	beq.n	80112fe <_printf_i+0xb2>
 80112bc:	2970      	cmp	r1, #112	; 0x70
 80112be:	d1dd      	bne.n	801127c <_printf_i+0x30>
 80112c0:	6823      	ldr	r3, [r4, #0]
 80112c2:	f043 0320 	orr.w	r3, r3, #32
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	e003      	b.n	80112d2 <_printf_i+0x86>
 80112ca:	2975      	cmp	r1, #117	; 0x75
 80112cc:	d017      	beq.n	80112fe <_printf_i+0xb2>
 80112ce:	2978      	cmp	r1, #120	; 0x78
 80112d0:	d1d4      	bne.n	801127c <_printf_i+0x30>
 80112d2:	2378      	movs	r3, #120	; 0x78
 80112d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112d8:	4864      	ldr	r0, [pc, #400]	; (801146c <_printf_i+0x220>)
 80112da:	e055      	b.n	8011388 <_printf_i+0x13c>
 80112dc:	6813      	ldr	r3, [r2, #0]
 80112de:	1d19      	adds	r1, r3, #4
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6011      	str	r1, [r2, #0]
 80112e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112ec:	2301      	movs	r3, #1
 80112ee:	e08c      	b.n	801140a <_printf_i+0x1be>
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	6011      	str	r1, [r2, #0]
 80112f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112f8:	bf18      	it	ne
 80112fa:	b21b      	sxthne	r3, r3
 80112fc:	e7cf      	b.n	801129e <_printf_i+0x52>
 80112fe:	6813      	ldr	r3, [r2, #0]
 8011300:	6825      	ldr	r5, [r4, #0]
 8011302:	1d18      	adds	r0, r3, #4
 8011304:	6010      	str	r0, [r2, #0]
 8011306:	0628      	lsls	r0, r5, #24
 8011308:	d501      	bpl.n	801130e <_printf_i+0xc2>
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	e002      	b.n	8011314 <_printf_i+0xc8>
 801130e:	0668      	lsls	r0, r5, #25
 8011310:	d5fb      	bpl.n	801130a <_printf_i+0xbe>
 8011312:	881b      	ldrh	r3, [r3, #0]
 8011314:	4854      	ldr	r0, [pc, #336]	; (8011468 <_printf_i+0x21c>)
 8011316:	296f      	cmp	r1, #111	; 0x6f
 8011318:	bf14      	ite	ne
 801131a:	220a      	movne	r2, #10
 801131c:	2208      	moveq	r2, #8
 801131e:	2100      	movs	r1, #0
 8011320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011324:	6865      	ldr	r5, [r4, #4]
 8011326:	60a5      	str	r5, [r4, #8]
 8011328:	2d00      	cmp	r5, #0
 801132a:	f2c0 8095 	blt.w	8011458 <_printf_i+0x20c>
 801132e:	6821      	ldr	r1, [r4, #0]
 8011330:	f021 0104 	bic.w	r1, r1, #4
 8011334:	6021      	str	r1, [r4, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d13d      	bne.n	80113b6 <_printf_i+0x16a>
 801133a:	2d00      	cmp	r5, #0
 801133c:	f040 808e 	bne.w	801145c <_printf_i+0x210>
 8011340:	4665      	mov	r5, ip
 8011342:	2a08      	cmp	r2, #8
 8011344:	d10b      	bne.n	801135e <_printf_i+0x112>
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	07db      	lsls	r3, r3, #31
 801134a:	d508      	bpl.n	801135e <_printf_i+0x112>
 801134c:	6923      	ldr	r3, [r4, #16]
 801134e:	6862      	ldr	r2, [r4, #4]
 8011350:	429a      	cmp	r2, r3
 8011352:	bfde      	ittt	le
 8011354:	2330      	movle	r3, #48	; 0x30
 8011356:	f805 3c01 	strble.w	r3, [r5, #-1]
 801135a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801135e:	ebac 0305 	sub.w	r3, ip, r5
 8011362:	6123      	str	r3, [r4, #16]
 8011364:	f8cd 8000 	str.w	r8, [sp]
 8011368:	463b      	mov	r3, r7
 801136a:	aa03      	add	r2, sp, #12
 801136c:	4621      	mov	r1, r4
 801136e:	4630      	mov	r0, r6
 8011370:	f7ff fef6 	bl	8011160 <_printf_common>
 8011374:	3001      	adds	r0, #1
 8011376:	d14d      	bne.n	8011414 <_printf_i+0x1c8>
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
 801137c:	b005      	add	sp, #20
 801137e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011382:	4839      	ldr	r0, [pc, #228]	; (8011468 <_printf_i+0x21c>)
 8011384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011388:	6813      	ldr	r3, [r2, #0]
 801138a:	6821      	ldr	r1, [r4, #0]
 801138c:	1d1d      	adds	r5, r3, #4
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	6015      	str	r5, [r2, #0]
 8011392:	060a      	lsls	r2, r1, #24
 8011394:	d50b      	bpl.n	80113ae <_printf_i+0x162>
 8011396:	07ca      	lsls	r2, r1, #31
 8011398:	bf44      	itt	mi
 801139a:	f041 0120 	orrmi.w	r1, r1, #32
 801139e:	6021      	strmi	r1, [r4, #0]
 80113a0:	b91b      	cbnz	r3, 80113aa <_printf_i+0x15e>
 80113a2:	6822      	ldr	r2, [r4, #0]
 80113a4:	f022 0220 	bic.w	r2, r2, #32
 80113a8:	6022      	str	r2, [r4, #0]
 80113aa:	2210      	movs	r2, #16
 80113ac:	e7b7      	b.n	801131e <_printf_i+0xd2>
 80113ae:	064d      	lsls	r5, r1, #25
 80113b0:	bf48      	it	mi
 80113b2:	b29b      	uxthmi	r3, r3
 80113b4:	e7ef      	b.n	8011396 <_printf_i+0x14a>
 80113b6:	4665      	mov	r5, ip
 80113b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80113bc:	fb02 3311 	mls	r3, r2, r1, r3
 80113c0:	5cc3      	ldrb	r3, [r0, r3]
 80113c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80113c6:	460b      	mov	r3, r1
 80113c8:	2900      	cmp	r1, #0
 80113ca:	d1f5      	bne.n	80113b8 <_printf_i+0x16c>
 80113cc:	e7b9      	b.n	8011342 <_printf_i+0xf6>
 80113ce:	6813      	ldr	r3, [r2, #0]
 80113d0:	6825      	ldr	r5, [r4, #0]
 80113d2:	6961      	ldr	r1, [r4, #20]
 80113d4:	1d18      	adds	r0, r3, #4
 80113d6:	6010      	str	r0, [r2, #0]
 80113d8:	0628      	lsls	r0, r5, #24
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	d501      	bpl.n	80113e2 <_printf_i+0x196>
 80113de:	6019      	str	r1, [r3, #0]
 80113e0:	e002      	b.n	80113e8 <_printf_i+0x19c>
 80113e2:	066a      	lsls	r2, r5, #25
 80113e4:	d5fb      	bpl.n	80113de <_printf_i+0x192>
 80113e6:	8019      	strh	r1, [r3, #0]
 80113e8:	2300      	movs	r3, #0
 80113ea:	6123      	str	r3, [r4, #16]
 80113ec:	4665      	mov	r5, ip
 80113ee:	e7b9      	b.n	8011364 <_printf_i+0x118>
 80113f0:	6813      	ldr	r3, [r2, #0]
 80113f2:	1d19      	adds	r1, r3, #4
 80113f4:	6011      	str	r1, [r2, #0]
 80113f6:	681d      	ldr	r5, [r3, #0]
 80113f8:	6862      	ldr	r2, [r4, #4]
 80113fa:	2100      	movs	r1, #0
 80113fc:	4628      	mov	r0, r5
 80113fe:	f7ee ff27 	bl	8000250 <memchr>
 8011402:	b108      	cbz	r0, 8011408 <_printf_i+0x1bc>
 8011404:	1b40      	subs	r0, r0, r5
 8011406:	6060      	str	r0, [r4, #4]
 8011408:	6863      	ldr	r3, [r4, #4]
 801140a:	6123      	str	r3, [r4, #16]
 801140c:	2300      	movs	r3, #0
 801140e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011412:	e7a7      	b.n	8011364 <_printf_i+0x118>
 8011414:	6923      	ldr	r3, [r4, #16]
 8011416:	462a      	mov	r2, r5
 8011418:	4639      	mov	r1, r7
 801141a:	4630      	mov	r0, r6
 801141c:	47c0      	blx	r8
 801141e:	3001      	adds	r0, #1
 8011420:	d0aa      	beq.n	8011378 <_printf_i+0x12c>
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	079b      	lsls	r3, r3, #30
 8011426:	d413      	bmi.n	8011450 <_printf_i+0x204>
 8011428:	68e0      	ldr	r0, [r4, #12]
 801142a:	9b03      	ldr	r3, [sp, #12]
 801142c:	4298      	cmp	r0, r3
 801142e:	bfb8      	it	lt
 8011430:	4618      	movlt	r0, r3
 8011432:	e7a3      	b.n	801137c <_printf_i+0x130>
 8011434:	2301      	movs	r3, #1
 8011436:	464a      	mov	r2, r9
 8011438:	4639      	mov	r1, r7
 801143a:	4630      	mov	r0, r6
 801143c:	47c0      	blx	r8
 801143e:	3001      	adds	r0, #1
 8011440:	d09a      	beq.n	8011378 <_printf_i+0x12c>
 8011442:	3501      	adds	r5, #1
 8011444:	68e3      	ldr	r3, [r4, #12]
 8011446:	9a03      	ldr	r2, [sp, #12]
 8011448:	1a9b      	subs	r3, r3, r2
 801144a:	42ab      	cmp	r3, r5
 801144c:	dcf2      	bgt.n	8011434 <_printf_i+0x1e8>
 801144e:	e7eb      	b.n	8011428 <_printf_i+0x1dc>
 8011450:	2500      	movs	r5, #0
 8011452:	f104 0919 	add.w	r9, r4, #25
 8011456:	e7f5      	b.n	8011444 <_printf_i+0x1f8>
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1ac      	bne.n	80113b6 <_printf_i+0x16a>
 801145c:	7803      	ldrb	r3, [r0, #0]
 801145e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011466:	e76c      	b.n	8011342 <_printf_i+0xf6>
 8011468:	08015d7c 	.word	0x08015d7c
 801146c:	08015d8d 	.word	0x08015d8d

08011470 <_scanf_float>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	469a      	mov	sl, r3
 8011476:	688b      	ldr	r3, [r1, #8]
 8011478:	4616      	mov	r6, r2
 801147a:	1e5a      	subs	r2, r3, #1
 801147c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011480:	b087      	sub	sp, #28
 8011482:	bf83      	ittte	hi
 8011484:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011488:	189b      	addhi	r3, r3, r2
 801148a:	9301      	strhi	r3, [sp, #4]
 801148c:	2300      	movls	r3, #0
 801148e:	bf86      	itte	hi
 8011490:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011494:	608b      	strhi	r3, [r1, #8]
 8011496:	9301      	strls	r3, [sp, #4]
 8011498:	680b      	ldr	r3, [r1, #0]
 801149a:	4688      	mov	r8, r1
 801149c:	f04f 0b00 	mov.w	fp, #0
 80114a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80114a4:	f848 3b1c 	str.w	r3, [r8], #28
 80114a8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80114ac:	4607      	mov	r7, r0
 80114ae:	460c      	mov	r4, r1
 80114b0:	4645      	mov	r5, r8
 80114b2:	465a      	mov	r2, fp
 80114b4:	46d9      	mov	r9, fp
 80114b6:	f8cd b008 	str.w	fp, [sp, #8]
 80114ba:	68a1      	ldr	r1, [r4, #8]
 80114bc:	b181      	cbz	r1, 80114e0 <_scanf_float+0x70>
 80114be:	6833      	ldr	r3, [r6, #0]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	2b49      	cmp	r3, #73	; 0x49
 80114c4:	d071      	beq.n	80115aa <_scanf_float+0x13a>
 80114c6:	d84d      	bhi.n	8011564 <_scanf_float+0xf4>
 80114c8:	2b39      	cmp	r3, #57	; 0x39
 80114ca:	d840      	bhi.n	801154e <_scanf_float+0xde>
 80114cc:	2b31      	cmp	r3, #49	; 0x31
 80114ce:	f080 8088 	bcs.w	80115e2 <_scanf_float+0x172>
 80114d2:	2b2d      	cmp	r3, #45	; 0x2d
 80114d4:	f000 8090 	beq.w	80115f8 <_scanf_float+0x188>
 80114d8:	d815      	bhi.n	8011506 <_scanf_float+0x96>
 80114da:	2b2b      	cmp	r3, #43	; 0x2b
 80114dc:	f000 808c 	beq.w	80115f8 <_scanf_float+0x188>
 80114e0:	f1b9 0f00 	cmp.w	r9, #0
 80114e4:	d003      	beq.n	80114ee <_scanf_float+0x7e>
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114ec:	6023      	str	r3, [r4, #0]
 80114ee:	3a01      	subs	r2, #1
 80114f0:	2a01      	cmp	r2, #1
 80114f2:	f200 80ea 	bhi.w	80116ca <_scanf_float+0x25a>
 80114f6:	4545      	cmp	r5, r8
 80114f8:	f200 80dc 	bhi.w	80116b4 <_scanf_float+0x244>
 80114fc:	2601      	movs	r6, #1
 80114fe:	4630      	mov	r0, r6
 8011500:	b007      	add	sp, #28
 8011502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011506:	2b2e      	cmp	r3, #46	; 0x2e
 8011508:	f000 809f 	beq.w	801164a <_scanf_float+0x1da>
 801150c:	2b30      	cmp	r3, #48	; 0x30
 801150e:	d1e7      	bne.n	80114e0 <_scanf_float+0x70>
 8011510:	6820      	ldr	r0, [r4, #0]
 8011512:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011516:	d064      	beq.n	80115e2 <_scanf_float+0x172>
 8011518:	9b01      	ldr	r3, [sp, #4]
 801151a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801151e:	6020      	str	r0, [r4, #0]
 8011520:	f109 0901 	add.w	r9, r9, #1
 8011524:	b11b      	cbz	r3, 801152e <_scanf_float+0xbe>
 8011526:	3b01      	subs	r3, #1
 8011528:	3101      	adds	r1, #1
 801152a:	9301      	str	r3, [sp, #4]
 801152c:	60a1      	str	r1, [r4, #8]
 801152e:	68a3      	ldr	r3, [r4, #8]
 8011530:	3b01      	subs	r3, #1
 8011532:	60a3      	str	r3, [r4, #8]
 8011534:	6923      	ldr	r3, [r4, #16]
 8011536:	3301      	adds	r3, #1
 8011538:	6123      	str	r3, [r4, #16]
 801153a:	6873      	ldr	r3, [r6, #4]
 801153c:	3b01      	subs	r3, #1
 801153e:	2b00      	cmp	r3, #0
 8011540:	6073      	str	r3, [r6, #4]
 8011542:	f340 80ac 	ble.w	801169e <_scanf_float+0x22e>
 8011546:	6833      	ldr	r3, [r6, #0]
 8011548:	3301      	adds	r3, #1
 801154a:	6033      	str	r3, [r6, #0]
 801154c:	e7b5      	b.n	80114ba <_scanf_float+0x4a>
 801154e:	2b45      	cmp	r3, #69	; 0x45
 8011550:	f000 8085 	beq.w	801165e <_scanf_float+0x1ee>
 8011554:	2b46      	cmp	r3, #70	; 0x46
 8011556:	d06a      	beq.n	801162e <_scanf_float+0x1be>
 8011558:	2b41      	cmp	r3, #65	; 0x41
 801155a:	d1c1      	bne.n	80114e0 <_scanf_float+0x70>
 801155c:	2a01      	cmp	r2, #1
 801155e:	d1bf      	bne.n	80114e0 <_scanf_float+0x70>
 8011560:	2202      	movs	r2, #2
 8011562:	e046      	b.n	80115f2 <_scanf_float+0x182>
 8011564:	2b65      	cmp	r3, #101	; 0x65
 8011566:	d07a      	beq.n	801165e <_scanf_float+0x1ee>
 8011568:	d818      	bhi.n	801159c <_scanf_float+0x12c>
 801156a:	2b54      	cmp	r3, #84	; 0x54
 801156c:	d066      	beq.n	801163c <_scanf_float+0x1cc>
 801156e:	d811      	bhi.n	8011594 <_scanf_float+0x124>
 8011570:	2b4e      	cmp	r3, #78	; 0x4e
 8011572:	d1b5      	bne.n	80114e0 <_scanf_float+0x70>
 8011574:	2a00      	cmp	r2, #0
 8011576:	d146      	bne.n	8011606 <_scanf_float+0x196>
 8011578:	f1b9 0f00 	cmp.w	r9, #0
 801157c:	d145      	bne.n	801160a <_scanf_float+0x19a>
 801157e:	6821      	ldr	r1, [r4, #0]
 8011580:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011584:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011588:	d13f      	bne.n	801160a <_scanf_float+0x19a>
 801158a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801158e:	6021      	str	r1, [r4, #0]
 8011590:	2201      	movs	r2, #1
 8011592:	e02e      	b.n	80115f2 <_scanf_float+0x182>
 8011594:	2b59      	cmp	r3, #89	; 0x59
 8011596:	d01e      	beq.n	80115d6 <_scanf_float+0x166>
 8011598:	2b61      	cmp	r3, #97	; 0x61
 801159a:	e7de      	b.n	801155a <_scanf_float+0xea>
 801159c:	2b6e      	cmp	r3, #110	; 0x6e
 801159e:	d0e9      	beq.n	8011574 <_scanf_float+0x104>
 80115a0:	d815      	bhi.n	80115ce <_scanf_float+0x15e>
 80115a2:	2b66      	cmp	r3, #102	; 0x66
 80115a4:	d043      	beq.n	801162e <_scanf_float+0x1be>
 80115a6:	2b69      	cmp	r3, #105	; 0x69
 80115a8:	d19a      	bne.n	80114e0 <_scanf_float+0x70>
 80115aa:	f1bb 0f00 	cmp.w	fp, #0
 80115ae:	d138      	bne.n	8011622 <_scanf_float+0x1b2>
 80115b0:	f1b9 0f00 	cmp.w	r9, #0
 80115b4:	d197      	bne.n	80114e6 <_scanf_float+0x76>
 80115b6:	6821      	ldr	r1, [r4, #0]
 80115b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80115bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80115c0:	d195      	bne.n	80114ee <_scanf_float+0x7e>
 80115c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80115c6:	6021      	str	r1, [r4, #0]
 80115c8:	f04f 0b01 	mov.w	fp, #1
 80115cc:	e011      	b.n	80115f2 <_scanf_float+0x182>
 80115ce:	2b74      	cmp	r3, #116	; 0x74
 80115d0:	d034      	beq.n	801163c <_scanf_float+0x1cc>
 80115d2:	2b79      	cmp	r3, #121	; 0x79
 80115d4:	d184      	bne.n	80114e0 <_scanf_float+0x70>
 80115d6:	f1bb 0f07 	cmp.w	fp, #7
 80115da:	d181      	bne.n	80114e0 <_scanf_float+0x70>
 80115dc:	f04f 0b08 	mov.w	fp, #8
 80115e0:	e007      	b.n	80115f2 <_scanf_float+0x182>
 80115e2:	eb12 0f0b 	cmn.w	r2, fp
 80115e6:	f47f af7b 	bne.w	80114e0 <_scanf_float+0x70>
 80115ea:	6821      	ldr	r1, [r4, #0]
 80115ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80115f0:	6021      	str	r1, [r4, #0]
 80115f2:	702b      	strb	r3, [r5, #0]
 80115f4:	3501      	adds	r5, #1
 80115f6:	e79a      	b.n	801152e <_scanf_float+0xbe>
 80115f8:	6821      	ldr	r1, [r4, #0]
 80115fa:	0608      	lsls	r0, r1, #24
 80115fc:	f57f af70 	bpl.w	80114e0 <_scanf_float+0x70>
 8011600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011604:	e7f4      	b.n	80115f0 <_scanf_float+0x180>
 8011606:	2a02      	cmp	r2, #2
 8011608:	d047      	beq.n	801169a <_scanf_float+0x22a>
 801160a:	f1bb 0f01 	cmp.w	fp, #1
 801160e:	d003      	beq.n	8011618 <_scanf_float+0x1a8>
 8011610:	f1bb 0f04 	cmp.w	fp, #4
 8011614:	f47f af64 	bne.w	80114e0 <_scanf_float+0x70>
 8011618:	f10b 0b01 	add.w	fp, fp, #1
 801161c:	fa5f fb8b 	uxtb.w	fp, fp
 8011620:	e7e7      	b.n	80115f2 <_scanf_float+0x182>
 8011622:	f1bb 0f03 	cmp.w	fp, #3
 8011626:	d0f7      	beq.n	8011618 <_scanf_float+0x1a8>
 8011628:	f1bb 0f05 	cmp.w	fp, #5
 801162c:	e7f2      	b.n	8011614 <_scanf_float+0x1a4>
 801162e:	f1bb 0f02 	cmp.w	fp, #2
 8011632:	f47f af55 	bne.w	80114e0 <_scanf_float+0x70>
 8011636:	f04f 0b03 	mov.w	fp, #3
 801163a:	e7da      	b.n	80115f2 <_scanf_float+0x182>
 801163c:	f1bb 0f06 	cmp.w	fp, #6
 8011640:	f47f af4e 	bne.w	80114e0 <_scanf_float+0x70>
 8011644:	f04f 0b07 	mov.w	fp, #7
 8011648:	e7d3      	b.n	80115f2 <_scanf_float+0x182>
 801164a:	6821      	ldr	r1, [r4, #0]
 801164c:	0588      	lsls	r0, r1, #22
 801164e:	f57f af47 	bpl.w	80114e0 <_scanf_float+0x70>
 8011652:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011656:	6021      	str	r1, [r4, #0]
 8011658:	f8cd 9008 	str.w	r9, [sp, #8]
 801165c:	e7c9      	b.n	80115f2 <_scanf_float+0x182>
 801165e:	6821      	ldr	r1, [r4, #0]
 8011660:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011664:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011668:	d006      	beq.n	8011678 <_scanf_float+0x208>
 801166a:	0548      	lsls	r0, r1, #21
 801166c:	f57f af38 	bpl.w	80114e0 <_scanf_float+0x70>
 8011670:	f1b9 0f00 	cmp.w	r9, #0
 8011674:	f43f af3b 	beq.w	80114ee <_scanf_float+0x7e>
 8011678:	0588      	lsls	r0, r1, #22
 801167a:	bf58      	it	pl
 801167c:	9802      	ldrpl	r0, [sp, #8]
 801167e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011682:	bf58      	it	pl
 8011684:	eba9 0000 	subpl.w	r0, r9, r0
 8011688:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801168c:	bf58      	it	pl
 801168e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011692:	6021      	str	r1, [r4, #0]
 8011694:	f04f 0900 	mov.w	r9, #0
 8011698:	e7ab      	b.n	80115f2 <_scanf_float+0x182>
 801169a:	2203      	movs	r2, #3
 801169c:	e7a9      	b.n	80115f2 <_scanf_float+0x182>
 801169e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80116a2:	9205      	str	r2, [sp, #20]
 80116a4:	4631      	mov	r1, r6
 80116a6:	4638      	mov	r0, r7
 80116a8:	4798      	blx	r3
 80116aa:	9a05      	ldr	r2, [sp, #20]
 80116ac:	2800      	cmp	r0, #0
 80116ae:	f43f af04 	beq.w	80114ba <_scanf_float+0x4a>
 80116b2:	e715      	b.n	80114e0 <_scanf_float+0x70>
 80116b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80116bc:	4632      	mov	r2, r6
 80116be:	4638      	mov	r0, r7
 80116c0:	4798      	blx	r3
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	3b01      	subs	r3, #1
 80116c6:	6123      	str	r3, [r4, #16]
 80116c8:	e715      	b.n	80114f6 <_scanf_float+0x86>
 80116ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80116ce:	2b06      	cmp	r3, #6
 80116d0:	d80a      	bhi.n	80116e8 <_scanf_float+0x278>
 80116d2:	f1bb 0f02 	cmp.w	fp, #2
 80116d6:	d966      	bls.n	80117a6 <_scanf_float+0x336>
 80116d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80116dc:	fa5f fb8b 	uxtb.w	fp, fp
 80116e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80116e4:	455d      	cmp	r5, fp
 80116e6:	d149      	bne.n	801177c <_scanf_float+0x30c>
 80116e8:	6823      	ldr	r3, [r4, #0]
 80116ea:	05da      	lsls	r2, r3, #23
 80116ec:	d51f      	bpl.n	801172e <_scanf_float+0x2be>
 80116ee:	055b      	lsls	r3, r3, #21
 80116f0:	d466      	bmi.n	80117c0 <_scanf_float+0x350>
 80116f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80116f6:	6923      	ldr	r3, [r4, #16]
 80116f8:	2965      	cmp	r1, #101	; 0x65
 80116fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80116fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8011702:	6123      	str	r3, [r4, #16]
 8011704:	d00d      	beq.n	8011722 <_scanf_float+0x2b2>
 8011706:	2945      	cmp	r1, #69	; 0x45
 8011708:	d00b      	beq.n	8011722 <_scanf_float+0x2b2>
 801170a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801170e:	4632      	mov	r2, r6
 8011710:	4638      	mov	r0, r7
 8011712:	4798      	blx	r3
 8011714:	6923      	ldr	r3, [r4, #16]
 8011716:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801171a:	3b01      	subs	r3, #1
 801171c:	f1a5 0b02 	sub.w	fp, r5, #2
 8011720:	6123      	str	r3, [r4, #16]
 8011722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011726:	4632      	mov	r2, r6
 8011728:	4638      	mov	r0, r7
 801172a:	4798      	blx	r3
 801172c:	465d      	mov	r5, fp
 801172e:	6826      	ldr	r6, [r4, #0]
 8011730:	f016 0610 	ands.w	r6, r6, #16
 8011734:	d170      	bne.n	8011818 <_scanf_float+0x3a8>
 8011736:	702e      	strb	r6, [r5, #0]
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011742:	d140      	bne.n	80117c6 <_scanf_float+0x356>
 8011744:	9b02      	ldr	r3, [sp, #8]
 8011746:	eba9 0303 	sub.w	r3, r9, r3
 801174a:	425a      	negs	r2, r3
 801174c:	2b00      	cmp	r3, #0
 801174e:	d147      	bne.n	80117e0 <_scanf_float+0x370>
 8011750:	2200      	movs	r2, #0
 8011752:	4638      	mov	r0, r7
 8011754:	4641      	mov	r1, r8
 8011756:	f000 ffb3 	bl	80126c0 <_strtod_r>
 801175a:	6820      	ldr	r0, [r4, #0]
 801175c:	f8da 3000 	ldr.w	r3, [sl]
 8011760:	f010 0f02 	tst.w	r0, #2
 8011764:	f103 0204 	add.w	r2, r3, #4
 8011768:	f8ca 2000 	str.w	r2, [sl]
 801176c:	d043      	beq.n	80117f6 <_scanf_float+0x386>
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	ed83 0b00 	vstr	d0, [r3]
 8011774:	68e3      	ldr	r3, [r4, #12]
 8011776:	3301      	adds	r3, #1
 8011778:	60e3      	str	r3, [r4, #12]
 801177a:	e6c0      	b.n	80114fe <_scanf_float+0x8e>
 801177c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011784:	4632      	mov	r2, r6
 8011786:	4638      	mov	r0, r7
 8011788:	4798      	blx	r3
 801178a:	6923      	ldr	r3, [r4, #16]
 801178c:	3b01      	subs	r3, #1
 801178e:	6123      	str	r3, [r4, #16]
 8011790:	e7a8      	b.n	80116e4 <_scanf_float+0x274>
 8011792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011796:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801179a:	4632      	mov	r2, r6
 801179c:	4638      	mov	r0, r7
 801179e:	4798      	blx	r3
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	4545      	cmp	r5, r8
 80117a8:	d8f3      	bhi.n	8011792 <_scanf_float+0x322>
 80117aa:	e6a7      	b.n	80114fc <_scanf_float+0x8c>
 80117ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80117b4:	4632      	mov	r2, r6
 80117b6:	4638      	mov	r0, r7
 80117b8:	4798      	blx	r3
 80117ba:	6923      	ldr	r3, [r4, #16]
 80117bc:	3b01      	subs	r3, #1
 80117be:	6123      	str	r3, [r4, #16]
 80117c0:	4545      	cmp	r5, r8
 80117c2:	d8f3      	bhi.n	80117ac <_scanf_float+0x33c>
 80117c4:	e69a      	b.n	80114fc <_scanf_float+0x8c>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d0c1      	beq.n	8011750 <_scanf_float+0x2e0>
 80117cc:	9904      	ldr	r1, [sp, #16]
 80117ce:	230a      	movs	r3, #10
 80117d0:	4632      	mov	r2, r6
 80117d2:	3101      	adds	r1, #1
 80117d4:	4638      	mov	r0, r7
 80117d6:	f000 ffff 	bl	80127d8 <_strtol_r>
 80117da:	9b03      	ldr	r3, [sp, #12]
 80117dc:	9d04      	ldr	r5, [sp, #16]
 80117de:	1ac2      	subs	r2, r0, r3
 80117e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80117e4:	429d      	cmp	r5, r3
 80117e6:	bf28      	it	cs
 80117e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80117ec:	490b      	ldr	r1, [pc, #44]	; (801181c <_scanf_float+0x3ac>)
 80117ee:	4628      	mov	r0, r5
 80117f0:	f000 f8f4 	bl	80119dc <siprintf>
 80117f4:	e7ac      	b.n	8011750 <_scanf_float+0x2e0>
 80117f6:	f010 0004 	ands.w	r0, r0, #4
 80117fa:	d1b8      	bne.n	801176e <_scanf_float+0x2fe>
 80117fc:	eeb4 0b40 	vcmp.f64	d0, d0
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	681d      	ldr	r5, [r3, #0]
 8011806:	d704      	bvc.n	8011812 <_scanf_float+0x3a2>
 8011808:	f000 f89e 	bl	8011948 <nanf>
 801180c:	ed85 0a00 	vstr	s0, [r5]
 8011810:	e7b0      	b.n	8011774 <_scanf_float+0x304>
 8011812:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011816:	e7f9      	b.n	801180c <_scanf_float+0x39c>
 8011818:	2600      	movs	r6, #0
 801181a:	e670      	b.n	80114fe <_scanf_float+0x8e>
 801181c:	08015d9e 	.word	0x08015d9e

08011820 <iprintf>:
 8011820:	b40f      	push	{r0, r1, r2, r3}
 8011822:	4b0a      	ldr	r3, [pc, #40]	; (801184c <iprintf+0x2c>)
 8011824:	b513      	push	{r0, r1, r4, lr}
 8011826:	681c      	ldr	r4, [r3, #0]
 8011828:	b124      	cbz	r4, 8011834 <iprintf+0x14>
 801182a:	69a3      	ldr	r3, [r4, #24]
 801182c:	b913      	cbnz	r3, 8011834 <iprintf+0x14>
 801182e:	4620      	mov	r0, r4
 8011830:	f001 ff8e 	bl	8013750 <__sinit>
 8011834:	ab05      	add	r3, sp, #20
 8011836:	9a04      	ldr	r2, [sp, #16]
 8011838:	68a1      	ldr	r1, [r4, #8]
 801183a:	9301      	str	r3, [sp, #4]
 801183c:	4620      	mov	r0, r4
 801183e:	f003 fb2f 	bl	8014ea0 <_vfiprintf_r>
 8011842:	b002      	add	sp, #8
 8011844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011848:	b004      	add	sp, #16
 801184a:	4770      	bx	lr
 801184c:	200003a8 	.word	0x200003a8

08011850 <_puts_r>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	460e      	mov	r6, r1
 8011854:	4605      	mov	r5, r0
 8011856:	b118      	cbz	r0, 8011860 <_puts_r+0x10>
 8011858:	6983      	ldr	r3, [r0, #24]
 801185a:	b90b      	cbnz	r3, 8011860 <_puts_r+0x10>
 801185c:	f001 ff78 	bl	8013750 <__sinit>
 8011860:	69ab      	ldr	r3, [r5, #24]
 8011862:	68ac      	ldr	r4, [r5, #8]
 8011864:	b913      	cbnz	r3, 801186c <_puts_r+0x1c>
 8011866:	4628      	mov	r0, r5
 8011868:	f001 ff72 	bl	8013750 <__sinit>
 801186c:	4b23      	ldr	r3, [pc, #140]	; (80118fc <_puts_r+0xac>)
 801186e:	429c      	cmp	r4, r3
 8011870:	d117      	bne.n	80118a2 <_puts_r+0x52>
 8011872:	686c      	ldr	r4, [r5, #4]
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	071b      	lsls	r3, r3, #28
 8011878:	d51d      	bpl.n	80118b6 <_puts_r+0x66>
 801187a:	6923      	ldr	r3, [r4, #16]
 801187c:	b1db      	cbz	r3, 80118b6 <_puts_r+0x66>
 801187e:	3e01      	subs	r6, #1
 8011880:	68a3      	ldr	r3, [r4, #8]
 8011882:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011886:	3b01      	subs	r3, #1
 8011888:	60a3      	str	r3, [r4, #8]
 801188a:	b9e9      	cbnz	r1, 80118c8 <_puts_r+0x78>
 801188c:	2b00      	cmp	r3, #0
 801188e:	da2e      	bge.n	80118ee <_puts_r+0x9e>
 8011890:	4622      	mov	r2, r4
 8011892:	210a      	movs	r1, #10
 8011894:	4628      	mov	r0, r5
 8011896:	f000 ffb1 	bl	80127fc <__swbuf_r>
 801189a:	3001      	adds	r0, #1
 801189c:	d011      	beq.n	80118c2 <_puts_r+0x72>
 801189e:	200a      	movs	r0, #10
 80118a0:	e011      	b.n	80118c6 <_puts_r+0x76>
 80118a2:	4b17      	ldr	r3, [pc, #92]	; (8011900 <_puts_r+0xb0>)
 80118a4:	429c      	cmp	r4, r3
 80118a6:	d101      	bne.n	80118ac <_puts_r+0x5c>
 80118a8:	68ac      	ldr	r4, [r5, #8]
 80118aa:	e7e3      	b.n	8011874 <_puts_r+0x24>
 80118ac:	4b15      	ldr	r3, [pc, #84]	; (8011904 <_puts_r+0xb4>)
 80118ae:	429c      	cmp	r4, r3
 80118b0:	bf08      	it	eq
 80118b2:	68ec      	ldreq	r4, [r5, #12]
 80118b4:	e7de      	b.n	8011874 <_puts_r+0x24>
 80118b6:	4621      	mov	r1, r4
 80118b8:	4628      	mov	r0, r5
 80118ba:	f001 f803 	bl	80128c4 <__swsetup_r>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d0dd      	beq.n	801187e <_puts_r+0x2e>
 80118c2:	f04f 30ff 	mov.w	r0, #4294967295
 80118c6:	bd70      	pop	{r4, r5, r6, pc}
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	da04      	bge.n	80118d6 <_puts_r+0x86>
 80118cc:	69a2      	ldr	r2, [r4, #24]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	dc06      	bgt.n	80118e0 <_puts_r+0x90>
 80118d2:	290a      	cmp	r1, #10
 80118d4:	d004      	beq.n	80118e0 <_puts_r+0x90>
 80118d6:	6823      	ldr	r3, [r4, #0]
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	7019      	strb	r1, [r3, #0]
 80118de:	e7cf      	b.n	8011880 <_puts_r+0x30>
 80118e0:	4622      	mov	r2, r4
 80118e2:	4628      	mov	r0, r5
 80118e4:	f000 ff8a 	bl	80127fc <__swbuf_r>
 80118e8:	3001      	adds	r0, #1
 80118ea:	d1c9      	bne.n	8011880 <_puts_r+0x30>
 80118ec:	e7e9      	b.n	80118c2 <_puts_r+0x72>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	200a      	movs	r0, #10
 80118f2:	1c5a      	adds	r2, r3, #1
 80118f4:	6022      	str	r2, [r4, #0]
 80118f6:	7018      	strb	r0, [r3, #0]
 80118f8:	e7e5      	b.n	80118c6 <_puts_r+0x76>
 80118fa:	bf00      	nop
 80118fc:	08015e28 	.word	0x08015e28
 8011900:	08015e48 	.word	0x08015e48
 8011904:	08015e08 	.word	0x08015e08

08011908 <puts>:
 8011908:	4b02      	ldr	r3, [pc, #8]	; (8011914 <puts+0xc>)
 801190a:	4601      	mov	r1, r0
 801190c:	6818      	ldr	r0, [r3, #0]
 801190e:	f7ff bf9f 	b.w	8011850 <_puts_r>
 8011912:	bf00      	nop
 8011914:	200003a8 	.word	0x200003a8

08011918 <realloc>:
 8011918:	4b02      	ldr	r3, [pc, #8]	; (8011924 <realloc+0xc>)
 801191a:	460a      	mov	r2, r1
 801191c:	4601      	mov	r1, r0
 801191e:	6818      	ldr	r0, [r3, #0]
 8011920:	f002 bf72 	b.w	8014808 <_realloc_r>
 8011924:	200003a8 	.word	0x200003a8

08011928 <_sbrk_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4c06      	ldr	r4, [pc, #24]	; (8011944 <_sbrk_r+0x1c>)
 801192c:	2300      	movs	r3, #0
 801192e:	4605      	mov	r5, r0
 8011930:	4608      	mov	r0, r1
 8011932:	6023      	str	r3, [r4, #0]
 8011934:	f003 fec8 	bl	80156c8 <_sbrk>
 8011938:	1c43      	adds	r3, r0, #1
 801193a:	d102      	bne.n	8011942 <_sbrk_r+0x1a>
 801193c:	6823      	ldr	r3, [r4, #0]
 801193e:	b103      	cbz	r3, 8011942 <_sbrk_r+0x1a>
 8011940:	602b      	str	r3, [r5, #0]
 8011942:	bd38      	pop	{r3, r4, r5, pc}
 8011944:	20011f7c 	.word	0x20011f7c

08011948 <nanf>:
 8011948:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011950 <nanf+0x8>
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop
 8011950:	7fc00000 	.word	0x7fc00000

08011954 <_raise_r>:
 8011954:	291f      	cmp	r1, #31
 8011956:	b538      	push	{r3, r4, r5, lr}
 8011958:	4604      	mov	r4, r0
 801195a:	460d      	mov	r5, r1
 801195c:	d904      	bls.n	8011968 <_raise_r+0x14>
 801195e:	2316      	movs	r3, #22
 8011960:	6003      	str	r3, [r0, #0]
 8011962:	f04f 30ff 	mov.w	r0, #4294967295
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801196a:	b112      	cbz	r2, 8011972 <_raise_r+0x1e>
 801196c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011970:	b94b      	cbnz	r3, 8011986 <_raise_r+0x32>
 8011972:	4620      	mov	r0, r4
 8011974:	f000 f830 	bl	80119d8 <_getpid_r>
 8011978:	462a      	mov	r2, r5
 801197a:	4601      	mov	r1, r0
 801197c:	4620      	mov	r0, r4
 801197e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011982:	f000 b817 	b.w	80119b4 <_kill_r>
 8011986:	2b01      	cmp	r3, #1
 8011988:	d00a      	beq.n	80119a0 <_raise_r+0x4c>
 801198a:	1c59      	adds	r1, r3, #1
 801198c:	d103      	bne.n	8011996 <_raise_r+0x42>
 801198e:	2316      	movs	r3, #22
 8011990:	6003      	str	r3, [r0, #0]
 8011992:	2001      	movs	r0, #1
 8011994:	e7e7      	b.n	8011966 <_raise_r+0x12>
 8011996:	2400      	movs	r4, #0
 8011998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801199c:	4628      	mov	r0, r5
 801199e:	4798      	blx	r3
 80119a0:	2000      	movs	r0, #0
 80119a2:	e7e0      	b.n	8011966 <_raise_r+0x12>

080119a4 <raise>:
 80119a4:	4b02      	ldr	r3, [pc, #8]	; (80119b0 <raise+0xc>)
 80119a6:	4601      	mov	r1, r0
 80119a8:	6818      	ldr	r0, [r3, #0]
 80119aa:	f7ff bfd3 	b.w	8011954 <_raise_r>
 80119ae:	bf00      	nop
 80119b0:	200003a8 	.word	0x200003a8

080119b4 <_kill_r>:
 80119b4:	b538      	push	{r3, r4, r5, lr}
 80119b6:	4c07      	ldr	r4, [pc, #28]	; (80119d4 <_kill_r+0x20>)
 80119b8:	2300      	movs	r3, #0
 80119ba:	4605      	mov	r5, r0
 80119bc:	4608      	mov	r0, r1
 80119be:	4611      	mov	r1, r2
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	f003 fe69 	bl	8015698 <_kill>
 80119c6:	1c43      	adds	r3, r0, #1
 80119c8:	d102      	bne.n	80119d0 <_kill_r+0x1c>
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	b103      	cbz	r3, 80119d0 <_kill_r+0x1c>
 80119ce:	602b      	str	r3, [r5, #0]
 80119d0:	bd38      	pop	{r3, r4, r5, pc}
 80119d2:	bf00      	nop
 80119d4:	20011f7c 	.word	0x20011f7c

080119d8 <_getpid_r>:
 80119d8:	f003 be4e 	b.w	8015678 <_getpid>

080119dc <siprintf>:
 80119dc:	b40e      	push	{r1, r2, r3}
 80119de:	b500      	push	{lr}
 80119e0:	b09c      	sub	sp, #112	; 0x70
 80119e2:	ab1d      	add	r3, sp, #116	; 0x74
 80119e4:	9002      	str	r0, [sp, #8]
 80119e6:	9006      	str	r0, [sp, #24]
 80119e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119ec:	4809      	ldr	r0, [pc, #36]	; (8011a14 <siprintf+0x38>)
 80119ee:	9107      	str	r1, [sp, #28]
 80119f0:	9104      	str	r1, [sp, #16]
 80119f2:	4909      	ldr	r1, [pc, #36]	; (8011a18 <siprintf+0x3c>)
 80119f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f8:	9105      	str	r1, [sp, #20]
 80119fa:	6800      	ldr	r0, [r0, #0]
 80119fc:	9301      	str	r3, [sp, #4]
 80119fe:	a902      	add	r1, sp, #8
 8011a00:	f002 ff82 	bl	8014908 <_svfiprintf_r>
 8011a04:	9b02      	ldr	r3, [sp, #8]
 8011a06:	2200      	movs	r2, #0
 8011a08:	701a      	strb	r2, [r3, #0]
 8011a0a:	b01c      	add	sp, #112	; 0x70
 8011a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a10:	b003      	add	sp, #12
 8011a12:	4770      	bx	lr
 8011a14:	200003a8 	.word	0x200003a8
 8011a18:	ffff0208 	.word	0xffff0208

08011a1c <siscanf>:
 8011a1c:	b40e      	push	{r1, r2, r3}
 8011a1e:	b530      	push	{r4, r5, lr}
 8011a20:	b09c      	sub	sp, #112	; 0x70
 8011a22:	ac1f      	add	r4, sp, #124	; 0x7c
 8011a24:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011a28:	f854 5b04 	ldr.w	r5, [r4], #4
 8011a2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011a30:	9002      	str	r0, [sp, #8]
 8011a32:	9006      	str	r0, [sp, #24]
 8011a34:	f7ee fc04 	bl	8000240 <strlen>
 8011a38:	4b0b      	ldr	r3, [pc, #44]	; (8011a68 <siscanf+0x4c>)
 8011a3a:	9003      	str	r0, [sp, #12]
 8011a3c:	9007      	str	r0, [sp, #28]
 8011a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a40:	480a      	ldr	r0, [pc, #40]	; (8011a6c <siscanf+0x50>)
 8011a42:	9401      	str	r4, [sp, #4]
 8011a44:	2300      	movs	r3, #0
 8011a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a48:	9314      	str	r3, [sp, #80]	; 0x50
 8011a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a52:	462a      	mov	r2, r5
 8011a54:	4623      	mov	r3, r4
 8011a56:	a902      	add	r1, sp, #8
 8011a58:	6800      	ldr	r0, [r0, #0]
 8011a5a:	f003 f8a7 	bl	8014bac <__ssvfiscanf_r>
 8011a5e:	b01c      	add	sp, #112	; 0x70
 8011a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a64:	b003      	add	sp, #12
 8011a66:	4770      	bx	lr
 8011a68:	08011a93 	.word	0x08011a93
 8011a6c:	200003a8 	.word	0x200003a8

08011a70 <__sread>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	460c      	mov	r4, r1
 8011a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a78:	f003 fc80 	bl	801537c <_read_r>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	bfab      	itete	ge
 8011a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a82:	89a3      	ldrhlt	r3, [r4, #12]
 8011a84:	181b      	addge	r3, r3, r0
 8011a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a8a:	bfac      	ite	ge
 8011a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a8e:	81a3      	strhlt	r3, [r4, #12]
 8011a90:	bd10      	pop	{r4, pc}

08011a92 <__seofread>:
 8011a92:	2000      	movs	r0, #0
 8011a94:	4770      	bx	lr

08011a96 <__swrite>:
 8011a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9a:	461f      	mov	r7, r3
 8011a9c:	898b      	ldrh	r3, [r1, #12]
 8011a9e:	05db      	lsls	r3, r3, #23
 8011aa0:	4605      	mov	r5, r0
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	d505      	bpl.n	8011ab4 <__swrite+0x1e>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab0:	f002 fa20 	bl	8013ef4 <_lseek_r>
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011abe:	81a3      	strh	r3, [r4, #12]
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	463b      	mov	r3, r7
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aca:	f000 bee9 	b.w	80128a0 <_write_r>

08011ace <__sseek>:
 8011ace:	b510      	push	{r4, lr}
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad6:	f002 fa0d 	bl	8013ef4 <_lseek_r>
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	bf15      	itete	ne
 8011ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aea:	81a3      	strheq	r3, [r4, #12]
 8011aec:	bf18      	it	ne
 8011aee:	81a3      	strhne	r3, [r4, #12]
 8011af0:	bd10      	pop	{r4, pc}

08011af2 <__sclose>:
 8011af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af6:	f000 bf53 	b.w	80129a0 <_close_r>

08011afa <sulp>:
 8011afa:	b570      	push	{r4, r5, r6, lr}
 8011afc:	4604      	mov	r4, r0
 8011afe:	460d      	mov	r5, r1
 8011b00:	4616      	mov	r6, r2
 8011b02:	ec45 4b10 	vmov	d0, r4, r5
 8011b06:	f002 fd4b 	bl	80145a0 <__ulp>
 8011b0a:	b17e      	cbz	r6, 8011b2c <sulp+0x32>
 8011b0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011b10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	dd09      	ble.n	8011b2c <sulp+0x32>
 8011b18:	051b      	lsls	r3, r3, #20
 8011b1a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011b1e:	2000      	movs	r0, #0
 8011b20:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011b24:	ec41 0b17 	vmov	d7, r0, r1
 8011b28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b30 <_strtod_l>:
 8011b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b34:	ed2d 8b0c 	vpush	{d8-d13}
 8011b38:	4698      	mov	r8, r3
 8011b3a:	b09d      	sub	sp, #116	; 0x74
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4640      	mov	r0, r8
 8011b42:	460e      	mov	r6, r1
 8011b44:	9214      	str	r2, [sp, #80]	; 0x50
 8011b46:	9318      	str	r3, [sp, #96]	; 0x60
 8011b48:	f002 f9c4 	bl	8013ed4 <__localeconv_l>
 8011b4c:	4681      	mov	r9, r0
 8011b4e:	6800      	ldr	r0, [r0, #0]
 8011b50:	f7ee fb76 	bl	8000240 <strlen>
 8011b54:	f04f 0a00 	mov.w	sl, #0
 8011b58:	4607      	mov	r7, r0
 8011b5a:	f04f 0b00 	mov.w	fp, #0
 8011b5e:	9617      	str	r6, [sp, #92]	; 0x5c
 8011b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b62:	781a      	ldrb	r2, [r3, #0]
 8011b64:	2a0d      	cmp	r2, #13
 8011b66:	d834      	bhi.n	8011bd2 <_strtod_l+0xa2>
 8011b68:	2a09      	cmp	r2, #9
 8011b6a:	d238      	bcs.n	8011bde <_strtod_l+0xae>
 8011b6c:	2a00      	cmp	r2, #0
 8011b6e:	d040      	beq.n	8011bf2 <_strtod_l+0xc2>
 8011b70:	2300      	movs	r3, #0
 8011b72:	930d      	str	r3, [sp, #52]	; 0x34
 8011b74:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011b76:	782b      	ldrb	r3, [r5, #0]
 8011b78:	2b30      	cmp	r3, #48	; 0x30
 8011b7a:	f040 80b3 	bne.w	8011ce4 <_strtod_l+0x1b4>
 8011b7e:	786b      	ldrb	r3, [r5, #1]
 8011b80:	2b58      	cmp	r3, #88	; 0x58
 8011b82:	d001      	beq.n	8011b88 <_strtod_l+0x58>
 8011b84:	2b78      	cmp	r3, #120	; 0x78
 8011b86:	d169      	bne.n	8011c5c <_strtod_l+0x12c>
 8011b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b8a:	9301      	str	r3, [sp, #4]
 8011b8c:	ab18      	add	r3, sp, #96	; 0x60
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	f8cd 8008 	str.w	r8, [sp, #8]
 8011b94:	ab19      	add	r3, sp, #100	; 0x64
 8011b96:	4a8f      	ldr	r2, [pc, #572]	; (8011dd4 <_strtod_l+0x2a4>)
 8011b98:	a917      	add	r1, sp, #92	; 0x5c
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f001 feb1 	bl	8013902 <__gethex>
 8011ba0:	f010 0607 	ands.w	r6, r0, #7
 8011ba4:	4607      	mov	r7, r0
 8011ba6:	d005      	beq.n	8011bb4 <_strtod_l+0x84>
 8011ba8:	2e06      	cmp	r6, #6
 8011baa:	d12c      	bne.n	8011c06 <_strtod_l+0xd6>
 8011bac:	3501      	adds	r5, #1
 8011bae:	2300      	movs	r3, #0
 8011bb0:	9517      	str	r5, [sp, #92]	; 0x5c
 8011bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8011bb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f040 855e 	bne.w	8012678 <_strtod_l+0xb48>
 8011bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bbe:	b1eb      	cbz	r3, 8011bfc <_strtod_l+0xcc>
 8011bc0:	ec4b ab17 	vmov	d7, sl, fp
 8011bc4:	eeb1 0b47 	vneg.f64	d0, d7
 8011bc8:	b01d      	add	sp, #116	; 0x74
 8011bca:	ecbd 8b0c 	vpop	{d8-d13}
 8011bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd2:	2a2b      	cmp	r2, #43	; 0x2b
 8011bd4:	d015      	beq.n	8011c02 <_strtod_l+0xd2>
 8011bd6:	2a2d      	cmp	r2, #45	; 0x2d
 8011bd8:	d004      	beq.n	8011be4 <_strtod_l+0xb4>
 8011bda:	2a20      	cmp	r2, #32
 8011bdc:	d1c8      	bne.n	8011b70 <_strtod_l+0x40>
 8011bde:	3301      	adds	r3, #1
 8011be0:	9317      	str	r3, [sp, #92]	; 0x5c
 8011be2:	e7bd      	b.n	8011b60 <_strtod_l+0x30>
 8011be4:	2201      	movs	r2, #1
 8011be6:	920d      	str	r2, [sp, #52]	; 0x34
 8011be8:	1c5a      	adds	r2, r3, #1
 8011bea:	9217      	str	r2, [sp, #92]	; 0x5c
 8011bec:	785b      	ldrb	r3, [r3, #1]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1c0      	bne.n	8011b74 <_strtod_l+0x44>
 8011bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bf4:	9617      	str	r6, [sp, #92]	; 0x5c
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f040 853c 	bne.w	8012674 <_strtod_l+0xb44>
 8011bfc:	ec4b ab10 	vmov	d0, sl, fp
 8011c00:	e7e2      	b.n	8011bc8 <_strtod_l+0x98>
 8011c02:	2200      	movs	r2, #0
 8011c04:	e7ef      	b.n	8011be6 <_strtod_l+0xb6>
 8011c06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011c08:	b13a      	cbz	r2, 8011c1a <_strtod_l+0xea>
 8011c0a:	2135      	movs	r1, #53	; 0x35
 8011c0c:	a81a      	add	r0, sp, #104	; 0x68
 8011c0e:	f002 fdc0 	bl	8014792 <__copybits>
 8011c12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011c14:	4620      	mov	r0, r4
 8011c16:	f002 fa2b 	bl	8014070 <_Bfree>
 8011c1a:	3e01      	subs	r6, #1
 8011c1c:	2e04      	cmp	r6, #4
 8011c1e:	d806      	bhi.n	8011c2e <_strtod_l+0xfe>
 8011c20:	e8df f006 	tbb	[pc, r6]
 8011c24:	1714030a 	.word	0x1714030a
 8011c28:	0a          	.byte	0x0a
 8011c29:	00          	.byte	0x00
 8011c2a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011c2e:	073b      	lsls	r3, r7, #28
 8011c30:	d5c0      	bpl.n	8011bb4 <_strtod_l+0x84>
 8011c32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011c36:	e7bd      	b.n	8011bb4 <_strtod_l+0x84>
 8011c38:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011c3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011c42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011c46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011c4a:	e7f0      	b.n	8011c2e <_strtod_l+0xfe>
 8011c4c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011dd8 <_strtod_l+0x2a8>
 8011c50:	e7ed      	b.n	8011c2e <_strtod_l+0xfe>
 8011c52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011c56:	f04f 3aff 	mov.w	sl, #4294967295
 8011c5a:	e7e8      	b.n	8011c2e <_strtod_l+0xfe>
 8011c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c5e:	1c5a      	adds	r2, r3, #1
 8011c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8011c62:	785b      	ldrb	r3, [r3, #1]
 8011c64:	2b30      	cmp	r3, #48	; 0x30
 8011c66:	d0f9      	beq.n	8011c5c <_strtod_l+0x12c>
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d0a3      	beq.n	8011bb4 <_strtod_l+0x84>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8011c70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c72:	930c      	str	r3, [sp, #48]	; 0x30
 8011c74:	2300      	movs	r3, #0
 8011c76:	9306      	str	r3, [sp, #24]
 8011c78:	9308      	str	r3, [sp, #32]
 8011c7a:	461d      	mov	r5, r3
 8011c7c:	220a      	movs	r2, #10
 8011c7e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011c80:	f890 8000 	ldrb.w	r8, [r0]
 8011c84:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011c88:	b2d9      	uxtb	r1, r3
 8011c8a:	2909      	cmp	r1, #9
 8011c8c:	d92c      	bls.n	8011ce8 <_strtod_l+0x1b8>
 8011c8e:	463a      	mov	r2, r7
 8011c90:	f8d9 1000 	ldr.w	r1, [r9]
 8011c94:	f003 fbb6 	bl	8015404 <strncmp>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d035      	beq.n	8011d08 <_strtod_l+0x1d8>
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	4642      	mov	r2, r8
 8011ca0:	462b      	mov	r3, r5
 8011ca2:	4601      	mov	r1, r0
 8011ca4:	9004      	str	r0, [sp, #16]
 8011ca6:	2a65      	cmp	r2, #101	; 0x65
 8011ca8:	d001      	beq.n	8011cae <_strtod_l+0x17e>
 8011caa:	2a45      	cmp	r2, #69	; 0x45
 8011cac:	d117      	bne.n	8011cde <_strtod_l+0x1ae>
 8011cae:	b923      	cbnz	r3, 8011cba <_strtod_l+0x18a>
 8011cb0:	b910      	cbnz	r0, 8011cb8 <_strtod_l+0x188>
 8011cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d09c      	beq.n	8011bf2 <_strtod_l+0xc2>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011cbc:	1c72      	adds	r2, r6, #1
 8011cbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8011cc0:	7872      	ldrb	r2, [r6, #1]
 8011cc2:	2a2b      	cmp	r2, #43	; 0x2b
 8011cc4:	f000 8082 	beq.w	8011dcc <_strtod_l+0x29c>
 8011cc8:	2a2d      	cmp	r2, #45	; 0x2d
 8011cca:	d079      	beq.n	8011dc0 <_strtod_l+0x290>
 8011ccc:	f04f 0e00 	mov.w	lr, #0
 8011cd0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011cd4:	f1bc 0f09 	cmp.w	ip, #9
 8011cd8:	f240 8086 	bls.w	8011de8 <_strtod_l+0x2b8>
 8011cdc:	9617      	str	r6, [sp, #92]	; 0x5c
 8011cde:	f04f 0800 	mov.w	r8, #0
 8011ce2:	e0a8      	b.n	8011e36 <_strtod_l+0x306>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	e7c2      	b.n	8011c6e <_strtod_l+0x13e>
 8011ce8:	2d08      	cmp	r5, #8
 8011cea:	bfd5      	itete	le
 8011cec:	9908      	ldrle	r1, [sp, #32]
 8011cee:	9906      	ldrgt	r1, [sp, #24]
 8011cf0:	fb02 3301 	mlale	r3, r2, r1, r3
 8011cf4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011cf8:	f100 0001 	add.w	r0, r0, #1
 8011cfc:	bfd4      	ite	le
 8011cfe:	9308      	strle	r3, [sp, #32]
 8011d00:	9306      	strgt	r3, [sp, #24]
 8011d02:	3501      	adds	r5, #1
 8011d04:	9017      	str	r0, [sp, #92]	; 0x5c
 8011d06:	e7ba      	b.n	8011c7e <_strtod_l+0x14e>
 8011d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d0a:	19da      	adds	r2, r3, r7
 8011d0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d0e:	5dda      	ldrb	r2, [r3, r7]
 8011d10:	2d00      	cmp	r5, #0
 8011d12:	d038      	beq.n	8011d86 <_strtod_l+0x256>
 8011d14:	4601      	mov	r1, r0
 8011d16:	462b      	mov	r3, r5
 8011d18:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8011d1c:	2f09      	cmp	r7, #9
 8011d1e:	d913      	bls.n	8011d48 <_strtod_l+0x218>
 8011d20:	2701      	movs	r7, #1
 8011d22:	9704      	str	r7, [sp, #16]
 8011d24:	e7bf      	b.n	8011ca6 <_strtod_l+0x176>
 8011d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d2c:	785a      	ldrb	r2, [r3, #1]
 8011d2e:	3001      	adds	r0, #1
 8011d30:	2a30      	cmp	r2, #48	; 0x30
 8011d32:	d0f8      	beq.n	8011d26 <_strtod_l+0x1f6>
 8011d34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011d38:	2b08      	cmp	r3, #8
 8011d3a:	f200 84a2 	bhi.w	8012682 <_strtod_l+0xb52>
 8011d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d40:	930c      	str	r3, [sp, #48]	; 0x30
 8011d42:	4601      	mov	r1, r0
 8011d44:	2000      	movs	r0, #0
 8011d46:	4603      	mov	r3, r0
 8011d48:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8011d4c:	f100 0701 	add.w	r7, r0, #1
 8011d50:	d013      	beq.n	8011d7a <_strtod_l+0x24a>
 8011d52:	4439      	add	r1, r7
 8011d54:	eb00 0e03 	add.w	lr, r0, r3
 8011d58:	461f      	mov	r7, r3
 8011d5a:	f04f 0c0a 	mov.w	ip, #10
 8011d5e:	45be      	cmp	lr, r7
 8011d60:	d113      	bne.n	8011d8a <_strtod_l+0x25a>
 8011d62:	181f      	adds	r7, r3, r0
 8011d64:	2f08      	cmp	r7, #8
 8011d66:	f103 0301 	add.w	r3, r3, #1
 8011d6a:	4403      	add	r3, r0
 8011d6c:	dc1d      	bgt.n	8011daa <_strtod_l+0x27a>
 8011d6e:	9a08      	ldr	r2, [sp, #32]
 8011d70:	200a      	movs	r0, #10
 8011d72:	fb00 8202 	mla	r2, r0, r2, r8
 8011d76:	9208      	str	r2, [sp, #32]
 8011d78:	2700      	movs	r7, #0
 8011d7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011d7c:	1c50      	adds	r0, r2, #1
 8011d7e:	9017      	str	r0, [sp, #92]	; 0x5c
 8011d80:	7852      	ldrb	r2, [r2, #1]
 8011d82:	4638      	mov	r0, r7
 8011d84:	e7c8      	b.n	8011d18 <_strtod_l+0x1e8>
 8011d86:	4628      	mov	r0, r5
 8011d88:	e7d2      	b.n	8011d30 <_strtod_l+0x200>
 8011d8a:	2f08      	cmp	r7, #8
 8011d8c:	f107 0701 	add.w	r7, r7, #1
 8011d90:	dc04      	bgt.n	8011d9c <_strtod_l+0x26c>
 8011d92:	9a08      	ldr	r2, [sp, #32]
 8011d94:	fb0c f202 	mul.w	r2, ip, r2
 8011d98:	9208      	str	r2, [sp, #32]
 8011d9a:	e7e0      	b.n	8011d5e <_strtod_l+0x22e>
 8011d9c:	2f10      	cmp	r7, #16
 8011d9e:	bfde      	ittt	le
 8011da0:	9a06      	ldrle	r2, [sp, #24]
 8011da2:	fb0c f202 	mulle.w	r2, ip, r2
 8011da6:	9206      	strle	r2, [sp, #24]
 8011da8:	e7d9      	b.n	8011d5e <_strtod_l+0x22e>
 8011daa:	2b10      	cmp	r3, #16
 8011dac:	bfdf      	itttt	le
 8011dae:	9a06      	ldrle	r2, [sp, #24]
 8011db0:	200a      	movle	r0, #10
 8011db2:	fb00 8202 	mlale	r2, r0, r2, r8
 8011db6:	9206      	strle	r2, [sp, #24]
 8011db8:	e7de      	b.n	8011d78 <_strtod_l+0x248>
 8011dba:	2301      	movs	r3, #1
 8011dbc:	9304      	str	r3, [sp, #16]
 8011dbe:	e777      	b.n	8011cb0 <_strtod_l+0x180>
 8011dc0:	f04f 0e01 	mov.w	lr, #1
 8011dc4:	1cb2      	adds	r2, r6, #2
 8011dc6:	9217      	str	r2, [sp, #92]	; 0x5c
 8011dc8:	78b2      	ldrb	r2, [r6, #2]
 8011dca:	e781      	b.n	8011cd0 <_strtod_l+0x1a0>
 8011dcc:	f04f 0e00 	mov.w	lr, #0
 8011dd0:	e7f8      	b.n	8011dc4 <_strtod_l+0x294>
 8011dd2:	bf00      	nop
 8011dd4:	08015da4 	.word	0x08015da4
 8011dd8:	7ff00000 	.word	0x7ff00000
 8011ddc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011dde:	f102 0c01 	add.w	ip, r2, #1
 8011de2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011de6:	7852      	ldrb	r2, [r2, #1]
 8011de8:	2a30      	cmp	r2, #48	; 0x30
 8011dea:	d0f7      	beq.n	8011ddc <_strtod_l+0x2ac>
 8011dec:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011df0:	f1bc 0f08 	cmp.w	ip, #8
 8011df4:	f63f af73 	bhi.w	8011cde <_strtod_l+0x1ae>
 8011df8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8011dfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011dfe:	920e      	str	r2, [sp, #56]	; 0x38
 8011e00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e02:	f102 0c01 	add.w	ip, r2, #1
 8011e06:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011e0a:	7852      	ldrb	r2, [r2, #1]
 8011e0c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011e10:	f1b9 0f09 	cmp.w	r9, #9
 8011e14:	d939      	bls.n	8011e8a <_strtod_l+0x35a>
 8011e16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011e18:	ebac 0c07 	sub.w	ip, ip, r7
 8011e1c:	f1bc 0f08 	cmp.w	ip, #8
 8011e20:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011e24:	dc37      	bgt.n	8011e96 <_strtod_l+0x366>
 8011e26:	45e0      	cmp	r8, ip
 8011e28:	bfa8      	it	ge
 8011e2a:	46e0      	movge	r8, ip
 8011e2c:	f1be 0f00 	cmp.w	lr, #0
 8011e30:	d001      	beq.n	8011e36 <_strtod_l+0x306>
 8011e32:	f1c8 0800 	rsb	r8, r8, #0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d151      	bne.n	8011ede <_strtod_l+0x3ae>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	f47f aeba 	bne.w	8011bb4 <_strtod_l+0x84>
 8011e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f47f aeb6 	bne.w	8011bb4 <_strtod_l+0x84>
 8011e48:	9b04      	ldr	r3, [sp, #16]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f47f aed1 	bne.w	8011bf2 <_strtod_l+0xc2>
 8011e50:	2a4e      	cmp	r2, #78	; 0x4e
 8011e52:	d027      	beq.n	8011ea4 <_strtod_l+0x374>
 8011e54:	dc21      	bgt.n	8011e9a <_strtod_l+0x36a>
 8011e56:	2a49      	cmp	r2, #73	; 0x49
 8011e58:	f47f aecb 	bne.w	8011bf2 <_strtod_l+0xc2>
 8011e5c:	499a      	ldr	r1, [pc, #616]	; (80120c8 <_strtod_l+0x598>)
 8011e5e:	a817      	add	r0, sp, #92	; 0x5c
 8011e60:	f001 ff82 	bl	8013d68 <__match>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	f43f aec4 	beq.w	8011bf2 <_strtod_l+0xc2>
 8011e6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e6c:	4997      	ldr	r1, [pc, #604]	; (80120cc <_strtod_l+0x59c>)
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	a817      	add	r0, sp, #92	; 0x5c
 8011e72:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e74:	f001 ff78 	bl	8013d68 <__match>
 8011e78:	b910      	cbnz	r0, 8011e80 <_strtod_l+0x350>
 8011e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e80:	f8df b260 	ldr.w	fp, [pc, #608]	; 80120e4 <_strtod_l+0x5b4>
 8011e84:	f04f 0a00 	mov.w	sl, #0
 8011e88:	e694      	b.n	8011bb4 <_strtod_l+0x84>
 8011e8a:	270a      	movs	r7, #10
 8011e8c:	fb07 2808 	mla	r8, r7, r8, r2
 8011e90:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011e94:	e7b4      	b.n	8011e00 <_strtod_l+0x2d0>
 8011e96:	46e0      	mov	r8, ip
 8011e98:	e7c8      	b.n	8011e2c <_strtod_l+0x2fc>
 8011e9a:	2a69      	cmp	r2, #105	; 0x69
 8011e9c:	d0de      	beq.n	8011e5c <_strtod_l+0x32c>
 8011e9e:	2a6e      	cmp	r2, #110	; 0x6e
 8011ea0:	f47f aea7 	bne.w	8011bf2 <_strtod_l+0xc2>
 8011ea4:	498a      	ldr	r1, [pc, #552]	; (80120d0 <_strtod_l+0x5a0>)
 8011ea6:	a817      	add	r0, sp, #92	; 0x5c
 8011ea8:	f001 ff5e 	bl	8013d68 <__match>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	f43f aea0 	beq.w	8011bf2 <_strtod_l+0xc2>
 8011eb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	2b28      	cmp	r3, #40	; 0x28
 8011eb8:	d10e      	bne.n	8011ed8 <_strtod_l+0x3a8>
 8011eba:	aa1a      	add	r2, sp, #104	; 0x68
 8011ebc:	4985      	ldr	r1, [pc, #532]	; (80120d4 <_strtod_l+0x5a4>)
 8011ebe:	a817      	add	r0, sp, #92	; 0x5c
 8011ec0:	f001 ff66 	bl	8013d90 <__hexnan>
 8011ec4:	2805      	cmp	r0, #5
 8011ec6:	d107      	bne.n	8011ed8 <_strtod_l+0x3a8>
 8011ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011eca:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011ece:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011ed2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011ed6:	e66d      	b.n	8011bb4 <_strtod_l+0x84>
 8011ed8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80120e8 <_strtod_l+0x5b8>
 8011edc:	e7d2      	b.n	8011e84 <_strtod_l+0x354>
 8011ede:	eddd 7a08 	vldr	s15, [sp, #32]
 8011ee2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ee6:	eba8 0201 	sub.w	r2, r8, r1
 8011eea:	2d00      	cmp	r5, #0
 8011eec:	bf08      	it	eq
 8011eee:	461d      	moveq	r5, r3
 8011ef0:	2b10      	cmp	r3, #16
 8011ef2:	9204      	str	r2, [sp, #16]
 8011ef4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011ef8:	461a      	mov	r2, r3
 8011efa:	bfa8      	it	ge
 8011efc:	2210      	movge	r2, #16
 8011efe:	2b09      	cmp	r3, #9
 8011f00:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011f04:	dc14      	bgt.n	8011f30 <_strtod_l+0x400>
 8011f06:	9904      	ldr	r1, [sp, #16]
 8011f08:	2900      	cmp	r1, #0
 8011f0a:	f43f ae53 	beq.w	8011bb4 <_strtod_l+0x84>
 8011f0e:	9904      	ldr	r1, [sp, #16]
 8011f10:	dd72      	ble.n	8011ff8 <_strtod_l+0x4c8>
 8011f12:	2916      	cmp	r1, #22
 8011f14:	dc5a      	bgt.n	8011fcc <_strtod_l+0x49c>
 8011f16:	4970      	ldr	r1, [pc, #448]	; (80120d8 <_strtod_l+0x5a8>)
 8011f18:	9b04      	ldr	r3, [sp, #16]
 8011f1a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f1e:	ed91 7b00 	vldr	d7, [r1]
 8011f22:	ec4b ab16 	vmov	d6, sl, fp
 8011f26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f2a:	ec5b ab17 	vmov	sl, fp, d7
 8011f2e:	e641      	b.n	8011bb4 <_strtod_l+0x84>
 8011f30:	4969      	ldr	r1, [pc, #420]	; (80120d8 <_strtod_l+0x5a8>)
 8011f32:	eddd 7a06 	vldr	s15, [sp, #24]
 8011f36:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011f3a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011f3e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011f42:	2b0f      	cmp	r3, #15
 8011f44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011f48:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011f4c:	ec5b ab17 	vmov	sl, fp, d7
 8011f50:	ddd9      	ble.n	8011f06 <_strtod_l+0x3d6>
 8011f52:	9904      	ldr	r1, [sp, #16]
 8011f54:	1a9a      	subs	r2, r3, r2
 8011f56:	440a      	add	r2, r1
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	f340 8096 	ble.w	801208a <_strtod_l+0x55a>
 8011f5e:	f012 000f 	ands.w	r0, r2, #15
 8011f62:	d00a      	beq.n	8011f7a <_strtod_l+0x44a>
 8011f64:	495c      	ldr	r1, [pc, #368]	; (80120d8 <_strtod_l+0x5a8>)
 8011f66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011f6a:	ed91 7b00 	vldr	d7, [r1]
 8011f6e:	ec4b ab16 	vmov	d6, sl, fp
 8011f72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f76:	ec5b ab17 	vmov	sl, fp, d7
 8011f7a:	f032 020f 	bics.w	r2, r2, #15
 8011f7e:	d072      	beq.n	8012066 <_strtod_l+0x536>
 8011f80:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011f84:	dd45      	ble.n	8012012 <_strtod_l+0x4e2>
 8011f86:	2500      	movs	r5, #0
 8011f88:	46a8      	mov	r8, r5
 8011f8a:	9506      	str	r5, [sp, #24]
 8011f8c:	46a9      	mov	r9, r5
 8011f8e:	2322      	movs	r3, #34	; 0x22
 8011f90:	f8df b150 	ldr.w	fp, [pc, #336]	; 80120e4 <_strtod_l+0x5b4>
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	f04f 0a00 	mov.w	sl, #0
 8011f9a:	9b06      	ldr	r3, [sp, #24]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f43f ae09 	beq.w	8011bb4 <_strtod_l+0x84>
 8011fa2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	f002 f863 	bl	8014070 <_Bfree>
 8011faa:	4649      	mov	r1, r9
 8011fac:	4620      	mov	r0, r4
 8011fae:	f002 f85f 	bl	8014070 <_Bfree>
 8011fb2:	4641      	mov	r1, r8
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f002 f85b 	bl	8014070 <_Bfree>
 8011fba:	9906      	ldr	r1, [sp, #24]
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f002 f857 	bl	8014070 <_Bfree>
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f002 f853 	bl	8014070 <_Bfree>
 8011fca:	e5f3      	b.n	8011bb4 <_strtod_l+0x84>
 8011fcc:	9804      	ldr	r0, [sp, #16]
 8011fce:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011fd2:	4281      	cmp	r1, r0
 8011fd4:	dbbd      	blt.n	8011f52 <_strtod_l+0x422>
 8011fd6:	4a40      	ldr	r2, [pc, #256]	; (80120d8 <_strtod_l+0x5a8>)
 8011fd8:	f1c3 030f 	rsb	r3, r3, #15
 8011fdc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011fe0:	ed91 7b00 	vldr	d7, [r1]
 8011fe4:	ec4b ab16 	vmov	d6, sl, fp
 8011fe8:	1ac3      	subs	r3, r0, r3
 8011fea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011fee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ff2:	ed92 6b00 	vldr	d6, [r2]
 8011ff6:	e796      	b.n	8011f26 <_strtod_l+0x3f6>
 8011ff8:	3116      	adds	r1, #22
 8011ffa:	dbaa      	blt.n	8011f52 <_strtod_l+0x422>
 8011ffc:	4936      	ldr	r1, [pc, #216]	; (80120d8 <_strtod_l+0x5a8>)
 8011ffe:	9b04      	ldr	r3, [sp, #16]
 8012000:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8012004:	ed91 7b00 	vldr	d7, [r1]
 8012008:	ec4b ab16 	vmov	d6, sl, fp
 801200c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012010:	e78b      	b.n	8011f2a <_strtod_l+0x3fa>
 8012012:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012016:	2000      	movs	r0, #0
 8012018:	4e30      	ldr	r6, [pc, #192]	; (80120dc <_strtod_l+0x5ac>)
 801201a:	1112      	asrs	r2, r2, #4
 801201c:	4601      	mov	r1, r0
 801201e:	2a01      	cmp	r2, #1
 8012020:	dc23      	bgt.n	801206a <_strtod_l+0x53a>
 8012022:	b108      	cbz	r0, 8012028 <_strtod_l+0x4f8>
 8012024:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012028:	4a2c      	ldr	r2, [pc, #176]	; (80120dc <_strtod_l+0x5ac>)
 801202a:	482d      	ldr	r0, [pc, #180]	; (80120e0 <_strtod_l+0x5b0>)
 801202c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8012030:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012034:	ed91 7b00 	vldr	d7, [r1]
 8012038:	ec4b ab16 	vmov	d6, sl, fp
 801203c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012040:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012044:	9907      	ldr	r1, [sp, #28]
 8012046:	4a27      	ldr	r2, [pc, #156]	; (80120e4 <_strtod_l+0x5b4>)
 8012048:	400a      	ands	r2, r1
 801204a:	4282      	cmp	r2, r0
 801204c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012050:	d899      	bhi.n	8011f86 <_strtod_l+0x456>
 8012052:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012056:	4282      	cmp	r2, r0
 8012058:	bf86      	itte	hi
 801205a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80120ec <_strtod_l+0x5bc>
 801205e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012062:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8012066:	2700      	movs	r7, #0
 8012068:	e070      	b.n	801214c <_strtod_l+0x61c>
 801206a:	07d7      	lsls	r7, r2, #31
 801206c:	d50a      	bpl.n	8012084 <_strtod_l+0x554>
 801206e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8012072:	ed90 7b00 	vldr	d7, [r0]
 8012076:	ed9d 6b06 	vldr	d6, [sp, #24]
 801207a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801207e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012082:	2001      	movs	r0, #1
 8012084:	3101      	adds	r1, #1
 8012086:	1052      	asrs	r2, r2, #1
 8012088:	e7c9      	b.n	801201e <_strtod_l+0x4ee>
 801208a:	d0ec      	beq.n	8012066 <_strtod_l+0x536>
 801208c:	4252      	negs	r2, r2
 801208e:	f012 000f 	ands.w	r0, r2, #15
 8012092:	d00a      	beq.n	80120aa <_strtod_l+0x57a>
 8012094:	4910      	ldr	r1, [pc, #64]	; (80120d8 <_strtod_l+0x5a8>)
 8012096:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801209a:	ed91 7b00 	vldr	d7, [r1]
 801209e:	ec4b ab16 	vmov	d6, sl, fp
 80120a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80120a6:	ec5b ab17 	vmov	sl, fp, d7
 80120aa:	1112      	asrs	r2, r2, #4
 80120ac:	d0db      	beq.n	8012066 <_strtod_l+0x536>
 80120ae:	2a1f      	cmp	r2, #31
 80120b0:	dd1e      	ble.n	80120f0 <_strtod_l+0x5c0>
 80120b2:	2500      	movs	r5, #0
 80120b4:	46a8      	mov	r8, r5
 80120b6:	9506      	str	r5, [sp, #24]
 80120b8:	46a9      	mov	r9, r5
 80120ba:	2322      	movs	r3, #34	; 0x22
 80120bc:	f04f 0a00 	mov.w	sl, #0
 80120c0:	f04f 0b00 	mov.w	fp, #0
 80120c4:	6023      	str	r3, [r4, #0]
 80120c6:	e768      	b.n	8011f9a <_strtod_l+0x46a>
 80120c8:	08015d71 	.word	0x08015d71
 80120cc:	08015dfb 	.word	0x08015dfb
 80120d0:	08015d79 	.word	0x08015d79
 80120d4:	08015db8 	.word	0x08015db8
 80120d8:	08015ea0 	.word	0x08015ea0
 80120dc:	08015e78 	.word	0x08015e78
 80120e0:	7ca00000 	.word	0x7ca00000
 80120e4:	7ff00000 	.word	0x7ff00000
 80120e8:	fff80000 	.word	0xfff80000
 80120ec:	7fefffff 	.word	0x7fefffff
 80120f0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80120f4:	f012 0710 	ands.w	r7, r2, #16
 80120f8:	49ab      	ldr	r1, [pc, #684]	; (80123a8 <_strtod_l+0x878>)
 80120fa:	bf18      	it	ne
 80120fc:	276a      	movne	r7, #106	; 0x6a
 80120fe:	2000      	movs	r0, #0
 8012100:	2a00      	cmp	r2, #0
 8012102:	f300 8113 	bgt.w	801232c <_strtod_l+0x7fc>
 8012106:	b108      	cbz	r0, 801210c <_strtod_l+0x5dc>
 8012108:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801210c:	b1bf      	cbz	r7, 801213e <_strtod_l+0x60e>
 801210e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012112:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8012116:	2a00      	cmp	r2, #0
 8012118:	4659      	mov	r1, fp
 801211a:	dd10      	ble.n	801213e <_strtod_l+0x60e>
 801211c:	2a1f      	cmp	r2, #31
 801211e:	f340 8113 	ble.w	8012348 <_strtod_l+0x818>
 8012122:	2a34      	cmp	r2, #52	; 0x34
 8012124:	bfde      	ittt	le
 8012126:	3a20      	suble	r2, #32
 8012128:	f04f 30ff 	movle.w	r0, #4294967295
 801212c:	fa00 f202 	lslle.w	r2, r0, r2
 8012130:	f04f 0a00 	mov.w	sl, #0
 8012134:	bfcc      	ite	gt
 8012136:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801213a:	ea02 0b01 	andle.w	fp, r2, r1
 801213e:	ec4b ab17 	vmov	d7, sl, fp
 8012142:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214a:	d0b2      	beq.n	80120b2 <_strtod_l+0x582>
 801214c:	9a08      	ldr	r2, [sp, #32]
 801214e:	9200      	str	r2, [sp, #0]
 8012150:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012152:	462a      	mov	r2, r5
 8012154:	4620      	mov	r0, r4
 8012156:	f001 ffdd 	bl	8014114 <__s2b>
 801215a:	9006      	str	r0, [sp, #24]
 801215c:	2800      	cmp	r0, #0
 801215e:	f43f af12 	beq.w	8011f86 <_strtod_l+0x456>
 8012162:	9a04      	ldr	r2, [sp, #16]
 8012164:	9b04      	ldr	r3, [sp, #16]
 8012166:	2a00      	cmp	r2, #0
 8012168:	f1c3 0300 	rsb	r3, r3, #0
 801216c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8012390 <_strtod_l+0x860>
 8012170:	bfa8      	it	ge
 8012172:	2300      	movge	r3, #0
 8012174:	ed9f ab88 	vldr	d10, [pc, #544]	; 8012398 <_strtod_l+0x868>
 8012178:	ed9f bb89 	vldr	d11, [pc, #548]	; 80123a0 <_strtod_l+0x870>
 801217c:	930e      	str	r3, [sp, #56]	; 0x38
 801217e:	2500      	movs	r5, #0
 8012180:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012184:	9310      	str	r3, [sp, #64]	; 0x40
 8012186:	46a8      	mov	r8, r5
 8012188:	9b06      	ldr	r3, [sp, #24]
 801218a:	4620      	mov	r0, r4
 801218c:	6859      	ldr	r1, [r3, #4]
 801218e:	f001 ff3b 	bl	8014008 <_Balloc>
 8012192:	4681      	mov	r9, r0
 8012194:	2800      	cmp	r0, #0
 8012196:	f43f aefa 	beq.w	8011f8e <_strtod_l+0x45e>
 801219a:	9b06      	ldr	r3, [sp, #24]
 801219c:	691a      	ldr	r2, [r3, #16]
 801219e:	3202      	adds	r2, #2
 80121a0:	f103 010c 	add.w	r1, r3, #12
 80121a4:	0092      	lsls	r2, r2, #2
 80121a6:	300c      	adds	r0, #12
 80121a8:	f7fe fc5c 	bl	8010a64 <memcpy>
 80121ac:	aa1a      	add	r2, sp, #104	; 0x68
 80121ae:	a919      	add	r1, sp, #100	; 0x64
 80121b0:	ec4b ab10 	vmov	d0, sl, fp
 80121b4:	4620      	mov	r0, r4
 80121b6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80121ba:	f002 fa67 	bl	801468c <__d2b>
 80121be:	9018      	str	r0, [sp, #96]	; 0x60
 80121c0:	2800      	cmp	r0, #0
 80121c2:	f43f aee4 	beq.w	8011f8e <_strtod_l+0x45e>
 80121c6:	2101      	movs	r1, #1
 80121c8:	4620      	mov	r0, r4
 80121ca:	f002 f82f 	bl	801422c <__i2b>
 80121ce:	4680      	mov	r8, r0
 80121d0:	2800      	cmp	r0, #0
 80121d2:	f43f aedc 	beq.w	8011f8e <_strtod_l+0x45e>
 80121d6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80121d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80121da:	2e00      	cmp	r6, #0
 80121dc:	bfb1      	iteee	lt
 80121de:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80121e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80121e2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80121e4:	18f3      	addge	r3, r6, r3
 80121e6:	bfba      	itte	lt
 80121e8:	1b98      	sublt	r0, r3, r6
 80121ea:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80121ec:	9308      	strge	r3, [sp, #32]
 80121ee:	eba6 0607 	sub.w	r6, r6, r7
 80121f2:	bfb8      	it	lt
 80121f4:	9308      	strlt	r3, [sp, #32]
 80121f6:	4416      	add	r6, r2
 80121f8:	4b6c      	ldr	r3, [pc, #432]	; (80123ac <_strtod_l+0x87c>)
 80121fa:	3e01      	subs	r6, #1
 80121fc:	429e      	cmp	r6, r3
 80121fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012202:	f280 80b4 	bge.w	801236e <_strtod_l+0x83e>
 8012206:	1b9b      	subs	r3, r3, r6
 8012208:	2b1f      	cmp	r3, #31
 801220a:	eba2 0203 	sub.w	r2, r2, r3
 801220e:	f04f 0101 	mov.w	r1, #1
 8012212:	f300 80a0 	bgt.w	8012356 <_strtod_l+0x826>
 8012216:	fa01 f303 	lsl.w	r3, r1, r3
 801221a:	9311      	str	r3, [sp, #68]	; 0x44
 801221c:	2300      	movs	r3, #0
 801221e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012220:	9b08      	ldr	r3, [sp, #32]
 8012222:	4413      	add	r3, r2
 8012224:	4402      	add	r2, r0
 8012226:	18be      	adds	r6, r7, r2
 8012228:	9a08      	ldr	r2, [sp, #32]
 801222a:	429a      	cmp	r2, r3
 801222c:	bfa8      	it	ge
 801222e:	461a      	movge	r2, r3
 8012230:	42b2      	cmp	r2, r6
 8012232:	bfa8      	it	ge
 8012234:	4632      	movge	r2, r6
 8012236:	2a00      	cmp	r2, #0
 8012238:	dd04      	ble.n	8012244 <_strtod_l+0x714>
 801223a:	9908      	ldr	r1, [sp, #32]
 801223c:	1a9b      	subs	r3, r3, r2
 801223e:	1ab6      	subs	r6, r6, r2
 8012240:	1a8a      	subs	r2, r1, r2
 8012242:	9208      	str	r2, [sp, #32]
 8012244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012246:	b1c2      	cbz	r2, 801227a <_strtod_l+0x74a>
 8012248:	4641      	mov	r1, r8
 801224a:	4620      	mov	r0, r4
 801224c:	9315      	str	r3, [sp, #84]	; 0x54
 801224e:	f002 f88d 	bl	801436c <__pow5mult>
 8012252:	4680      	mov	r8, r0
 8012254:	2800      	cmp	r0, #0
 8012256:	f43f ae9a 	beq.w	8011f8e <_strtod_l+0x45e>
 801225a:	4601      	mov	r1, r0
 801225c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801225e:	4620      	mov	r0, r4
 8012260:	f001 ffed 	bl	801423e <__multiply>
 8012264:	900c      	str	r0, [sp, #48]	; 0x30
 8012266:	2800      	cmp	r0, #0
 8012268:	f43f ae91 	beq.w	8011f8e <_strtod_l+0x45e>
 801226c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801226e:	4620      	mov	r0, r4
 8012270:	f001 fefe 	bl	8014070 <_Bfree>
 8012274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012278:	9218      	str	r2, [sp, #96]	; 0x60
 801227a:	2b00      	cmp	r3, #0
 801227c:	dc7c      	bgt.n	8012378 <_strtod_l+0x848>
 801227e:	9b04      	ldr	r3, [sp, #16]
 8012280:	2b00      	cmp	r3, #0
 8012282:	dd08      	ble.n	8012296 <_strtod_l+0x766>
 8012284:	4649      	mov	r1, r9
 8012286:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012288:	4620      	mov	r0, r4
 801228a:	f002 f86f 	bl	801436c <__pow5mult>
 801228e:	4681      	mov	r9, r0
 8012290:	2800      	cmp	r0, #0
 8012292:	f43f ae7c 	beq.w	8011f8e <_strtod_l+0x45e>
 8012296:	2e00      	cmp	r6, #0
 8012298:	dd08      	ble.n	80122ac <_strtod_l+0x77c>
 801229a:	4649      	mov	r1, r9
 801229c:	4632      	mov	r2, r6
 801229e:	4620      	mov	r0, r4
 80122a0:	f002 f8b2 	bl	8014408 <__lshift>
 80122a4:	4681      	mov	r9, r0
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f43f ae71 	beq.w	8011f8e <_strtod_l+0x45e>
 80122ac:	9b08      	ldr	r3, [sp, #32]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	dd08      	ble.n	80122c4 <_strtod_l+0x794>
 80122b2:	4641      	mov	r1, r8
 80122b4:	461a      	mov	r2, r3
 80122b6:	4620      	mov	r0, r4
 80122b8:	f002 f8a6 	bl	8014408 <__lshift>
 80122bc:	4680      	mov	r8, r0
 80122be:	2800      	cmp	r0, #0
 80122c0:	f43f ae65 	beq.w	8011f8e <_strtod_l+0x45e>
 80122c4:	464a      	mov	r2, r9
 80122c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80122c8:	4620      	mov	r0, r4
 80122ca:	f002 f90b 	bl	80144e4 <__mdiff>
 80122ce:	4605      	mov	r5, r0
 80122d0:	2800      	cmp	r0, #0
 80122d2:	f43f ae5c 	beq.w	8011f8e <_strtod_l+0x45e>
 80122d6:	68c3      	ldr	r3, [r0, #12]
 80122d8:	930c      	str	r3, [sp, #48]	; 0x30
 80122da:	2300      	movs	r3, #0
 80122dc:	60c3      	str	r3, [r0, #12]
 80122de:	4641      	mov	r1, r8
 80122e0:	f002 f8e6 	bl	80144b0 <__mcmp>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	da63      	bge.n	80123b0 <_strtod_l+0x880>
 80122e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122ea:	b9e3      	cbnz	r3, 8012326 <_strtod_l+0x7f6>
 80122ec:	f1ba 0f00 	cmp.w	sl, #0
 80122f0:	d119      	bne.n	8012326 <_strtod_l+0x7f6>
 80122f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122f6:	b9b3      	cbnz	r3, 8012326 <_strtod_l+0x7f6>
 80122f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122fc:	0d1b      	lsrs	r3, r3, #20
 80122fe:	051b      	lsls	r3, r3, #20
 8012300:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012304:	d90f      	bls.n	8012326 <_strtod_l+0x7f6>
 8012306:	696b      	ldr	r3, [r5, #20]
 8012308:	b913      	cbnz	r3, 8012310 <_strtod_l+0x7e0>
 801230a:	692b      	ldr	r3, [r5, #16]
 801230c:	2b01      	cmp	r3, #1
 801230e:	dd0a      	ble.n	8012326 <_strtod_l+0x7f6>
 8012310:	4629      	mov	r1, r5
 8012312:	2201      	movs	r2, #1
 8012314:	4620      	mov	r0, r4
 8012316:	f002 f877 	bl	8014408 <__lshift>
 801231a:	4641      	mov	r1, r8
 801231c:	4605      	mov	r5, r0
 801231e:	f002 f8c7 	bl	80144b0 <__mcmp>
 8012322:	2800      	cmp	r0, #0
 8012324:	dc75      	bgt.n	8012412 <_strtod_l+0x8e2>
 8012326:	2f00      	cmp	r7, #0
 8012328:	d17f      	bne.n	801242a <_strtod_l+0x8fa>
 801232a:	e63a      	b.n	8011fa2 <_strtod_l+0x472>
 801232c:	07d6      	lsls	r6, r2, #31
 801232e:	d508      	bpl.n	8012342 <_strtod_l+0x812>
 8012330:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012334:	ed91 7b00 	vldr	d7, [r1]
 8012338:	ee26 7b07 	vmul.f64	d7, d6, d7
 801233c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012340:	2001      	movs	r0, #1
 8012342:	1052      	asrs	r2, r2, #1
 8012344:	3108      	adds	r1, #8
 8012346:	e6db      	b.n	8012100 <_strtod_l+0x5d0>
 8012348:	f04f 31ff 	mov.w	r1, #4294967295
 801234c:	fa01 f202 	lsl.w	r2, r1, r2
 8012350:	ea02 0a0a 	and.w	sl, r2, sl
 8012354:	e6f3      	b.n	801213e <_strtod_l+0x60e>
 8012356:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801235a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801235e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012362:	36e2      	adds	r6, #226	; 0xe2
 8012364:	fa01 f306 	lsl.w	r3, r1, r6
 8012368:	930f      	str	r3, [sp, #60]	; 0x3c
 801236a:	9111      	str	r1, [sp, #68]	; 0x44
 801236c:	e758      	b.n	8012220 <_strtod_l+0x6f0>
 801236e:	2300      	movs	r3, #0
 8012370:	930f      	str	r3, [sp, #60]	; 0x3c
 8012372:	2301      	movs	r3, #1
 8012374:	9311      	str	r3, [sp, #68]	; 0x44
 8012376:	e753      	b.n	8012220 <_strtod_l+0x6f0>
 8012378:	461a      	mov	r2, r3
 801237a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801237c:	4620      	mov	r0, r4
 801237e:	f002 f843 	bl	8014408 <__lshift>
 8012382:	9018      	str	r0, [sp, #96]	; 0x60
 8012384:	2800      	cmp	r0, #0
 8012386:	f47f af7a 	bne.w	801227e <_strtod_l+0x74e>
 801238a:	e600      	b.n	8011f8e <_strtod_l+0x45e>
 801238c:	f3af 8000 	nop.w
 8012390:	94a03595 	.word	0x94a03595
 8012394:	3fdfffff 	.word	0x3fdfffff
 8012398:	35afe535 	.word	0x35afe535
 801239c:	3fe00000 	.word	0x3fe00000
 80123a0:	94a03595 	.word	0x94a03595
 80123a4:	3fcfffff 	.word	0x3fcfffff
 80123a8:	08015dd0 	.word	0x08015dd0
 80123ac:	fffffc02 	.word	0xfffffc02
 80123b0:	f8cd b020 	str.w	fp, [sp, #32]
 80123b4:	f040 8085 	bne.w	80124c2 <_strtod_l+0x992>
 80123b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123be:	b322      	cbz	r2, 801240a <_strtod_l+0x8da>
 80123c0:	4ab7      	ldr	r2, [pc, #732]	; (80126a0 <_strtod_l+0xb70>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d154      	bne.n	8012470 <_strtod_l+0x940>
 80123c6:	4651      	mov	r1, sl
 80123c8:	b1e7      	cbz	r7, 8012404 <_strtod_l+0x8d4>
 80123ca:	4bb6      	ldr	r3, [pc, #728]	; (80126a4 <_strtod_l+0xb74>)
 80123cc:	465a      	mov	r2, fp
 80123ce:	4013      	ands	r3, r2
 80123d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80123d4:	f04f 32ff 	mov.w	r2, #4294967295
 80123d8:	d803      	bhi.n	80123e2 <_strtod_l+0x8b2>
 80123da:	0d1b      	lsrs	r3, r3, #20
 80123dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80123e0:	409a      	lsls	r2, r3
 80123e2:	4291      	cmp	r1, r2
 80123e4:	d144      	bne.n	8012470 <_strtod_l+0x940>
 80123e6:	4bb0      	ldr	r3, [pc, #704]	; (80126a8 <_strtod_l+0xb78>)
 80123e8:	9a08      	ldr	r2, [sp, #32]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d102      	bne.n	80123f4 <_strtod_l+0x8c4>
 80123ee:	3101      	adds	r1, #1
 80123f0:	f43f adcd 	beq.w	8011f8e <_strtod_l+0x45e>
 80123f4:	4bab      	ldr	r3, [pc, #684]	; (80126a4 <_strtod_l+0xb74>)
 80123f6:	9a08      	ldr	r2, [sp, #32]
 80123f8:	401a      	ands	r2, r3
 80123fa:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80123fe:	f04f 0a00 	mov.w	sl, #0
 8012402:	e790      	b.n	8012326 <_strtod_l+0x7f6>
 8012404:	f04f 32ff 	mov.w	r2, #4294967295
 8012408:	e7eb      	b.n	80123e2 <_strtod_l+0x8b2>
 801240a:	bb8b      	cbnz	r3, 8012470 <_strtod_l+0x940>
 801240c:	f1ba 0f00 	cmp.w	sl, #0
 8012410:	d12e      	bne.n	8012470 <_strtod_l+0x940>
 8012412:	465b      	mov	r3, fp
 8012414:	4aa3      	ldr	r2, [pc, #652]	; (80126a4 <_strtod_l+0xb74>)
 8012416:	b30f      	cbz	r7, 801245c <_strtod_l+0x92c>
 8012418:	ea02 010b 	and.w	r1, r2, fp
 801241c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012420:	dc1c      	bgt.n	801245c <_strtod_l+0x92c>
 8012422:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012426:	f77f ae48 	ble.w	80120ba <_strtod_l+0x58a>
 801242a:	4aa0      	ldr	r2, [pc, #640]	; (80126ac <_strtod_l+0xb7c>)
 801242c:	2300      	movs	r3, #0
 801242e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8012432:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8012436:	ec4b ab17 	vmov	d7, sl, fp
 801243a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801243e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012442:	9b05      	ldr	r3, [sp, #20]
 8012444:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012448:	2b00      	cmp	r3, #0
 801244a:	f47f adaa 	bne.w	8011fa2 <_strtod_l+0x472>
 801244e:	9b04      	ldr	r3, [sp, #16]
 8012450:	2b00      	cmp	r3, #0
 8012452:	f47f ada6 	bne.w	8011fa2 <_strtod_l+0x472>
 8012456:	2322      	movs	r3, #34	; 0x22
 8012458:	6023      	str	r3, [r4, #0]
 801245a:	e5a2      	b.n	8011fa2 <_strtod_l+0x472>
 801245c:	4013      	ands	r3, r2
 801245e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012462:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012466:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801246a:	f04f 3aff 	mov.w	sl, #4294967295
 801246e:	e75a      	b.n	8012326 <_strtod_l+0x7f6>
 8012470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012472:	b18b      	cbz	r3, 8012498 <_strtod_l+0x968>
 8012474:	9a08      	ldr	r2, [sp, #32]
 8012476:	4213      	tst	r3, r2
 8012478:	f43f af55 	beq.w	8012326 <_strtod_l+0x7f6>
 801247c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801247e:	463a      	mov	r2, r7
 8012480:	4650      	mov	r0, sl
 8012482:	4659      	mov	r1, fp
 8012484:	b163      	cbz	r3, 80124a0 <_strtod_l+0x970>
 8012486:	f7ff fb38 	bl	8011afa <sulp>
 801248a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801248e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8012492:	ec5b ab17 	vmov	sl, fp, d7
 8012496:	e746      	b.n	8012326 <_strtod_l+0x7f6>
 8012498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801249a:	ea13 0f0a 	tst.w	r3, sl
 801249e:	e7eb      	b.n	8012478 <_strtod_l+0x948>
 80124a0:	f7ff fb2b 	bl	8011afa <sulp>
 80124a4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80124a8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80124ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80124b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80124bc:	f43f adfd 	beq.w	80120ba <_strtod_l+0x58a>
 80124c0:	e731      	b.n	8012326 <_strtod_l+0x7f6>
 80124c2:	4641      	mov	r1, r8
 80124c4:	4628      	mov	r0, r5
 80124c6:	f002 f930 	bl	801472a <__ratio>
 80124ca:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80124ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80124d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d6:	d869      	bhi.n	80125ac <_strtod_l+0xa7c>
 80124d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d045      	beq.n	801256a <_strtod_l+0xa3a>
 80124de:	4b74      	ldr	r3, [pc, #464]	; (80126b0 <_strtod_l+0xb80>)
 80124e0:	2200      	movs	r2, #0
 80124e2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80124e6:	9808      	ldr	r0, [sp, #32]
 80124e8:	496e      	ldr	r1, [pc, #440]	; (80126a4 <_strtod_l+0xb74>)
 80124ea:	ea00 0601 	and.w	r6, r0, r1
 80124ee:	4871      	ldr	r0, [pc, #452]	; (80126b4 <_strtod_l+0xb84>)
 80124f0:	4286      	cmp	r6, r0
 80124f2:	f040 8089 	bne.w	8012608 <_strtod_l+0xad8>
 80124f6:	910f      	str	r1, [sp, #60]	; 0x3c
 80124f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80124fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012500:	9908      	ldr	r1, [sp, #32]
 8012502:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8012506:	ec4b ab10 	vmov	d0, sl, fp
 801250a:	ec43 2b1c 	vmov	d12, r2, r3
 801250e:	f002 f847 	bl	80145a0 <__ulp>
 8012512:	ec4b ab1d 	vmov	d13, sl, fp
 8012516:	eeac db00 	vfma.f64	d13, d12, d0
 801251a:	ed8d db08 	vstr	d13, [sp, #32]
 801251e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012520:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012522:	4a65      	ldr	r2, [pc, #404]	; (80126b8 <_strtod_l+0xb88>)
 8012524:	4019      	ands	r1, r3
 8012526:	4291      	cmp	r1, r2
 8012528:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801252c:	d948      	bls.n	80125c0 <_strtod_l+0xa90>
 801252e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012530:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012534:	4293      	cmp	r3, r2
 8012536:	d103      	bne.n	8012540 <_strtod_l+0xa10>
 8012538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801253a:	3301      	adds	r3, #1
 801253c:	f43f ad27 	beq.w	8011f8e <_strtod_l+0x45e>
 8012540:	f8df b164 	ldr.w	fp, [pc, #356]	; 80126a8 <_strtod_l+0xb78>
 8012544:	f04f 3aff 	mov.w	sl, #4294967295
 8012548:	9918      	ldr	r1, [sp, #96]	; 0x60
 801254a:	4620      	mov	r0, r4
 801254c:	f001 fd90 	bl	8014070 <_Bfree>
 8012550:	4649      	mov	r1, r9
 8012552:	4620      	mov	r0, r4
 8012554:	f001 fd8c 	bl	8014070 <_Bfree>
 8012558:	4641      	mov	r1, r8
 801255a:	4620      	mov	r0, r4
 801255c:	f001 fd88 	bl	8014070 <_Bfree>
 8012560:	4629      	mov	r1, r5
 8012562:	4620      	mov	r0, r4
 8012564:	f001 fd84 	bl	8014070 <_Bfree>
 8012568:	e60e      	b.n	8012188 <_strtod_l+0x658>
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	d113      	bne.n	8012598 <_strtod_l+0xa68>
 8012570:	9b08      	ldr	r3, [sp, #32]
 8012572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012576:	b9b3      	cbnz	r3, 80125a6 <_strtod_l+0xa76>
 8012578:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801257c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012584:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012588:	d401      	bmi.n	801258e <_strtod_l+0xa5e>
 801258a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801258e:	eeb1 7b48 	vneg.f64	d7, d8
 8012592:	ec53 2b17 	vmov	r2, r3, d7
 8012596:	e7a6      	b.n	80124e6 <_strtod_l+0x9b6>
 8012598:	f1ba 0f01 	cmp.w	sl, #1
 801259c:	d103      	bne.n	80125a6 <_strtod_l+0xa76>
 801259e:	9b08      	ldr	r3, [sp, #32]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f43f ad8a 	beq.w	80120ba <_strtod_l+0x58a>
 80125a6:	2200      	movs	r2, #0
 80125a8:	4b44      	ldr	r3, [pc, #272]	; (80126bc <_strtod_l+0xb8c>)
 80125aa:	e79a      	b.n	80124e2 <_strtod_l+0x9b2>
 80125ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80125b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d0e9      	beq.n	801258e <_strtod_l+0xa5e>
 80125ba:	ec53 2b18 	vmov	r2, r3, d8
 80125be:	e792      	b.n	80124e6 <_strtod_l+0x9b6>
 80125c0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80125c4:	2f00      	cmp	r7, #0
 80125c6:	d1bf      	bne.n	8012548 <_strtod_l+0xa18>
 80125c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80125cc:	0d1b      	lsrs	r3, r3, #20
 80125ce:	051b      	lsls	r3, r3, #20
 80125d0:	429e      	cmp	r6, r3
 80125d2:	d1b9      	bne.n	8012548 <_strtod_l+0xa18>
 80125d4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80125d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125da:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80125de:	ee38 8b40 	vsub.f64	d8, d8, d0
 80125e2:	b92b      	cbnz	r3, 80125f0 <_strtod_l+0xac0>
 80125e4:	f1ba 0f00 	cmp.w	sl, #0
 80125e8:	d102      	bne.n	80125f0 <_strtod_l+0xac0>
 80125ea:	f3cb 0213 	ubfx	r2, fp, #0, #20
 80125ee:	b3d2      	cbz	r2, 8012666 <_strtod_l+0xb36>
 80125f0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80125f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f8:	f53f acd3 	bmi.w	8011fa2 <_strtod_l+0x472>
 80125fc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012604:	dda0      	ble.n	8012548 <_strtod_l+0xa18>
 8012606:	e4cc      	b.n	8011fa2 <_strtod_l+0x472>
 8012608:	b1ef      	cbz	r7, 8012646 <_strtod_l+0xb16>
 801260a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801260e:	d81a      	bhi.n	8012646 <_strtod_l+0xb16>
 8012610:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012698 <_strtod_l+0xb68>
 8012614:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261c:	d810      	bhi.n	8012640 <_strtod_l+0xb10>
 801261e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8012622:	ee17 3a90 	vmov	r3, s15
 8012626:	2b00      	cmp	r3, #0
 8012628:	bf08      	it	eq
 801262a:	2301      	moveq	r3, #1
 801262c:	ee07 3a90 	vmov	s15, r3
 8012630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012632:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8012636:	b99b      	cbnz	r3, 8012660 <_strtod_l+0xb30>
 8012638:	eeb1 7b48 	vneg.f64	d7, d8
 801263c:	ec53 2b17 	vmov	r2, r3, d7
 8012640:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012644:	1b8b      	subs	r3, r1, r6
 8012646:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801264a:	ec43 2b1c 	vmov	d12, r2, r3
 801264e:	f001 ffa7 	bl	80145a0 <__ulp>
 8012652:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012656:	eeac 7b00 	vfma.f64	d7, d12, d0
 801265a:	ec5b ab17 	vmov	sl, fp, d7
 801265e:	e7b1      	b.n	80125c4 <_strtod_l+0xa94>
 8012660:	ec53 2b18 	vmov	r2, r3, d8
 8012664:	e7ec      	b.n	8012640 <_strtod_l+0xb10>
 8012666:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266e:	f57f af6b 	bpl.w	8012548 <_strtod_l+0xa18>
 8012672:	e496      	b.n	8011fa2 <_strtod_l+0x472>
 8012674:	2300      	movs	r3, #0
 8012676:	930d      	str	r3, [sp, #52]	; 0x34
 8012678:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801267a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801267c:	6013      	str	r3, [r2, #0]
 801267e:	f7ff ba9d 	b.w	8011bbc <_strtod_l+0x8c>
 8012682:	2a65      	cmp	r2, #101	; 0x65
 8012684:	f04f 0100 	mov.w	r1, #0
 8012688:	f43f ab97 	beq.w	8011dba <_strtod_l+0x28a>
 801268c:	2701      	movs	r7, #1
 801268e:	460b      	mov	r3, r1
 8012690:	9704      	str	r7, [sp, #16]
 8012692:	f7ff bb0a 	b.w	8011caa <_strtod_l+0x17a>
 8012696:	bf00      	nop
 8012698:	ffc00000 	.word	0xffc00000
 801269c:	41dfffff 	.word	0x41dfffff
 80126a0:	000fffff 	.word	0x000fffff
 80126a4:	7ff00000 	.word	0x7ff00000
 80126a8:	7fefffff 	.word	0x7fefffff
 80126ac:	39500000 	.word	0x39500000
 80126b0:	3ff00000 	.word	0x3ff00000
 80126b4:	7fe00000 	.word	0x7fe00000
 80126b8:	7c9fffff 	.word	0x7c9fffff
 80126bc:	bff00000 	.word	0xbff00000

080126c0 <_strtod_r>:
 80126c0:	4b05      	ldr	r3, [pc, #20]	; (80126d8 <_strtod_r+0x18>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	b410      	push	{r4}
 80126c6:	6a1b      	ldr	r3, [r3, #32]
 80126c8:	4c04      	ldr	r4, [pc, #16]	; (80126dc <_strtod_r+0x1c>)
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	bf08      	it	eq
 80126ce:	4623      	moveq	r3, r4
 80126d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126d4:	f7ff ba2c 	b.w	8011b30 <_strtod_l>
 80126d8:	200003a8 	.word	0x200003a8
 80126dc:	2000040c 	.word	0x2000040c

080126e0 <_strtol_l.isra.0>:
 80126e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e4:	4680      	mov	r8, r0
 80126e6:	4689      	mov	r9, r1
 80126e8:	4692      	mov	sl, r2
 80126ea:	461e      	mov	r6, r3
 80126ec:	460f      	mov	r7, r1
 80126ee:	463d      	mov	r5, r7
 80126f0:	9808      	ldr	r0, [sp, #32]
 80126f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126f6:	f001 fbdb 	bl	8013eb0 <__locale_ctype_ptr_l>
 80126fa:	4420      	add	r0, r4
 80126fc:	7843      	ldrb	r3, [r0, #1]
 80126fe:	f013 0308 	ands.w	r3, r3, #8
 8012702:	d132      	bne.n	801276a <_strtol_l.isra.0+0x8a>
 8012704:	2c2d      	cmp	r4, #45	; 0x2d
 8012706:	d132      	bne.n	801276e <_strtol_l.isra.0+0x8e>
 8012708:	787c      	ldrb	r4, [r7, #1]
 801270a:	1cbd      	adds	r5, r7, #2
 801270c:	2201      	movs	r2, #1
 801270e:	2e00      	cmp	r6, #0
 8012710:	d05d      	beq.n	80127ce <_strtol_l.isra.0+0xee>
 8012712:	2e10      	cmp	r6, #16
 8012714:	d109      	bne.n	801272a <_strtol_l.isra.0+0x4a>
 8012716:	2c30      	cmp	r4, #48	; 0x30
 8012718:	d107      	bne.n	801272a <_strtol_l.isra.0+0x4a>
 801271a:	782b      	ldrb	r3, [r5, #0]
 801271c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012720:	2b58      	cmp	r3, #88	; 0x58
 8012722:	d14f      	bne.n	80127c4 <_strtol_l.isra.0+0xe4>
 8012724:	786c      	ldrb	r4, [r5, #1]
 8012726:	2610      	movs	r6, #16
 8012728:	3502      	adds	r5, #2
 801272a:	2a00      	cmp	r2, #0
 801272c:	bf14      	ite	ne
 801272e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012732:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012736:	2700      	movs	r7, #0
 8012738:	fbb1 fcf6 	udiv	ip, r1, r6
 801273c:	4638      	mov	r0, r7
 801273e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012742:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012746:	2b09      	cmp	r3, #9
 8012748:	d817      	bhi.n	801277a <_strtol_l.isra.0+0x9a>
 801274a:	461c      	mov	r4, r3
 801274c:	42a6      	cmp	r6, r4
 801274e:	dd23      	ble.n	8012798 <_strtol_l.isra.0+0xb8>
 8012750:	1c7b      	adds	r3, r7, #1
 8012752:	d007      	beq.n	8012764 <_strtol_l.isra.0+0x84>
 8012754:	4584      	cmp	ip, r0
 8012756:	d31c      	bcc.n	8012792 <_strtol_l.isra.0+0xb2>
 8012758:	d101      	bne.n	801275e <_strtol_l.isra.0+0x7e>
 801275a:	45a6      	cmp	lr, r4
 801275c:	db19      	blt.n	8012792 <_strtol_l.isra.0+0xb2>
 801275e:	fb00 4006 	mla	r0, r0, r6, r4
 8012762:	2701      	movs	r7, #1
 8012764:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012768:	e7eb      	b.n	8012742 <_strtol_l.isra.0+0x62>
 801276a:	462f      	mov	r7, r5
 801276c:	e7bf      	b.n	80126ee <_strtol_l.isra.0+0xe>
 801276e:	2c2b      	cmp	r4, #43	; 0x2b
 8012770:	bf04      	itt	eq
 8012772:	1cbd      	addeq	r5, r7, #2
 8012774:	787c      	ldrbeq	r4, [r7, #1]
 8012776:	461a      	mov	r2, r3
 8012778:	e7c9      	b.n	801270e <_strtol_l.isra.0+0x2e>
 801277a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801277e:	2b19      	cmp	r3, #25
 8012780:	d801      	bhi.n	8012786 <_strtol_l.isra.0+0xa6>
 8012782:	3c37      	subs	r4, #55	; 0x37
 8012784:	e7e2      	b.n	801274c <_strtol_l.isra.0+0x6c>
 8012786:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801278a:	2b19      	cmp	r3, #25
 801278c:	d804      	bhi.n	8012798 <_strtol_l.isra.0+0xb8>
 801278e:	3c57      	subs	r4, #87	; 0x57
 8012790:	e7dc      	b.n	801274c <_strtol_l.isra.0+0x6c>
 8012792:	f04f 37ff 	mov.w	r7, #4294967295
 8012796:	e7e5      	b.n	8012764 <_strtol_l.isra.0+0x84>
 8012798:	1c7b      	adds	r3, r7, #1
 801279a:	d108      	bne.n	80127ae <_strtol_l.isra.0+0xce>
 801279c:	2322      	movs	r3, #34	; 0x22
 801279e:	f8c8 3000 	str.w	r3, [r8]
 80127a2:	4608      	mov	r0, r1
 80127a4:	f1ba 0f00 	cmp.w	sl, #0
 80127a8:	d107      	bne.n	80127ba <_strtol_l.isra.0+0xda>
 80127aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ae:	b102      	cbz	r2, 80127b2 <_strtol_l.isra.0+0xd2>
 80127b0:	4240      	negs	r0, r0
 80127b2:	f1ba 0f00 	cmp.w	sl, #0
 80127b6:	d0f8      	beq.n	80127aa <_strtol_l.isra.0+0xca>
 80127b8:	b10f      	cbz	r7, 80127be <_strtol_l.isra.0+0xde>
 80127ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80127be:	f8ca 9000 	str.w	r9, [sl]
 80127c2:	e7f2      	b.n	80127aa <_strtol_l.isra.0+0xca>
 80127c4:	2430      	movs	r4, #48	; 0x30
 80127c6:	2e00      	cmp	r6, #0
 80127c8:	d1af      	bne.n	801272a <_strtol_l.isra.0+0x4a>
 80127ca:	2608      	movs	r6, #8
 80127cc:	e7ad      	b.n	801272a <_strtol_l.isra.0+0x4a>
 80127ce:	2c30      	cmp	r4, #48	; 0x30
 80127d0:	d0a3      	beq.n	801271a <_strtol_l.isra.0+0x3a>
 80127d2:	260a      	movs	r6, #10
 80127d4:	e7a9      	b.n	801272a <_strtol_l.isra.0+0x4a>
	...

080127d8 <_strtol_r>:
 80127d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127da:	4c06      	ldr	r4, [pc, #24]	; (80127f4 <_strtol_r+0x1c>)
 80127dc:	4d06      	ldr	r5, [pc, #24]	; (80127f8 <_strtol_r+0x20>)
 80127de:	6824      	ldr	r4, [r4, #0]
 80127e0:	6a24      	ldr	r4, [r4, #32]
 80127e2:	2c00      	cmp	r4, #0
 80127e4:	bf08      	it	eq
 80127e6:	462c      	moveq	r4, r5
 80127e8:	9400      	str	r4, [sp, #0]
 80127ea:	f7ff ff79 	bl	80126e0 <_strtol_l.isra.0>
 80127ee:	b003      	add	sp, #12
 80127f0:	bd30      	pop	{r4, r5, pc}
 80127f2:	bf00      	nop
 80127f4:	200003a8 	.word	0x200003a8
 80127f8:	2000040c 	.word	0x2000040c

080127fc <__swbuf_r>:
 80127fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fe:	460e      	mov	r6, r1
 8012800:	4614      	mov	r4, r2
 8012802:	4605      	mov	r5, r0
 8012804:	b118      	cbz	r0, 801280e <__swbuf_r+0x12>
 8012806:	6983      	ldr	r3, [r0, #24]
 8012808:	b90b      	cbnz	r3, 801280e <__swbuf_r+0x12>
 801280a:	f000 ffa1 	bl	8013750 <__sinit>
 801280e:	4b21      	ldr	r3, [pc, #132]	; (8012894 <__swbuf_r+0x98>)
 8012810:	429c      	cmp	r4, r3
 8012812:	d12a      	bne.n	801286a <__swbuf_r+0x6e>
 8012814:	686c      	ldr	r4, [r5, #4]
 8012816:	69a3      	ldr	r3, [r4, #24]
 8012818:	60a3      	str	r3, [r4, #8]
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	071a      	lsls	r2, r3, #28
 801281e:	d52e      	bpl.n	801287e <__swbuf_r+0x82>
 8012820:	6923      	ldr	r3, [r4, #16]
 8012822:	b363      	cbz	r3, 801287e <__swbuf_r+0x82>
 8012824:	6923      	ldr	r3, [r4, #16]
 8012826:	6820      	ldr	r0, [r4, #0]
 8012828:	1ac0      	subs	r0, r0, r3
 801282a:	6963      	ldr	r3, [r4, #20]
 801282c:	b2f6      	uxtb	r6, r6
 801282e:	4283      	cmp	r3, r0
 8012830:	4637      	mov	r7, r6
 8012832:	dc04      	bgt.n	801283e <__swbuf_r+0x42>
 8012834:	4621      	mov	r1, r4
 8012836:	4628      	mov	r0, r5
 8012838:	f000 ff20 	bl	801367c <_fflush_r>
 801283c:	bb28      	cbnz	r0, 801288a <__swbuf_r+0x8e>
 801283e:	68a3      	ldr	r3, [r4, #8]
 8012840:	3b01      	subs	r3, #1
 8012842:	60a3      	str	r3, [r4, #8]
 8012844:	6823      	ldr	r3, [r4, #0]
 8012846:	1c5a      	adds	r2, r3, #1
 8012848:	6022      	str	r2, [r4, #0]
 801284a:	701e      	strb	r6, [r3, #0]
 801284c:	6963      	ldr	r3, [r4, #20]
 801284e:	3001      	adds	r0, #1
 8012850:	4283      	cmp	r3, r0
 8012852:	d004      	beq.n	801285e <__swbuf_r+0x62>
 8012854:	89a3      	ldrh	r3, [r4, #12]
 8012856:	07db      	lsls	r3, r3, #31
 8012858:	d519      	bpl.n	801288e <__swbuf_r+0x92>
 801285a:	2e0a      	cmp	r6, #10
 801285c:	d117      	bne.n	801288e <__swbuf_r+0x92>
 801285e:	4621      	mov	r1, r4
 8012860:	4628      	mov	r0, r5
 8012862:	f000 ff0b 	bl	801367c <_fflush_r>
 8012866:	b190      	cbz	r0, 801288e <__swbuf_r+0x92>
 8012868:	e00f      	b.n	801288a <__swbuf_r+0x8e>
 801286a:	4b0b      	ldr	r3, [pc, #44]	; (8012898 <__swbuf_r+0x9c>)
 801286c:	429c      	cmp	r4, r3
 801286e:	d101      	bne.n	8012874 <__swbuf_r+0x78>
 8012870:	68ac      	ldr	r4, [r5, #8]
 8012872:	e7d0      	b.n	8012816 <__swbuf_r+0x1a>
 8012874:	4b09      	ldr	r3, [pc, #36]	; (801289c <__swbuf_r+0xa0>)
 8012876:	429c      	cmp	r4, r3
 8012878:	bf08      	it	eq
 801287a:	68ec      	ldreq	r4, [r5, #12]
 801287c:	e7cb      	b.n	8012816 <__swbuf_r+0x1a>
 801287e:	4621      	mov	r1, r4
 8012880:	4628      	mov	r0, r5
 8012882:	f000 f81f 	bl	80128c4 <__swsetup_r>
 8012886:	2800      	cmp	r0, #0
 8012888:	d0cc      	beq.n	8012824 <__swbuf_r+0x28>
 801288a:	f04f 37ff 	mov.w	r7, #4294967295
 801288e:	4638      	mov	r0, r7
 8012890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012892:	bf00      	nop
 8012894:	08015e28 	.word	0x08015e28
 8012898:	08015e48 	.word	0x08015e48
 801289c:	08015e08 	.word	0x08015e08

080128a0 <_write_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4c07      	ldr	r4, [pc, #28]	; (80128c0 <_write_r+0x20>)
 80128a4:	4605      	mov	r5, r0
 80128a6:	4608      	mov	r0, r1
 80128a8:	4611      	mov	r1, r2
 80128aa:	2200      	movs	r2, #0
 80128ac:	6022      	str	r2, [r4, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	f7fa fb1c 	bl	800ceec <_write>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d102      	bne.n	80128be <_write_r+0x1e>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	b103      	cbz	r3, 80128be <_write_r+0x1e>
 80128bc:	602b      	str	r3, [r5, #0]
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	20011f7c 	.word	0x20011f7c

080128c4 <__swsetup_r>:
 80128c4:	4b32      	ldr	r3, [pc, #200]	; (8012990 <__swsetup_r+0xcc>)
 80128c6:	b570      	push	{r4, r5, r6, lr}
 80128c8:	681d      	ldr	r5, [r3, #0]
 80128ca:	4606      	mov	r6, r0
 80128cc:	460c      	mov	r4, r1
 80128ce:	b125      	cbz	r5, 80128da <__swsetup_r+0x16>
 80128d0:	69ab      	ldr	r3, [r5, #24]
 80128d2:	b913      	cbnz	r3, 80128da <__swsetup_r+0x16>
 80128d4:	4628      	mov	r0, r5
 80128d6:	f000 ff3b 	bl	8013750 <__sinit>
 80128da:	4b2e      	ldr	r3, [pc, #184]	; (8012994 <__swsetup_r+0xd0>)
 80128dc:	429c      	cmp	r4, r3
 80128de:	d10f      	bne.n	8012900 <__swsetup_r+0x3c>
 80128e0:	686c      	ldr	r4, [r5, #4]
 80128e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	0715      	lsls	r5, r2, #28
 80128ea:	d42c      	bmi.n	8012946 <__swsetup_r+0x82>
 80128ec:	06d0      	lsls	r0, r2, #27
 80128ee:	d411      	bmi.n	8012914 <__swsetup_r+0x50>
 80128f0:	2209      	movs	r2, #9
 80128f2:	6032      	str	r2, [r6, #0]
 80128f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	f04f 30ff 	mov.w	r0, #4294967295
 80128fe:	e03e      	b.n	801297e <__swsetup_r+0xba>
 8012900:	4b25      	ldr	r3, [pc, #148]	; (8012998 <__swsetup_r+0xd4>)
 8012902:	429c      	cmp	r4, r3
 8012904:	d101      	bne.n	801290a <__swsetup_r+0x46>
 8012906:	68ac      	ldr	r4, [r5, #8]
 8012908:	e7eb      	b.n	80128e2 <__swsetup_r+0x1e>
 801290a:	4b24      	ldr	r3, [pc, #144]	; (801299c <__swsetup_r+0xd8>)
 801290c:	429c      	cmp	r4, r3
 801290e:	bf08      	it	eq
 8012910:	68ec      	ldreq	r4, [r5, #12]
 8012912:	e7e6      	b.n	80128e2 <__swsetup_r+0x1e>
 8012914:	0751      	lsls	r1, r2, #29
 8012916:	d512      	bpl.n	801293e <__swsetup_r+0x7a>
 8012918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801291a:	b141      	cbz	r1, 801292e <__swsetup_r+0x6a>
 801291c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012920:	4299      	cmp	r1, r3
 8012922:	d002      	beq.n	801292a <__swsetup_r+0x66>
 8012924:	4630      	mov	r0, r6
 8012926:	f7fe f8bf 	bl	8010aa8 <_free_r>
 801292a:	2300      	movs	r3, #0
 801292c:	6363      	str	r3, [r4, #52]	; 0x34
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012934:	81a3      	strh	r3, [r4, #12]
 8012936:	2300      	movs	r3, #0
 8012938:	6063      	str	r3, [r4, #4]
 801293a:	6923      	ldr	r3, [r4, #16]
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	89a3      	ldrh	r3, [r4, #12]
 8012940:	f043 0308 	orr.w	r3, r3, #8
 8012944:	81a3      	strh	r3, [r4, #12]
 8012946:	6923      	ldr	r3, [r4, #16]
 8012948:	b94b      	cbnz	r3, 801295e <__swsetup_r+0x9a>
 801294a:	89a3      	ldrh	r3, [r4, #12]
 801294c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012954:	d003      	beq.n	801295e <__swsetup_r+0x9a>
 8012956:	4621      	mov	r1, r4
 8012958:	4630      	mov	r0, r6
 801295a:	f001 fb01 	bl	8013f60 <__smakebuf_r>
 801295e:	89a2      	ldrh	r2, [r4, #12]
 8012960:	f012 0301 	ands.w	r3, r2, #1
 8012964:	d00c      	beq.n	8012980 <__swsetup_r+0xbc>
 8012966:	2300      	movs	r3, #0
 8012968:	60a3      	str	r3, [r4, #8]
 801296a:	6963      	ldr	r3, [r4, #20]
 801296c:	425b      	negs	r3, r3
 801296e:	61a3      	str	r3, [r4, #24]
 8012970:	6923      	ldr	r3, [r4, #16]
 8012972:	b953      	cbnz	r3, 801298a <__swsetup_r+0xc6>
 8012974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012978:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801297c:	d1ba      	bne.n	80128f4 <__swsetup_r+0x30>
 801297e:	bd70      	pop	{r4, r5, r6, pc}
 8012980:	0792      	lsls	r2, r2, #30
 8012982:	bf58      	it	pl
 8012984:	6963      	ldrpl	r3, [r4, #20]
 8012986:	60a3      	str	r3, [r4, #8]
 8012988:	e7f2      	b.n	8012970 <__swsetup_r+0xac>
 801298a:	2000      	movs	r0, #0
 801298c:	e7f7      	b.n	801297e <__swsetup_r+0xba>
 801298e:	bf00      	nop
 8012990:	200003a8 	.word	0x200003a8
 8012994:	08015e28 	.word	0x08015e28
 8012998:	08015e48 	.word	0x08015e48
 801299c:	08015e08 	.word	0x08015e08

080129a0 <_close_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4c06      	ldr	r4, [pc, #24]	; (80129bc <_close_r+0x1c>)
 80129a4:	2300      	movs	r3, #0
 80129a6:	4605      	mov	r5, r0
 80129a8:	4608      	mov	r0, r1
 80129aa:	6023      	str	r3, [r4, #0]
 80129ac:	f002 fe54 	bl	8015658 <_close>
 80129b0:	1c43      	adds	r3, r0, #1
 80129b2:	d102      	bne.n	80129ba <_close_r+0x1a>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	b103      	cbz	r3, 80129ba <_close_r+0x1a>
 80129b8:	602b      	str	r3, [r5, #0]
 80129ba:	bd38      	pop	{r3, r4, r5, pc}
 80129bc:	20011f7c 	.word	0x20011f7c

080129c0 <quorem>:
 80129c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	6903      	ldr	r3, [r0, #16]
 80129c6:	690c      	ldr	r4, [r1, #16]
 80129c8:	42a3      	cmp	r3, r4
 80129ca:	4680      	mov	r8, r0
 80129cc:	f2c0 8082 	blt.w	8012ad4 <quorem+0x114>
 80129d0:	3c01      	subs	r4, #1
 80129d2:	f101 0714 	add.w	r7, r1, #20
 80129d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80129da:	f100 0614 	add.w	r6, r0, #20
 80129de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80129e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80129e6:	eb06 030c 	add.w	r3, r6, ip
 80129ea:	3501      	adds	r5, #1
 80129ec:	eb07 090c 	add.w	r9, r7, ip
 80129f0:	9301      	str	r3, [sp, #4]
 80129f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80129f6:	b395      	cbz	r5, 8012a5e <quorem+0x9e>
 80129f8:	f04f 0a00 	mov.w	sl, #0
 80129fc:	4638      	mov	r0, r7
 80129fe:	46b6      	mov	lr, r6
 8012a00:	46d3      	mov	fp, sl
 8012a02:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a06:	b293      	uxth	r3, r2
 8012a08:	fb05 a303 	mla	r3, r5, r3, sl
 8012a0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	ebab 0303 	sub.w	r3, fp, r3
 8012a16:	0c12      	lsrs	r2, r2, #16
 8012a18:	f8de b000 	ldr.w	fp, [lr]
 8012a1c:	fb05 a202 	mla	r2, r5, r2, sl
 8012a20:	fa13 f38b 	uxtah	r3, r3, fp
 8012a24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012a28:	fa1f fb82 	uxth.w	fp, r2
 8012a2c:	f8de 2000 	ldr.w	r2, [lr]
 8012a30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a3e:	4581      	cmp	r9, r0
 8012a40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012a44:	f84e 3b04 	str.w	r3, [lr], #4
 8012a48:	d2db      	bcs.n	8012a02 <quorem+0x42>
 8012a4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8012a4e:	b933      	cbnz	r3, 8012a5e <quorem+0x9e>
 8012a50:	9b01      	ldr	r3, [sp, #4]
 8012a52:	3b04      	subs	r3, #4
 8012a54:	429e      	cmp	r6, r3
 8012a56:	461a      	mov	r2, r3
 8012a58:	d330      	bcc.n	8012abc <quorem+0xfc>
 8012a5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8012a5e:	4640      	mov	r0, r8
 8012a60:	f001 fd26 	bl	80144b0 <__mcmp>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	db25      	blt.n	8012ab4 <quorem+0xf4>
 8012a68:	3501      	adds	r5, #1
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f04f 0c00 	mov.w	ip, #0
 8012a70:	f857 2b04 	ldr.w	r2, [r7], #4
 8012a74:	f8d0 e000 	ldr.w	lr, [r0]
 8012a78:	b293      	uxth	r3, r2
 8012a7a:	ebac 0303 	sub.w	r3, ip, r3
 8012a7e:	0c12      	lsrs	r2, r2, #16
 8012a80:	fa13 f38e 	uxtah	r3, r3, lr
 8012a84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a92:	45b9      	cmp	r9, r7
 8012a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012a98:	f840 3b04 	str.w	r3, [r0], #4
 8012a9c:	d2e8      	bcs.n	8012a70 <quorem+0xb0>
 8012a9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012aa2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012aa6:	b92a      	cbnz	r2, 8012ab4 <quorem+0xf4>
 8012aa8:	3b04      	subs	r3, #4
 8012aaa:	429e      	cmp	r6, r3
 8012aac:	461a      	mov	r2, r3
 8012aae:	d30b      	bcc.n	8012ac8 <quorem+0x108>
 8012ab0:	f8c8 4010 	str.w	r4, [r8, #16]
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	b003      	add	sp, #12
 8012ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012abc:	6812      	ldr	r2, [r2, #0]
 8012abe:	3b04      	subs	r3, #4
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	d1ca      	bne.n	8012a5a <quorem+0x9a>
 8012ac4:	3c01      	subs	r4, #1
 8012ac6:	e7c5      	b.n	8012a54 <quorem+0x94>
 8012ac8:	6812      	ldr	r2, [r2, #0]
 8012aca:	3b04      	subs	r3, #4
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	d1ef      	bne.n	8012ab0 <quorem+0xf0>
 8012ad0:	3c01      	subs	r4, #1
 8012ad2:	e7ea      	b.n	8012aaa <quorem+0xea>
 8012ad4:	2000      	movs	r0, #0
 8012ad6:	e7ee      	b.n	8012ab6 <quorem+0xf6>

08012ad8 <_dtoa_r>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	ec57 6b10 	vmov	r6, r7, d0
 8012ae0:	b095      	sub	sp, #84	; 0x54
 8012ae2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ae4:	9108      	str	r1, [sp, #32]
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8012aea:	9311      	str	r3, [sp, #68]	; 0x44
 8012aec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012af0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012af4:	b93d      	cbnz	r5, 8012b06 <_dtoa_r+0x2e>
 8012af6:	2010      	movs	r0, #16
 8012af8:	f7fd ffac 	bl	8010a54 <malloc>
 8012afc:	6260      	str	r0, [r4, #36]	; 0x24
 8012afe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b02:	6005      	str	r5, [r0, #0]
 8012b04:	60c5      	str	r5, [r0, #12]
 8012b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b08:	6819      	ldr	r1, [r3, #0]
 8012b0a:	b151      	cbz	r1, 8012b22 <_dtoa_r+0x4a>
 8012b0c:	685a      	ldr	r2, [r3, #4]
 8012b0e:	604a      	str	r2, [r1, #4]
 8012b10:	2301      	movs	r3, #1
 8012b12:	4093      	lsls	r3, r2
 8012b14:	608b      	str	r3, [r1, #8]
 8012b16:	4620      	mov	r0, r4
 8012b18:	f001 faaa 	bl	8014070 <_Bfree>
 8012b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b1e:	2200      	movs	r2, #0
 8012b20:	601a      	str	r2, [r3, #0]
 8012b22:	1e3b      	subs	r3, r7, #0
 8012b24:	bfb9      	ittee	lt
 8012b26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012b2a:	9303      	strlt	r3, [sp, #12]
 8012b2c:	2300      	movge	r3, #0
 8012b2e:	f8c8 3000 	strge.w	r3, [r8]
 8012b32:	9d03      	ldr	r5, [sp, #12]
 8012b34:	4bac      	ldr	r3, [pc, #688]	; (8012de8 <_dtoa_r+0x310>)
 8012b36:	bfbc      	itt	lt
 8012b38:	2201      	movlt	r2, #1
 8012b3a:	f8c8 2000 	strlt.w	r2, [r8]
 8012b3e:	43ab      	bics	r3, r5
 8012b40:	d11b      	bne.n	8012b7a <_dtoa_r+0xa2>
 8012b42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b44:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b48:	6013      	str	r3, [r2, #0]
 8012b4a:	9b02      	ldr	r3, [sp, #8]
 8012b4c:	b923      	cbnz	r3, 8012b58 <_dtoa_r+0x80>
 8012b4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012b52:	2d00      	cmp	r5, #0
 8012b54:	f000 84dd 	beq.w	8013512 <_dtoa_r+0xa3a>
 8012b58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b5a:	b953      	cbnz	r3, 8012b72 <_dtoa_r+0x9a>
 8012b5c:	4ba3      	ldr	r3, [pc, #652]	; (8012dec <_dtoa_r+0x314>)
 8012b5e:	e020      	b.n	8012ba2 <_dtoa_r+0xca>
 8012b60:	4ba3      	ldr	r3, [pc, #652]	; (8012df0 <_dtoa_r+0x318>)
 8012b62:	9304      	str	r3, [sp, #16]
 8012b64:	3308      	adds	r3, #8
 8012b66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b68:	6013      	str	r3, [r2, #0]
 8012b6a:	9804      	ldr	r0, [sp, #16]
 8012b6c:	b015      	add	sp, #84	; 0x54
 8012b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b72:	4b9e      	ldr	r3, [pc, #632]	; (8012dec <_dtoa_r+0x314>)
 8012b74:	9304      	str	r3, [sp, #16]
 8012b76:	3303      	adds	r3, #3
 8012b78:	e7f5      	b.n	8012b66 <_dtoa_r+0x8e>
 8012b7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b8a:	d10c      	bne.n	8012ba6 <_dtoa_r+0xce>
 8012b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b8e:	2301      	movs	r3, #1
 8012b90:	6013      	str	r3, [r2, #0]
 8012b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 84b9 	beq.w	801350c <_dtoa_r+0xa34>
 8012b9a:	4b96      	ldr	r3, [pc, #600]	; (8012df4 <_dtoa_r+0x31c>)
 8012b9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	9304      	str	r3, [sp, #16]
 8012ba4:	e7e1      	b.n	8012b6a <_dtoa_r+0x92>
 8012ba6:	a913      	add	r1, sp, #76	; 0x4c
 8012ba8:	aa12      	add	r2, sp, #72	; 0x48
 8012baa:	ed9d 0b04 	vldr	d0, [sp, #16]
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f001 fd6c 	bl	801468c <__d2b>
 8012bb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012bb8:	9001      	str	r0, [sp, #4]
 8012bba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012bbc:	2e00      	cmp	r6, #0
 8012bbe:	d046      	beq.n	8012c4e <_dtoa_r+0x176>
 8012bc0:	9805      	ldr	r0, [sp, #20]
 8012bc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8012bce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012bd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012bd6:	2700      	movs	r7, #0
 8012bd8:	ee07 aa90 	vmov	s15, sl
 8012bdc:	ec43 2b16 	vmov	d6, r2, r3
 8012be0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012be4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012dd0 <_dtoa_r+0x2f8>
 8012be8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012bf0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012dd8 <_dtoa_r+0x300>
 8012bf4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012bf8:	eeb0 7b46 	vmov.f64	d7, d6
 8012bfc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012de0 <_dtoa_r+0x308>
 8012c00:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012c04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012c08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c10:	ee16 ba90 	vmov	fp, s13
 8012c14:	d508      	bpl.n	8012c28 <_dtoa_r+0x150>
 8012c16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012c1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	bf18      	it	ne
 8012c24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012c28:	f1bb 0f16 	cmp.w	fp, #22
 8012c2c:	d834      	bhi.n	8012c98 <_dtoa_r+0x1c0>
 8012c2e:	4b72      	ldr	r3, [pc, #456]	; (8012df8 <_dtoa_r+0x320>)
 8012c30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012c34:	ed93 7b00 	vldr	d7, [r3]
 8012c38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c44:	dd01      	ble.n	8012c4a <_dtoa_r+0x172>
 8012c46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	e025      	b.n	8012c9a <_dtoa_r+0x1c2>
 8012c4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c50:	eb01 0a03 	add.w	sl, r1, r3
 8012c54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012c58:	2b20      	cmp	r3, #32
 8012c5a:	dd17      	ble.n	8012c8c <_dtoa_r+0x1b4>
 8012c5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012c60:	9a02      	ldr	r2, [sp, #8]
 8012c62:	409d      	lsls	r5, r3
 8012c64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012c68:	fa22 f303 	lsr.w	r3, r2, r3
 8012c6c:	432b      	orrs	r3, r5
 8012c6e:	ee07 3a90 	vmov	s15, r3
 8012c72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c7e:	9805      	ldr	r0, [sp, #20]
 8012c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c84:	2701      	movs	r7, #1
 8012c86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8012c8a:	e7a5      	b.n	8012bd8 <_dtoa_r+0x100>
 8012c8c:	9a02      	ldr	r2, [sp, #8]
 8012c8e:	f1c3 0320 	rsb	r3, r3, #32
 8012c92:	fa02 f303 	lsl.w	r3, r2, r3
 8012c96:	e7ea      	b.n	8012c6e <_dtoa_r+0x196>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	eba1 0a0a 	sub.w	sl, r1, sl
 8012c9e:	9310      	str	r3, [sp, #64]	; 0x40
 8012ca0:	f1ba 0301 	subs.w	r3, sl, #1
 8012ca4:	9307      	str	r3, [sp, #28]
 8012ca6:	bf43      	ittte	mi
 8012ca8:	2300      	movmi	r3, #0
 8012caa:	f1ca 0a01 	rsbmi	sl, sl, #1
 8012cae:	9307      	strmi	r3, [sp, #28]
 8012cb0:	f04f 0a00 	movpl.w	sl, #0
 8012cb4:	f1bb 0f00 	cmp.w	fp, #0
 8012cb8:	db19      	blt.n	8012cee <_dtoa_r+0x216>
 8012cba:	9b07      	ldr	r3, [sp, #28]
 8012cbc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012cc0:	445b      	add	r3, fp
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	f04f 0800 	mov.w	r8, #0
 8012cc8:	9b08      	ldr	r3, [sp, #32]
 8012cca:	2b09      	cmp	r3, #9
 8012ccc:	d866      	bhi.n	8012d9c <_dtoa_r+0x2c4>
 8012cce:	2b05      	cmp	r3, #5
 8012cd0:	bfc4      	itt	gt
 8012cd2:	3b04      	subgt	r3, #4
 8012cd4:	9308      	strgt	r3, [sp, #32]
 8012cd6:	9b08      	ldr	r3, [sp, #32]
 8012cd8:	f1a3 0302 	sub.w	r3, r3, #2
 8012cdc:	bfcc      	ite	gt
 8012cde:	2500      	movgt	r5, #0
 8012ce0:	2501      	movle	r5, #1
 8012ce2:	2b03      	cmp	r3, #3
 8012ce4:	d866      	bhi.n	8012db4 <_dtoa_r+0x2dc>
 8012ce6:	e8df f003 	tbb	[pc, r3]
 8012cea:	5755      	.short	0x5755
 8012cec:	4909      	.short	0x4909
 8012cee:	2300      	movs	r3, #0
 8012cf0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012cf4:	f1cb 0800 	rsb	r8, fp, #0
 8012cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cfa:	e7e5      	b.n	8012cc8 <_dtoa_r+0x1f0>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8012d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	dd59      	ble.n	8012dba <_dtoa_r+0x2e2>
 8012d06:	9306      	str	r3, [sp, #24]
 8012d08:	4699      	mov	r9, r3
 8012d0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	6072      	str	r2, [r6, #4]
 8012d10:	2204      	movs	r2, #4
 8012d12:	f102 0014 	add.w	r0, r2, #20
 8012d16:	4298      	cmp	r0, r3
 8012d18:	6871      	ldr	r1, [r6, #4]
 8012d1a:	d953      	bls.n	8012dc4 <_dtoa_r+0x2ec>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f001 f973 	bl	8014008 <_Balloc>
 8012d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d24:	6030      	str	r0, [r6, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	9304      	str	r3, [sp, #16]
 8012d2a:	f1b9 0f0e 	cmp.w	r9, #14
 8012d2e:	f200 80c2 	bhi.w	8012eb6 <_dtoa_r+0x3de>
 8012d32:	2d00      	cmp	r5, #0
 8012d34:	f000 80bf 	beq.w	8012eb6 <_dtoa_r+0x3de>
 8012d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d3c:	f1bb 0f00 	cmp.w	fp, #0
 8012d40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012d44:	f340 80e6 	ble.w	8012f14 <_dtoa_r+0x43c>
 8012d48:	4a2b      	ldr	r2, [pc, #172]	; (8012df8 <_dtoa_r+0x320>)
 8012d4a:	f00b 030f 	and.w	r3, fp, #15
 8012d4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d52:	ed93 7b00 	vldr	d7, [r3]
 8012d56:	ea4f 132b 	mov.w	r3, fp, asr #4
 8012d5a:	06da      	lsls	r2, r3, #27
 8012d5c:	f140 80d8 	bpl.w	8012f10 <_dtoa_r+0x438>
 8012d60:	4a26      	ldr	r2, [pc, #152]	; (8012dfc <_dtoa_r+0x324>)
 8012d62:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012d66:	ed92 6b08 	vldr	d6, [r2, #32]
 8012d6a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012d6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012d72:	f003 030f 	and.w	r3, r3, #15
 8012d76:	2203      	movs	r2, #3
 8012d78:	4920      	ldr	r1, [pc, #128]	; (8012dfc <_dtoa_r+0x324>)
 8012d7a:	e04a      	b.n	8012e12 <_dtoa_r+0x33a>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d82:	445b      	add	r3, fp
 8012d84:	f103 0901 	add.w	r9, r3, #1
 8012d88:	9306      	str	r3, [sp, #24]
 8012d8a:	464b      	mov	r3, r9
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	bfb8      	it	lt
 8012d90:	2301      	movlt	r3, #1
 8012d92:	e7ba      	b.n	8012d0a <_dtoa_r+0x232>
 8012d94:	2300      	movs	r3, #0
 8012d96:	e7b2      	b.n	8012cfe <_dtoa_r+0x226>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	e7f0      	b.n	8012d7e <_dtoa_r+0x2a6>
 8012d9c:	2501      	movs	r5, #1
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012da4:	f04f 33ff 	mov.w	r3, #4294967295
 8012da8:	9306      	str	r3, [sp, #24]
 8012daa:	4699      	mov	r9, r3
 8012dac:	2200      	movs	r2, #0
 8012dae:	2312      	movs	r3, #18
 8012db0:	920a      	str	r2, [sp, #40]	; 0x28
 8012db2:	e7aa      	b.n	8012d0a <_dtoa_r+0x232>
 8012db4:	2301      	movs	r3, #1
 8012db6:	9309      	str	r3, [sp, #36]	; 0x24
 8012db8:	e7f4      	b.n	8012da4 <_dtoa_r+0x2cc>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	9306      	str	r3, [sp, #24]
 8012dbe:	4699      	mov	r9, r3
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	e7f5      	b.n	8012db0 <_dtoa_r+0x2d8>
 8012dc4:	3101      	adds	r1, #1
 8012dc6:	6071      	str	r1, [r6, #4]
 8012dc8:	0052      	lsls	r2, r2, #1
 8012dca:	e7a2      	b.n	8012d12 <_dtoa_r+0x23a>
 8012dcc:	f3af 8000 	nop.w
 8012dd0:	636f4361 	.word	0x636f4361
 8012dd4:	3fd287a7 	.word	0x3fd287a7
 8012dd8:	8b60c8b3 	.word	0x8b60c8b3
 8012ddc:	3fc68a28 	.word	0x3fc68a28
 8012de0:	509f79fb 	.word	0x509f79fb
 8012de4:	3fd34413 	.word	0x3fd34413
 8012de8:	7ff00000 	.word	0x7ff00000
 8012dec:	08015e01 	.word	0x08015e01
 8012df0:	08015df8 	.word	0x08015df8
 8012df4:	08015f9c 	.word	0x08015f9c
 8012df8:	08015ea0 	.word	0x08015ea0
 8012dfc:	08015e78 	.word	0x08015e78
 8012e00:	07de      	lsls	r6, r3, #31
 8012e02:	d504      	bpl.n	8012e0e <_dtoa_r+0x336>
 8012e04:	ed91 6b00 	vldr	d6, [r1]
 8012e08:	3201      	adds	r2, #1
 8012e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e0e:	105b      	asrs	r3, r3, #1
 8012e10:	3108      	adds	r1, #8
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1f4      	bne.n	8012e00 <_dtoa_r+0x328>
 8012e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	f000 80a7 	beq.w	8012f78 <_dtoa_r+0x4a0>
 8012e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3a:	f140 809d 	bpl.w	8012f78 <_dtoa_r+0x4a0>
 8012e3e:	f1b9 0f00 	cmp.w	r9, #0
 8012e42:	f000 8099 	beq.w	8012f78 <_dtoa_r+0x4a0>
 8012e46:	9b06      	ldr	r3, [sp, #24]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	dd30      	ble.n	8012eae <_dtoa_r+0x3d6>
 8012e4c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e58:	9d06      	ldr	r5, [sp, #24]
 8012e5a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012e5e:	3201      	adds	r2, #1
 8012e60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e64:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012e68:	ee07 2a90 	vmov	s15, r2
 8012e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e70:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012e74:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012e78:	9a03      	ldr	r2, [sp, #12]
 8012e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e7e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012e82:	2d00      	cmp	r5, #0
 8012e84:	d17b      	bne.n	8012f7e <_dtoa_r+0x4a6>
 8012e86:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012e8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e8e:	ec41 0b17 	vmov	d7, r0, r1
 8012e92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	f300 8253 	bgt.w	8013344 <_dtoa_r+0x86c>
 8012e9e:	eeb1 7b47 	vneg.f64	d7, d7
 8012ea2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eaa:	f100 8249 	bmi.w	8013340 <_dtoa_r+0x868>
 8012eae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f2c0 8119 	blt.w	80130f0 <_dtoa_r+0x618>
 8012ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8012ec2:	f300 8115 	bgt.w	80130f0 <_dtoa_r+0x618>
 8012ec6:	4bc3      	ldr	r3, [pc, #780]	; (80131d4 <_dtoa_r+0x6fc>)
 8012ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ecc:	ed93 6b00 	vldr	d6, [r3]
 8012ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f280 80ba 	bge.w	801304c <_dtoa_r+0x574>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	f300 80b6 	bgt.w	801304c <_dtoa_r+0x574>
 8012ee0:	f040 822d 	bne.w	801333e <_dtoa_r+0x866>
 8012ee4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012ee8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012eec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef8:	464d      	mov	r5, r9
 8012efa:	464f      	mov	r7, r9
 8012efc:	f280 8204 	bge.w	8013308 <_dtoa_r+0x830>
 8012f00:	9b04      	ldr	r3, [sp, #16]
 8012f02:	9a04      	ldr	r2, [sp, #16]
 8012f04:	1c5e      	adds	r6, r3, #1
 8012f06:	2331      	movs	r3, #49	; 0x31
 8012f08:	7013      	strb	r3, [r2, #0]
 8012f0a:	f10b 0b01 	add.w	fp, fp, #1
 8012f0e:	e1ff      	b.n	8013310 <_dtoa_r+0x838>
 8012f10:	2202      	movs	r2, #2
 8012f12:	e731      	b.n	8012d78 <_dtoa_r+0x2a0>
 8012f14:	d02e      	beq.n	8012f74 <_dtoa_r+0x49c>
 8012f16:	f1cb 0300 	rsb	r3, fp, #0
 8012f1a:	4aae      	ldr	r2, [pc, #696]	; (80131d4 <_dtoa_r+0x6fc>)
 8012f1c:	f003 010f 	and.w	r1, r3, #15
 8012f20:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012f24:	ed92 7b00 	vldr	d7, [r2]
 8012f28:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8012f2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012f34:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012f38:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012f3c:	49a6      	ldr	r1, [pc, #664]	; (80131d8 <_dtoa_r+0x700>)
 8012f3e:	111b      	asrs	r3, r3, #4
 8012f40:	2000      	movs	r0, #0
 8012f42:	2202      	movs	r2, #2
 8012f44:	b93b      	cbnz	r3, 8012f56 <_dtoa_r+0x47e>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	f43f af6b 	beq.w	8012e22 <_dtoa_r+0x34a>
 8012f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f54:	e765      	b.n	8012e22 <_dtoa_r+0x34a>
 8012f56:	07dd      	lsls	r5, r3, #31
 8012f58:	d509      	bpl.n	8012f6e <_dtoa_r+0x496>
 8012f5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012f5e:	ed91 7b00 	vldr	d7, [r1]
 8012f62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012f6a:	3201      	adds	r2, #1
 8012f6c:	2001      	movs	r0, #1
 8012f6e:	105b      	asrs	r3, r3, #1
 8012f70:	3108      	adds	r1, #8
 8012f72:	e7e7      	b.n	8012f44 <_dtoa_r+0x46c>
 8012f74:	2202      	movs	r2, #2
 8012f76:	e754      	b.n	8012e22 <_dtoa_r+0x34a>
 8012f78:	465b      	mov	r3, fp
 8012f7a:	464d      	mov	r5, r9
 8012f7c:	e770      	b.n	8012e60 <_dtoa_r+0x388>
 8012f7e:	4a95      	ldr	r2, [pc, #596]	; (80131d4 <_dtoa_r+0x6fc>)
 8012f80:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012f84:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f8a:	ec41 0b17 	vmov	d7, r0, r1
 8012f8e:	b35a      	cbz	r2, 8012fe8 <_dtoa_r+0x510>
 8012f90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012f94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012f98:	9e04      	ldr	r6, [sp, #16]
 8012f9a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012f9e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012fa2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012fa6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012faa:	ee14 2a90 	vmov	r2, s9
 8012fae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fb2:	3230      	adds	r2, #48	; 0x30
 8012fb4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc0:	f806 2b01 	strb.w	r2, [r6], #1
 8012fc4:	d43b      	bmi.n	801303e <_dtoa_r+0x566>
 8012fc6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012fca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd2:	d472      	bmi.n	80130ba <_dtoa_r+0x5e2>
 8012fd4:	9a04      	ldr	r2, [sp, #16]
 8012fd6:	1ab2      	subs	r2, r6, r2
 8012fd8:	4295      	cmp	r5, r2
 8012fda:	f77f af68 	ble.w	8012eae <_dtoa_r+0x3d6>
 8012fde:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012fe2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012fe6:	e7de      	b.n	8012fa6 <_dtoa_r+0x4ce>
 8012fe8:	9a04      	ldr	r2, [sp, #16]
 8012fea:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012fee:	1956      	adds	r6, r2, r5
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ff6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ffa:	ee14 2a90 	vmov	r2, s9
 8012ffe:	3230      	adds	r2, #48	; 0x30
 8013000:	f801 2b01 	strb.w	r2, [r1], #1
 8013004:	42b1      	cmp	r1, r6
 8013006:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801300a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801300e:	d11a      	bne.n	8013046 <_dtoa_r+0x56e>
 8013010:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013014:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013018:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	dc4b      	bgt.n	80130ba <_dtoa_r+0x5e2>
 8013022:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801302e:	f57f af3e 	bpl.w	8012eae <_dtoa_r+0x3d6>
 8013032:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013036:	2a30      	cmp	r2, #48	; 0x30
 8013038:	f106 31ff 	add.w	r1, r6, #4294967295
 801303c:	d001      	beq.n	8013042 <_dtoa_r+0x56a>
 801303e:	469b      	mov	fp, r3
 8013040:	e02a      	b.n	8013098 <_dtoa_r+0x5c0>
 8013042:	460e      	mov	r6, r1
 8013044:	e7f5      	b.n	8013032 <_dtoa_r+0x55a>
 8013046:	ee26 6b03 	vmul.f64	d6, d6, d3
 801304a:	e7d4      	b.n	8012ff6 <_dtoa_r+0x51e>
 801304c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013050:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013054:	9e04      	ldr	r6, [sp, #16]
 8013056:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801305a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801305e:	ee15 3a10 	vmov	r3, s10
 8013062:	3330      	adds	r3, #48	; 0x30
 8013064:	f806 3b01 	strb.w	r3, [r6], #1
 8013068:	9b04      	ldr	r3, [sp, #16]
 801306a:	1af3      	subs	r3, r6, r3
 801306c:	4599      	cmp	r9, r3
 801306e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013072:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013076:	d133      	bne.n	80130e0 <_dtoa_r+0x608>
 8013078:	ee37 7b07 	vadd.f64	d7, d7, d7
 801307c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013084:	dc18      	bgt.n	80130b8 <_dtoa_r+0x5e0>
 8013086:	eeb4 7b46 	vcmp.f64	d7, d6
 801308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308e:	d103      	bne.n	8013098 <_dtoa_r+0x5c0>
 8013090:	ee15 3a10 	vmov	r3, s10
 8013094:	07db      	lsls	r3, r3, #31
 8013096:	d40f      	bmi.n	80130b8 <_dtoa_r+0x5e0>
 8013098:	9901      	ldr	r1, [sp, #4]
 801309a:	4620      	mov	r0, r4
 801309c:	f000 ffe8 	bl	8014070 <_Bfree>
 80130a0:	2300      	movs	r3, #0
 80130a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130a4:	7033      	strb	r3, [r6, #0]
 80130a6:	f10b 0301 	add.w	r3, fp, #1
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f43f ad5b 	beq.w	8012b6a <_dtoa_r+0x92>
 80130b4:	601e      	str	r6, [r3, #0]
 80130b6:	e558      	b.n	8012b6a <_dtoa_r+0x92>
 80130b8:	465b      	mov	r3, fp
 80130ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80130be:	2939      	cmp	r1, #57	; 0x39
 80130c0:	f106 32ff 	add.w	r2, r6, #4294967295
 80130c4:	d106      	bne.n	80130d4 <_dtoa_r+0x5fc>
 80130c6:	9904      	ldr	r1, [sp, #16]
 80130c8:	4291      	cmp	r1, r2
 80130ca:	d107      	bne.n	80130dc <_dtoa_r+0x604>
 80130cc:	2230      	movs	r2, #48	; 0x30
 80130ce:	700a      	strb	r2, [r1, #0]
 80130d0:	3301      	adds	r3, #1
 80130d2:	460a      	mov	r2, r1
 80130d4:	7811      	ldrb	r1, [r2, #0]
 80130d6:	3101      	adds	r1, #1
 80130d8:	7011      	strb	r1, [r2, #0]
 80130da:	e7b0      	b.n	801303e <_dtoa_r+0x566>
 80130dc:	4616      	mov	r6, r2
 80130de:	e7ec      	b.n	80130ba <_dtoa_r+0x5e2>
 80130e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80130e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	d1b3      	bne.n	8013056 <_dtoa_r+0x57e>
 80130ee:	e7d3      	b.n	8013098 <_dtoa_r+0x5c0>
 80130f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130f2:	2a00      	cmp	r2, #0
 80130f4:	f000 808d 	beq.w	8013212 <_dtoa_r+0x73a>
 80130f8:	9a08      	ldr	r2, [sp, #32]
 80130fa:	2a01      	cmp	r2, #1
 80130fc:	dc72      	bgt.n	80131e4 <_dtoa_r+0x70c>
 80130fe:	2f00      	cmp	r7, #0
 8013100:	d06c      	beq.n	80131dc <_dtoa_r+0x704>
 8013102:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013106:	4645      	mov	r5, r8
 8013108:	4656      	mov	r6, sl
 801310a:	9a07      	ldr	r2, [sp, #28]
 801310c:	2101      	movs	r1, #1
 801310e:	441a      	add	r2, r3
 8013110:	4620      	mov	r0, r4
 8013112:	449a      	add	sl, r3
 8013114:	9207      	str	r2, [sp, #28]
 8013116:	f001 f889 	bl	801422c <__i2b>
 801311a:	4607      	mov	r7, r0
 801311c:	2e00      	cmp	r6, #0
 801311e:	dd0b      	ble.n	8013138 <_dtoa_r+0x660>
 8013120:	9b07      	ldr	r3, [sp, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	dd08      	ble.n	8013138 <_dtoa_r+0x660>
 8013126:	42b3      	cmp	r3, r6
 8013128:	9a07      	ldr	r2, [sp, #28]
 801312a:	bfa8      	it	ge
 801312c:	4633      	movge	r3, r6
 801312e:	ebaa 0a03 	sub.w	sl, sl, r3
 8013132:	1af6      	subs	r6, r6, r3
 8013134:	1ad3      	subs	r3, r2, r3
 8013136:	9307      	str	r3, [sp, #28]
 8013138:	f1b8 0f00 	cmp.w	r8, #0
 801313c:	d01d      	beq.n	801317a <_dtoa_r+0x6a2>
 801313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013140:	2b00      	cmp	r3, #0
 8013142:	d06a      	beq.n	801321a <_dtoa_r+0x742>
 8013144:	b18d      	cbz	r5, 801316a <_dtoa_r+0x692>
 8013146:	4639      	mov	r1, r7
 8013148:	462a      	mov	r2, r5
 801314a:	4620      	mov	r0, r4
 801314c:	f001 f90e 	bl	801436c <__pow5mult>
 8013150:	9a01      	ldr	r2, [sp, #4]
 8013152:	4601      	mov	r1, r0
 8013154:	4607      	mov	r7, r0
 8013156:	4620      	mov	r0, r4
 8013158:	f001 f871 	bl	801423e <__multiply>
 801315c:	9901      	ldr	r1, [sp, #4]
 801315e:	900c      	str	r0, [sp, #48]	; 0x30
 8013160:	4620      	mov	r0, r4
 8013162:	f000 ff85 	bl	8014070 <_Bfree>
 8013166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	ebb8 0205 	subs.w	r2, r8, r5
 801316e:	d004      	beq.n	801317a <_dtoa_r+0x6a2>
 8013170:	9901      	ldr	r1, [sp, #4]
 8013172:	4620      	mov	r0, r4
 8013174:	f001 f8fa 	bl	801436c <__pow5mult>
 8013178:	9001      	str	r0, [sp, #4]
 801317a:	2101      	movs	r1, #1
 801317c:	4620      	mov	r0, r4
 801317e:	f001 f855 	bl	801422c <__i2b>
 8013182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013184:	4605      	mov	r5, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	f000 81ca 	beq.w	8013520 <_dtoa_r+0xa48>
 801318c:	461a      	mov	r2, r3
 801318e:	4601      	mov	r1, r0
 8013190:	4620      	mov	r0, r4
 8013192:	f001 f8eb 	bl	801436c <__pow5mult>
 8013196:	9b08      	ldr	r3, [sp, #32]
 8013198:	2b01      	cmp	r3, #1
 801319a:	4605      	mov	r5, r0
 801319c:	dc44      	bgt.n	8013228 <_dtoa_r+0x750>
 801319e:	9b02      	ldr	r3, [sp, #8]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d13c      	bne.n	801321e <_dtoa_r+0x746>
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d137      	bne.n	801321e <_dtoa_r+0x746>
 80131ae:	9b03      	ldr	r3, [sp, #12]
 80131b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131b4:	0d1b      	lsrs	r3, r3, #20
 80131b6:	051b      	lsls	r3, r3, #20
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d033      	beq.n	8013224 <_dtoa_r+0x74c>
 80131bc:	9b07      	ldr	r3, [sp, #28]
 80131be:	3301      	adds	r3, #1
 80131c0:	f10a 0a01 	add.w	sl, sl, #1
 80131c4:	9307      	str	r3, [sp, #28]
 80131c6:	f04f 0801 	mov.w	r8, #1
 80131ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131cc:	bb73      	cbnz	r3, 801322c <_dtoa_r+0x754>
 80131ce:	2001      	movs	r0, #1
 80131d0:	e034      	b.n	801323c <_dtoa_r+0x764>
 80131d2:	bf00      	nop
 80131d4:	08015ea0 	.word	0x08015ea0
 80131d8:	08015e78 	.word	0x08015e78
 80131dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80131de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80131e2:	e790      	b.n	8013106 <_dtoa_r+0x62e>
 80131e4:	f109 35ff 	add.w	r5, r9, #4294967295
 80131e8:	45a8      	cmp	r8, r5
 80131ea:	bfbf      	itttt	lt
 80131ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80131ee:	eba5 0808 	sublt.w	r8, r5, r8
 80131f2:	4443      	addlt	r3, r8
 80131f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80131f6:	bfb6      	itet	lt
 80131f8:	46a8      	movlt	r8, r5
 80131fa:	eba8 0505 	subge.w	r5, r8, r5
 80131fe:	2500      	movlt	r5, #0
 8013200:	f1b9 0f00 	cmp.w	r9, #0
 8013204:	bfb9      	ittee	lt
 8013206:	ebaa 0609 	sublt.w	r6, sl, r9
 801320a:	2300      	movlt	r3, #0
 801320c:	4656      	movge	r6, sl
 801320e:	464b      	movge	r3, r9
 8013210:	e77b      	b.n	801310a <_dtoa_r+0x632>
 8013212:	4645      	mov	r5, r8
 8013214:	4656      	mov	r6, sl
 8013216:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013218:	e780      	b.n	801311c <_dtoa_r+0x644>
 801321a:	4642      	mov	r2, r8
 801321c:	e7a8      	b.n	8013170 <_dtoa_r+0x698>
 801321e:	f04f 0800 	mov.w	r8, #0
 8013222:	e7d2      	b.n	80131ca <_dtoa_r+0x6f2>
 8013224:	4698      	mov	r8, r3
 8013226:	e7d0      	b.n	80131ca <_dtoa_r+0x6f2>
 8013228:	f04f 0800 	mov.w	r8, #0
 801322c:	692b      	ldr	r3, [r5, #16]
 801322e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013232:	6918      	ldr	r0, [r3, #16]
 8013234:	f000 ffac 	bl	8014190 <__hi0bits>
 8013238:	f1c0 0020 	rsb	r0, r0, #32
 801323c:	9b07      	ldr	r3, [sp, #28]
 801323e:	4418      	add	r0, r3
 8013240:	f010 001f 	ands.w	r0, r0, #31
 8013244:	d047      	beq.n	80132d6 <_dtoa_r+0x7fe>
 8013246:	f1c0 0320 	rsb	r3, r0, #32
 801324a:	2b04      	cmp	r3, #4
 801324c:	dd3b      	ble.n	80132c6 <_dtoa_r+0x7ee>
 801324e:	9b07      	ldr	r3, [sp, #28]
 8013250:	f1c0 001c 	rsb	r0, r0, #28
 8013254:	4482      	add	sl, r0
 8013256:	4406      	add	r6, r0
 8013258:	4403      	add	r3, r0
 801325a:	9307      	str	r3, [sp, #28]
 801325c:	f1ba 0f00 	cmp.w	sl, #0
 8013260:	dd05      	ble.n	801326e <_dtoa_r+0x796>
 8013262:	4652      	mov	r2, sl
 8013264:	9901      	ldr	r1, [sp, #4]
 8013266:	4620      	mov	r0, r4
 8013268:	f001 f8ce 	bl	8014408 <__lshift>
 801326c:	9001      	str	r0, [sp, #4]
 801326e:	9b07      	ldr	r3, [sp, #28]
 8013270:	2b00      	cmp	r3, #0
 8013272:	dd05      	ble.n	8013280 <_dtoa_r+0x7a8>
 8013274:	4629      	mov	r1, r5
 8013276:	461a      	mov	r2, r3
 8013278:	4620      	mov	r0, r4
 801327a:	f001 f8c5 	bl	8014408 <__lshift>
 801327e:	4605      	mov	r5, r0
 8013280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013282:	b353      	cbz	r3, 80132da <_dtoa_r+0x802>
 8013284:	4629      	mov	r1, r5
 8013286:	9801      	ldr	r0, [sp, #4]
 8013288:	f001 f912 	bl	80144b0 <__mcmp>
 801328c:	2800      	cmp	r0, #0
 801328e:	da24      	bge.n	80132da <_dtoa_r+0x802>
 8013290:	2300      	movs	r3, #0
 8013292:	220a      	movs	r2, #10
 8013294:	9901      	ldr	r1, [sp, #4]
 8013296:	4620      	mov	r0, r4
 8013298:	f000 ff01 	bl	801409e <__multadd>
 801329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801329e:	9001      	str	r0, [sp, #4]
 80132a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 8142 	beq.w	801352e <_dtoa_r+0xa56>
 80132aa:	2300      	movs	r3, #0
 80132ac:	4639      	mov	r1, r7
 80132ae:	220a      	movs	r2, #10
 80132b0:	4620      	mov	r0, r4
 80132b2:	f000 fef4 	bl	801409e <__multadd>
 80132b6:	9b06      	ldr	r3, [sp, #24]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	4607      	mov	r7, r0
 80132bc:	dc4b      	bgt.n	8013356 <_dtoa_r+0x87e>
 80132be:	9b08      	ldr	r3, [sp, #32]
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	dd48      	ble.n	8013356 <_dtoa_r+0x87e>
 80132c4:	e011      	b.n	80132ea <_dtoa_r+0x812>
 80132c6:	d0c9      	beq.n	801325c <_dtoa_r+0x784>
 80132c8:	9a07      	ldr	r2, [sp, #28]
 80132ca:	331c      	adds	r3, #28
 80132cc:	441a      	add	r2, r3
 80132ce:	449a      	add	sl, r3
 80132d0:	441e      	add	r6, r3
 80132d2:	4613      	mov	r3, r2
 80132d4:	e7c1      	b.n	801325a <_dtoa_r+0x782>
 80132d6:	4603      	mov	r3, r0
 80132d8:	e7f6      	b.n	80132c8 <_dtoa_r+0x7f0>
 80132da:	f1b9 0f00 	cmp.w	r9, #0
 80132de:	dc34      	bgt.n	801334a <_dtoa_r+0x872>
 80132e0:	9b08      	ldr	r3, [sp, #32]
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	dd31      	ble.n	801334a <_dtoa_r+0x872>
 80132e6:	f8cd 9018 	str.w	r9, [sp, #24]
 80132ea:	9b06      	ldr	r3, [sp, #24]
 80132ec:	b963      	cbnz	r3, 8013308 <_dtoa_r+0x830>
 80132ee:	4629      	mov	r1, r5
 80132f0:	2205      	movs	r2, #5
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 fed3 	bl	801409e <__multadd>
 80132f8:	4601      	mov	r1, r0
 80132fa:	4605      	mov	r5, r0
 80132fc:	9801      	ldr	r0, [sp, #4]
 80132fe:	f001 f8d7 	bl	80144b0 <__mcmp>
 8013302:	2800      	cmp	r0, #0
 8013304:	f73f adfc 	bgt.w	8012f00 <_dtoa_r+0x428>
 8013308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801330a:	9e04      	ldr	r6, [sp, #16]
 801330c:	ea6f 0b03 	mvn.w	fp, r3
 8013310:	f04f 0900 	mov.w	r9, #0
 8013314:	4629      	mov	r1, r5
 8013316:	4620      	mov	r0, r4
 8013318:	f000 feaa 	bl	8014070 <_Bfree>
 801331c:	2f00      	cmp	r7, #0
 801331e:	f43f aebb 	beq.w	8013098 <_dtoa_r+0x5c0>
 8013322:	f1b9 0f00 	cmp.w	r9, #0
 8013326:	d005      	beq.n	8013334 <_dtoa_r+0x85c>
 8013328:	45b9      	cmp	r9, r7
 801332a:	d003      	beq.n	8013334 <_dtoa_r+0x85c>
 801332c:	4649      	mov	r1, r9
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fe9e 	bl	8014070 <_Bfree>
 8013334:	4639      	mov	r1, r7
 8013336:	4620      	mov	r0, r4
 8013338:	f000 fe9a 	bl	8014070 <_Bfree>
 801333c:	e6ac      	b.n	8013098 <_dtoa_r+0x5c0>
 801333e:	2500      	movs	r5, #0
 8013340:	462f      	mov	r7, r5
 8013342:	e7e1      	b.n	8013308 <_dtoa_r+0x830>
 8013344:	469b      	mov	fp, r3
 8013346:	462f      	mov	r7, r5
 8013348:	e5da      	b.n	8012f00 <_dtoa_r+0x428>
 801334a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334c:	f8cd 9018 	str.w	r9, [sp, #24]
 8013350:	2b00      	cmp	r3, #0
 8013352:	f000 80f3 	beq.w	801353c <_dtoa_r+0xa64>
 8013356:	2e00      	cmp	r6, #0
 8013358:	dd05      	ble.n	8013366 <_dtoa_r+0x88e>
 801335a:	4639      	mov	r1, r7
 801335c:	4632      	mov	r2, r6
 801335e:	4620      	mov	r0, r4
 8013360:	f001 f852 	bl	8014408 <__lshift>
 8013364:	4607      	mov	r7, r0
 8013366:	f1b8 0f00 	cmp.w	r8, #0
 801336a:	d04c      	beq.n	8013406 <_dtoa_r+0x92e>
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	4620      	mov	r0, r4
 8013370:	f000 fe4a 	bl	8014008 <_Balloc>
 8013374:	693a      	ldr	r2, [r7, #16]
 8013376:	3202      	adds	r2, #2
 8013378:	4606      	mov	r6, r0
 801337a:	0092      	lsls	r2, r2, #2
 801337c:	f107 010c 	add.w	r1, r7, #12
 8013380:	300c      	adds	r0, #12
 8013382:	f7fd fb6f 	bl	8010a64 <memcpy>
 8013386:	2201      	movs	r2, #1
 8013388:	4631      	mov	r1, r6
 801338a:	4620      	mov	r0, r4
 801338c:	f001 f83c 	bl	8014408 <__lshift>
 8013390:	9b02      	ldr	r3, [sp, #8]
 8013392:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013396:	f003 0301 	and.w	r3, r3, #1
 801339a:	46b9      	mov	r9, r7
 801339c:	9307      	str	r3, [sp, #28]
 801339e:	4607      	mov	r7, r0
 80133a0:	4629      	mov	r1, r5
 80133a2:	9801      	ldr	r0, [sp, #4]
 80133a4:	f7ff fb0c 	bl	80129c0 <quorem>
 80133a8:	4649      	mov	r1, r9
 80133aa:	4606      	mov	r6, r0
 80133ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80133b0:	9801      	ldr	r0, [sp, #4]
 80133b2:	f001 f87d 	bl	80144b0 <__mcmp>
 80133b6:	463a      	mov	r2, r7
 80133b8:	9002      	str	r0, [sp, #8]
 80133ba:	4629      	mov	r1, r5
 80133bc:	4620      	mov	r0, r4
 80133be:	f001 f891 	bl	80144e4 <__mdiff>
 80133c2:	68c3      	ldr	r3, [r0, #12]
 80133c4:	4602      	mov	r2, r0
 80133c6:	bb03      	cbnz	r3, 801340a <_dtoa_r+0x932>
 80133c8:	4601      	mov	r1, r0
 80133ca:	9009      	str	r0, [sp, #36]	; 0x24
 80133cc:	9801      	ldr	r0, [sp, #4]
 80133ce:	f001 f86f 	bl	80144b0 <__mcmp>
 80133d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133d4:	4603      	mov	r3, r0
 80133d6:	4611      	mov	r1, r2
 80133d8:	4620      	mov	r0, r4
 80133da:	9309      	str	r3, [sp, #36]	; 0x24
 80133dc:	f000 fe48 	bl	8014070 <_Bfree>
 80133e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e2:	b9a3      	cbnz	r3, 801340e <_dtoa_r+0x936>
 80133e4:	9a08      	ldr	r2, [sp, #32]
 80133e6:	b992      	cbnz	r2, 801340e <_dtoa_r+0x936>
 80133e8:	9a07      	ldr	r2, [sp, #28]
 80133ea:	b982      	cbnz	r2, 801340e <_dtoa_r+0x936>
 80133ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80133f0:	d029      	beq.n	8013446 <_dtoa_r+0x96e>
 80133f2:	9b02      	ldr	r3, [sp, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	dd01      	ble.n	80133fc <_dtoa_r+0x924>
 80133f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80133fc:	f10a 0601 	add.w	r6, sl, #1
 8013400:	f88a 8000 	strb.w	r8, [sl]
 8013404:	e786      	b.n	8013314 <_dtoa_r+0x83c>
 8013406:	4638      	mov	r0, r7
 8013408:	e7c2      	b.n	8013390 <_dtoa_r+0x8b8>
 801340a:	2301      	movs	r3, #1
 801340c:	e7e3      	b.n	80133d6 <_dtoa_r+0x8fe>
 801340e:	9a02      	ldr	r2, [sp, #8]
 8013410:	2a00      	cmp	r2, #0
 8013412:	db04      	blt.n	801341e <_dtoa_r+0x946>
 8013414:	d124      	bne.n	8013460 <_dtoa_r+0x988>
 8013416:	9a08      	ldr	r2, [sp, #32]
 8013418:	bb12      	cbnz	r2, 8013460 <_dtoa_r+0x988>
 801341a:	9a07      	ldr	r2, [sp, #28]
 801341c:	bb02      	cbnz	r2, 8013460 <_dtoa_r+0x988>
 801341e:	2b00      	cmp	r3, #0
 8013420:	ddec      	ble.n	80133fc <_dtoa_r+0x924>
 8013422:	2201      	movs	r2, #1
 8013424:	9901      	ldr	r1, [sp, #4]
 8013426:	4620      	mov	r0, r4
 8013428:	f000 ffee 	bl	8014408 <__lshift>
 801342c:	4629      	mov	r1, r5
 801342e:	9001      	str	r0, [sp, #4]
 8013430:	f001 f83e 	bl	80144b0 <__mcmp>
 8013434:	2800      	cmp	r0, #0
 8013436:	dc03      	bgt.n	8013440 <_dtoa_r+0x968>
 8013438:	d1e0      	bne.n	80133fc <_dtoa_r+0x924>
 801343a:	f018 0f01 	tst.w	r8, #1
 801343e:	d0dd      	beq.n	80133fc <_dtoa_r+0x924>
 8013440:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013444:	d1d8      	bne.n	80133f8 <_dtoa_r+0x920>
 8013446:	2339      	movs	r3, #57	; 0x39
 8013448:	f10a 0601 	add.w	r6, sl, #1
 801344c:	f88a 3000 	strb.w	r3, [sl]
 8013450:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013454:	2b39      	cmp	r3, #57	; 0x39
 8013456:	f106 32ff 	add.w	r2, r6, #4294967295
 801345a:	d04c      	beq.n	80134f6 <_dtoa_r+0xa1e>
 801345c:	3301      	adds	r3, #1
 801345e:	e051      	b.n	8013504 <_dtoa_r+0xa2c>
 8013460:	2b00      	cmp	r3, #0
 8013462:	f10a 0601 	add.w	r6, sl, #1
 8013466:	dd05      	ble.n	8013474 <_dtoa_r+0x99c>
 8013468:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801346c:	d0eb      	beq.n	8013446 <_dtoa_r+0x96e>
 801346e:	f108 0801 	add.w	r8, r8, #1
 8013472:	e7c5      	b.n	8013400 <_dtoa_r+0x928>
 8013474:	9b04      	ldr	r3, [sp, #16]
 8013476:	9a06      	ldr	r2, [sp, #24]
 8013478:	f806 8c01 	strb.w	r8, [r6, #-1]
 801347c:	1af3      	subs	r3, r6, r3
 801347e:	4293      	cmp	r3, r2
 8013480:	d021      	beq.n	80134c6 <_dtoa_r+0x9ee>
 8013482:	2300      	movs	r3, #0
 8013484:	220a      	movs	r2, #10
 8013486:	9901      	ldr	r1, [sp, #4]
 8013488:	4620      	mov	r0, r4
 801348a:	f000 fe08 	bl	801409e <__multadd>
 801348e:	45b9      	cmp	r9, r7
 8013490:	9001      	str	r0, [sp, #4]
 8013492:	f04f 0300 	mov.w	r3, #0
 8013496:	f04f 020a 	mov.w	r2, #10
 801349a:	4649      	mov	r1, r9
 801349c:	4620      	mov	r0, r4
 801349e:	d105      	bne.n	80134ac <_dtoa_r+0x9d4>
 80134a0:	f000 fdfd 	bl	801409e <__multadd>
 80134a4:	4681      	mov	r9, r0
 80134a6:	4607      	mov	r7, r0
 80134a8:	46b2      	mov	sl, r6
 80134aa:	e779      	b.n	80133a0 <_dtoa_r+0x8c8>
 80134ac:	f000 fdf7 	bl	801409e <__multadd>
 80134b0:	4639      	mov	r1, r7
 80134b2:	4681      	mov	r9, r0
 80134b4:	2300      	movs	r3, #0
 80134b6:	220a      	movs	r2, #10
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fdf0 	bl	801409e <__multadd>
 80134be:	4607      	mov	r7, r0
 80134c0:	e7f2      	b.n	80134a8 <_dtoa_r+0x9d0>
 80134c2:	f04f 0900 	mov.w	r9, #0
 80134c6:	2201      	movs	r2, #1
 80134c8:	9901      	ldr	r1, [sp, #4]
 80134ca:	4620      	mov	r0, r4
 80134cc:	f000 ff9c 	bl	8014408 <__lshift>
 80134d0:	4629      	mov	r1, r5
 80134d2:	9001      	str	r0, [sp, #4]
 80134d4:	f000 ffec 	bl	80144b0 <__mcmp>
 80134d8:	2800      	cmp	r0, #0
 80134da:	dcb9      	bgt.n	8013450 <_dtoa_r+0x978>
 80134dc:	d102      	bne.n	80134e4 <_dtoa_r+0xa0c>
 80134de:	f018 0f01 	tst.w	r8, #1
 80134e2:	d1b5      	bne.n	8013450 <_dtoa_r+0x978>
 80134e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80134e8:	2b30      	cmp	r3, #48	; 0x30
 80134ea:	f106 32ff 	add.w	r2, r6, #4294967295
 80134ee:	f47f af11 	bne.w	8013314 <_dtoa_r+0x83c>
 80134f2:	4616      	mov	r6, r2
 80134f4:	e7f6      	b.n	80134e4 <_dtoa_r+0xa0c>
 80134f6:	9b04      	ldr	r3, [sp, #16]
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d105      	bne.n	8013508 <_dtoa_r+0xa30>
 80134fc:	9a04      	ldr	r2, [sp, #16]
 80134fe:	f10b 0b01 	add.w	fp, fp, #1
 8013502:	2331      	movs	r3, #49	; 0x31
 8013504:	7013      	strb	r3, [r2, #0]
 8013506:	e705      	b.n	8013314 <_dtoa_r+0x83c>
 8013508:	4616      	mov	r6, r2
 801350a:	e7a1      	b.n	8013450 <_dtoa_r+0x978>
 801350c:	4b16      	ldr	r3, [pc, #88]	; (8013568 <_dtoa_r+0xa90>)
 801350e:	f7ff bb48 	b.w	8012ba2 <_dtoa_r+0xca>
 8013512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013514:	2b00      	cmp	r3, #0
 8013516:	f47f ab23 	bne.w	8012b60 <_dtoa_r+0x88>
 801351a:	4b14      	ldr	r3, [pc, #80]	; (801356c <_dtoa_r+0xa94>)
 801351c:	f7ff bb41 	b.w	8012ba2 <_dtoa_r+0xca>
 8013520:	9b08      	ldr	r3, [sp, #32]
 8013522:	2b01      	cmp	r3, #1
 8013524:	f77f ae3b 	ble.w	801319e <_dtoa_r+0x6c6>
 8013528:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801352c:	e64f      	b.n	80131ce <_dtoa_r+0x6f6>
 801352e:	9b06      	ldr	r3, [sp, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	dc03      	bgt.n	801353c <_dtoa_r+0xa64>
 8013534:	9b08      	ldr	r3, [sp, #32]
 8013536:	2b02      	cmp	r3, #2
 8013538:	f73f aed7 	bgt.w	80132ea <_dtoa_r+0x812>
 801353c:	9e04      	ldr	r6, [sp, #16]
 801353e:	9801      	ldr	r0, [sp, #4]
 8013540:	4629      	mov	r1, r5
 8013542:	f7ff fa3d 	bl	80129c0 <quorem>
 8013546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801354a:	f806 8b01 	strb.w	r8, [r6], #1
 801354e:	9b04      	ldr	r3, [sp, #16]
 8013550:	9a06      	ldr	r2, [sp, #24]
 8013552:	1af3      	subs	r3, r6, r3
 8013554:	429a      	cmp	r2, r3
 8013556:	ddb4      	ble.n	80134c2 <_dtoa_r+0x9ea>
 8013558:	2300      	movs	r3, #0
 801355a:	220a      	movs	r2, #10
 801355c:	9901      	ldr	r1, [sp, #4]
 801355e:	4620      	mov	r0, r4
 8013560:	f000 fd9d 	bl	801409e <__multadd>
 8013564:	9001      	str	r0, [sp, #4]
 8013566:	e7ea      	b.n	801353e <_dtoa_r+0xa66>
 8013568:	08015f9b 	.word	0x08015f9b
 801356c:	08015df8 	.word	0x08015df8

08013570 <__sflush_r>:
 8013570:	898a      	ldrh	r2, [r1, #12]
 8013572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013576:	4605      	mov	r5, r0
 8013578:	0710      	lsls	r0, r2, #28
 801357a:	460c      	mov	r4, r1
 801357c:	d458      	bmi.n	8013630 <__sflush_r+0xc0>
 801357e:	684b      	ldr	r3, [r1, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	dc05      	bgt.n	8013590 <__sflush_r+0x20>
 8013584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013586:	2b00      	cmp	r3, #0
 8013588:	dc02      	bgt.n	8013590 <__sflush_r+0x20>
 801358a:	2000      	movs	r0, #0
 801358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013592:	2e00      	cmp	r6, #0
 8013594:	d0f9      	beq.n	801358a <__sflush_r+0x1a>
 8013596:	2300      	movs	r3, #0
 8013598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801359c:	682f      	ldr	r7, [r5, #0]
 801359e:	6a21      	ldr	r1, [r4, #32]
 80135a0:	602b      	str	r3, [r5, #0]
 80135a2:	d032      	beq.n	801360a <__sflush_r+0x9a>
 80135a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135a6:	89a3      	ldrh	r3, [r4, #12]
 80135a8:	075a      	lsls	r2, r3, #29
 80135aa:	d505      	bpl.n	80135b8 <__sflush_r+0x48>
 80135ac:	6863      	ldr	r3, [r4, #4]
 80135ae:	1ac0      	subs	r0, r0, r3
 80135b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135b2:	b10b      	cbz	r3, 80135b8 <__sflush_r+0x48>
 80135b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135b6:	1ac0      	subs	r0, r0, r3
 80135b8:	2300      	movs	r3, #0
 80135ba:	4602      	mov	r2, r0
 80135bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135be:	6a21      	ldr	r1, [r4, #32]
 80135c0:	4628      	mov	r0, r5
 80135c2:	47b0      	blx	r6
 80135c4:	1c43      	adds	r3, r0, #1
 80135c6:	89a3      	ldrh	r3, [r4, #12]
 80135c8:	d106      	bne.n	80135d8 <__sflush_r+0x68>
 80135ca:	6829      	ldr	r1, [r5, #0]
 80135cc:	291d      	cmp	r1, #29
 80135ce:	d848      	bhi.n	8013662 <__sflush_r+0xf2>
 80135d0:	4a29      	ldr	r2, [pc, #164]	; (8013678 <__sflush_r+0x108>)
 80135d2:	40ca      	lsrs	r2, r1
 80135d4:	07d6      	lsls	r6, r2, #31
 80135d6:	d544      	bpl.n	8013662 <__sflush_r+0xf2>
 80135d8:	2200      	movs	r2, #0
 80135da:	6062      	str	r2, [r4, #4]
 80135dc:	04d9      	lsls	r1, r3, #19
 80135de:	6922      	ldr	r2, [r4, #16]
 80135e0:	6022      	str	r2, [r4, #0]
 80135e2:	d504      	bpl.n	80135ee <__sflush_r+0x7e>
 80135e4:	1c42      	adds	r2, r0, #1
 80135e6:	d101      	bne.n	80135ec <__sflush_r+0x7c>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b903      	cbnz	r3, 80135ee <__sflush_r+0x7e>
 80135ec:	6560      	str	r0, [r4, #84]	; 0x54
 80135ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135f0:	602f      	str	r7, [r5, #0]
 80135f2:	2900      	cmp	r1, #0
 80135f4:	d0c9      	beq.n	801358a <__sflush_r+0x1a>
 80135f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135fa:	4299      	cmp	r1, r3
 80135fc:	d002      	beq.n	8013604 <__sflush_r+0x94>
 80135fe:	4628      	mov	r0, r5
 8013600:	f7fd fa52 	bl	8010aa8 <_free_r>
 8013604:	2000      	movs	r0, #0
 8013606:	6360      	str	r0, [r4, #52]	; 0x34
 8013608:	e7c0      	b.n	801358c <__sflush_r+0x1c>
 801360a:	2301      	movs	r3, #1
 801360c:	4628      	mov	r0, r5
 801360e:	47b0      	blx	r6
 8013610:	1c41      	adds	r1, r0, #1
 8013612:	d1c8      	bne.n	80135a6 <__sflush_r+0x36>
 8013614:	682b      	ldr	r3, [r5, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d0c5      	beq.n	80135a6 <__sflush_r+0x36>
 801361a:	2b1d      	cmp	r3, #29
 801361c:	d001      	beq.n	8013622 <__sflush_r+0xb2>
 801361e:	2b16      	cmp	r3, #22
 8013620:	d101      	bne.n	8013626 <__sflush_r+0xb6>
 8013622:	602f      	str	r7, [r5, #0]
 8013624:	e7b1      	b.n	801358a <__sflush_r+0x1a>
 8013626:	89a3      	ldrh	r3, [r4, #12]
 8013628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801362c:	81a3      	strh	r3, [r4, #12]
 801362e:	e7ad      	b.n	801358c <__sflush_r+0x1c>
 8013630:	690f      	ldr	r7, [r1, #16]
 8013632:	2f00      	cmp	r7, #0
 8013634:	d0a9      	beq.n	801358a <__sflush_r+0x1a>
 8013636:	0793      	lsls	r3, r2, #30
 8013638:	680e      	ldr	r6, [r1, #0]
 801363a:	bf08      	it	eq
 801363c:	694b      	ldreq	r3, [r1, #20]
 801363e:	600f      	str	r7, [r1, #0]
 8013640:	bf18      	it	ne
 8013642:	2300      	movne	r3, #0
 8013644:	eba6 0807 	sub.w	r8, r6, r7
 8013648:	608b      	str	r3, [r1, #8]
 801364a:	f1b8 0f00 	cmp.w	r8, #0
 801364e:	dd9c      	ble.n	801358a <__sflush_r+0x1a>
 8013650:	4643      	mov	r3, r8
 8013652:	463a      	mov	r2, r7
 8013654:	6a21      	ldr	r1, [r4, #32]
 8013656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013658:	4628      	mov	r0, r5
 801365a:	47b0      	blx	r6
 801365c:	2800      	cmp	r0, #0
 801365e:	dc06      	bgt.n	801366e <__sflush_r+0xfe>
 8013660:	89a3      	ldrh	r3, [r4, #12]
 8013662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013666:	81a3      	strh	r3, [r4, #12]
 8013668:	f04f 30ff 	mov.w	r0, #4294967295
 801366c:	e78e      	b.n	801358c <__sflush_r+0x1c>
 801366e:	4407      	add	r7, r0
 8013670:	eba8 0800 	sub.w	r8, r8, r0
 8013674:	e7e9      	b.n	801364a <__sflush_r+0xda>
 8013676:	bf00      	nop
 8013678:	20400001 	.word	0x20400001

0801367c <_fflush_r>:
 801367c:	b538      	push	{r3, r4, r5, lr}
 801367e:	690b      	ldr	r3, [r1, #16]
 8013680:	4605      	mov	r5, r0
 8013682:	460c      	mov	r4, r1
 8013684:	b1db      	cbz	r3, 80136be <_fflush_r+0x42>
 8013686:	b118      	cbz	r0, 8013690 <_fflush_r+0x14>
 8013688:	6983      	ldr	r3, [r0, #24]
 801368a:	b90b      	cbnz	r3, 8013690 <_fflush_r+0x14>
 801368c:	f000 f860 	bl	8013750 <__sinit>
 8013690:	4b0c      	ldr	r3, [pc, #48]	; (80136c4 <_fflush_r+0x48>)
 8013692:	429c      	cmp	r4, r3
 8013694:	d109      	bne.n	80136aa <_fflush_r+0x2e>
 8013696:	686c      	ldr	r4, [r5, #4]
 8013698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801369c:	b17b      	cbz	r3, 80136be <_fflush_r+0x42>
 801369e:	4621      	mov	r1, r4
 80136a0:	4628      	mov	r0, r5
 80136a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136a6:	f7ff bf63 	b.w	8013570 <__sflush_r>
 80136aa:	4b07      	ldr	r3, [pc, #28]	; (80136c8 <_fflush_r+0x4c>)
 80136ac:	429c      	cmp	r4, r3
 80136ae:	d101      	bne.n	80136b4 <_fflush_r+0x38>
 80136b0:	68ac      	ldr	r4, [r5, #8]
 80136b2:	e7f1      	b.n	8013698 <_fflush_r+0x1c>
 80136b4:	4b05      	ldr	r3, [pc, #20]	; (80136cc <_fflush_r+0x50>)
 80136b6:	429c      	cmp	r4, r3
 80136b8:	bf08      	it	eq
 80136ba:	68ec      	ldreq	r4, [r5, #12]
 80136bc:	e7ec      	b.n	8013698 <_fflush_r+0x1c>
 80136be:	2000      	movs	r0, #0
 80136c0:	bd38      	pop	{r3, r4, r5, pc}
 80136c2:	bf00      	nop
 80136c4:	08015e28 	.word	0x08015e28
 80136c8:	08015e48 	.word	0x08015e48
 80136cc:	08015e08 	.word	0x08015e08

080136d0 <std>:
 80136d0:	2300      	movs	r3, #0
 80136d2:	b510      	push	{r4, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	e9c0 3300 	strd	r3, r3, [r0]
 80136da:	6083      	str	r3, [r0, #8]
 80136dc:	8181      	strh	r1, [r0, #12]
 80136de:	6643      	str	r3, [r0, #100]	; 0x64
 80136e0:	81c2      	strh	r2, [r0, #14]
 80136e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136e6:	6183      	str	r3, [r0, #24]
 80136e8:	4619      	mov	r1, r3
 80136ea:	2208      	movs	r2, #8
 80136ec:	305c      	adds	r0, #92	; 0x5c
 80136ee:	f7fd f9c4 	bl	8010a7a <memset>
 80136f2:	4b05      	ldr	r3, [pc, #20]	; (8013708 <std+0x38>)
 80136f4:	6263      	str	r3, [r4, #36]	; 0x24
 80136f6:	4b05      	ldr	r3, [pc, #20]	; (801370c <std+0x3c>)
 80136f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80136fa:	4b05      	ldr	r3, [pc, #20]	; (8013710 <std+0x40>)
 80136fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136fe:	4b05      	ldr	r3, [pc, #20]	; (8013714 <std+0x44>)
 8013700:	6224      	str	r4, [r4, #32]
 8013702:	6323      	str	r3, [r4, #48]	; 0x30
 8013704:	bd10      	pop	{r4, pc}
 8013706:	bf00      	nop
 8013708:	08011a71 	.word	0x08011a71
 801370c:	08011a97 	.word	0x08011a97
 8013710:	08011acf 	.word	0x08011acf
 8013714:	08011af3 	.word	0x08011af3

08013718 <_cleanup_r>:
 8013718:	4901      	ldr	r1, [pc, #4]	; (8013720 <_cleanup_r+0x8>)
 801371a:	f000 b885 	b.w	8013828 <_fwalk_reent>
 801371e:	bf00      	nop
 8013720:	0801367d 	.word	0x0801367d

08013724 <__sfmoreglue>:
 8013724:	b570      	push	{r4, r5, r6, lr}
 8013726:	1e4a      	subs	r2, r1, #1
 8013728:	2568      	movs	r5, #104	; 0x68
 801372a:	4355      	muls	r5, r2
 801372c:	460e      	mov	r6, r1
 801372e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013732:	f7fd fa07 	bl	8010b44 <_malloc_r>
 8013736:	4604      	mov	r4, r0
 8013738:	b140      	cbz	r0, 801374c <__sfmoreglue+0x28>
 801373a:	2100      	movs	r1, #0
 801373c:	e9c0 1600 	strd	r1, r6, [r0]
 8013740:	300c      	adds	r0, #12
 8013742:	60a0      	str	r0, [r4, #8]
 8013744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013748:	f7fd f997 	bl	8010a7a <memset>
 801374c:	4620      	mov	r0, r4
 801374e:	bd70      	pop	{r4, r5, r6, pc}

08013750 <__sinit>:
 8013750:	6983      	ldr	r3, [r0, #24]
 8013752:	b510      	push	{r4, lr}
 8013754:	4604      	mov	r4, r0
 8013756:	bb33      	cbnz	r3, 80137a6 <__sinit+0x56>
 8013758:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801375c:	6503      	str	r3, [r0, #80]	; 0x50
 801375e:	4b12      	ldr	r3, [pc, #72]	; (80137a8 <__sinit+0x58>)
 8013760:	4a12      	ldr	r2, [pc, #72]	; (80137ac <__sinit+0x5c>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	6282      	str	r2, [r0, #40]	; 0x28
 8013766:	4298      	cmp	r0, r3
 8013768:	bf04      	itt	eq
 801376a:	2301      	moveq	r3, #1
 801376c:	6183      	streq	r3, [r0, #24]
 801376e:	f000 f81f 	bl	80137b0 <__sfp>
 8013772:	6060      	str	r0, [r4, #4]
 8013774:	4620      	mov	r0, r4
 8013776:	f000 f81b 	bl	80137b0 <__sfp>
 801377a:	60a0      	str	r0, [r4, #8]
 801377c:	4620      	mov	r0, r4
 801377e:	f000 f817 	bl	80137b0 <__sfp>
 8013782:	2200      	movs	r2, #0
 8013784:	60e0      	str	r0, [r4, #12]
 8013786:	2104      	movs	r1, #4
 8013788:	6860      	ldr	r0, [r4, #4]
 801378a:	f7ff ffa1 	bl	80136d0 <std>
 801378e:	2201      	movs	r2, #1
 8013790:	2109      	movs	r1, #9
 8013792:	68a0      	ldr	r0, [r4, #8]
 8013794:	f7ff ff9c 	bl	80136d0 <std>
 8013798:	2202      	movs	r2, #2
 801379a:	2112      	movs	r1, #18
 801379c:	68e0      	ldr	r0, [r4, #12]
 801379e:	f7ff ff97 	bl	80136d0 <std>
 80137a2:	2301      	movs	r3, #1
 80137a4:	61a3      	str	r3, [r4, #24]
 80137a6:	bd10      	pop	{r4, pc}
 80137a8:	08015d68 	.word	0x08015d68
 80137ac:	08013719 	.word	0x08013719

080137b0 <__sfp>:
 80137b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b2:	4b1b      	ldr	r3, [pc, #108]	; (8013820 <__sfp+0x70>)
 80137b4:	681e      	ldr	r6, [r3, #0]
 80137b6:	69b3      	ldr	r3, [r6, #24]
 80137b8:	4607      	mov	r7, r0
 80137ba:	b913      	cbnz	r3, 80137c2 <__sfp+0x12>
 80137bc:	4630      	mov	r0, r6
 80137be:	f7ff ffc7 	bl	8013750 <__sinit>
 80137c2:	3648      	adds	r6, #72	; 0x48
 80137c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137c8:	3b01      	subs	r3, #1
 80137ca:	d503      	bpl.n	80137d4 <__sfp+0x24>
 80137cc:	6833      	ldr	r3, [r6, #0]
 80137ce:	b133      	cbz	r3, 80137de <__sfp+0x2e>
 80137d0:	6836      	ldr	r6, [r6, #0]
 80137d2:	e7f7      	b.n	80137c4 <__sfp+0x14>
 80137d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137d8:	b16d      	cbz	r5, 80137f6 <__sfp+0x46>
 80137da:	3468      	adds	r4, #104	; 0x68
 80137dc:	e7f4      	b.n	80137c8 <__sfp+0x18>
 80137de:	2104      	movs	r1, #4
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7ff ff9f 	bl	8013724 <__sfmoreglue>
 80137e6:	6030      	str	r0, [r6, #0]
 80137e8:	2800      	cmp	r0, #0
 80137ea:	d1f1      	bne.n	80137d0 <__sfp+0x20>
 80137ec:	230c      	movs	r3, #12
 80137ee:	603b      	str	r3, [r7, #0]
 80137f0:	4604      	mov	r4, r0
 80137f2:	4620      	mov	r0, r4
 80137f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f6:	4b0b      	ldr	r3, [pc, #44]	; (8013824 <__sfp+0x74>)
 80137f8:	6665      	str	r5, [r4, #100]	; 0x64
 80137fa:	e9c4 5500 	strd	r5, r5, [r4]
 80137fe:	60a5      	str	r5, [r4, #8]
 8013800:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013804:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013808:	2208      	movs	r2, #8
 801380a:	4629      	mov	r1, r5
 801380c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013810:	f7fd f933 	bl	8010a7a <memset>
 8013814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801381c:	e7e9      	b.n	80137f2 <__sfp+0x42>
 801381e:	bf00      	nop
 8013820:	08015d68 	.word	0x08015d68
 8013824:	ffff0001 	.word	0xffff0001

08013828 <_fwalk_reent>:
 8013828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801382c:	4680      	mov	r8, r0
 801382e:	4689      	mov	r9, r1
 8013830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013834:	2600      	movs	r6, #0
 8013836:	b914      	cbnz	r4, 801383e <_fwalk_reent+0x16>
 8013838:	4630      	mov	r0, r6
 801383a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801383e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013842:	3f01      	subs	r7, #1
 8013844:	d501      	bpl.n	801384a <_fwalk_reent+0x22>
 8013846:	6824      	ldr	r4, [r4, #0]
 8013848:	e7f5      	b.n	8013836 <_fwalk_reent+0xe>
 801384a:	89ab      	ldrh	r3, [r5, #12]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d907      	bls.n	8013860 <_fwalk_reent+0x38>
 8013850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013854:	3301      	adds	r3, #1
 8013856:	d003      	beq.n	8013860 <_fwalk_reent+0x38>
 8013858:	4629      	mov	r1, r5
 801385a:	4640      	mov	r0, r8
 801385c:	47c8      	blx	r9
 801385e:	4306      	orrs	r6, r0
 8013860:	3568      	adds	r5, #104	; 0x68
 8013862:	e7ee      	b.n	8013842 <_fwalk_reent+0x1a>

08013864 <rshift>:
 8013864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013866:	6906      	ldr	r6, [r0, #16]
 8013868:	114b      	asrs	r3, r1, #5
 801386a:	429e      	cmp	r6, r3
 801386c:	f100 0414 	add.w	r4, r0, #20
 8013870:	dd30      	ble.n	80138d4 <rshift+0x70>
 8013872:	f011 011f 	ands.w	r1, r1, #31
 8013876:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801387a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801387e:	d108      	bne.n	8013892 <rshift+0x2e>
 8013880:	4621      	mov	r1, r4
 8013882:	42b2      	cmp	r2, r6
 8013884:	460b      	mov	r3, r1
 8013886:	d211      	bcs.n	80138ac <rshift+0x48>
 8013888:	f852 3b04 	ldr.w	r3, [r2], #4
 801388c:	f841 3b04 	str.w	r3, [r1], #4
 8013890:	e7f7      	b.n	8013882 <rshift+0x1e>
 8013892:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013896:	f1c1 0c20 	rsb	ip, r1, #32
 801389a:	40cd      	lsrs	r5, r1
 801389c:	3204      	adds	r2, #4
 801389e:	4623      	mov	r3, r4
 80138a0:	42b2      	cmp	r2, r6
 80138a2:	4617      	mov	r7, r2
 80138a4:	d30c      	bcc.n	80138c0 <rshift+0x5c>
 80138a6:	601d      	str	r5, [r3, #0]
 80138a8:	b105      	cbz	r5, 80138ac <rshift+0x48>
 80138aa:	3304      	adds	r3, #4
 80138ac:	1b1a      	subs	r2, r3, r4
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80138b4:	bf08      	it	eq
 80138b6:	2300      	moveq	r3, #0
 80138b8:	6102      	str	r2, [r0, #16]
 80138ba:	bf08      	it	eq
 80138bc:	6143      	streq	r3, [r0, #20]
 80138be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c0:	683f      	ldr	r7, [r7, #0]
 80138c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80138c6:	433d      	orrs	r5, r7
 80138c8:	f843 5b04 	str.w	r5, [r3], #4
 80138cc:	f852 5b04 	ldr.w	r5, [r2], #4
 80138d0:	40cd      	lsrs	r5, r1
 80138d2:	e7e5      	b.n	80138a0 <rshift+0x3c>
 80138d4:	4623      	mov	r3, r4
 80138d6:	e7e9      	b.n	80138ac <rshift+0x48>

080138d8 <__hexdig_fun>:
 80138d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80138dc:	2b09      	cmp	r3, #9
 80138de:	d802      	bhi.n	80138e6 <__hexdig_fun+0xe>
 80138e0:	3820      	subs	r0, #32
 80138e2:	b2c0      	uxtb	r0, r0
 80138e4:	4770      	bx	lr
 80138e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80138ea:	2b05      	cmp	r3, #5
 80138ec:	d801      	bhi.n	80138f2 <__hexdig_fun+0x1a>
 80138ee:	3847      	subs	r0, #71	; 0x47
 80138f0:	e7f7      	b.n	80138e2 <__hexdig_fun+0xa>
 80138f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80138f6:	2b05      	cmp	r3, #5
 80138f8:	d801      	bhi.n	80138fe <__hexdig_fun+0x26>
 80138fa:	3827      	subs	r0, #39	; 0x27
 80138fc:	e7f1      	b.n	80138e2 <__hexdig_fun+0xa>
 80138fe:	2000      	movs	r0, #0
 8013900:	4770      	bx	lr

08013902 <__gethex>:
 8013902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013906:	b08b      	sub	sp, #44	; 0x2c
 8013908:	468a      	mov	sl, r1
 801390a:	9002      	str	r0, [sp, #8]
 801390c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801390e:	9306      	str	r3, [sp, #24]
 8013910:	4690      	mov	r8, r2
 8013912:	f000 fadf 	bl	8013ed4 <__localeconv_l>
 8013916:	6803      	ldr	r3, [r0, #0]
 8013918:	9303      	str	r3, [sp, #12]
 801391a:	4618      	mov	r0, r3
 801391c:	f7ec fc90 	bl	8000240 <strlen>
 8013920:	9b03      	ldr	r3, [sp, #12]
 8013922:	9001      	str	r0, [sp, #4]
 8013924:	4403      	add	r3, r0
 8013926:	f04f 0b00 	mov.w	fp, #0
 801392a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801392e:	9307      	str	r3, [sp, #28]
 8013930:	f8da 3000 	ldr.w	r3, [sl]
 8013934:	3302      	adds	r3, #2
 8013936:	461f      	mov	r7, r3
 8013938:	f813 0b01 	ldrb.w	r0, [r3], #1
 801393c:	2830      	cmp	r0, #48	; 0x30
 801393e:	d06c      	beq.n	8013a1a <__gethex+0x118>
 8013940:	f7ff ffca 	bl	80138d8 <__hexdig_fun>
 8013944:	4604      	mov	r4, r0
 8013946:	2800      	cmp	r0, #0
 8013948:	d16a      	bne.n	8013a20 <__gethex+0x11e>
 801394a:	9a01      	ldr	r2, [sp, #4]
 801394c:	9903      	ldr	r1, [sp, #12]
 801394e:	4638      	mov	r0, r7
 8013950:	f001 fd58 	bl	8015404 <strncmp>
 8013954:	2800      	cmp	r0, #0
 8013956:	d166      	bne.n	8013a26 <__gethex+0x124>
 8013958:	9b01      	ldr	r3, [sp, #4]
 801395a:	5cf8      	ldrb	r0, [r7, r3]
 801395c:	18fe      	adds	r6, r7, r3
 801395e:	f7ff ffbb 	bl	80138d8 <__hexdig_fun>
 8013962:	2800      	cmp	r0, #0
 8013964:	d062      	beq.n	8013a2c <__gethex+0x12a>
 8013966:	4633      	mov	r3, r6
 8013968:	7818      	ldrb	r0, [r3, #0]
 801396a:	2830      	cmp	r0, #48	; 0x30
 801396c:	461f      	mov	r7, r3
 801396e:	f103 0301 	add.w	r3, r3, #1
 8013972:	d0f9      	beq.n	8013968 <__gethex+0x66>
 8013974:	f7ff ffb0 	bl	80138d8 <__hexdig_fun>
 8013978:	fab0 f580 	clz	r5, r0
 801397c:	096d      	lsrs	r5, r5, #5
 801397e:	4634      	mov	r4, r6
 8013980:	f04f 0b01 	mov.w	fp, #1
 8013984:	463a      	mov	r2, r7
 8013986:	4616      	mov	r6, r2
 8013988:	3201      	adds	r2, #1
 801398a:	7830      	ldrb	r0, [r6, #0]
 801398c:	f7ff ffa4 	bl	80138d8 <__hexdig_fun>
 8013990:	2800      	cmp	r0, #0
 8013992:	d1f8      	bne.n	8013986 <__gethex+0x84>
 8013994:	9a01      	ldr	r2, [sp, #4]
 8013996:	9903      	ldr	r1, [sp, #12]
 8013998:	4630      	mov	r0, r6
 801399a:	f001 fd33 	bl	8015404 <strncmp>
 801399e:	b950      	cbnz	r0, 80139b6 <__gethex+0xb4>
 80139a0:	b954      	cbnz	r4, 80139b8 <__gethex+0xb6>
 80139a2:	9b01      	ldr	r3, [sp, #4]
 80139a4:	18f4      	adds	r4, r6, r3
 80139a6:	4622      	mov	r2, r4
 80139a8:	4616      	mov	r6, r2
 80139aa:	3201      	adds	r2, #1
 80139ac:	7830      	ldrb	r0, [r6, #0]
 80139ae:	f7ff ff93 	bl	80138d8 <__hexdig_fun>
 80139b2:	2800      	cmp	r0, #0
 80139b4:	d1f8      	bne.n	80139a8 <__gethex+0xa6>
 80139b6:	b10c      	cbz	r4, 80139bc <__gethex+0xba>
 80139b8:	1ba4      	subs	r4, r4, r6
 80139ba:	00a4      	lsls	r4, r4, #2
 80139bc:	7833      	ldrb	r3, [r6, #0]
 80139be:	2b50      	cmp	r3, #80	; 0x50
 80139c0:	d001      	beq.n	80139c6 <__gethex+0xc4>
 80139c2:	2b70      	cmp	r3, #112	; 0x70
 80139c4:	d140      	bne.n	8013a48 <__gethex+0x146>
 80139c6:	7873      	ldrb	r3, [r6, #1]
 80139c8:	2b2b      	cmp	r3, #43	; 0x2b
 80139ca:	d031      	beq.n	8013a30 <__gethex+0x12e>
 80139cc:	2b2d      	cmp	r3, #45	; 0x2d
 80139ce:	d033      	beq.n	8013a38 <__gethex+0x136>
 80139d0:	1c71      	adds	r1, r6, #1
 80139d2:	f04f 0900 	mov.w	r9, #0
 80139d6:	7808      	ldrb	r0, [r1, #0]
 80139d8:	f7ff ff7e 	bl	80138d8 <__hexdig_fun>
 80139dc:	1e43      	subs	r3, r0, #1
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	2b18      	cmp	r3, #24
 80139e2:	d831      	bhi.n	8013a48 <__gethex+0x146>
 80139e4:	f1a0 0210 	sub.w	r2, r0, #16
 80139e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80139ec:	f7ff ff74 	bl	80138d8 <__hexdig_fun>
 80139f0:	1e43      	subs	r3, r0, #1
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b18      	cmp	r3, #24
 80139f6:	d922      	bls.n	8013a3e <__gethex+0x13c>
 80139f8:	f1b9 0f00 	cmp.w	r9, #0
 80139fc:	d000      	beq.n	8013a00 <__gethex+0xfe>
 80139fe:	4252      	negs	r2, r2
 8013a00:	4414      	add	r4, r2
 8013a02:	f8ca 1000 	str.w	r1, [sl]
 8013a06:	b30d      	cbz	r5, 8013a4c <__gethex+0x14a>
 8013a08:	f1bb 0f00 	cmp.w	fp, #0
 8013a0c:	bf0c      	ite	eq
 8013a0e:	2706      	moveq	r7, #6
 8013a10:	2700      	movne	r7, #0
 8013a12:	4638      	mov	r0, r7
 8013a14:	b00b      	add	sp, #44	; 0x2c
 8013a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1a:	f10b 0b01 	add.w	fp, fp, #1
 8013a1e:	e78a      	b.n	8013936 <__gethex+0x34>
 8013a20:	2500      	movs	r5, #0
 8013a22:	462c      	mov	r4, r5
 8013a24:	e7ae      	b.n	8013984 <__gethex+0x82>
 8013a26:	463e      	mov	r6, r7
 8013a28:	2501      	movs	r5, #1
 8013a2a:	e7c7      	b.n	80139bc <__gethex+0xba>
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	e7fb      	b.n	8013a28 <__gethex+0x126>
 8013a30:	f04f 0900 	mov.w	r9, #0
 8013a34:	1cb1      	adds	r1, r6, #2
 8013a36:	e7ce      	b.n	80139d6 <__gethex+0xd4>
 8013a38:	f04f 0901 	mov.w	r9, #1
 8013a3c:	e7fa      	b.n	8013a34 <__gethex+0x132>
 8013a3e:	230a      	movs	r3, #10
 8013a40:	fb03 0202 	mla	r2, r3, r2, r0
 8013a44:	3a10      	subs	r2, #16
 8013a46:	e7cf      	b.n	80139e8 <__gethex+0xe6>
 8013a48:	4631      	mov	r1, r6
 8013a4a:	e7da      	b.n	8013a02 <__gethex+0x100>
 8013a4c:	1bf3      	subs	r3, r6, r7
 8013a4e:	3b01      	subs	r3, #1
 8013a50:	4629      	mov	r1, r5
 8013a52:	2b07      	cmp	r3, #7
 8013a54:	dc49      	bgt.n	8013aea <__gethex+0x1e8>
 8013a56:	9802      	ldr	r0, [sp, #8]
 8013a58:	f000 fad6 	bl	8014008 <_Balloc>
 8013a5c:	9b01      	ldr	r3, [sp, #4]
 8013a5e:	f100 0914 	add.w	r9, r0, #20
 8013a62:	f04f 0b00 	mov.w	fp, #0
 8013a66:	f1c3 0301 	rsb	r3, r3, #1
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	f8cd 9010 	str.w	r9, [sp, #16]
 8013a70:	46da      	mov	sl, fp
 8013a72:	9308      	str	r3, [sp, #32]
 8013a74:	42b7      	cmp	r7, r6
 8013a76:	d33b      	bcc.n	8013af0 <__gethex+0x1ee>
 8013a78:	9804      	ldr	r0, [sp, #16]
 8013a7a:	f840 ab04 	str.w	sl, [r0], #4
 8013a7e:	eba0 0009 	sub.w	r0, r0, r9
 8013a82:	1080      	asrs	r0, r0, #2
 8013a84:	6128      	str	r0, [r5, #16]
 8013a86:	0147      	lsls	r7, r0, #5
 8013a88:	4650      	mov	r0, sl
 8013a8a:	f000 fb81 	bl	8014190 <__hi0bits>
 8013a8e:	f8d8 6000 	ldr.w	r6, [r8]
 8013a92:	1a3f      	subs	r7, r7, r0
 8013a94:	42b7      	cmp	r7, r6
 8013a96:	dd64      	ble.n	8013b62 <__gethex+0x260>
 8013a98:	1bbf      	subs	r7, r7, r6
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f000 fe92 	bl	80147c6 <__any_on>
 8013aa2:	4682      	mov	sl, r0
 8013aa4:	b178      	cbz	r0, 8013ac6 <__gethex+0x1c4>
 8013aa6:	1e7b      	subs	r3, r7, #1
 8013aa8:	1159      	asrs	r1, r3, #5
 8013aaa:	f003 021f 	and.w	r2, r3, #31
 8013aae:	f04f 0a01 	mov.w	sl, #1
 8013ab2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013ab6:	fa0a f202 	lsl.w	r2, sl, r2
 8013aba:	420a      	tst	r2, r1
 8013abc:	d003      	beq.n	8013ac6 <__gethex+0x1c4>
 8013abe:	4553      	cmp	r3, sl
 8013ac0:	dc46      	bgt.n	8013b50 <__gethex+0x24e>
 8013ac2:	f04f 0a02 	mov.w	sl, #2
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f7ff fecb 	bl	8013864 <rshift>
 8013ace:	443c      	add	r4, r7
 8013ad0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ad4:	42a3      	cmp	r3, r4
 8013ad6:	da52      	bge.n	8013b7e <__gethex+0x27c>
 8013ad8:	4629      	mov	r1, r5
 8013ada:	9802      	ldr	r0, [sp, #8]
 8013adc:	f000 fac8 	bl	8014070 <_Bfree>
 8013ae0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	6013      	str	r3, [r2, #0]
 8013ae6:	27a3      	movs	r7, #163	; 0xa3
 8013ae8:	e793      	b.n	8013a12 <__gethex+0x110>
 8013aea:	3101      	adds	r1, #1
 8013aec:	105b      	asrs	r3, r3, #1
 8013aee:	e7b0      	b.n	8013a52 <__gethex+0x150>
 8013af0:	1e73      	subs	r3, r6, #1
 8013af2:	9305      	str	r3, [sp, #20]
 8013af4:	9a07      	ldr	r2, [sp, #28]
 8013af6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013afa:	4293      	cmp	r3, r2
 8013afc:	d018      	beq.n	8013b30 <__gethex+0x22e>
 8013afe:	f1bb 0f20 	cmp.w	fp, #32
 8013b02:	d107      	bne.n	8013b14 <__gethex+0x212>
 8013b04:	9b04      	ldr	r3, [sp, #16]
 8013b06:	f8c3 a000 	str.w	sl, [r3]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	f04f 0a00 	mov.w	sl, #0
 8013b10:	9304      	str	r3, [sp, #16]
 8013b12:	46d3      	mov	fp, sl
 8013b14:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013b18:	f7ff fede 	bl	80138d8 <__hexdig_fun>
 8013b1c:	f000 000f 	and.w	r0, r0, #15
 8013b20:	fa00 f00b 	lsl.w	r0, r0, fp
 8013b24:	ea4a 0a00 	orr.w	sl, sl, r0
 8013b28:	f10b 0b04 	add.w	fp, fp, #4
 8013b2c:	9b05      	ldr	r3, [sp, #20]
 8013b2e:	e00d      	b.n	8013b4c <__gethex+0x24a>
 8013b30:	9b05      	ldr	r3, [sp, #20]
 8013b32:	9a08      	ldr	r2, [sp, #32]
 8013b34:	4413      	add	r3, r2
 8013b36:	42bb      	cmp	r3, r7
 8013b38:	d3e1      	bcc.n	8013afe <__gethex+0x1fc>
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	9a01      	ldr	r2, [sp, #4]
 8013b3e:	9903      	ldr	r1, [sp, #12]
 8013b40:	9309      	str	r3, [sp, #36]	; 0x24
 8013b42:	f001 fc5f 	bl	8015404 <strncmp>
 8013b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d1d8      	bne.n	8013afe <__gethex+0x1fc>
 8013b4c:	461e      	mov	r6, r3
 8013b4e:	e791      	b.n	8013a74 <__gethex+0x172>
 8013b50:	1eb9      	subs	r1, r7, #2
 8013b52:	4628      	mov	r0, r5
 8013b54:	f000 fe37 	bl	80147c6 <__any_on>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d0b2      	beq.n	8013ac2 <__gethex+0x1c0>
 8013b5c:	f04f 0a03 	mov.w	sl, #3
 8013b60:	e7b1      	b.n	8013ac6 <__gethex+0x1c4>
 8013b62:	da09      	bge.n	8013b78 <__gethex+0x276>
 8013b64:	1bf7      	subs	r7, r6, r7
 8013b66:	4629      	mov	r1, r5
 8013b68:	463a      	mov	r2, r7
 8013b6a:	9802      	ldr	r0, [sp, #8]
 8013b6c:	f000 fc4c 	bl	8014408 <__lshift>
 8013b70:	1be4      	subs	r4, r4, r7
 8013b72:	4605      	mov	r5, r0
 8013b74:	f100 0914 	add.w	r9, r0, #20
 8013b78:	f04f 0a00 	mov.w	sl, #0
 8013b7c:	e7a8      	b.n	8013ad0 <__gethex+0x1ce>
 8013b7e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013b82:	42a0      	cmp	r0, r4
 8013b84:	dd6a      	ble.n	8013c5c <__gethex+0x35a>
 8013b86:	1b04      	subs	r4, r0, r4
 8013b88:	42a6      	cmp	r6, r4
 8013b8a:	dc2e      	bgt.n	8013bea <__gethex+0x2e8>
 8013b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013b90:	2b02      	cmp	r3, #2
 8013b92:	d022      	beq.n	8013bda <__gethex+0x2d8>
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d024      	beq.n	8013be2 <__gethex+0x2e0>
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d115      	bne.n	8013bc8 <__gethex+0x2c6>
 8013b9c:	42a6      	cmp	r6, r4
 8013b9e:	d113      	bne.n	8013bc8 <__gethex+0x2c6>
 8013ba0:	2e01      	cmp	r6, #1
 8013ba2:	dc0b      	bgt.n	8013bbc <__gethex+0x2ba>
 8013ba4:	9a06      	ldr	r2, [sp, #24]
 8013ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013baa:	6013      	str	r3, [r2, #0]
 8013bac:	2301      	movs	r3, #1
 8013bae:	612b      	str	r3, [r5, #16]
 8013bb0:	f8c9 3000 	str.w	r3, [r9]
 8013bb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013bb6:	2762      	movs	r7, #98	; 0x62
 8013bb8:	601d      	str	r5, [r3, #0]
 8013bba:	e72a      	b.n	8013a12 <__gethex+0x110>
 8013bbc:	1e71      	subs	r1, r6, #1
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f000 fe01 	bl	80147c6 <__any_on>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	d1ed      	bne.n	8013ba4 <__gethex+0x2a2>
 8013bc8:	4629      	mov	r1, r5
 8013bca:	9802      	ldr	r0, [sp, #8]
 8013bcc:	f000 fa50 	bl	8014070 <_Bfree>
 8013bd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	6013      	str	r3, [r2, #0]
 8013bd6:	2750      	movs	r7, #80	; 0x50
 8013bd8:	e71b      	b.n	8013a12 <__gethex+0x110>
 8013bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d0e1      	beq.n	8013ba4 <__gethex+0x2a2>
 8013be0:	e7f2      	b.n	8013bc8 <__gethex+0x2c6>
 8013be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1dd      	bne.n	8013ba4 <__gethex+0x2a2>
 8013be8:	e7ee      	b.n	8013bc8 <__gethex+0x2c6>
 8013bea:	1e67      	subs	r7, r4, #1
 8013bec:	f1ba 0f00 	cmp.w	sl, #0
 8013bf0:	d131      	bne.n	8013c56 <__gethex+0x354>
 8013bf2:	b127      	cbz	r7, 8013bfe <__gethex+0x2fc>
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f000 fde5 	bl	80147c6 <__any_on>
 8013bfc:	4682      	mov	sl, r0
 8013bfe:	117a      	asrs	r2, r7, #5
 8013c00:	2301      	movs	r3, #1
 8013c02:	f007 071f 	and.w	r7, r7, #31
 8013c06:	fa03 f707 	lsl.w	r7, r3, r7
 8013c0a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	421f      	tst	r7, r3
 8013c12:	4628      	mov	r0, r5
 8013c14:	bf18      	it	ne
 8013c16:	f04a 0a02 	orrne.w	sl, sl, #2
 8013c1a:	1b36      	subs	r6, r6, r4
 8013c1c:	f7ff fe22 	bl	8013864 <rshift>
 8013c20:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013c24:	2702      	movs	r7, #2
 8013c26:	f1ba 0f00 	cmp.w	sl, #0
 8013c2a:	d048      	beq.n	8013cbe <__gethex+0x3bc>
 8013c2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d015      	beq.n	8013c60 <__gethex+0x35e>
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d017      	beq.n	8013c68 <__gethex+0x366>
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d109      	bne.n	8013c50 <__gethex+0x34e>
 8013c3c:	f01a 0f02 	tst.w	sl, #2
 8013c40:	d006      	beq.n	8013c50 <__gethex+0x34e>
 8013c42:	f8d9 3000 	ldr.w	r3, [r9]
 8013c46:	ea4a 0a03 	orr.w	sl, sl, r3
 8013c4a:	f01a 0f01 	tst.w	sl, #1
 8013c4e:	d10e      	bne.n	8013c6e <__gethex+0x36c>
 8013c50:	f047 0710 	orr.w	r7, r7, #16
 8013c54:	e033      	b.n	8013cbe <__gethex+0x3bc>
 8013c56:	f04f 0a01 	mov.w	sl, #1
 8013c5a:	e7d0      	b.n	8013bfe <__gethex+0x2fc>
 8013c5c:	2701      	movs	r7, #1
 8013c5e:	e7e2      	b.n	8013c26 <__gethex+0x324>
 8013c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c62:	f1c3 0301 	rsb	r3, r3, #1
 8013c66:	9315      	str	r3, [sp, #84]	; 0x54
 8013c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d0f0      	beq.n	8013c50 <__gethex+0x34e>
 8013c6e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013c72:	f105 0314 	add.w	r3, r5, #20
 8013c76:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013c7a:	eb03 010a 	add.w	r1, r3, sl
 8013c7e:	f04f 0c00 	mov.w	ip, #0
 8013c82:	4618      	mov	r0, r3
 8013c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c88:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013c8c:	d01c      	beq.n	8013cc8 <__gethex+0x3c6>
 8013c8e:	3201      	adds	r2, #1
 8013c90:	6002      	str	r2, [r0, #0]
 8013c92:	2f02      	cmp	r7, #2
 8013c94:	f105 0314 	add.w	r3, r5, #20
 8013c98:	d138      	bne.n	8013d0c <__gethex+0x40a>
 8013c9a:	f8d8 2000 	ldr.w	r2, [r8]
 8013c9e:	3a01      	subs	r2, #1
 8013ca0:	42b2      	cmp	r2, r6
 8013ca2:	d10a      	bne.n	8013cba <__gethex+0x3b8>
 8013ca4:	1171      	asrs	r1, r6, #5
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	f006 061f 	and.w	r6, r6, #31
 8013cac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cb0:	fa02 f606 	lsl.w	r6, r2, r6
 8013cb4:	421e      	tst	r6, r3
 8013cb6:	bf18      	it	ne
 8013cb8:	4617      	movne	r7, r2
 8013cba:	f047 0720 	orr.w	r7, r7, #32
 8013cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cc0:	601d      	str	r5, [r3, #0]
 8013cc2:	9b06      	ldr	r3, [sp, #24]
 8013cc4:	601c      	str	r4, [r3, #0]
 8013cc6:	e6a4      	b.n	8013a12 <__gethex+0x110>
 8013cc8:	4299      	cmp	r1, r3
 8013cca:	f843 cc04 	str.w	ip, [r3, #-4]
 8013cce:	d8d8      	bhi.n	8013c82 <__gethex+0x380>
 8013cd0:	68ab      	ldr	r3, [r5, #8]
 8013cd2:	4599      	cmp	r9, r3
 8013cd4:	db12      	blt.n	8013cfc <__gethex+0x3fa>
 8013cd6:	6869      	ldr	r1, [r5, #4]
 8013cd8:	9802      	ldr	r0, [sp, #8]
 8013cda:	3101      	adds	r1, #1
 8013cdc:	f000 f994 	bl	8014008 <_Balloc>
 8013ce0:	692a      	ldr	r2, [r5, #16]
 8013ce2:	3202      	adds	r2, #2
 8013ce4:	f105 010c 	add.w	r1, r5, #12
 8013ce8:	4683      	mov	fp, r0
 8013cea:	0092      	lsls	r2, r2, #2
 8013cec:	300c      	adds	r0, #12
 8013cee:	f7fc feb9 	bl	8010a64 <memcpy>
 8013cf2:	4629      	mov	r1, r5
 8013cf4:	9802      	ldr	r0, [sp, #8]
 8013cf6:	f000 f9bb 	bl	8014070 <_Bfree>
 8013cfa:	465d      	mov	r5, fp
 8013cfc:	692b      	ldr	r3, [r5, #16]
 8013cfe:	1c5a      	adds	r2, r3, #1
 8013d00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013d04:	612a      	str	r2, [r5, #16]
 8013d06:	2201      	movs	r2, #1
 8013d08:	615a      	str	r2, [r3, #20]
 8013d0a:	e7c2      	b.n	8013c92 <__gethex+0x390>
 8013d0c:	692a      	ldr	r2, [r5, #16]
 8013d0e:	454a      	cmp	r2, r9
 8013d10:	dd0b      	ble.n	8013d2a <__gethex+0x428>
 8013d12:	2101      	movs	r1, #1
 8013d14:	4628      	mov	r0, r5
 8013d16:	f7ff fda5 	bl	8013864 <rshift>
 8013d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d1e:	3401      	adds	r4, #1
 8013d20:	42a3      	cmp	r3, r4
 8013d22:	f6ff aed9 	blt.w	8013ad8 <__gethex+0x1d6>
 8013d26:	2701      	movs	r7, #1
 8013d28:	e7c7      	b.n	8013cba <__gethex+0x3b8>
 8013d2a:	f016 061f 	ands.w	r6, r6, #31
 8013d2e:	d0fa      	beq.n	8013d26 <__gethex+0x424>
 8013d30:	449a      	add	sl, r3
 8013d32:	f1c6 0620 	rsb	r6, r6, #32
 8013d36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013d3a:	f000 fa29 	bl	8014190 <__hi0bits>
 8013d3e:	42b0      	cmp	r0, r6
 8013d40:	dbe7      	blt.n	8013d12 <__gethex+0x410>
 8013d42:	e7f0      	b.n	8013d26 <__gethex+0x424>

08013d44 <L_shift>:
 8013d44:	f1c2 0208 	rsb	r2, r2, #8
 8013d48:	0092      	lsls	r2, r2, #2
 8013d4a:	b570      	push	{r4, r5, r6, lr}
 8013d4c:	f1c2 0620 	rsb	r6, r2, #32
 8013d50:	6843      	ldr	r3, [r0, #4]
 8013d52:	6804      	ldr	r4, [r0, #0]
 8013d54:	fa03 f506 	lsl.w	r5, r3, r6
 8013d58:	432c      	orrs	r4, r5
 8013d5a:	40d3      	lsrs	r3, r2
 8013d5c:	6004      	str	r4, [r0, #0]
 8013d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013d62:	4288      	cmp	r0, r1
 8013d64:	d3f4      	bcc.n	8013d50 <L_shift+0xc>
 8013d66:	bd70      	pop	{r4, r5, r6, pc}

08013d68 <__match>:
 8013d68:	b530      	push	{r4, r5, lr}
 8013d6a:	6803      	ldr	r3, [r0, #0]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d72:	b914      	cbnz	r4, 8013d7a <__match+0x12>
 8013d74:	6003      	str	r3, [r0, #0]
 8013d76:	2001      	movs	r0, #1
 8013d78:	bd30      	pop	{r4, r5, pc}
 8013d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013d82:	2d19      	cmp	r5, #25
 8013d84:	bf98      	it	ls
 8013d86:	3220      	addls	r2, #32
 8013d88:	42a2      	cmp	r2, r4
 8013d8a:	d0f0      	beq.n	8013d6e <__match+0x6>
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	e7f3      	b.n	8013d78 <__match+0x10>

08013d90 <__hexnan>:
 8013d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d94:	680b      	ldr	r3, [r1, #0]
 8013d96:	6801      	ldr	r1, [r0, #0]
 8013d98:	115f      	asrs	r7, r3, #5
 8013d9a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013d9e:	f013 031f 	ands.w	r3, r3, #31
 8013da2:	b087      	sub	sp, #28
 8013da4:	bf18      	it	ne
 8013da6:	3704      	addne	r7, #4
 8013da8:	2500      	movs	r5, #0
 8013daa:	1f3e      	subs	r6, r7, #4
 8013dac:	4682      	mov	sl, r0
 8013dae:	4690      	mov	r8, r2
 8013db0:	9301      	str	r3, [sp, #4]
 8013db2:	f847 5c04 	str.w	r5, [r7, #-4]
 8013db6:	46b1      	mov	r9, r6
 8013db8:	4634      	mov	r4, r6
 8013dba:	9502      	str	r5, [sp, #8]
 8013dbc:	46ab      	mov	fp, r5
 8013dbe:	784a      	ldrb	r2, [r1, #1]
 8013dc0:	1c4b      	adds	r3, r1, #1
 8013dc2:	9303      	str	r3, [sp, #12]
 8013dc4:	b342      	cbz	r2, 8013e18 <__hexnan+0x88>
 8013dc6:	4610      	mov	r0, r2
 8013dc8:	9105      	str	r1, [sp, #20]
 8013dca:	9204      	str	r2, [sp, #16]
 8013dcc:	f7ff fd84 	bl	80138d8 <__hexdig_fun>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d143      	bne.n	8013e5c <__hexnan+0xcc>
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	9905      	ldr	r1, [sp, #20]
 8013dd8:	2a20      	cmp	r2, #32
 8013dda:	d818      	bhi.n	8013e0e <__hexnan+0x7e>
 8013ddc:	9b02      	ldr	r3, [sp, #8]
 8013dde:	459b      	cmp	fp, r3
 8013de0:	dd13      	ble.n	8013e0a <__hexnan+0x7a>
 8013de2:	454c      	cmp	r4, r9
 8013de4:	d206      	bcs.n	8013df4 <__hexnan+0x64>
 8013de6:	2d07      	cmp	r5, #7
 8013de8:	dc04      	bgt.n	8013df4 <__hexnan+0x64>
 8013dea:	462a      	mov	r2, r5
 8013dec:	4649      	mov	r1, r9
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff ffa8 	bl	8013d44 <L_shift>
 8013df4:	4544      	cmp	r4, r8
 8013df6:	d944      	bls.n	8013e82 <__hexnan+0xf2>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8013dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e02:	f8cd b008 	str.w	fp, [sp, #8]
 8013e06:	464c      	mov	r4, r9
 8013e08:	461d      	mov	r5, r3
 8013e0a:	9903      	ldr	r1, [sp, #12]
 8013e0c:	e7d7      	b.n	8013dbe <__hexnan+0x2e>
 8013e0e:	2a29      	cmp	r2, #41	; 0x29
 8013e10:	d14a      	bne.n	8013ea8 <__hexnan+0x118>
 8013e12:	3102      	adds	r1, #2
 8013e14:	f8ca 1000 	str.w	r1, [sl]
 8013e18:	f1bb 0f00 	cmp.w	fp, #0
 8013e1c:	d044      	beq.n	8013ea8 <__hexnan+0x118>
 8013e1e:	454c      	cmp	r4, r9
 8013e20:	d206      	bcs.n	8013e30 <__hexnan+0xa0>
 8013e22:	2d07      	cmp	r5, #7
 8013e24:	dc04      	bgt.n	8013e30 <__hexnan+0xa0>
 8013e26:	462a      	mov	r2, r5
 8013e28:	4649      	mov	r1, r9
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff ff8a 	bl	8013d44 <L_shift>
 8013e30:	4544      	cmp	r4, r8
 8013e32:	d928      	bls.n	8013e86 <__hexnan+0xf6>
 8013e34:	4643      	mov	r3, r8
 8013e36:	f854 2b04 	ldr.w	r2, [r4], #4
 8013e3a:	f843 2b04 	str.w	r2, [r3], #4
 8013e3e:	42a6      	cmp	r6, r4
 8013e40:	d2f9      	bcs.n	8013e36 <__hexnan+0xa6>
 8013e42:	2200      	movs	r2, #0
 8013e44:	f843 2b04 	str.w	r2, [r3], #4
 8013e48:	429e      	cmp	r6, r3
 8013e4a:	d2fb      	bcs.n	8013e44 <__hexnan+0xb4>
 8013e4c:	6833      	ldr	r3, [r6, #0]
 8013e4e:	b91b      	cbnz	r3, 8013e58 <__hexnan+0xc8>
 8013e50:	4546      	cmp	r6, r8
 8013e52:	d127      	bne.n	8013ea4 <__hexnan+0x114>
 8013e54:	2301      	movs	r3, #1
 8013e56:	6033      	str	r3, [r6, #0]
 8013e58:	2005      	movs	r0, #5
 8013e5a:	e026      	b.n	8013eaa <__hexnan+0x11a>
 8013e5c:	3501      	adds	r5, #1
 8013e5e:	2d08      	cmp	r5, #8
 8013e60:	f10b 0b01 	add.w	fp, fp, #1
 8013e64:	dd06      	ble.n	8013e74 <__hexnan+0xe4>
 8013e66:	4544      	cmp	r4, r8
 8013e68:	d9cf      	bls.n	8013e0a <__hexnan+0x7a>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e70:	2501      	movs	r5, #1
 8013e72:	3c04      	subs	r4, #4
 8013e74:	6822      	ldr	r2, [r4, #0]
 8013e76:	f000 000f 	and.w	r0, r0, #15
 8013e7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013e7e:	6020      	str	r0, [r4, #0]
 8013e80:	e7c3      	b.n	8013e0a <__hexnan+0x7a>
 8013e82:	2508      	movs	r5, #8
 8013e84:	e7c1      	b.n	8013e0a <__hexnan+0x7a>
 8013e86:	9b01      	ldr	r3, [sp, #4]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d0df      	beq.n	8013e4c <__hexnan+0xbc>
 8013e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e90:	f1c3 0320 	rsb	r3, r3, #32
 8013e94:	fa22 f303 	lsr.w	r3, r2, r3
 8013e98:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013e9c:	401a      	ands	r2, r3
 8013e9e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013ea2:	e7d3      	b.n	8013e4c <__hexnan+0xbc>
 8013ea4:	3e04      	subs	r6, #4
 8013ea6:	e7d1      	b.n	8013e4c <__hexnan+0xbc>
 8013ea8:	2004      	movs	r0, #4
 8013eaa:	b007      	add	sp, #28
 8013eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013eb0 <__locale_ctype_ptr_l>:
 8013eb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013eb4:	4770      	bx	lr
	...

08013eb8 <__locale_ctype_ptr>:
 8013eb8:	4b04      	ldr	r3, [pc, #16]	; (8013ecc <__locale_ctype_ptr+0x14>)
 8013eba:	4a05      	ldr	r2, [pc, #20]	; (8013ed0 <__locale_ctype_ptr+0x18>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6a1b      	ldr	r3, [r3, #32]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	bf08      	it	eq
 8013ec4:	4613      	moveq	r3, r2
 8013ec6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8013eca:	4770      	bx	lr
 8013ecc:	200003a8 	.word	0x200003a8
 8013ed0:	2000040c 	.word	0x2000040c

08013ed4 <__localeconv_l>:
 8013ed4:	30f0      	adds	r0, #240	; 0xf0
 8013ed6:	4770      	bx	lr

08013ed8 <_localeconv_r>:
 8013ed8:	4b04      	ldr	r3, [pc, #16]	; (8013eec <_localeconv_r+0x14>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6a18      	ldr	r0, [r3, #32]
 8013ede:	4b04      	ldr	r3, [pc, #16]	; (8013ef0 <_localeconv_r+0x18>)
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	bf08      	it	eq
 8013ee4:	4618      	moveq	r0, r3
 8013ee6:	30f0      	adds	r0, #240	; 0xf0
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop
 8013eec:	200003a8 	.word	0x200003a8
 8013ef0:	2000040c 	.word	0x2000040c

08013ef4 <_lseek_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	4c07      	ldr	r4, [pc, #28]	; (8013f14 <_lseek_r+0x20>)
 8013ef8:	4605      	mov	r5, r0
 8013efa:	4608      	mov	r0, r1
 8013efc:	4611      	mov	r1, r2
 8013efe:	2200      	movs	r2, #0
 8013f00:	6022      	str	r2, [r4, #0]
 8013f02:	461a      	mov	r2, r3
 8013f04:	f001 fbd0 	bl	80156a8 <_lseek>
 8013f08:	1c43      	adds	r3, r0, #1
 8013f0a:	d102      	bne.n	8013f12 <_lseek_r+0x1e>
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	b103      	cbz	r3, 8013f12 <_lseek_r+0x1e>
 8013f10:	602b      	str	r3, [r5, #0]
 8013f12:	bd38      	pop	{r3, r4, r5, pc}
 8013f14:	20011f7c 	.word	0x20011f7c

08013f18 <__swhatbuf_r>:
 8013f18:	b570      	push	{r4, r5, r6, lr}
 8013f1a:	460e      	mov	r6, r1
 8013f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f20:	2900      	cmp	r1, #0
 8013f22:	b096      	sub	sp, #88	; 0x58
 8013f24:	4614      	mov	r4, r2
 8013f26:	461d      	mov	r5, r3
 8013f28:	da07      	bge.n	8013f3a <__swhatbuf_r+0x22>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	602b      	str	r3, [r5, #0]
 8013f2e:	89b3      	ldrh	r3, [r6, #12]
 8013f30:	061a      	lsls	r2, r3, #24
 8013f32:	d410      	bmi.n	8013f56 <__swhatbuf_r+0x3e>
 8013f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f38:	e00e      	b.n	8013f58 <__swhatbuf_r+0x40>
 8013f3a:	466a      	mov	r2, sp
 8013f3c:	f001 fb48 	bl	80155d0 <_fstat_r>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	dbf2      	blt.n	8013f2a <__swhatbuf_r+0x12>
 8013f44:	9a01      	ldr	r2, [sp, #4]
 8013f46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f4e:	425a      	negs	r2, r3
 8013f50:	415a      	adcs	r2, r3
 8013f52:	602a      	str	r2, [r5, #0]
 8013f54:	e7ee      	b.n	8013f34 <__swhatbuf_r+0x1c>
 8013f56:	2340      	movs	r3, #64	; 0x40
 8013f58:	2000      	movs	r0, #0
 8013f5a:	6023      	str	r3, [r4, #0]
 8013f5c:	b016      	add	sp, #88	; 0x58
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}

08013f60 <__smakebuf_r>:
 8013f60:	898b      	ldrh	r3, [r1, #12]
 8013f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f64:	079d      	lsls	r5, r3, #30
 8013f66:	4606      	mov	r6, r0
 8013f68:	460c      	mov	r4, r1
 8013f6a:	d507      	bpl.n	8013f7c <__smakebuf_r+0x1c>
 8013f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f70:	6023      	str	r3, [r4, #0]
 8013f72:	6123      	str	r3, [r4, #16]
 8013f74:	2301      	movs	r3, #1
 8013f76:	6163      	str	r3, [r4, #20]
 8013f78:	b002      	add	sp, #8
 8013f7a:	bd70      	pop	{r4, r5, r6, pc}
 8013f7c:	ab01      	add	r3, sp, #4
 8013f7e:	466a      	mov	r2, sp
 8013f80:	f7ff ffca 	bl	8013f18 <__swhatbuf_r>
 8013f84:	9900      	ldr	r1, [sp, #0]
 8013f86:	4605      	mov	r5, r0
 8013f88:	4630      	mov	r0, r6
 8013f8a:	f7fc fddb 	bl	8010b44 <_malloc_r>
 8013f8e:	b948      	cbnz	r0, 8013fa4 <__smakebuf_r+0x44>
 8013f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f94:	059a      	lsls	r2, r3, #22
 8013f96:	d4ef      	bmi.n	8013f78 <__smakebuf_r+0x18>
 8013f98:	f023 0303 	bic.w	r3, r3, #3
 8013f9c:	f043 0302 	orr.w	r3, r3, #2
 8013fa0:	81a3      	strh	r3, [r4, #12]
 8013fa2:	e7e3      	b.n	8013f6c <__smakebuf_r+0xc>
 8013fa4:	4b0d      	ldr	r3, [pc, #52]	; (8013fdc <__smakebuf_r+0x7c>)
 8013fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013fa8:	89a3      	ldrh	r3, [r4, #12]
 8013faa:	6020      	str	r0, [r4, #0]
 8013fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fb0:	81a3      	strh	r3, [r4, #12]
 8013fb2:	9b00      	ldr	r3, [sp, #0]
 8013fb4:	6163      	str	r3, [r4, #20]
 8013fb6:	9b01      	ldr	r3, [sp, #4]
 8013fb8:	6120      	str	r0, [r4, #16]
 8013fba:	b15b      	cbz	r3, 8013fd4 <__smakebuf_r+0x74>
 8013fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	f001 fb17 	bl	80155f4 <_isatty_r>
 8013fc6:	b128      	cbz	r0, 8013fd4 <__smakebuf_r+0x74>
 8013fc8:	89a3      	ldrh	r3, [r4, #12]
 8013fca:	f023 0303 	bic.w	r3, r3, #3
 8013fce:	f043 0301 	orr.w	r3, r3, #1
 8013fd2:	81a3      	strh	r3, [r4, #12]
 8013fd4:	89a3      	ldrh	r3, [r4, #12]
 8013fd6:	431d      	orrs	r5, r3
 8013fd8:	81a5      	strh	r5, [r4, #12]
 8013fda:	e7cd      	b.n	8013f78 <__smakebuf_r+0x18>
 8013fdc:	08013719 	.word	0x08013719

08013fe0 <__ascii_mbtowc>:
 8013fe0:	b082      	sub	sp, #8
 8013fe2:	b901      	cbnz	r1, 8013fe6 <__ascii_mbtowc+0x6>
 8013fe4:	a901      	add	r1, sp, #4
 8013fe6:	b142      	cbz	r2, 8013ffa <__ascii_mbtowc+0x1a>
 8013fe8:	b14b      	cbz	r3, 8013ffe <__ascii_mbtowc+0x1e>
 8013fea:	7813      	ldrb	r3, [r2, #0]
 8013fec:	600b      	str	r3, [r1, #0]
 8013fee:	7812      	ldrb	r2, [r2, #0]
 8013ff0:	1c10      	adds	r0, r2, #0
 8013ff2:	bf18      	it	ne
 8013ff4:	2001      	movne	r0, #1
 8013ff6:	b002      	add	sp, #8
 8013ff8:	4770      	bx	lr
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	e7fb      	b.n	8013ff6 <__ascii_mbtowc+0x16>
 8013ffe:	f06f 0001 	mvn.w	r0, #1
 8014002:	e7f8      	b.n	8013ff6 <__ascii_mbtowc+0x16>

08014004 <__malloc_lock>:
 8014004:	4770      	bx	lr

08014006 <__malloc_unlock>:
 8014006:	4770      	bx	lr

08014008 <_Balloc>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801400c:	4604      	mov	r4, r0
 801400e:	460e      	mov	r6, r1
 8014010:	b93d      	cbnz	r5, 8014022 <_Balloc+0x1a>
 8014012:	2010      	movs	r0, #16
 8014014:	f7fc fd1e 	bl	8010a54 <malloc>
 8014018:	6260      	str	r0, [r4, #36]	; 0x24
 801401a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801401e:	6005      	str	r5, [r0, #0]
 8014020:	60c5      	str	r5, [r0, #12]
 8014022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014024:	68eb      	ldr	r3, [r5, #12]
 8014026:	b183      	cbz	r3, 801404a <_Balloc+0x42>
 8014028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014030:	b9b8      	cbnz	r0, 8014062 <_Balloc+0x5a>
 8014032:	2101      	movs	r1, #1
 8014034:	fa01 f506 	lsl.w	r5, r1, r6
 8014038:	1d6a      	adds	r2, r5, #5
 801403a:	0092      	lsls	r2, r2, #2
 801403c:	4620      	mov	r0, r4
 801403e:	f7fc fd24 	bl	8010a8a <_calloc_r>
 8014042:	b160      	cbz	r0, 801405e <_Balloc+0x56>
 8014044:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014048:	e00e      	b.n	8014068 <_Balloc+0x60>
 801404a:	2221      	movs	r2, #33	; 0x21
 801404c:	2104      	movs	r1, #4
 801404e:	4620      	mov	r0, r4
 8014050:	f7fc fd1b 	bl	8010a8a <_calloc_r>
 8014054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014056:	60e8      	str	r0, [r5, #12]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1e4      	bne.n	8014028 <_Balloc+0x20>
 801405e:	2000      	movs	r0, #0
 8014060:	bd70      	pop	{r4, r5, r6, pc}
 8014062:	6802      	ldr	r2, [r0, #0]
 8014064:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014068:	2300      	movs	r3, #0
 801406a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801406e:	e7f7      	b.n	8014060 <_Balloc+0x58>

08014070 <_Bfree>:
 8014070:	b570      	push	{r4, r5, r6, lr}
 8014072:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014074:	4606      	mov	r6, r0
 8014076:	460d      	mov	r5, r1
 8014078:	b93c      	cbnz	r4, 801408a <_Bfree+0x1a>
 801407a:	2010      	movs	r0, #16
 801407c:	f7fc fcea 	bl	8010a54 <malloc>
 8014080:	6270      	str	r0, [r6, #36]	; 0x24
 8014082:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014086:	6004      	str	r4, [r0, #0]
 8014088:	60c4      	str	r4, [r0, #12]
 801408a:	b13d      	cbz	r5, 801409c <_Bfree+0x2c>
 801408c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801408e:	686a      	ldr	r2, [r5, #4]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014096:	6029      	str	r1, [r5, #0]
 8014098:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801409c:	bd70      	pop	{r4, r5, r6, pc}

0801409e <__multadd>:
 801409e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a2:	690d      	ldr	r5, [r1, #16]
 80140a4:	461f      	mov	r7, r3
 80140a6:	4606      	mov	r6, r0
 80140a8:	460c      	mov	r4, r1
 80140aa:	f101 0c14 	add.w	ip, r1, #20
 80140ae:	2300      	movs	r3, #0
 80140b0:	f8dc 0000 	ldr.w	r0, [ip]
 80140b4:	b281      	uxth	r1, r0
 80140b6:	fb02 7101 	mla	r1, r2, r1, r7
 80140ba:	0c0f      	lsrs	r7, r1, #16
 80140bc:	0c00      	lsrs	r0, r0, #16
 80140be:	fb02 7000 	mla	r0, r2, r0, r7
 80140c2:	b289      	uxth	r1, r1
 80140c4:	3301      	adds	r3, #1
 80140c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80140ca:	429d      	cmp	r5, r3
 80140cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80140d0:	f84c 1b04 	str.w	r1, [ip], #4
 80140d4:	dcec      	bgt.n	80140b0 <__multadd+0x12>
 80140d6:	b1d7      	cbz	r7, 801410e <__multadd+0x70>
 80140d8:	68a3      	ldr	r3, [r4, #8]
 80140da:	42ab      	cmp	r3, r5
 80140dc:	dc12      	bgt.n	8014104 <__multadd+0x66>
 80140de:	6861      	ldr	r1, [r4, #4]
 80140e0:	4630      	mov	r0, r6
 80140e2:	3101      	adds	r1, #1
 80140e4:	f7ff ff90 	bl	8014008 <_Balloc>
 80140e8:	6922      	ldr	r2, [r4, #16]
 80140ea:	3202      	adds	r2, #2
 80140ec:	f104 010c 	add.w	r1, r4, #12
 80140f0:	4680      	mov	r8, r0
 80140f2:	0092      	lsls	r2, r2, #2
 80140f4:	300c      	adds	r0, #12
 80140f6:	f7fc fcb5 	bl	8010a64 <memcpy>
 80140fa:	4621      	mov	r1, r4
 80140fc:	4630      	mov	r0, r6
 80140fe:	f7ff ffb7 	bl	8014070 <_Bfree>
 8014102:	4644      	mov	r4, r8
 8014104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014108:	3501      	adds	r5, #1
 801410a:	615f      	str	r7, [r3, #20]
 801410c:	6125      	str	r5, [r4, #16]
 801410e:	4620      	mov	r0, r4
 8014110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014114 <__s2b>:
 8014114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014118:	460c      	mov	r4, r1
 801411a:	4615      	mov	r5, r2
 801411c:	461f      	mov	r7, r3
 801411e:	2209      	movs	r2, #9
 8014120:	3308      	adds	r3, #8
 8014122:	4606      	mov	r6, r0
 8014124:	fb93 f3f2 	sdiv	r3, r3, r2
 8014128:	2100      	movs	r1, #0
 801412a:	2201      	movs	r2, #1
 801412c:	429a      	cmp	r2, r3
 801412e:	db20      	blt.n	8014172 <__s2b+0x5e>
 8014130:	4630      	mov	r0, r6
 8014132:	f7ff ff69 	bl	8014008 <_Balloc>
 8014136:	9b08      	ldr	r3, [sp, #32]
 8014138:	6143      	str	r3, [r0, #20]
 801413a:	2d09      	cmp	r5, #9
 801413c:	f04f 0301 	mov.w	r3, #1
 8014140:	6103      	str	r3, [r0, #16]
 8014142:	dd19      	ble.n	8014178 <__s2b+0x64>
 8014144:	f104 0809 	add.w	r8, r4, #9
 8014148:	46c1      	mov	r9, r8
 801414a:	442c      	add	r4, r5
 801414c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014150:	4601      	mov	r1, r0
 8014152:	3b30      	subs	r3, #48	; 0x30
 8014154:	220a      	movs	r2, #10
 8014156:	4630      	mov	r0, r6
 8014158:	f7ff ffa1 	bl	801409e <__multadd>
 801415c:	45a1      	cmp	r9, r4
 801415e:	d1f5      	bne.n	801414c <__s2b+0x38>
 8014160:	eb08 0405 	add.w	r4, r8, r5
 8014164:	3c08      	subs	r4, #8
 8014166:	1b2d      	subs	r5, r5, r4
 8014168:	1963      	adds	r3, r4, r5
 801416a:	42bb      	cmp	r3, r7
 801416c:	db07      	blt.n	801417e <__s2b+0x6a>
 801416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014172:	0052      	lsls	r2, r2, #1
 8014174:	3101      	adds	r1, #1
 8014176:	e7d9      	b.n	801412c <__s2b+0x18>
 8014178:	340a      	adds	r4, #10
 801417a:	2509      	movs	r5, #9
 801417c:	e7f3      	b.n	8014166 <__s2b+0x52>
 801417e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014182:	4601      	mov	r1, r0
 8014184:	3b30      	subs	r3, #48	; 0x30
 8014186:	220a      	movs	r2, #10
 8014188:	4630      	mov	r0, r6
 801418a:	f7ff ff88 	bl	801409e <__multadd>
 801418e:	e7eb      	b.n	8014168 <__s2b+0x54>

08014190 <__hi0bits>:
 8014190:	0c02      	lsrs	r2, r0, #16
 8014192:	0412      	lsls	r2, r2, #16
 8014194:	4603      	mov	r3, r0
 8014196:	b9b2      	cbnz	r2, 80141c6 <__hi0bits+0x36>
 8014198:	0403      	lsls	r3, r0, #16
 801419a:	2010      	movs	r0, #16
 801419c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80141a0:	bf04      	itt	eq
 80141a2:	021b      	lsleq	r3, r3, #8
 80141a4:	3008      	addeq	r0, #8
 80141a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80141aa:	bf04      	itt	eq
 80141ac:	011b      	lsleq	r3, r3, #4
 80141ae:	3004      	addeq	r0, #4
 80141b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80141b4:	bf04      	itt	eq
 80141b6:	009b      	lsleq	r3, r3, #2
 80141b8:	3002      	addeq	r0, #2
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	db06      	blt.n	80141cc <__hi0bits+0x3c>
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	d503      	bpl.n	80141ca <__hi0bits+0x3a>
 80141c2:	3001      	adds	r0, #1
 80141c4:	4770      	bx	lr
 80141c6:	2000      	movs	r0, #0
 80141c8:	e7e8      	b.n	801419c <__hi0bits+0xc>
 80141ca:	2020      	movs	r0, #32
 80141cc:	4770      	bx	lr

080141ce <__lo0bits>:
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	f013 0207 	ands.w	r2, r3, #7
 80141d4:	4601      	mov	r1, r0
 80141d6:	d00b      	beq.n	80141f0 <__lo0bits+0x22>
 80141d8:	07da      	lsls	r2, r3, #31
 80141da:	d423      	bmi.n	8014224 <__lo0bits+0x56>
 80141dc:	0798      	lsls	r0, r3, #30
 80141de:	bf49      	itett	mi
 80141e0:	085b      	lsrmi	r3, r3, #1
 80141e2:	089b      	lsrpl	r3, r3, #2
 80141e4:	2001      	movmi	r0, #1
 80141e6:	600b      	strmi	r3, [r1, #0]
 80141e8:	bf5c      	itt	pl
 80141ea:	600b      	strpl	r3, [r1, #0]
 80141ec:	2002      	movpl	r0, #2
 80141ee:	4770      	bx	lr
 80141f0:	b298      	uxth	r0, r3
 80141f2:	b9a8      	cbnz	r0, 8014220 <__lo0bits+0x52>
 80141f4:	0c1b      	lsrs	r3, r3, #16
 80141f6:	2010      	movs	r0, #16
 80141f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80141fc:	bf04      	itt	eq
 80141fe:	0a1b      	lsreq	r3, r3, #8
 8014200:	3008      	addeq	r0, #8
 8014202:	071a      	lsls	r2, r3, #28
 8014204:	bf04      	itt	eq
 8014206:	091b      	lsreq	r3, r3, #4
 8014208:	3004      	addeq	r0, #4
 801420a:	079a      	lsls	r2, r3, #30
 801420c:	bf04      	itt	eq
 801420e:	089b      	lsreq	r3, r3, #2
 8014210:	3002      	addeq	r0, #2
 8014212:	07da      	lsls	r2, r3, #31
 8014214:	d402      	bmi.n	801421c <__lo0bits+0x4e>
 8014216:	085b      	lsrs	r3, r3, #1
 8014218:	d006      	beq.n	8014228 <__lo0bits+0x5a>
 801421a:	3001      	adds	r0, #1
 801421c:	600b      	str	r3, [r1, #0]
 801421e:	4770      	bx	lr
 8014220:	4610      	mov	r0, r2
 8014222:	e7e9      	b.n	80141f8 <__lo0bits+0x2a>
 8014224:	2000      	movs	r0, #0
 8014226:	4770      	bx	lr
 8014228:	2020      	movs	r0, #32
 801422a:	4770      	bx	lr

0801422c <__i2b>:
 801422c:	b510      	push	{r4, lr}
 801422e:	460c      	mov	r4, r1
 8014230:	2101      	movs	r1, #1
 8014232:	f7ff fee9 	bl	8014008 <_Balloc>
 8014236:	2201      	movs	r2, #1
 8014238:	6144      	str	r4, [r0, #20]
 801423a:	6102      	str	r2, [r0, #16]
 801423c:	bd10      	pop	{r4, pc}

0801423e <__multiply>:
 801423e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014242:	4614      	mov	r4, r2
 8014244:	690a      	ldr	r2, [r1, #16]
 8014246:	6923      	ldr	r3, [r4, #16]
 8014248:	429a      	cmp	r2, r3
 801424a:	bfb8      	it	lt
 801424c:	460b      	movlt	r3, r1
 801424e:	4688      	mov	r8, r1
 8014250:	bfbc      	itt	lt
 8014252:	46a0      	movlt	r8, r4
 8014254:	461c      	movlt	r4, r3
 8014256:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801425a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801425e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014262:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014266:	eb07 0609 	add.w	r6, r7, r9
 801426a:	42b3      	cmp	r3, r6
 801426c:	bfb8      	it	lt
 801426e:	3101      	addlt	r1, #1
 8014270:	f7ff feca 	bl	8014008 <_Balloc>
 8014274:	f100 0514 	add.w	r5, r0, #20
 8014278:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801427c:	462b      	mov	r3, r5
 801427e:	2200      	movs	r2, #0
 8014280:	4573      	cmp	r3, lr
 8014282:	d316      	bcc.n	80142b2 <__multiply+0x74>
 8014284:	f104 0214 	add.w	r2, r4, #20
 8014288:	f108 0114 	add.w	r1, r8, #20
 801428c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014290:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	9b00      	ldr	r3, [sp, #0]
 8014298:	9201      	str	r2, [sp, #4]
 801429a:	4293      	cmp	r3, r2
 801429c:	d80c      	bhi.n	80142b8 <__multiply+0x7a>
 801429e:	2e00      	cmp	r6, #0
 80142a0:	dd03      	ble.n	80142aa <__multiply+0x6c>
 80142a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d05d      	beq.n	8014366 <__multiply+0x128>
 80142aa:	6106      	str	r6, [r0, #16]
 80142ac:	b003      	add	sp, #12
 80142ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b2:	f843 2b04 	str.w	r2, [r3], #4
 80142b6:	e7e3      	b.n	8014280 <__multiply+0x42>
 80142b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80142bc:	f1bb 0f00 	cmp.w	fp, #0
 80142c0:	d023      	beq.n	801430a <__multiply+0xcc>
 80142c2:	4689      	mov	r9, r1
 80142c4:	46ac      	mov	ip, r5
 80142c6:	f04f 0800 	mov.w	r8, #0
 80142ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80142ce:	f8dc a000 	ldr.w	sl, [ip]
 80142d2:	b2a3      	uxth	r3, r4
 80142d4:	fa1f fa8a 	uxth.w	sl, sl
 80142d8:	fb0b a303 	mla	r3, fp, r3, sl
 80142dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80142e0:	f8dc 4000 	ldr.w	r4, [ip]
 80142e4:	4443      	add	r3, r8
 80142e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80142ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80142ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80142f2:	46e2      	mov	sl, ip
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80142fa:	454f      	cmp	r7, r9
 80142fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014300:	f84a 3b04 	str.w	r3, [sl], #4
 8014304:	d82b      	bhi.n	801435e <__multiply+0x120>
 8014306:	f8cc 8004 	str.w	r8, [ip, #4]
 801430a:	9b01      	ldr	r3, [sp, #4]
 801430c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014310:	3204      	adds	r2, #4
 8014312:	f1ba 0f00 	cmp.w	sl, #0
 8014316:	d020      	beq.n	801435a <__multiply+0x11c>
 8014318:	682b      	ldr	r3, [r5, #0]
 801431a:	4689      	mov	r9, r1
 801431c:	46a8      	mov	r8, r5
 801431e:	f04f 0b00 	mov.w	fp, #0
 8014322:	f8b9 c000 	ldrh.w	ip, [r9]
 8014326:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801432a:	fb0a 440c 	mla	r4, sl, ip, r4
 801432e:	445c      	add	r4, fp
 8014330:	46c4      	mov	ip, r8
 8014332:	b29b      	uxth	r3, r3
 8014334:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014338:	f84c 3b04 	str.w	r3, [ip], #4
 801433c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014340:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014344:	0c1b      	lsrs	r3, r3, #16
 8014346:	fb0a b303 	mla	r3, sl, r3, fp
 801434a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801434e:	454f      	cmp	r7, r9
 8014350:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014354:	d805      	bhi.n	8014362 <__multiply+0x124>
 8014356:	f8c8 3004 	str.w	r3, [r8, #4]
 801435a:	3504      	adds	r5, #4
 801435c:	e79b      	b.n	8014296 <__multiply+0x58>
 801435e:	46d4      	mov	ip, sl
 8014360:	e7b3      	b.n	80142ca <__multiply+0x8c>
 8014362:	46e0      	mov	r8, ip
 8014364:	e7dd      	b.n	8014322 <__multiply+0xe4>
 8014366:	3e01      	subs	r6, #1
 8014368:	e799      	b.n	801429e <__multiply+0x60>
	...

0801436c <__pow5mult>:
 801436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014370:	4615      	mov	r5, r2
 8014372:	f012 0203 	ands.w	r2, r2, #3
 8014376:	4606      	mov	r6, r0
 8014378:	460f      	mov	r7, r1
 801437a:	d007      	beq.n	801438c <__pow5mult+0x20>
 801437c:	3a01      	subs	r2, #1
 801437e:	4c21      	ldr	r4, [pc, #132]	; (8014404 <__pow5mult+0x98>)
 8014380:	2300      	movs	r3, #0
 8014382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014386:	f7ff fe8a 	bl	801409e <__multadd>
 801438a:	4607      	mov	r7, r0
 801438c:	10ad      	asrs	r5, r5, #2
 801438e:	d035      	beq.n	80143fc <__pow5mult+0x90>
 8014390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014392:	b93c      	cbnz	r4, 80143a4 <__pow5mult+0x38>
 8014394:	2010      	movs	r0, #16
 8014396:	f7fc fb5d 	bl	8010a54 <malloc>
 801439a:	6270      	str	r0, [r6, #36]	; 0x24
 801439c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143a0:	6004      	str	r4, [r0, #0]
 80143a2:	60c4      	str	r4, [r0, #12]
 80143a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80143a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143ac:	b94c      	cbnz	r4, 80143c2 <__pow5mult+0x56>
 80143ae:	f240 2171 	movw	r1, #625	; 0x271
 80143b2:	4630      	mov	r0, r6
 80143b4:	f7ff ff3a 	bl	801422c <__i2b>
 80143b8:	2300      	movs	r3, #0
 80143ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80143be:	4604      	mov	r4, r0
 80143c0:	6003      	str	r3, [r0, #0]
 80143c2:	f04f 0800 	mov.w	r8, #0
 80143c6:	07eb      	lsls	r3, r5, #31
 80143c8:	d50a      	bpl.n	80143e0 <__pow5mult+0x74>
 80143ca:	4639      	mov	r1, r7
 80143cc:	4622      	mov	r2, r4
 80143ce:	4630      	mov	r0, r6
 80143d0:	f7ff ff35 	bl	801423e <__multiply>
 80143d4:	4639      	mov	r1, r7
 80143d6:	4681      	mov	r9, r0
 80143d8:	4630      	mov	r0, r6
 80143da:	f7ff fe49 	bl	8014070 <_Bfree>
 80143de:	464f      	mov	r7, r9
 80143e0:	106d      	asrs	r5, r5, #1
 80143e2:	d00b      	beq.n	80143fc <__pow5mult+0x90>
 80143e4:	6820      	ldr	r0, [r4, #0]
 80143e6:	b938      	cbnz	r0, 80143f8 <__pow5mult+0x8c>
 80143e8:	4622      	mov	r2, r4
 80143ea:	4621      	mov	r1, r4
 80143ec:	4630      	mov	r0, r6
 80143ee:	f7ff ff26 	bl	801423e <__multiply>
 80143f2:	6020      	str	r0, [r4, #0]
 80143f4:	f8c0 8000 	str.w	r8, [r0]
 80143f8:	4604      	mov	r4, r0
 80143fa:	e7e4      	b.n	80143c6 <__pow5mult+0x5a>
 80143fc:	4638      	mov	r0, r7
 80143fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014402:	bf00      	nop
 8014404:	08015f68 	.word	0x08015f68

08014408 <__lshift>:
 8014408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801440c:	460c      	mov	r4, r1
 801440e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014412:	6923      	ldr	r3, [r4, #16]
 8014414:	6849      	ldr	r1, [r1, #4]
 8014416:	eb0a 0903 	add.w	r9, sl, r3
 801441a:	68a3      	ldr	r3, [r4, #8]
 801441c:	4607      	mov	r7, r0
 801441e:	4616      	mov	r6, r2
 8014420:	f109 0501 	add.w	r5, r9, #1
 8014424:	42ab      	cmp	r3, r5
 8014426:	db32      	blt.n	801448e <__lshift+0x86>
 8014428:	4638      	mov	r0, r7
 801442a:	f7ff fded 	bl	8014008 <_Balloc>
 801442e:	2300      	movs	r3, #0
 8014430:	4680      	mov	r8, r0
 8014432:	f100 0114 	add.w	r1, r0, #20
 8014436:	461a      	mov	r2, r3
 8014438:	4553      	cmp	r3, sl
 801443a:	db2b      	blt.n	8014494 <__lshift+0x8c>
 801443c:	6920      	ldr	r0, [r4, #16]
 801443e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014442:	f104 0314 	add.w	r3, r4, #20
 8014446:	f016 021f 	ands.w	r2, r6, #31
 801444a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801444e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014452:	d025      	beq.n	80144a0 <__lshift+0x98>
 8014454:	f1c2 0e20 	rsb	lr, r2, #32
 8014458:	2000      	movs	r0, #0
 801445a:	681e      	ldr	r6, [r3, #0]
 801445c:	468a      	mov	sl, r1
 801445e:	4096      	lsls	r6, r2
 8014460:	4330      	orrs	r0, r6
 8014462:	f84a 0b04 	str.w	r0, [sl], #4
 8014466:	f853 0b04 	ldr.w	r0, [r3], #4
 801446a:	459c      	cmp	ip, r3
 801446c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014470:	d814      	bhi.n	801449c <__lshift+0x94>
 8014472:	6048      	str	r0, [r1, #4]
 8014474:	b108      	cbz	r0, 801447a <__lshift+0x72>
 8014476:	f109 0502 	add.w	r5, r9, #2
 801447a:	3d01      	subs	r5, #1
 801447c:	4638      	mov	r0, r7
 801447e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014482:	4621      	mov	r1, r4
 8014484:	f7ff fdf4 	bl	8014070 <_Bfree>
 8014488:	4640      	mov	r0, r8
 801448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448e:	3101      	adds	r1, #1
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	e7c7      	b.n	8014424 <__lshift+0x1c>
 8014494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014498:	3301      	adds	r3, #1
 801449a:	e7cd      	b.n	8014438 <__lshift+0x30>
 801449c:	4651      	mov	r1, sl
 801449e:	e7dc      	b.n	801445a <__lshift+0x52>
 80144a0:	3904      	subs	r1, #4
 80144a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80144a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80144aa:	459c      	cmp	ip, r3
 80144ac:	d8f9      	bhi.n	80144a2 <__lshift+0x9a>
 80144ae:	e7e4      	b.n	801447a <__lshift+0x72>

080144b0 <__mcmp>:
 80144b0:	6903      	ldr	r3, [r0, #16]
 80144b2:	690a      	ldr	r2, [r1, #16]
 80144b4:	1a9b      	subs	r3, r3, r2
 80144b6:	b530      	push	{r4, r5, lr}
 80144b8:	d10c      	bne.n	80144d4 <__mcmp+0x24>
 80144ba:	0092      	lsls	r2, r2, #2
 80144bc:	3014      	adds	r0, #20
 80144be:	3114      	adds	r1, #20
 80144c0:	1884      	adds	r4, r0, r2
 80144c2:	4411      	add	r1, r2
 80144c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80144c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80144cc:	4295      	cmp	r5, r2
 80144ce:	d003      	beq.n	80144d8 <__mcmp+0x28>
 80144d0:	d305      	bcc.n	80144de <__mcmp+0x2e>
 80144d2:	2301      	movs	r3, #1
 80144d4:	4618      	mov	r0, r3
 80144d6:	bd30      	pop	{r4, r5, pc}
 80144d8:	42a0      	cmp	r0, r4
 80144da:	d3f3      	bcc.n	80144c4 <__mcmp+0x14>
 80144dc:	e7fa      	b.n	80144d4 <__mcmp+0x24>
 80144de:	f04f 33ff 	mov.w	r3, #4294967295
 80144e2:	e7f7      	b.n	80144d4 <__mcmp+0x24>

080144e4 <__mdiff>:
 80144e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e8:	460d      	mov	r5, r1
 80144ea:	4607      	mov	r7, r0
 80144ec:	4611      	mov	r1, r2
 80144ee:	4628      	mov	r0, r5
 80144f0:	4614      	mov	r4, r2
 80144f2:	f7ff ffdd 	bl	80144b0 <__mcmp>
 80144f6:	1e06      	subs	r6, r0, #0
 80144f8:	d108      	bne.n	801450c <__mdiff+0x28>
 80144fa:	4631      	mov	r1, r6
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7ff fd83 	bl	8014008 <_Balloc>
 8014502:	2301      	movs	r3, #1
 8014504:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801450c:	bfa4      	itt	ge
 801450e:	4623      	movge	r3, r4
 8014510:	462c      	movge	r4, r5
 8014512:	4638      	mov	r0, r7
 8014514:	6861      	ldr	r1, [r4, #4]
 8014516:	bfa6      	itte	ge
 8014518:	461d      	movge	r5, r3
 801451a:	2600      	movge	r6, #0
 801451c:	2601      	movlt	r6, #1
 801451e:	f7ff fd73 	bl	8014008 <_Balloc>
 8014522:	692b      	ldr	r3, [r5, #16]
 8014524:	60c6      	str	r6, [r0, #12]
 8014526:	6926      	ldr	r6, [r4, #16]
 8014528:	f105 0914 	add.w	r9, r5, #20
 801452c:	f104 0214 	add.w	r2, r4, #20
 8014530:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014534:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014538:	f100 0514 	add.w	r5, r0, #20
 801453c:	f04f 0e00 	mov.w	lr, #0
 8014540:	f852 ab04 	ldr.w	sl, [r2], #4
 8014544:	f859 4b04 	ldr.w	r4, [r9], #4
 8014548:	fa1e f18a 	uxtah	r1, lr, sl
 801454c:	b2a3      	uxth	r3, r4
 801454e:	1ac9      	subs	r1, r1, r3
 8014550:	0c23      	lsrs	r3, r4, #16
 8014552:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014556:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801455a:	b289      	uxth	r1, r1
 801455c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014560:	45c8      	cmp	r8, r9
 8014562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014566:	4694      	mov	ip, r2
 8014568:	f845 3b04 	str.w	r3, [r5], #4
 801456c:	d8e8      	bhi.n	8014540 <__mdiff+0x5c>
 801456e:	45bc      	cmp	ip, r7
 8014570:	d304      	bcc.n	801457c <__mdiff+0x98>
 8014572:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014576:	b183      	cbz	r3, 801459a <__mdiff+0xb6>
 8014578:	6106      	str	r6, [r0, #16]
 801457a:	e7c5      	b.n	8014508 <__mdiff+0x24>
 801457c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014580:	fa1e f381 	uxtah	r3, lr, r1
 8014584:	141a      	asrs	r2, r3, #16
 8014586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801458a:	b29b      	uxth	r3, r3
 801458c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014590:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014594:	f845 3b04 	str.w	r3, [r5], #4
 8014598:	e7e9      	b.n	801456e <__mdiff+0x8a>
 801459a:	3e01      	subs	r6, #1
 801459c:	e7e9      	b.n	8014572 <__mdiff+0x8e>
	...

080145a0 <__ulp>:
 80145a0:	4b12      	ldr	r3, [pc, #72]	; (80145ec <__ulp+0x4c>)
 80145a2:	ee10 2a90 	vmov	r2, s1
 80145a6:	401a      	ands	r2, r3
 80145a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dd04      	ble.n	80145ba <__ulp+0x1a>
 80145b0:	2000      	movs	r0, #0
 80145b2:	4619      	mov	r1, r3
 80145b4:	ec41 0b10 	vmov	d0, r0, r1
 80145b8:	4770      	bx	lr
 80145ba:	425b      	negs	r3, r3
 80145bc:	151b      	asrs	r3, r3, #20
 80145be:	2b13      	cmp	r3, #19
 80145c0:	f04f 0000 	mov.w	r0, #0
 80145c4:	f04f 0100 	mov.w	r1, #0
 80145c8:	dc04      	bgt.n	80145d4 <__ulp+0x34>
 80145ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80145ce:	fa42 f103 	asr.w	r1, r2, r3
 80145d2:	e7ef      	b.n	80145b4 <__ulp+0x14>
 80145d4:	3b14      	subs	r3, #20
 80145d6:	2b1e      	cmp	r3, #30
 80145d8:	f04f 0201 	mov.w	r2, #1
 80145dc:	bfda      	itte	le
 80145de:	f1c3 031f 	rsble	r3, r3, #31
 80145e2:	fa02 f303 	lslle.w	r3, r2, r3
 80145e6:	4613      	movgt	r3, r2
 80145e8:	4618      	mov	r0, r3
 80145ea:	e7e3      	b.n	80145b4 <__ulp+0x14>
 80145ec:	7ff00000 	.word	0x7ff00000

080145f0 <__b2d>:
 80145f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f2:	6905      	ldr	r5, [r0, #16]
 80145f4:	f100 0714 	add.w	r7, r0, #20
 80145f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80145fc:	1f2e      	subs	r6, r5, #4
 80145fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014602:	4620      	mov	r0, r4
 8014604:	f7ff fdc4 	bl	8014190 <__hi0bits>
 8014608:	f1c0 0320 	rsb	r3, r0, #32
 801460c:	280a      	cmp	r0, #10
 801460e:	600b      	str	r3, [r1, #0]
 8014610:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014688 <__b2d+0x98>
 8014614:	dc14      	bgt.n	8014640 <__b2d+0x50>
 8014616:	f1c0 0e0b 	rsb	lr, r0, #11
 801461a:	fa24 f10e 	lsr.w	r1, r4, lr
 801461e:	42b7      	cmp	r7, r6
 8014620:	ea41 030c 	orr.w	r3, r1, ip
 8014624:	bf34      	ite	cc
 8014626:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801462a:	2100      	movcs	r1, #0
 801462c:	3015      	adds	r0, #21
 801462e:	fa04 f000 	lsl.w	r0, r4, r0
 8014632:	fa21 f10e 	lsr.w	r1, r1, lr
 8014636:	ea40 0201 	orr.w	r2, r0, r1
 801463a:	ec43 2b10 	vmov	d0, r2, r3
 801463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014640:	42b7      	cmp	r7, r6
 8014642:	bf3a      	itte	cc
 8014644:	f1a5 0608 	subcc.w	r6, r5, #8
 8014648:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801464c:	2100      	movcs	r1, #0
 801464e:	380b      	subs	r0, #11
 8014650:	d015      	beq.n	801467e <__b2d+0x8e>
 8014652:	4084      	lsls	r4, r0
 8014654:	f1c0 0520 	rsb	r5, r0, #32
 8014658:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801465c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014660:	42be      	cmp	r6, r7
 8014662:	fa21 fc05 	lsr.w	ip, r1, r5
 8014666:	ea44 030c 	orr.w	r3, r4, ip
 801466a:	bf8c      	ite	hi
 801466c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014670:	2400      	movls	r4, #0
 8014672:	fa01 f000 	lsl.w	r0, r1, r0
 8014676:	40ec      	lsrs	r4, r5
 8014678:	ea40 0204 	orr.w	r2, r0, r4
 801467c:	e7dd      	b.n	801463a <__b2d+0x4a>
 801467e:	ea44 030c 	orr.w	r3, r4, ip
 8014682:	460a      	mov	r2, r1
 8014684:	e7d9      	b.n	801463a <__b2d+0x4a>
 8014686:	bf00      	nop
 8014688:	3ff00000 	.word	0x3ff00000

0801468c <__d2b>:
 801468c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014690:	460e      	mov	r6, r1
 8014692:	2101      	movs	r1, #1
 8014694:	ec59 8b10 	vmov	r8, r9, d0
 8014698:	4615      	mov	r5, r2
 801469a:	f7ff fcb5 	bl	8014008 <_Balloc>
 801469e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80146a2:	4607      	mov	r7, r0
 80146a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80146a8:	bb34      	cbnz	r4, 80146f8 <__d2b+0x6c>
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	f1b8 0300 	subs.w	r3, r8, #0
 80146b0:	d027      	beq.n	8014702 <__d2b+0x76>
 80146b2:	a802      	add	r0, sp, #8
 80146b4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80146b8:	f7ff fd89 	bl	80141ce <__lo0bits>
 80146bc:	9900      	ldr	r1, [sp, #0]
 80146be:	b1f0      	cbz	r0, 80146fe <__d2b+0x72>
 80146c0:	9a01      	ldr	r2, [sp, #4]
 80146c2:	f1c0 0320 	rsb	r3, r0, #32
 80146c6:	fa02 f303 	lsl.w	r3, r2, r3
 80146ca:	430b      	orrs	r3, r1
 80146cc:	40c2      	lsrs	r2, r0
 80146ce:	617b      	str	r3, [r7, #20]
 80146d0:	9201      	str	r2, [sp, #4]
 80146d2:	9b01      	ldr	r3, [sp, #4]
 80146d4:	61bb      	str	r3, [r7, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	bf14      	ite	ne
 80146da:	2102      	movne	r1, #2
 80146dc:	2101      	moveq	r1, #1
 80146de:	6139      	str	r1, [r7, #16]
 80146e0:	b1c4      	cbz	r4, 8014714 <__d2b+0x88>
 80146e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80146e6:	4404      	add	r4, r0
 80146e8:	6034      	str	r4, [r6, #0]
 80146ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146ee:	6028      	str	r0, [r5, #0]
 80146f0:	4638      	mov	r0, r7
 80146f2:	b003      	add	sp, #12
 80146f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146fc:	e7d5      	b.n	80146aa <__d2b+0x1e>
 80146fe:	6179      	str	r1, [r7, #20]
 8014700:	e7e7      	b.n	80146d2 <__d2b+0x46>
 8014702:	a801      	add	r0, sp, #4
 8014704:	f7ff fd63 	bl	80141ce <__lo0bits>
 8014708:	9b01      	ldr	r3, [sp, #4]
 801470a:	617b      	str	r3, [r7, #20]
 801470c:	2101      	movs	r1, #1
 801470e:	6139      	str	r1, [r7, #16]
 8014710:	3020      	adds	r0, #32
 8014712:	e7e5      	b.n	80146e0 <__d2b+0x54>
 8014714:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801471c:	6030      	str	r0, [r6, #0]
 801471e:	6918      	ldr	r0, [r3, #16]
 8014720:	f7ff fd36 	bl	8014190 <__hi0bits>
 8014724:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014728:	e7e1      	b.n	80146ee <__d2b+0x62>

0801472a <__ratio>:
 801472a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472e:	4688      	mov	r8, r1
 8014730:	4669      	mov	r1, sp
 8014732:	4681      	mov	r9, r0
 8014734:	f7ff ff5c 	bl	80145f0 <__b2d>
 8014738:	a901      	add	r1, sp, #4
 801473a:	4640      	mov	r0, r8
 801473c:	ec57 6b10 	vmov	r6, r7, d0
 8014740:	ee10 4a10 	vmov	r4, s0
 8014744:	f7ff ff54 	bl	80145f0 <__b2d>
 8014748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801474c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014750:	eba3 0c02 	sub.w	ip, r3, r2
 8014754:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014758:	1a9b      	subs	r3, r3, r2
 801475a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801475e:	ec51 0b10 	vmov	r0, r1, d0
 8014762:	2b00      	cmp	r3, #0
 8014764:	ee10 aa10 	vmov	sl, s0
 8014768:	bfce      	itee	gt
 801476a:	463a      	movgt	r2, r7
 801476c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014770:	460a      	movle	r2, r1
 8014772:	463d      	mov	r5, r7
 8014774:	468b      	mov	fp, r1
 8014776:	bfcc      	ite	gt
 8014778:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801477c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014780:	ec45 4b17 	vmov	d7, r4, r5
 8014784:	ec4b ab16 	vmov	d6, sl, fp
 8014788:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801478c:	b003      	add	sp, #12
 801478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014792 <__copybits>:
 8014792:	3901      	subs	r1, #1
 8014794:	b510      	push	{r4, lr}
 8014796:	1149      	asrs	r1, r1, #5
 8014798:	6914      	ldr	r4, [r2, #16]
 801479a:	3101      	adds	r1, #1
 801479c:	f102 0314 	add.w	r3, r2, #20
 80147a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80147a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80147a8:	42a3      	cmp	r3, r4
 80147aa:	4602      	mov	r2, r0
 80147ac:	d303      	bcc.n	80147b6 <__copybits+0x24>
 80147ae:	2300      	movs	r3, #0
 80147b0:	428a      	cmp	r2, r1
 80147b2:	d305      	bcc.n	80147c0 <__copybits+0x2e>
 80147b4:	bd10      	pop	{r4, pc}
 80147b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ba:	f840 2b04 	str.w	r2, [r0], #4
 80147be:	e7f3      	b.n	80147a8 <__copybits+0x16>
 80147c0:	f842 3b04 	str.w	r3, [r2], #4
 80147c4:	e7f4      	b.n	80147b0 <__copybits+0x1e>

080147c6 <__any_on>:
 80147c6:	f100 0214 	add.w	r2, r0, #20
 80147ca:	6900      	ldr	r0, [r0, #16]
 80147cc:	114b      	asrs	r3, r1, #5
 80147ce:	4298      	cmp	r0, r3
 80147d0:	b510      	push	{r4, lr}
 80147d2:	db11      	blt.n	80147f8 <__any_on+0x32>
 80147d4:	dd0a      	ble.n	80147ec <__any_on+0x26>
 80147d6:	f011 011f 	ands.w	r1, r1, #31
 80147da:	d007      	beq.n	80147ec <__any_on+0x26>
 80147dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80147e0:	fa24 f001 	lsr.w	r0, r4, r1
 80147e4:	fa00 f101 	lsl.w	r1, r0, r1
 80147e8:	428c      	cmp	r4, r1
 80147ea:	d10b      	bne.n	8014804 <__any_on+0x3e>
 80147ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d803      	bhi.n	80147fc <__any_on+0x36>
 80147f4:	2000      	movs	r0, #0
 80147f6:	bd10      	pop	{r4, pc}
 80147f8:	4603      	mov	r3, r0
 80147fa:	e7f7      	b.n	80147ec <__any_on+0x26>
 80147fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014800:	2900      	cmp	r1, #0
 8014802:	d0f5      	beq.n	80147f0 <__any_on+0x2a>
 8014804:	2001      	movs	r0, #1
 8014806:	e7f6      	b.n	80147f6 <__any_on+0x30>

08014808 <_realloc_r>:
 8014808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480a:	4607      	mov	r7, r0
 801480c:	4614      	mov	r4, r2
 801480e:	460e      	mov	r6, r1
 8014810:	b921      	cbnz	r1, 801481c <_realloc_r+0x14>
 8014812:	4611      	mov	r1, r2
 8014814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014818:	f7fc b994 	b.w	8010b44 <_malloc_r>
 801481c:	b922      	cbnz	r2, 8014828 <_realloc_r+0x20>
 801481e:	f7fc f943 	bl	8010aa8 <_free_r>
 8014822:	4625      	mov	r5, r4
 8014824:	4628      	mov	r0, r5
 8014826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014828:	f000 ff0d 	bl	8015646 <_malloc_usable_size_r>
 801482c:	42a0      	cmp	r0, r4
 801482e:	d20f      	bcs.n	8014850 <_realloc_r+0x48>
 8014830:	4621      	mov	r1, r4
 8014832:	4638      	mov	r0, r7
 8014834:	f7fc f986 	bl	8010b44 <_malloc_r>
 8014838:	4605      	mov	r5, r0
 801483a:	2800      	cmp	r0, #0
 801483c:	d0f2      	beq.n	8014824 <_realloc_r+0x1c>
 801483e:	4631      	mov	r1, r6
 8014840:	4622      	mov	r2, r4
 8014842:	f7fc f90f 	bl	8010a64 <memcpy>
 8014846:	4631      	mov	r1, r6
 8014848:	4638      	mov	r0, r7
 801484a:	f7fc f92d 	bl	8010aa8 <_free_r>
 801484e:	e7e9      	b.n	8014824 <_realloc_r+0x1c>
 8014850:	4635      	mov	r5, r6
 8014852:	e7e7      	b.n	8014824 <_realloc_r+0x1c>

08014854 <__ssputs_r>:
 8014854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014858:	688e      	ldr	r6, [r1, #8]
 801485a:	429e      	cmp	r6, r3
 801485c:	4682      	mov	sl, r0
 801485e:	460c      	mov	r4, r1
 8014860:	4690      	mov	r8, r2
 8014862:	4699      	mov	r9, r3
 8014864:	d837      	bhi.n	80148d6 <__ssputs_r+0x82>
 8014866:	898a      	ldrh	r2, [r1, #12]
 8014868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801486c:	d031      	beq.n	80148d2 <__ssputs_r+0x7e>
 801486e:	6825      	ldr	r5, [r4, #0]
 8014870:	6909      	ldr	r1, [r1, #16]
 8014872:	1a6f      	subs	r7, r5, r1
 8014874:	6965      	ldr	r5, [r4, #20]
 8014876:	2302      	movs	r3, #2
 8014878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801487c:	fb95 f5f3 	sdiv	r5, r5, r3
 8014880:	f109 0301 	add.w	r3, r9, #1
 8014884:	443b      	add	r3, r7
 8014886:	429d      	cmp	r5, r3
 8014888:	bf38      	it	cc
 801488a:	461d      	movcc	r5, r3
 801488c:	0553      	lsls	r3, r2, #21
 801488e:	d530      	bpl.n	80148f2 <__ssputs_r+0x9e>
 8014890:	4629      	mov	r1, r5
 8014892:	f7fc f957 	bl	8010b44 <_malloc_r>
 8014896:	4606      	mov	r6, r0
 8014898:	b950      	cbnz	r0, 80148b0 <__ssputs_r+0x5c>
 801489a:	230c      	movs	r3, #12
 801489c:	f8ca 3000 	str.w	r3, [sl]
 80148a0:	89a3      	ldrh	r3, [r4, #12]
 80148a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148a6:	81a3      	strh	r3, [r4, #12]
 80148a8:	f04f 30ff 	mov.w	r0, #4294967295
 80148ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148b0:	463a      	mov	r2, r7
 80148b2:	6921      	ldr	r1, [r4, #16]
 80148b4:	f7fc f8d6 	bl	8010a64 <memcpy>
 80148b8:	89a3      	ldrh	r3, [r4, #12]
 80148ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148c2:	81a3      	strh	r3, [r4, #12]
 80148c4:	6126      	str	r6, [r4, #16]
 80148c6:	6165      	str	r5, [r4, #20]
 80148c8:	443e      	add	r6, r7
 80148ca:	1bed      	subs	r5, r5, r7
 80148cc:	6026      	str	r6, [r4, #0]
 80148ce:	60a5      	str	r5, [r4, #8]
 80148d0:	464e      	mov	r6, r9
 80148d2:	454e      	cmp	r6, r9
 80148d4:	d900      	bls.n	80148d8 <__ssputs_r+0x84>
 80148d6:	464e      	mov	r6, r9
 80148d8:	4632      	mov	r2, r6
 80148da:	4641      	mov	r1, r8
 80148dc:	6820      	ldr	r0, [r4, #0]
 80148de:	f000 fe99 	bl	8015614 <memmove>
 80148e2:	68a3      	ldr	r3, [r4, #8]
 80148e4:	1b9b      	subs	r3, r3, r6
 80148e6:	60a3      	str	r3, [r4, #8]
 80148e8:	6823      	ldr	r3, [r4, #0]
 80148ea:	441e      	add	r6, r3
 80148ec:	6026      	str	r6, [r4, #0]
 80148ee:	2000      	movs	r0, #0
 80148f0:	e7dc      	b.n	80148ac <__ssputs_r+0x58>
 80148f2:	462a      	mov	r2, r5
 80148f4:	f7ff ff88 	bl	8014808 <_realloc_r>
 80148f8:	4606      	mov	r6, r0
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1e2      	bne.n	80148c4 <__ssputs_r+0x70>
 80148fe:	6921      	ldr	r1, [r4, #16]
 8014900:	4650      	mov	r0, sl
 8014902:	f7fc f8d1 	bl	8010aa8 <_free_r>
 8014906:	e7c8      	b.n	801489a <__ssputs_r+0x46>

08014908 <_svfiprintf_r>:
 8014908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801490c:	461d      	mov	r5, r3
 801490e:	898b      	ldrh	r3, [r1, #12]
 8014910:	061f      	lsls	r7, r3, #24
 8014912:	b09d      	sub	sp, #116	; 0x74
 8014914:	4680      	mov	r8, r0
 8014916:	460c      	mov	r4, r1
 8014918:	4616      	mov	r6, r2
 801491a:	d50f      	bpl.n	801493c <_svfiprintf_r+0x34>
 801491c:	690b      	ldr	r3, [r1, #16]
 801491e:	b96b      	cbnz	r3, 801493c <_svfiprintf_r+0x34>
 8014920:	2140      	movs	r1, #64	; 0x40
 8014922:	f7fc f90f 	bl	8010b44 <_malloc_r>
 8014926:	6020      	str	r0, [r4, #0]
 8014928:	6120      	str	r0, [r4, #16]
 801492a:	b928      	cbnz	r0, 8014938 <_svfiprintf_r+0x30>
 801492c:	230c      	movs	r3, #12
 801492e:	f8c8 3000 	str.w	r3, [r8]
 8014932:	f04f 30ff 	mov.w	r0, #4294967295
 8014936:	e0c8      	b.n	8014aca <_svfiprintf_r+0x1c2>
 8014938:	2340      	movs	r3, #64	; 0x40
 801493a:	6163      	str	r3, [r4, #20]
 801493c:	2300      	movs	r3, #0
 801493e:	9309      	str	r3, [sp, #36]	; 0x24
 8014940:	2320      	movs	r3, #32
 8014942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014946:	2330      	movs	r3, #48	; 0x30
 8014948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801494c:	9503      	str	r5, [sp, #12]
 801494e:	f04f 0b01 	mov.w	fp, #1
 8014952:	4637      	mov	r7, r6
 8014954:	463d      	mov	r5, r7
 8014956:	f815 3b01 	ldrb.w	r3, [r5], #1
 801495a:	b10b      	cbz	r3, 8014960 <_svfiprintf_r+0x58>
 801495c:	2b25      	cmp	r3, #37	; 0x25
 801495e:	d13e      	bne.n	80149de <_svfiprintf_r+0xd6>
 8014960:	ebb7 0a06 	subs.w	sl, r7, r6
 8014964:	d00b      	beq.n	801497e <_svfiprintf_r+0x76>
 8014966:	4653      	mov	r3, sl
 8014968:	4632      	mov	r2, r6
 801496a:	4621      	mov	r1, r4
 801496c:	4640      	mov	r0, r8
 801496e:	f7ff ff71 	bl	8014854 <__ssputs_r>
 8014972:	3001      	adds	r0, #1
 8014974:	f000 80a4 	beq.w	8014ac0 <_svfiprintf_r+0x1b8>
 8014978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497a:	4453      	add	r3, sl
 801497c:	9309      	str	r3, [sp, #36]	; 0x24
 801497e:	783b      	ldrb	r3, [r7, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 809d 	beq.w	8014ac0 <_svfiprintf_r+0x1b8>
 8014986:	2300      	movs	r3, #0
 8014988:	f04f 32ff 	mov.w	r2, #4294967295
 801498c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014990:	9304      	str	r3, [sp, #16]
 8014992:	9307      	str	r3, [sp, #28]
 8014994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014998:	931a      	str	r3, [sp, #104]	; 0x68
 801499a:	462f      	mov	r7, r5
 801499c:	2205      	movs	r2, #5
 801499e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80149a2:	4850      	ldr	r0, [pc, #320]	; (8014ae4 <_svfiprintf_r+0x1dc>)
 80149a4:	f7eb fc54 	bl	8000250 <memchr>
 80149a8:	9b04      	ldr	r3, [sp, #16]
 80149aa:	b9d0      	cbnz	r0, 80149e2 <_svfiprintf_r+0xda>
 80149ac:	06d9      	lsls	r1, r3, #27
 80149ae:	bf44      	itt	mi
 80149b0:	2220      	movmi	r2, #32
 80149b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149b6:	071a      	lsls	r2, r3, #28
 80149b8:	bf44      	itt	mi
 80149ba:	222b      	movmi	r2, #43	; 0x2b
 80149bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149c0:	782a      	ldrb	r2, [r5, #0]
 80149c2:	2a2a      	cmp	r2, #42	; 0x2a
 80149c4:	d015      	beq.n	80149f2 <_svfiprintf_r+0xea>
 80149c6:	9a07      	ldr	r2, [sp, #28]
 80149c8:	462f      	mov	r7, r5
 80149ca:	2000      	movs	r0, #0
 80149cc:	250a      	movs	r5, #10
 80149ce:	4639      	mov	r1, r7
 80149d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149d4:	3b30      	subs	r3, #48	; 0x30
 80149d6:	2b09      	cmp	r3, #9
 80149d8:	d94d      	bls.n	8014a76 <_svfiprintf_r+0x16e>
 80149da:	b1b8      	cbz	r0, 8014a0c <_svfiprintf_r+0x104>
 80149dc:	e00f      	b.n	80149fe <_svfiprintf_r+0xf6>
 80149de:	462f      	mov	r7, r5
 80149e0:	e7b8      	b.n	8014954 <_svfiprintf_r+0x4c>
 80149e2:	4a40      	ldr	r2, [pc, #256]	; (8014ae4 <_svfiprintf_r+0x1dc>)
 80149e4:	1a80      	subs	r0, r0, r2
 80149e6:	fa0b f000 	lsl.w	r0, fp, r0
 80149ea:	4318      	orrs	r0, r3
 80149ec:	9004      	str	r0, [sp, #16]
 80149ee:	463d      	mov	r5, r7
 80149f0:	e7d3      	b.n	801499a <_svfiprintf_r+0x92>
 80149f2:	9a03      	ldr	r2, [sp, #12]
 80149f4:	1d11      	adds	r1, r2, #4
 80149f6:	6812      	ldr	r2, [r2, #0]
 80149f8:	9103      	str	r1, [sp, #12]
 80149fa:	2a00      	cmp	r2, #0
 80149fc:	db01      	blt.n	8014a02 <_svfiprintf_r+0xfa>
 80149fe:	9207      	str	r2, [sp, #28]
 8014a00:	e004      	b.n	8014a0c <_svfiprintf_r+0x104>
 8014a02:	4252      	negs	r2, r2
 8014a04:	f043 0302 	orr.w	r3, r3, #2
 8014a08:	9207      	str	r2, [sp, #28]
 8014a0a:	9304      	str	r3, [sp, #16]
 8014a0c:	783b      	ldrb	r3, [r7, #0]
 8014a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8014a10:	d10c      	bne.n	8014a2c <_svfiprintf_r+0x124>
 8014a12:	787b      	ldrb	r3, [r7, #1]
 8014a14:	2b2a      	cmp	r3, #42	; 0x2a
 8014a16:	d133      	bne.n	8014a80 <_svfiprintf_r+0x178>
 8014a18:	9b03      	ldr	r3, [sp, #12]
 8014a1a:	1d1a      	adds	r2, r3, #4
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	9203      	str	r2, [sp, #12]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	bfb8      	it	lt
 8014a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a28:	3702      	adds	r7, #2
 8014a2a:	9305      	str	r3, [sp, #20]
 8014a2c:	4d2e      	ldr	r5, [pc, #184]	; (8014ae8 <_svfiprintf_r+0x1e0>)
 8014a2e:	7839      	ldrb	r1, [r7, #0]
 8014a30:	2203      	movs	r2, #3
 8014a32:	4628      	mov	r0, r5
 8014a34:	f7eb fc0c 	bl	8000250 <memchr>
 8014a38:	b138      	cbz	r0, 8014a4a <_svfiprintf_r+0x142>
 8014a3a:	2340      	movs	r3, #64	; 0x40
 8014a3c:	1b40      	subs	r0, r0, r5
 8014a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8014a42:	9b04      	ldr	r3, [sp, #16]
 8014a44:	4303      	orrs	r3, r0
 8014a46:	3701      	adds	r7, #1
 8014a48:	9304      	str	r3, [sp, #16]
 8014a4a:	7839      	ldrb	r1, [r7, #0]
 8014a4c:	4827      	ldr	r0, [pc, #156]	; (8014aec <_svfiprintf_r+0x1e4>)
 8014a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a52:	2206      	movs	r2, #6
 8014a54:	1c7e      	adds	r6, r7, #1
 8014a56:	f7eb fbfb 	bl	8000250 <memchr>
 8014a5a:	2800      	cmp	r0, #0
 8014a5c:	d038      	beq.n	8014ad0 <_svfiprintf_r+0x1c8>
 8014a5e:	4b24      	ldr	r3, [pc, #144]	; (8014af0 <_svfiprintf_r+0x1e8>)
 8014a60:	bb13      	cbnz	r3, 8014aa8 <_svfiprintf_r+0x1a0>
 8014a62:	9b03      	ldr	r3, [sp, #12]
 8014a64:	3307      	adds	r3, #7
 8014a66:	f023 0307 	bic.w	r3, r3, #7
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	9303      	str	r3, [sp, #12]
 8014a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a70:	444b      	add	r3, r9
 8014a72:	9309      	str	r3, [sp, #36]	; 0x24
 8014a74:	e76d      	b.n	8014952 <_svfiprintf_r+0x4a>
 8014a76:	fb05 3202 	mla	r2, r5, r2, r3
 8014a7a:	2001      	movs	r0, #1
 8014a7c:	460f      	mov	r7, r1
 8014a7e:	e7a6      	b.n	80149ce <_svfiprintf_r+0xc6>
 8014a80:	2300      	movs	r3, #0
 8014a82:	3701      	adds	r7, #1
 8014a84:	9305      	str	r3, [sp, #20]
 8014a86:	4619      	mov	r1, r3
 8014a88:	250a      	movs	r5, #10
 8014a8a:	4638      	mov	r0, r7
 8014a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a90:	3a30      	subs	r2, #48	; 0x30
 8014a92:	2a09      	cmp	r2, #9
 8014a94:	d903      	bls.n	8014a9e <_svfiprintf_r+0x196>
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d0c8      	beq.n	8014a2c <_svfiprintf_r+0x124>
 8014a9a:	9105      	str	r1, [sp, #20]
 8014a9c:	e7c6      	b.n	8014a2c <_svfiprintf_r+0x124>
 8014a9e:	fb05 2101 	mla	r1, r5, r1, r2
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	4607      	mov	r7, r0
 8014aa6:	e7f0      	b.n	8014a8a <_svfiprintf_r+0x182>
 8014aa8:	ab03      	add	r3, sp, #12
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	4622      	mov	r2, r4
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <_svfiprintf_r+0x1ec>)
 8014ab0:	a904      	add	r1, sp, #16
 8014ab2:	4640      	mov	r0, r8
 8014ab4:	f7fc f928 	bl	8010d08 <_printf_float>
 8014ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014abc:	4681      	mov	r9, r0
 8014abe:	d1d6      	bne.n	8014a6e <_svfiprintf_r+0x166>
 8014ac0:	89a3      	ldrh	r3, [r4, #12]
 8014ac2:	065b      	lsls	r3, r3, #25
 8014ac4:	f53f af35 	bmi.w	8014932 <_svfiprintf_r+0x2a>
 8014ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aca:	b01d      	add	sp, #116	; 0x74
 8014acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad0:	ab03      	add	r3, sp, #12
 8014ad2:	9300      	str	r3, [sp, #0]
 8014ad4:	4622      	mov	r2, r4
 8014ad6:	4b07      	ldr	r3, [pc, #28]	; (8014af4 <_svfiprintf_r+0x1ec>)
 8014ad8:	a904      	add	r1, sp, #16
 8014ada:	4640      	mov	r0, r8
 8014adc:	f7fc fbb6 	bl	801124c <_printf_i>
 8014ae0:	e7ea      	b.n	8014ab8 <_svfiprintf_r+0x1b0>
 8014ae2:	bf00      	nop
 8014ae4:	08015f74 	.word	0x08015f74
 8014ae8:	08015f7a 	.word	0x08015f7a
 8014aec:	08015f7e 	.word	0x08015f7e
 8014af0:	08010d09 	.word	0x08010d09
 8014af4:	08014855 	.word	0x08014855

08014af8 <_sungetc_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	1c4b      	adds	r3, r1, #1
 8014afc:	4614      	mov	r4, r2
 8014afe:	d103      	bne.n	8014b08 <_sungetc_r+0x10>
 8014b00:	f04f 35ff 	mov.w	r5, #4294967295
 8014b04:	4628      	mov	r0, r5
 8014b06:	bd38      	pop	{r3, r4, r5, pc}
 8014b08:	8993      	ldrh	r3, [r2, #12]
 8014b0a:	f023 0320 	bic.w	r3, r3, #32
 8014b0e:	8193      	strh	r3, [r2, #12]
 8014b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b12:	6852      	ldr	r2, [r2, #4]
 8014b14:	b2cd      	uxtb	r5, r1
 8014b16:	b18b      	cbz	r3, 8014b3c <_sungetc_r+0x44>
 8014b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	dd08      	ble.n	8014b30 <_sungetc_r+0x38>
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	1e5a      	subs	r2, r3, #1
 8014b22:	6022      	str	r2, [r4, #0]
 8014b24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014b28:	6863      	ldr	r3, [r4, #4]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	6063      	str	r3, [r4, #4]
 8014b2e:	e7e9      	b.n	8014b04 <_sungetc_r+0xc>
 8014b30:	4621      	mov	r1, r4
 8014b32:	f000 fd05 	bl	8015540 <__submore>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d0f1      	beq.n	8014b1e <_sungetc_r+0x26>
 8014b3a:	e7e1      	b.n	8014b00 <_sungetc_r+0x8>
 8014b3c:	6921      	ldr	r1, [r4, #16]
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	b151      	cbz	r1, 8014b58 <_sungetc_r+0x60>
 8014b42:	4299      	cmp	r1, r3
 8014b44:	d208      	bcs.n	8014b58 <_sungetc_r+0x60>
 8014b46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014b4a:	42a9      	cmp	r1, r5
 8014b4c:	d104      	bne.n	8014b58 <_sungetc_r+0x60>
 8014b4e:	3b01      	subs	r3, #1
 8014b50:	3201      	adds	r2, #1
 8014b52:	6023      	str	r3, [r4, #0]
 8014b54:	6062      	str	r2, [r4, #4]
 8014b56:	e7d5      	b.n	8014b04 <_sungetc_r+0xc>
 8014b58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b60:	6363      	str	r3, [r4, #52]	; 0x34
 8014b62:	2303      	movs	r3, #3
 8014b64:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b66:	4623      	mov	r3, r4
 8014b68:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014b6c:	6023      	str	r3, [r4, #0]
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e7dc      	b.n	8014b2c <_sungetc_r+0x34>

08014b72 <__ssrefill_r>:
 8014b72:	b510      	push	{r4, lr}
 8014b74:	460c      	mov	r4, r1
 8014b76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014b78:	b169      	cbz	r1, 8014b96 <__ssrefill_r+0x24>
 8014b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	d001      	beq.n	8014b86 <__ssrefill_r+0x14>
 8014b82:	f7fb ff91 	bl	8010aa8 <_free_r>
 8014b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b88:	6063      	str	r3, [r4, #4]
 8014b8a:	2000      	movs	r0, #0
 8014b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8014b8e:	b113      	cbz	r3, 8014b96 <__ssrefill_r+0x24>
 8014b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014b92:	6023      	str	r3, [r4, #0]
 8014b94:	bd10      	pop	{r4, pc}
 8014b96:	6923      	ldr	r3, [r4, #16]
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	6063      	str	r3, [r4, #4]
 8014b9e:	89a3      	ldrh	r3, [r4, #12]
 8014ba0:	f043 0320 	orr.w	r3, r3, #32
 8014ba4:	81a3      	strh	r3, [r4, #12]
 8014ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8014baa:	e7f3      	b.n	8014b94 <__ssrefill_r+0x22>

08014bac <__ssvfiscanf_r>:
 8014bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	9144      	str	r1, [sp, #272]	; 0x110
 8014bba:	9145      	str	r1, [sp, #276]	; 0x114
 8014bbc:	499f      	ldr	r1, [pc, #636]	; (8014e3c <__ssvfiscanf_r+0x290>)
 8014bbe:	91a0      	str	r1, [sp, #640]	; 0x280
 8014bc0:	f10d 0804 	add.w	r8, sp, #4
 8014bc4:	499e      	ldr	r1, [pc, #632]	; (8014e40 <__ssvfiscanf_r+0x294>)
 8014bc6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014e44 <__ssvfiscanf_r+0x298>
 8014bca:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014bce:	4606      	mov	r6, r0
 8014bd0:	4692      	mov	sl, r2
 8014bd2:	91a1      	str	r1, [sp, #644]	; 0x284
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	270a      	movs	r7, #10
 8014bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	f000 812a 	beq.w	8014e36 <__ssvfiscanf_r+0x28a>
 8014be2:	4655      	mov	r5, sl
 8014be4:	f7ff f968 	bl	8013eb8 <__locale_ctype_ptr>
 8014be8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014bec:	4458      	add	r0, fp
 8014bee:	7843      	ldrb	r3, [r0, #1]
 8014bf0:	f013 0308 	ands.w	r3, r3, #8
 8014bf4:	d01c      	beq.n	8014c30 <__ssvfiscanf_r+0x84>
 8014bf6:	6863      	ldr	r3, [r4, #4]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	dd12      	ble.n	8014c22 <__ssvfiscanf_r+0x76>
 8014bfc:	f7ff f95c 	bl	8013eb8 <__locale_ctype_ptr>
 8014c00:	6823      	ldr	r3, [r4, #0]
 8014c02:	781a      	ldrb	r2, [r3, #0]
 8014c04:	4410      	add	r0, r2
 8014c06:	7842      	ldrb	r2, [r0, #1]
 8014c08:	0712      	lsls	r2, r2, #28
 8014c0a:	d401      	bmi.n	8014c10 <__ssvfiscanf_r+0x64>
 8014c0c:	46aa      	mov	sl, r5
 8014c0e:	e7e3      	b.n	8014bd8 <__ssvfiscanf_r+0x2c>
 8014c10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014c12:	3201      	adds	r2, #1
 8014c14:	9245      	str	r2, [sp, #276]	; 0x114
 8014c16:	6862      	ldr	r2, [r4, #4]
 8014c18:	3301      	adds	r3, #1
 8014c1a:	3a01      	subs	r2, #1
 8014c1c:	6062      	str	r2, [r4, #4]
 8014c1e:	6023      	str	r3, [r4, #0]
 8014c20:	e7e9      	b.n	8014bf6 <__ssvfiscanf_r+0x4a>
 8014c22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014c24:	4621      	mov	r1, r4
 8014c26:	4630      	mov	r0, r6
 8014c28:	4798      	blx	r3
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	d0e6      	beq.n	8014bfc <__ssvfiscanf_r+0x50>
 8014c2e:	e7ed      	b.n	8014c0c <__ssvfiscanf_r+0x60>
 8014c30:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8014c34:	f040 8082 	bne.w	8014d3c <__ssvfiscanf_r+0x190>
 8014c38:	9343      	str	r3, [sp, #268]	; 0x10c
 8014c3a:	9341      	str	r3, [sp, #260]	; 0x104
 8014c3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014c40:	2b2a      	cmp	r3, #42	; 0x2a
 8014c42:	d103      	bne.n	8014c4c <__ssvfiscanf_r+0xa0>
 8014c44:	2310      	movs	r3, #16
 8014c46:	9341      	str	r3, [sp, #260]	; 0x104
 8014c48:	f10a 0502 	add.w	r5, sl, #2
 8014c4c:	46aa      	mov	sl, r5
 8014c4e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014c52:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014c56:	2a09      	cmp	r2, #9
 8014c58:	d922      	bls.n	8014ca0 <__ssvfiscanf_r+0xf4>
 8014c5a:	2203      	movs	r2, #3
 8014c5c:	4879      	ldr	r0, [pc, #484]	; (8014e44 <__ssvfiscanf_r+0x298>)
 8014c5e:	f7eb faf7 	bl	8000250 <memchr>
 8014c62:	b138      	cbz	r0, 8014c74 <__ssvfiscanf_r+0xc8>
 8014c64:	eba0 0309 	sub.w	r3, r0, r9
 8014c68:	2001      	movs	r0, #1
 8014c6a:	4098      	lsls	r0, r3
 8014c6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014c6e:	4318      	orrs	r0, r3
 8014c70:	9041      	str	r0, [sp, #260]	; 0x104
 8014c72:	46aa      	mov	sl, r5
 8014c74:	f89a 3000 	ldrb.w	r3, [sl]
 8014c78:	2b67      	cmp	r3, #103	; 0x67
 8014c7a:	f10a 0501 	add.w	r5, sl, #1
 8014c7e:	d82b      	bhi.n	8014cd8 <__ssvfiscanf_r+0x12c>
 8014c80:	2b65      	cmp	r3, #101	; 0x65
 8014c82:	f080 809f 	bcs.w	8014dc4 <__ssvfiscanf_r+0x218>
 8014c86:	2b47      	cmp	r3, #71	; 0x47
 8014c88:	d810      	bhi.n	8014cac <__ssvfiscanf_r+0x100>
 8014c8a:	2b45      	cmp	r3, #69	; 0x45
 8014c8c:	f080 809a 	bcs.w	8014dc4 <__ssvfiscanf_r+0x218>
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d06c      	beq.n	8014d6e <__ssvfiscanf_r+0x1c2>
 8014c94:	2b25      	cmp	r3, #37	; 0x25
 8014c96:	d051      	beq.n	8014d3c <__ssvfiscanf_r+0x190>
 8014c98:	2303      	movs	r3, #3
 8014c9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8014c9c:	9742      	str	r7, [sp, #264]	; 0x108
 8014c9e:	e027      	b.n	8014cf0 <__ssvfiscanf_r+0x144>
 8014ca0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014ca2:	fb07 1303 	mla	r3, r7, r3, r1
 8014ca6:	3b30      	subs	r3, #48	; 0x30
 8014ca8:	9343      	str	r3, [sp, #268]	; 0x10c
 8014caa:	e7cf      	b.n	8014c4c <__ssvfiscanf_r+0xa0>
 8014cac:	2b5b      	cmp	r3, #91	; 0x5b
 8014cae:	d06a      	beq.n	8014d86 <__ssvfiscanf_r+0x1da>
 8014cb0:	d80c      	bhi.n	8014ccc <__ssvfiscanf_r+0x120>
 8014cb2:	2b58      	cmp	r3, #88	; 0x58
 8014cb4:	d1f0      	bne.n	8014c98 <__ssvfiscanf_r+0xec>
 8014cb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014cbc:	9241      	str	r2, [sp, #260]	; 0x104
 8014cbe:	2210      	movs	r2, #16
 8014cc0:	9242      	str	r2, [sp, #264]	; 0x108
 8014cc2:	2b6e      	cmp	r3, #110	; 0x6e
 8014cc4:	bf8c      	ite	hi
 8014cc6:	2304      	movhi	r3, #4
 8014cc8:	2303      	movls	r3, #3
 8014cca:	e010      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014ccc:	2b63      	cmp	r3, #99	; 0x63
 8014cce:	d065      	beq.n	8014d9c <__ssvfiscanf_r+0x1f0>
 8014cd0:	2b64      	cmp	r3, #100	; 0x64
 8014cd2:	d1e1      	bne.n	8014c98 <__ssvfiscanf_r+0xec>
 8014cd4:	9742      	str	r7, [sp, #264]	; 0x108
 8014cd6:	e7f4      	b.n	8014cc2 <__ssvfiscanf_r+0x116>
 8014cd8:	2b70      	cmp	r3, #112	; 0x70
 8014cda:	d04b      	beq.n	8014d74 <__ssvfiscanf_r+0x1c8>
 8014cdc:	d826      	bhi.n	8014d2c <__ssvfiscanf_r+0x180>
 8014cde:	2b6e      	cmp	r3, #110	; 0x6e
 8014ce0:	d062      	beq.n	8014da8 <__ssvfiscanf_r+0x1fc>
 8014ce2:	d84c      	bhi.n	8014d7e <__ssvfiscanf_r+0x1d2>
 8014ce4:	2b69      	cmp	r3, #105	; 0x69
 8014ce6:	d1d7      	bne.n	8014c98 <__ssvfiscanf_r+0xec>
 8014ce8:	2300      	movs	r3, #0
 8014cea:	9342      	str	r3, [sp, #264]	; 0x108
 8014cec:	2303      	movs	r3, #3
 8014cee:	9347      	str	r3, [sp, #284]	; 0x11c
 8014cf0:	6863      	ldr	r3, [r4, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	dd68      	ble.n	8014dc8 <__ssvfiscanf_r+0x21c>
 8014cf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014cf8:	0659      	lsls	r1, r3, #25
 8014cfa:	d407      	bmi.n	8014d0c <__ssvfiscanf_r+0x160>
 8014cfc:	f7ff f8dc 	bl	8013eb8 <__locale_ctype_ptr>
 8014d00:	6823      	ldr	r3, [r4, #0]
 8014d02:	781a      	ldrb	r2, [r3, #0]
 8014d04:	4410      	add	r0, r2
 8014d06:	7842      	ldrb	r2, [r0, #1]
 8014d08:	0712      	lsls	r2, r2, #28
 8014d0a:	d464      	bmi.n	8014dd6 <__ssvfiscanf_r+0x22a>
 8014d0c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014d0e:	2b02      	cmp	r3, #2
 8014d10:	dc73      	bgt.n	8014dfa <__ssvfiscanf_r+0x24e>
 8014d12:	466b      	mov	r3, sp
 8014d14:	4622      	mov	r2, r4
 8014d16:	a941      	add	r1, sp, #260	; 0x104
 8014d18:	4630      	mov	r0, r6
 8014d1a:	f000 f9d7 	bl	80150cc <_scanf_chars>
 8014d1e:	2801      	cmp	r0, #1
 8014d20:	f000 8089 	beq.w	8014e36 <__ssvfiscanf_r+0x28a>
 8014d24:	2802      	cmp	r0, #2
 8014d26:	f47f af71 	bne.w	8014c0c <__ssvfiscanf_r+0x60>
 8014d2a:	e01d      	b.n	8014d68 <__ssvfiscanf_r+0x1bc>
 8014d2c:	2b75      	cmp	r3, #117	; 0x75
 8014d2e:	d0d1      	beq.n	8014cd4 <__ssvfiscanf_r+0x128>
 8014d30:	2b78      	cmp	r3, #120	; 0x78
 8014d32:	d0c0      	beq.n	8014cb6 <__ssvfiscanf_r+0x10a>
 8014d34:	2b73      	cmp	r3, #115	; 0x73
 8014d36:	d1af      	bne.n	8014c98 <__ssvfiscanf_r+0xec>
 8014d38:	2302      	movs	r3, #2
 8014d3a:	e7d8      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014d3c:	6863      	ldr	r3, [r4, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	dd0c      	ble.n	8014d5c <__ssvfiscanf_r+0x1b0>
 8014d42:	6823      	ldr	r3, [r4, #0]
 8014d44:	781a      	ldrb	r2, [r3, #0]
 8014d46:	455a      	cmp	r2, fp
 8014d48:	d175      	bne.n	8014e36 <__ssvfiscanf_r+0x28a>
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	6862      	ldr	r2, [r4, #4]
 8014d4e:	6023      	str	r3, [r4, #0]
 8014d50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014d52:	3a01      	subs	r2, #1
 8014d54:	3301      	adds	r3, #1
 8014d56:	6062      	str	r2, [r4, #4]
 8014d58:	9345      	str	r3, [sp, #276]	; 0x114
 8014d5a:	e757      	b.n	8014c0c <__ssvfiscanf_r+0x60>
 8014d5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014d5e:	4621      	mov	r1, r4
 8014d60:	4630      	mov	r0, r6
 8014d62:	4798      	blx	r3
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d0ec      	beq.n	8014d42 <__ssvfiscanf_r+0x196>
 8014d68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d159      	bne.n	8014e22 <__ssvfiscanf_r+0x276>
 8014d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d72:	e05c      	b.n	8014e2e <__ssvfiscanf_r+0x282>
 8014d74:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014d76:	f042 0220 	orr.w	r2, r2, #32
 8014d7a:	9241      	str	r2, [sp, #260]	; 0x104
 8014d7c:	e79b      	b.n	8014cb6 <__ssvfiscanf_r+0x10a>
 8014d7e:	2308      	movs	r3, #8
 8014d80:	9342      	str	r3, [sp, #264]	; 0x108
 8014d82:	2304      	movs	r3, #4
 8014d84:	e7b3      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014d86:	4629      	mov	r1, r5
 8014d88:	4640      	mov	r0, r8
 8014d8a:	f000 fb09 	bl	80153a0 <__sccl>
 8014d8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d94:	9341      	str	r3, [sp, #260]	; 0x104
 8014d96:	4605      	mov	r5, r0
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e7a8      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014d9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014da2:	9341      	str	r3, [sp, #260]	; 0x104
 8014da4:	2300      	movs	r3, #0
 8014da6:	e7a2      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014da8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014daa:	06c3      	lsls	r3, r0, #27
 8014dac:	f53f af2e 	bmi.w	8014c0c <__ssvfiscanf_r+0x60>
 8014db0:	9b00      	ldr	r3, [sp, #0]
 8014db2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014db4:	1d19      	adds	r1, r3, #4
 8014db6:	9100      	str	r1, [sp, #0]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	07c0      	lsls	r0, r0, #31
 8014dbc:	bf4c      	ite	mi
 8014dbe:	801a      	strhmi	r2, [r3, #0]
 8014dc0:	601a      	strpl	r2, [r3, #0]
 8014dc2:	e723      	b.n	8014c0c <__ssvfiscanf_r+0x60>
 8014dc4:	2305      	movs	r3, #5
 8014dc6:	e792      	b.n	8014cee <__ssvfiscanf_r+0x142>
 8014dc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4630      	mov	r0, r6
 8014dce:	4798      	blx	r3
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d090      	beq.n	8014cf6 <__ssvfiscanf_r+0x14a>
 8014dd4:	e7c8      	b.n	8014d68 <__ssvfiscanf_r+0x1bc>
 8014dd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014dd8:	3201      	adds	r2, #1
 8014dda:	9245      	str	r2, [sp, #276]	; 0x114
 8014ddc:	6862      	ldr	r2, [r4, #4]
 8014dde:	3a01      	subs	r2, #1
 8014de0:	2a00      	cmp	r2, #0
 8014de2:	6062      	str	r2, [r4, #4]
 8014de4:	dd02      	ble.n	8014dec <__ssvfiscanf_r+0x240>
 8014de6:	3301      	adds	r3, #1
 8014de8:	6023      	str	r3, [r4, #0]
 8014dea:	e787      	b.n	8014cfc <__ssvfiscanf_r+0x150>
 8014dec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014dee:	4621      	mov	r1, r4
 8014df0:	4630      	mov	r0, r6
 8014df2:	4798      	blx	r3
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d081      	beq.n	8014cfc <__ssvfiscanf_r+0x150>
 8014df8:	e7b6      	b.n	8014d68 <__ssvfiscanf_r+0x1bc>
 8014dfa:	2b04      	cmp	r3, #4
 8014dfc:	dc06      	bgt.n	8014e0c <__ssvfiscanf_r+0x260>
 8014dfe:	466b      	mov	r3, sp
 8014e00:	4622      	mov	r2, r4
 8014e02:	a941      	add	r1, sp, #260	; 0x104
 8014e04:	4630      	mov	r0, r6
 8014e06:	f000 f9c5 	bl	8015194 <_scanf_i>
 8014e0a:	e788      	b.n	8014d1e <__ssvfiscanf_r+0x172>
 8014e0c:	4b0e      	ldr	r3, [pc, #56]	; (8014e48 <__ssvfiscanf_r+0x29c>)
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f43f aefc 	beq.w	8014c0c <__ssvfiscanf_r+0x60>
 8014e14:	466b      	mov	r3, sp
 8014e16:	4622      	mov	r2, r4
 8014e18:	a941      	add	r1, sp, #260	; 0x104
 8014e1a:	4630      	mov	r0, r6
 8014e1c:	f7fc fb28 	bl	8011470 <_scanf_float>
 8014e20:	e77d      	b.n	8014d1e <__ssvfiscanf_r+0x172>
 8014e22:	89a3      	ldrh	r3, [r4, #12]
 8014e24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014e28:	bf18      	it	ne
 8014e2a:	f04f 30ff 	movne.w	r0, #4294967295
 8014e2e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e36:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014e38:	e7f9      	b.n	8014e2e <__ssvfiscanf_r+0x282>
 8014e3a:	bf00      	nop
 8014e3c:	08014af9 	.word	0x08014af9
 8014e40:	08014b73 	.word	0x08014b73
 8014e44:	08015f7a 	.word	0x08015f7a
 8014e48:	08011471 	.word	0x08011471

08014e4c <__sfputc_r>:
 8014e4c:	6893      	ldr	r3, [r2, #8]
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	b410      	push	{r4}
 8014e54:	6093      	str	r3, [r2, #8]
 8014e56:	da08      	bge.n	8014e6a <__sfputc_r+0x1e>
 8014e58:	6994      	ldr	r4, [r2, #24]
 8014e5a:	42a3      	cmp	r3, r4
 8014e5c:	db01      	blt.n	8014e62 <__sfputc_r+0x16>
 8014e5e:	290a      	cmp	r1, #10
 8014e60:	d103      	bne.n	8014e6a <__sfputc_r+0x1e>
 8014e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e66:	f7fd bcc9 	b.w	80127fc <__swbuf_r>
 8014e6a:	6813      	ldr	r3, [r2, #0]
 8014e6c:	1c58      	adds	r0, r3, #1
 8014e6e:	6010      	str	r0, [r2, #0]
 8014e70:	7019      	strb	r1, [r3, #0]
 8014e72:	4608      	mov	r0, r1
 8014e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <__sfputs_r>:
 8014e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e7c:	4606      	mov	r6, r0
 8014e7e:	460f      	mov	r7, r1
 8014e80:	4614      	mov	r4, r2
 8014e82:	18d5      	adds	r5, r2, r3
 8014e84:	42ac      	cmp	r4, r5
 8014e86:	d101      	bne.n	8014e8c <__sfputs_r+0x12>
 8014e88:	2000      	movs	r0, #0
 8014e8a:	e007      	b.n	8014e9c <__sfputs_r+0x22>
 8014e8c:	463a      	mov	r2, r7
 8014e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e92:	4630      	mov	r0, r6
 8014e94:	f7ff ffda 	bl	8014e4c <__sfputc_r>
 8014e98:	1c43      	adds	r3, r0, #1
 8014e9a:	d1f3      	bne.n	8014e84 <__sfputs_r+0xa>
 8014e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ea0 <_vfiprintf_r>:
 8014ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea4:	460c      	mov	r4, r1
 8014ea6:	b09d      	sub	sp, #116	; 0x74
 8014ea8:	4617      	mov	r7, r2
 8014eaa:	461d      	mov	r5, r3
 8014eac:	4606      	mov	r6, r0
 8014eae:	b118      	cbz	r0, 8014eb8 <_vfiprintf_r+0x18>
 8014eb0:	6983      	ldr	r3, [r0, #24]
 8014eb2:	b90b      	cbnz	r3, 8014eb8 <_vfiprintf_r+0x18>
 8014eb4:	f7fe fc4c 	bl	8013750 <__sinit>
 8014eb8:	4b7c      	ldr	r3, [pc, #496]	; (80150ac <_vfiprintf_r+0x20c>)
 8014eba:	429c      	cmp	r4, r3
 8014ebc:	d158      	bne.n	8014f70 <_vfiprintf_r+0xd0>
 8014ebe:	6874      	ldr	r4, [r6, #4]
 8014ec0:	89a3      	ldrh	r3, [r4, #12]
 8014ec2:	0718      	lsls	r0, r3, #28
 8014ec4:	d55e      	bpl.n	8014f84 <_vfiprintf_r+0xe4>
 8014ec6:	6923      	ldr	r3, [r4, #16]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d05b      	beq.n	8014f84 <_vfiprintf_r+0xe4>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9309      	str	r3, [sp, #36]	; 0x24
 8014ed0:	2320      	movs	r3, #32
 8014ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ed6:	2330      	movs	r3, #48	; 0x30
 8014ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014edc:	9503      	str	r5, [sp, #12]
 8014ede:	f04f 0b01 	mov.w	fp, #1
 8014ee2:	46b8      	mov	r8, r7
 8014ee4:	4645      	mov	r5, r8
 8014ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014eea:	b10b      	cbz	r3, 8014ef0 <_vfiprintf_r+0x50>
 8014eec:	2b25      	cmp	r3, #37	; 0x25
 8014eee:	d154      	bne.n	8014f9a <_vfiprintf_r+0xfa>
 8014ef0:	ebb8 0a07 	subs.w	sl, r8, r7
 8014ef4:	d00b      	beq.n	8014f0e <_vfiprintf_r+0x6e>
 8014ef6:	4653      	mov	r3, sl
 8014ef8:	463a      	mov	r2, r7
 8014efa:	4621      	mov	r1, r4
 8014efc:	4630      	mov	r0, r6
 8014efe:	f7ff ffbc 	bl	8014e7a <__sfputs_r>
 8014f02:	3001      	adds	r0, #1
 8014f04:	f000 80c2 	beq.w	801508c <_vfiprintf_r+0x1ec>
 8014f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f0a:	4453      	add	r3, sl
 8014f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f0e:	f898 3000 	ldrb.w	r3, [r8]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	f000 80ba 	beq.w	801508c <_vfiprintf_r+0x1ec>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f22:	9304      	str	r3, [sp, #16]
 8014f24:	9307      	str	r3, [sp, #28]
 8014f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8014f2c:	46a8      	mov	r8, r5
 8014f2e:	2205      	movs	r2, #5
 8014f30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014f34:	485e      	ldr	r0, [pc, #376]	; (80150b0 <_vfiprintf_r+0x210>)
 8014f36:	f7eb f98b 	bl	8000250 <memchr>
 8014f3a:	9b04      	ldr	r3, [sp, #16]
 8014f3c:	bb78      	cbnz	r0, 8014f9e <_vfiprintf_r+0xfe>
 8014f3e:	06d9      	lsls	r1, r3, #27
 8014f40:	bf44      	itt	mi
 8014f42:	2220      	movmi	r2, #32
 8014f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f48:	071a      	lsls	r2, r3, #28
 8014f4a:	bf44      	itt	mi
 8014f4c:	222b      	movmi	r2, #43	; 0x2b
 8014f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f52:	782a      	ldrb	r2, [r5, #0]
 8014f54:	2a2a      	cmp	r2, #42	; 0x2a
 8014f56:	d02a      	beq.n	8014fae <_vfiprintf_r+0x10e>
 8014f58:	9a07      	ldr	r2, [sp, #28]
 8014f5a:	46a8      	mov	r8, r5
 8014f5c:	2000      	movs	r0, #0
 8014f5e:	250a      	movs	r5, #10
 8014f60:	4641      	mov	r1, r8
 8014f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f66:	3b30      	subs	r3, #48	; 0x30
 8014f68:	2b09      	cmp	r3, #9
 8014f6a:	d969      	bls.n	8015040 <_vfiprintf_r+0x1a0>
 8014f6c:	b360      	cbz	r0, 8014fc8 <_vfiprintf_r+0x128>
 8014f6e:	e024      	b.n	8014fba <_vfiprintf_r+0x11a>
 8014f70:	4b50      	ldr	r3, [pc, #320]	; (80150b4 <_vfiprintf_r+0x214>)
 8014f72:	429c      	cmp	r4, r3
 8014f74:	d101      	bne.n	8014f7a <_vfiprintf_r+0xda>
 8014f76:	68b4      	ldr	r4, [r6, #8]
 8014f78:	e7a2      	b.n	8014ec0 <_vfiprintf_r+0x20>
 8014f7a:	4b4f      	ldr	r3, [pc, #316]	; (80150b8 <_vfiprintf_r+0x218>)
 8014f7c:	429c      	cmp	r4, r3
 8014f7e:	bf08      	it	eq
 8014f80:	68f4      	ldreq	r4, [r6, #12]
 8014f82:	e79d      	b.n	8014ec0 <_vfiprintf_r+0x20>
 8014f84:	4621      	mov	r1, r4
 8014f86:	4630      	mov	r0, r6
 8014f88:	f7fd fc9c 	bl	80128c4 <__swsetup_r>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d09d      	beq.n	8014ecc <_vfiprintf_r+0x2c>
 8014f90:	f04f 30ff 	mov.w	r0, #4294967295
 8014f94:	b01d      	add	sp, #116	; 0x74
 8014f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f9a:	46a8      	mov	r8, r5
 8014f9c:	e7a2      	b.n	8014ee4 <_vfiprintf_r+0x44>
 8014f9e:	4a44      	ldr	r2, [pc, #272]	; (80150b0 <_vfiprintf_r+0x210>)
 8014fa0:	1a80      	subs	r0, r0, r2
 8014fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8014fa6:	4318      	orrs	r0, r3
 8014fa8:	9004      	str	r0, [sp, #16]
 8014faa:	4645      	mov	r5, r8
 8014fac:	e7be      	b.n	8014f2c <_vfiprintf_r+0x8c>
 8014fae:	9a03      	ldr	r2, [sp, #12]
 8014fb0:	1d11      	adds	r1, r2, #4
 8014fb2:	6812      	ldr	r2, [r2, #0]
 8014fb4:	9103      	str	r1, [sp, #12]
 8014fb6:	2a00      	cmp	r2, #0
 8014fb8:	db01      	blt.n	8014fbe <_vfiprintf_r+0x11e>
 8014fba:	9207      	str	r2, [sp, #28]
 8014fbc:	e004      	b.n	8014fc8 <_vfiprintf_r+0x128>
 8014fbe:	4252      	negs	r2, r2
 8014fc0:	f043 0302 	orr.w	r3, r3, #2
 8014fc4:	9207      	str	r2, [sp, #28]
 8014fc6:	9304      	str	r3, [sp, #16]
 8014fc8:	f898 3000 	ldrb.w	r3, [r8]
 8014fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8014fce:	d10e      	bne.n	8014fee <_vfiprintf_r+0x14e>
 8014fd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8014fd6:	d138      	bne.n	801504a <_vfiprintf_r+0x1aa>
 8014fd8:	9b03      	ldr	r3, [sp, #12]
 8014fda:	1d1a      	adds	r2, r3, #4
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	9203      	str	r2, [sp, #12]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	bfb8      	it	lt
 8014fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8014fe8:	f108 0802 	add.w	r8, r8, #2
 8014fec:	9305      	str	r3, [sp, #20]
 8014fee:	4d33      	ldr	r5, [pc, #204]	; (80150bc <_vfiprintf_r+0x21c>)
 8014ff0:	f898 1000 	ldrb.w	r1, [r8]
 8014ff4:	2203      	movs	r2, #3
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	f7eb f92a 	bl	8000250 <memchr>
 8014ffc:	b140      	cbz	r0, 8015010 <_vfiprintf_r+0x170>
 8014ffe:	2340      	movs	r3, #64	; 0x40
 8015000:	1b40      	subs	r0, r0, r5
 8015002:	fa03 f000 	lsl.w	r0, r3, r0
 8015006:	9b04      	ldr	r3, [sp, #16]
 8015008:	4303      	orrs	r3, r0
 801500a:	f108 0801 	add.w	r8, r8, #1
 801500e:	9304      	str	r3, [sp, #16]
 8015010:	f898 1000 	ldrb.w	r1, [r8]
 8015014:	482a      	ldr	r0, [pc, #168]	; (80150c0 <_vfiprintf_r+0x220>)
 8015016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801501a:	2206      	movs	r2, #6
 801501c:	f108 0701 	add.w	r7, r8, #1
 8015020:	f7eb f916 	bl	8000250 <memchr>
 8015024:	2800      	cmp	r0, #0
 8015026:	d037      	beq.n	8015098 <_vfiprintf_r+0x1f8>
 8015028:	4b26      	ldr	r3, [pc, #152]	; (80150c4 <_vfiprintf_r+0x224>)
 801502a:	bb1b      	cbnz	r3, 8015074 <_vfiprintf_r+0x1d4>
 801502c:	9b03      	ldr	r3, [sp, #12]
 801502e:	3307      	adds	r3, #7
 8015030:	f023 0307 	bic.w	r3, r3, #7
 8015034:	3308      	adds	r3, #8
 8015036:	9303      	str	r3, [sp, #12]
 8015038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503a:	444b      	add	r3, r9
 801503c:	9309      	str	r3, [sp, #36]	; 0x24
 801503e:	e750      	b.n	8014ee2 <_vfiprintf_r+0x42>
 8015040:	fb05 3202 	mla	r2, r5, r2, r3
 8015044:	2001      	movs	r0, #1
 8015046:	4688      	mov	r8, r1
 8015048:	e78a      	b.n	8014f60 <_vfiprintf_r+0xc0>
 801504a:	2300      	movs	r3, #0
 801504c:	f108 0801 	add.w	r8, r8, #1
 8015050:	9305      	str	r3, [sp, #20]
 8015052:	4619      	mov	r1, r3
 8015054:	250a      	movs	r5, #10
 8015056:	4640      	mov	r0, r8
 8015058:	f810 2b01 	ldrb.w	r2, [r0], #1
 801505c:	3a30      	subs	r2, #48	; 0x30
 801505e:	2a09      	cmp	r2, #9
 8015060:	d903      	bls.n	801506a <_vfiprintf_r+0x1ca>
 8015062:	2b00      	cmp	r3, #0
 8015064:	d0c3      	beq.n	8014fee <_vfiprintf_r+0x14e>
 8015066:	9105      	str	r1, [sp, #20]
 8015068:	e7c1      	b.n	8014fee <_vfiprintf_r+0x14e>
 801506a:	fb05 2101 	mla	r1, r5, r1, r2
 801506e:	2301      	movs	r3, #1
 8015070:	4680      	mov	r8, r0
 8015072:	e7f0      	b.n	8015056 <_vfiprintf_r+0x1b6>
 8015074:	ab03      	add	r3, sp, #12
 8015076:	9300      	str	r3, [sp, #0]
 8015078:	4622      	mov	r2, r4
 801507a:	4b13      	ldr	r3, [pc, #76]	; (80150c8 <_vfiprintf_r+0x228>)
 801507c:	a904      	add	r1, sp, #16
 801507e:	4630      	mov	r0, r6
 8015080:	f7fb fe42 	bl	8010d08 <_printf_float>
 8015084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015088:	4681      	mov	r9, r0
 801508a:	d1d5      	bne.n	8015038 <_vfiprintf_r+0x198>
 801508c:	89a3      	ldrh	r3, [r4, #12]
 801508e:	065b      	lsls	r3, r3, #25
 8015090:	f53f af7e 	bmi.w	8014f90 <_vfiprintf_r+0xf0>
 8015094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015096:	e77d      	b.n	8014f94 <_vfiprintf_r+0xf4>
 8015098:	ab03      	add	r3, sp, #12
 801509a:	9300      	str	r3, [sp, #0]
 801509c:	4622      	mov	r2, r4
 801509e:	4b0a      	ldr	r3, [pc, #40]	; (80150c8 <_vfiprintf_r+0x228>)
 80150a0:	a904      	add	r1, sp, #16
 80150a2:	4630      	mov	r0, r6
 80150a4:	f7fc f8d2 	bl	801124c <_printf_i>
 80150a8:	e7ec      	b.n	8015084 <_vfiprintf_r+0x1e4>
 80150aa:	bf00      	nop
 80150ac:	08015e28 	.word	0x08015e28
 80150b0:	08015f74 	.word	0x08015f74
 80150b4:	08015e48 	.word	0x08015e48
 80150b8:	08015e08 	.word	0x08015e08
 80150bc:	08015f7a 	.word	0x08015f7a
 80150c0:	08015f7e 	.word	0x08015f7e
 80150c4:	08010d09 	.word	0x08010d09
 80150c8:	08014e7b 	.word	0x08014e7b

080150cc <_scanf_chars>:
 80150cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150d0:	4615      	mov	r5, r2
 80150d2:	688a      	ldr	r2, [r1, #8]
 80150d4:	4680      	mov	r8, r0
 80150d6:	460c      	mov	r4, r1
 80150d8:	b932      	cbnz	r2, 80150e8 <_scanf_chars+0x1c>
 80150da:	698a      	ldr	r2, [r1, #24]
 80150dc:	2a00      	cmp	r2, #0
 80150de:	bf14      	ite	ne
 80150e0:	f04f 32ff 	movne.w	r2, #4294967295
 80150e4:	2201      	moveq	r2, #1
 80150e6:	608a      	str	r2, [r1, #8]
 80150e8:	6822      	ldr	r2, [r4, #0]
 80150ea:	06d1      	lsls	r1, r2, #27
 80150ec:	bf5f      	itttt	pl
 80150ee:	681a      	ldrpl	r2, [r3, #0]
 80150f0:	1d11      	addpl	r1, r2, #4
 80150f2:	6019      	strpl	r1, [r3, #0]
 80150f4:	6817      	ldrpl	r7, [r2, #0]
 80150f6:	2600      	movs	r6, #0
 80150f8:	69a3      	ldr	r3, [r4, #24]
 80150fa:	b1db      	cbz	r3, 8015134 <_scanf_chars+0x68>
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d107      	bne.n	8015110 <_scanf_chars+0x44>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	6962      	ldr	r2, [r4, #20]
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	5cd3      	ldrb	r3, [r2, r3]
 8015108:	b9a3      	cbnz	r3, 8015134 <_scanf_chars+0x68>
 801510a:	2e00      	cmp	r6, #0
 801510c:	d132      	bne.n	8015174 <_scanf_chars+0xa8>
 801510e:	e006      	b.n	801511e <_scanf_chars+0x52>
 8015110:	2b02      	cmp	r3, #2
 8015112:	d007      	beq.n	8015124 <_scanf_chars+0x58>
 8015114:	2e00      	cmp	r6, #0
 8015116:	d12d      	bne.n	8015174 <_scanf_chars+0xa8>
 8015118:	69a3      	ldr	r3, [r4, #24]
 801511a:	2b01      	cmp	r3, #1
 801511c:	d12a      	bne.n	8015174 <_scanf_chars+0xa8>
 801511e:	2001      	movs	r0, #1
 8015120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015124:	f7fe fec8 	bl	8013eb8 <__locale_ctype_ptr>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	4418      	add	r0, r3
 801512e:	7843      	ldrb	r3, [r0, #1]
 8015130:	071b      	lsls	r3, r3, #28
 8015132:	d4ef      	bmi.n	8015114 <_scanf_chars+0x48>
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	06da      	lsls	r2, r3, #27
 8015138:	bf5e      	ittt	pl
 801513a:	682b      	ldrpl	r3, [r5, #0]
 801513c:	781b      	ldrbpl	r3, [r3, #0]
 801513e:	703b      	strbpl	r3, [r7, #0]
 8015140:	682a      	ldr	r2, [r5, #0]
 8015142:	686b      	ldr	r3, [r5, #4]
 8015144:	f102 0201 	add.w	r2, r2, #1
 8015148:	602a      	str	r2, [r5, #0]
 801514a:	68a2      	ldr	r2, [r4, #8]
 801514c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015150:	f102 32ff 	add.w	r2, r2, #4294967295
 8015154:	606b      	str	r3, [r5, #4]
 8015156:	f106 0601 	add.w	r6, r6, #1
 801515a:	bf58      	it	pl
 801515c:	3701      	addpl	r7, #1
 801515e:	60a2      	str	r2, [r4, #8]
 8015160:	b142      	cbz	r2, 8015174 <_scanf_chars+0xa8>
 8015162:	2b00      	cmp	r3, #0
 8015164:	dcc8      	bgt.n	80150f8 <_scanf_chars+0x2c>
 8015166:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801516a:	4629      	mov	r1, r5
 801516c:	4640      	mov	r0, r8
 801516e:	4798      	blx	r3
 8015170:	2800      	cmp	r0, #0
 8015172:	d0c1      	beq.n	80150f8 <_scanf_chars+0x2c>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	f013 0310 	ands.w	r3, r3, #16
 801517a:	d105      	bne.n	8015188 <_scanf_chars+0xbc>
 801517c:	68e2      	ldr	r2, [r4, #12]
 801517e:	3201      	adds	r2, #1
 8015180:	60e2      	str	r2, [r4, #12]
 8015182:	69a2      	ldr	r2, [r4, #24]
 8015184:	b102      	cbz	r2, 8015188 <_scanf_chars+0xbc>
 8015186:	703b      	strb	r3, [r7, #0]
 8015188:	6923      	ldr	r3, [r4, #16]
 801518a:	441e      	add	r6, r3
 801518c:	6126      	str	r6, [r4, #16]
 801518e:	2000      	movs	r0, #0
 8015190:	e7c6      	b.n	8015120 <_scanf_chars+0x54>
	...

08015194 <_scanf_i>:
 8015194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	469a      	mov	sl, r3
 801519a:	4b74      	ldr	r3, [pc, #464]	; (801536c <_scanf_i+0x1d8>)
 801519c:	460c      	mov	r4, r1
 801519e:	4683      	mov	fp, r0
 80151a0:	4616      	mov	r6, r2
 80151a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80151a6:	b087      	sub	sp, #28
 80151a8:	ab03      	add	r3, sp, #12
 80151aa:	68a7      	ldr	r7, [r4, #8]
 80151ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151b0:	4b6f      	ldr	r3, [pc, #444]	; (8015370 <_scanf_i+0x1dc>)
 80151b2:	69a1      	ldr	r1, [r4, #24]
 80151b4:	4a6f      	ldr	r2, [pc, #444]	; (8015374 <_scanf_i+0x1e0>)
 80151b6:	2903      	cmp	r1, #3
 80151b8:	bf08      	it	eq
 80151ba:	461a      	moveq	r2, r3
 80151bc:	1e7b      	subs	r3, r7, #1
 80151be:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80151c2:	bf84      	itt	hi
 80151c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80151c8:	60a3      	strhi	r3, [r4, #8]
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	9200      	str	r2, [sp, #0]
 80151ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80151d2:	bf88      	it	hi
 80151d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80151d8:	f104 091c 	add.w	r9, r4, #28
 80151dc:	6023      	str	r3, [r4, #0]
 80151de:	bf8c      	ite	hi
 80151e0:	197f      	addhi	r7, r7, r5
 80151e2:	2700      	movls	r7, #0
 80151e4:	464b      	mov	r3, r9
 80151e6:	f04f 0800 	mov.w	r8, #0
 80151ea:	9301      	str	r3, [sp, #4]
 80151ec:	6831      	ldr	r1, [r6, #0]
 80151ee:	ab03      	add	r3, sp, #12
 80151f0:	2202      	movs	r2, #2
 80151f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80151f6:	7809      	ldrb	r1, [r1, #0]
 80151f8:	f7eb f82a 	bl	8000250 <memchr>
 80151fc:	9b01      	ldr	r3, [sp, #4]
 80151fe:	b330      	cbz	r0, 801524e <_scanf_i+0xba>
 8015200:	f1b8 0f01 	cmp.w	r8, #1
 8015204:	d15a      	bne.n	80152bc <_scanf_i+0x128>
 8015206:	6862      	ldr	r2, [r4, #4]
 8015208:	b92a      	cbnz	r2, 8015216 <_scanf_i+0x82>
 801520a:	6822      	ldr	r2, [r4, #0]
 801520c:	2108      	movs	r1, #8
 801520e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015212:	6061      	str	r1, [r4, #4]
 8015214:	6022      	str	r2, [r4, #0]
 8015216:	6822      	ldr	r2, [r4, #0]
 8015218:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801521c:	6022      	str	r2, [r4, #0]
 801521e:	68a2      	ldr	r2, [r4, #8]
 8015220:	1e51      	subs	r1, r2, #1
 8015222:	60a1      	str	r1, [r4, #8]
 8015224:	b19a      	cbz	r2, 801524e <_scanf_i+0xba>
 8015226:	6832      	ldr	r2, [r6, #0]
 8015228:	1c51      	adds	r1, r2, #1
 801522a:	6031      	str	r1, [r6, #0]
 801522c:	7812      	ldrb	r2, [r2, #0]
 801522e:	701a      	strb	r2, [r3, #0]
 8015230:	1c5d      	adds	r5, r3, #1
 8015232:	6873      	ldr	r3, [r6, #4]
 8015234:	3b01      	subs	r3, #1
 8015236:	2b00      	cmp	r3, #0
 8015238:	6073      	str	r3, [r6, #4]
 801523a:	dc07      	bgt.n	801524c <_scanf_i+0xb8>
 801523c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015240:	4631      	mov	r1, r6
 8015242:	4658      	mov	r0, fp
 8015244:	4798      	blx	r3
 8015246:	2800      	cmp	r0, #0
 8015248:	f040 8086 	bne.w	8015358 <_scanf_i+0x1c4>
 801524c:	462b      	mov	r3, r5
 801524e:	f108 0801 	add.w	r8, r8, #1
 8015252:	f1b8 0f03 	cmp.w	r8, #3
 8015256:	d1c8      	bne.n	80151ea <_scanf_i+0x56>
 8015258:	6862      	ldr	r2, [r4, #4]
 801525a:	b90a      	cbnz	r2, 8015260 <_scanf_i+0xcc>
 801525c:	220a      	movs	r2, #10
 801525e:	6062      	str	r2, [r4, #4]
 8015260:	6862      	ldr	r2, [r4, #4]
 8015262:	4945      	ldr	r1, [pc, #276]	; (8015378 <_scanf_i+0x1e4>)
 8015264:	6960      	ldr	r0, [r4, #20]
 8015266:	9301      	str	r3, [sp, #4]
 8015268:	1a89      	subs	r1, r1, r2
 801526a:	f000 f899 	bl	80153a0 <__sccl>
 801526e:	9b01      	ldr	r3, [sp, #4]
 8015270:	f04f 0800 	mov.w	r8, #0
 8015274:	461d      	mov	r5, r3
 8015276:	68a3      	ldr	r3, [r4, #8]
 8015278:	6822      	ldr	r2, [r4, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d03a      	beq.n	80152f4 <_scanf_i+0x160>
 801527e:	6831      	ldr	r1, [r6, #0]
 8015280:	6960      	ldr	r0, [r4, #20]
 8015282:	f891 c000 	ldrb.w	ip, [r1]
 8015286:	f810 000c 	ldrb.w	r0, [r0, ip]
 801528a:	2800      	cmp	r0, #0
 801528c:	d032      	beq.n	80152f4 <_scanf_i+0x160>
 801528e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015292:	d121      	bne.n	80152d8 <_scanf_i+0x144>
 8015294:	0510      	lsls	r0, r2, #20
 8015296:	d51f      	bpl.n	80152d8 <_scanf_i+0x144>
 8015298:	f108 0801 	add.w	r8, r8, #1
 801529c:	b117      	cbz	r7, 80152a4 <_scanf_i+0x110>
 801529e:	3301      	adds	r3, #1
 80152a0:	3f01      	subs	r7, #1
 80152a2:	60a3      	str	r3, [r4, #8]
 80152a4:	6873      	ldr	r3, [r6, #4]
 80152a6:	3b01      	subs	r3, #1
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	6073      	str	r3, [r6, #4]
 80152ac:	dd1b      	ble.n	80152e6 <_scanf_i+0x152>
 80152ae:	6833      	ldr	r3, [r6, #0]
 80152b0:	3301      	adds	r3, #1
 80152b2:	6033      	str	r3, [r6, #0]
 80152b4:	68a3      	ldr	r3, [r4, #8]
 80152b6:	3b01      	subs	r3, #1
 80152b8:	60a3      	str	r3, [r4, #8]
 80152ba:	e7dc      	b.n	8015276 <_scanf_i+0xe2>
 80152bc:	f1b8 0f02 	cmp.w	r8, #2
 80152c0:	d1ad      	bne.n	801521e <_scanf_i+0x8a>
 80152c2:	6822      	ldr	r2, [r4, #0]
 80152c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80152c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80152cc:	d1bf      	bne.n	801524e <_scanf_i+0xba>
 80152ce:	2110      	movs	r1, #16
 80152d0:	6061      	str	r1, [r4, #4]
 80152d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80152d6:	e7a1      	b.n	801521c <_scanf_i+0x88>
 80152d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80152dc:	6022      	str	r2, [r4, #0]
 80152de:	780b      	ldrb	r3, [r1, #0]
 80152e0:	702b      	strb	r3, [r5, #0]
 80152e2:	3501      	adds	r5, #1
 80152e4:	e7de      	b.n	80152a4 <_scanf_i+0x110>
 80152e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80152ea:	4631      	mov	r1, r6
 80152ec:	4658      	mov	r0, fp
 80152ee:	4798      	blx	r3
 80152f0:	2800      	cmp	r0, #0
 80152f2:	d0df      	beq.n	80152b4 <_scanf_i+0x120>
 80152f4:	6823      	ldr	r3, [r4, #0]
 80152f6:	05d9      	lsls	r1, r3, #23
 80152f8:	d50c      	bpl.n	8015314 <_scanf_i+0x180>
 80152fa:	454d      	cmp	r5, r9
 80152fc:	d908      	bls.n	8015310 <_scanf_i+0x17c>
 80152fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015306:	4632      	mov	r2, r6
 8015308:	4658      	mov	r0, fp
 801530a:	4798      	blx	r3
 801530c:	1e6f      	subs	r7, r5, #1
 801530e:	463d      	mov	r5, r7
 8015310:	454d      	cmp	r5, r9
 8015312:	d029      	beq.n	8015368 <_scanf_i+0x1d4>
 8015314:	6822      	ldr	r2, [r4, #0]
 8015316:	f012 0210 	ands.w	r2, r2, #16
 801531a:	d113      	bne.n	8015344 <_scanf_i+0x1b0>
 801531c:	702a      	strb	r2, [r5, #0]
 801531e:	6863      	ldr	r3, [r4, #4]
 8015320:	9e00      	ldr	r6, [sp, #0]
 8015322:	4649      	mov	r1, r9
 8015324:	4658      	mov	r0, fp
 8015326:	47b0      	blx	r6
 8015328:	f8da 3000 	ldr.w	r3, [sl]
 801532c:	6821      	ldr	r1, [r4, #0]
 801532e:	1d1a      	adds	r2, r3, #4
 8015330:	f8ca 2000 	str.w	r2, [sl]
 8015334:	f011 0f20 	tst.w	r1, #32
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	d010      	beq.n	801535e <_scanf_i+0x1ca>
 801533c:	6018      	str	r0, [r3, #0]
 801533e:	68e3      	ldr	r3, [r4, #12]
 8015340:	3301      	adds	r3, #1
 8015342:	60e3      	str	r3, [r4, #12]
 8015344:	eba5 0509 	sub.w	r5, r5, r9
 8015348:	44a8      	add	r8, r5
 801534a:	6925      	ldr	r5, [r4, #16]
 801534c:	4445      	add	r5, r8
 801534e:	6125      	str	r5, [r4, #16]
 8015350:	2000      	movs	r0, #0
 8015352:	b007      	add	sp, #28
 8015354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015358:	f04f 0800 	mov.w	r8, #0
 801535c:	e7ca      	b.n	80152f4 <_scanf_i+0x160>
 801535e:	07ca      	lsls	r2, r1, #31
 8015360:	bf4c      	ite	mi
 8015362:	8018      	strhmi	r0, [r3, #0]
 8015364:	6018      	strpl	r0, [r3, #0]
 8015366:	e7ea      	b.n	801533e <_scanf_i+0x1aa>
 8015368:	2001      	movs	r0, #1
 801536a:	e7f2      	b.n	8015352 <_scanf_i+0x1be>
 801536c:	08015a58 	.word	0x08015a58
 8015370:	080127d9 	.word	0x080127d9
 8015374:	0801551d 	.word	0x0801551d
 8015378:	08015f95 	.word	0x08015f95

0801537c <_read_r>:
 801537c:	b538      	push	{r3, r4, r5, lr}
 801537e:	4c07      	ldr	r4, [pc, #28]	; (801539c <_read_r+0x20>)
 8015380:	4605      	mov	r5, r0
 8015382:	4608      	mov	r0, r1
 8015384:	4611      	mov	r1, r2
 8015386:	2200      	movs	r2, #0
 8015388:	6022      	str	r2, [r4, #0]
 801538a:	461a      	mov	r2, r3
 801538c:	f000 f994 	bl	80156b8 <_read>
 8015390:	1c43      	adds	r3, r0, #1
 8015392:	d102      	bne.n	801539a <_read_r+0x1e>
 8015394:	6823      	ldr	r3, [r4, #0]
 8015396:	b103      	cbz	r3, 801539a <_read_r+0x1e>
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	bd38      	pop	{r3, r4, r5, pc}
 801539c:	20011f7c 	.word	0x20011f7c

080153a0 <__sccl>:
 80153a0:	b570      	push	{r4, r5, r6, lr}
 80153a2:	780b      	ldrb	r3, [r1, #0]
 80153a4:	2b5e      	cmp	r3, #94	; 0x5e
 80153a6:	bf13      	iteet	ne
 80153a8:	1c4a      	addne	r2, r1, #1
 80153aa:	1c8a      	addeq	r2, r1, #2
 80153ac:	784b      	ldrbeq	r3, [r1, #1]
 80153ae:	2100      	movne	r1, #0
 80153b0:	bf08      	it	eq
 80153b2:	2101      	moveq	r1, #1
 80153b4:	1e44      	subs	r4, r0, #1
 80153b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80153ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80153be:	42ac      	cmp	r4, r5
 80153c0:	d1fb      	bne.n	80153ba <__sccl+0x1a>
 80153c2:	b913      	cbnz	r3, 80153ca <__sccl+0x2a>
 80153c4:	3a01      	subs	r2, #1
 80153c6:	4610      	mov	r0, r2
 80153c8:	bd70      	pop	{r4, r5, r6, pc}
 80153ca:	f081 0401 	eor.w	r4, r1, #1
 80153ce:	54c4      	strb	r4, [r0, r3]
 80153d0:	1c51      	adds	r1, r2, #1
 80153d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80153d6:	2d2d      	cmp	r5, #45	; 0x2d
 80153d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80153dc:	460a      	mov	r2, r1
 80153de:	d006      	beq.n	80153ee <__sccl+0x4e>
 80153e0:	2d5d      	cmp	r5, #93	; 0x5d
 80153e2:	d0f0      	beq.n	80153c6 <__sccl+0x26>
 80153e4:	b90d      	cbnz	r5, 80153ea <__sccl+0x4a>
 80153e6:	4632      	mov	r2, r6
 80153e8:	e7ed      	b.n	80153c6 <__sccl+0x26>
 80153ea:	462b      	mov	r3, r5
 80153ec:	e7ef      	b.n	80153ce <__sccl+0x2e>
 80153ee:	780e      	ldrb	r6, [r1, #0]
 80153f0:	2e5d      	cmp	r6, #93	; 0x5d
 80153f2:	d0fa      	beq.n	80153ea <__sccl+0x4a>
 80153f4:	42b3      	cmp	r3, r6
 80153f6:	dcf8      	bgt.n	80153ea <__sccl+0x4a>
 80153f8:	3301      	adds	r3, #1
 80153fa:	429e      	cmp	r6, r3
 80153fc:	54c4      	strb	r4, [r0, r3]
 80153fe:	dcfb      	bgt.n	80153f8 <__sccl+0x58>
 8015400:	3102      	adds	r1, #2
 8015402:	e7e6      	b.n	80153d2 <__sccl+0x32>

08015404 <strncmp>:
 8015404:	b510      	push	{r4, lr}
 8015406:	b16a      	cbz	r2, 8015424 <strncmp+0x20>
 8015408:	3901      	subs	r1, #1
 801540a:	1884      	adds	r4, r0, r2
 801540c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015410:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015414:	4293      	cmp	r3, r2
 8015416:	d103      	bne.n	8015420 <strncmp+0x1c>
 8015418:	42a0      	cmp	r0, r4
 801541a:	d001      	beq.n	8015420 <strncmp+0x1c>
 801541c:	2b00      	cmp	r3, #0
 801541e:	d1f5      	bne.n	801540c <strncmp+0x8>
 8015420:	1a98      	subs	r0, r3, r2
 8015422:	bd10      	pop	{r4, pc}
 8015424:	4610      	mov	r0, r2
 8015426:	e7fc      	b.n	8015422 <strncmp+0x1e>

08015428 <_strtoul_l.isra.0>:
 8015428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801542c:	4680      	mov	r8, r0
 801542e:	4689      	mov	r9, r1
 8015430:	4692      	mov	sl, r2
 8015432:	461e      	mov	r6, r3
 8015434:	460f      	mov	r7, r1
 8015436:	463d      	mov	r5, r7
 8015438:	9808      	ldr	r0, [sp, #32]
 801543a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801543e:	f7fe fd37 	bl	8013eb0 <__locale_ctype_ptr_l>
 8015442:	4420      	add	r0, r4
 8015444:	7843      	ldrb	r3, [r0, #1]
 8015446:	f013 0308 	ands.w	r3, r3, #8
 801544a:	d130      	bne.n	80154ae <_strtoul_l.isra.0+0x86>
 801544c:	2c2d      	cmp	r4, #45	; 0x2d
 801544e:	d130      	bne.n	80154b2 <_strtoul_l.isra.0+0x8a>
 8015450:	787c      	ldrb	r4, [r7, #1]
 8015452:	1cbd      	adds	r5, r7, #2
 8015454:	2101      	movs	r1, #1
 8015456:	2e00      	cmp	r6, #0
 8015458:	d05c      	beq.n	8015514 <_strtoul_l.isra.0+0xec>
 801545a:	2e10      	cmp	r6, #16
 801545c:	d109      	bne.n	8015472 <_strtoul_l.isra.0+0x4a>
 801545e:	2c30      	cmp	r4, #48	; 0x30
 8015460:	d107      	bne.n	8015472 <_strtoul_l.isra.0+0x4a>
 8015462:	782b      	ldrb	r3, [r5, #0]
 8015464:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015468:	2b58      	cmp	r3, #88	; 0x58
 801546a:	d14e      	bne.n	801550a <_strtoul_l.isra.0+0xe2>
 801546c:	786c      	ldrb	r4, [r5, #1]
 801546e:	2610      	movs	r6, #16
 8015470:	3502      	adds	r5, #2
 8015472:	f04f 32ff 	mov.w	r2, #4294967295
 8015476:	2300      	movs	r3, #0
 8015478:	fbb2 f2f6 	udiv	r2, r2, r6
 801547c:	fb06 fc02 	mul.w	ip, r6, r2
 8015480:	ea6f 0c0c 	mvn.w	ip, ip
 8015484:	4618      	mov	r0, r3
 8015486:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801548a:	2f09      	cmp	r7, #9
 801548c:	d817      	bhi.n	80154be <_strtoul_l.isra.0+0x96>
 801548e:	463c      	mov	r4, r7
 8015490:	42a6      	cmp	r6, r4
 8015492:	dd23      	ble.n	80154dc <_strtoul_l.isra.0+0xb4>
 8015494:	2b00      	cmp	r3, #0
 8015496:	db1e      	blt.n	80154d6 <_strtoul_l.isra.0+0xae>
 8015498:	4282      	cmp	r2, r0
 801549a:	d31c      	bcc.n	80154d6 <_strtoul_l.isra.0+0xae>
 801549c:	d101      	bne.n	80154a2 <_strtoul_l.isra.0+0x7a>
 801549e:	45a4      	cmp	ip, r4
 80154a0:	db19      	blt.n	80154d6 <_strtoul_l.isra.0+0xae>
 80154a2:	fb00 4006 	mla	r0, r0, r6, r4
 80154a6:	2301      	movs	r3, #1
 80154a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154ac:	e7eb      	b.n	8015486 <_strtoul_l.isra.0+0x5e>
 80154ae:	462f      	mov	r7, r5
 80154b0:	e7c1      	b.n	8015436 <_strtoul_l.isra.0+0xe>
 80154b2:	2c2b      	cmp	r4, #43	; 0x2b
 80154b4:	bf04      	itt	eq
 80154b6:	1cbd      	addeq	r5, r7, #2
 80154b8:	787c      	ldrbeq	r4, [r7, #1]
 80154ba:	4619      	mov	r1, r3
 80154bc:	e7cb      	b.n	8015456 <_strtoul_l.isra.0+0x2e>
 80154be:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80154c2:	2f19      	cmp	r7, #25
 80154c4:	d801      	bhi.n	80154ca <_strtoul_l.isra.0+0xa2>
 80154c6:	3c37      	subs	r4, #55	; 0x37
 80154c8:	e7e2      	b.n	8015490 <_strtoul_l.isra.0+0x68>
 80154ca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80154ce:	2f19      	cmp	r7, #25
 80154d0:	d804      	bhi.n	80154dc <_strtoul_l.isra.0+0xb4>
 80154d2:	3c57      	subs	r4, #87	; 0x57
 80154d4:	e7dc      	b.n	8015490 <_strtoul_l.isra.0+0x68>
 80154d6:	f04f 33ff 	mov.w	r3, #4294967295
 80154da:	e7e5      	b.n	80154a8 <_strtoul_l.isra.0+0x80>
 80154dc:	2b00      	cmp	r3, #0
 80154de:	da09      	bge.n	80154f4 <_strtoul_l.isra.0+0xcc>
 80154e0:	2322      	movs	r3, #34	; 0x22
 80154e2:	f8c8 3000 	str.w	r3, [r8]
 80154e6:	f04f 30ff 	mov.w	r0, #4294967295
 80154ea:	f1ba 0f00 	cmp.w	sl, #0
 80154ee:	d107      	bne.n	8015500 <_strtoul_l.isra.0+0xd8>
 80154f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154f4:	b101      	cbz	r1, 80154f8 <_strtoul_l.isra.0+0xd0>
 80154f6:	4240      	negs	r0, r0
 80154f8:	f1ba 0f00 	cmp.w	sl, #0
 80154fc:	d0f8      	beq.n	80154f0 <_strtoul_l.isra.0+0xc8>
 80154fe:	b10b      	cbz	r3, 8015504 <_strtoul_l.isra.0+0xdc>
 8015500:	f105 39ff 	add.w	r9, r5, #4294967295
 8015504:	f8ca 9000 	str.w	r9, [sl]
 8015508:	e7f2      	b.n	80154f0 <_strtoul_l.isra.0+0xc8>
 801550a:	2430      	movs	r4, #48	; 0x30
 801550c:	2e00      	cmp	r6, #0
 801550e:	d1b0      	bne.n	8015472 <_strtoul_l.isra.0+0x4a>
 8015510:	2608      	movs	r6, #8
 8015512:	e7ae      	b.n	8015472 <_strtoul_l.isra.0+0x4a>
 8015514:	2c30      	cmp	r4, #48	; 0x30
 8015516:	d0a4      	beq.n	8015462 <_strtoul_l.isra.0+0x3a>
 8015518:	260a      	movs	r6, #10
 801551a:	e7aa      	b.n	8015472 <_strtoul_l.isra.0+0x4a>

0801551c <_strtoul_r>:
 801551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801551e:	4c06      	ldr	r4, [pc, #24]	; (8015538 <_strtoul_r+0x1c>)
 8015520:	4d06      	ldr	r5, [pc, #24]	; (801553c <_strtoul_r+0x20>)
 8015522:	6824      	ldr	r4, [r4, #0]
 8015524:	6a24      	ldr	r4, [r4, #32]
 8015526:	2c00      	cmp	r4, #0
 8015528:	bf08      	it	eq
 801552a:	462c      	moveq	r4, r5
 801552c:	9400      	str	r4, [sp, #0]
 801552e:	f7ff ff7b 	bl	8015428 <_strtoul_l.isra.0>
 8015532:	b003      	add	sp, #12
 8015534:	bd30      	pop	{r4, r5, pc}
 8015536:	bf00      	nop
 8015538:	200003a8 	.word	0x200003a8
 801553c:	2000040c 	.word	0x2000040c

08015540 <__submore>:
 8015540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015544:	460c      	mov	r4, r1
 8015546:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801554c:	4299      	cmp	r1, r3
 801554e:	d11d      	bne.n	801558c <__submore+0x4c>
 8015550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015554:	f7fb faf6 	bl	8010b44 <_malloc_r>
 8015558:	b918      	cbnz	r0, 8015562 <__submore+0x22>
 801555a:	f04f 30ff 	mov.w	r0, #4294967295
 801555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015566:	63a3      	str	r3, [r4, #56]	; 0x38
 8015568:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801556c:	6360      	str	r0, [r4, #52]	; 0x34
 801556e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015572:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015576:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801557a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801557e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015582:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015586:	6020      	str	r0, [r4, #0]
 8015588:	2000      	movs	r0, #0
 801558a:	e7e8      	b.n	801555e <__submore+0x1e>
 801558c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801558e:	0077      	lsls	r7, r6, #1
 8015590:	463a      	mov	r2, r7
 8015592:	f7ff f939 	bl	8014808 <_realloc_r>
 8015596:	4605      	mov	r5, r0
 8015598:	2800      	cmp	r0, #0
 801559a:	d0de      	beq.n	801555a <__submore+0x1a>
 801559c:	eb00 0806 	add.w	r8, r0, r6
 80155a0:	4601      	mov	r1, r0
 80155a2:	4632      	mov	r2, r6
 80155a4:	4640      	mov	r0, r8
 80155a6:	f7fb fa5d 	bl	8010a64 <memcpy>
 80155aa:	f8c4 8000 	str.w	r8, [r4]
 80155ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80155b2:	e7e9      	b.n	8015588 <__submore+0x48>

080155b4 <__ascii_wctomb>:
 80155b4:	b149      	cbz	r1, 80155ca <__ascii_wctomb+0x16>
 80155b6:	2aff      	cmp	r2, #255	; 0xff
 80155b8:	bf85      	ittet	hi
 80155ba:	238a      	movhi	r3, #138	; 0x8a
 80155bc:	6003      	strhi	r3, [r0, #0]
 80155be:	700a      	strbls	r2, [r1, #0]
 80155c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80155c4:	bf98      	it	ls
 80155c6:	2001      	movls	r0, #1
 80155c8:	4770      	bx	lr
 80155ca:	4608      	mov	r0, r1
 80155cc:	4770      	bx	lr
	...

080155d0 <_fstat_r>:
 80155d0:	b538      	push	{r3, r4, r5, lr}
 80155d2:	4c07      	ldr	r4, [pc, #28]	; (80155f0 <_fstat_r+0x20>)
 80155d4:	2300      	movs	r3, #0
 80155d6:	4605      	mov	r5, r0
 80155d8:	4608      	mov	r0, r1
 80155da:	4611      	mov	r1, r2
 80155dc:	6023      	str	r3, [r4, #0]
 80155de:	f000 f843 	bl	8015668 <_fstat>
 80155e2:	1c43      	adds	r3, r0, #1
 80155e4:	d102      	bne.n	80155ec <_fstat_r+0x1c>
 80155e6:	6823      	ldr	r3, [r4, #0]
 80155e8:	b103      	cbz	r3, 80155ec <_fstat_r+0x1c>
 80155ea:	602b      	str	r3, [r5, #0]
 80155ec:	bd38      	pop	{r3, r4, r5, pc}
 80155ee:	bf00      	nop
 80155f0:	20011f7c 	.word	0x20011f7c

080155f4 <_isatty_r>:
 80155f4:	b538      	push	{r3, r4, r5, lr}
 80155f6:	4c06      	ldr	r4, [pc, #24]	; (8015610 <_isatty_r+0x1c>)
 80155f8:	2300      	movs	r3, #0
 80155fa:	4605      	mov	r5, r0
 80155fc:	4608      	mov	r0, r1
 80155fe:	6023      	str	r3, [r4, #0]
 8015600:	f000 f842 	bl	8015688 <_isatty>
 8015604:	1c43      	adds	r3, r0, #1
 8015606:	d102      	bne.n	801560e <_isatty_r+0x1a>
 8015608:	6823      	ldr	r3, [r4, #0]
 801560a:	b103      	cbz	r3, 801560e <_isatty_r+0x1a>
 801560c:	602b      	str	r3, [r5, #0]
 801560e:	bd38      	pop	{r3, r4, r5, pc}
 8015610:	20011f7c 	.word	0x20011f7c

08015614 <memmove>:
 8015614:	4288      	cmp	r0, r1
 8015616:	b510      	push	{r4, lr}
 8015618:	eb01 0302 	add.w	r3, r1, r2
 801561c:	d807      	bhi.n	801562e <memmove+0x1a>
 801561e:	1e42      	subs	r2, r0, #1
 8015620:	4299      	cmp	r1, r3
 8015622:	d00a      	beq.n	801563a <memmove+0x26>
 8015624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015628:	f802 4f01 	strb.w	r4, [r2, #1]!
 801562c:	e7f8      	b.n	8015620 <memmove+0xc>
 801562e:	4283      	cmp	r3, r0
 8015630:	d9f5      	bls.n	801561e <memmove+0xa>
 8015632:	1881      	adds	r1, r0, r2
 8015634:	1ad2      	subs	r2, r2, r3
 8015636:	42d3      	cmn	r3, r2
 8015638:	d100      	bne.n	801563c <memmove+0x28>
 801563a:	bd10      	pop	{r4, pc}
 801563c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015640:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015644:	e7f7      	b.n	8015636 <memmove+0x22>

08015646 <_malloc_usable_size_r>:
 8015646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801564a:	1f18      	subs	r0, r3, #4
 801564c:	2b00      	cmp	r3, #0
 801564e:	bfbc      	itt	lt
 8015650:	580b      	ldrlt	r3, [r1, r0]
 8015652:	18c0      	addlt	r0, r0, r3
 8015654:	4770      	bx	lr
	...

08015658 <_close>:
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <_close+0xc>)
 801565a:	2258      	movs	r2, #88	; 0x58
 801565c:	601a      	str	r2, [r3, #0]
 801565e:	f04f 30ff 	mov.w	r0, #4294967295
 8015662:	4770      	bx	lr
 8015664:	20011f7c 	.word	0x20011f7c

08015668 <_fstat>:
 8015668:	4b02      	ldr	r3, [pc, #8]	; (8015674 <_fstat+0xc>)
 801566a:	2258      	movs	r2, #88	; 0x58
 801566c:	601a      	str	r2, [r3, #0]
 801566e:	f04f 30ff 	mov.w	r0, #4294967295
 8015672:	4770      	bx	lr
 8015674:	20011f7c 	.word	0x20011f7c

08015678 <_getpid>:
 8015678:	4b02      	ldr	r3, [pc, #8]	; (8015684 <_getpid+0xc>)
 801567a:	2258      	movs	r2, #88	; 0x58
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	f04f 30ff 	mov.w	r0, #4294967295
 8015682:	4770      	bx	lr
 8015684:	20011f7c 	.word	0x20011f7c

08015688 <_isatty>:
 8015688:	4b02      	ldr	r3, [pc, #8]	; (8015694 <_isatty+0xc>)
 801568a:	2258      	movs	r2, #88	; 0x58
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	2000      	movs	r0, #0
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	20011f7c 	.word	0x20011f7c

08015698 <_kill>:
 8015698:	4b02      	ldr	r3, [pc, #8]	; (80156a4 <_kill+0xc>)
 801569a:	2258      	movs	r2, #88	; 0x58
 801569c:	601a      	str	r2, [r3, #0]
 801569e:	f04f 30ff 	mov.w	r0, #4294967295
 80156a2:	4770      	bx	lr
 80156a4:	20011f7c 	.word	0x20011f7c

080156a8 <_lseek>:
 80156a8:	4b02      	ldr	r3, [pc, #8]	; (80156b4 <_lseek+0xc>)
 80156aa:	2258      	movs	r2, #88	; 0x58
 80156ac:	601a      	str	r2, [r3, #0]
 80156ae:	f04f 30ff 	mov.w	r0, #4294967295
 80156b2:	4770      	bx	lr
 80156b4:	20011f7c 	.word	0x20011f7c

080156b8 <_read>:
 80156b8:	4b02      	ldr	r3, [pc, #8]	; (80156c4 <_read+0xc>)
 80156ba:	2258      	movs	r2, #88	; 0x58
 80156bc:	601a      	str	r2, [r3, #0]
 80156be:	f04f 30ff 	mov.w	r0, #4294967295
 80156c2:	4770      	bx	lr
 80156c4:	20011f7c 	.word	0x20011f7c

080156c8 <_sbrk>:
 80156c8:	4b04      	ldr	r3, [pc, #16]	; (80156dc <_sbrk+0x14>)
 80156ca:	6819      	ldr	r1, [r3, #0]
 80156cc:	4602      	mov	r2, r0
 80156ce:	b909      	cbnz	r1, 80156d4 <_sbrk+0xc>
 80156d0:	4903      	ldr	r1, [pc, #12]	; (80156e0 <_sbrk+0x18>)
 80156d2:	6019      	str	r1, [r3, #0]
 80156d4:	6818      	ldr	r0, [r3, #0]
 80156d6:	4402      	add	r2, r0
 80156d8:	601a      	str	r2, [r3, #0]
 80156da:	4770      	bx	lr
 80156dc:	20002728 	.word	0x20002728
 80156e0:	20011f80 	.word	0x20011f80

080156e4 <_exit>:
 80156e4:	e7fe      	b.n	80156e4 <_exit>
	...

080156e8 <_init>:
 80156e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ea:	bf00      	nop
 80156ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ee:	bc08      	pop	{r3}
 80156f0:	469e      	mov	lr, r3
 80156f2:	4770      	bx	lr

080156f4 <_fini>:
 80156f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f6:	bf00      	nop
 80156f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156fa:	bc08      	pop	{r3}
 80156fc:	469e      	mov	lr, r3
 80156fe:	4770      	bx	lr
