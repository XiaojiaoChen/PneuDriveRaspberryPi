
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  080146f8  080146f8  000246f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015088  08015088  00030548  2**0
                  CONTENTS
  4 .ARM          00000008  08015088  08015088  00025088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015090  08015090  00030548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015090  08015090  00025090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015098  08015098  00025098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000548  20000000  0801509c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015958  20000548  080155e4  00030548  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015ea0  080155e4  00035ea0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030548  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004efda  00000000  00000000  00030576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000095bb  00000000  00000000  0007f550  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b8  00000000  00000000  00088b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd0  00000000  00000000  0008aec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036136  00000000  00000000  0008ce98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d2f7  00000000  00000000  000c2fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001151ce  00000000  00000000  000f02c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a470  00000000  00000000  00205510  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  0020f980  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0020fa34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000548 	.word	0x20000548
 800021c:	00000000 	.word	0x00000000
 8000220:	080146e0 	.word	0x080146e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000054c 	.word	0x2000054c
 800023c:	080146e0 	.word	0x080146e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fe9a 	bl	8001cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 f99c 	bl	80092fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f008 f972 	bl	80092ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20001348 	.word	0x20001348

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20001348 	.word	0x20001348

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f007 f808 	bl	8008088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f964 	bl	8001370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e12a      	b.n	800134e <HAL_ADC_ConfigChannel+0x272>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d93a      	bls.n	800117e <HAL_ADC_ConfigChannel+0xa2>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001110:	d035      	beq.n	800117e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68d9      	ldr	r1, [r3, #12]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	3b1e      	subs	r3, #30
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	061a      	lsls	r2, r3, #24
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	e035      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	3b1e      	subs	r3, #30
 8001172:	409a      	lsls	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117c:	e022      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6919      	ldr	r1, [r3, #16]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4403      	add	r3, r0
 80011ba:	409a      	lsls	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d824      	bhi.n	8001216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b05      	subs	r3, #5
 80011de:	221f      	movs	r2, #31
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e04c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d824      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b23      	subs	r3, #35	; 0x23
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	e023      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b41      	subs	r3, #65	; 0x41
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10a      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d125      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x22e>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b11      	cmp	r3, #17
 8001308:	d11c      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 8001310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001314:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_ADC_ConfigChannel+0x28c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_ConfigChannel+0x290>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001336:	e002      	b.n	800133e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	10000012 	.word	0x10000012
 8001360:	40012000 	.word	0x40012000
 8001364:	40012300 	.word	0x40012300
 8001368:	2000000c 	.word	0x2000000c
 800136c:	431bde83 	.word	0x431bde83

08001370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <ADC_Init+0x1ec>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a77      	ldr	r2, [pc, #476]	; (800155c <ADC_Init+0x1ec>)
 800137e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001382:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <ADC_Init+0x1ec>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4973      	ldr	r1, [pc, #460]	; (800155c <ADC_Init+0x1ec>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	021a      	lsls	r2, r3, #8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <ADC_Init+0x1f0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e00f      	b.n	800146a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0202 	bic.w	r2, r2, #2
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	005a      	lsls	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	035a      	lsls	r2, r3, #13
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e007      	b.n	80014e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	051a      	lsls	r2, r3, #20
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40012300 	.word	0x40012300
 8001560:	0f000001 	.word	0x0f000001

08001564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0ed      	b.n	8001752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 fe5e 	bl	8008244 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0202 	bic.w	r2, r2, #2
 8001596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fd2e 	bl	8000ff8 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c5      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fd08 	bl	8000ff8 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff fd04 	bl	8000ff8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e09f      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0e5      	beq.n	80015ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e9b      	ldrb	r3, [r3, #26]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0220 	bic.w	r2, r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7edb      	ldrb	r3, [r3, #27]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7f1b      	ldrb	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	ea42 0103 	orr.w	r1, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b08a      	sub	sp, #40	; 0x28
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d07c      	beq.n	800189a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d023      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f97d 	bl	8001abc <HAL_CAN_TxMailbox0CompleteCallback>
 80017c2:	e016      	b.n	80017f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	e00c      	b.n	80017f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	e002      	b.n	80017f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f983 	bl	8001af8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d024      	beq.n	8001846 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f95d 	bl	8001ad0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001816:	e016      	b.n	8001846 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e00c      	b.n	8001846 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e002      	b.n	8001846 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f963 	bl	8001b0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d024      	beq.n	800189a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f93d 	bl	8001ae4 <HAL_CAN_TxMailbox2CompleteCallback>
 800186a:	e016      	b.n	800189a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	e00c      	b.n	800189a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	e002      	b.n	800189a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f943 	bl	8001b20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2210      	movs	r2, #16
 80018bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2208      	movs	r2, #8
 80018d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f92a 	bl	8001b34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00c fa33 	bl	800dd64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001918:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2210      	movs	r2, #16
 8001920:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00b      	beq.n	8001944 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2208      	movs	r2, #8
 800193c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f902 	bl	8001b48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f00c fa1f 	bl	800dda0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2210      	movs	r2, #16
 800197c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8ec 	bl	8001b5c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2208      	movs	r2, #8
 800199e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f8e5 	bl	8001b70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d075      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06c      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03d      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d038      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a28:	2b30      	cmp	r3, #48	; 0x30
 8001a2a:	d017      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x302>
 8001a2c:	2b30      	cmp	r3, #48	; 0x30
 8001a2e:	d804      	bhi.n	8001a3a <HAL_CAN_IRQHandler+0x2e0>
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d009      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x2ee>
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	d00c      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a38:	e024      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001a3a:	2b50      	cmp	r3, #80	; 0x50
 8001a3c:	d018      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x316>
 8001a3e:	2b60      	cmp	r3, #96	; 0x60
 8001a40:	d01b      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x320>
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d00f      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001a46:	e01d      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a50:	e018      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5a:	e013      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a64:	e00e      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a6e:	e009      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a78:	e004      	b.n	8001a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f868 	bl	8001b84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	05fa0000 	.word	0x05fa0000

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff4c 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1a:	f7ff ff61 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7ff ffb1 	bl	8001c8c <NVIC_EncodePriority>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff80 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d38:	bf00      	nop
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff54 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff f946 	bl	8000ff8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e099      	b.n	8001eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d98:	e00f      	b.n	8001dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9a:	f7ff f92d 	bl	8000ff8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d908      	bls.n	8001dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e078      	b.n	8001eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e8      	bne.n	8001d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_DMA_Init+0x158>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 0307 	bic.w	r3, r3, #7
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d117      	bne.n	8001e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fb09 	bl	8002478 <DMA_CheckFifoParam>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fac0 	bl	800240c <DMA_CalcBaseAndBitshift>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	223f      	movs	r2, #63	; 0x3f
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	e010803f 	.word	0xe010803f

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Start_IT+0x26>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e048      	b.n	8001f70 <HAL_DMA_Start_IT+0xb8>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d137      	bne.n	8001f62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fa52 	bl	80023b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	223f      	movs	r2, #63	; 0x3f
 8001f12:	409a      	lsls	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0216 	orr.w	r2, r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff f837 	bl	8000ff8 <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e052      	b.n	8002050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_Abort+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	e013      	b.n	8002024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7fe fffc 	bl	8000ff8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d90c      	bls.n	8002024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e4      	bne.n	8001ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_DMA_IRQHandler+0x258>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <HAL_DMA_IRQHandler+0x25c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2208      	movs	r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2204      	movs	r2, #4
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2210      	movs	r2, #16
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03c      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2210      	movs	r2, #16
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e01f      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e016      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2220      	movs	r2, #32
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808e 	beq.w	800233a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8086 	beq.w	800233a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2220      	movs	r2, #32
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d136      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_IRQHandler+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
        }
        return;
 80022b2:	e078      	b.n	80023a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01c      	beq.n	80022fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d030      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e02b      	b.n	800233a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d027      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e022      	b.n	800233a <HAL_DMA_IRQHandler+0x29e>
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0210 	bic.w	r2, r2, #16
 8002318:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	2b00      	cmp	r3, #0
 8002340:	d032      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d022      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2205      	movs	r2, #5
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	429a      	cmp	r2, r3
 8002370:	d307      	bcc.n	8002382 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_DMA_IRQHandler+0x2ca>
 8002380:	e000      	b.n	8002384 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002382:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e000      	b.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023a6:	bf00      	nop
    }
  }
}
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop

080023b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d108      	bne.n	80023f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ee:	e007      	b.n	8002400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b10      	subs	r3, #16
 800241c:	4a13      	ldr	r2, [pc, #76]	; (800246c <DMA_CalcBaseAndBitshift+0x60>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <DMA_CalcBaseAndBitshift+0x64>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d908      	bls.n	800244c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <DMA_CalcBaseAndBitshift+0x68>)
 8002442:	4013      	ands	r3, r2
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58
 800244a:	e006      	b.n	800245a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <DMA_CalcBaseAndBitshift+0x68>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	aaaaaaab 	.word	0xaaaaaaab
 8002470:	0801494c 	.word	0x0801494c
 8002474:	fffffc00 	.word	0xfffffc00

08002478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11f      	bne.n	80024d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d855      	bhi.n	8002544 <DMA_CheckFifoParam+0xcc>
 8002498:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <DMA_CheckFifoParam+0x28>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024c3 	.word	0x080024c3
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	08002545 	.word	0x08002545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d045      	beq.n	8002548 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e042      	b.n	8002548 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ca:	d13f      	bne.n	800254c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d0:	e03c      	b.n	800254c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024da:	d121      	bne.n	8002520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d836      	bhi.n	8002550 <DMA_CheckFifoParam+0xd8>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <DMA_CheckFifoParam+0x70>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	080024ff 	.word	0x080024ff
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	08002511 	.word	0x08002511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e02f      	b.n	800255e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d024      	beq.n	8002554 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250e:	e021      	b.n	8002554 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002518:	d11e      	bne.n	8002558 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251e:	e01b      	b.n	8002558 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <DMA_CheckFifoParam+0xb4>
 8002526:	2b03      	cmp	r3, #3
 8002528:	d003      	beq.n	8002532 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800252a:	e018      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e015      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      break;
 8002542:	e00b      	b.n	800255c <DMA_CheckFifoParam+0xe4>
      break;
 8002544:	bf00      	nop
 8002546:	e00a      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 8002548:	bf00      	nop
 800254a:	e008      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 800254c:	bf00      	nop
 800254e:	e006      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 8002550:	bf00      	nop
 8002552:	e004      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 8002554:	bf00      	nop
 8002556:	e002      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;   
 8002558:	bf00      	nop
 800255a:	e000      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 800255c:	bf00      	nop
    }
  } 
  
  return status; 
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e175      	b.n	8002878 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8164 	bne.w	8002872 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00b      	beq.n	80025ca <HAL_GPIO_Init+0x5e>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025be:	2b11      	cmp	r3, #17
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x100>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b12      	cmp	r3, #18
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80be 	beq.w	8002872 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_GPIO_Init+0x320>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a64      	ldr	r2, [pc, #400]	; (800288c <HAL_GPIO_Init+0x320>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_GPIO_Init+0x320>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800270e:	4a60      	ldr	r2, [pc, #384]	; (8002890 <HAL_GPIO_Init+0x324>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_GPIO_Init+0x328>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d037      	beq.n	80027aa <HAL_GPIO_Init+0x23e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_GPIO_Init+0x32c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_GPIO_Init+0x23a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_GPIO_Init+0x330>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_Init+0x236>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a54      	ldr	r2, [pc, #336]	; (80028a0 <HAL_GPIO_Init+0x334>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x232>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a53      	ldr	r2, [pc, #332]	; (80028a4 <HAL_GPIO_Init+0x338>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x22e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a52      	ldr	r2, [pc, #328]	; (80028a8 <HAL_GPIO_Init+0x33c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x22a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_GPIO_Init+0x340>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x226>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <HAL_GPIO_Init+0x344>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x222>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	; (80028b4 <HAL_GPIO_Init+0x348>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x21e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <HAL_GPIO_Init+0x34c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x21a>
 8002782:	2309      	movs	r3, #9
 8002784:	e012      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002786:	230a      	movs	r3, #10
 8002788:	e010      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278a:	2308      	movs	r3, #8
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278e:	2307      	movs	r3, #7
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027aa:	2300      	movs	r3, #0
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027bc:	4934      	ldr	r1, [pc, #208]	; (8002890 <HAL_GPIO_Init+0x324>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_GPIO_Init+0x350>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_GPIO_Init+0x350>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f4:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_GPIO_Init+0x350>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_GPIO_Init+0x350>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_GPIO_Init+0x350>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_GPIO_Init+0x350>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_GPIO_Init+0x350>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_GPIO_Init+0x350>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	f67f ae86 	bls.w	800258c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3724      	adds	r7, #36	; 0x24
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021800 	.word	0x40021800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40022400 	.word	0x40022400
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f006 f8ea 	bl	8008aec <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f005 ff02 	bl	8008754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e006      	b.n	80029ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_I2C_Init+0x11c>)
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	ea42 0103 	orr.w	r1, r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	021a      	lsls	r2, r3, #8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	02008000 	.word	0x02008000

08002a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d138      	bne.n	8002acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e032      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d139      	bne.n	8002b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e033      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba2:	f7fe fa29 	bl	8000ff8 <HAL_GetTick>
 8002ba6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba8:	e009      	b.n	8002bbe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002baa:	f7fe fa25 	bl	8000ff8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb8:	d901      	bls.n	8002bbe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e022      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d1ee      	bne.n	8002baa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7fe fa0e 	bl	8000ff8 <HAL_GetTick>
 8002bdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bde:	e009      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002be0:	f7fe fa0a 	bl	8000ff8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bee:	d901      	bls.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e007      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c00:	d1ee      	bne.n	8002be0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e29b      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c38:	4b96      	ldr	r3, [pc, #600]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c44:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x62>
 8002c50:	4b90      	ldr	r3, [pc, #576]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x130>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e275      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x7a>
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a83      	ldr	r2, [pc, #524]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x9c>
 8002c96:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b7c      	ldr	r3, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7b      	ldr	r2, [pc, #492]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a75      	ldr	r2, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a72      	ldr	r2, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd8>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6b      	ldr	r2, [pc, #428]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f980 	bl	8000ff8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f97c 	bl	8000ff8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e229      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe8>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f96c 	bl	8000ff8 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe f968 	bl	8000ff8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e215      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x110>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d069      	beq.n	8002e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x190>
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x17a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1e9      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	493d      	ldr	r1, [pc, #244]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e040      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a38      	ldr	r2, [pc, #224]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f91e 	bl	8000ff8 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f91a 	bl	8000ff8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4929      	ldr	r1, [pc, #164]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
 8002df2:	e018      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f8fa 	bl	8000ff8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fe f8f6 	bl	8000ff8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1a3      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d038      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d019      	beq.n	8002e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe f8d7 	bl	8000ff8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe f8d3 	bl	8000ff8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e180      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x23a>
 8002e6c:	e01a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCC_OscConfig+0x280>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f8bd 	bl	8000ff8 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e82:	f7fe f8b9 	bl	8000ff8 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d903      	bls.n	8002e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e166      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
 8002e94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ee      	bne.n	8002e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a4 	beq.w	8002ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a88      	ldr	r2, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b86      	ldr	r3, [pc, #536]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ee6:	4b80      	ldr	r3, [pc, #512]	; (80030e8 <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4d4>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f881 	bl	8000ff8 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe f87d 	bl	8000ff8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e12a      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x4d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x31a>
 8002f20:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a6f      	ldr	r2, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e02d      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x33c>
 8002f36:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x35e>
 8002f58:	4b62      	ldr	r3, [pc, #392]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a61      	ldr	r2, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
 8002f72:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe f831 	bl	8000ff8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe f82d 	bl	8000ff8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0d8      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x386>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f81b 	bl	8000ff8 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f817 	bl	8000ff8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0c2      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80ae 	beq.w	8003160 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d06d      	beq.n	80030ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d14b      	bne.n	80030b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fd ffe8 	bl	8000ff8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fd ffe4 	bl	8000ff8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e091      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	071b      	lsls	r3, r3, #28
 8003076:	491b      	ldr	r1, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd ffb6 	bl	8000ff8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fd ffb2 	bl	8000ff8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e05f      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x47c>
 80030ae:	e057      	b.n	8003160 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 80030b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fd ff9c 	bl	8000ff8 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fd ff98 	bl	8000ff8 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4b0>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x54c>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCC_OscConfig+0x558>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d030      	beq.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d129      	bne.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d122      	bne.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003124:	4293      	cmp	r3, r2
 8003126:	d119      	bne.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d10f      	bne.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0d0      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003188:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d910      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 020f 	bic.w	r2, r3, #15
 800319e:	4965      	ldr	r1, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d040      	beq.n	8003294 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d115      	bne.n	8003252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003232:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e073      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e06b      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4936      	ldr	r1, [pc, #216]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003264:	f7fd fec8 	bl	8000ff8 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fd fec4 	bl	8000ff8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e053      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d210      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 020f 	bic.w	r2, r3, #15
 80032aa:	4922      	ldr	r1, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1cc>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	fa21 f303 	lsr.w	r3, r1, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1d0>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1d4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f005 ffea 	bl	80092fc <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08014954 	.word	0x08014954
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000000 	.word	0x20000000

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335e:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b04      	cmp	r3, #4
 8003368:	d007      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x32>
 800336a:	2b08      	cmp	r3, #8
 800336c:	d008      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x38>
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 808d 	bne.w	800348e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003376:	60bb      	str	r3, [r7, #8]
      break;
 8003378:	e08c      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337a:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800337c:	60bb      	str	r3, [r7, #8]
      break;
 800337e:	e089      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003380:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d023      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	f04f 0400 	mov.w	r4, #0
 80033a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	ea03 0501 	and.w	r5, r3, r1
 80033ac:	ea04 0602 	and.w	r6, r4, r2
 80033b0:	4a3d      	ldr	r2, [pc, #244]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b2:	fb02 f106 	mul.w	r1, r2, r6
 80033b6:	2200      	movs	r2, #0
 80033b8:	fb02 f205 	mul.w	r2, r2, r5
 80033bc:	440a      	add	r2, r1
 80033be:	493a      	ldr	r1, [pc, #232]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c0:	fba5 0101 	umull	r0, r1, r5, r1
 80033c4:	1853      	adds	r3, r2, r1
 80033c6:	4619      	mov	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	461a      	mov	r2, r3
 80033d0:	4623      	mov	r3, r4
 80033d2:	f7fc ff8d 	bl	80002f0 <__aeabi_uldivmod>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e049      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	f04f 0400 	mov.w	r4, #0
 80033e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	ea03 0501 	and.w	r5, r3, r1
 80033f4:	ea04 0602 	and.w	r6, r4, r2
 80033f8:	4629      	mov	r1, r5
 80033fa:	4632      	mov	r2, r6
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	f04f 0400 	mov.w	r4, #0
 8003404:	0154      	lsls	r4, r2, #5
 8003406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800340a:	014b      	lsls	r3, r1, #5
 800340c:	4619      	mov	r1, r3
 800340e:	4622      	mov	r2, r4
 8003410:	1b49      	subs	r1, r1, r5
 8003412:	eb62 0206 	sbc.w	r2, r2, r6
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f04f 0400 	mov.w	r4, #0
 800341e:	0194      	lsls	r4, r2, #6
 8003420:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003424:	018b      	lsls	r3, r1, #6
 8003426:	1a5b      	subs	r3, r3, r1
 8003428:	eb64 0402 	sbc.w	r4, r4, r2
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	00e2      	lsls	r2, r4, #3
 8003436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800343a:	00d9      	lsls	r1, r3, #3
 800343c:	460b      	mov	r3, r1
 800343e:	4614      	mov	r4, r2
 8003440:	195b      	adds	r3, r3, r5
 8003442:	eb44 0406 	adc.w	r4, r4, r6
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	02a2      	lsls	r2, r4, #10
 8003450:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003454:	0299      	lsls	r1, r3, #10
 8003456:	460b      	mov	r3, r1
 8003458:	4614      	mov	r4, r2
 800345a:	4618      	mov	r0, r3
 800345c:	4621      	mov	r1, r4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	461a      	mov	r2, r3
 8003466:	4623      	mov	r3, r4
 8003468:	f7fc ff42 	bl	80002f0 <__aeabi_uldivmod>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	3301      	adds	r3, #1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	60bb      	str	r3, [r7, #8]
      break;
 800348c:	e002      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003494:	68bb      	ldr	r3, [r7, #8]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	017d7840 	.word	0x017d7840

080034ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff0 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034cc:	4601      	mov	r1, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08014964 	.word	0x08014964

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffdc 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0b5b      	lsrs	r3, r3, #13
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08014964 	.word	0x08014964

08003514 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	220f      	movs	r2, #15
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_RCC_GetClockConfig+0x60>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40023c00 	.word	0x40023c00

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a68      	ldr	r2, [pc, #416]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	4964      	ldr	r1, [pc, #400]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d017      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	4959      	ldr	r1, [pc, #356]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360e:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003614:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	494a      	ldr	r1, [pc, #296]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 808b 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	6413      	str	r3, [r2, #64]	; 0x40
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003674:	4b35      	ldr	r3, [pc, #212]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a34      	ldr	r2, [pc, #208]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd fcba 	bl	8000ff8 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fd fcb6 	bl	8000ff8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e38d      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d035      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d02e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d114      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd fc7e 	bl	8000ff8 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fd fc7a 	bl	8000ff8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e34f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ee      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372e:	d111      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800373e:	400b      	ands	r3, r1
 8003740:	4901      	ldr	r1, [pc, #4]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
 8003750:	0ffffcff 	.word	0x0ffffcff
 8003754:	4bb3      	ldr	r3, [pc, #716]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4ab2      	ldr	r2, [pc, #712]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	4bb0      	ldr	r3, [pc, #704]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	49ad      	ldr	r1, [pc, #692]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376e:	4313      	orrs	r3, r2
 8003770:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800377e:	4ba9      	ldr	r3, [pc, #676]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003784:	4aa7      	ldr	r2, [pc, #668]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800378e:	4ba5      	ldr	r3, [pc, #660]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003790:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	49a2      	ldr	r1, [pc, #648]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ac:	4b9d      	ldr	r3, [pc, #628]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ba:	499a      	ldr	r1, [pc, #616]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ce:	4b95      	ldr	r3, [pc, #596]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037dc:	4991      	ldr	r1, [pc, #580]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f0:	4b8c      	ldr	r3, [pc, #560]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	4989      	ldr	r1, [pc, #548]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003812:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4980      	ldr	r1, [pc, #512]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003834:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f023 0203 	bic.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4978      	ldr	r1, [pc, #480]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003856:	4b73      	ldr	r3, [pc, #460]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f023 020c 	bic.w	r2, r3, #12
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	496f      	ldr	r1, [pc, #444]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003878:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4967      	ldr	r1, [pc, #412]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800389a:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	495e      	ldr	r1, [pc, #376]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	4956      	ldr	r1, [pc, #344]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038de:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003900:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	4945      	ldr	r1, [pc, #276]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003922:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	493c      	ldr	r1, [pc, #240]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003944:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003966:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	492b      	ldr	r1, [pc, #172]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b4:	491b      	ldr	r1, [pc, #108]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d8:	4912      	ldr	r1, [pc, #72]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	4985      	ldr	r1, [pc, #532]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a3c:	4b80      	ldr	r3, [pc, #512]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	497c      	ldr	r1, [pc, #496]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d005      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a62:	f040 80d6 	bne.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a66:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a75      	ldr	r2, [pc, #468]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fd fac1 	bl	8000ff8 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a7a:	f7fd fabd 	bl	8000ff8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d901      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e194      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aac:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aba:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	0e1b      	lsrs	r3, r3, #24
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	019a      	lsls	r2, r3, #6
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	071b      	lsls	r3, r3, #28
 8003ae0:	4957      	ldr	r1, [pc, #348]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02e      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d129      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b14:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b28:	0f1b      	lsrs	r3, r3, #28
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	019a      	lsls	r2, r3, #6
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	493d      	ldr	r1, [pc, #244]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b56:	f023 021f 	bic.w	r2, r3, #31
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4937      	ldr	r1, [pc, #220]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b74:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7a:	0e1b      	lsrs	r3, r3, #24
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b82:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b88:	0f1b      	lsrs	r3, r3, #28
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	019a      	lsls	r2, r3, #6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	071b      	lsls	r3, r3, #28
 8003ba8:	4925      	ldr	r1, [pc, #148]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d011      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	019a      	lsls	r2, r3, #6
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	071b      	lsls	r3, r3, #28
 8003bd8:	4919      	ldr	r1, [pc, #100]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fa04 	bl	8000ff8 <HAL_GetTick>
 8003bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bf4:	f7fd fa00 	bl	8000ff8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0d7      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 80cd 	bne.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c26:	f7fd f9e7 	bl	8000ff8 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c2e:	f7fd f9e3 	bl	8000ff8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d903      	bls.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0ba      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003c40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c44:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c50:	d0ed      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d02e      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d12a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c7a:	4b51      	ldr	r3, [pc, #324]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c88:	4b4d      	ldr	r3, [pc, #308]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	0f1b      	lsrs	r3, r3, #28
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	019a      	lsls	r2, r3, #6
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	4944      	ldr	r1, [pc, #272]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cb6:	4b42      	ldr	r3, [pc, #264]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	493d      	ldr	r1, [pc, #244]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d022      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce4:	d11d      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	0f1b      	lsrs	r3, r3, #28
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	019a      	lsls	r2, r3, #6
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	4929      	ldr	r1, [pc, #164]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	0e1b      	lsrs	r3, r3, #24
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	019a      	lsls	r2, r3, #6
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	071b      	lsls	r3, r3, #28
 8003d62:	4917      	ldr	r1, [pc, #92]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d8c:	f7fd f934 	bl	8000ff8 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d94:	f7fd f930 	bl	8000ff8 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e007      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db2:	d1ef      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e084      	b.n	8003ee0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f004 ffcd 	bl	8008d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e16:	d902      	bls.n	8003e1e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e002      	b.n	8003e24 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e2c:	d007      	beq.n	8003e3e <HAL_SPI_Init+0x7a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e4e:	d903      	bls.n	8003e58 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
 8003e56:	e002      	b.n	8003e5e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	ea42 0103 	orr.w	r1, r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0204 	and.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	ea42 0103 	orr.w	r1, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_TransmitReceive+0x26>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e1fb      	b.n	8004306 <HAL_SPI_TransmitReceive+0x41e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f16:	f7fd f86f 	bl	8000ff8 <HAL_GetTick>
 8003f1a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f22:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f32:	7efb      	ldrb	r3, [r7, #27]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d00e      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x6e>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3e:	d106      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x66>
 8003f48:	7efb      	ldrb	r3, [r7, #27]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d003      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f54:	e1cd      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x80>
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f6e:	e1c0      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d003      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2205      	movs	r2, #5
 8003f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	887a      	ldrh	r2, [r7, #2]
 8003faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc6:	d802      	bhi.n	8003fce <HAL_SPI_TransmitReceive+0xe6>
 8003fc8:	8a3b      	ldrh	r3, [r7, #16]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d908      	bls.n	8003fe0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	e007      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d007      	beq.n	800400e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004016:	d97c      	bls.n	8004112 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x13e>
 8004020:	8a7b      	ldrh	r3, [r7, #18]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d169      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404a:	e056      	b.n	80040fa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d11b      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1aa>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x1aa>
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b01      	cmp	r3, #1
 8004068:	d113      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d11c      	bne.n	80040da <HAL_SPI_TransmitReceive+0x1f2>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d6:	2301      	movs	r3, #1
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040da:	f7fc ff8d 	bl	8000ff8 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d807      	bhi.n	80040fa <HAL_SPI_TransmitReceive+0x212>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d003      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040f8:	e0fb      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1a3      	bne.n	800404c <HAL_SPI_TransmitReceive+0x164>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d19d      	bne.n	800404c <HAL_SPI_TransmitReceive+0x164>
 8004110:	e0df      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x23a>
 800411a:	8a7b      	ldrh	r3, [r7, #18]
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 80cb 	bne.w	80042b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d912      	bls.n	8004152 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b02      	subs	r3, #2
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004150:	e0b2      	b.n	80042b8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	7812      	ldrb	r2, [r2, #0]
 800415e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004178:	e09e      	b.n	80042b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d134      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x30a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02f      	beq.n	80041f2 <HAL_SPI_TransmitReceive+0x30a>
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	2b01      	cmp	r3, #1
 8004196:	d12c      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d912      	bls.n	80041c8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b02      	subs	r3, #2
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c6:	e012      	b.n	80041ee <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d148      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x3aa>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d042      	beq.n	8004292 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d923      	bls.n	8004260 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	b292      	uxth	r2, r2
 8004224:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b02      	subs	r3, #2
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d81f      	bhi.n	800428e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e016      	b.n	800428e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f103 020c 	add.w	r2, r3, #12
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004292:	f7fc feb1 	bl	8000ff8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	429a      	cmp	r2, r3
 80042a0:	d803      	bhi.n	80042aa <HAL_SPI_TransmitReceive+0x3c2>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d102      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x3c8>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042b6:	e01c      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f47f af5b 	bne.w	800417a <HAL_SPI_TransmitReceive+0x292>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f af54 	bne.w	800417a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fcd0 	bl	8004c7c <SPI_EndRxTxTransaction>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	661a      	str	r2, [r3, #96]	; 0x60
 80042ee:	e000      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80042f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004306:	4618      	mov	r0, r3
 8004308:	3728      	adds	r7, #40	; 0x28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_SPI_TransmitReceive_DMA+0x20>
 800432c:	2302      	movs	r3, #2
 800432e:	e16c      	b.n	800460a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800433e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004346:	7dbb      	ldrb	r3, [r7, #22]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d00d      	beq.n	8004368 <HAL_SPI_TransmitReceive_DMA+0x58>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004352:	d106      	bne.n	8004362 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_TransmitReceive_DMA+0x52>
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d002      	beq.n	8004368 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004366:	e14b      	b.n	8004600 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800437e:	e13f      	b.n	8004600 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b04      	cmp	r3, #4
 800438a:	d003      	beq.n	8004394 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2205      	movs	r2, #5
 8004390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	887a      	ldrh	r2, [r7, #2]
 80043aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	887a      	ldrh	r2, [r7, #2]
 80043be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80043dc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e6:	d908      	bls.n	80043fa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	e06f      	b.n	80044da <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004408:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d126      	bne.n	8004464 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004430:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004440:	e010      	b.n	8004464 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004450:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	d134      	bne.n	80044da <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800447e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004486:	b29b      	uxth	r3, r3
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80044b2:	e012      	b.n	80044da <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d108      	bne.n	80044f8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	4a49      	ldr	r2, [pc, #292]	; (8004618 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044f6:	e007      	b.n	8004508 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	4a46      	ldr	r2, [pc, #280]	; (8004620 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	4a45      	ldr	r2, [pc, #276]	; (8004624 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800450e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	2200      	movs	r2, #0
 8004516:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	4619      	mov	r1, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004530:	b29b      	uxth	r3, r3
 8004532:	f7fd fcc1 	bl	8001eb8 <HAL_DMA_Start_IT>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00c      	beq.n	8004556 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	f043 0210 	orr.w	r2, r3, #16
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004554:	e054      	b.n	8004600 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	2200      	movs	r2, #0
 8004574:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	2200      	movs	r2, #0
 800457c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	2200      	movs	r2, #0
 8004584:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4619      	mov	r1, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459c:	b29b      	uxth	r3, r3
 800459e:	f7fd fc8b 	bl	8001eb8 <HAL_DMA_Start_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f043 0210 	orr.w	r2, r3, #16
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80045c0:	e01e      	b.n	8004600 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d007      	beq.n	80045e0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0220 	orr.w	r2, r2, #32
 80045ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0202 	orr.w	r2, r2, #2
 80045fe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	0800497d 	.word	0x0800497d
 8004618:	08004865 	.word	0x08004865
 800461c:	08004999 	.word	0x08004999
 8004620:	080048eb 	.word	0x080048eb
 8004624:	080049b5 	.word	0x080049b5

08004628 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
    return;
 800466a:	e0d8      	b.n	800481e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_SPI_IRQHandler+0x66>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    return;
 800468c:	e0c7      	b.n	800481e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_SPI_IRQHandler+0x8c>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_IRQHandler+0x8c>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80b5 	beq.w	800481e <HAL_SPI_IRQHandler+0x1f6>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80ae 	beq.w	800481e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d023      	beq.n	8004716 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d011      	beq.n	80046fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e00b      	b.n	8004716 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]
        return;
 8004714:	e083      	b.n	800481e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d014      	beq.n	800474c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	f043 0208 	orr.w	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	2b00      	cmp	r3, #0
 8004778:	d050      	beq.n	800481c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004788:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_SPI_IRQHandler+0x17e>
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d034      	beq.n	8004810 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0203 	bic.w	r2, r2, #3
 80047b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d011      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_SPI_IRQHandler+0x1fc>)
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fc44 	bl	8002058 <HAL_DMA_Abort_IT>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_SPI_IRQHandler+0x1fc>)
 80047f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fd fc2e 	bl	8002058 <HAL_DMA_Abort_IT>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800480e:	e003      	b.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f004 f95f 	bl	8008ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004816:	e000      	b.n	800481a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004818:	bf00      	nop
    return;
 800481a:	bf00      	nop
 800481c:	bf00      	nop
  }
}
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	080049f5 	.word	0x080049f5

08004828 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004872:	f7fc fbc1 	bl	8000ff8 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d02a      	beq.n	80048de <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0220 	bic.w	r2, r2, #32
 8004896:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0203 	bic.w	r2, r2, #3
 80048a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f98d 	bl	8004bcc <SPI_EndRxTransaction>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f004 f8fc 	bl	8008ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80048dc:	e002      	b.n	80048e4 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff ffa2 	bl	8004828 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f8:	f7fc fb7e 	bl	8000ff8 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490c:	d030      	beq.n	8004970 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0220 	bic.w	r2, r2, #32
 800491c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f9aa 	bl	8004c7c <SPI_EndRxTxTransaction>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0203 	bic.w	r2, r2, #3
 8004948:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f004 f8b3 	bl	8008ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800496e:	e002      	b.n	8004976 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f004 f8a1 	bl	8008ab8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ff56 	bl	800483c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff52 	bl	8004850 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0203 	bic.w	r2, r2, #3
 80049d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	f043 0210 	orr.w	r2, r3, #16
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f004 f874 	bl	8008ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f004 f85f 	bl	8008ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2e:	e04c      	b.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d048      	beq.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a38:	f7fc fade 	bl	8000ff8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d902      	bls.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d13d      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d111      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a70:	d004      	beq.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d107      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a94:	d10f      	bne.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e00f      	b.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1a3      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b00:	e057      	b.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b08:	d106      	bne.n	8004b18 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d048      	beq.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b20:	f7fc fa6a 	bl	8000ff8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d902      	bls.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d13d      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4e:	d111      	bne.n	8004b74 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d004      	beq.n	8004b64 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d107      	bne.n	8004b74 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7c:	d10f      	bne.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e008      	b.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d19f      	bne.n	8004b02 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff ff04 	bl	8004a1e <SPI_WaitFlagStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e023      	b.n	8004c74 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c34:	d11d      	bne.n	8004c72 <SPI_EndRxTransaction+0xa6>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3e:	d004      	beq.n	8004c4a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c48:	d113      	bne.n	8004c72 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff4b 	bl	8004af2 <SPI_WaitFifoStateUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e000      	b.n	8004c74 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff2c 	bl	8004af2 <SPI_WaitFifoStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e027      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff feaf 	bl	8004a1e <SPI_WaitFlagStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e014      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ff05 	bl	8004af2 <SPI_WaitFifoStateUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e000      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e01d      	b.n	8004d56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f005 f904 	bl	8009f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 fc16 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_TIM_Base_Start_IT+0x50>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d00b      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x42>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	00010007 	.word	0x00010007

08004db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01d      	b.n	8004e02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f005 f966 	bl	800a0ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fbc0 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ff42 	bl	8005ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_TIM_PWM_Start+0x7c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x2c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <HAL_TIM_PWM_Start+0x80>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_PWM_Start+0x30>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_TIM_PWM_Start+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HAL_TIM_PWM_Start+0x84>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d00b      	beq.n	8004e7c <HAL_TIM_PWM_Start+0x70>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d007      	beq.n	8004e7c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40010400 	.word	0x40010400
 8004e90:	00010007 	.word	0x00010007

08004e94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fefe 	bl	8005ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_TIM_PWM_Stop+0xa8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_PWM_Stop+0x2c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_TIM_PWM_Stop+0xac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_PWM_Stop+0x30>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_PWM_Stop+0x32>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_TIM_PWM_Stop+0x66>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_PWM_Stop+0x66>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_TIM_PWM_Stop+0x96>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	f240 4344 	movw	r3, #1092	; 0x444
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_PWM_Stop+0x96>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0202 	mvn.w	r2, #2
 8004f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fad8 	bl	800553c <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 faca 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fadb 	bl	8005550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0204 	mvn.w	r2, #4
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 faae 	bl	800553c <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 faa0 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fab1 	bl	8005550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa84 	bl	800553c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa76 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa87 	bl	8005550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa5a 	bl	800553c <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa4c 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa5d 	bl	8005550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0201 	mvn.w	r2, #1
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f003 fd58 	bl	8008b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 ff16 	bl	8005f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 ff09 	bl	8005f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d10e      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d107      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa0b 	bl	8005564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b20      	cmp	r3, #32
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fec9 	bl	8005f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800519a:	2302      	movs	r3, #2
 800519c:	e105      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x226>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b14      	cmp	r3, #20
 80051b2:	f200 80f0 	bhi.w	8005396 <HAL_TIM_PWM_ConfigChannel+0x212>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	08005211 	.word	0x08005211
 80051c0:	08005397 	.word	0x08005397
 80051c4:	08005397 	.word	0x08005397
 80051c8:	08005397 	.word	0x08005397
 80051cc:	08005251 	.word	0x08005251
 80051d0:	08005397 	.word	0x08005397
 80051d4:	08005397 	.word	0x08005397
 80051d8:	08005397 	.word	0x08005397
 80051dc:	08005293 	.word	0x08005293
 80051e0:	08005397 	.word	0x08005397
 80051e4:	08005397 	.word	0x08005397
 80051e8:	08005397 	.word	0x08005397
 80051ec:	080052d3 	.word	0x080052d3
 80051f0:	08005397 	.word	0x08005397
 80051f4:	08005397 	.word	0x08005397
 80051f8:	08005397 	.word	0x08005397
 80051fc:	08005315 	.word	0x08005315
 8005200:	08005397 	.word	0x08005397
 8005204:	08005397 	.word	0x08005397
 8005208:	08005397 	.word	0x08005397
 800520c:	08005355 	.word	0x08005355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fa4e 	bl	80056b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	619a      	str	r2, [r3, #24]
      break;
 800524e:	e0a3      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 faa0 	bl	800579c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6999      	ldr	r1, [r3, #24]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	619a      	str	r2, [r3, #24]
      break;
 8005290:	e082      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 faf7 	bl	800588c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0208 	orr.w	r2, r2, #8
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0204 	bic.w	r2, r2, #4
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	61da      	str	r2, [r3, #28]
      break;
 80052d0:	e062      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fb4d 	bl	8005978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69d9      	ldr	r1, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	021a      	lsls	r2, r3, #8
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	61da      	str	r2, [r3, #28]
      break;
 8005312:	e041      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fb84 	bl	8005a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0204 	bic.w	r2, r2, #4
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005352:	e021      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fbb6 	bl	8005acc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005394:	e000      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005396:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop

080053b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIM_ConfigClockSource+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e0a6      	b.n	800551a <HAL_TIM_ConfigClockSource+0x166>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4b4f      	ldr	r3, [pc, #316]	; (8005524 <HAL_TIM_ConfigClockSource+0x170>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d067      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0x120>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d80b      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x6c>
 8005408:	2b10      	cmp	r3, #16
 800540a:	d073      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x140>
 800540c:	2b10      	cmp	r3, #16
 800540e:	d802      	bhi.n	8005416 <HAL_TIM_ConfigClockSource+0x62>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d06f      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005414:	e078      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005416:	2b20      	cmp	r3, #32
 8005418:	d06c      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x140>
 800541a:	2b30      	cmp	r3, #48	; 0x30
 800541c:	d06a      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800541e:	e073      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005420:	2b70      	cmp	r3, #112	; 0x70
 8005422:	d00d      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x8c>
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d804      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x7e>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d033      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xe0>
 800542c:	2b60      	cmp	r3, #96	; 0x60
 800542e:	d041      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005430:	e06a      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d066      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x152>
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543c:	d017      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800543e:	e063      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f000 fc0a 	bl	8005c68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005462:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	609a      	str	r2, [r3, #8]
      break;
 800546c:	e04c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6899      	ldr	r1, [r3, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f000 fbf3 	bl	8005c68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005490:	609a      	str	r2, [r3, #8]
      break;
 8005492:	e039      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	461a      	mov	r2, r3
 80054a2:	f000 fb67 	bl	8005b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2150      	movs	r1, #80	; 0x50
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fbc0 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80054b2:	e029      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6859      	ldr	r1, [r3, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f000 fb86 	bl	8005bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2160      	movs	r1, #96	; 0x60
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fbb0 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80054d2:	e019      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f000 fb47 	bl	8005b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fba0 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80054f2:	e009      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f000 fb97 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	fffeff88 	.word	0xfffeff88

08005528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a40      	ldr	r2, [pc, #256]	; (800568c <TIM_Base_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d00f      	beq.n	80055b8 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3d      	ldr	r2, [pc, #244]	; (8005690 <TIM_Base_SetConfig+0x118>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3c      	ldr	r2, [pc, #240]	; (8005694 <TIM_Base_SetConfig+0x11c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3b      	ldr	r2, [pc, #236]	; (8005698 <TIM_Base_SetConfig+0x120>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3a      	ldr	r2, [pc, #232]	; (800569c <TIM_Base_SetConfig+0x124>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d108      	bne.n	80055ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2f      	ldr	r2, [pc, #188]	; (800568c <TIM_Base_SetConfig+0x114>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d02b      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d027      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <TIM_Base_SetConfig+0x118>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d023      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <TIM_Base_SetConfig+0x11c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01f      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <TIM_Base_SetConfig+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01b      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a29      	ldr	r2, [pc, #164]	; (800569c <TIM_Base_SetConfig+0x124>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d017      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <TIM_Base_SetConfig+0x128>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <TIM_Base_SetConfig+0x12c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00f      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <TIM_Base_SetConfig+0x130>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <TIM_Base_SetConfig+0x134>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <TIM_Base_SetConfig+0x138>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <TIM_Base_SetConfig+0x13c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <TIM_Base_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0xf8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a0c      	ldr	r2, [pc, #48]	; (800569c <TIM_Base_SetConfig+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d103      	bne.n	8005678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	615a      	str	r2, [r3, #20]
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40010400 	.word	0x40010400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800
 80056ac:	40001800 	.word	0x40001800
 80056b0:	40001c00 	.word	0x40001c00
 80056b4:	40002000 	.word	0x40002000

080056b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <TIM_OC1_SetConfig+0xd8>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0302 	bic.w	r3, r3, #2
 8005700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <TIM_OC1_SetConfig+0xdc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC1_SetConfig+0x64>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a20      	ldr	r2, [pc, #128]	; (8005798 <TIM_OC1_SetConfig+0xe0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10c      	bne.n	8005736 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0308 	bic.w	r3, r3, #8
 8005722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a16      	ldr	r2, [pc, #88]	; (8005794 <TIM_OC1_SetConfig+0xdc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC1_SetConfig+0x8e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <TIM_OC1_SetConfig+0xe0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d111      	bne.n	800576a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	fffeff8f 	.word	0xfffeff8f
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0210 	bic.w	r2, r3, #16
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <TIM_OC2_SetConfig+0xe4>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0320 	bic.w	r3, r3, #32
 80057e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a23      	ldr	r2, [pc, #140]	; (8005884 <TIM_OC2_SetConfig+0xe8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC2_SetConfig+0x68>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a22      	ldr	r2, [pc, #136]	; (8005888 <TIM_OC2_SetConfig+0xec>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10d      	bne.n	8005820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC2_SetConfig+0xe8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC2_SetConfig+0x94>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC2_SetConfig+0xec>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d113      	bne.n	8005858 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	feff8fff 	.word	0xfeff8fff
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400

0800588c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4b2d      	ldr	r3, [pc, #180]	; (800596c <TIM_OC3_SetConfig+0xe0>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a22      	ldr	r2, [pc, #136]	; (8005970 <TIM_OC3_SetConfig+0xe4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC3_SetConfig+0x66>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <TIM_OC3_SetConfig+0xe8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10d      	bne.n	800590e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a17      	ldr	r2, [pc, #92]	; (8005970 <TIM_OC3_SetConfig+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC3_SetConfig+0x92>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <TIM_OC3_SetConfig+0xe8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d113      	bne.n	8005946 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	fffeff8f 	.word	0xfffeff8f
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400

08005978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <TIM_OC4_SetConfig+0xa4>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <TIM_OC4_SetConfig+0xa8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC4_SetConfig+0x68>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <TIM_OC4_SetConfig+0xac>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	feff8fff 	.word	0xfeff8fff
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <TIM_OC5_SetConfig+0x98>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <TIM_OC5_SetConfig+0x9c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_OC5_SetConfig+0x5e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <TIM_OC5_SetConfig+0xa0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d109      	bne.n	8005a9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	fffeff8f 	.word	0xfffeff8f
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400

08005acc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <TIM_OC6_SetConfig+0x9c>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <TIM_OC6_SetConfig+0xa0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x60>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a12      	ldr	r2, [pc, #72]	; (8005b70 <TIM_OC6_SetConfig+0xa4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	feff8fff 	.word	0xfeff8fff
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 030a 	bic.w	r3, r3, #10
 8005bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b087      	sub	sp, #28
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0210 	bic.w	r2, r3, #16
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	031b      	lsls	r3, r3, #12
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f043 0307 	orr.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e06d      	b.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a30      	ldr	r2, [pc, #192]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a20      	ldr	r2, [pc, #128]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d022      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7e:	d01d      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d013      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10c      	bne.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40001800 	.word	0x40001800

08005e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e065      	b.n	8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d115      	bne.n	8005ee6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	051b      	lsls	r3, r3, #20
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400

08005f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e040      	b.n	8005fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f004 fb04 	bl	800a578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 faa4 	bl	80064d4 <UART_SetConfig>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e022      	b.n	8005fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fd42 	bl	8006a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fdc9 	bl	8006b6c <UART_CheckIdleState>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d164      	bne.n	80060c4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_UART_Transmit_DMA+0x22>
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e05d      	b.n	80060c6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_UART_Transmit_DMA+0x34>
 8006014:	2302      	movs	r3, #2
 8006016:	e056      	b.n	80060c6 <HAL_UART_Transmit_DMA+0xe2>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2221      	movs	r2, #33	; 0x21
 8006040:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02a      	beq.n	80060a0 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604e:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <HAL_UART_Transmit_DMA+0xec>)
 8006050:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_UART_Transmit_DMA+0xf0>)
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <HAL_UART_Transmit_DMA+0xf4>)
 8006060:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006066:	2200      	movs	r2, #0
 8006068:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	4619      	mov	r1, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3328      	adds	r3, #40	; 0x28
 800607a:	461a      	mov	r2, r3
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	f7fb ff1b 	bl	8001eb8 <HAL_DMA_Start_IT>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2210      	movs	r2, #16
 800608c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e012      	b.n	80060c6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060be:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e000      	b.n	80060c6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08006d57 	.word	0x08006d57
 80060d4:	08006da7 	.word	0x08006da7
 80060d8:	08006e43 	.word	0x08006e43

080060dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d16c      	bne.n	80061cc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_Receive_DMA+0x22>
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e065      	b.n	80061ce <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_UART_Receive_DMA+0x34>
 800610c:	2302      	movs	r3, #2
 800610e:	e05e      	b.n	80061ce <HAL_UART_Receive_DMA+0xf2>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2222      	movs	r2, #34	; 0x22
 8006130:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02a      	beq.n	8006190 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_UART_Receive_DMA+0xfc>)
 8006140:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006146:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_UART_Receive_DMA+0x100>)
 8006148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614e:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <HAL_UART_Receive_DMA+0x104>)
 8006150:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	2200      	movs	r2, #0
 8006158:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	4619      	mov	r1, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	461a      	mov	r2, r3
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	f7fb fea3 	bl	8001eb8 <HAL_DMA_Start_IT>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2210      	movs	r2, #16
 800617c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e01e      	b.n	80061ce <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
  }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	08006dc3 	.word	0x08006dc3
 80061dc:	08006e27 	.word	0x08006e27
 80061e0:	08006e43 	.word	0x08006e43

080061e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	f640 030f 	movw	r3, #2063	; 0x80f
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d113      	bne.n	800623c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00e      	beq.n	800623c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8114 	beq.w	800645a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
      }
      return;
 800623a:	e10e      	b.n	800645a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80d6 	beq.w	80063f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80cb 	beq.w	80063f0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <HAL_UART_IRQHandler+0x9e>
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <HAL_UART_IRQHandler+0xc6>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2202      	movs	r2, #2
 800629c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <HAL_UART_IRQHandler+0xee>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2204      	movs	r2, #4
 80062c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ca:	f043 0202 	orr.w	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d013      	beq.n	8006304 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2208      	movs	r2, #8
 80062f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fc:	f043 0208 	orr.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00f      	beq.n	800632e <HAL_UART_IRQHandler+0x14a>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006326:	f043 0220 	orr.w	r2, r3, #32
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8093 	beq.w	800645e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006360:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d004      	beq.n	800637a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006376:	2b00      	cmp	r3, #0
 8006378:	d031      	beq.n	80063de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fccb 	bl	8006d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d123      	bne.n	80063d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d013      	beq.n	80063ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063aa:	4a30      	ldr	r2, [pc, #192]	; (800646c <HAL_UART_IRQHandler+0x288>)
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb fe50 	bl	8002058 <HAL_DMA_Abort_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e00e      	b.n	80063ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f86c 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	e00a      	b.n	80063ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f868 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	e006      	b.n	80063ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f864 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80063ea:	e038      	b.n	800645e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	bf00      	nop
    return;
 80063ee:	e036      	b.n	800645e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <HAL_UART_IRQHandler+0x232>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800640c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f856 	bl	80064c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006414:	e026      	b.n	8006464 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
    }
    return;
 800643a:	e012      	b.n	8006462 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <HAL_UART_IRQHandler+0x280>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fd48 	bl	8006ee6 <UART_EndTransmit_IT>
    return;
 8006456:	bf00      	nop
 8006458:	e004      	b.n	8006464 <HAL_UART_IRQHandler+0x280>
      return;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <HAL_UART_IRQHandler+0x280>
    return;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_UART_IRQHandler+0x280>
    return;
 8006462:	bf00      	nop
  }

}
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	08006ebb 	.word	0x08006ebb

08006470 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80064dc:	2300      	movs	r3, #0
 80064de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4bb1      	ldr	r3, [pc, #708]	; (80067c8 <UART_SetConfig+0x2f4>)
 8006504:	4013      	ands	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	430b      	orrs	r3, r1
 800650e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a9f      	ldr	r2, [pc, #636]	; (80067cc <UART_SetConfig+0x2f8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d121      	bne.n	8006598 <UART_SetConfig+0xc4>
 8006554:	4b9e      	ldr	r3, [pc, #632]	; (80067d0 <UART_SetConfig+0x2fc>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d816      	bhi.n	8006590 <UART_SetConfig+0xbc>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x94>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006579 	.word	0x08006579
 800656c:	08006585 	.word	0x08006585
 8006570:	0800657f 	.word	0x0800657f
 8006574:	0800658b 	.word	0x0800658b
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e151      	b.n	8006822 <UART_SetConfig+0x34e>
 800657e:	2302      	movs	r3, #2
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e14e      	b.n	8006822 <UART_SetConfig+0x34e>
 8006584:	2304      	movs	r3, #4
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e14b      	b.n	8006822 <UART_SetConfig+0x34e>
 800658a:	2308      	movs	r3, #8
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e148      	b.n	8006822 <UART_SetConfig+0x34e>
 8006590:	2310      	movs	r3, #16
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	bf00      	nop
 8006596:	e144      	b.n	8006822 <UART_SetConfig+0x34e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a8d      	ldr	r2, [pc, #564]	; (80067d4 <UART_SetConfig+0x300>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d134      	bne.n	800660c <UART_SetConfig+0x138>
 80065a2:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <UART_SetConfig+0x2fc>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	f003 030c 	and.w	r3, r3, #12
 80065ac:	2b0c      	cmp	r3, #12
 80065ae:	d829      	bhi.n	8006604 <UART_SetConfig+0x130>
 80065b0:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <UART_SetConfig+0xe4>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	08006605 	.word	0x08006605
 80065c0:	08006605 	.word	0x08006605
 80065c4:	08006605 	.word	0x08006605
 80065c8:	080065f9 	.word	0x080065f9
 80065cc:	08006605 	.word	0x08006605
 80065d0:	08006605 	.word	0x08006605
 80065d4:	08006605 	.word	0x08006605
 80065d8:	080065f3 	.word	0x080065f3
 80065dc:	08006605 	.word	0x08006605
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006605 	.word	0x08006605
 80065e8:	080065ff 	.word	0x080065ff
 80065ec:	2300      	movs	r3, #0
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e117      	b.n	8006822 <UART_SetConfig+0x34e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e114      	b.n	8006822 <UART_SetConfig+0x34e>
 80065f8:	2304      	movs	r3, #4
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e111      	b.n	8006822 <UART_SetConfig+0x34e>
 80065fe:	2308      	movs	r3, #8
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e10e      	b.n	8006822 <UART_SetConfig+0x34e>
 8006604:	2310      	movs	r3, #16
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	bf00      	nop
 800660a:	e10a      	b.n	8006822 <UART_SetConfig+0x34e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a71      	ldr	r2, [pc, #452]	; (80067d8 <UART_SetConfig+0x304>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d120      	bne.n	8006658 <UART_SetConfig+0x184>
 8006616:	4b6e      	ldr	r3, [pc, #440]	; (80067d0 <UART_SetConfig+0x2fc>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006620:	2b10      	cmp	r3, #16
 8006622:	d00f      	beq.n	8006644 <UART_SetConfig+0x170>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d802      	bhi.n	800662e <UART_SetConfig+0x15a>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <UART_SetConfig+0x164>
 800662c:	e010      	b.n	8006650 <UART_SetConfig+0x17c>
 800662e:	2b20      	cmp	r3, #32
 8006630:	d005      	beq.n	800663e <UART_SetConfig+0x16a>
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d009      	beq.n	800664a <UART_SetConfig+0x176>
 8006636:	e00b      	b.n	8006650 <UART_SetConfig+0x17c>
 8006638:	2300      	movs	r3, #0
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e0f1      	b.n	8006822 <UART_SetConfig+0x34e>
 800663e:	2302      	movs	r3, #2
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e0ee      	b.n	8006822 <UART_SetConfig+0x34e>
 8006644:	2304      	movs	r3, #4
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e0eb      	b.n	8006822 <UART_SetConfig+0x34e>
 800664a:	2308      	movs	r3, #8
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e0e8      	b.n	8006822 <UART_SetConfig+0x34e>
 8006650:	2310      	movs	r3, #16
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	bf00      	nop
 8006656:	e0e4      	b.n	8006822 <UART_SetConfig+0x34e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5f      	ldr	r2, [pc, #380]	; (80067dc <UART_SetConfig+0x308>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d120      	bne.n	80066a4 <UART_SetConfig+0x1d0>
 8006662:	4b5b      	ldr	r3, [pc, #364]	; (80067d0 <UART_SetConfig+0x2fc>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d00f      	beq.n	8006690 <UART_SetConfig+0x1bc>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d802      	bhi.n	800667a <UART_SetConfig+0x1a6>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <UART_SetConfig+0x1b0>
 8006678:	e010      	b.n	800669c <UART_SetConfig+0x1c8>
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d005      	beq.n	800668a <UART_SetConfig+0x1b6>
 800667e:	2bc0      	cmp	r3, #192	; 0xc0
 8006680:	d009      	beq.n	8006696 <UART_SetConfig+0x1c2>
 8006682:	e00b      	b.n	800669c <UART_SetConfig+0x1c8>
 8006684:	2300      	movs	r3, #0
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e0cb      	b.n	8006822 <UART_SetConfig+0x34e>
 800668a:	2302      	movs	r3, #2
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e0c8      	b.n	8006822 <UART_SetConfig+0x34e>
 8006690:	2304      	movs	r3, #4
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e0c5      	b.n	8006822 <UART_SetConfig+0x34e>
 8006696:	2308      	movs	r3, #8
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e0c2      	b.n	8006822 <UART_SetConfig+0x34e>
 800669c:	2310      	movs	r3, #16
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	bf00      	nop
 80066a2:	e0be      	b.n	8006822 <UART_SetConfig+0x34e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a4d      	ldr	r2, [pc, #308]	; (80067e0 <UART_SetConfig+0x30c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d124      	bne.n	80066f8 <UART_SetConfig+0x224>
 80066ae:	4b48      	ldr	r3, [pc, #288]	; (80067d0 <UART_SetConfig+0x2fc>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066bc:	d012      	beq.n	80066e4 <UART_SetConfig+0x210>
 80066be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c2:	d802      	bhi.n	80066ca <UART_SetConfig+0x1f6>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <UART_SetConfig+0x204>
 80066c8:	e012      	b.n	80066f0 <UART_SetConfig+0x21c>
 80066ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ce:	d006      	beq.n	80066de <UART_SetConfig+0x20a>
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d4:	d009      	beq.n	80066ea <UART_SetConfig+0x216>
 80066d6:	e00b      	b.n	80066f0 <UART_SetConfig+0x21c>
 80066d8:	2300      	movs	r3, #0
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e0a1      	b.n	8006822 <UART_SetConfig+0x34e>
 80066de:	2302      	movs	r3, #2
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e09e      	b.n	8006822 <UART_SetConfig+0x34e>
 80066e4:	2304      	movs	r3, #4
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e09b      	b.n	8006822 <UART_SetConfig+0x34e>
 80066ea:	2308      	movs	r3, #8
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e098      	b.n	8006822 <UART_SetConfig+0x34e>
 80066f0:	2310      	movs	r3, #16
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	bf00      	nop
 80066f6:	e094      	b.n	8006822 <UART_SetConfig+0x34e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a39      	ldr	r2, [pc, #228]	; (80067e4 <UART_SetConfig+0x310>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d124      	bne.n	800674c <UART_SetConfig+0x278>
 8006702:	4b33      	ldr	r3, [pc, #204]	; (80067d0 <UART_SetConfig+0x2fc>)
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d012      	beq.n	8006738 <UART_SetConfig+0x264>
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006716:	d802      	bhi.n	800671e <UART_SetConfig+0x24a>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <UART_SetConfig+0x258>
 800671c:	e012      	b.n	8006744 <UART_SetConfig+0x270>
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006722:	d006      	beq.n	8006732 <UART_SetConfig+0x25e>
 8006724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006728:	d009      	beq.n	800673e <UART_SetConfig+0x26a>
 800672a:	e00b      	b.n	8006744 <UART_SetConfig+0x270>
 800672c:	2301      	movs	r3, #1
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e077      	b.n	8006822 <UART_SetConfig+0x34e>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e074      	b.n	8006822 <UART_SetConfig+0x34e>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e071      	b.n	8006822 <UART_SetConfig+0x34e>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e06e      	b.n	8006822 <UART_SetConfig+0x34e>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	bf00      	nop
 800674a:	e06a      	b.n	8006822 <UART_SetConfig+0x34e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <UART_SetConfig+0x314>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d124      	bne.n	80067a0 <UART_SetConfig+0x2cc>
 8006756:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <UART_SetConfig+0x2fc>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006764:	d012      	beq.n	800678c <UART_SetConfig+0x2b8>
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d802      	bhi.n	8006772 <UART_SetConfig+0x29e>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <UART_SetConfig+0x2ac>
 8006770:	e012      	b.n	8006798 <UART_SetConfig+0x2c4>
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006776:	d006      	beq.n	8006786 <UART_SetConfig+0x2b2>
 8006778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677c:	d009      	beq.n	8006792 <UART_SetConfig+0x2be>
 800677e:	e00b      	b.n	8006798 <UART_SetConfig+0x2c4>
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e04d      	b.n	8006822 <UART_SetConfig+0x34e>
 8006786:	2302      	movs	r3, #2
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e04a      	b.n	8006822 <UART_SetConfig+0x34e>
 800678c:	2304      	movs	r3, #4
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e047      	b.n	8006822 <UART_SetConfig+0x34e>
 8006792:	2308      	movs	r3, #8
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e044      	b.n	8006822 <UART_SetConfig+0x34e>
 8006798:	2310      	movs	r3, #16
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	bf00      	nop
 800679e:	e040      	b.n	8006822 <UART_SetConfig+0x34e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a11      	ldr	r2, [pc, #68]	; (80067ec <UART_SetConfig+0x318>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d139      	bne.n	800681e <UART_SetConfig+0x34a>
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <UART_SetConfig+0x2fc>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b8:	d027      	beq.n	800680a <UART_SetConfig+0x336>
 80067ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067be:	d817      	bhi.n	80067f0 <UART_SetConfig+0x31c>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01c      	beq.n	80067fe <UART_SetConfig+0x32a>
 80067c4:	e027      	b.n	8006816 <UART_SetConfig+0x342>
 80067c6:	bf00      	nop
 80067c8:	efff69f3 	.word	0xefff69f3
 80067cc:	40011000 	.word	0x40011000
 80067d0:	40023800 	.word	0x40023800
 80067d4:	40004400 	.word	0x40004400
 80067d8:	40004800 	.word	0x40004800
 80067dc:	40004c00 	.word	0x40004c00
 80067e0:	40005000 	.word	0x40005000
 80067e4:	40011400 	.word	0x40011400
 80067e8:	40007800 	.word	0x40007800
 80067ec:	40007c00 	.word	0x40007c00
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f4:	d006      	beq.n	8006804 <UART_SetConfig+0x330>
 80067f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067fa:	d009      	beq.n	8006810 <UART_SetConfig+0x33c>
 80067fc:	e00b      	b.n	8006816 <UART_SetConfig+0x342>
 80067fe:	2300      	movs	r3, #0
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e00e      	b.n	8006822 <UART_SetConfig+0x34e>
 8006804:	2302      	movs	r3, #2
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e00b      	b.n	8006822 <UART_SetConfig+0x34e>
 800680a:	2304      	movs	r3, #4
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e008      	b.n	8006822 <UART_SetConfig+0x34e>
 8006810:	2308      	movs	r3, #8
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e005      	b.n	8006822 <UART_SetConfig+0x34e>
 8006816:	2310      	movs	r3, #16
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	bf00      	nop
 800681c:	e001      	b.n	8006822 <UART_SetConfig+0x34e>
 800681e:	2310      	movs	r3, #16
 8006820:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682a:	d17f      	bne.n	800692c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800682c:	7ffb      	ldrb	r3, [r7, #31]
 800682e:	2b08      	cmp	r3, #8
 8006830:	d85c      	bhi.n	80068ec <UART_SetConfig+0x418>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <UART_SetConfig+0x364>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800685d 	.word	0x0800685d
 800683c:	0800687d 	.word	0x0800687d
 8006840:	0800689d 	.word	0x0800689d
 8006844:	080068ed 	.word	0x080068ed
 8006848:	080068b5 	.word	0x080068b5
 800684c:	080068ed 	.word	0x080068ed
 8006850:	080068ed 	.word	0x080068ed
 8006854:	080068ed 	.word	0x080068ed
 8006858:	080068d5 	.word	0x080068d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fc fe32 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8006860:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	005a      	lsls	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	441a      	add	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	fbb2 f3f3 	udiv	r3, r2, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	61bb      	str	r3, [r7, #24]
        break;
 800687a:	e03a      	b.n	80068f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7fc fe36 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8006880:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	005a      	lsls	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	61bb      	str	r3, [r7, #24]
        break;
 800689a:	e02a      	b.n	80068f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	085a      	lsrs	r2, r3, #1
 80068a2:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <UART_SetConfig+0x54c>)
 80068a4:	4413      	add	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6852      	ldr	r2, [r2, #4]
 80068aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	61bb      	str	r3, [r7, #24]
        break;
 80068b2:	e01e      	b.n	80068f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b4:	f7fc fd48 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 80068b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	005a      	lsls	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	61bb      	str	r3, [r7, #24]
        break;
 80068d2:	e00e      	b.n	80068f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	085b      	lsrs	r3, r3, #1
 80068da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	61bb      	str	r3, [r7, #24]
        break;
 80068ea:	e002      	b.n	80068f2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
        break;
 80068f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b0f      	cmp	r3, #15
 80068f6:	d916      	bls.n	8006926 <UART_SetConfig+0x452>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fe:	d212      	bcs.n	8006926 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f023 030f 	bic.w	r3, r3, #15
 8006908:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	b29b      	uxth	r3, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	b29a      	uxth	r2, r3
 8006916:	897b      	ldrh	r3, [r7, #10]
 8006918:	4313      	orrs	r3, r2
 800691a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	897a      	ldrh	r2, [r7, #10]
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	e070      	b.n	8006a08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
 800692a:	e06d      	b.n	8006a08 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800692c:	7ffb      	ldrb	r3, [r7, #31]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d859      	bhi.n	80069e6 <UART_SetConfig+0x512>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x464>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800695d 	.word	0x0800695d
 800693c:	0800697b 	.word	0x0800697b
 8006940:	08006999 	.word	0x08006999
 8006944:	080069e7 	.word	0x080069e7
 8006948:	080069b1 	.word	0x080069b1
 800694c:	080069e7 	.word	0x080069e7
 8006950:	080069e7 	.word	0x080069e7
 8006954:	080069e7 	.word	0x080069e7
 8006958:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fc fdb2 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8006960:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	085a      	lsrs	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	441a      	add	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	b29b      	uxth	r3, r3
 8006976:	61bb      	str	r3, [r7, #24]
        break;
 8006978:	e038      	b.n	80069ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697a:	f7fc fdb7 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 800697e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	085a      	lsrs	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	61bb      	str	r3, [r7, #24]
        break;
 8006996:	e029      	b.n	80069ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	085a      	lsrs	r2, r3, #1
 800699e:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <UART_SetConfig+0x550>)
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6852      	ldr	r2, [r2, #4]
 80069a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	61bb      	str	r3, [r7, #24]
        break;
 80069ae:	e01d      	b.n	80069ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b0:	f7fc fcca 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 80069b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	085a      	lsrs	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	441a      	add	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	61bb      	str	r3, [r7, #24]
        break;
 80069cc:	e00e      	b.n	80069ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	61bb      	str	r3, [r7, #24]
        break;
 80069e4:	e002      	b.n	80069ec <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	75fb      	strb	r3, [r7, #23]
        break;
 80069ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	d908      	bls.n	8006a04 <UART_SetConfig+0x530>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f8:	d204      	bcs.n	8006a04 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e001      	b.n	8006a08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	01e84800 	.word	0x01e84800
 8006a24:	00f42400 	.word	0x00f42400

08006a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01a      	beq.n	8006b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b26:	d10a      	bne.n	8006b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  }
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006b7a:	f7fa fa3d 	bl	8000ff8 <HAL_GetTick>
 8006b7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d10e      	bne.n	8006bac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f82a 	bl	8006bf6 <UART_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e020      	b.n	8006bee <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d10e      	bne.n	8006bd8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f814 	bl	8006bf6 <UART_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e00a      	b.n	8006bee <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c06:	e05d      	b.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d059      	beq.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c10:	f7fa f9f2 	bl	8000ff8 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d302      	bcc.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11b      	bne.n	8006c5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e042      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d02b      	beq.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7a:	d123      	bne.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e00f      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d092      	beq.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d02:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d2c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6c:	d014      	beq.n	8006d98 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d84:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d96:	e002      	b.n	8006d9e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f006 fd15 	bl	800d7c8 <HAL_UART_TxCpltCallback>
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fb5b 	bl	8006470 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd8:	d01e      	beq.n	8006e18 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff fb33 	bl	8006484 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff fb2f 	bl	8006498 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d109      	bne.n	8006e7e <UART_DMAError+0x3c>
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b21      	cmp	r3, #33	; 0x21
 8006e6e:	d106      	bne.n	8006e7e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006e78:	6978      	ldr	r0, [r7, #20]
 8006e7a:	f7ff ff37 	bl	8006cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d109      	bne.n	8006ea0 <UART_DMAError+0x5e>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b22      	cmp	r3, #34	; 0x22
 8006e90:	d106      	bne.n	8006ea0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f7ff ff3b 	bl	8006d16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea4:	f043 0210 	orr.w	r2, r3, #16
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eac:	6978      	ldr	r0, [r7, #20]
 8006eae:	f7ff fafd 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fae7 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f006 fc5c 	bl	800d7c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2a:	2b84      	cmp	r3, #132	; 0x84
 8006f2c:	d005      	beq.n	8006f3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	3303      	adds	r3, #3
 8006f38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f4c:	f000 fab6 	bl	80074bc <vTaskStartScheduler>
  
  return osOK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f58:	b089      	sub	sp, #36	; 0x24
 8006f5a:	af04      	add	r7, sp, #16
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685c      	ldr	r4, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681d      	ldr	r5, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691e      	ldr	r6, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ffd0 	bl	8006f18 <makeFreeRtosPriority>
 8006f78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f82:	9202      	str	r2, [sp, #8]
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	9100      	str	r1, [sp, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4632      	mov	r2, r6
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f000 f8c5 	bl	800711e <xTaskCreateStatic>
 8006f94:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fa0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006fa4:	f000 fd6c 	bl	8007a80 <xTaskGetSchedulerState>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006fae:	f000 ff83 	bl	8007eb8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 0208 	add.w	r2, r3, #8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f103 0208 	add.w	r2, r3, #8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f103 0208 	add.w	r2, r3, #8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d103      	bne.n	8007078 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	e00c      	b.n	8007092 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3308      	adds	r3, #8
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e002      	b.n	8007086 <vListInsert+0x2e>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d2f6      	bcs.n	8007080 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6892      	ldr	r2, [r2, #8]
 80070e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6852      	ldr	r2, [r2, #4]
 80070ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d103      	bne.n	80070fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	1e5a      	subs	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800711e:	b580      	push	{r7, lr}
 8007120:	b08e      	sub	sp, #56	; 0x38
 8007122:	af04      	add	r7, sp, #16
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	b672      	cpsid	i
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	b662      	cpsie	i
 8007146:	623b      	str	r3, [r7, #32]
 8007148:	e7fe      	b.n	8007148 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <xTaskCreateStatic+0x4a>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e7fe      	b.n	8007166 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007168:	2354      	movs	r3, #84	; 0x54
 800716a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b54      	cmp	r3, #84	; 0x54
 8007170:	d00b      	beq.n	800718a <xTaskCreateStatic+0x6c>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e7fe      	b.n	8007188 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800718a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01a      	beq.n	80071c8 <xTaskCreateStatic+0xaa>
 8007192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a2:	2300      	movs	r3, #0
 80071a4:	9303      	str	r3, [sp, #12]
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f80b 	bl	80071d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071c2:	f000 f891 	bl	80072e8 <prvAddNewTaskToReadyList>
 80071c6:	e001      	b.n	80071cc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071cc:	697b      	ldr	r3, [r7, #20]
	}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3728      	adds	r7, #40	; 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b088      	sub	sp, #32
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80071ee:	440b      	add	r3, r1
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f023 0307 	bic.w	r3, r3, #7
 80071fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <prvInitialiseNewTask+0x4a>
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	b672      	cpsid	i
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	b662      	cpsie	i
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e7fe      	b.n	800721e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01f      	beq.n	8007266 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e012      	b.n	8007252 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	7819      	ldrb	r1, [r3, #0]
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	3334      	adds	r3, #52	; 0x34
 800723c:	460a      	mov	r2, r1
 800723e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d9e9      	bls.n	800722c <prvInitialiseNewTask+0x56>
 8007258:	e000      	b.n	800725c <prvInitialiseNewTask+0x86>
			{
				break;
 800725a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007264:	e003      	b.n	800726e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	2b06      	cmp	r3, #6
 8007272:	d901      	bls.n	8007278 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007274:	2306      	movs	r3, #6
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800727c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007282:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	2200      	movs	r2, #0
 8007288:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff feb1 	bl	8006ff6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	3318      	adds	r3, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff feac 	bl	8006ff6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f1c3 0207 	rsb	r2, r3, #7
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	69b8      	ldr	r0, [r7, #24]
 80072c8:	f000 fc5e 	bl	8007b88 <pxPortInitialiseStack>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072de:	bf00      	nop
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072f0:	f000 fd52 	bl	8007d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072f4:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <prvAddNewTaskToReadyList+0xb8>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a29      	ldr	r2, [pc, #164]	; (80073a0 <prvAddNewTaskToReadyList+0xb8>)
 80072fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <prvAddNewTaskToReadyList+0xbc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007306:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <prvAddNewTaskToReadyList+0xbc>)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800730c:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <prvAddNewTaskToReadyList+0xb8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d110      	bne.n	8007336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007314:	f000 fb1e 	bl	8007954 <prvInitialiseTaskLists>
 8007318:	e00d      	b.n	8007336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800731a:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <prvAddNewTaskToReadyList+0xc0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007322:	4b20      	ldr	r3, [pc, #128]	; (80073a4 <prvAddNewTaskToReadyList+0xbc>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	429a      	cmp	r2, r3
 800732e:	d802      	bhi.n	8007336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007330:	4a1c      	ldr	r2, [pc, #112]	; (80073a4 <prvAddNewTaskToReadyList+0xbc>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <prvAddNewTaskToReadyList+0xc4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	4a1b      	ldr	r2, [pc, #108]	; (80073ac <prvAddNewTaskToReadyList+0xc4>)
 800733e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	2201      	movs	r2, #1
 8007346:	409a      	lsls	r2, r3
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4313      	orrs	r3, r2
 800734e:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <prvAddNewTaskToReadyList+0xcc>)
 8007360:	441a      	add	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7ff fe51 	bl	8007010 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800736e:	f000 fd45 	bl	8007dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007372:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <prvAddNewTaskToReadyList+0xc0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800737a:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <prvAddNewTaskToReadyList+0xbc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	429a      	cmp	r2, r3
 8007386:	d207      	bcs.n	8007398 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <prvAddNewTaskToReadyList+0xd0>)
 800738a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000664 	.word	0x20000664
 80073a4:	20000564 	.word	0x20000564
 80073a8:	20000670 	.word	0x20000670
 80073ac:	20000680 	.word	0x20000680
 80073b0:	2000066c 	.word	0x2000066c
 80073b4:	20000568 	.word	0x20000568
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <vTaskDelayUntil+0x2c>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	b672      	cpsid	i
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	b662      	cpsie	i
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e7fe      	b.n	80073e6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <vTaskDelayUntil+0x4a>
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	b672      	cpsid	i
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	b662      	cpsie	i
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	e7fe      	b.n	8007404 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007406:	4b2a      	ldr	r3, [pc, #168]	; (80074b0 <vTaskDelayUntil+0xf4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <vTaskDelayUntil+0x6a>
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	b672      	cpsid	i
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	b662      	cpsie	i
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e7fe      	b.n	8007424 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8007426:	f000 f8ab 	bl	8007580 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800742a:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <vTaskDelayUntil+0xf8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	4413      	add	r3, r2
 8007438:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	429a      	cmp	r2, r3
 8007442:	d20b      	bcs.n	800745c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	429a      	cmp	r2, r3
 800744c:	d211      	bcs.n	8007472 <vTaskDelayUntil+0xb6>
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	429a      	cmp	r2, r3
 8007454:	d90d      	bls.n	8007472 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007456:	2301      	movs	r3, #1
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
 800745a:	e00a      	b.n	8007472 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	429a      	cmp	r2, r3
 8007464:	d303      	bcc.n	800746e <vTaskDelayUntil+0xb2>
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	429a      	cmp	r2, r3
 800746c:	d901      	bls.n	8007472 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2100      	movs	r1, #0
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fb18 	bl	8007abc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800748c:	f000 f886 	bl	800759c <xTaskResumeAll>
 8007490:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d107      	bne.n	80074a8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <vTaskDelayUntil+0xfc>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074a8:	bf00      	nop
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	2000068c 	.word	0x2000068c
 80074b4:	20000668 	.word	0x20000668
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074ca:	463a      	mov	r2, r7
 80074cc:	1d39      	adds	r1, r7, #4
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 ff7c 	bl	80083d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	9202      	str	r2, [sp, #8]
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	460a      	mov	r2, r1
 80074ea:	491f      	ldr	r1, [pc, #124]	; (8007568 <vTaskStartScheduler+0xac>)
 80074ec:	481f      	ldr	r0, [pc, #124]	; (800756c <vTaskStartScheduler+0xb0>)
 80074ee:	f7ff fe16 	bl	800711e <xTaskCreateStatic>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b1e      	ldr	r3, [pc, #120]	; (8007570 <vTaskStartScheduler+0xb4>)
 80074f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <vTaskStartScheduler+0xb4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e001      	b.n	800750a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d117      	bne.n	8007540 <vTaskStartScheduler+0x84>
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <vTaskStartScheduler+0xb8>)
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <vTaskStartScheduler+0xbc>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <vTaskStartScheduler+0xc0>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800753a:	f000 fbb1 	bl	8007ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800753e:	e00f      	b.n	8007560 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d10b      	bne.n	8007560 <vTaskStartScheduler+0xa4>
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	b672      	cpsid	i
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	b662      	cpsie	i
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e7fe      	b.n	800755e <vTaskStartScheduler+0xa2>
}
 8007560:	bf00      	nop
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	080146f8 	.word	0x080146f8
 800756c:	08007925 	.word	0x08007925
 8007570:	20000688 	.word	0x20000688
 8007574:	20000684 	.word	0x20000684
 8007578:	20000670 	.word	0x20000670
 800757c:	20000668 	.word	0x20000668

08007580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007584:	4b04      	ldr	r3, [pc, #16]	; (8007598 <vTaskSuspendAll+0x18>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	4a03      	ldr	r2, [pc, #12]	; (8007598 <vTaskSuspendAll+0x18>)
 800758c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	2000068c 	.word	0x2000068c

0800759c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075aa:	4b42      	ldr	r3, [pc, #264]	; (80076b4 <xTaskResumeAll+0x118>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <xTaskResumeAll+0x2e>
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	b672      	cpsid	i
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	b662      	cpsie	i
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	e7fe      	b.n	80075c8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075ca:	f000 fbe5 	bl	8007d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ce:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <xTaskResumeAll+0x118>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4a37      	ldr	r2, [pc, #220]	; (80076b4 <xTaskResumeAll+0x118>)
 80075d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d8:	4b36      	ldr	r3, [pc, #216]	; (80076b4 <xTaskResumeAll+0x118>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d161      	bne.n	80076a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <xTaskResumeAll+0x11c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05d      	beq.n	80076a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e8:	e02e      	b.n	8007648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ea:	4b34      	ldr	r3, [pc, #208]	; (80076bc <xTaskResumeAll+0x120>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3318      	adds	r3, #24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fd67 	bl	80070ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fd62 	bl	80070ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	2201      	movs	r2, #1
 800760c:	409a      	lsls	r2, r3
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <xTaskResumeAll+0x124>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4313      	orrs	r3, r2
 8007614:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <xTaskResumeAll+0x124>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <xTaskResumeAll+0x128>)
 8007626:	441a      	add	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f7ff fcee 	bl	8007010 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4b23      	ldr	r3, [pc, #140]	; (80076c8 <xTaskResumeAll+0x12c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d302      	bcc.n	8007648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007642:	4b22      	ldr	r3, [pc, #136]	; (80076cc <xTaskResumeAll+0x130>)
 8007644:	2201      	movs	r2, #1
 8007646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <xTaskResumeAll+0x120>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1cc      	bne.n	80075ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007656:	f000 f9f3 	bl	8007a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800765a:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <xTaskResumeAll+0x134>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007666:	f000 f847 	bl	80076f8 <xTaskIncrementTick>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007670:	4b16      	ldr	r3, [pc, #88]	; (80076cc <xTaskResumeAll+0x130>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f1      	bne.n	8007666 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007682:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <xTaskResumeAll+0x134>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <xTaskResumeAll+0x130>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007694:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <xTaskResumeAll+0x138>)
 8007696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076a4:	f000 fbaa 	bl	8007dfc <vPortExitCritical>

	return xAlreadyYielded;
 80076a8:	68bb      	ldr	r3, [r7, #8]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	2000068c 	.word	0x2000068c
 80076b8:	20000664 	.word	0x20000664
 80076bc:	20000624 	.word	0x20000624
 80076c0:	2000066c 	.word	0x2000066c
 80076c4:	20000568 	.word	0x20000568
 80076c8:	20000564 	.word	0x20000564
 80076cc:	20000678 	.word	0x20000678
 80076d0:	20000674 	.word	0x20000674
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <xTaskGetTickCount+0x1c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000668 	.word	0x20000668

080076f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007702:	4b4f      	ldr	r3, [pc, #316]	; (8007840 <xTaskIncrementTick+0x148>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 8089 	bne.w	800781e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800770c:	4b4d      	ldr	r3, [pc, #308]	; (8007844 <xTaskIncrementTick+0x14c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007714:	4a4b      	ldr	r2, [pc, #300]	; (8007844 <xTaskIncrementTick+0x14c>)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d121      	bne.n	8007764 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007720:	4b49      	ldr	r3, [pc, #292]	; (8007848 <xTaskIncrementTick+0x150>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <xTaskIncrementTick+0x4a>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	e7fe      	b.n	8007740 <xTaskIncrementTick+0x48>
 8007742:	4b41      	ldr	r3, [pc, #260]	; (8007848 <xTaskIncrementTick+0x150>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	4b40      	ldr	r3, [pc, #256]	; (800784c <xTaskIncrementTick+0x154>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a3e      	ldr	r2, [pc, #248]	; (8007848 <xTaskIncrementTick+0x150>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	4a3e      	ldr	r2, [pc, #248]	; (800784c <xTaskIncrementTick+0x154>)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <xTaskIncrementTick+0x158>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	4a3c      	ldr	r2, [pc, #240]	; (8007850 <xTaskIncrementTick+0x158>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	f000 f96e 	bl	8007a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007764:	4b3b      	ldr	r3, [pc, #236]	; (8007854 <xTaskIncrementTick+0x15c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	429a      	cmp	r2, r3
 800776c:	d348      	bcc.n	8007800 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800776e:	4b36      	ldr	r3, [pc, #216]	; (8007848 <xTaskIncrementTick+0x150>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <xTaskIncrementTick+0x15c>)
 800777a:	f04f 32ff 	mov.w	r2, #4294967295
 800777e:	601a      	str	r2, [r3, #0]
					break;
 8007780:	e03e      	b.n	8007800 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007782:	4b31      	ldr	r3, [pc, #196]	; (8007848 <xTaskIncrementTick+0x150>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d203      	bcs.n	80077a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800779a:	4a2e      	ldr	r2, [pc, #184]	; (8007854 <xTaskIncrementTick+0x15c>)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077a0:	e02e      	b.n	8007800 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fc8f 	bl	80070ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3318      	adds	r3, #24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fc86 	bl	80070ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	2201      	movs	r2, #1
 80077c4:	409a      	lsls	r2, r3
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <xTaskIncrementTick+0x160>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	4a22      	ldr	r2, [pc, #136]	; (8007858 <xTaskIncrementTick+0x160>)
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <xTaskIncrementTick+0x164>)
 80077de:	441a      	add	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7ff fc12 	bl	8007010 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <xTaskIncrementTick+0x168>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d3b9      	bcc.n	800776e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fe:	e7b6      	b.n	800776e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <xTaskIncrementTick+0x168>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007806:	4915      	ldr	r1, [pc, #84]	; (800785c <xTaskIncrementTick+0x164>)
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d907      	bls.n	8007828 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e004      	b.n	8007828 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <xTaskIncrementTick+0x16c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a0f      	ldr	r2, [pc, #60]	; (8007864 <xTaskIncrementTick+0x16c>)
 8007826:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007828:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <xTaskIncrementTick+0x170>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007830:	2301      	movs	r3, #1
 8007832:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007834:	697b      	ldr	r3, [r7, #20]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	2000068c 	.word	0x2000068c
 8007844:	20000668 	.word	0x20000668
 8007848:	2000061c 	.word	0x2000061c
 800784c:	20000620 	.word	0x20000620
 8007850:	2000067c 	.word	0x2000067c
 8007854:	20000684 	.word	0x20000684
 8007858:	2000066c 	.word	0x2000066c
 800785c:	20000568 	.word	0x20000568
 8007860:	20000564 	.word	0x20000564
 8007864:	20000674 	.word	0x20000674
 8007868:	20000678 	.word	0x20000678

0800786c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <vTaskSwitchContext+0xa4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <vTaskSwitchContext+0xa8>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007880:	e040      	b.n	8007904 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <vTaskSwitchContext+0xa8>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	4b23      	ldr	r3, [pc, #140]	; (8007918 <vTaskSwitchContext+0xac>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	fab3 f383 	clz	r3, r3
 8007894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	f1c3 031f 	rsb	r3, r3, #31
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	491f      	ldr	r1, [pc, #124]	; (800791c <vTaskSwitchContext+0xb0>)
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	440b      	add	r3, r1
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e7fe      	b.n	80078c8 <vTaskSwitchContext+0x5c>
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <vTaskSwitchContext+0xb0>)
 80078d6:	4413      	add	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3308      	adds	r3, #8
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d104      	bne.n	80078fa <vTaskSwitchContext+0x8e>
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	4a07      	ldr	r2, [pc, #28]	; (8007920 <vTaskSwitchContext+0xb4>)
 8007902:	6013      	str	r3, [r2, #0]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	2000068c 	.word	0x2000068c
 8007914:	20000678 	.word	0x20000678
 8007918:	2000066c 	.word	0x2000066c
 800791c:	20000568 	.word	0x20000568
 8007920:	20000564 	.word	0x20000564

08007924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800792c:	f000 f852 	bl	80079d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <prvIdleTask+0x28>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d9f9      	bls.n	800792c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <prvIdleTask+0x2c>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007948:	e7f0      	b.n	800792c <prvIdleTask+0x8>
 800794a:	bf00      	nop
 800794c:	20000568 	.word	0x20000568
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	e00c      	b.n	800797a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4a12      	ldr	r2, [pc, #72]	; (80079b4 <prvInitialiseTaskLists+0x60>)
 800796c:	4413      	add	r3, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fb21 	bl	8006fb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3301      	adds	r3, #1
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d9ef      	bls.n	8007960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007980:	480d      	ldr	r0, [pc, #52]	; (80079b8 <prvInitialiseTaskLists+0x64>)
 8007982:	f7ff fb18 	bl	8006fb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007986:	480d      	ldr	r0, [pc, #52]	; (80079bc <prvInitialiseTaskLists+0x68>)
 8007988:	f7ff fb15 	bl	8006fb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800798c:	480c      	ldr	r0, [pc, #48]	; (80079c0 <prvInitialiseTaskLists+0x6c>)
 800798e:	f7ff fb12 	bl	8006fb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007992:	480c      	ldr	r0, [pc, #48]	; (80079c4 <prvInitialiseTaskLists+0x70>)
 8007994:	f7ff fb0f 	bl	8006fb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007998:	480b      	ldr	r0, [pc, #44]	; (80079c8 <prvInitialiseTaskLists+0x74>)
 800799a:	f7ff fb0c 	bl	8006fb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <prvInitialiseTaskLists+0x78>)
 80079a0:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <prvInitialiseTaskLists+0x64>)
 80079a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <prvInitialiseTaskLists+0x7c>)
 80079a6:	4a05      	ldr	r2, [pc, #20]	; (80079bc <prvInitialiseTaskLists+0x68>)
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000568 	.word	0x20000568
 80079b8:	200005f4 	.word	0x200005f4
 80079bc:	20000608 	.word	0x20000608
 80079c0:	20000624 	.word	0x20000624
 80079c4:	20000638 	.word	0x20000638
 80079c8:	20000650 	.word	0x20000650
 80079cc:	2000061c 	.word	0x2000061c
 80079d0:	20000620 	.word	0x20000620

080079d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079da:	e019      	b.n	8007a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079dc:	f000 f9dc 	bl	8007d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <prvCheckTasksWaitingTermination+0x4c>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fb6c 	bl	80070ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <prvCheckTasksWaitingTermination+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <prvCheckTasksWaitingTermination+0x50>)
 80079fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <prvCheckTasksWaitingTermination+0x54>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <prvCheckTasksWaitingTermination+0x54>)
 8007a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a06:	f000 f9f9 	bl	8007dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f80e 	bl	8007a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <prvCheckTasksWaitingTermination+0x54>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e1      	bne.n	80079dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000638 	.word	0x20000638
 8007a24:	20000664 	.word	0x20000664
 8007a28:	2000064c 	.word	0x2000064c

08007a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <prvResetNextTaskUnblockTime+0x38>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <prvResetNextTaskUnblockTime+0x3c>)
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a58:	e008      	b.n	8007a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <prvResetNextTaskUnblockTime+0x38>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a04      	ldr	r2, [pc, #16]	; (8007a7c <prvResetNextTaskUnblockTime+0x3c>)
 8007a6a:	6013      	str	r3, [r2, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	2000061c 	.word	0x2000061c
 8007a7c:	20000684 	.word	0x20000684

08007a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <xTaskGetSchedulerState+0x34>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	e008      	b.n	8007aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a94:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <xTaskGetSchedulerState+0x38>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	607b      	str	r3, [r7, #4]
 8007aa0:	e001      	b.n	8007aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007aa6:	687b      	ldr	r3, [r7, #4]
	}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20000670 	.word	0x20000670
 8007ab8:	2000068c 	.word	0x2000068c

08007abc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ac6:	4b29      	ldr	r3, [pc, #164]	; (8007b6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007acc:	4b28      	ldr	r3, [pc, #160]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff faf9 	bl	80070ca <uxListRemove>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43da      	mvns	r2, r3
 8007aec:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4013      	ands	r3, r2
 8007af2:	4a20      	ldr	r2, [pc, #128]	; (8007b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007af4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d10a      	bne.n	8007b14 <prvAddCurrentTaskToDelayedList+0x58>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	481a      	ldr	r0, [pc, #104]	; (8007b78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b0e:	f7ff fa7f 	bl	8007010 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b12:	e026      	b.n	8007b62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b1c:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d209      	bcs.n	8007b40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7ff fa8d 	bl	8007058 <vListInsert>
}
 8007b3e:	e010      	b.n	8007b62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7ff fa83 	bl	8007058 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b52:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d202      	bcs.n	8007b62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b5c:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6013      	str	r3, [r2, #0]
}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000668 	.word	0x20000668
 8007b70:	20000564 	.word	0x20000564
 8007b74:	2000066c 	.word	0x2000066c
 8007b78:	20000650 	.word	0x20000650
 8007b7c:	20000620 	.word	0x20000620
 8007b80:	2000061c 	.word	0x2000061c
 8007b84:	20000684 	.word	0x20000684

08007b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3b04      	subs	r3, #4
 8007b98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f023 0201 	bic.w	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bb8:	4a0c      	ldr	r2, [pc, #48]	; (8007bec <pxPortInitialiseStack+0x64>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3b14      	subs	r3, #20
 8007bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f06f 0202 	mvn.w	r2, #2
 8007bd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3b20      	subs	r3, #32
 8007bdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bde:	68fb      	ldr	r3, [r7, #12]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	08007bf1 	.word	0x08007bf1

08007bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <prvTaskExitError+0x58>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d00b      	beq.n	8007c1c <prvTaskExitError+0x2c>
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	b672      	cpsid	i
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	b662      	cpsie	i
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e7fe      	b.n	8007c1a <prvTaskExitError+0x2a>
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	b672      	cpsid	i
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	b662      	cpsie	i
 8007c30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c32:	bf00      	nop
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0fc      	beq.n	8007c34 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000008 	.word	0x20000008
 8007c4c:	00000000 	.word	0x00000000

08007c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <pxCurrentTCBConst2>)
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	6808      	ldr	r0, [r1, #0]
 8007c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	f380 8809 	msr	PSP, r0
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8811 	msr	BASEPRI, r0
 8007c6a:	4770      	bx	lr
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst2>:
 8007c70:	20000564 	.word	0x20000564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c78:	4808      	ldr	r0, [pc, #32]	; (8007c9c <prvPortStartFirstTask+0x24>)
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f380 8808 	msr	MSP, r0
 8007c82:	f04f 0000 	mov.w	r0, #0
 8007c86:	f380 8814 	msr	CONTROL, r0
 8007c8a:	b662      	cpsie	i
 8007c8c:	b661      	cpsie	f
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	df00      	svc	0
 8007c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c9a:	bf00      	nop
 8007c9c:	e000ed08 	.word	0xe000ed08

08007ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ca6:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <xPortStartScheduler+0xe0>)
 8007ca8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	22ff      	movs	r2, #255	; 0xff
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <xPortStartScheduler+0xe4>)
 8007ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cce:	4b2e      	ldr	r3, [pc, #184]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd4:	e009      	b.n	8007cea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007cd6:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	4a2a      	ldr	r2, [pc, #168]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d0ef      	beq.n	8007cd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d00b      	beq.n	8007d1a <xPortStartScheduler+0x7a>
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	b672      	cpsid	i
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	b662      	cpsie	i
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	e7fe      	b.n	8007d18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007d22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d24:	4b18      	ldr	r3, [pc, #96]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2c:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <xPortStartScheduler+0xe8>)
 8007d2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d38:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <xPortStartScheduler+0xec>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <xPortStartScheduler+0xec>)
 8007d3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <xPortStartScheduler+0xec>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a10      	ldr	r2, [pc, #64]	; (8007d8c <xPortStartScheduler+0xec>)
 8007d4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d50:	f000 f8d4 	bl	8007efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <xPortStartScheduler+0xf0>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d5a:	f000 f8f3 	bl	8007f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <xPortStartScheduler+0xf4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <xPortStartScheduler+0xf4>)
 8007d64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d6a:	f7ff ff85 	bl	8007c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d6e:	f7ff fd7d 	bl	800786c <vTaskSwitchContext>
	prvTaskExitError();
 8007d72:	f7ff ff3d 	bl	8007bf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	e000e400 	.word	0xe000e400
 8007d84:	20000690 	.word	0x20000690
 8007d88:	20000694 	.word	0x20000694
 8007d8c:	e000ed20 	.word	0xe000ed20
 8007d90:	20000008 	.word	0x20000008
 8007d94:	e000ef34 	.word	0xe000ef34

08007d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	b672      	cpsid	i
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	b662      	cpsie	i
 8007db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <vPortEnterCritical+0x5c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a0e      	ldr	r2, [pc, #56]	; (8007df4 <vPortEnterCritical+0x5c>)
 8007dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <vPortEnterCritical+0x5c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d110      	bne.n	8007de8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <vPortEnterCritical+0x60>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <vPortEnterCritical+0x50>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	e7fe      	b.n	8007de6 <vPortEnterCritical+0x4e>
	}
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	20000008 	.word	0x20000008
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <vPortExitCritical+0x50>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <vPortExitCritical+0x26>
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	b672      	cpsid	i
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	b662      	cpsie	i
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	e7fe      	b.n	8007e20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <vPortExitCritical+0x50>)
 8007e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <vPortExitCritical+0x50>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <vPortExitCritical+0x42>
 8007e34:	2300      	movs	r3, #0
 8007e36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000008 	.word	0x20000008

08007e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e50:	f3ef 8009 	mrs	r0, PSP
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <pxCurrentTCBConst>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f01e 0f10 	tst.w	lr, #16
 8007e60:	bf08      	it	eq
 8007e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e74:	b672      	cpsid	i
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	b662      	cpsie	i
 8007e84:	f7ff fcf2 	bl	800786c <vTaskSwitchContext>
 8007e88:	f04f 0000 	mov.w	r0, #0
 8007e8c:	f380 8811 	msr	BASEPRI, r0
 8007e90:	bc09      	pop	{r0, r3}
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	6808      	ldr	r0, [r1, #0]
 8007e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	f01e 0f10 	tst.w	lr, #16
 8007e9e:	bf08      	it	eq
 8007ea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ea4:	f380 8809 	msr	PSP, r0
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <pxCurrentTCBConst>:
 8007eb0:	20000564 	.word	0x20000564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	b672      	cpsid	i
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	b662      	cpsie	i
 8007ed2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ed4:	f7ff fc10 	bl	80076f8 <xTaskIncrementTick>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ede:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <xPortSysTickHandler+0x40>)
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <vPortSetupTimerInterrupt+0x38>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <vPortSetupTimerInterrupt+0x3c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <vPortSetupTimerInterrupt+0x40>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <vPortSetupTimerInterrupt+0x44>)
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f1e:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e010 	.word	0xe000e010
 8007f34:	e000e018 	.word	0xe000e018
 8007f38:	2000000c 	.word	0x2000000c
 8007f3c:	10624dd3 	.word	0x10624dd3
 8007f40:	e000e014 	.word	0xe000e014

08007f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f54 <vPortEnableVFP+0x10>
 8007f48:	6801      	ldr	r1, [r0, #0]
 8007f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f4e:	6001      	str	r1, [r0, #0]
 8007f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f52:	bf00      	nop
 8007f54:	e000ed88 	.word	0xe000ed88

08007f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007f5e:	463b      	mov	r3, r7
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007f6a:	4b44      	ldr	r3, [pc, #272]	; (800807c <MX_ADC1_Init+0x124>)
 8007f6c:	4a44      	ldr	r2, [pc, #272]	; (8008080 <MX_ADC1_Init+0x128>)
 8007f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007f70:	4b42      	ldr	r3, [pc, #264]	; (800807c <MX_ADC1_Init+0x124>)
 8007f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <MX_ADC1_Init+0x124>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007f7e:	4b3f      	ldr	r3, [pc, #252]	; (800807c <MX_ADC1_Init+0x124>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007f84:	4b3d      	ldr	r3, [pc, #244]	; (800807c <MX_ADC1_Init+0x124>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007f8a:	4b3c      	ldr	r3, [pc, #240]	; (800807c <MX_ADC1_Init+0x124>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007f92:	4b3a      	ldr	r3, [pc, #232]	; (800807c <MX_ADC1_Init+0x124>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f98:	4b38      	ldr	r3, [pc, #224]	; (800807c <MX_ADC1_Init+0x124>)
 8007f9a:	4a3a      	ldr	r2, [pc, #232]	; (8008084 <MX_ADC1_Init+0x12c>)
 8007f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f9e:	4b37      	ldr	r3, [pc, #220]	; (800807c <MX_ADC1_Init+0x124>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8007fa4:	4b35      	ldr	r3, [pc, #212]	; (800807c <MX_ADC1_Init+0x124>)
 8007fa6:	2206      	movs	r2, #6
 8007fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007faa:	4b34      	ldr	r3, [pc, #208]	; (800807c <MX_ADC1_Init+0x124>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007fb2:	4b32      	ldr	r3, [pc, #200]	; (800807c <MX_ADC1_Init+0x124>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007fb8:	4830      	ldr	r0, [pc, #192]	; (800807c <MX_ADC1_Init+0x124>)
 8007fba:	f7f9 f84b 	bl	8001054 <HAL_ADC_Init>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007fc4:	f000 fdea 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007fd0:	2307      	movs	r3, #7
 8007fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4828      	ldr	r0, [pc, #160]	; (800807c <MX_ADC1_Init+0x124>)
 8007fda:	f7f9 f87f 	bl	80010dc <HAL_ADC_ConfigChannel>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007fe4:	f000 fdda 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007fe8:	2304      	movs	r3, #4
 8007fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007fec:	2302      	movs	r3, #2
 8007fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4821      	ldr	r0, [pc, #132]	; (800807c <MX_ADC1_Init+0x124>)
 8007ff6:	f7f9 f871 	bl	80010dc <HAL_ADC_ConfigChannel>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008000:	f000 fdcc 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008004:	2309      	movs	r3, #9
 8008006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008008:	2303      	movs	r3, #3
 800800a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800800c:	463b      	mov	r3, r7
 800800e:	4619      	mov	r1, r3
 8008010:	481a      	ldr	r0, [pc, #104]	; (800807c <MX_ADC1_Init+0x124>)
 8008012:	f7f9 f863 	bl	80010dc <HAL_ADC_ConfigChannel>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800801c:	f000 fdbe 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008020:	230a      	movs	r3, #10
 8008022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008024:	2304      	movs	r3, #4
 8008026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008028:	463b      	mov	r3, r7
 800802a:	4619      	mov	r1, r3
 800802c:	4813      	ldr	r0, [pc, #76]	; (800807c <MX_ADC1_Init+0x124>)
 800802e:	f7f9 f855 	bl	80010dc <HAL_ADC_ConfigChannel>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8008038:	f000 fdb0 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800803c:	230c      	movs	r3, #12
 800803e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008040:	2305      	movs	r3, #5
 8008042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008044:	463b      	mov	r3, r7
 8008046:	4619      	mov	r1, r3
 8008048:	480c      	ldr	r0, [pc, #48]	; (800807c <MX_ADC1_Init+0x124>)
 800804a:	f7f9 f847 	bl	80010dc <HAL_ADC_ConfigChannel>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8008054:	f000 fda2 	bl	8008b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008058:	230d      	movs	r3, #13
 800805a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800805c:	2306      	movs	r3, #6
 800805e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008060:	463b      	mov	r3, r7
 8008062:	4619      	mov	r1, r3
 8008064:	4805      	ldr	r0, [pc, #20]	; (800807c <MX_ADC1_Init+0x124>)
 8008066:	f7f9 f839 	bl	80010dc <HAL_ADC_ConfigChannel>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8008070:	f000 fd94 	bl	8008b9c <Error_Handler>
  }

}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	2000134c 	.word	0x2000134c
 8008080:	40012000 	.word	0x40012000
 8008084:	0f000001 	.word	0x0f000001

08008088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	; 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008090:	f107 031c 	add.w	r3, r7, #28
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a45      	ldr	r2, [pc, #276]	; (80081bc <HAL_ADC_MspInit+0x134>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f040 8084 	bne.w	80081b4 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80080ac:	4b44      	ldr	r3, [pc, #272]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b0:	4a43      	ldr	r2, [pc, #268]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b6:	6453      	str	r3, [r2, #68]	; 0x44
 80080b8:	4b41      	ldr	r3, [pc, #260]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080c4:	4b3e      	ldr	r3, [pc, #248]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	4a3d      	ldr	r2, [pc, #244]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080ca:	f043 0304 	orr.w	r3, r3, #4
 80080ce:	6313      	str	r3, [r2, #48]	; 0x30
 80080d0:	4b3b      	ldr	r3, [pc, #236]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080dc:	4b38      	ldr	r3, [pc, #224]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	4a37      	ldr	r2, [pc, #220]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	6313      	str	r3, [r2, #48]	; 0x30
 80080e8:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080f4:	4b32      	ldr	r3, [pc, #200]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f8:	4a31      	ldr	r2, [pc, #196]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008100:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <HAL_ADC_MspInit+0x138>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 800810c:	230d      	movs	r3, #13
 800810e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008110:	2303      	movs	r3, #3
 8008112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008118:	f107 031c 	add.w	r3, r7, #28
 800811c:	4619      	mov	r1, r3
 800811e:	4829      	ldr	r0, [pc, #164]	; (80081c4 <HAL_ADC_MspInit+0x13c>)
 8008120:	f7fa fa24 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8008124:	2318      	movs	r3, #24
 8008126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008128:	2303      	movs	r3, #3
 800812a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812c:	2300      	movs	r3, #0
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008130:	f107 031c 	add.w	r3, r7, #28
 8008134:	4619      	mov	r1, r3
 8008136:	4824      	ldr	r0, [pc, #144]	; (80081c8 <HAL_ADC_MspInit+0x140>)
 8008138:	f7fa fa18 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 800813c:	2302      	movs	r3, #2
 800813e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008140:	2303      	movs	r3, #3
 8008142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008144:	2300      	movs	r3, #0
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8008148:	f107 031c 	add.w	r3, r7, #28
 800814c:	4619      	mov	r1, r3
 800814e:	481f      	ldr	r0, [pc, #124]	; (80081cc <HAL_ADC_MspInit+0x144>)
 8008150:	f7fa fa0c 	bl	800256c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8008154:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <HAL_ADC_MspInit+0x14c>)
 8008158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 800815c:	2200      	movs	r2, #0
 800815e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008160:	4b1b      	ldr	r3, [pc, #108]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008162:	2200      	movs	r2, #0
 8008164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008166:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008168:	2200      	movs	r2, #0
 800816a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800816c:	4b18      	ldr	r3, [pc, #96]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 800816e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008174:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800817a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800817c:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 800817e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800818a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800818c:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 800818e:	2200      	movs	r2, #0
 8008190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 8008194:	2200      	movs	r2, #0
 8008196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008198:	480d      	ldr	r0, [pc, #52]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 800819a:	f7f9 fddf 	bl	8001d5c <HAL_DMA_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80081a4:	f000 fcfa 	bl	8008b9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
 80081ae:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <HAL_ADC_MspInit+0x148>)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80081b4:	bf00      	nop
 80081b6:	3730      	adds	r7, #48	; 0x30
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40012000 	.word	0x40012000
 80081c0:	40023800 	.word	0x40023800
 80081c4:	40020800 	.word	0x40020800
 80081c8:	40020000 	.word	0x40020000
 80081cc:	40020400 	.word	0x40020400
 80081d0:	20001394 	.word	0x20001394
 80081d4:	40026470 	.word	0x40026470

080081d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80081dc:	4b17      	ldr	r3, [pc, #92]	; (800823c <MX_CAN1_Init+0x64>)
 80081de:	4a18      	ldr	r2, [pc, #96]	; (8008240 <MX_CAN1_Init+0x68>)
 80081e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80081e2:	4b16      	ldr	r3, [pc, #88]	; (800823c <MX_CAN1_Init+0x64>)
 80081e4:	2206      	movs	r2, #6
 80081e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80081e8:	4b14      	ldr	r3, [pc, #80]	; (800823c <MX_CAN1_Init+0x64>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <MX_CAN1_Init+0x64>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80081f4:	4b11      	ldr	r3, [pc, #68]	; (800823c <MX_CAN1_Init+0x64>)
 80081f6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80081fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <MX_CAN1_Init+0x64>)
 80081fe:	2200      	movs	r2, #0
 8008200:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <MX_CAN1_Init+0x64>)
 8008204:	2200      	movs	r2, #0
 8008206:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008208:	4b0c      	ldr	r3, [pc, #48]	; (800823c <MX_CAN1_Init+0x64>)
 800820a:	2200      	movs	r2, #0
 800820c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <MX_CAN1_Init+0x64>)
 8008210:	2200      	movs	r2, #0
 8008212:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008214:	4b09      	ldr	r3, [pc, #36]	; (800823c <MX_CAN1_Init+0x64>)
 8008216:	2201      	movs	r2, #1
 8008218:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <MX_CAN1_Init+0x64>)
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <MX_CAN1_Init+0x64>)
 8008222:	2200      	movs	r2, #0
 8008224:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008226:	4805      	ldr	r0, [pc, #20]	; (800823c <MX_CAN1_Init+0x64>)
 8008228:	f7f9 f99c 	bl	8001564 <HAL_CAN_Init>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8008232:	f000 fcb3 	bl	8008b9c <Error_Handler>
  }

}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200013f4 	.word	0x200013f4
 8008240:	40006400 	.word	0x40006400

08008244 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_CAN_MspInit+0x9c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d137      	bne.n	80082d6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008266:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 800826c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008270:	6413      	str	r3, [r2, #64]	; 0x40
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 8008284:	f043 0308 	orr.w	r3, r3, #8
 8008288:	6313      	str	r3, [r2, #48]	; 0x30
 800828a:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <HAL_CAN_MspInit+0xa0>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008296:	2303      	movs	r3, #3
 8008298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829a:	2302      	movs	r3, #2
 800829c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a2:	2303      	movs	r3, #3
 80082a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80082a6:	2309      	movs	r3, #9
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082aa:	f107 0314 	add.w	r3, r7, #20
 80082ae:	4619      	mov	r1, r3
 80082b0:	480d      	ldr	r0, [pc, #52]	; (80082e8 <HAL_CAN_MspInit+0xa4>)
 80082b2:	f7fa f95b 	bl	800256c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80082b6:	2200      	movs	r2, #0
 80082b8:	2105      	movs	r1, #5
 80082ba:	2014      	movs	r0, #20
 80082bc:	f7f9 fd24 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80082c0:	2014      	movs	r0, #20
 80082c2:	f7f9 fd3d 	bl	8001d40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80082c6:	2200      	movs	r2, #0
 80082c8:	2105      	movs	r1, #5
 80082ca:	2015      	movs	r0, #21
 80082cc:	f7f9 fd1c 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80082d0:	2015      	movs	r0, #21
 80082d2:	f7f9 fd35 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80082d6:	bf00      	nop
 80082d8:	3728      	adds	r7, #40	; 0x28
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40006400 	.word	0x40006400
 80082e4:	40023800 	.word	0x40023800
 80082e8:	40020c00 	.word	0x40020c00

080082ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80082f2:	4b36      	ldr	r3, [pc, #216]	; (80083cc <MX_DMA_Init+0xe0>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	4a35      	ldr	r2, [pc, #212]	; (80083cc <MX_DMA_Init+0xe0>)
 80082f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082fc:	6313      	str	r3, [r2, #48]	; 0x30
 80082fe:	4b33      	ldr	r3, [pc, #204]	; (80083cc <MX_DMA_Init+0xe0>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800830a:	4b30      	ldr	r3, [pc, #192]	; (80083cc <MX_DMA_Init+0xe0>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	4a2f      	ldr	r2, [pc, #188]	; (80083cc <MX_DMA_Init+0xe0>)
 8008310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008314:	6313      	str	r3, [r2, #48]	; 0x30
 8008316:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <MX_DMA_Init+0xe0>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8008322:	2200      	movs	r2, #0
 8008324:	2105      	movs	r1, #5
 8008326:	200b      	movs	r0, #11
 8008328:	f7f9 fcee 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800832c:	200b      	movs	r0, #11
 800832e:	f7f9 fd07 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8008332:	2200      	movs	r2, #0
 8008334:	2105      	movs	r1, #5
 8008336:	200c      	movs	r0, #12
 8008338:	f7f9 fce6 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800833c:	200c      	movs	r0, #12
 800833e:	f7f9 fcff 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8008342:	2200      	movs	r2, #0
 8008344:	2105      	movs	r1, #5
 8008346:	200f      	movs	r0, #15
 8008348:	f7f9 fcde 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800834c:	200f      	movs	r0, #15
 800834e:	f7f9 fcf7 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008352:	2200      	movs	r2, #0
 8008354:	2105      	movs	r1, #5
 8008356:	2010      	movs	r0, #16
 8008358:	f7f9 fcd6 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800835c:	2010      	movs	r0, #16
 800835e:	f7f9 fcef 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008362:	2200      	movs	r2, #0
 8008364:	2105      	movs	r1, #5
 8008366:	2011      	movs	r0, #17
 8008368:	f7f9 fcce 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800836c:	2011      	movs	r0, #17
 800836e:	f7f9 fce7 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008372:	2200      	movs	r2, #0
 8008374:	2105      	movs	r1, #5
 8008376:	2038      	movs	r0, #56	; 0x38
 8008378:	f7f9 fcc6 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800837c:	2038      	movs	r0, #56	; 0x38
 800837e:	f7f9 fcdf 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008382:	2200      	movs	r2, #0
 8008384:	2105      	movs	r1, #5
 8008386:	2039      	movs	r0, #57	; 0x39
 8008388:	f7f9 fcbe 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800838c:	2039      	movs	r0, #57	; 0x39
 800838e:	f7f9 fcd7 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008392:	2200      	movs	r2, #0
 8008394:	2105      	movs	r1, #5
 8008396:	203a      	movs	r0, #58	; 0x3a
 8008398:	f7f9 fcb6 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800839c:	203a      	movs	r0, #58	; 0x3a
 800839e:	f7f9 fccf 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80083a2:	2200      	movs	r2, #0
 80083a4:	2105      	movs	r1, #5
 80083a6:	203b      	movs	r0, #59	; 0x3b
 80083a8:	f7f9 fcae 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80083ac:	203b      	movs	r0, #59	; 0x3b
 80083ae:	f7f9 fcc7 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2105      	movs	r1, #5
 80083b6:	203c      	movs	r0, #60	; 0x3c
 80083b8:	f7f9 fca6 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80083bc:	203c      	movs	r0, #60	; 0x3c
 80083be:	f7f9 fcbf 	bl	8001d40 <HAL_NVIC_EnableIRQ>

}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	40023800 	.word	0x40023800

080083d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a07      	ldr	r2, [pc, #28]	; (80083fc <vApplicationGetIdleTaskMemory+0x2c>)
 80083e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vApplicationGetIdleTaskMemory+0x30>)
 80083e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2280      	movs	r2, #128	; 0x80
 80083ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000698 	.word	0x20000698
 8008400:	200006ec 	.word	0x200006ec

08008404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008404:	b5b0      	push	{r4, r5, r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <MX_FREERTOS_Init+0x58>)
 800840c:	f107 041c 	add.w	r4, r7, #28
 8008410:	461d      	mov	r5, r3
 8008412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800841a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 800841e:	f107 031c 	add.w	r3, r7, #28
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fd96 	bl	8006f56 <osThreadCreate>
 800842a:	4602      	mov	r2, r0
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <MX_FREERTOS_Init+0x5c>)
 800842e:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8008430:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <MX_FREERTOS_Init+0x60>)
 8008432:	463c      	mov	r4, r7
 8008434:	461d      	mov	r5, r3
 8008436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800843a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800843e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8008442:	463b      	mov	r3, r7
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fd85 	bl	8006f56 <osThreadCreate>
 800844c:	4602      	mov	r2, r0
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <MX_FREERTOS_Init+0x64>)
 8008450:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008452:	bf00      	nop
 8008454:	3738      	adds	r7, #56	; 0x38
 8008456:	46bd      	mov	sp, r7
 8008458:	bdb0      	pop	{r4, r5, r7, pc}
 800845a:	bf00      	nop
 800845c:	0801470c 	.word	0x0801470c
 8008460:	2000541c 	.word	0x2000541c
 8008464:	08014734 	.word	0x08014734
 8008468:	20005474 	.word	0x20005474

0800846c <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008474:	f7ff f930 	bl	80076d8 <xTaskGetTickCount>
 8008478:	4603      	mov	r3, r0
 800847a:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 800847c:	2301      	movs	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <sendTaskFunc+0x44>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <sendTaskFunc+0x44>)
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <sendTaskFunc+0x44>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <sendTaskFunc+0x48>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	db04      	blt.n	80084a0 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <sendTaskFunc+0x44>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 800849c:	f006 fc44 	bl	800ed28 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 80084a0:	f107 0308 	add.w	r3, r7, #8
 80084a4:	68f9      	ldr	r1, [r7, #12]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe ff88 	bl	80073bc <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 80084ac:	e7e8      	b.n	8008480 <sendTaskFunc+0x14>
 80084ae:	bf00      	nop
 80084b0:	200008ec 	.word	0x200008ec
 80084b4:	2000021c 	.word	0x2000021c

080084b8 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80084c0:	f7ff f90a 	bl	80076d8 <xTaskGetTickCount>
 80084c4:	4603      	mov	r3, r0
 80084c6:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 80084cc:	f002 faee 	bl	800aaac <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceiveHandler();
 80084d0:	f005 fb7c 	bl	800dbcc <Usart_ReceiveHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 80084d4:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <controlTaskFunc+0x50>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <controlTaskFunc+0x50>)
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <controlTaskFunc+0x50>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <controlTaskFunc+0x54>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	db04      	blt.n	80084f4 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <controlTaskFunc+0x50>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
		loop();
 80084f0:	f006 fc08 	bl	800ed04 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 80084f4:	f003 fb04 	bl	800bb00 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	68f9      	ldr	r1, [r7, #12]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe ff5c 	bl	80073bc <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8008504:	e7e2      	b.n	80084cc <controlTaskFunc+0x14>
 8008506:	bf00      	nop
 8008508:	200008f0 	.word	0x200008f0
 800850c:	20000218 	.word	0x20000218

08008510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	; 0x30
 8008514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008516:	f107 031c 	add.w	r3, r7, #28
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	605a      	str	r2, [r3, #4]
 8008520:	609a      	str	r2, [r3, #8]
 8008522:	60da      	str	r2, [r3, #12]
 8008524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008526:	4b65      	ldr	r3, [pc, #404]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	4a64      	ldr	r2, [pc, #400]	; (80086bc <MX_GPIO_Init+0x1ac>)
 800852c:	f043 0310 	orr.w	r3, r3, #16
 8008530:	6313      	str	r3, [r2, #48]	; 0x30
 8008532:	4b62      	ldr	r3, [pc, #392]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800853e:	4b5f      	ldr	r3, [pc, #380]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	4a5e      	ldr	r2, [pc, #376]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	6313      	str	r3, [r2, #48]	; 0x30
 800854a:	4b5c      	ldr	r3, [pc, #368]	; (80086bc <MX_GPIO_Init+0x1ac>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	4a58      	ldr	r2, [pc, #352]	; (80086bc <MX_GPIO_Init+0x1ac>)
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	6313      	str	r3, [r2, #48]	; 0x30
 8008562:	4b56      	ldr	r3, [pc, #344]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800856e:	4b53      	ldr	r3, [pc, #332]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008572:	4a52      	ldr	r2, [pc, #328]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008574:	f043 0301 	orr.w	r3, r3, #1
 8008578:	6313      	str	r3, [r2, #48]	; 0x30
 800857a:	4b50      	ldr	r3, [pc, #320]	; (80086bc <MX_GPIO_Init+0x1ac>)
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008586:	4b4d      	ldr	r3, [pc, #308]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	4a4c      	ldr	r2, [pc, #304]	; (80086bc <MX_GPIO_Init+0x1ac>)
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	6313      	str	r3, [r2, #48]	; 0x30
 8008592:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <MX_GPIO_Init+0x1ac>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800859e:	4b47      	ldr	r3, [pc, #284]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	4a46      	ldr	r2, [pc, #280]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a8:	6313      	str	r3, [r2, #48]	; 0x30
 80085aa:	4b44      	ldr	r3, [pc, #272]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085b6:	4b41      	ldr	r3, [pc, #260]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ba:	4a40      	ldr	r2, [pc, #256]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085bc:	f043 0308 	orr.w	r3, r3, #8
 80085c0:	6313      	str	r3, [r2, #48]	; 0x30
 80085c2:	4b3e      	ldr	r3, [pc, #248]	; (80086bc <MX_GPIO_Init+0x1ac>)
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 80085ce:	2200      	movs	r2, #0
 80085d0:	f240 119b 	movw	r1, #411	; 0x19b
 80085d4:	483a      	ldr	r0, [pc, #232]	; (80086c0 <MX_GPIO_Init+0x1b0>)
 80085d6:	f7fa f973 	bl	80028c0 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 80085da:	2200      	movs	r2, #0
 80085dc:	f64f 5138 	movw	r1, #64824	; 0xfd38
 80085e0:	4838      	ldr	r0, [pc, #224]	; (80086c4 <MX_GPIO_Init+0x1b4>)
 80085e2:	f7fa f96d 	bl	80028c0 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 80085e6:	f240 139b 	movw	r3, #411	; 0x19b
 80085ea:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ec:	2301      	movs	r3, #1
 80085ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80085f0:	2302      	movs	r3, #2
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f4:	2300      	movs	r3, #0
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085f8:	f107 031c 	add.w	r3, r7, #28
 80085fc:	4619      	mov	r1, r3
 80085fe:	4830      	ldr	r0, [pc, #192]	; (80086c0 <MX_GPIO_Init+0x1b0>)
 8008600:	f7f9 ffb4 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8008604:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8008608:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800860a:	2301      	movs	r3, #1
 800860c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800860e:	2302      	movs	r3, #2
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008612:	2300      	movs	r3, #0
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008616:	f107 031c 	add.w	r3, r7, #28
 800861a:	4619      	mov	r1, r3
 800861c:	4829      	ldr	r0, [pc, #164]	; (80086c4 <MX_GPIO_Init+0x1b4>)
 800861e:	f7f9 ffa5 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 8008622:	233f      	movs	r3, #63	; 0x3f
 8008624:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008626:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <MX_GPIO_Init+0x1b8>)
 8008628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800862a:	2302      	movs	r3, #2
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800862e:	f107 031c 	add.w	r3, r7, #28
 8008632:	4619      	mov	r1, r3
 8008634:	4825      	ldr	r0, [pc, #148]	; (80086cc <MX_GPIO_Init+0x1bc>)
 8008636:	f7f9 ff99 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800863a:	239c      	movs	r3, #156	; 0x9c
 800863c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800863e:	2300      	movs	r3, #0
 8008640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008646:	f107 031c 	add.w	r3, r7, #28
 800864a:	4619      	mov	r1, r3
 800864c:	4820      	ldr	r0, [pc, #128]	; (80086d0 <MX_GPIO_Init+0x1c0>)
 800864e:	f7f9 ff8d 	bl	800256c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2105      	movs	r1, #5
 8008656:	2006      	movs	r0, #6
 8008658:	f7f9 fb56 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800865c:	2006      	movs	r0, #6
 800865e:	f7f9 fb6f 	bl	8001d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8008662:	2200      	movs	r2, #0
 8008664:	2105      	movs	r1, #5
 8008666:	2007      	movs	r0, #7
 8008668:	f7f9 fb4e 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800866c:	2007      	movs	r0, #7
 800866e:	f7f9 fb67 	bl	8001d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8008672:	2200      	movs	r2, #0
 8008674:	2105      	movs	r1, #5
 8008676:	2008      	movs	r0, #8
 8008678:	f7f9 fb46 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800867c:	2008      	movs	r0, #8
 800867e:	f7f9 fb5f 	bl	8001d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2105      	movs	r1, #5
 8008686:	2009      	movs	r0, #9
 8008688:	f7f9 fb3e 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800868c:	2009      	movs	r0, #9
 800868e:	f7f9 fb57 	bl	8001d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008692:	2200      	movs	r2, #0
 8008694:	2105      	movs	r1, #5
 8008696:	200a      	movs	r0, #10
 8008698:	f7f9 fb36 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800869c:	200a      	movs	r0, #10
 800869e:	f7f9 fb4f 	bl	8001d40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2105      	movs	r1, #5
 80086a6:	2017      	movs	r0, #23
 80086a8:	f7f9 fb2e 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80086ac:	2017      	movs	r0, #23
 80086ae:	f7f9 fb47 	bl	8001d40 <HAL_NVIC_EnableIRQ>

}
 80086b2:	bf00      	nop
 80086b4:	3730      	adds	r7, #48	; 0x30
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40021000 	.word	0x40021000
 80086c4:	40021400 	.word	0x40021400
 80086c8:	10210000 	.word	0x10210000
 80086cc:	40021800 	.word	0x40021800
 80086d0:	40020c00 	.word	0x40020c00

080086d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80086d8:	4b1b      	ldr	r3, [pc, #108]	; (8008748 <MX_I2C1_Init+0x74>)
 80086da:	4a1c      	ldr	r2, [pc, #112]	; (800874c <MX_I2C1_Init+0x78>)
 80086dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80086de:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <MX_I2C1_Init+0x74>)
 80086e0:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <MX_I2C1_Init+0x7c>)
 80086e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80086e4:	4b18      	ldr	r3, [pc, #96]	; (8008748 <MX_I2C1_Init+0x74>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086ea:	4b17      	ldr	r3, [pc, #92]	; (8008748 <MX_I2C1_Init+0x74>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086f0:	4b15      	ldr	r3, [pc, #84]	; (8008748 <MX_I2C1_Init+0x74>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <MX_I2C1_Init+0x74>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <MX_I2C1_Init+0x74>)
 80086fe:	2200      	movs	r2, #0
 8008700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <MX_I2C1_Init+0x74>)
 8008704:	2200      	movs	r2, #0
 8008706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <MX_I2C1_Init+0x74>)
 800870a:	2200      	movs	r2, #0
 800870c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800870e:	480e      	ldr	r0, [pc, #56]	; (8008748 <MX_I2C1_Init+0x74>)
 8008710:	f7fa f908 	bl	8002924 <HAL_I2C_Init>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800871a:	f000 fa3f 	bl	8008b9c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800871e:	2100      	movs	r1, #0
 8008720:	4809      	ldr	r0, [pc, #36]	; (8008748 <MX_I2C1_Init+0x74>)
 8008722:	f7fa f98f 	bl	8002a44 <HAL_I2CEx_ConfigAnalogFilter>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800872c:	f000 fa36 	bl	8008b9c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008730:	2100      	movs	r1, #0
 8008732:	4805      	ldr	r0, [pc, #20]	; (8008748 <MX_I2C1_Init+0x74>)
 8008734:	f7fa f9d1 	bl	8002ada <HAL_I2CEx_ConfigDigitalFilter>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800873e:	f000 fa2d 	bl	8008b9c <Error_Handler>
  }

}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	2000952c 	.word	0x2000952c
 800874c:	40005400 	.word	0x40005400
 8008750:	6000030d 	.word	0x6000030d

08008754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800875c:	f107 0314 	add.w	r3, r7, #20
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	605a      	str	r2, [r3, #4]
 8008766:	609a      	str	r2, [r3, #8]
 8008768:	60da      	str	r2, [r3, #12]
 800876a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a2e      	ldr	r2, [pc, #184]	; (800882c <HAL_I2C_MspInit+0xd8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d156      	bne.n	8008824 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008776:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	4a2d      	ldr	r2, [pc, #180]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 800877c:	f043 0302 	orr.w	r3, r3, #2
 8008780:	6313      	str	r3, [r2, #48]	; 0x30
 8008782:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	613b      	str	r3, [r7, #16]
 800878c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800878e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008794:	2312      	movs	r3, #18
 8008796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008798:	2301      	movs	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800879c:	2303      	movs	r3, #3
 800879e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80087a0:	2304      	movs	r3, #4
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	4619      	mov	r1, r3
 80087aa:	4822      	ldr	r0, [pc, #136]	; (8008834 <HAL_I2C_MspInit+0xe0>)
 80087ac:	f7f9 fede 	bl	800256c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80087b0:	4b1f      	ldr	r3, [pc, #124]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 80087b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087ba:	6413      	str	r3, [r2, #64]	; 0x40
 80087bc:	4b1c      	ldr	r3, [pc, #112]	; (8008830 <HAL_I2C_MspInit+0xdc>)
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80087c8:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087ca:	4a1c      	ldr	r2, [pc, #112]	; (800883c <HAL_I2C_MspInit+0xe8>)
 80087cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087d6:	4b18      	ldr	r3, [pc, #96]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087dc:	4b16      	ldr	r3, [pc, #88]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087de:	2200      	movs	r2, #0
 80087e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087ea:	4b13      	ldr	r3, [pc, #76]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087f0:	4b11      	ldr	r3, [pc, #68]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80087f6:	4b10      	ldr	r3, [pc, #64]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80087fc:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 80087fe:	2200      	movs	r2, #0
 8008800:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 8008804:	2200      	movs	r2, #0
 8008806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008808:	480b      	ldr	r0, [pc, #44]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 800880a:	f7f9 faa7 	bl	8001d5c <HAL_DMA_Init>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008814:	f000 f9c2 	bl	8008b9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a07      	ldr	r2, [pc, #28]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 800881c:	639a      	str	r2, [r3, #56]	; 0x38
 800881e:	4a06      	ldr	r2, [pc, #24]	; (8008838 <HAL_I2C_MspInit+0xe4>)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008824:	bf00      	nop
 8008826:	3728      	adds	r7, #40	; 0x28
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40005400 	.word	0x40005400
 8008830:	40023800 	.word	0x40023800
 8008834:	40020400 	.word	0x40020400
 8008838:	200094cc 	.word	0x200094cc
 800883c:	400260a0 	.word	0x400260a0

08008840 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008848:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <SCB_EnableICache+0x3c>)
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008858:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800885c:	4b07      	ldr	r3, [pc, #28]	; (800887c <SCB_EnableICache+0x3c>)
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	4a06      	ldr	r2, [pc, #24]	; (800887c <SCB_EnableICache+0x3c>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008866:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800886c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008870:	bf00      	nop
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	e000ed00 	.word	0xe000ed00

08008880 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <SCB_EnableDCache+0x7c>)
 8008888:	2200      	movs	r2, #0
 800888a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800888e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008892:	4b1a      	ldr	r3, [pc, #104]	; (80088fc <SCB_EnableDCache+0x7c>)
 8008894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008898:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	0b5b      	lsrs	r3, r3, #13
 800889e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80088a2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	08db      	lsrs	r3, r3, #3
 80088a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ac:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80088b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80088bc:	490f      	ldr	r1, [pc, #60]	; (80088fc <SCB_EnableDCache+0x7c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	1e5a      	subs	r2, r3, #1
 80088c8:	60ba      	str	r2, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ef      	bne.n	80088ae <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1e5a      	subs	r2, r3, #1
 80088d2:	60fa      	str	r2, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e5      	bne.n	80088a4 <SCB_EnableDCache+0x24>
 80088d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <SCB_EnableDCache+0x7c>)
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	4a06      	ldr	r2, [pc, #24]	; (80088fc <SCB_EnableDCache+0x7c>)
 80088e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e6:	6153      	str	r3, [r2, #20]
 80088e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80088ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	e000ed00 	.word	0xe000ed00

08008900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008904:	f7ff ff9c 	bl	8008840 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008908:	f7ff ffba 	bl	8008880 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800890c:	f7f8 fb52 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008910:	f000 f83c 	bl	800898c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008914:	f7ff fdfc 	bl	8008510 <MX_GPIO_Init>
  MX_DMA_Init();
 8008918:	f7ff fce8 	bl	80082ec <MX_DMA_Init>
  MX_ADC1_Init();
 800891c:	f7ff fb1c 	bl	8007f58 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008920:	f000 fe84 	bl	800962c <MX_TIM1_Init>
  MX_TIM2_Init();
 8008924:	f000 ff3c 	bl	80097a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008928:	f000 ffc8 	bl	80098bc <MX_TIM3_Init>
  MX_TIM4_Init();
 800892c:	f001 f842 	bl	80099b4 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008930:	f001 f8bc 	bl	8009aac <MX_TIM7_Init>
  MX_TIM8_Init();
 8008934:	f001 f8f0 	bl	8009b18 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008938:	f001 f9a8 	bl	8009c8c <MX_TIM9_Init>
  MX_TIM10_Init();
 800893c:	f001 fa14 	bl	8009d68 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008940:	f001 fa60 	bl	8009e04 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008944:	f001 faac 	bl	8009ea0 <MX_TIM14_Init>
  MX_SPI1_Init();
 8008948:	f000 f930 	bl	8008bac <MX_SPI1_Init>
  MX_SPI3_Init();
 800894c:	f000 f966 	bl	8008c1c <MX_SPI3_Init>
  MX_SPI4_Init();
 8008950:	f000 f9a2 	bl	8008c98 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008954:	f000 f9de 	bl	8008d14 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008958:	f001 fd7e 	bl	800a458 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800895c:	f001 fddc 	bl	800a518 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8008960:	f7ff feb8 	bl	80086d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008964:	f001 fda8 	bl	800a4b8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008968:	f7ff fc36 	bl	80081d8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 800896c:	f004 fdfa 	bl	800d564 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008970:	f002 f8ec 	bl	800ab4c <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008974:	f003 fef2 	bl	800c75c <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 8008978:	f003 f8e4 	bl	800bb44 <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 800897c:	f006 f9b0 	bl	800ece0 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008980:	f7ff fd40 	bl	8008404 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008984:	f7fe fae0 	bl	8006f48 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008988:	e7fe      	b.n	8008988 <main+0x88>
	...

0800898c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b0b8      	sub	sp, #224	; 0xe0
 8008990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008992:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008996:	2234      	movs	r2, #52	; 0x34
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f007 fca5 	bl	80102ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	605a      	str	r2, [r3, #4]
 80089aa:	609a      	str	r2, [r3, #8]
 80089ac:	60da      	str	r2, [r3, #12]
 80089ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089b0:	f107 0308 	add.w	r3, r7, #8
 80089b4:	2290      	movs	r2, #144	; 0x90
 80089b6:	2100      	movs	r1, #0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f007 fc96 	bl	80102ea <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089be:	4b3c      	ldr	r3, [pc, #240]	; (8008ab0 <SystemClock_Config+0x124>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	4a3b      	ldr	r2, [pc, #236]	; (8008ab0 <SystemClock_Config+0x124>)
 80089c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c8:	6413      	str	r3, [r2, #64]	; 0x40
 80089ca:	4b39      	ldr	r3, [pc, #228]	; (8008ab0 <SystemClock_Config+0x124>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089d6:	4b37      	ldr	r3, [pc, #220]	; (8008ab4 <SystemClock_Config+0x128>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a36      	ldr	r2, [pc, #216]	; (8008ab4 <SystemClock_Config+0x128>)
 80089dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	4b34      	ldr	r3, [pc, #208]	; (8008ab4 <SystemClock_Config+0x128>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80089ee:	2302      	movs	r3, #2
 80089f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80089fa:	2310      	movs	r3, #16
 80089fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a00:	2302      	movs	r3, #2
 8008a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008a06:	2300      	movs	r3, #0
 8008a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008a0c:	2308      	movs	r3, #8
 8008a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008a12:	23d8      	movs	r3, #216	; 0xd8
 8008a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fa f8f3 	bl	8002c14 <HAL_RCC_OscConfig>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008a34:	f000 f8b2 	bl	8008b9c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008a38:	f7fa f89c 	bl	8002b74 <HAL_PWREx_EnableOverDrive>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008a42:	f000 f8ab 	bl	8008b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a46:	230f      	movs	r3, #15
 8008a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008a68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008a6c:	2107      	movs	r1, #7
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fa fb7e 	bl	8003170 <HAL_RCC_ClockConfig>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008a7a:	f000 f88f 	bl	8008b9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008a7e:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8008a82:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008a84:	2300      	movs	r3, #0
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008a90:	2300      	movs	r3, #0
 8008a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a94:	f107 0308 	add.w	r3, r7, #8
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fa fd6d 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008aa4:	f000 f87a 	bl	8008b9c <Error_Handler>
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	37e0      	adds	r7, #224	; 0xe0
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40023800 	.word	0x40023800
 8008ab4:	40007000 	.word	0x40007000

08008ab8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 ff3f 	bl	800a944 <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f006 fa62 	bl	800ef90 <slaveSPITxRxCpltCallback>

}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f006 fa7f 	bl	800efe0 <slaveSPIErrorCallback>

}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008af6:	2301      	movs	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d103      	bne.n	8008b08 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008b00:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e021      	b.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d103      	bne.n	8008b16 <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008b0e:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	e01a      	b.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d103      	bne.n	8008b24 <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008b1c:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b1e:	2202      	movs	r2, #2
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e013      	b.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d103      	bne.n	8008b32 <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	e00c      	b.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d103      	bne.n	8008b40 <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008b38:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b3a:	2204      	movs	r2, #4
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e005      	b.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d102      	bne.n	8008b4c <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b48:	2205      	movs	r2, #5
 8008b4a:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008b4c:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 feba 	bl	800a8cc <ADBoard_BUSYCallback>
 8008b58:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008b60:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f003 f919 	bl	800bd9c <interruptCallback>
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200008f4 	.word	0x200008f4

08008b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a04      	ldr	r2, [pc, #16]	; (8008b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d101      	bne.n	8008b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008b8a:	f7f8 fa21 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40000c00 	.word	0x40000c00

08008b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ba0:	bf00      	nop
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008bb0:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bb2:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <MX_SPI1_Init+0x6c>)
 8008bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008bb6:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008bbc:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008bc2:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008bd0:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008c00:	4804      	ldr	r0, [pc, #16]	; (8008c14 <MX_SPI1_Init+0x68>)
 8008c02:	f7fb f8df 	bl	8003dc4 <HAL_SPI_Init>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008c0c:	f7ff ffc6 	bl	8008b9c <Error_Handler>
  }

}
 8008c10:	bf00      	nop
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	200097c4 	.word	0x200097c4
 8008c18:	40013000 	.word	0x40013000

08008c1c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008c20:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c22:	4a1c      	ldr	r2, [pc, #112]	; (8008c94 <MX_SPI3_Init+0x78>)
 8008c24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008c2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008c2e:	4b18      	ldr	r3, [pc, #96]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c34:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008c3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c3c:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c42:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008c48:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c50:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c56:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c62:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008c68:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c6a:	2207      	movs	r2, #7
 8008c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008c6e:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c76:	2208      	movs	r2, #8
 8008c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008c7a:	4805      	ldr	r0, [pc, #20]	; (8008c90 <MX_SPI3_Init+0x74>)
 8008c7c:	f7fb f8a2 	bl	8003dc4 <HAL_SPI_Init>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008c86:	f7ff ff89 	bl	8008b9c <Error_Handler>
  }

}
 8008c8a:	bf00      	nop
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	2000963c 	.word	0x2000963c
 8008c94:	40003c00 	.word	0x40003c00

08008c98 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008c9e:	4a1c      	ldr	r2, [pc, #112]	; (8008d10 <MX_SPI4_Init+0x78>)
 8008ca0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008ca2:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ca8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008caa:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cb2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008cb6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cba:	2202      	movs	r2, #2
 8008cbc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008cc4:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cca:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cce:	2210      	movs	r2, #16
 8008cd0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8008ce4:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008ce6:	2207      	movs	r2, #7
 8008ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008cea:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008cf6:	4805      	ldr	r0, [pc, #20]	; (8008d0c <MX_SPI4_Init+0x74>)
 8008cf8:	f7fb f864 	bl	8003dc4 <HAL_SPI_Init>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8008d02:	f7ff ff4b 	bl	8008b9c <Error_Handler>
  }

}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20009760 	.word	0x20009760
 8008d10:	40013400 	.word	0x40013400

08008d14 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008d18:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d1a:	4a1c      	ldr	r2, [pc, #112]	; (8008d8c <MX_SPI6_Init+0x78>)
 8008d1c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d24:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8008d26:	4b18      	ldr	r3, [pc, #96]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8008d2c:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d2e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008d32:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d34:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d3a:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d46:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d4a:	2230      	movs	r2, #48	; 0x30
 8008d4c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d54:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8008d60:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d62:	2207      	movs	r2, #7
 8008d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008d66:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d6e:	2208      	movs	r2, #8
 8008d70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8008d72:	4805      	ldr	r0, [pc, #20]	; (8008d88 <MX_SPI6_Init+0x74>)
 8008d74:	f7fb f826 	bl	8003dc4 <HAL_SPI_Init>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8008d7e:	f7ff ff0d 	bl	8008b9c <Error_Handler>
  }

}
 8008d82:	bf00      	nop
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	200095d8 	.word	0x200095d8
 8008d8c:	40015400 	.word	0x40015400

08008d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b092      	sub	sp, #72	; 0x48
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a5b      	ldr	r2, [pc, #364]	; (8008f1c <HAL_SPI_MspInit+0x18c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	f040 80c4 	bne.w	8008f3c <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008db4:	4b5a      	ldr	r3, [pc, #360]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	4a59      	ldr	r2, [pc, #356]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc0:	4b57      	ldr	r3, [pc, #348]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dcc:	4b54      	ldr	r3, [pc, #336]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	4a53      	ldr	r2, [pc, #332]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd8:	4b51      	ldr	r3, [pc, #324]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008de4:	4b4e      	ldr	r3, [pc, #312]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	4a4d      	ldr	r2, [pc, #308]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dee:	6313      	str	r3, [r2, #48]	; 0x30
 8008df0:	4b4b      	ldr	r3, [pc, #300]	; (8008f20 <HAL_SPI_MspInit+0x190>)
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008dfc:	2360      	movs	r3, #96	; 0x60
 8008dfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e00:	2302      	movs	r3, #2
 8008e02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008e0c:	2305      	movs	r3, #5
 8008e0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e14:	4619      	mov	r1, r3
 8008e16:	4843      	ldr	r0, [pc, #268]	; (8008f24 <HAL_SPI_MspInit+0x194>)
 8008e18:	f7f9 fba8 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e20:	2302      	movs	r3, #2
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e24:	2301      	movs	r3, #1
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008e2c:	2305      	movs	r3, #5
 8008e2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e34:	4619      	mov	r1, r3
 8008e36:	483b      	ldr	r0, [pc, #236]	; (8008f24 <HAL_SPI_MspInit+0x194>)
 8008e38:	f7f9 fb98 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e42:	2302      	movs	r3, #2
 8008e44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008e4e:	2305      	movs	r3, #5
 8008e50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e56:	4619      	mov	r1, r3
 8008e58:	4833      	ldr	r0, [pc, #204]	; (8008f28 <HAL_SPI_MspInit+0x198>)
 8008e5a:	f7f9 fb87 	bl	800256c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8008e5e:	4b33      	ldr	r3, [pc, #204]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e60:	4a33      	ldr	r2, [pc, #204]	; (8008f30 <HAL_SPI_MspInit+0x1a0>)
 8008e62:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8008e64:	4b31      	ldr	r3, [pc, #196]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e66:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008e6a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e6c:	4b2f      	ldr	r3, [pc, #188]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e72:	4b2e      	ldr	r3, [pc, #184]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e78:	4b2c      	ldr	r3, [pc, #176]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e7e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e80:	4b2a      	ldr	r3, [pc, #168]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e86:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008e8c:	4b27      	ldr	r3, [pc, #156]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008e92:	4b26      	ldr	r3, [pc, #152]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008e98:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e9a:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008ea0:	4822      	ldr	r0, [pc, #136]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008ea2:	f7f8 ff5b 	bl	8001d5c <HAL_DMA_Init>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8008eac:	f7ff fe76 	bl	8008b9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <HAL_SPI_MspInit+0x19c>)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <HAL_SPI_MspInit+0x1a8>)
 8008ec0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ec4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008ec8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008eca:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ecc:	2240      	movs	r2, #64	; 0x40
 8008ece:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ed0:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ed6:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008edc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ede:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ee4:	4b13      	ldr	r3, [pc, #76]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008ef0:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008ef2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008ef6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ef8:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008efe:	480d      	ldr	r0, [pc, #52]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008f00:	f7f8 ff2c 	bl	8001d5c <HAL_DMA_Init>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 8008f0a:	f7ff fe47 	bl	8008b9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a08      	ldr	r2, [pc, #32]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008f12:	655a      	str	r2, [r3, #84]	; 0x54
 8008f14:	4a07      	ldr	r2, [pc, #28]	; (8008f34 <HAL_SPI_MspInit+0x1a4>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008f1a:	e1bb      	b.n	8009294 <HAL_SPI_MspInit+0x504>
 8008f1c:	40013000 	.word	0x40013000
 8008f20:	40023800 	.word	0x40023800
 8008f24:	40020000 	.word	0x40020000
 8008f28:	40021800 	.word	0x40021800
 8008f2c:	20009828 	.word	0x20009828
 8008f30:	40026440 	.word	0x40026440
 8008f34:	20009888 	.word	0x20009888
 8008f38:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a9d      	ldr	r2, [pc, #628]	; (80091b8 <HAL_SPI_MspInit+0x428>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f040 80a6 	bne.w	8009094 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008f48:	4b9c      	ldr	r3, [pc, #624]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	4a9b      	ldr	r2, [pc, #620]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f52:	6413      	str	r3, [r2, #64]	; 0x40
 8008f54:	4b99      	ldr	r3, [pc, #612]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f60:	4b96      	ldr	r3, [pc, #600]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	4a95      	ldr	r2, [pc, #596]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f66:	f043 0302 	orr.w	r3, r3, #2
 8008f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008f6c:	4b93      	ldr	r3, [pc, #588]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	623b      	str	r3, [r7, #32]
 8008f76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f78:	4b90      	ldr	r3, [pc, #576]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	4a8f      	ldr	r2, [pc, #572]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f7e:	f043 0304 	orr.w	r3, r3, #4
 8008f82:	6313      	str	r3, [r2, #48]	; 0x30
 8008f84:	4b8d      	ldr	r3, [pc, #564]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008f90:	2304      	movs	r3, #4
 8008f92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f94:	2302      	movs	r3, #2
 8008f96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008fa0:	2307      	movs	r3, #7
 8008fa2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4885      	ldr	r0, [pc, #532]	; (80091c0 <HAL_SPI_MspInit+0x430>)
 8008fac:	f7f9 fade 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008fb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008fc2:	2306      	movs	r3, #6
 8008fc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fca:	4619      	mov	r1, r3
 8008fcc:	487d      	ldr	r0, [pc, #500]	; (80091c4 <HAL_SPI_MspInit+0x434>)
 8008fce:	f7f9 facd 	bl	800256c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8008fd2:	4b7d      	ldr	r3, [pc, #500]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008fd4:	4a7d      	ldr	r2, [pc, #500]	; (80091cc <HAL_SPI_MspInit+0x43c>)
 8008fd6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008fd8:	4b7b      	ldr	r3, [pc, #492]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fde:	4b7a      	ldr	r3, [pc, #488]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fe4:	4b78      	ldr	r3, [pc, #480]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008fea:	4b77      	ldr	r3, [pc, #476]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ff0:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008ff2:	4b75      	ldr	r3, [pc, #468]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008ffa:	4b73      	ldr	r3, [pc, #460]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8008ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009000:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8009002:	4b71      	ldr	r3, [pc, #452]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8009004:	2200      	movs	r2, #0
 8009006:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009008:	4b6f      	ldr	r3, [pc, #444]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 800900a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800900e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009010:	4b6d      	ldr	r3, [pc, #436]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8009012:	2200      	movs	r2, #0
 8009014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8009016:	486c      	ldr	r0, [pc, #432]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 8009018:	f7f8 fea0 	bl	8001d5c <HAL_DMA_Init>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 8009022:	f7ff fdbb 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a67      	ldr	r2, [pc, #412]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 800902a:	659a      	str	r2, [r3, #88]	; 0x58
 800902c:	4a66      	ldr	r2, [pc, #408]	; (80091c8 <HAL_SPI_MspInit+0x438>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8009032:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009034:	4a67      	ldr	r2, [pc, #412]	; (80091d4 <HAL_SPI_MspInit+0x444>)
 8009036:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8009038:	4b65      	ldr	r3, [pc, #404]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800903a:	2200      	movs	r2, #0
 800903c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800903e:	4b64      	ldr	r3, [pc, #400]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009040:	2240      	movs	r2, #64	; 0x40
 8009042:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009044:	4b62      	ldr	r3, [pc, #392]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009046:	2200      	movs	r2, #0
 8009048:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800904a:	4b61      	ldr	r3, [pc, #388]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800904c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009050:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009052:	4b5f      	ldr	r3, [pc, #380]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009058:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800905a:	4b5d      	ldr	r3, [pc, #372]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800905c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009060:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8009062:	4b5b      	ldr	r3, [pc, #364]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009064:	2200      	movs	r2, #0
 8009066:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009068:	4b59      	ldr	r3, [pc, #356]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800906a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800906e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009070:	4b57      	ldr	r3, [pc, #348]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009072:	2200      	movs	r2, #0
 8009074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8009076:	4856      	ldr	r0, [pc, #344]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 8009078:	f7f8 fe70 	bl	8001d5c <HAL_DMA_Init>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 8009082:	f7ff fd8b 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a51      	ldr	r2, [pc, #324]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
 800908c:	4a50      	ldr	r2, [pc, #320]	; (80091d0 <HAL_SPI_MspInit+0x440>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009092:	e0ff      	b.n	8009294 <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a4f      	ldr	r2, [pc, #316]	; (80091d8 <HAL_SPI_MspInit+0x448>)
 800909a:	4293      	cmp	r3, r2
 800909c:	f040 80a8 	bne.w	80091f0 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80090a0:	4b46      	ldr	r3, [pc, #280]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a4:	4a45      	ldr	r2, [pc, #276]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090aa:	6453      	str	r3, [r2, #68]	; 0x44
 80090ac:	4b43      	ldr	r3, [pc, #268]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090b4:	61bb      	str	r3, [r7, #24]
 80090b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80090b8:	4b40      	ldr	r3, [pc, #256]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	4a3f      	ldr	r2, [pc, #252]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090be:	f043 0310 	orr.w	r3, r3, #16
 80090c2:	6313      	str	r3, [r2, #48]	; 0x30
 80090c4:	4b3d      	ldr	r3, [pc, #244]	; (80091bc <HAL_SPI_MspInit+0x42c>)
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 80090d0:	f246 0304 	movw	r3, #24580	; 0x6004
 80090d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	2302      	movs	r3, #2
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090de:	2303      	movs	r3, #3
 80090e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80090e2:	2305      	movs	r3, #5
 80090e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80090e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090ea:	4619      	mov	r1, r3
 80090ec:	483b      	ldr	r0, [pc, #236]	; (80091dc <HAL_SPI_MspInit+0x44c>)
 80090ee:	f7f9 fa3d 	bl	800256c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80090f2:	4b3b      	ldr	r3, [pc, #236]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 80090f4:	4a3b      	ldr	r2, [pc, #236]	; (80091e4 <HAL_SPI_MspInit+0x454>)
 80090f6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80090f8:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 80090fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80090fe:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009100:	4b37      	ldr	r3, [pc, #220]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009102:	2200      	movs	r2, #0
 8009104:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009106:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009108:	2200      	movs	r2, #0
 800910a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800910c:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 800910e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009112:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009114:	4b32      	ldr	r3, [pc, #200]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800911a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800911c:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 800911e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009122:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8009124:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009126:	2200      	movs	r2, #0
 8009128:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800912a:	4b2d      	ldr	r3, [pc, #180]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 800912c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009130:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009132:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009134:	2200      	movs	r2, #0
 8009136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8009138:	4829      	ldr	r0, [pc, #164]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 800913a:	f7f8 fe0f 	bl	8001d5c <HAL_DMA_Init>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 8009144:	f7ff fd2a 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a25      	ldr	r2, [pc, #148]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 800914c:	659a      	str	r2, [r3, #88]	; 0x58
 800914e:	4a24      	ldr	r2, [pc, #144]	; (80091e0 <HAL_SPI_MspInit+0x450>)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8009154:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009156:	4a25      	ldr	r2, [pc, #148]	; (80091ec <HAL_SPI_MspInit+0x45c>)
 8009158:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800915a:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 800915c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009160:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009162:	4b21      	ldr	r3, [pc, #132]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009164:	2240      	movs	r2, #64	; 0x40
 8009166:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009168:	4b1f      	ldr	r3, [pc, #124]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 800916a:	2200      	movs	r2, #0
 800916c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800916e:	4b1e      	ldr	r3, [pc, #120]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009174:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009176:	4b1c      	ldr	r3, [pc, #112]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800917c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800917e:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009184:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8009186:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009188:	2200      	movs	r2, #0
 800918a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800918c:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 800918e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009192:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009194:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 8009196:	2200      	movs	r2, #0
 8009198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800919a:	4813      	ldr	r0, [pc, #76]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 800919c:	f7f8 fdde 	bl	8001d5c <HAL_DMA_Init>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 80091a6:	f7ff fcf9 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 80091ae:	655a      	str	r2, [r3, #84]	; 0x54
 80091b0:	4a0d      	ldr	r2, [pc, #52]	; (80091e8 <HAL_SPI_MspInit+0x458>)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80091b6:	e06d      	b.n	8009294 <HAL_SPI_MspInit+0x504>
 80091b8:	40003c00 	.word	0x40003c00
 80091bc:	40023800 	.word	0x40023800
 80091c0:	40020400 	.word	0x40020400
 80091c4:	40020800 	.word	0x40020800
 80091c8:	200098e8 	.word	0x200098e8
 80091cc:	40026010 	.word	0x40026010
 80091d0:	200096a0 	.word	0x200096a0
 80091d4:	40026088 	.word	0x40026088
 80091d8:	40013400 	.word	0x40013400
 80091dc:	40021000 	.word	0x40021000
 80091e0:	20009578 	.word	0x20009578
 80091e4:	40026410 	.word	0x40026410
 80091e8:	20009700 	.word	0x20009700
 80091ec:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a29      	ldr	r2, [pc, #164]	; (800929c <HAL_SPI_MspInit+0x50c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d14c      	bne.n	8009294 <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80091fa:	4b29      	ldr	r3, [pc, #164]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	4a28      	ldr	r2, [pc, #160]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009204:	6453      	str	r3, [r2, #68]	; 0x44
 8009206:	4b26      	ldr	r3, [pc, #152]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009212:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921c:	6313      	str	r3, [r2, #48]	; 0x30
 800921e:	4b20      	ldr	r3, [pc, #128]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800922a:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009230:	f043 0302 	orr.w	r3, r3, #2
 8009234:	6313      	str	r3, [r2, #48]	; 0x30
 8009236:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <HAL_SPI_MspInit+0x510>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	60bb      	str	r3, [r7, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8009242:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009246:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009248:	2302      	movs	r3, #2
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924c:	2300      	movs	r3, #0
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009250:	2303      	movs	r3, #3
 8009252:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009254:	2305      	movs	r3, #5
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009258:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800925c:	4619      	mov	r1, r3
 800925e:	4811      	ldr	r0, [pc, #68]	; (80092a4 <HAL_SPI_MspInit+0x514>)
 8009260:	f7f9 f984 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009264:	2308      	movs	r3, #8
 8009266:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009268:	2302      	movs	r3, #2
 800926a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009270:	2303      	movs	r3, #3
 8009272:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8009274:	2308      	movs	r3, #8
 8009276:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800927c:	4619      	mov	r1, r3
 800927e:	480a      	ldr	r0, [pc, #40]	; (80092a8 <HAL_SPI_MspInit+0x518>)
 8009280:	f7f9 f974 	bl	800256c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8009284:	2200      	movs	r2, #0
 8009286:	2105      	movs	r1, #5
 8009288:	2056      	movs	r0, #86	; 0x56
 800928a:	f7f8 fd3d 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800928e:	2056      	movs	r0, #86	; 0x56
 8009290:	f7f8 fd56 	bl	8001d40 <HAL_NVIC_EnableIRQ>
}
 8009294:	bf00      	nop
 8009296:	3748      	adds	r7, #72	; 0x48
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40015400 	.word	0x40015400
 80092a0:	40023800 	.word	0x40023800
 80092a4:	40021800 	.word	0x40021800
 80092a8:	40020400 	.word	0x40020400

080092ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <HAL_MspInit+0x4c>)
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	4a10      	ldr	r2, [pc, #64]	; (80092f8 <HAL_MspInit+0x4c>)
 80092b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092bc:	6413      	str	r3, [r2, #64]	; 0x40
 80092be:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <HAL_MspInit+0x4c>)
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c6:	607b      	str	r3, [r7, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ca:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <HAL_MspInit+0x4c>)
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	4a0a      	ldr	r2, [pc, #40]	; (80092f8 <HAL_MspInit+0x4c>)
 80092d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092d4:	6453      	str	r3, [r2, #68]	; 0x44
 80092d6:	4b08      	ldr	r3, [pc, #32]	; (80092f8 <HAL_MspInit+0x4c>)
 80092d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80092e2:	2200      	movs	r2, #0
 80092e4:	210f      	movs	r1, #15
 80092e6:	f06f 0001 	mvn.w	r0, #1
 80092ea:	f7f8 fd0d 	bl	8001d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40023800 	.word	0x40023800

080092fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08c      	sub	sp, #48	; 0x30
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800930c:	2200      	movs	r2, #0
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	2032      	movs	r0, #50	; 0x32
 8009312:	f7f8 fcf9 	bl	8001d08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8009316:	2032      	movs	r0, #50	; 0x32
 8009318:	f7f8 fd12 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800931c:	4b1f      	ldr	r3, [pc, #124]	; (800939c <HAL_InitTick+0xa0>)
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	4a1e      	ldr	r2, [pc, #120]	; (800939c <HAL_InitTick+0xa0>)
 8009322:	f043 0308 	orr.w	r3, r3, #8
 8009326:	6413      	str	r3, [r2, #64]	; 0x40
 8009328:	4b1c      	ldr	r3, [pc, #112]	; (800939c <HAL_InitTick+0xa0>)
 800932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009334:	f107 0210 	add.w	r2, r7, #16
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7fa f8e8 	bl	8003514 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009344:	f7fa f8be 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8009348:	4603      	mov	r3, r0
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <HAL_InitTick+0xa4>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	0c9b      	lsrs	r3, r3, #18
 8009358:	3b01      	subs	r3, #1
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800935c:	4b11      	ldr	r3, [pc, #68]	; (80093a4 <HAL_InitTick+0xa8>)
 800935e:	4a12      	ldr	r2, [pc, #72]	; (80093a8 <HAL_InitTick+0xac>)
 8009360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8009362:	4b10      	ldr	r3, [pc, #64]	; (80093a4 <HAL_InitTick+0xa8>)
 8009364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009368:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800936a:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <HAL_InitTick+0xa8>)
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8009370:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <HAL_InitTick+0xa8>)
 8009372:	2200      	movs	r2, #0
 8009374:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <HAL_InitTick+0xa8>)
 8009378:	2200      	movs	r2, #0
 800937a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <HAL_InitTick+0xa8>)
 800937e:	f7fb fcc3 	bl	8004d08 <HAL_TIM_Base_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8009388:	4806      	ldr	r0, [pc, #24]	; (80093a4 <HAL_InitTick+0xa8>)
 800938a:	f7fb fce9 	bl	8004d60 <HAL_TIM_Base_Start_IT>
 800938e:	4603      	mov	r3, r0
 8009390:	e000      	b.n	8009394 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	; 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	431bde83 	.word	0x431bde83
 80093a4:	20009948 	.word	0x20009948
 80093a8:	40000c00 	.word	0x40000c00

080093ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80093b0:	bf00      	nop
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093ba:	b480      	push	{r7}
 80093bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093be:	e7fe      	b.n	80093be <HardFault_Handler+0x4>

080093c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093c4:	e7fe      	b.n	80093c4 <MemManage_Handler+0x4>

080093c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093c6:	b480      	push	{r7}
 80093c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093ca:	e7fe      	b.n	80093ca <BusFault_Handler+0x4>

080093cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093d0:	e7fe      	b.n	80093d0 <UsageFault_Handler+0x4>

080093d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093d2:	b480      	push	{r7}
 80093d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093d6:	bf00      	nop
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80093e4:	2001      	movs	r0, #1
 80093e6:	f7f9 fa85 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80093ea:	bf00      	nop
 80093ec:	bd80      	pop	{r7, pc}

080093ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80093f2:	2002      	movs	r0, #2
 80093f4:	f7f9 fa7e 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80093f8:	bf00      	nop
 80093fa:	bd80      	pop	{r7, pc}

080093fc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009400:	2004      	movs	r0, #4
 8009402:	f7f9 fa77 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009406:	bf00      	nop
 8009408:	bd80      	pop	{r7, pc}

0800940a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800940e:	2008      	movs	r0, #8
 8009410:	f7f9 fa70 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009414:	bf00      	nop
 8009416:	bd80      	pop	{r7, pc}

08009418 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800941c:	2010      	movs	r0, #16
 800941e:	f7f9 fa69 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009422:	bf00      	nop
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800942c:	4802      	ldr	r0, [pc, #8]	; (8009438 <DMA1_Stream0_IRQHandler+0x10>)
 800942e:	f7f8 fe35 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200098e8 	.word	0x200098e8

0800943c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009440:	4802      	ldr	r0, [pc, #8]	; (800944c <DMA1_Stream1_IRQHandler+0x10>)
 8009442:	f7f8 fe2b 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009446:	bf00      	nop
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20009c08 	.word	0x20009c08

08009450 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009454:	4802      	ldr	r0, [pc, #8]	; (8009460 <DMA1_Stream4_IRQHandler+0x10>)
 8009456:	f7f8 fe21 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800945a:	bf00      	nop
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20009ce8 	.word	0x20009ce8

08009464 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009468:	4802      	ldr	r0, [pc, #8]	; (8009474 <DMA1_Stream5_IRQHandler+0x10>)
 800946a:	f7f8 fe17 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800946e:	bf00      	nop
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200096a0 	.word	0x200096a0

08009478 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800947c:	4802      	ldr	r0, [pc, #8]	; (8009488 <DMA1_Stream6_IRQHandler+0x10>)
 800947e:	f7f8 fe0d 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009482:	bf00      	nop
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	200094cc 	.word	0x200094cc

0800948c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009490:	4802      	ldr	r0, [pc, #8]	; (800949c <CAN1_RX0_IRQHandler+0x10>)
 8009492:	f7f8 f962 	bl	800175a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200013f4 	.word	0x200013f4

080094a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80094a4:	4802      	ldr	r0, [pc, #8]	; (80094b0 <CAN1_RX1_IRQHandler+0x10>)
 80094a6:	f7f8 f958 	bl	800175a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80094aa:	bf00      	nop
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200013f4 	.word	0x200013f4

080094b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80094b8:	2020      	movs	r0, #32
 80094ba:	f7f9 fa1b 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80094be:	bf00      	nop
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80094c8:	4803      	ldr	r0, [pc, #12]	; (80094d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80094ca:	f7fb fd3b 	bl	8004f44 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80094ce:	4803      	ldr	r0, [pc, #12]	; (80094dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80094d0:	f7fb fd38 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80094d4:	bf00      	nop
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20009ac8 	.word	0x20009ac8
 80094dc:	20009a08 	.word	0x20009a08

080094e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	myUsartIntIRQ(&huart1);
 80094e4:	4803      	ldr	r0, [pc, #12]	; (80094f4 <USART1_IRQHandler+0x14>)
 80094e6:	f004 fa05 	bl	800d8f4 <myUsartIntIRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80094ea:	4802      	ldr	r0, [pc, #8]	; (80094f4 <USART1_IRQHandler+0x14>)
 80094ec:	f7fc fe7a 	bl	80061e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80094f0:	bf00      	nop
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20009d48 	.word	0x20009d48

080094f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	myUsartIntIRQ(&huart2);
 80094fc:	4803      	ldr	r0, [pc, #12]	; (800950c <USART2_IRQHandler+0x14>)
 80094fe:	f004 f9f9 	bl	800d8f4 <myUsartIntIRQ>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009502:	4802      	ldr	r0, [pc, #8]	; (800950c <USART2_IRQHandler+0x14>)
 8009504:	f7fc fe6e 	bl	80061e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009508:	bf00      	nop
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20009dc8 	.word	0x20009dc8

08009510 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	myUsartDMAIRQ(&huart3);
 8009514:	4803      	ldr	r0, [pc, #12]	; (8009524 <USART3_IRQHandler+0x14>)
 8009516:	f004 f890 	bl	800d63a <myUsartDMAIRQ>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800951a:	4802      	ldr	r0, [pc, #8]	; (8009524 <USART3_IRQHandler+0x14>)
 800951c:	f7fc fe62 	bl	80061e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009520:	bf00      	nop
 8009522:	bd80      	pop	{r7, pc}
 8009524:	20009c68 	.word	0x20009c68

08009528 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800952c:	4802      	ldr	r0, [pc, #8]	; (8009538 <TIM5_IRQHandler+0x10>)
 800952e:	f7fb fd09 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20009948 	.word	0x20009948

0800953c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8009540:	4802      	ldr	r0, [pc, #8]	; (800954c <DMA2_Stream0_IRQHandler+0x10>)
 8009542:	f7f8 fdab 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20009578 	.word	0x20009578

08009550 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009554:	4802      	ldr	r0, [pc, #8]	; (8009560 <DMA2_Stream1_IRQHandler+0x10>)
 8009556:	f7f8 fda1 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20009700 	.word	0x20009700

08009564 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009568:	4802      	ldr	r0, [pc, #8]	; (8009574 <DMA2_Stream2_IRQHandler+0x10>)
 800956a:	f7f8 fd97 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20009828 	.word	0x20009828

08009578 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800957c:	4802      	ldr	r0, [pc, #8]	; (8009588 <DMA2_Stream3_IRQHandler+0x10>)
 800957e:	f7f8 fd8d 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20009888 	.word	0x20009888

0800958c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009590:	4802      	ldr	r0, [pc, #8]	; (800959c <DMA2_Stream4_IRQHandler+0x10>)
 8009592:	f7f8 fd83 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20001394 	.word	0x20001394

080095a0 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <SPI6_IRQHandler+0x10>)
 80095a6:	f7fb f83f 	bl	8004628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200095d8 	.word	0x200095d8

080095b4 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80095b8:	f7fd fcf2 	bl	8006fa0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095bc:	bf00      	nop
 80095be:	bd80      	pop	{r7, pc}

080095c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095c0:	b480      	push	{r7}
 80095c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095c4:	4b15      	ldr	r3, [pc, #84]	; (800961c <SystemInit+0x5c>)
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ca:	4a14      	ldr	r2, [pc, #80]	; (800961c <SystemInit+0x5c>)
 80095cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80095d4:	4b12      	ldr	r3, [pc, #72]	; (8009620 <SystemInit+0x60>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a11      	ldr	r2, [pc, #68]	; (8009620 <SystemInit+0x60>)
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <SystemInit+0x60>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80095e6:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <SystemInit+0x60>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	490d      	ldr	r1, [pc, #52]	; (8009620 <SystemInit+0x60>)
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <SystemInit+0x64>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <SystemInit+0x60>)
 80095f4:	4a0c      	ldr	r2, [pc, #48]	; (8009628 <SystemInit+0x68>)
 80095f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <SystemInit+0x60>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a08      	ldr	r2, [pc, #32]	; (8009620 <SystemInit+0x60>)
 80095fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <SystemInit+0x60>)
 8009606:	2200      	movs	r2, #0
 8009608:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800960a:	4b04      	ldr	r3, [pc, #16]	; (800961c <SystemInit+0x5c>)
 800960c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009610:	609a      	str	r2, [r3, #8]
#endif
}
 8009612:	bf00      	nop
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	e000ed00 	.word	0xe000ed00
 8009620:	40023800 	.word	0x40023800
 8009624:	fef6ffff 	.word	0xfef6ffff
 8009628:	24003010 	.word	0x24003010

0800962c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b09a      	sub	sp, #104	; 0x68
 8009630:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	605a      	str	r2, [r3, #4]
 800963c:	609a      	str	r2, [r3, #8]
 800963e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800964c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	609a      	str	r2, [r3, #8]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	611a      	str	r2, [r3, #16]
 800965c:	615a      	str	r2, [r3, #20]
 800965e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	222c      	movs	r2, #44	; 0x2c
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f006 fe3f 	bl	80102ea <memset>

  htim1.Instance = TIM1;
 800966c:	4b4a      	ldr	r3, [pc, #296]	; (8009798 <MX_TIM1_Init+0x16c>)
 800966e:	4a4b      	ldr	r2, [pc, #300]	; (800979c <MX_TIM1_Init+0x170>)
 8009670:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8009672:	4b49      	ldr	r3, [pc, #292]	; (8009798 <MX_TIM1_Init+0x16c>)
 8009674:	f245 425f 	movw	r2, #21599	; 0x545f
 8009678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800967a:	4b47      	ldr	r3, [pc, #284]	; (8009798 <MX_TIM1_Init+0x16c>)
 800967c:	2200      	movs	r2, #0
 800967e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009680:	4b45      	ldr	r3, [pc, #276]	; (8009798 <MX_TIM1_Init+0x16c>)
 8009682:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009688:	4b43      	ldr	r3, [pc, #268]	; (8009798 <MX_TIM1_Init+0x16c>)
 800968a:	2200      	movs	r2, #0
 800968c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800968e:	4b42      	ldr	r3, [pc, #264]	; (8009798 <MX_TIM1_Init+0x16c>)
 8009690:	2200      	movs	r2, #0
 8009692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009694:	4b40      	ldr	r3, [pc, #256]	; (8009798 <MX_TIM1_Init+0x16c>)
 8009696:	2200      	movs	r2, #0
 8009698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800969a:	483f      	ldr	r0, [pc, #252]	; (8009798 <MX_TIM1_Init+0x16c>)
 800969c:	f7fb fb34 	bl	8004d08 <HAL_TIM_Base_Init>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80096a6:	f7ff fa79 	bl	8008b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80096aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096ae:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80096b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096b4:	4619      	mov	r1, r3
 80096b6:	4838      	ldr	r0, [pc, #224]	; (8009798 <MX_TIM1_Init+0x16c>)
 80096b8:	f7fb fe7c 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80096c2:	f7ff fa6b 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80096c6:	4834      	ldr	r0, [pc, #208]	; (8009798 <MX_TIM1_Init+0x16c>)
 80096c8:	f7fb fb74 	bl	8004db4 <HAL_TIM_PWM_Init>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80096d2:	f7ff fa63 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096d6:	2300      	movs	r3, #0
 80096d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80096da:	2300      	movs	r3, #0
 80096dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096de:	2300      	movs	r3, #0
 80096e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80096e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80096e6:	4619      	mov	r1, r3
 80096e8:	482b      	ldr	r0, [pc, #172]	; (8009798 <MX_TIM1_Init+0x16c>)
 80096ea:	f7fc fb03 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80096f4:	f7ff fa52 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096f8:	2360      	movs	r3, #96	; 0x60
 80096fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009700:	2300      	movs	r3, #0
 8009702:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009708:	2300      	movs	r3, #0
 800970a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800970c:	2300      	movs	r3, #0
 800970e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009710:	2300      	movs	r3, #0
 8009712:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009718:	2200      	movs	r2, #0
 800971a:	4619      	mov	r1, r3
 800971c:	481e      	ldr	r0, [pc, #120]	; (8009798 <MX_TIM1_Init+0x16c>)
 800971e:	f7fb fd31 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009728:	f7ff fa38 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800972c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009730:	2204      	movs	r2, #4
 8009732:	4619      	mov	r1, r3
 8009734:	4818      	ldr	r0, [pc, #96]	; (8009798 <MX_TIM1_Init+0x16c>)
 8009736:	f7fb fd25 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009740:	f7ff fa2c 	bl	8008b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009744:	2300      	movs	r3, #0
 8009746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009748:	2300      	movs	r3, #0
 800974a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800975c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009762:	2300      	movs	r3, #0
 8009764:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009770:	2300      	movs	r3, #0
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009774:	1d3b      	adds	r3, r7, #4
 8009776:	4619      	mov	r1, r3
 8009778:	4807      	ldr	r0, [pc, #28]	; (8009798 <MX_TIM1_Init+0x16c>)
 800977a:	f7fc fb49 	bl	8005e10 <HAL_TIMEx_ConfigBreakDeadTime>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009784:	f7ff fa0a 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009788:	4803      	ldr	r0, [pc, #12]	; (8009798 <MX_TIM1_Init+0x16c>)
 800978a:	f000 fcc3 	bl	800a114 <HAL_TIM_MspPostInit>

}
 800978e:	bf00      	nop
 8009790:	3768      	adds	r7, #104	; 0x68
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20009ac8 	.word	0x20009ac8
 800979c:	40010000 	.word	0x40010000

080097a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	; 0x38
 80097a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80097a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	605a      	str	r2, [r3, #4]
 80097b0:	609a      	str	r2, [r3, #8]
 80097b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097b4:	f107 031c 	add.w	r3, r7, #28
 80097b8:	2200      	movs	r2, #0
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	605a      	str	r2, [r3, #4]
 80097be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80097c0:	463b      	mov	r3, r7
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	605a      	str	r2, [r3, #4]
 80097c8:	609a      	str	r2, [r3, #8]
 80097ca:	60da      	str	r2, [r3, #12]
 80097cc:	611a      	str	r2, [r3, #16]
 80097ce:	615a      	str	r2, [r3, #20]
 80097d0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80097d2:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80097d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80097da:	4b37      	ldr	r3, [pc, #220]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097dc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80097e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097e2:	4b35      	ldr	r3, [pc, #212]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80097e8:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097f0:	4b31      	ldr	r3, [pc, #196]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097f6:	4b30      	ldr	r3, [pc, #192]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80097fc:	482e      	ldr	r0, [pc, #184]	; (80098b8 <MX_TIM2_Init+0x118>)
 80097fe:	f7fb fa83 	bl	8004d08 <HAL_TIM_Base_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009808:	f7ff f9c8 	bl	8008b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800980c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009816:	4619      	mov	r1, r3
 8009818:	4827      	ldr	r0, [pc, #156]	; (80098b8 <MX_TIM2_Init+0x118>)
 800981a:	f7fb fdcb 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009824:	f7ff f9ba 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009828:	4823      	ldr	r0, [pc, #140]	; (80098b8 <MX_TIM2_Init+0x118>)
 800982a:	f7fb fac3 	bl	8004db4 <HAL_TIM_PWM_Init>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009834:	f7ff f9b2 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800983c:	2300      	movs	r3, #0
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009840:	f107 031c 	add.w	r3, r7, #28
 8009844:	4619      	mov	r1, r3
 8009846:	481c      	ldr	r0, [pc, #112]	; (80098b8 <MX_TIM2_Init+0x118>)
 8009848:	f7fc fa54 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009852:	f7ff f9a3 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009856:	2360      	movs	r3, #96	; 0x60
 8009858:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009866:	463b      	mov	r3, r7
 8009868:	2200      	movs	r2, #0
 800986a:	4619      	mov	r1, r3
 800986c:	4812      	ldr	r0, [pc, #72]	; (80098b8 <MX_TIM2_Init+0x118>)
 800986e:	f7fb fc89 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009878:	f7ff f990 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800987c:	463b      	mov	r3, r7
 800987e:	2208      	movs	r2, #8
 8009880:	4619      	mov	r1, r3
 8009882:	480d      	ldr	r0, [pc, #52]	; (80098b8 <MX_TIM2_Init+0x118>)
 8009884:	f7fb fc7e 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800988e:	f7ff f985 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009892:	463b      	mov	r3, r7
 8009894:	220c      	movs	r2, #12
 8009896:	4619      	mov	r1, r3
 8009898:	4807      	ldr	r0, [pc, #28]	; (80098b8 <MX_TIM2_Init+0x118>)
 800989a:	f7fb fc73 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80098a4:	f7ff f97a 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80098a8:	4803      	ldr	r0, [pc, #12]	; (80098b8 <MX_TIM2_Init+0x118>)
 80098aa:	f000 fc33 	bl	800a114 <HAL_TIM_MspPostInit>

}
 80098ae:	bf00      	nop
 80098b0:	3738      	adds	r7, #56	; 0x38
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20009b48 	.word	0x20009b48

080098bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	; 0x28
 80098c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098c2:	f107 031c 	add.w	r3, r7, #28
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	605a      	str	r2, [r3, #4]
 80098cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098ce:	463b      	mov	r3, r7
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	609a      	str	r2, [r3, #8]
 80098d8:	60da      	str	r2, [r3, #12]
 80098da:	611a      	str	r2, [r3, #16]
 80098dc:	615a      	str	r2, [r3, #20]
 80098de:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80098e0:	4b32      	ldr	r3, [pc, #200]	; (80099ac <MX_TIM3_Init+0xf0>)
 80098e2:	4a33      	ldr	r2, [pc, #204]	; (80099b0 <MX_TIM3_Init+0xf4>)
 80098e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80098e6:	4b31      	ldr	r3, [pc, #196]	; (80099ac <MX_TIM3_Init+0xf0>)
 80098e8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80098ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098ee:	4b2f      	ldr	r3, [pc, #188]	; (80099ac <MX_TIM3_Init+0xf0>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80098f4:	4b2d      	ldr	r3, [pc, #180]	; (80099ac <MX_TIM3_Init+0xf0>)
 80098f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80098fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098fc:	4b2b      	ldr	r3, [pc, #172]	; (80099ac <MX_TIM3_Init+0xf0>)
 80098fe:	2200      	movs	r2, #0
 8009900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009902:	4b2a      	ldr	r3, [pc, #168]	; (80099ac <MX_TIM3_Init+0xf0>)
 8009904:	2200      	movs	r2, #0
 8009906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009908:	4828      	ldr	r0, [pc, #160]	; (80099ac <MX_TIM3_Init+0xf0>)
 800990a:	f7fb fa53 	bl	8004db4 <HAL_TIM_PWM_Init>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009914:	f7ff f942 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009918:	2300      	movs	r3, #0
 800991a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800991c:	2300      	movs	r3, #0
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009920:	f107 031c 	add.w	r3, r7, #28
 8009924:	4619      	mov	r1, r3
 8009926:	4821      	ldr	r0, [pc, #132]	; (80099ac <MX_TIM3_Init+0xf0>)
 8009928:	f7fc f9e4 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009932:	f7ff f933 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009936:	2360      	movs	r3, #96	; 0x60
 8009938:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800993e:	2300      	movs	r3, #0
 8009940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009946:	463b      	mov	r3, r7
 8009948:	2200      	movs	r2, #0
 800994a:	4619      	mov	r1, r3
 800994c:	4817      	ldr	r0, [pc, #92]	; (80099ac <MX_TIM3_Init+0xf0>)
 800994e:	f7fb fc19 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009958:	f7ff f920 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800995c:	463b      	mov	r3, r7
 800995e:	2204      	movs	r2, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4812      	ldr	r0, [pc, #72]	; (80099ac <MX_TIM3_Init+0xf0>)
 8009964:	f7fb fc0e 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800996e:	f7ff f915 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009972:	463b      	mov	r3, r7
 8009974:	2208      	movs	r2, #8
 8009976:	4619      	mov	r1, r3
 8009978:	480c      	ldr	r0, [pc, #48]	; (80099ac <MX_TIM3_Init+0xf0>)
 800997a:	f7fb fc03 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009984:	f7ff f90a 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009988:	463b      	mov	r3, r7
 800998a:	220c      	movs	r2, #12
 800998c:	4619      	mov	r1, r3
 800998e:	4807      	ldr	r0, [pc, #28]	; (80099ac <MX_TIM3_Init+0xf0>)
 8009990:	f7fb fbf8 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800999a:	f7ff f8ff 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800999e:	4803      	ldr	r0, [pc, #12]	; (80099ac <MX_TIM3_Init+0xf0>)
 80099a0:	f000 fbb8 	bl	800a114 <HAL_TIM_MspPostInit>

}
 80099a4:	bf00      	nop
 80099a6:	3728      	adds	r7, #40	; 0x28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20009a48 	.word	0x20009a48
 80099b0:	40000400 	.word	0x40000400

080099b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099ba:	f107 031c 	add.w	r3, r7, #28
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	605a      	str	r2, [r3, #4]
 80099c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099c6:	463b      	mov	r3, r7
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	605a      	str	r2, [r3, #4]
 80099ce:	609a      	str	r2, [r3, #8]
 80099d0:	60da      	str	r2, [r3, #12]
 80099d2:	611a      	str	r2, [r3, #16]
 80099d4:	615a      	str	r2, [r3, #20]
 80099d6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80099d8:	4b32      	ldr	r3, [pc, #200]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099da:	4a33      	ldr	r2, [pc, #204]	; (8009aa8 <MX_TIM4_Init+0xf4>)
 80099dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 80099de:	4b31      	ldr	r3, [pc, #196]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099e0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80099e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099e6:	4b2f      	ldr	r3, [pc, #188]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80099ec:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099f4:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009a00:	4828      	ldr	r0, [pc, #160]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a02:	f7fb f9d7 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009a0c:	f7ff f8c6 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009a18:	f107 031c 	add.w	r3, r7, #28
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4821      	ldr	r0, [pc, #132]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a20:	f7fc f968 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009a2a:	f7ff f8b7 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a2e:	2360      	movs	r3, #96	; 0x60
 8009a30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a3e:	463b      	mov	r3, r7
 8009a40:	2200      	movs	r2, #0
 8009a42:	4619      	mov	r1, r3
 8009a44:	4817      	ldr	r0, [pc, #92]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a46:	f7fb fb9d 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009a50:	f7ff f8a4 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a54:	463b      	mov	r3, r7
 8009a56:	2204      	movs	r2, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4812      	ldr	r0, [pc, #72]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a5c:	f7fb fb92 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009a66:	f7ff f899 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	4619      	mov	r1, r3
 8009a70:	480c      	ldr	r0, [pc, #48]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a72:	f7fb fb87 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009a7c:	f7ff f88e 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a80:	463b      	mov	r3, r7
 8009a82:	220c      	movs	r2, #12
 8009a84:	4619      	mov	r1, r3
 8009a86:	4807      	ldr	r0, [pc, #28]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a88:	f7fb fb7c 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009a92:	f7ff f883 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009a96:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <MX_TIM4_Init+0xf0>)
 8009a98:	f000 fb3c 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009a9c:	bf00      	nop
 8009a9e:	3728      	adds	r7, #40	; 0x28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	200099c8 	.word	0x200099c8
 8009aa8:	40000800 	.word	0x40000800

08009aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ab2:	1d3b      	adds	r3, r7, #4
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009abc:	4b14      	ldr	r3, [pc, #80]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009abe:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <MX_TIM7_Init+0x68>)
 8009ac0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009ac2:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ac8:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009ace:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ad4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009adc:	480c      	ldr	r0, [pc, #48]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009ade:	f7fb f913 	bl	8004d08 <HAL_TIM_Base_Init>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009ae8:	f7ff f858 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009aec:	2300      	movs	r3, #0
 8009aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009af4:	1d3b      	adds	r3, r7, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4805      	ldr	r0, [pc, #20]	; (8009b10 <MX_TIM7_Init+0x64>)
 8009afa:	f7fc f8fb 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009b04:	f7ff f84a 	bl	8008b9c <Error_Handler>
  }

}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20009bc8 	.word	0x20009bc8
 8009b14:	40001400 	.word	0x40001400

08009b18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b09a      	sub	sp, #104	; 0x68
 8009b1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	605a      	str	r2, [r3, #4]
 8009b28:	609a      	str	r2, [r3, #8]
 8009b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	605a      	str	r2, [r3, #4]
 8009b36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	609a      	str	r2, [r3, #8]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	611a      	str	r2, [r3, #16]
 8009b48:	615a      	str	r2, [r3, #20]
 8009b4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009b4c:	1d3b      	adds	r3, r7, #4
 8009b4e:	222c      	movs	r2, #44	; 0x2c
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f006 fbc9 	bl	80102ea <memset>

  htim8.Instance = TIM8;
 8009b58:	4b4a      	ldr	r3, [pc, #296]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b5a:	4a4b      	ldr	r2, [pc, #300]	; (8009c88 <MX_TIM8_Init+0x170>)
 8009b5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009b5e:	4b49      	ldr	r3, [pc, #292]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b60:	f245 425f 	movw	r2, #21599	; 0x545f
 8009b64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b66:	4b47      	ldr	r3, [pc, #284]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009b6c:	4b45      	ldr	r3, [pc, #276]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b74:	4b43      	ldr	r3, [pc, #268]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009b7a:	4b42      	ldr	r3, [pc, #264]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b80:	4b40      	ldr	r3, [pc, #256]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009b86:	483f      	ldr	r0, [pc, #252]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009b88:	f7fb f8be 	bl	8004d08 <HAL_TIM_Base_Init>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009b92:	f7ff f803 	bl	8008b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4838      	ldr	r0, [pc, #224]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009ba4:	f7fb fc06 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009bae:	f7fe fff5 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009bb2:	4834      	ldr	r0, [pc, #208]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009bb4:	f7fb f8fe 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009bbe:	f7fe ffed 	bl	8008b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009bce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	482b      	ldr	r0, [pc, #172]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009bd6:	f7fc f88d 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009be0:	f7fe ffdc 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009be4:	2360      	movs	r3, #96	; 0x60
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c04:	2200      	movs	r2, #0
 8009c06:	4619      	mov	r1, r3
 8009c08:	481e      	ldr	r0, [pc, #120]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009c0a:	f7fb fabb 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009c14:	f7fe ffc2 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4818      	ldr	r0, [pc, #96]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009c22:	f7fb faaf 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009c2c:	f7fe ffb6 	bl	8008b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009c34:	2300      	movs	r3, #0
 8009c36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009c60:	1d3b      	adds	r3, r7, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4807      	ldr	r0, [pc, #28]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009c66:	f7fc f8d3 	bl	8005e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009c70:	f7fe ff94 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009c74:	4803      	ldr	r0, [pc, #12]	; (8009c84 <MX_TIM8_Init+0x16c>)
 8009c76:	f000 fa4d 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009c7a:	bf00      	nop
 8009c7c:	3768      	adds	r7, #104	; 0x68
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20009988 	.word	0x20009988
 8009c88:	40010400 	.word	0x40010400

08009c8c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08c      	sub	sp, #48	; 0x30
 8009c90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c92:	f107 0320 	add.w	r3, r7, #32
 8009c96:	2200      	movs	r2, #0
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	605a      	str	r2, [r3, #4]
 8009c9c:	609a      	str	r2, [r3, #8]
 8009c9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ca0:	1d3b      	adds	r3, r7, #4
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	605a      	str	r2, [r3, #4]
 8009ca8:	609a      	str	r2, [r3, #8]
 8009caa:	60da      	str	r2, [r3, #12]
 8009cac:	611a      	str	r2, [r3, #16]
 8009cae:	615a      	str	r2, [r3, #20]
 8009cb0:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009cb2:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cb4:	4a2b      	ldr	r2, [pc, #172]	; (8009d64 <MX_TIM9_Init+0xd8>)
 8009cb6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 8009cb8:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cba:	f245 425f 	movw	r2, #21599	; 0x545f
 8009cbe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cc0:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8009cc6:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ccc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cce:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cd4:	4b22      	ldr	r3, [pc, #136]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009cda:	4821      	ldr	r0, [pc, #132]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cdc:	f7fb f814 	bl	8004d08 <HAL_TIM_Base_Init>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009ce6:	f7fe ff59 	bl	8008b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009cf0:	f107 0320 	add.w	r3, r7, #32
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	481a      	ldr	r0, [pc, #104]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009cf8:	f7fb fb5c 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009d02:	f7fe ff4b 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009d06:	4816      	ldr	r0, [pc, #88]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009d08:	f7fb f854 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009d12:	f7fe ff43 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d16:	2360      	movs	r3, #96	; 0x60
 8009d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	480c      	ldr	r0, [pc, #48]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009d2e:	f7fb fa29 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8009d38:	f7fe ff30 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d3c:	1d3b      	adds	r3, r7, #4
 8009d3e:	2204      	movs	r2, #4
 8009d40:	4619      	mov	r1, r3
 8009d42:	4807      	ldr	r0, [pc, #28]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009d44:	f7fb fa1e 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009d4e:	f7fe ff25 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8009d52:	4803      	ldr	r0, [pc, #12]	; (8009d60 <MX_TIM9_Init+0xd4>)
 8009d54:	f000 f9de 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009d58:	bf00      	nop
 8009d5a:	3730      	adds	r7, #48	; 0x30
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20009b08 	.word	0x20009b08
 8009d64:	40014000 	.word	0x40014000

08009d68 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d6e:	1d3b      	adds	r3, r7, #4
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	605a      	str	r2, [r3, #4]
 8009d76:	609a      	str	r2, [r3, #8]
 8009d78:	60da      	str	r2, [r3, #12]
 8009d7a:	611a      	str	r2, [r3, #16]
 8009d7c:	615a      	str	r2, [r3, #20]
 8009d7e:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8009d80:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <MX_TIM10_Init+0x98>)
 8009d84:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 8009d86:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009d88:	f245 425f 	movw	r2, #21599	; 0x545f
 8009d8c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d8e:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009d94:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009d96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d9a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d9c:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009da8:	4814      	ldr	r0, [pc, #80]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009daa:	f7fa ffad 	bl	8004d08 <HAL_TIM_Base_Init>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8009db4:	f7fe fef2 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009db8:	4810      	ldr	r0, [pc, #64]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009dba:	f7fa fffb 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8009dc4:	f7fe feea 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009dc8:	2360      	movs	r3, #96	; 0x60
 8009dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009dd8:	1d3b      	adds	r3, r7, #4
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4807      	ldr	r0, [pc, #28]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009de0:	f7fb f9d0 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8009dea:	f7fe fed7 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8009dee:	4803      	ldr	r0, [pc, #12]	; (8009dfc <MX_TIM10_Init+0x94>)
 8009df0:	f000 f990 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009df4:	bf00      	nop
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20009a08 	.word	0x20009a08
 8009e00:	40014400 	.word	0x40014400

08009e04 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	605a      	str	r2, [r3, #4]
 8009e12:	609a      	str	r2, [r3, #8]
 8009e14:	60da      	str	r2, [r3, #12]
 8009e16:	611a      	str	r2, [r3, #16]
 8009e18:	615a      	str	r2, [r3, #20]
 8009e1a:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8009e1c:	4b1e      	ldr	r3, [pc, #120]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e1e:	4a1f      	ldr	r2, [pc, #124]	; (8009e9c <MX_TIM11_Init+0x98>)
 8009e20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 8009e22:	4b1d      	ldr	r3, [pc, #116]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e24:	f245 425f 	movw	r2, #21599	; 0x545f
 8009e28:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8009e30:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009e36:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e38:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e3e:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009e44:	4814      	ldr	r0, [pc, #80]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e46:	f7fa ff5f 	bl	8004d08 <HAL_TIM_Base_Init>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8009e50:	f7fe fea4 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009e54:	4810      	ldr	r0, [pc, #64]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e56:	f7fa ffad 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8009e60:	f7fe fe9c 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e64:	2360      	movs	r3, #96	; 0x60
 8009e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	2200      	movs	r2, #0
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4807      	ldr	r0, [pc, #28]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e7c:	f7fb f982 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8009e86:	f7fe fe89 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8009e8a:	4803      	ldr	r0, [pc, #12]	; (8009e98 <MX_TIM11_Init+0x94>)
 8009e8c:	f000 f942 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009e90:	bf00      	nop
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20009a88 	.word	0x20009a88
 8009e9c:	40014800 	.word	0x40014800

08009ea0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ea6:	1d3b      	adds	r3, r7, #4
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	605a      	str	r2, [r3, #4]
 8009eae:	609a      	str	r2, [r3, #8]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	611a      	str	r2, [r3, #16]
 8009eb4:	615a      	str	r2, [r3, #20]
 8009eb6:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009eba:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <MX_TIM14_Init+0x98>)
 8009ebc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 8009ebe:	4b1d      	ldr	r3, [pc, #116]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ec0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009ec4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ec6:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8009ecc:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ece:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ed2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ed4:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009eda:	4b16      	ldr	r3, [pc, #88]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009ee0:	4814      	ldr	r0, [pc, #80]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ee2:	f7fa ff11 	bl	8004d08 <HAL_TIM_Base_Init>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8009eec:	f7fe fe56 	bl	8008b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009ef0:	4810      	ldr	r0, [pc, #64]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009ef2:	f7fa ff5f 	bl	8004db4 <HAL_TIM_PWM_Init>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8009efc:	f7fe fe4e 	bl	8008b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f00:	2360      	movs	r3, #96	; 0x60
 8009f02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f10:	1d3b      	adds	r3, r7, #4
 8009f12:	2200      	movs	r2, #0
 8009f14:	4619      	mov	r1, r3
 8009f16:	4807      	ldr	r0, [pc, #28]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009f18:	f7fb f934 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8009f22:	f7fe fe3b 	bl	8008b9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8009f26:	4803      	ldr	r0, [pc, #12]	; (8009f34 <MX_TIM14_Init+0x94>)
 8009f28:	f000 f8f4 	bl	800a114 <HAL_TIM_MspPostInit>

}
 8009f2c:	bf00      	nop
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20009b88 	.word	0x20009b88
 8009f38:	40002000 	.word	0x40002000

08009f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a50      	ldr	r2, [pc, #320]	; (800a08c <HAL_TIM_Base_MspInit+0x150>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d114      	bne.n	8009f78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009f4e:	4b50      	ldr	r3, [pc, #320]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f52:	4a4f      	ldr	r2, [pc, #316]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f54:	f043 0301 	orr.w	r3, r3, #1
 8009f58:	6453      	str	r3, [r2, #68]	; 0x44
 8009f5a:	4b4d      	ldr	r3, [pc, #308]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009f66:	2200      	movs	r2, #0
 8009f68:	2105      	movs	r1, #5
 8009f6a:	2019      	movs	r0, #25
 8009f6c:	f7f7 fecc 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009f70:	2019      	movs	r0, #25
 8009f72:	f7f7 fee5 	bl	8001d40 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009f76:	e084      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f80:	d10c      	bne.n	8009f9c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009f82:	4b43      	ldr	r3, [pc, #268]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	4a42      	ldr	r2, [pc, #264]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f88:	f043 0301 	orr.w	r3, r3, #1
 8009f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f8e:	4b40      	ldr	r3, [pc, #256]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	623b      	str	r3, [r7, #32]
 8009f98:	6a3b      	ldr	r3, [r7, #32]
}
 8009f9a:	e072      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a3c      	ldr	r2, [pc, #240]	; (800a094 <HAL_TIM_Base_MspInit+0x158>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d10c      	bne.n	8009fc0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009fa6:	4b3a      	ldr	r3, [pc, #232]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	4a39      	ldr	r2, [pc, #228]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fac:	f043 0320 	orr.w	r3, r3, #32
 8009fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8009fb2:	4b37      	ldr	r3, [pc, #220]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	61fb      	str	r3, [r7, #28]
 8009fbc:	69fb      	ldr	r3, [r7, #28]
}
 8009fbe:	e060      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a34      	ldr	r2, [pc, #208]	; (800a098 <HAL_TIM_Base_MspInit+0x15c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d10c      	bne.n	8009fe4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009fca:	4b31      	ldr	r3, [pc, #196]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fce:	4a30      	ldr	r2, [pc, #192]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fd0:	f043 0302 	orr.w	r3, r3, #2
 8009fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8009fd6:	4b2e      	ldr	r3, [pc, #184]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	69bb      	ldr	r3, [r7, #24]
}
 8009fe2:	e04e      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a2c      	ldr	r2, [pc, #176]	; (800a09c <HAL_TIM_Base_MspInit+0x160>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d10c      	bne.n	800a008 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009fee:	4b28      	ldr	r3, [pc, #160]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff2:	4a27      	ldr	r2, [pc, #156]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8009ffa:	4b25      	ldr	r3, [pc, #148]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	697b      	ldr	r3, [r7, #20]
}
 800a006:	e03c      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a24      	ldr	r2, [pc, #144]	; (800a0a0 <HAL_TIM_Base_MspInit+0x164>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d114      	bne.n	800a03c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a012:	4b1f      	ldr	r3, [pc, #124]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a016:	4a1e      	ldr	r2, [pc, #120]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a01c:	6453      	str	r3, [r2, #68]	; 0x44
 800a01e:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a02a:	2200      	movs	r2, #0
 800a02c:	2105      	movs	r1, #5
 800a02e:	2019      	movs	r0, #25
 800a030:	f7f7 fe6a 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a034:	2019      	movs	r0, #25
 800a036:	f7f7 fe83 	bl	8001d40 <HAL_NVIC_EnableIRQ>
}
 800a03a:	e022      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <HAL_TIM_Base_MspInit+0x168>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d10c      	bne.n	800a060 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	4a11      	ldr	r2, [pc, #68]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a04c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a050:	6453      	str	r3, [r2, #68]	; 0x44
 800a052:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
}
 800a05e:	e010      	b.n	800a082 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a10      	ldr	r2, [pc, #64]	; (800a0a8 <HAL_TIM_Base_MspInit+0x16c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d10b      	bne.n	800a082 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	4a08      	ldr	r2, [pc, #32]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a074:	6413      	str	r3, [r2, #64]	; 0x40
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <HAL_TIM_Base_MspInit+0x154>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07e:	60bb      	str	r3, [r7, #8]
 800a080:	68bb      	ldr	r3, [r7, #8]
}
 800a082:	bf00      	nop
 800a084:	3728      	adds	r7, #40	; 0x28
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40010000 	.word	0x40010000
 800a090:	40023800 	.word	0x40023800
 800a094:	40001400 	.word	0x40001400
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800
 800a0a8:	40002000 	.word	0x40002000

0800a0ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a13      	ldr	r2, [pc, #76]	; (800a108 <HAL_TIM_PWM_MspInit+0x5c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a0be:	4b13      	ldr	r3, [pc, #76]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	4a12      	ldr	r2, [pc, #72]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0c4:	f043 0302 	orr.w	r3, r3, #2
 800a0c8:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a0d6:	e010      	b.n	800a0fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a0c      	ldr	r2, [pc, #48]	; (800a110 <HAL_TIM_PWM_MspInit+0x64>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d10b      	bne.n	800a0fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	4a09      	ldr	r2, [pc, #36]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0e8:	f043 0304 	orr.w	r3, r3, #4
 800a0ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <HAL_TIM_PWM_MspInit+0x60>)
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f2:	f003 0304 	and.w	r3, r3, #4
 800a0f6:	60bb      	str	r3, [r7, #8]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
}
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	40000400 	.word	0x40000400
 800a10c:	40023800 	.word	0x40023800
 800a110:	40000800 	.word	0x40000800

0800a114 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b092      	sub	sp, #72	; 0x48
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a11c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	609a      	str	r2, [r3, #8]
 800a128:	60da      	str	r2, [r3, #12]
 800a12a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4aa5      	ldr	r2, [pc, #660]	; (800a3c8 <HAL_TIM_MspPostInit+0x2b4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d11d      	bne.n	800a172 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a136:	4ba5      	ldr	r3, [pc, #660]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13a:	4aa4      	ldr	r2, [pc, #656]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a13c:	f043 0310 	orr.w	r3, r3, #16
 800a140:	6313      	str	r3, [r2, #48]	; 0x30
 800a142:	4ba2      	ldr	r3, [pc, #648]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	633b      	str	r3, [r7, #48]	; 0x30
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a14e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a154:	2302      	movs	r3, #2
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a15c:	2300      	movs	r3, #0
 800a15e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a160:	2301      	movs	r3, #1
 800a162:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a168:	4619      	mov	r1, r3
 800a16a:	4899      	ldr	r0, [pc, #612]	; (800a3d0 <HAL_TIM_MspPostInit+0x2bc>)
 800a16c:	f7f8 f9fe 	bl	800256c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a170:	e168      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17a:	d13a      	bne.n	800a1f2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a17c:	4b93      	ldr	r3, [pc, #588]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	4a92      	ldr	r2, [pc, #584]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a182:	f043 0302 	orr.w	r3, r3, #2
 800a186:	6313      	str	r3, [r2, #48]	; 0x30
 800a188:	4b90      	ldr	r3, [pc, #576]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a194:	4b8d      	ldr	r3, [pc, #564]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	4a8c      	ldr	r2, [pc, #560]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	6313      	str	r3, [r2, #48]	; 0x30
 800a1a0:	4b8a      	ldr	r3, [pc, #552]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 800a1ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4882      	ldr	r0, [pc, #520]	; (800a3d4 <HAL_TIM_MspPostInit+0x2c0>)
 800a1ca:	f7f8 f9cf 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 800a1ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800a1e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	487b      	ldr	r0, [pc, #492]	; (800a3d8 <HAL_TIM_MspPostInit+0x2c4>)
 800a1ec:	f7f8 f9be 	bl	800256c <HAL_GPIO_Init>
}
 800a1f0:	e128      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a79      	ldr	r2, [pc, #484]	; (800a3dc <HAL_TIM_MspPostInit+0x2c8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d139      	bne.n	800a270 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1fc:	4b73      	ldr	r3, [pc, #460]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	4a72      	ldr	r2, [pc, #456]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a202:	f043 0304 	orr.w	r3, r3, #4
 800a206:	6313      	str	r3, [r2, #48]	; 0x30
 800a208:	4b70      	ldr	r3, [pc, #448]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a214:	4b6d      	ldr	r3, [pc, #436]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a218:	4a6c      	ldr	r2, [pc, #432]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a21a:	f043 0302 	orr.w	r3, r3, #2
 800a21e:	6313      	str	r3, [r2, #48]	; 0x30
 800a220:	4b6a      	ldr	r3, [pc, #424]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	623b      	str	r3, [r7, #32]
 800a22a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 800a22c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a230:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a232:	2302      	movs	r3, #2
 800a234:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a23a:	2300      	movs	r3, #0
 800a23c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a23e:	2302      	movs	r3, #2
 800a240:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a242:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a246:	4619      	mov	r1, r3
 800a248:	4865      	ldr	r0, [pc, #404]	; (800a3e0 <HAL_TIM_MspPostInit+0x2cc>)
 800a24a:	f7f8 f98f 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 800a24e:	2330      	movs	r3, #48	; 0x30
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a252:	2302      	movs	r3, #2
 800a254:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a256:	2300      	movs	r3, #0
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a25a:	2300      	movs	r3, #0
 800a25c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a25e:	2302      	movs	r3, #2
 800a260:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a266:	4619      	mov	r1, r3
 800a268:	485a      	ldr	r0, [pc, #360]	; (800a3d4 <HAL_TIM_MspPostInit+0x2c0>)
 800a26a:	f7f8 f97f 	bl	800256c <HAL_GPIO_Init>
}
 800a26e:	e0e9      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a5b      	ldr	r2, [pc, #364]	; (800a3e4 <HAL_TIM_MspPostInit+0x2d0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d11d      	bne.n	800a2b6 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a27a:	4b54      	ldr	r3, [pc, #336]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27e:	4a53      	ldr	r2, [pc, #332]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a280:	f043 0308 	orr.w	r3, r3, #8
 800a284:	6313      	str	r3, [r2, #48]	; 0x30
 800a286:	4b51      	ldr	r3, [pc, #324]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	61fb      	str	r3, [r7, #28]
 800a290:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 800a292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a296:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a298:	2302      	movs	r3, #2
 800a29a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	484e      	ldr	r0, [pc, #312]	; (800a3e8 <HAL_TIM_MspPostInit+0x2d4>)
 800a2b0:	f7f8 f95c 	bl	800256c <HAL_GPIO_Init>
}
 800a2b4:	e0c6      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a4c      	ldr	r2, [pc, #304]	; (800a3ec <HAL_TIM_MspPostInit+0x2d8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d11c      	bne.n	800a2fa <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2c0:	4b42      	ldr	r3, [pc, #264]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c4:	4a41      	ldr	r2, [pc, #260]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a2c6:	f043 0304 	orr.w	r3, r3, #4
 800a2ca:	6313      	str	r3, [r2, #48]	; 0x30
 800a2cc:	4b3f      	ldr	r3, [pc, #252]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800a2d8:	23c0      	movs	r3, #192	; 0xc0
 800a2da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	483b      	ldr	r0, [pc, #236]	; (800a3e0 <HAL_TIM_MspPostInit+0x2cc>)
 800a2f4:	f7f8 f93a 	bl	800256c <HAL_GPIO_Init>
}
 800a2f8:	e0a4      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a3c      	ldr	r2, [pc, #240]	; (800a3f0 <HAL_TIM_MspPostInit+0x2dc>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d11c      	bne.n	800a33e <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a304:	4b31      	ldr	r3, [pc, #196]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	4a30      	ldr	r2, [pc, #192]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a30a:	f043 0310 	orr.w	r3, r3, #16
 800a30e:	6313      	str	r3, [r2, #48]	; 0x30
 800a310:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	f003 0310 	and.w	r3, r3, #16
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 800a31c:	2360      	movs	r3, #96	; 0x60
 800a31e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a320:	2302      	movs	r3, #2
 800a322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a328:	2300      	movs	r3, #0
 800a32a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a32c:	2303      	movs	r3, #3
 800a32e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a334:	4619      	mov	r1, r3
 800a336:	4826      	ldr	r0, [pc, #152]	; (800a3d0 <HAL_TIM_MspPostInit+0x2bc>)
 800a338:	f7f8 f918 	bl	800256c <HAL_GPIO_Init>
}
 800a33c:	e082      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a2c      	ldr	r2, [pc, #176]	; (800a3f4 <HAL_TIM_MspPostInit+0x2e0>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d11c      	bne.n	800a382 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a348:	4b20      	ldr	r3, [pc, #128]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	4a1f      	ldr	r2, [pc, #124]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a34e:	f043 0320 	orr.w	r3, r3, #32
 800a352:	6313      	str	r3, [r2, #48]	; 0x30
 800a354:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	f003 0320 	and.w	r3, r3, #32
 800a35c:	613b      	str	r3, [r7, #16]
 800a35e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 800a360:	2340      	movs	r3, #64	; 0x40
 800a362:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a364:	2302      	movs	r3, #2
 800a366:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a36c:	2300      	movs	r3, #0
 800a36e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a370:	2303      	movs	r3, #3
 800a372:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 800a374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a378:	4619      	mov	r1, r3
 800a37a:	481f      	ldr	r0, [pc, #124]	; (800a3f8 <HAL_TIM_MspPostInit+0x2e4>)
 800a37c:	f7f8 f8f6 	bl	800256c <HAL_GPIO_Init>
}
 800a380:	e060      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <HAL_TIM_MspPostInit+0x2e8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d139      	bne.n	800a400 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a38c:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	4a0e      	ldr	r2, [pc, #56]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a392:	f043 0320 	orr.w	r3, r3, #32
 800a396:	6313      	str	r3, [r2, #48]	; 0x30
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <HAL_TIM_MspPostInit+0x2b8>)
 800a39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39c:	f003 0320 	and.w	r3, r3, #32
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 800a3a4:	2380      	movs	r3, #128	; 0x80
 800a3a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 800a3b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3bc:	4619      	mov	r1, r3
 800a3be:	480e      	ldr	r0, [pc, #56]	; (800a3f8 <HAL_TIM_MspPostInit+0x2e4>)
 800a3c0:	f7f8 f8d4 	bl	800256c <HAL_GPIO_Init>
}
 800a3c4:	e03e      	b.n	800a444 <HAL_TIM_MspPostInit+0x330>
 800a3c6:	bf00      	nop
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40023800 	.word	0x40023800
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	40020400 	.word	0x40020400
 800a3d8:	40020000 	.word	0x40020000
 800a3dc:	40000400 	.word	0x40000400
 800a3e0:	40020800 	.word	0x40020800
 800a3e4:	40000800 	.word	0x40000800
 800a3e8:	40020c00 	.word	0x40020c00
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40021400 	.word	0x40021400
 800a3fc:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <HAL_TIM_MspPostInit+0x338>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d11c      	bne.n	800a444 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <HAL_TIM_MspPostInit+0x33c>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	4a10      	ldr	r2, [pc, #64]	; (800a450 <HAL_TIM_MspPostInit+0x33c>)
 800a410:	f043 0320 	orr.w	r3, r3, #32
 800a414:	6313      	str	r3, [r2, #48]	; 0x30
 800a416:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <HAL_TIM_MspPostInit+0x33c>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f003 0320 	and.w	r3, r3, #32
 800a41e:	60bb      	str	r3, [r7, #8]
 800a420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 800a422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a426:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a428:	2302      	movs	r3, #2
 800a42a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a430:	2300      	movs	r3, #0
 800a432:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a434:	2309      	movs	r3, #9
 800a436:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 800a438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a43c:	4619      	mov	r1, r3
 800a43e:	4805      	ldr	r0, [pc, #20]	; (800a454 <HAL_TIM_MspPostInit+0x340>)
 800a440:	f7f8 f894 	bl	800256c <HAL_GPIO_Init>
}
 800a444:	bf00      	nop
 800a446:	3748      	adds	r7, #72	; 0x48
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40002000 	.word	0x40002000
 800a450:	40023800 	.word	0x40023800
 800a454:	40021400 	.word	0x40021400

0800a458 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a45c:	4b14      	ldr	r3, [pc, #80]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a45e:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <MX_USART1_UART_Init+0x5c>)
 800a460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a462:	4b13      	ldr	r3, [pc, #76]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a46a:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a470:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a472:	2200      	movs	r2, #0
 800a474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a476:	4b0e      	ldr	r3, [pc, #56]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a478:	2200      	movs	r2, #0
 800a47a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a47e:	220c      	movs	r2, #12
 800a480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a482:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a484:	2200      	movs	r2, #0
 800a486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a488:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a490:	2200      	movs	r2, #0
 800a492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a494:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a496:	2200      	movs	r2, #0
 800a498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a49a:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <MX_USART1_UART_Init+0x58>)
 800a49c:	f7fb fd54 	bl	8005f48 <HAL_UART_Init>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a4a6:	f7fe fb79 	bl	8008b9c <Error_Handler>
  }

}
 800a4aa:	bf00      	nop
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20009d48 	.word	0x20009d48
 800a4b4:	40011000 	.word	0x40011000

0800a4b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a4bc:	4b14      	ldr	r3, [pc, #80]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4be:	4a15      	ldr	r2, [pc, #84]	; (800a514 <MX_USART2_UART_Init+0x5c>)
 800a4c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a4c2:	4b13      	ldr	r3, [pc, #76]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a4c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a4d6:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4de:	220c      	movs	r2, #12
 800a4e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4e8:	4b09      	ldr	r3, [pc, #36]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a4ee:	4b08      	ldr	r3, [pc, #32]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a4fa:	4805      	ldr	r0, [pc, #20]	; (800a510 <MX_USART2_UART_Init+0x58>)
 800a4fc:	f7fb fd24 	bl	8005f48 <HAL_UART_Init>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a506:	f7fe fb49 	bl	8008b9c <Error_Handler>
  }

}
 800a50a:	bf00      	nop
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20009dc8 	.word	0x20009dc8
 800a514:	40004400 	.word	0x40004400

0800a518 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a51c:	4b14      	ldr	r3, [pc, #80]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a51e:	4a15      	ldr	r2, [pc, #84]	; (800a574 <MX_USART3_UART_Init+0x5c>)
 800a520:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a522:	4b13      	ldr	r3, [pc, #76]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a524:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a528:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a52a:	4b11      	ldr	r3, [pc, #68]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a532:	2200      	movs	r2, #0
 800a534:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a538:	2200      	movs	r2, #0
 800a53a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a53c:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a53e:	220c      	movs	r2, #12
 800a540:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a542:	4b0b      	ldr	r3, [pc, #44]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a544:	2200      	movs	r2, #0
 800a546:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a548:	4b09      	ldr	r3, [pc, #36]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a54e:	4b08      	ldr	r3, [pc, #32]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a550:	2200      	movs	r2, #0
 800a552:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a556:	2200      	movs	r2, #0
 800a558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a55a:	4805      	ldr	r0, [pc, #20]	; (800a570 <MX_USART3_UART_Init+0x58>)
 800a55c:	f7fb fcf4 	bl	8005f48 <HAL_UART_Init>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a566:	f7fe fb19 	bl	8008b9c <Error_Handler>
  }

}
 800a56a:	bf00      	nop
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20009c68 	.word	0x20009c68
 800a574:	40004800 	.word	0x40004800

0800a578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08e      	sub	sp, #56	; 0x38
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a584:	2200      	movs	r2, #0
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	609a      	str	r2, [r3, #8]
 800a58c:	60da      	str	r2, [r3, #12]
 800a58e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a89      	ldr	r2, [pc, #548]	; (800a7bc <HAL_UART_MspInit+0x244>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d141      	bne.n	800a61e <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a59a:	4b89      	ldr	r3, [pc, #548]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59e:	4a88      	ldr	r2, [pc, #544]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a5a0:	f043 0310 	orr.w	r3, r3, #16
 800a5a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a5a6:	4b86      	ldr	r3, [pc, #536]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5aa:	f003 0310 	and.w	r3, r3, #16
 800a5ae:	623b      	str	r3, [r7, #32]
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5b2:	4b83      	ldr	r3, [pc, #524]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	4a82      	ldr	r2, [pc, #520]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a5b8:	f043 0302 	orr.w	r3, r3, #2
 800a5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5be:	4b80      	ldr	r3, [pc, #512]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	61fb      	str	r3, [r7, #28]
 800a5c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a5dc:	2304      	movs	r3, #4
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4877      	ldr	r0, [pc, #476]	; (800a7c4 <HAL_UART_MspInit+0x24c>)
 800a5e8:	f7f7 ffc0 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a5fc:	2307      	movs	r3, #7
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a604:	4619      	mov	r1, r3
 800a606:	486f      	ldr	r0, [pc, #444]	; (800a7c4 <HAL_UART_MspInit+0x24c>)
 800a608:	f7f7 ffb0 	bl	800256c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a60c:	2200      	movs	r2, #0
 800a60e:	2105      	movs	r1, #5
 800a610:	2025      	movs	r0, #37	; 0x25
 800a612:	f7f7 fb79 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a616:	2025      	movs	r0, #37	; 0x25
 800a618:	f7f7 fb92 	bl	8001d40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a61c:	e0ca      	b.n	800a7b4 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a69      	ldr	r2, [pc, #420]	; (800a7c8 <HAL_UART_MspInit+0x250>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d130      	bne.n	800a68a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a628:	4b65      	ldr	r3, [pc, #404]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	4a64      	ldr	r2, [pc, #400]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a62e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a632:	6413      	str	r3, [r2, #64]	; 0x40
 800a634:	4b62      	ldr	r3, [pc, #392]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a640:	4b5f      	ldr	r3, [pc, #380]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	4a5e      	ldr	r2, [pc, #376]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a646:	f043 0308 	orr.w	r3, r3, #8
 800a64a:	6313      	str	r3, [r2, #48]	; 0x30
 800a64c:	4b5c      	ldr	r3, [pc, #368]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a658:	2360      	movs	r3, #96	; 0x60
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a65c:	2302      	movs	r3, #2
 800a65e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a660:	2302      	movs	r3, #2
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a664:	2303      	movs	r3, #3
 800a666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a668:	2307      	movs	r3, #7
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a66c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a670:	4619      	mov	r1, r3
 800a672:	4856      	ldr	r0, [pc, #344]	; (800a7cc <HAL_UART_MspInit+0x254>)
 800a674:	f7f7 ff7a 	bl	800256c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a678:	2200      	movs	r2, #0
 800a67a:	2105      	movs	r1, #5
 800a67c:	2026      	movs	r0, #38	; 0x26
 800a67e:	f7f7 fb43 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a682:	2026      	movs	r0, #38	; 0x26
 800a684:	f7f7 fb5c 	bl	8001d40 <HAL_NVIC_EnableIRQ>
}
 800a688:	e094      	b.n	800a7b4 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART3)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a50      	ldr	r2, [pc, #320]	; (800a7d0 <HAL_UART_MspInit+0x258>)
 800a690:	4293      	cmp	r3, r2
 800a692:	f040 808f 	bne.w	800a7b4 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a696:	4b4a      	ldr	r3, [pc, #296]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	4a49      	ldr	r2, [pc, #292]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a69c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6a0:	6413      	str	r3, [r2, #64]	; 0x40
 800a6a2:	4b47      	ldr	r3, [pc, #284]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6aa:	613b      	str	r3, [r7, #16]
 800a6ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a6ae:	4b44      	ldr	r3, [pc, #272]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b2:	4a43      	ldr	r2, [pc, #268]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a6b4:	f043 0308 	orr.w	r3, r3, #8
 800a6b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ba:	4b41      	ldr	r3, [pc, #260]	; (800a7c0 <HAL_UART_MspInit+0x248>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a6c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a6d8:	2307      	movs	r3, #7
 800a6da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	483a      	ldr	r0, [pc, #232]	; (800a7cc <HAL_UART_MspInit+0x254>)
 800a6e4:	f7f7 ff42 	bl	800256c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a6e8:	4b3a      	ldr	r3, [pc, #232]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a6ea:	4a3b      	ldr	r2, [pc, #236]	; (800a7d8 <HAL_UART_MspInit+0x260>)
 800a6ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a6ee:	4b39      	ldr	r3, [pc, #228]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a6f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a6f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a6f6:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a6fc:	4b35      	ldr	r3, [pc, #212]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a702:	4b34      	ldr	r3, [pc, #208]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a708:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a70a:	4b32      	ldr	r3, [pc, #200]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a710:	4b30      	ldr	r3, [pc, #192]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a712:	2200      	movs	r2, #0
 800a714:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a718:	2200      	movs	r2, #0
 800a71a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a71c:	4b2d      	ldr	r3, [pc, #180]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a71e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a722:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a724:	4b2b      	ldr	r3, [pc, #172]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a726:	2200      	movs	r2, #0
 800a728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a72a:	482a      	ldr	r0, [pc, #168]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a72c:	f7f7 fb16 	bl	8001d5c <HAL_DMA_Init>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800a736:	f7fe fa31 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a25      	ldr	r2, [pc, #148]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a73e:	66da      	str	r2, [r3, #108]	; 0x6c
 800a740:	4a24      	ldr	r2, [pc, #144]	; (800a7d4 <HAL_UART_MspInit+0x25c>)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800a746:	4b25      	ldr	r3, [pc, #148]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a748:	4a25      	ldr	r2, [pc, #148]	; (800a7e0 <HAL_UART_MspInit+0x268>)
 800a74a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800a74c:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a74e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800a752:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a756:	2240      	movs	r2, #64	; 0x40
 800a758:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a75a:	4b20      	ldr	r3, [pc, #128]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a760:	4b1e      	ldr	r3, [pc, #120]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a766:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a768:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a76e:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a770:	2200      	movs	r2, #0
 800a772:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800a774:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a776:	2200      	movs	r2, #0
 800a778:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a77a:	4b18      	ldr	r3, [pc, #96]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a77c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a780:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a782:	4b16      	ldr	r3, [pc, #88]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a784:	2200      	movs	r2, #0
 800a786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a788:	4814      	ldr	r0, [pc, #80]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a78a:	f7f7 fae7 	bl	8001d5c <HAL_DMA_Init>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <HAL_UART_MspInit+0x220>
      Error_Handler();
 800a794:	f7fe fa02 	bl	8008b9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a79c:	669a      	str	r2, [r3, #104]	; 0x68
 800a79e:	4a0f      	ldr	r2, [pc, #60]	; (800a7dc <HAL_UART_MspInit+0x264>)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2105      	movs	r1, #5
 800a7a8:	2027      	movs	r0, #39	; 0x27
 800a7aa:	f7f7 faad 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a7ae:	2027      	movs	r0, #39	; 0x27
 800a7b0:	f7f7 fac6 	bl	8001d40 <HAL_NVIC_EnableIRQ>
}
 800a7b4:	bf00      	nop
 800a7b6:	3738      	adds	r7, #56	; 0x38
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40011000 	.word	0x40011000
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	40020400 	.word	0x40020400
 800a7c8:	40004400 	.word	0x40004400
 800a7cc:	40020c00 	.word	0x40020c00
 800a7d0:	40004800 	.word	0x40004800
 800a7d4:	20009c08 	.word	0x20009c08
 800a7d8:	40026028 	.word	0x40026028
 800a7dc:	20009ce8 	.word	0x20009ce8
 800a7e0:	40026070 	.word	0x40026070

0800a7e4 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 fa9c 	bl	800bd32 <DigitalWrite>
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f001 fa8d 	bl	800bd32 <DigitalWrite>
}
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f001 fa7e 	bl	800bd32 <DigitalWrite>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a84c:	2101      	movs	r1, #1
 800a84e:	4618      	mov	r0, r3
 800a850:	f001 fa6f 	bl	800bd32 <DigitalWrite>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 fa60 	bl	800bd32 <DigitalWrite>
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a888:	2101      	movs	r1, #1
 800a88a:	4618      	mov	r0, r3
 800a88c:	f001 fa51 	bl	800bd32 <DigitalWrite>
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff ffb9 	bl	800a820 <AD_CONV_LOW>
	delay_ns(200);
 800a8ae:	20c8      	movs	r0, #200	; 0xc8
 800a8b0:	f001 fac4 	bl	800be3c <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ffc2 	bl	800a83e <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
 800a8de:	e024      	b.n	800a92a <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a8e0:	4b16      	ldr	r3, [pc, #88]	; (800a93c <ADBoard_BUSYCallback+0x70>)
 800a8e2:	6819      	ldr	r1, [r3, #0]
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	440b      	add	r3, r1
 800a8f0:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d112      	bne.n	800a924 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800a8fe:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <ADBoard_BUSYCallback+0x70>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	b292      	uxth	r2, r2
 800a906:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff ff6a 	bl	800a7e4 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	2308      	movs	r3, #8
 800a918:	4909      	ldr	r1, [pc, #36]	; (800a940 <ADBoard_BUSYCallback+0x74>)
 800a91a:	f7f9 fcf9 	bl	8004310 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
				break;
 800a922:	e005      	b.n	800a930 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	3301      	adds	r3, #1
 800a928:	613b      	str	r3, [r7, #16]
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	ddd7      	ble.n	800a8e0 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800a930:	697b      	ldr	r3, [r7, #20]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000010 	.word	0x20000010
 800a940:	20000014 	.word	0x20000014

0800a944 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	int ret=1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
 800a954:	e081      	b.n	800aa5a <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a956:	4b45      	ldr	r3, [pc, #276]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a958:	6819      	ldr	r1, [r3, #0]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	440b      	add	r3, r1
 800a966:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d170      	bne.n	800aa54 <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
 800a972:	4b3e      	ldr	r3, [pc, #248]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	b292      	uxth	r2, r2
 800a97a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800a97e:	68b8      	ldr	r0, [r7, #8]
 800a980:	f7ff ff3f 	bl	800a802 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	e01a      	b.n	800a9d0 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9aa:	eddf 6a31 	vldr	s13, [pc, #196]	; 800aa70 <ADBoard_SPICallback+0x12c>
 800a9ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a9b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b07      	cmp	r3, #7
 800a9d4:	dde1      	ble.n	800a99a <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800a9d6:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9de:	3301      	adds	r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dc19      	bgt.n	800aa18 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800a9e4:	4b21      	ldr	r3, [pc, #132]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800a9ec:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3201      	adds	r2, #1
 800a9f2:	b292      	uxth	r2, r2
 800a9f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a9f8:	4b1c      	ldr	r3, [pc, #112]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4b1b      	ldr	r3, [pc, #108]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa04:	4619      	mov	r1, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	4413      	add	r3, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff ff41 	bl	800a898 <AD7616_getVoltage>
 800aa16:	e01a      	b.n	800aa4e <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800aa18:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800aa24:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800aa2e:	f001 f9d5 	bl	800bddc <micros>
 800aa32:	4602      	mov	r2, r0
 800aa34:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa46:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <ADBoard_SPICallback+0x128>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	1a8a      	subs	r2, r1, r2
 800aa4c:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
					break;
 800aa52:	e006      	b.n	800aa62 <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	3301      	adds	r3, #1
 800aa58:	613b      	str	r3, [r7, #16]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f77f af7a 	ble.w	800a956 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800aa62:	697b      	ldr	r3, [r7, #20]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20000010 	.word	0x20000010
 800aa70:	47800000 	.word	0x47800000

0800aa74 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <ADBoard_Reset+0x34>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff feeb 	bl	800a85c <AD_RESET_LOW>
	delay_us(5);
 800aa86:	2005      	movs	r0, #5
 800aa88:	f001 f9be 	bl	800be08 <delay_us>
	AD_RESET_HIGH(ptADDev);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff fef4 	bl	800a87a <AD_RESET_HIGH>
	delay_us(5);
 800aa92:	2005      	movs	r0, #5
 800aa94:	f001 f9b8 	bl	800be08 <delay_us>
	AD_RESET_LOW(ptADDev);}
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff fedf 	bl	800a85c <AD_RESET_LOW>

}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000010 	.word	0x20000010

0800aaac <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800aab0:	4b10      	ldr	r3, [pc, #64]	; (800aaf4 <ADBoard_updateVoltage+0x48>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800aaba:	4b0e      	ldr	r3, [pc, #56]	; (800aaf4 <ADBoard_updateVoltage+0x48>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800aac4:	f001 f98a 	bl	800bddc <micros>
 800aac8:	4602      	mov	r2, r0
 800aaca:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <ADBoard_updateVoltage+0x48>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800aad0:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <ADBoard_updateVoltage+0x48>)
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <ADBoard_updateVoltage+0x48>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aadc:	4619      	mov	r1, r3
 800aade:	460b      	mov	r3, r1
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	4413      	add	r3, r2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fed5 	bl	800a898 <AD7616_getVoltage>
}
 800aaee:	bf00      	nop
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000010 	.word	0x20000010

0800aaf8 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	2b07      	cmp	r3, #7
 800ab06:	d814      	bhi.n	800ab32 <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD76x6_CHANNELNUM;
 800ab08:	88fb      	ldrh	r3, [r7, #6]
 800ab0a:	08db      	lsrs	r3, r3, #3
 800ab0c:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD76x6_CHANNELNUM;
 800ab0e:	88fb      	ldrh	r3, [r7, #6]
 800ab10:	f003 0307 	and.w	r3, r3, #7
 800ab14:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <AnalogRead_External+0x50>)
 800ab18:	6819      	ldr	r1, [r3, #0]
 800ab1a:	89fa      	ldrh	r2, [r7, #14]
 800ab1c:	89b8      	ldrh	r0, [r7, #12]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4403      	add	r3, r0
 800ab28:	3304      	adds	r3, #4
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	e001      	b.n	800ab36 <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	ee07 3a90 	vmov	s15, r3
}
 800ab3a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	20000010 	.word	0x20000010

0800ab4c <ADBoard_Init>:

void ADBoard_Init()
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800ab52:	230b      	movs	r3, #11
 800ab54:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800ab56:	230c      	movs	r3, #12
 800ab58:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800ab5a:	230d      	movs	r3, #13
 800ab5c:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800ab62:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800ab6e:	4b25      	ldr	r3, [pc, #148]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800ab78:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800ab80:	4b20      	ldr	r3, [pc, #128]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2200      	movs	r2, #0
 800ab86:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800ab88:	4b1e      	ldr	r3, [pc, #120]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800ab90:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1c      	ldr	r2, [pc, #112]	; (800ac08 <ADBoard_Init+0xbc>)
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800ab98:	4b1a      	ldr	r3, [pc, #104]	; (800ac04 <ADBoard_Init+0xb8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <ADBoard_Init+0xc0>)
 800ab9e:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800aba0:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <ADBoard_Init+0xb8>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800aba8:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <ADBoard_Init+0xb8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <ADBoard_Init+0xb8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abb8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800abbc:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <ADBoard_Init+0xb8>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a13      	ldr	r2, [pc, #76]	; (800ac10 <ADBoard_Init+0xc4>)
 800abc2:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800abc4:	4b0f      	ldr	r3, [pc, #60]	; (800ac04 <ADBoard_Init+0xb8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	79fa      	ldrb	r2, [r7, #7]
 800abca:	b292      	uxth	r2, r2
 800abcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800abd0:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <ADBoard_Init+0xb8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	797a      	ldrb	r2, [r7, #5]
 800abd6:	b292      	uxth	r2, r2
 800abd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800abdc:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <ADBoard_Init+0xb8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	79ba      	ldrb	r2, [r7, #6]
 800abe2:	b292      	uxth	r2, r2
 800abe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800abe8:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <ADBoard_Init+0xb8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	793a      	ldrb	r2, [r7, #4]
 800abee:	b292      	uxth	r2, r2
 800abf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800abf4:	f7ff ff3e 	bl	800aa74 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800abf8:	f7ff ff58 	bl	800aaac <ADBoard_updateVoltage>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	20000010 	.word	0x20000010
 800ac08:	c1200000 	.word	0xc1200000
 800ac0c:	41200000 	.word	0x41200000
 800ac10:	20009760 	.word	0x20009760

0800ac14 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800ac14:	b5b0      	push	{r4, r5, r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3304      	adds	r3, #4
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 f96f 	bl	800bf0c <_ZN14SOLENOID_VALVEC1Ei>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	331c      	adds	r3, #28
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f969 	bl	800bf0c <_ZN14SOLENOID_VALVEC1Ei>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3334      	adds	r3, #52	; 0x34
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 fbc1 	bl	800b3c8 <_ZN15PRESSURE_SENSORC1Ei>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3350      	adds	r3, #80	; 0x50
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f003 f826 	bl	800dc9c <_ZN18PRESSURE_SENSORSPIC1Ev>
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	f241 036c 	movw	r3, #4204	; 0x106c
 800ac56:	4413      	add	r3, r2
 800ac58:	4a64      	ldr	r2, [pc, #400]	; (800adec <_ZN7CHAMBERC1Eiii+0x1d8>)
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800ac74:	4a5e      	ldr	r2, [pc, #376]	; (800adf0 <_ZN7CHAMBERC1Eiii+0x1dc>)
 800ac76:	461c      	mov	r4, r3
 800ac78:	4615      	mov	r5, r2
 800ac7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800ac90:	4413      	add	r3, r2
 800ac92:	4a58      	ldr	r2, [pc, #352]	; (800adf4 <_ZN7CHAMBERC1Eiii+0x1e0>)
 800ac94:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800ac9c:	4413      	add	r3, r2
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68f9      	ldr	r1, [r7, #12]
 800aca2:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800aca6:	440b      	add	r3, r1
 800aca8:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4a52      	ldr	r2, [pc, #328]	; (800adf8 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800acae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pressure=0;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f04f 0200 	mov.w	r2, #0
 800acb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pressureDeadZone = 2000;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4a47      	ldr	r2, [pc, #284]	; (800adfc <_ZN7CHAMBERC1Eiii+0x1e8>)
 800ace0:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	4a46      	ldr	r2, [pc, #280]	; (800ae00 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800ace6:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4a46      	ldr	r2, [pc, #280]	; (800ae04 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800acec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f241 035c 	movw	r3, #4188	; 0x105c
 800acf6:	4413      	add	r3, r2
 800acf8:	2201      	movs	r2, #1
 800acfa:	601a      	str	r2, [r3, #0]
	opening = 0;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f04f 0200 	mov.w	r2, #0
 800ad02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da00      	bge.n	800ad16 <_ZN7CHAMBERC1Eiii+0x102>
 800ad14:	3301      	adds	r3, #1
 800ad16:	105b      	asrs	r3, r3, #1
 800ad18:	4a3b      	ldr	r2, [pc, #236]	; (800ae08 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4413      	add	r3, r2
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da00      	bge.n	800ad2e <_ZN7CHAMBERC1Eiii+0x11a>
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	105b      	asrs	r3, r3, #1
 800ad30:	4a35      	ldr	r2, [pc, #212]	; (800ae08 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	4413      	add	r3, r2
 800ad36:	3304      	adds	r3, #4
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da00      	bge.n	800ad48 <_ZN7CHAMBERC1Eiii+0x134>
 800ad46:	3301      	adds	r3, #1
 800ad48:	105b      	asrs	r3, r3, #1
 800ad4a:	4a2f      	ldr	r2, [pc, #188]	; (800ae08 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	4413      	add	r3, r2
 800ad50:	3308      	adds	r3, #8
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	da00      	bge.n	800ad62 <_ZN7CHAMBERC1Eiii+0x14e>
 800ad60:	3301      	adds	r3, #1
 800ad62:	105b      	asrs	r3, r3, #1
 800ad64:	4a28      	ldr	r2, [pc, #160]	; (800ae08 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800ad66:	011b      	lsls	r3, r3, #4
 800ad68:	4413      	add	r3, r2
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ad7a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800ad7e:	eddf 4a23 	vldr	s9, [pc, #140]	; 800ae0c <_ZN7CHAMBERC1Eiii+0x1f8>
 800ad82:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800ae10 <_ZN7CHAMBERC1Eiii+0x1fc>
 800ad86:	eddf 3a23 	vldr	s7, [pc, #140]	; 800ae14 <_ZN7CHAMBERC1Eiii+0x200>
 800ad8a:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800ae14 <_ZN7CHAMBERC1Eiii+0x200>
 800ad8e:	eddf 2a22 	vldr	s5, [pc, #136]	; 800ae18 <_ZN7CHAMBERC1Eiii+0x204>
 800ad92:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800ae1c <_ZN7CHAMBERC1Eiii+0x208>
 800ad96:	eddf 1a22 	vldr	s3, [pc, #136]	; 800ae20 <_ZN7CHAMBERC1Eiii+0x20c>
 800ad9a:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800ae24 <_ZN7CHAMBERC1Eiii+0x210>
 800ad9e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ae14 <_ZN7CHAMBERC1Eiii+0x200>
 800ada2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ae28 <_ZN7CHAMBERC1Eiii+0x214>
 800ada6:	f000 faad 	bl	800b304 <NewPressureController>
 800adaa:	4602      	mov	r2, r0
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	f241 0364 	movw	r3, #4196	; 0x1064
 800adb6:	4413      	add	r3, r2
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	f241 0368 	movw	r3, #4200	; 0x1068
 800adcc:	4413      	add	r3, r2
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	33bc      	adds	r3, #188	; 0xbc
 800add6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f005 fa84 	bl	80102ea <memset>

}
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bdb0      	pop	{r4, r5, r7, pc}
 800adec:	08014750 	.word	0x08014750
 800adf0:	08014784 	.word	0x08014784
 800adf4:	3e99999a 	.word	0x3e99999a
 800adf8:	3c23d70a 	.word	0x3c23d70a
 800adfc:	44fa0000 	.word	0x44fa0000
 800ae00:	46ea6000 	.word	0x46ea6000
 800ae04:	c6ea6000 	.word	0xc6ea6000
 800ae08:	20000034 	.word	0x20000034
 800ae0c:	3e99999a 	.word	0x3e99999a
 800ae10:	387ba882 	.word	0x387ba882
 800ae14:	00000000 	.word	0x00000000
 800ae18:	37a7c5ac 	.word	0x37a7c5ac
 800ae1c:	471c4000 	.word	0x471c4000
 800ae20:	501502f9 	.word	0x501502f9
 800ae24:	3a83126f 	.word	0x3a83126f
 800ae28:	48435000 	.word	0x48435000

0800ae2c <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f88d 	bl	800bf60 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	331c      	adds	r3, #28
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f887 	bl	800bf60 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3334      	adds	r3, #52	; 0x34
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 fb17 	bl	800b48c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800ae5e:	bf00      	nop
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <_ZN7CHAMBER12readPressureEv>:

float CHAMBER::readPressure(){
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]

	/************************customize the correct pressure souce according to the project**********/

	pressureRaw = pressureSensor.read();
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3334      	adds	r3, #52	; 0x34
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 fabe 	bl	800b414 <_ZN15PRESSURE_SENSOR4readEv>
 800ae98:	eef0 7a40 	vmov.f32	s15, s0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	//pressureRaw = pressureSensorspi.read();
	pressure=pressureRaw-pressureOffset;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800aeae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aebe:	ee07 3a90 	vmov	s15, r3
}
 800aec2:	eeb0 0a67 	vmov.f32	s0, s15
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800aed8:	edd7 7a00 	vldr	s15, [r7]
 800aedc:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b0c0 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800aee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee8:	d501      	bpl.n	800aeee <_ZN7CHAMBER13writePressureEf+0x22>
 800aeea:	4b76      	ldr	r3, [pc, #472]	; (800b0c4 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800aeec:	e00b      	b.n	800af06 <_ZN7CHAMBER13writePressureEf+0x3a>
 800aeee:	edd7 7a00 	vldr	s15, [r7]
 800aef2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b0c8 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800aef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefe:	dd01      	ble.n	800af04 <_ZN7CHAMBER13writePressureEf+0x38>
 800af00:	4b72      	ldr	r3, [pc, #456]	; (800b0cc <_ZN7CHAMBER13writePressureEf+0x200>)
 800af02:	e000      	b.n	800af06 <_ZN7CHAMBER13writePressureEf+0x3a>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	float pErr = pressureCommand-pressure;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800af18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af1c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800af26:	edd7 7a03 	vldr	s15, [r7, #12]
 800af2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af32:	d54e      	bpl.n	800afd2 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800af40:	edd7 7a03 	vldr	s15, [r7, #12]
 800af44:	eef4 6ae7 	vcmpe.f32	s13, s15
 800af48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4c:	dd03      	ble.n	800af56 <_ZN7CHAMBER13writePressureEf+0x8a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800af54:	e019      	b.n	800af8a <_ZN7CHAMBER13writePressureEf+0xbe>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800af62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800af66:	edd7 7a03 	vldr	s15, [r7, #12]
 800af6a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800af6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af72:	d508      	bpl.n	800af86 <_ZN7CHAMBER13writePressureEf+0xba>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800af80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af84:	e001      	b.n	800af8a <_ZN7CHAMBER13writePressureEf+0xbe>
 800af86:	edd7 7a03 	vldr	s15, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800af90:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800afa0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800afa4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800afb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800afbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800afc2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800afc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800afd0:	e06a      	b.n	800b0a8 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800afd8:	eeb1 7a67 	vneg.f32	s14, s15
 800afdc:	edd7 7a03 	vldr	s15, [r7, #12]
 800afe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe8:	dd59      	ble.n	800b09e <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800affc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b000:	edd7 7a03 	vldr	s15, [r7, #12]
 800b004:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00c:	dd08      	ble.n	800b020 <_ZN7CHAMBER13writePressureEf+0x154>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b01a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b01e:	e013      	b.n	800b048 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b026:	eef1 6a67 	vneg.f32	s13, s15
 800b02a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b02e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b036:	d505      	bpl.n	800b044 <_ZN7CHAMBER13writePressureEf+0x178>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b03e:	eef1 7a67 	vneg.f32	s15, s15
 800b042:	e001      	b.n	800b048 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b044:	edd7 7a03 	vldr	s15, [r7, #12]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b054:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b058:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b068:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b06c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b076:	eef1 6a67 	vneg.f32	s13, s15
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b086:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b08a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b08e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b092:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b09c:	e004      	b.n	800b0a8 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b0ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f80c 	bl	800b0d0 <_ZN7CHAMBER12writeOpeningEf>
}
 800b0b8:	bf00      	nop
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	c7c35000 	.word	0xc7c35000
 800b0c4:	c7c35000 	.word	0xc7c35000
 800b0c8:	482fc800 	.word	0x482fc800
 800b0cc:	482fc800 	.word	0x482fc800

0800b0d0 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b0dc:	edd7 7a00 	vldr	s15, [r7]
 800b0e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e8:	dd2b      	ble.n	800b142 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b0ea:	edd7 7a00 	vldr	s15, [r7]
 800b0ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f6:	d502      	bpl.n	800b0fe <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b0f8:	f04f 0300 	mov.w	r3, #0
 800b0fc:	e00c      	b.n	800b118 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b0fe:	edd7 7a00 	vldr	s15, [r7]
 800b102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10e:	dd02      	ble.n	800b116 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b110:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b114:	e000      	b.n	800b118 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	1d1a      	adds	r2, r3, #4
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b128:	eeb0 0a67 	vmov.f32	s0, s15
 800b12c:	4610      	mov	r0, r2
 800b12e:	f000 ff27 	bl	800bf80 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	331c      	adds	r3, #28
 800b136:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b1a4 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 ff20 	bl	800bf80 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b140:	e02c      	b.n	800b19c <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b142:	edd7 7a00 	vldr	s15, [r7]
 800b146:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b14a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	d501      	bpl.n	800b158 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b154:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b156:	e00a      	b.n	800b16e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b158:	edd7 7a00 	vldr	s15, [r7]
 800b15c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b164:	dd02      	ble.n	800b16c <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	e000      	b.n	800b16e <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b1a4 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 feff 	bl	800bf80 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f103 021c 	add.w	r2, r3, #28
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b18e:	eef1 7a67 	vneg.f32	s15, s15
 800b192:	eeb0 0a67 	vmov.f32	s0, s15
 800b196:	4610      	mov	r0, r2
 800b198:	f000 fef2 	bl	800bf80 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	00000000 	.word	0x00000000
 800b1a8:	bf800000 	.word	0xbf800000
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b1ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1be:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b1c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1c6:	eef0 7ae7 	vabs.f32	s15, s15
 800b1ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b1ce:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b1f0 <mySAT+0x40>
 800b1d2:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b1d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b1da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b1de:	eeb0 0a67 	vmov.f32	s0, s15
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	47ae147b 	.word	0x47ae147b
 800b1f4:	3f847ae1 	.word	0x3f847ae1

0800b1f8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	; 0x28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	ed87 0a02 	vstr	s0, [r7, #8]
 800b204:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	ed93 7a08 	vldr	s14, [r3, #32]
 800b21a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b21e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	edd3 6a07 	vldr	s13, [r3, #28]
 800b228:	edd7 7a02 	vldr	s15, [r7, #8]
 800b22c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b230:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b234:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b2cc <superTwisting2rdSMCUpdate+0xd4>
 800b238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	edd3 7a02 	vldr	s15, [r3, #8]
 800b248:	eeb0 0a67 	vmov.f32	s0, s15
 800b24c:	f7ff ffb0 	bl	800b1b0 <mySAT>
 800b250:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	edd3 7a02 	vldr	s15, [r3, #8]
 800b25a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	edd3 7a04 	vldr	s15, [r3, #16]
 800b264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b268:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	61fb      	str	r3, [r7, #28]
 800b276:	f107 0314 	add.w	r3, r7, #20
 800b27a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b27c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b288:	db09      	blt.n	800b29e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b28a:	ed97 0a07 	vldr	s0, [r7, #28]
 800b28e:	f003 ffff 	bl	800f290 <sqrtf>
 800b292:	eef0 7a40 	vmov.f32	s15, s0
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	edc3 7a00 	vstr	s15, [r3]
 800b29c:	e003      	b.n	800b2a6 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b2a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b2aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	ee07 3a90 	vmov	s15, r3
}
 800b2c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b2c4:	3728      	adds	r7, #40	; 0x28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	447a0000 	.word	0x447a0000

0800b2d0 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2dc:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3324      	adds	r3, #36	; 0x24
 800b2e4:	edd7 0a01 	vldr	s1, [r7, #4]
 800b2e8:	ed97 0a02 	vldr	s0, [r7, #8]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff ff83 	bl	800b1f8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	ee07 3a90 	vmov	s15, r3
}
 800b2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	; 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b30e:	edc7 0a08 	vstr	s1, [r7, #32]
 800b312:	ed87 1a07 	vstr	s2, [r7, #28]
 800b316:	edc7 1a06 	vstr	s3, [r7, #24]
 800b31a:	ed87 2a05 	vstr	s4, [r7, #20]
 800b31e:	edc7 2a04 	vstr	s5, [r7, #16]
 800b322:	ed87 3a03 	vstr	s6, [r7, #12]
 800b326:	edc7 3a02 	vstr	s7, [r7, #8]
 800b32a:	ed87 4a01 	vstr	s8, [r7, #4]
 800b32e:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b332:	204c      	movs	r0, #76	; 0x4c
 800b334:	f004 ffc6 	bl	80102c4 <malloc>
 800b338:	4603      	mov	r3, r0
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b33c:	224c      	movs	r2, #76	; 0x4c
 800b33e:	2100      	movs	r1, #0
 800b340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b342:	f004 ffd2 	bl	80102ea <memset>
	pController->psource = psource;
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34a:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	6a3a      	ldr	r2, [r7, #32]
 800b350:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b358:	ed97 1a07 	vldr	s2, [r7, #28]
 800b35c:	edd7 0a05 	vldr	s1, [r7, #20]
 800b360:	ed97 0a06 	vldr	s0, [r7, #24]
 800b364:	f001 fc62 	bl	800cc2c <newSimpleKalmanFilter>
 800b368:	4602      	mov	r2, r0
 800b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b36e:	edd7 2a00 	vldr	s5, [r7]
 800b372:	ed97 2a01 	vldr	s4, [r7, #4]
 800b376:	edd7 1a07 	vldr	s3, [r7, #28]
 800b37a:	ed97 1a02 	vldr	s2, [r7, #8]
 800b37e:	edd7 0a03 	vldr	s1, [r7, #12]
 800b382:	ed97 0a04 	vldr	s0, [r7, #16]
 800b386:	f002 f891 	bl	800d4ac <newPID>
 800b38a:	4602      	mov	r2, r0
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	4a08      	ldr	r2, [pc, #32]	; (800b3bc <NewPressureController+0xb8>)
 800b39a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b3a2:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	4a06      	ldr	r2, [pc, #24]	; (800b3c0 <NewPressureController+0xbc>)
 800b3a8:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	4a05      	ldr	r2, [pc, #20]	; (800b3c4 <NewPressureController+0xc0>)
 800b3ae:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3730      	adds	r7, #48	; 0x30
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	3627c5ac 	.word	0x3627c5ac
 800b3c0:	41a00000 	.word	0x41a00000
 800b3c4:	0800b2d1 	.word	0x0800b2d1

0800b3c8 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f04f 0200 	mov.w	r2, #0
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f04f 0200 	mov.w	r2, #0
 800b3e0:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f851 	bl	800b48c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b3ea:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b40c <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b3ee:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b410 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b3f2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b3f6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f854 	bl	800b4a8 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	48927c00 	.word	0x48927c00
 800b410:	00000000 	.word	0x00000000

0800b414 <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	b29b      	uxth	r3, r3
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fc62 	bl	800bcec <AnalogRead>
 800b428:	eef0 7a40 	vmov.f32	s15, s0
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	ed93 7a05 	vldr	s14, [r3, #20]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	edd3 6a01 	vldr	s13, [r3, #4]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	edd3 7a03 	vldr	s15, [r3, #12]
 800b444:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	ed93 6a06 	vldr	s12, [r3, #24]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	edd3 7a05 	vldr	s15, [r3, #20]
 800b454:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b458:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	edd3 6a04 	vldr	s13, [r3, #16]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	edd3 7a03 	vldr	s15, [r3, #12]
 800b468:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b46c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b470:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	ee07 3a90 	vmov	s15, r3
}
 800b482:	eeb0 0a67 	vmov.f32	s0, s15
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	601a      	str	r2, [r3, #0]

}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6178      	str	r0, [r7, #20]
 800b4b0:	ed87 0a04 	vstr	s0, [r7, #16]
 800b4b4:	edc7 0a03 	vstr	s1, [r7, #12]
 800b4b8:	ed87 1a02 	vstr	s2, [r7, #8]
 800b4bc:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	619a      	str	r2, [r3, #24]
}
 800b4d8:	bf00      	nop
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f852 	bl	800b5a0 <_ZN4PUMPC1Ei>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	330c      	adds	r3, #12
 800b500:	2100      	movs	r1, #0
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff ff60 	bl	800b3c8 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f817 	bl	800b540 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
	direction=0;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f04f 0200 	mov.w	r2, #0
 800b534:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f808 	bl	800b564 <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 f813 	bl	800b582 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3304      	adds	r3, #4
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 f824 	bl	800b5c2 <_ZN4PUMP6attachEi>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b582:	b580      	push	{r7, lr}
 800b584:	b082      	sub	sp, #8
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	330c      	adds	r3, #12
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff ff7a 	bl	800b48c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
	status=0;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	605a      	str	r2, [r3, #4]
	attach(num);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f805 	bl	800b5c2 <_ZN4PUMP6attachEi>
}
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	601a      	str	r2, [r3, #0]
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800b5e4:	4b07      	ldr	r3, [pc, #28]	; (800b604 <PWM_CS_LOW+0x24>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <PWM_CS_LOW+0x24>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b5f6:	0412      	lsls	r2, r2, #16
 800b5f8:	619a      	str	r2, [r3, #24]
}
 800b5fa:	bf00      	nop
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	20000214 	.word	0x20000214

0800b608 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <PWM_CS_HIGH+0x20>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <PWM_CS_HIGH+0x20>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b61c:	619a      	str	r2, [r3, #24]
}
 800b61e:	bf00      	nop
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20000214 	.word	0x20000214

0800b62c <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
 800b630:	f7ff ffea 	bl	800b608 <PWM_CS_HIGH>
	delay_us(2);
 800b634:	2002      	movs	r0, #2
 800b636:	f000 fbe7 	bl	800be08 <delay_us>
	PWM_CS_LOW();
 800b63a:	f7ff ffd1 	bl	800b5e0 <PWM_CS_LOW>
}
 800b63e:	bf00      	nop
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <PWMBoardSPI_sendFrame+0x30>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 800b652:	4b08      	ldr	r3, [pc, #32]	; (800b674 <PWMBoardSPI_sendFrame+0x30>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4619      	mov	r1, r3
 800b658:	4b06      	ldr	r3, [pc, #24]	; (800b674 <PWMBoardSPI_sendFrame+0x30>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800b660:	2302      	movs	r3, #2
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	23db      	movs	r3, #219	; 0xdb
 800b666:	f7f8 fc3f 	bl	8003ee8 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800b66a:	f7ff ffdf 	bl	800b62c <PWMBoardSPI_Callback>
}
 800b66e:	bf00      	nop
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20000214 	.word	0x20000214

0800b678 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b682:	2300      	movs	r3, #0
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	e00e      	b.n	800b6a6 <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800b688:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <PWMBoardSPI_bufferCMD+0x40>)
 800b68a:	6819      	ldr	r1, [r3, #0]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	4613      	mov	r3, r2
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	4413      	add	r3, r2
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	4413      	add	r3, r2
 800b698:	440b      	add	r3, r1
 800b69a:	3348      	adds	r3, #72	; 0x48
 800b69c:	79fa      	ldrb	r2, [r7, #7]
 800b69e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	dded      	ble.n	800b688 <PWMBoardSPI_bufferCMD+0x10>
}
 800b6ac:	bf00      	nop
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	20000214 	.word	0x20000214

0800b6bc <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	ed87 0a00 	vstr	s0, [r7]
 800b6c8:	80fb      	strh	r3, [r7, #6]

	uint16_t on;

	on = round(4096 * fduty);
 800b6ca:	edd7 7a00 	vldr	s15, [r7]
 800b6ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b800 <PWMBoardSPI_bufferDutyChannel+0x144>
 800b6d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6da:	eeb0 0b47 	vmov.f64	d0, d7
 800b6de:	f003 fcb9 	bl	800f054 <round>
 800b6e2:	eeb0 7b40 	vmov.f64	d7, d0
 800b6e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b6ea:	ee17 3a90 	vmov	r3, s15
 800b6ee:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800b6f0:	8bfb      	ldrh	r3, [r7, #30]
 800b6f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	bf28      	it	cs
 800b6fa:	4613      	movcs	r3, r2
 800b6fc:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b6fe:	88fb      	ldrh	r3, [r7, #6]
 800b700:	2b8f      	cmp	r3, #143	; 0x8f
 800b702:	bf28      	it	cs
 800b704:	238f      	movcs	r3, #143	; 0x8f
 800b706:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b708:	88fb      	ldrh	r3, [r7, #6]
 800b70a:	4a3e      	ldr	r2, [pc, #248]	; (800b804 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800b70c:	fba2 2303 	umull	r2, r3, r2, r3
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b714:	88fa      	ldrh	r2, [r7, #6]
 800b716:	4b3b      	ldr	r3, [pc, #236]	; (800b804 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800b718:	fba3 1302 	umull	r1, r3, r3, r2
 800b71c:	0959      	lsrs	r1, r3, #5
 800b71e:	460b      	mov	r3, r1
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	440b      	add	r3, r1
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	837b      	strh	r3, [r7, #26]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800b72a:	8b7b      	ldrh	r3, [r7, #26]
 800b72c:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800b730:	837b      	strh	r3, [r7, #26]

	uint16_t quo=(boardNum/2);
 800b732:	8b7b      	ldrh	r3, [r7, #26]
 800b734:	085b      	lsrs	r3, r3, #1
 800b736:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800b738:	8b7b      	ldrh	r3, [r7, #26]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800b740:	8b3b      	ldrh	r3, [r7, #24]
 800b742:	461a      	mov	r2, r3
 800b744:	0052      	lsls	r2, r2, #1
 800b746:	4413      	add	r3, r2
 800b748:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b74a:	4b2f      	ldr	r3, [pc, #188]	; (800b808 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800b74c:	6819      	ldr	r1, [r3, #0]
 800b74e:	8bba      	ldrh	r2, [r7, #28]
 800b750:	8ab8      	ldrh	r0, [r7, #20]
 800b752:	4613      	mov	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	4413      	add	r3, r2
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4413      	add	r3, r2
 800b75c:	4403      	add	r3, r0
 800b75e:	440b      	add	r3, r1
 800b760:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800b762:	8afb      	ldrh	r3, [r7, #22]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d11c      	bne.n	800b7a2 <PWMBoardSPI_bufferDutyChannel+0xe6>
			*pt++=(uint8_t)((on>>4)&0xFF);
 800b768:	8bfb      	ldrh	r3, [r7, #30]
 800b76a:	091b      	lsrs	r3, r3, #4
 800b76c:	b299      	uxth	r1, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	613a      	str	r2, [r7, #16]
 800b774:	b2ca      	uxtb	r2, r1
 800b776:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800b77e:	7bbb      	ldrb	r3, [r7, #14]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800b786:	8bfb      	ldrh	r3, [r7, #30]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	b25a      	sxtb	r2, r3
 800b790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b794:	4313      	orrs	r3, r2
 800b796:	b25b      	sxtb	r3, r3
 800b798:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	7bba      	ldrb	r2, [r7, #14]
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e01e      	b.n	800b7e0 <PWMBoardSPI_bufferDutyChannel+0x124>
		//	*pt=(uint8_t)(((*pt)&0x0F)|((uint8_t)(on&0x0F)<<4));
	}
	else
	{
		pt++;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	f023 030f 	bic.w	r3, r3, #15
 800b7b4:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800b7b6:	8bfb      	ldrh	r3, [r7, #30]
 800b7b8:	0a1b      	lsrs	r3, r3, #8
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	b25a      	sxtb	r2, r3
 800b7c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b25b      	sxtb	r3, r3
 800b7cc:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	613a      	str	r2, [r7, #16]
 800b7d4:	7bfa      	ldrb	r2, [r7, #15]
 800b7d6:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800b7d8:	8bfb      	ldrh	r3, [r7, #30]
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	701a      	strb	r2, [r3, #0]
//		*pt=(uint8_t)(((*pt)&0xF0)|((uint8_t)(on>>8)));
//		pt++;
//		*pt=(uint8_t)(on&0xFF);

	}
	ptPWMBoardSPI->dirtyDuty=1;
 800b7e0:	4b09      	ldr	r3, [pc, #36]	; (800b808 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800b7ea:	4b07      	ldr	r3, [pc, #28]	; (800b808 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff ff40 	bl	800b678 <PWMBoardSPI_bufferCMD>
}
 800b7f8:	bf00      	nop
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	45800000 	.word	0x45800000
 800b804:	aaaaaaab 	.word	0xaaaaaaab
 800b808:	20000214 	.word	0x20000214

0800b80c <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	460a      	mov	r2, r1
 800b816:	80fb      	strh	r3, [r7, #6]
 800b818:	4613      	mov	r3, r2
 800b81a:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b81c:	88fb      	ldrh	r3, [r7, #6]
 800b81e:	2b8f      	cmp	r3, #143	; 0x8f
 800b820:	bf28      	it	cs
 800b822:	238f      	movcs	r3, #143	; 0x8f
 800b824:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b826:	88fb      	ldrh	r3, [r7, #6]
 800b828:	4a27      	ldr	r2, [pc, #156]	; (800b8c8 <PWMBoardSPI_bufferCorrection+0xbc>)
 800b82a:	fba2 2303 	umull	r2, r3, r2, r3
 800b82e:	095b      	lsrs	r3, r3, #5
 800b830:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b832:	88fa      	ldrh	r2, [r7, #6]
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <PWMBoardSPI_bufferCorrection+0xbc>)
 800b836:	fba3 1302 	umull	r1, r3, r3, r2
 800b83a:	0959      	lsrs	r1, r3, #5
 800b83c:	460b      	mov	r3, r1
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	440b      	add	r3, r1
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800b848:	8abb      	ldrh	r3, [r7, #20]
 800b84a:	085b      	lsrs	r3, r3, #1
 800b84c:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800b84e:	8abb      	ldrh	r3, [r7, #20]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	823b      	strh	r3, [r7, #16]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800b856:	8abb      	ldrh	r3, [r7, #20]
 800b858:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800b85c:	82bb      	strh	r3, [r7, #20]

	uint16_t startingBytesNum=quo*3;
 800b85e:	8a7b      	ldrh	r3, [r7, #18]
 800b860:	461a      	mov	r2, r3
 800b862:	0052      	lsls	r2, r2, #1
 800b864:	4413      	add	r3, r2
 800b866:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b868:	4b18      	ldr	r3, [pc, #96]	; (800b8cc <PWMBoardSPI_bufferCorrection+0xc0>)
 800b86a:	6819      	ldr	r1, [r3, #0]
 800b86c:	8afa      	ldrh	r2, [r7, #22]
 800b86e:	89f8      	ldrh	r0, [r7, #14]
 800b870:	4613      	mov	r3, r2
 800b872:	00db      	lsls	r3, r3, #3
 800b874:	4413      	add	r3, r2
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	4413      	add	r3, r2
 800b87a:	4403      	add	r3, r0
 800b87c:	440b      	add	r3, r1
 800b87e:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800b880:	8a3b      	ldrh	r3, [r7, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d105      	bne.n	800b892 <PWMBoardSPI_bufferCorrection+0x86>
		*pt=(uint8_t)(value<<2);
 800b886:	797b      	ldrb	r3, [r7, #5]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e00e      	b.n	800b8b0 <PWMBoardSPI_bufferCorrection+0xa4>
	}
	else
	{
		pt++;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	3301      	adds	r3, #1
 800b896:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	60ba      	str	r2, [r7, #8]
 800b89e:	797a      	ldrb	r2, [r7, #5]
 800b8a0:	0892      	lsrs	r2, r2, #2
 800b8a2:	b2d2      	uxtb	r2, r2
 800b8a4:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800b8a6:	797b      	ldrb	r3, [r7, #5]
 800b8a8:	019b      	lsls	r3, r3, #6
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800b8b0:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <PWMBoardSPI_bufferCorrection+0xc0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800b8ba:	2020      	movs	r0, #32
 800b8bc:	f7ff fedc 	bl	800b678 <PWMBoardSPI_bufferCMD>
}
 800b8c0:	bf00      	nop
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	aaaaaaab 	.word	0xaaaaaaab
 800b8cc:	20000214 	.word	0x20000214

0800b8d0 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <PWMBoardSPI_setOutputEnable+0x14>
 800b8e0:	2330      	movs	r3, #48	; 0x30
 800b8e2:	e000      	b.n	800b8e6 <PWMBoardSPI_setOutputEnable+0x16>
 800b8e4:	2340      	movs	r3, #64	; 0x40
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fec6 	bl	800b678 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800b8ec:	f7ff feaa 	bl	800b644 <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800b8f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8f4:	f7f5 fb8c 	bl	8001010 <HAL_Delay>
}
 800b8f8:	bf00      	nop
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800b90a:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <PWMBoardSPI_setCorrectionEnable+0x34>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800b912:	f003 0201 	and.w	r2, r3, #1
 800b916:	79fb      	ldrb	r3, [r7, #7]
 800b918:	f1c3 0301 	rsb	r3, r3, #1
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d004      	beq.n	800b92a <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800b920:	2070      	movs	r0, #112	; 0x70
 800b922:	f7ff fea9 	bl	800b678 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
 800b926:	f7ff fe8d 	bl	800b644 <PWMBoardSPI_sendFrame>
		}
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000214 	.word	0x20000214

0800b938 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800b942:	4b0c      	ldr	r3, [pc, #48]	; (800b974 <PWMBoardSPI_startPWMCK+0x3c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800b94a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fc44 	bl	800c1dc <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800b954:	ed97 0a01 	vldr	s0, [r7, #4]
 800b958:	f000 f80e 	bl	800b978 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <PWMBoardSPI_startPWMCK+0x3c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800b964:	4618      	mov	r0, r3
 800b966:	f000 feb5 	bl	800c6d4 <PWMBuiltInStartChannel>
}
 800b96a:	bf00      	nop
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20000214 	.word	0x20000214

0800b978 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800b982:	edd7 7a01 	vldr	s15, [r7, #4]
 800b986:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b98a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800ba70 <PWMBoardSPI_writeFrequency+0xf8>
 800b98e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b996:	d501      	bpl.n	800b99c <PWMBoardSPI_writeFrequency+0x24>
 800b998:	4b3b      	ldr	r3, [pc, #236]	; (800ba88 <PWMBoardSPI_writeFrequency+0x110>)
 800b99a:	e00b      	b.n	800b9b4 <PWMBoardSPI_writeFrequency+0x3c>
 800b99c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9a0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800ba8c <PWMBoardSPI_writeFrequency+0x114>
 800b9a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ac:	dd01      	ble.n	800b9b2 <PWMBoardSPI_writeFrequency+0x3a>
 800b9ae:	4b38      	ldr	r3, [pc, #224]	; (800ba90 <PWMBoardSPI_writeFrequency+0x118>)
 800b9b0:	e000      	b.n	800b9b4 <PWMBoardSPI_writeFrequency+0x3c>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800b9b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ba94 <PWMBoardSPI_writeFrequency+0x11c>
 800b9be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9c2:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800b9c6:	4b34      	ldr	r3, [pc, #208]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800b9ce:	ed97 7a03 	vldr	s14, [r7, #12]
 800b9d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9d6:	eef0 7ae7 	vabs.f32	s15, s15
 800b9da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b9de:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800ba78 <PWMBoardSPI_writeFrequency+0x100>
 800b9e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	dc00      	bgt.n	800b9ee <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800b9ec:	e03a      	b.n	800ba64 <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800b9ee:	4b2a      	ldr	r3, [pc, #168]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800b9f8:	4b27      	ldr	r3, [pc, #156]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800ba0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba0e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800ba80 <PWMBoardSPI_writeFrequency+0x108>
 800ba12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1a:	d501      	bpl.n	800ba20 <PWMBoardSPI_writeFrequency+0xa8>
 800ba1c:	4b1f      	ldr	r3, [pc, #124]	; (800ba9c <PWMBoardSPI_writeFrequency+0x124>)
 800ba1e:	e010      	b.n	800ba42 <PWMBoardSPI_writeFrequency+0xca>
 800ba20:	4b1d      	ldr	r3, [pc, #116]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800ba28:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800baa0 <PWMBoardSPI_writeFrequency+0x128>
 800ba2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba34:	dd01      	ble.n	800ba3a <PWMBoardSPI_writeFrequency+0xc2>
 800ba36:	4b1b      	ldr	r3, [pc, #108]	; (800baa4 <PWMBoardSPI_writeFrequency+0x12c>)
 800ba38:	e003      	b.n	800ba42 <PWMBoardSPI_writeFrequency+0xca>
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba42:	4a15      	ldr	r2, [pc, #84]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba44:	6812      	ldr	r2, [r2, #0]
 800ba46:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 800ba52:	4b11      	ldr	r3, [pc, #68]	; (800ba98 <PWMBoardSPI_writeFrequency+0x120>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800ba5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f000 fc5a 	bl	800c318 <PWMBuiltIn_writeFrequency>
}
 800ba64:	bf00      	nop
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	f3af 8000 	nop.w
 800ba70:	88e368f1 	.word	0x88e368f1
 800ba74:	3ee4f8b5 	.word	0x3ee4f8b5
 800ba78:	a0b5ed8d 	.word	0xa0b5ed8d
 800ba7c:	3eb0c6f7 	.word	0x3eb0c6f7
 800ba80:	eb851eb8 	.word	0xeb851eb8
 800ba84:	3f9eb851 	.word	0x3f9eb851
 800ba88:	3727c5ac 	.word	0x3727c5ac
 800ba8c:	459c4000 	.word	0x459c4000
 800ba90:	459c4000 	.word	0x459c4000
 800ba94:	45800000 	.word	0x45800000
 800ba98:	20000214 	.word	0x20000214
 800ba9c:	3cf5c28f 	.word	0x3cf5c28f
 800baa0:	4bcdfe60 	.word	0x4bcdfe60
 800baa4:	4bcdfe60 	.word	0x4bcdfe60

0800baa8 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	ed87 0a00 	vstr	s0, [r7]
 800bab4:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	ed97 0a00 	vldr	s0, [r7]
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fdfd 	bl	800b6bc <PWMBoardSPI_bufferDutyChannel>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	4603      	mov	r3, r0
 800bad2:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bad4:	2300      	movs	r3, #0
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	e009      	b.n	800baee <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	b29b      	uxth	r3, r3
 800bade:	79fa      	ldrb	r2, [r7, #7]
 800bae0:	4611      	mov	r1, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff fe92 	bl	800b80c <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	3301      	adds	r3, #1
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b8f      	cmp	r3, #143	; 0x8f
 800baf2:	ddf2      	ble.n	800bada <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800baf4:	f7ff fda6 	bl	800b644 <PWMBoardSPI_sendFrame>
}
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800bb06:	f000 f969 	bl	800bddc <micros>
 800bb0a:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <PWMBoardSPI_flushDutyAll+0x40>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d106      	bne.n	800bb26 <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800bb18:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <PWMBoardSPI_flushDutyAll+0x40>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
 800bb22:	f7ff fd8f 	bl	800b644 <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800bb26:	f000 f959 	bl	800bddc <micros>
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <PWMBoardSPI_flushDutyAll+0x40>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	1a8a      	subs	r2, r1, r2
 800bb34:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20000214 	.word	0x20000214

0800bb44 <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800bb4a:	4b36      	ldr	r3, [pc, #216]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bb52:	2100      	movs	r1, #0
 800bb54:	4618      	mov	r0, r3
 800bb56:	f004 fbc8 	bl	80102ea <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800bb5a:	4b32      	ldr	r3, [pc, #200]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a32      	ldr	r2, [pc, #200]	; (800bc28 <PWMBoardSPI_init+0xe4>)
 800bb60:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
 800bb64:	4b2f      	ldr	r3, [pc, #188]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a30      	ldr	r2, [pc, #192]	; (800bc2c <PWMBoardSPI_init+0xe8>)
 800bb6a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
 800bb6e:	4b2d      	ldr	r3, [pc, #180]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb76:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800bb7a:	4b2a      	ldr	r3, [pc, #168]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2213      	movs	r2, #19
 800bb80:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800bb84:	4b27      	ldr	r3, [pc, #156]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2210      	movs	r2, #16
 800bb8a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
 800bb8e:	4b25      	ldr	r3, [pc, #148]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
 800bb98:	4b22      	ldr	r3, [pc, #136]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
 800bba2:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
 800bbb6:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
 800bbc0:	4b18      	ldr	r3, [pc, #96]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bbca:	4b16      	ldr	r3, [pc, #88]	; (800bc24 <PWMBoardSPI_init+0xe0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fd96 	bl	800c704 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800bbd8:	f7ff fd02 	bl	800b5e0 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800bbdc:	203f      	movs	r0, #63	; 0x3f
 800bbde:	f7ff ff74 	bl	800baca <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	e009      	b.n	800bbfc <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bc30 <PWMBoardSPI_init+0xec>
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff fd63 	bl	800b6bc <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	607b      	str	r3, [r7, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b8f      	cmp	r3, #143	; 0x8f
 800bc00:	ddf2      	ble.n	800bbe8 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
 800bc02:	f7ff fd1f 	bl	800b644 <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
 800bc06:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800bc34 <PWMBoardSPI_init+0xf0>
 800bc0a:	f7ff fe95 	bl	800b938 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f7ff fe76 	bl	800b900 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800bc14:	2001      	movs	r0, #1
 800bc16:	f7ff fe5b 	bl	800b8d0 <PWMBoardSPI_setOutputEnable>

}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20000214 	.word	0x20000214
 800bc28:	2000963c 	.word	0x2000963c
 800bc2c:	40021000 	.word	0x40021000
 800bc30:	00000000 	.word	0x00000000
 800bc34:	42200000 	.word	0x42200000

0800bc38 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	330c      	adds	r3, #12
 800bc46:	2200      	movs	r2, #0
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fc4a 	bl	800b4e4 <_ZN15PRESSURE_SOURCEC1Eii>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3344      	adds	r3, #68	; 0x44
 800bc54:	2200      	movs	r2, #0
 800bc56:	2100      	movs	r1, #0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fc43 	bl	800b4e4 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2104      	movs	r1, #4
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f004 faf8 	bl	8010260 <calloc>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2104      	movs	r1, #4
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f004 faef 	bl	8010260 <calloc>
 800bc82:	4603      	mov	r3, r0
 800bc84:	461a      	mov	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	889b      	ldrh	r3, [r3, #4]
 800bc92:	461a      	mov	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4293      	cmp	r3, r2
 800bc98:	da18      	bge.n	800bccc <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800bc9a:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800bc9e:	f003 f9bf 	bl	800f020 <_Znwj>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461c      	mov	r4, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	0059      	lsls	r1, r3, #1
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7fe ffae 	bl	800ac14 <_ZN7CHAMBERC1Eiii>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e7e0      	b.n	800bc8e <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a05      	ldr	r2, [pc, #20]	; (800bce4 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800bcd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 40;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a04      	ldr	r2, [pc, #16]	; (800bce8 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800bcd8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd90      	pop	{r4, r7, pc}
 800bce4:	44fa0000 	.word	0x44fa0000
 800bce8:	42200000 	.word	0x42200000

0800bcec <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800bcf6:	f04f 0300 	mov.w	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d806      	bhi.n	800bd10 <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800bd02:	88fb      	ldrh	r3, [r7, #6]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 f993 	bl	800c030 <AnalogRead_BuiltIn>
 800bd0a:	ed87 0a03 	vstr	s0, [r7, #12]
 800bd0e:	e008      	b.n	800bd22 <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	3b06      	subs	r3, #6
 800bd14:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe feed 	bl	800aaf8 <AnalogRead_External>
 800bd1e:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	ee07 3a90 	vmov	s15, r3

}
 800bd28:	eeb0 0a67 	vmov.f32	s0, s15
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	4603      	mov	r3, r0
 800bd3a:	460a      	mov	r2, r1
 800bd3c:	80fb      	strh	r3, [r7, #6]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800bd42:	88ba      	ldrh	r2, [r7, #4]
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f9ab 	bl	800c0a4 <DigitalBuiltIn_Write>
}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	ed87 0a00 	vstr	s0, [r7]
 800bd62:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800bd64:	88fb      	ldrh	r3, [r7, #6]
 800bd66:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800bd68:	88fb      	ldrh	r3, [r7, #6]
 800bd6a:	2b13      	cmp	r3, #19
 800bd6c:	d806      	bhi.n	800bd7c <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800bd6e:	88fb      	ldrh	r3, [r7, #6]
 800bd70:	ed97 0a00 	vldr	s0, [r7]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fa31 	bl	800c1dc <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800bd7a:	e00b      	b.n	800bd94 <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800bd7c:	89fb      	ldrh	r3, [r7, #14]
 800bd7e:	3b14      	subs	r3, #20
 800bd80:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800bd82:	88fb      	ldrh	r3, [r7, #6]
 800bd84:	2b8f      	cmp	r3, #143	; 0x8f
 800bd86:	d805      	bhi.n	800bd94 <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	ed97 0a00 	vldr	s0, [r7]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fe8a 	bl	800baa8 <PWMBoardSPI_writeDuty>
}
 800bd94:	bf00      	nop
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
};
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <serial1Callback>:

__weak void serial1Callback(char *pWirelessReceiveBuffer) {
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	printf("Running default serial1Callback()\r\n");
 800bdb8:	4803      	ldr	r0, [pc, #12]	; (800bdc8 <serial1Callback+0x18>)
 800bdba:	f005 f9dd 	bl	8011178 <puts>
}
 800bdbe:	bf00      	nop
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	08014834 	.word	0x08014834

0800bdcc <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800bdd0:	f7f5 f912 	bl	8000ff8 <HAL_GetTick>
 800bdd4:	4603      	mov	r3, r0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <micros>:

uint32_t micros()
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800bde2:	f7ff fff3 	bl	800bdcc <millis>
 800bde6:	4602      	mov	r2, r0
 800bde8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdec:	fb03 f202 	mul.w	r2, r3, r2
 800bdf0:	4b04      	ldr	r3, [pc, #16]	; (800be04 <micros+0x28>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	4413      	add	r3, r2
 800bdf8:	607b      	str	r3, [r7, #4]
	return t;
 800bdfa:	687b      	ldr	r3, [r7, #4]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	20009948 	.word	0x20009948

0800be08 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800be10:	f7ff ffe4 	bl	800bddc <micros>
 800be14:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800be16:	f7ff ffe1 	bl	800bddc <micros>
 800be1a:	4602      	mov	r2, r0
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	461a      	mov	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4293      	cmp	r3, r2
 800be26:	bfcc      	ite	gt
 800be28:	2301      	movgt	r3, #1
 800be2a:	2300      	movle	r3, #0
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d000      	beq.n	800be34 <delay_us+0x2c>
 800be32:	e7f0      	b.n	800be16 <delay_us+0xe>
}
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800be44:	4b20      	ldr	r3, [pc, #128]	; (800bec8 <delay_ns+0x8c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b1f      	ldr	r3, [pc, #124]	; (800bec8 <delay_ns+0x8c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800be54:	4b1c      	ldr	r3, [pc, #112]	; (800bec8 <delay_ns+0x8c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4293      	cmp	r3, r2
 800be60:	bfcc      	ite	gt
 800be62:	2301      	movgt	r3, #1
 800be64:	2300      	movle	r3, #0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d000      	beq.n	800be6e <delay_ns+0x32>
 800be6c:	e7f2      	b.n	800be54 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800be6e:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <delay_ns+0x8c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6a1a      	ldr	r2, [r3, #32]
 800be74:	f241 1311 	movw	r3, #4369	; 0x1111
 800be78:	4013      	ands	r3, r2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf0c      	ite	eq
 800be7e:	2301      	moveq	r3, #1
 800be80:	2300      	movne	r3, #0
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d014      	beq.n	800beb2 <delay_ns+0x76>
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <delay_ns+0x8c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6a1a      	ldr	r2, [r3, #32]
 800be8e:	f240 4344 	movw	r3, #1092	; 0x444
 800be92:	4013      	ands	r3, r2
 800be94:	2b00      	cmp	r3, #0
 800be96:	bf0c      	ite	eq
 800be98:	2301      	moveq	r3, #1
 800be9a:	2300      	movne	r3, #0
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d007      	beq.n	800beb2 <delay_ns+0x76>
 800bea2:	4b09      	ldr	r3, [pc, #36]	; (800bec8 <delay_ns+0x8c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <delay_ns+0x8c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0201 	bic.w	r2, r2, #1
 800beb0:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <delay_ns+0x8c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2200      	movs	r2, #0
 800beb8:	625a      	str	r2, [r3, #36]	; 0x24

}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20009bc8 	.word	0x20009bc8

0800becc <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800bed4:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <setPeriodControlLoop+0x1c>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6013      	str	r3, [r2, #0]
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20000218 	.word	0x20000218

0800beec <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800bef4:	4a04      	ldr	r2, [pc, #16]	; (800bf08 <setPeriodSendLoop+0x1c>)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6013      	str	r3, [r2, #0]
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2000021c 	.word	0x2000021c

0800bf0c <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]

	_duty=0;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f04f 0200 	mov.w	r2, #0
 800bf1c:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a09      	ldr	r2, [pc, #36]	; (800bf5c <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800bf36:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bf46:	615a      	str	r2, [r3, #20]
	attach(num);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f808 	bl	800bf60 <_ZN14SOLENOID_VALVE6attachEi>
}
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	41200000 	.word	0x41200000

0800bf60 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	601a      	str	r2, [r3, #0]
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	0000      	movs	r0, r0
	...

0800bf80 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	ed93 7a04 	vldr	s14, [r3, #16]
 800bf92:	edd7 7a00 	vldr	s15, [r7]
 800bf96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9e:	dd02      	ble.n	800bfa6 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	e00d      	b.n	800bfc2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	ed93 7a05 	vldr	s14, [r3, #20]
 800bfac:	edd7 7a00 	vldr	s15, [r7]
 800bfb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb8:	d502      	bpl.n	800bfc0 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	e000      	b.n	800bfc2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800bfc4:	ed97 7a00 	vldr	s14, [r7]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	edd3 7a01 	vldr	s15, [r3, #4]
 800bfce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfd2:	eef0 7ae7 	vabs.f32	s15, s15
 800bfd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bfda:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800c028 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800bfde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	dc00      	bgt.n	800bfea <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800bfe8:	e017      	b.n	800c01a <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	edd3 7a01 	vldr	s15, [r3, #4]
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c010:	eeb0 0a67 	vmov.f32	s0, s15
 800c014:	4610      	mov	r0, r2
 800c016:	f7ff fe9e 	bl	800bd56 <PWMWriteDuty>
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	a0b5ed8d 	.word	0xa0b5ed8d
 800c02c:	3eb0c6f7 	.word	0x3eb0c6f7

0800c030 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	db1e      	blt.n	800c07c <AnalogRead_BuiltIn+0x4c>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b05      	cmp	r3, #5
 800c042:	dc1b      	bgt.n	800c07c <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800c044:	4a13      	ldr	r2, [pc, #76]	; (800c094 <AnalogRead_BuiltIn+0x64>)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c054:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c098 <AnalogRead_BuiltIn+0x68>
 800c058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c05c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c09c <AnalogRead_BuiltIn+0x6c>
 800c060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c064:	4a0e      	ldr	r2, [pc, #56]	; (800c0a0 <AnalogRead_BuiltIn+0x70>)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800c070:	4a0b      	ldr	r2, [pc, #44]	; (800c0a0 <AnalogRead_BuiltIn+0x70>)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	e001      	b.n	800c080 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800c07c:	f04f 0300 	mov.w	r3, #0
 800c080:	ee07 3a90 	vmov	s15, r3
}
 800c084:	eeb0 0a67 	vmov.f32	s0, s15
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	2000a0a0 	.word	0x2000a0a0
 800c098:	45800000 	.word	0x45800000
 800c09c:	40533333 	.word	0x40533333
 800c0a0:	2000a088 	.word	0x2000a088

0800c0a4 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	460a      	mov	r2, r1
 800c0ae:	80fb      	strh	r3, [r7, #6]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c0b4:	88bb      	ldrh	r3, [r7, #4]
 800c0b6:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c0b8:	88fb      	ldrh	r3, [r7, #6]
 800c0ba:	2b0f      	cmp	r3, #15
 800c0bc:	d80b      	bhi.n	800c0d6 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	4a07      	ldr	r2, [pc, #28]	; (800c0e0 <DigitalBuiltIn_Write+0x3c>)
 800c0c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c0c6:	88fb      	ldrh	r3, [r7, #6]
 800c0c8:	4a06      	ldr	r2, [pc, #24]	; (800c0e4 <DigitalBuiltIn_Write+0x40>)
 800c0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ce:	7bfa      	ldrb	r2, [r7, #15]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7f6 fbf5 	bl	80028c0 <HAL_GPIO_WritePin>
	}
}
 800c0d6:	bf00      	nop
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20000220 	.word	0x20000220
 800c0e4:	20000260 	.word	0x20000260

0800c0e8 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c100:	edd7 7a00 	vldr	s15, [r7]
 800c104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c108:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c10c:	eeb0 0b47 	vmov.f64	d0, d7
 800c110:	f002 ffa0 	bl	800f054 <round>
 800c114:	eeb0 7b40 	vmov.f64	d7, d0
 800c118:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c11c:	ee17 3a90 	vmov	r3, s15
 800c120:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c128:	4293      	cmp	r3, r2
 800c12a:	bf28      	it	cs
 800c12c:	4613      	movcs	r3, r2
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3301      	adds	r3, #1
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c15e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c162:	eef0 7a66 	vmov.f32	s15, s13
}
 800c166:	eeb0 0a67 	vmov.f32	s0, s15
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0f      	ldr	r2, [pc, #60]	; (800c1c0 <getTIM_SOURCECLK+0x4c>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d013      	beq.n	800c1ae <getTIM_SOURCECLK+0x3a>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a0e      	ldr	r2, [pc, #56]	; (800c1c4 <getTIM_SOURCECLK+0x50>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00e      	beq.n	800c1ae <getTIM_SOURCECLK+0x3a>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a0c      	ldr	r2, [pc, #48]	; (800c1c8 <getTIM_SOURCECLK+0x54>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d009      	beq.n	800c1ae <getTIM_SOURCECLK+0x3a>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a0b      	ldr	r2, [pc, #44]	; (800c1cc <getTIM_SOURCECLK+0x58>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d004      	beq.n	800c1ae <getTIM_SOURCECLK+0x3a>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <getTIM_SOURCECLK+0x5c>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d101      	bne.n	800c1b2 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c1ae:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <getTIM_SOURCECLK+0x60>)
 800c1b0:	e000      	b.n	800c1b4 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <getTIM_SOURCECLK+0x64>)
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	40010000 	.word	0x40010000
 800c1c4:	40010400 	.word	0x40010400
 800c1c8:	40014000 	.word	0x40014000
 800c1cc:	40014400 	.word	0x40014400
 800c1d0:	40014800 	.word	0x40014800
 800c1d4:	0cdfe600 	.word	0x0cdfe600
 800c1d8:	066ff300 	.word	0x066ff300

0800c1dc <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c1dc:	b590      	push	{r4, r7, lr}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	ed87 0a00 	vstr	s0, [r7]
 800c1e8:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	4a48      	ldr	r2, [pc, #288]	; (800c310 <PWMBuiltIn_writeDuty+0x134>)
 800c1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d112      	bne.n	800c21c <PWMBuiltIn_writeDuty+0x40>
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	4a46      	ldr	r2, [pc, #280]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c202:	88fb      	ldrh	r3, [r7, #6]
 800c204:	4a43      	ldr	r2, [pc, #268]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20a:	681c      	ldr	r4, [r3, #0]
 800c20c:	ed97 0a00 	vldr	s0, [r7]
 800c210:	4608      	mov	r0, r1
 800c212:	f7ff ff69 	bl	800c0e8 <duty2CCR>
 800c216:	4603      	mov	r3, r0
 800c218:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c21a:	e075      	b.n	800c308 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c21c:	88fb      	ldrh	r3, [r7, #6]
 800c21e:	4a3c      	ldr	r2, [pc, #240]	; (800c310 <PWMBuiltIn_writeDuty+0x134>)
 800c220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c224:	2b04      	cmp	r3, #4
 800c226:	d112      	bne.n	800c24e <PWMBuiltIn_writeDuty+0x72>
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	4a3a      	ldr	r2, [pc, #232]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c234:	88fb      	ldrh	r3, [r7, #6]
 800c236:	4a37      	ldr	r2, [pc, #220]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23c:	681c      	ldr	r4, [r3, #0]
 800c23e:	ed97 0a00 	vldr	s0, [r7]
 800c242:	4608      	mov	r0, r1
 800c244:	f7ff ff50 	bl	800c0e8 <duty2CCR>
 800c248:	4603      	mov	r3, r0
 800c24a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c24c:	e05c      	b.n	800c308 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c24e:	88fb      	ldrh	r3, [r7, #6]
 800c250:	4a2f      	ldr	r2, [pc, #188]	; (800c310 <PWMBuiltIn_writeDuty+0x134>)
 800c252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c256:	2b08      	cmp	r3, #8
 800c258:	d112      	bne.n	800c280 <PWMBuiltIn_writeDuty+0xa4>
 800c25a:	88fb      	ldrh	r3, [r7, #6]
 800c25c:	4a2d      	ldr	r2, [pc, #180]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c266:	88fb      	ldrh	r3, [r7, #6]
 800c268:	4a2a      	ldr	r2, [pc, #168]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c26e:	681c      	ldr	r4, [r3, #0]
 800c270:	ed97 0a00 	vldr	s0, [r7]
 800c274:	4608      	mov	r0, r1
 800c276:	f7ff ff37 	bl	800c0e8 <duty2CCR>
 800c27a:	4603      	mov	r3, r0
 800c27c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c27e:	e043      	b.n	800c308 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	4a23      	ldr	r2, [pc, #140]	; (800c310 <PWMBuiltIn_writeDuty+0x134>)
 800c284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c288:	2b0c      	cmp	r3, #12
 800c28a:	d112      	bne.n	800c2b2 <PWMBuiltIn_writeDuty+0xd6>
 800c28c:	88fb      	ldrh	r3, [r7, #6]
 800c28e:	4a21      	ldr	r2, [pc, #132]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	4a1e      	ldr	r2, [pc, #120]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a0:	681c      	ldr	r4, [r3, #0]
 800c2a2:	ed97 0a00 	vldr	s0, [r7]
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	f7ff ff1e 	bl	800c0e8 <duty2CCR>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c2b0:	e02a      	b.n	800c308 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c2b2:	88fb      	ldrh	r3, [r7, #6]
 800c2b4:	4a16      	ldr	r2, [pc, #88]	; (800c310 <PWMBuiltIn_writeDuty+0x134>)
 800c2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ba:	2b10      	cmp	r3, #16
 800c2bc:	d112      	bne.n	800c2e4 <PWMBuiltIn_writeDuty+0x108>
 800c2be:	88fb      	ldrh	r3, [r7, #6]
 800c2c0:	4a14      	ldr	r2, [pc, #80]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c2ca:	88fb      	ldrh	r3, [r7, #6]
 800c2cc:	4a11      	ldr	r2, [pc, #68]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2d2:	681c      	ldr	r4, [r3, #0]
 800c2d4:	ed97 0a00 	vldr	s0, [r7]
 800c2d8:	4608      	mov	r0, r1
 800c2da:	f7ff ff05 	bl	800c0e8 <duty2CCR>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c2e2:	e011      	b.n	800c308 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	4a0b      	ldr	r2, [pc, #44]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
 800c2f2:	4a08      	ldr	r2, [pc, #32]	; (800c314 <PWMBuiltIn_writeDuty+0x138>)
 800c2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2f8:	681c      	ldr	r4, [r3, #0]
 800c2fa:	ed97 0a00 	vldr	s0, [r7]
 800c2fe:	4608      	mov	r0, r1
 800c300:	f7ff fef2 	bl	800c0e8 <duty2CCR>
 800c304:	4603      	mov	r3, r0
 800c306:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}
 800c310:	200002d0 	.word	0x200002d0
 800c314:	20000280 	.word	0x20000280

0800c318 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c318:	b590      	push	{r4, r7, lr}
 800c31a:	b087      	sub	sp, #28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	ed87 0a00 	vstr	s0, [r7]
 800c324:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c326:	edd7 7a00 	vldr	s15, [r7]
 800c32a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c32e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c5e8 <PWMBuiltIn_writeFrequency+0x2d0>
 800c332:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33a:	d501      	bpl.n	800c340 <PWMBuiltIn_writeFrequency+0x28>
 800c33c:	4bac      	ldr	r3, [pc, #688]	; (800c5f0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c33e:	e00b      	b.n	800c358 <PWMBuiltIn_writeFrequency+0x40>
 800c340:	edd7 7a00 	vldr	s15, [r7]
 800c344:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c5f4 <PWMBuiltIn_writeFrequency+0x2dc>
 800c348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c350:	dd01      	ble.n	800c356 <PWMBuiltIn_writeFrequency+0x3e>
 800c352:	4ba9      	ldr	r3, [pc, #676]	; (800c5f8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c354:	e000      	b.n	800c358 <PWMBuiltIn_writeFrequency+0x40>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c35e:	2301      	movs	r3, #1
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	e06f      	b.n	800c444 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	49a5      	ldr	r1, [pc, #660]	; (800c5fc <PWMBuiltIn_writeFrequency+0x2e4>)
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	440b      	add	r3, r1
 800c378:	edd3 7a00 	vldr	s15, [r3]
 800c37c:	ed97 7a00 	vldr	s14, [r7]
 800c380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c388:	d859      	bhi.n	800c43e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c38a:	4a9d      	ldr	r2, [pc, #628]	; (800c600 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3b01      	subs	r3, #1
 800c396:	499a      	ldr	r1, [pc, #616]	; (800c600 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d124      	bne.n	800c3ea <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c3a0:	4a97      	ldr	r2, [pc, #604]	; (800c600 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3a8:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c3aa:	88fb      	ldrh	r3, [r7, #6]
 800c3ac:	4a95      	ldr	r2, [pc, #596]	; (800c604 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b2:	ee07 3a90 	vmov	s15, r3
 800c3b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3ba:	edd7 7a00 	vldr	s15, [r7]
 800c3be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	ee07 3a90 	vmov	s15, r3
 800c3ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3d6:	ee17 1a90 	vmov	r1, s15
 800c3da:	88fb      	ldrh	r3, [r7, #6]
 800c3dc:	4a8a      	ldr	r2, [pc, #552]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	1e4a      	subs	r2, r1, #1
 800c3e6:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c3e8:	e02f      	b.n	800c44a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c3ea:	88fb      	ldrh	r3, [r7, #6]
 800c3ec:	4a86      	ldr	r2, [pc, #536]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4985      	ldr	r1, [pc, #532]	; (800c60c <PWMBuiltIn_writeFrequency+0x2f4>)
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c3fc:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c3fe:	88fb      	ldrh	r3, [r7, #6]
 800c400:	4a80      	ldr	r2, [pc, #512]	; (800c604 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c40e:	edd7 7a00 	vldr	s15, [r7]
 800c412:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c416:	88fb      	ldrh	r3, [r7, #6]
 800c418:	4a7b      	ldr	r2, [pc, #492]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c422:	3301      	adds	r3, #1
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c434:	ee17 3a90 	vmov	r3, s15
 800c438:	3b01      	subs	r3, #1
 800c43a:	617b      	str	r3, [r7, #20]
			break;
 800c43c:	e005      	b.n	800c44a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	3301      	adds	r3, #1
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2b09      	cmp	r3, #9
 800c448:	dd8c      	ble.n	800c364 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	4a6e      	ldr	r2, [pc, #440]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	429a      	cmp	r2, r3
 800c45a:	f000 80be 	beq.w	800c5da <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c45e:	2300      	movs	r3, #0
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e0a9      	b.n	800c5b8 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800c464:	4a68      	ldr	r2, [pc, #416]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	4966      	ldr	r1, [pc, #408]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c474:	429a      	cmp	r2, r3
 800c476:	f040 809c 	bne.w	800c5b2 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800c47a:	4a65      	ldr	r2, [pc, #404]	; (800c610 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d113      	bne.n	800c4ae <PWMBuiltIn_writeFrequency+0x196>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 f8c2 	bl	800c614 <PWMBuiltIn_readDuty>
 800c490:	eef0 7a40 	vmov.f32	s15, s0
 800c494:	4a5c      	ldr	r2, [pc, #368]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c49c:	681c      	ldr	r4, [r3, #0]
 800c49e:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a2:	6978      	ldr	r0, [r7, #20]
 800c4a4:	f7ff fe20 	bl	800c0e8 <duty2CCR>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	6363      	str	r3, [r4, #52]	; 0x34
 800c4ac:	e07a      	b.n	800c5a4 <PWMBuiltIn_writeFrequency+0x28c>
 800c4ae:	4a58      	ldr	r2, [pc, #352]	; (800c610 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	d113      	bne.n	800c4e2 <PWMBuiltIn_writeFrequency+0x1ca>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f8a8 	bl	800c614 <PWMBuiltIn_readDuty>
 800c4c4:	eef0 7a40 	vmov.f32	s15, s0
 800c4c8:	4a4f      	ldr	r2, [pc, #316]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d0:	681c      	ldr	r4, [r3, #0]
 800c4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c4d6:	6978      	ldr	r0, [r7, #20]
 800c4d8:	f7ff fe06 	bl	800c0e8 <duty2CCR>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	63a3      	str	r3, [r4, #56]	; 0x38
 800c4e0:	e060      	b.n	800c5a4 <PWMBuiltIn_writeFrequency+0x28c>
 800c4e2:	4a4b      	ldr	r2, [pc, #300]	; (800c610 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ea:	2b08      	cmp	r3, #8
 800c4ec:	d113      	bne.n	800c516 <PWMBuiltIn_writeFrequency+0x1fe>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f88e 	bl	800c614 <PWMBuiltIn_readDuty>
 800c4f8:	eef0 7a40 	vmov.f32	s15, s0
 800c4fc:	4a42      	ldr	r2, [pc, #264]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c504:	681c      	ldr	r4, [r3, #0]
 800c506:	eeb0 0a67 	vmov.f32	s0, s15
 800c50a:	6978      	ldr	r0, [r7, #20]
 800c50c:	f7ff fdec 	bl	800c0e8 <duty2CCR>
 800c510:	4603      	mov	r3, r0
 800c512:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c514:	e046      	b.n	800c5a4 <PWMBuiltIn_writeFrequency+0x28c>
 800c516:	4a3e      	ldr	r2, [pc, #248]	; (800c610 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c51e:	2b0c      	cmp	r3, #12
 800c520:	d113      	bne.n	800c54a <PWMBuiltIn_writeFrequency+0x232>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	b29b      	uxth	r3, r3
 800c526:	4618      	mov	r0, r3
 800c528:	f000 f874 	bl	800c614 <PWMBuiltIn_readDuty>
 800c52c:	eef0 7a40 	vmov.f32	s15, s0
 800c530:	4a35      	ldr	r2, [pc, #212]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	eeb0 0a67 	vmov.f32	s0, s15
 800c53e:	6978      	ldr	r0, [r7, #20]
 800c540:	f7ff fdd2 	bl	800c0e8 <duty2CCR>
 800c544:	4603      	mov	r3, r0
 800c546:	6423      	str	r3, [r4, #64]	; 0x40
 800c548:	e02c      	b.n	800c5a4 <PWMBuiltIn_writeFrequency+0x28c>
 800c54a:	4a31      	ldr	r2, [pc, #196]	; (800c610 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c552:	2b10      	cmp	r3, #16
 800c554:	d113      	bne.n	800c57e <PWMBuiltIn_writeFrequency+0x266>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 f85a 	bl	800c614 <PWMBuiltIn_readDuty>
 800c560:	eef0 7a40 	vmov.f32	s15, s0
 800c564:	4a28      	ldr	r2, [pc, #160]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56c:	681c      	ldr	r4, [r3, #0]
 800c56e:	eeb0 0a67 	vmov.f32	s0, s15
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f7ff fdb8 	bl	800c0e8 <duty2CCR>
 800c578:	4603      	mov	r3, r0
 800c57a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c57c:	e012      	b.n	800c5a4 <PWMBuiltIn_writeFrequency+0x28c>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	b29b      	uxth	r3, r3
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f846 	bl	800c614 <PWMBuiltIn_readDuty>
 800c588:	eef0 7a40 	vmov.f32	s15, s0
 800c58c:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c594:	681c      	ldr	r4, [r3, #0]
 800c596:	eeb0 0a67 	vmov.f32	s0, s15
 800c59a:	6978      	ldr	r0, [r7, #20]
 800c59c:	f7ff fda4 	bl	800c0e8 <duty2CCR>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800c5a4:	4a18      	ldr	r2, [pc, #96]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b13      	cmp	r3, #19
 800c5bc:	f77f af52 	ble.w	800c464 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c5c0:	88fb      	ldrh	r3, [r7, #6]
 800c5c2:	4a11      	ldr	r2, [pc, #68]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800c5ce:	88fb      	ldrh	r3, [r7, #6]
 800c5d0:	4a0d      	ldr	r2, [pc, #52]	; (800c608 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	60da      	str	r2, [r3, #12]
	}
}
 800c5da:	bf00      	nop
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	f3af 8000 	nop.w
 800c5e8:	eb851eb8 	.word	0xeb851eb8
 800c5ec:	3f9eb851 	.word	0x3f9eb851
 800c5f0:	3cf5c28f 	.word	0x3cf5c28f
 800c5f4:	4bcdfe60 	.word	0x4bcdfe60
 800c5f8:	4bcdfe60 	.word	0x4bcdfe60
 800c5fc:	20000998 	.word	0x20000998
 800c600:	20000948 	.word	0x20000948
 800c604:	200008f8 	.word	0x200008f8
 800c608:	20000280 	.word	0x20000280
 800c60c:	20000970 	.word	0x20000970
 800c610:	200002d0 	.word	0x200002d0

0800c614 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c61e:	88fb      	ldrh	r3, [r7, #6]
 800c620:	4a2a      	ldr	r2, [pc, #168]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c62a:	88fb      	ldrh	r3, [r7, #6]
 800c62c:	4a28      	ldr	r2, [pc, #160]	; (800c6d0 <PWMBuiltIn_readDuty+0xbc>)
 800c62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <PWMBuiltIn_readDuty+0x30>
 800c636:	88fb      	ldrh	r3, [r7, #6]
 800c638:	4a24      	ldr	r2, [pc, #144]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c642:	e039      	b.n	800c6b8 <PWMBuiltIn_readDuty+0xa4>
 800c644:	88fb      	ldrh	r3, [r7, #6]
 800c646:	4a22      	ldr	r2, [pc, #136]	; (800c6d0 <PWMBuiltIn_readDuty+0xbc>)
 800c648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c64c:	2b04      	cmp	r3, #4
 800c64e:	d106      	bne.n	800c65e <PWMBuiltIn_readDuty+0x4a>
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	4a1e      	ldr	r2, [pc, #120]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	e02c      	b.n	800c6b8 <PWMBuiltIn_readDuty+0xa4>
 800c65e:	88fb      	ldrh	r3, [r7, #6]
 800c660:	4a1b      	ldr	r2, [pc, #108]	; (800c6d0 <PWMBuiltIn_readDuty+0xbc>)
 800c662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c666:	2b08      	cmp	r3, #8
 800c668:	d106      	bne.n	800c678 <PWMBuiltIn_readDuty+0x64>
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	4a17      	ldr	r2, [pc, #92]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c676:	e01f      	b.n	800c6b8 <PWMBuiltIn_readDuty+0xa4>
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	4a15      	ldr	r2, [pc, #84]	; (800c6d0 <PWMBuiltIn_readDuty+0xbc>)
 800c67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c680:	2b0c      	cmp	r3, #12
 800c682:	d106      	bne.n	800c692 <PWMBuiltIn_readDuty+0x7e>
 800c684:	88fb      	ldrh	r3, [r7, #6]
 800c686:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c690:	e012      	b.n	800c6b8 <PWMBuiltIn_readDuty+0xa4>
 800c692:	88fb      	ldrh	r3, [r7, #6]
 800c694:	4a0e      	ldr	r2, [pc, #56]	; (800c6d0 <PWMBuiltIn_readDuty+0xbc>)
 800c696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69a:	2b10      	cmp	r3, #16
 800c69c:	d106      	bne.n	800c6ac <PWMBuiltIn_readDuty+0x98>
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	4a0a      	ldr	r2, [pc, #40]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6aa:	e005      	b.n	800c6b8 <PWMBuiltIn_readDuty+0xa4>
 800c6ac:	88fb      	ldrh	r3, [r7, #6]
 800c6ae:	4a07      	ldr	r2, [pc, #28]	; (800c6cc <PWMBuiltIn_readDuty+0xb8>)
 800c6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f7ff fd3c 	bl	800c136 <CCR2duty>
 800c6be:	eef0 7a40 	vmov.f32	s15, s0
}
 800c6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20000280 	.word	0x20000280
 800c6d0:	200002d0 	.word	0x200002d0

0800c6d4 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c6dc:	4a07      	ldr	r2, [pc, #28]	; (800c6fc <PWMBuiltInStartChannel+0x28>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c6e4:	4a06      	ldr	r2, [pc, #24]	; (800c700 <PWMBuiltInStartChannel+0x2c>)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7f8 fb8d 	bl	8004e0c <HAL_TIM_PWM_Start>
}
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20000280 	.word	0x20000280
 800c700:	200002d0 	.word	0x200002d0

0800c704 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c70c:	4a07      	ldr	r2, [pc, #28]	; (800c72c <PWMBuiltInStopChannel+0x28>)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c714:	4a06      	ldr	r2, [pc, #24]	; (800c730 <PWMBuiltInStopChannel+0x2c>)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c71c:	4619      	mov	r1, r3
 800c71e:	f7f8 fbb9 	bl	8004e94 <HAL_TIM_PWM_Stop>
}
 800c722:	bf00      	nop
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000280 	.word	0x20000280
 800c730:	200002d0 	.word	0x200002d0

0800c734 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c73a:	2300      	movs	r3, #0
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	e005      	b.n	800c74c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff ffc7 	bl	800c6d4 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3301      	adds	r3, #1
 800c74a:	607b      	str	r3, [r7, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b13      	cmp	r3, #19
 800c750:	ddf6      	ble.n	800c740 <PWMBuiltInStart+0xc>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	e06f      	b.n	800c848 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800c768:	4a3c      	ldr	r2, [pc, #240]	; (800c85c <PWMBuiltIn_init+0x100>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fcff 	bl	800c174 <getTIM_SOURCECLK>
 800c776:	4601      	mov	r1, r0
 800c778:	4a39      	ldr	r2, [pc, #228]	; (800c860 <PWMBuiltIn_init+0x104>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c780:	2300      	movs	r3, #0
 800c782:	60bb      	str	r3, [r7, #8]
 800c784:	e04c      	b.n	800c820 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800c786:	4a37      	ldr	r2, [pc, #220]	; (800c864 <PWMBuiltIn_init+0x108>)
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c78e:	2201      	movs	r2, #1
 800c790:	fa02 f303 	lsl.w	r3, r2, r3
 800c794:	1e5a      	subs	r2, r3, #1
 800c796:	4934      	ldr	r1, [pc, #208]	; (800c868 <PWMBuiltIn_init+0x10c>)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800c79e:	4a33      	ldr	r2, [pc, #204]	; (800c86c <PWMBuiltIn_init+0x110>)
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ac:	1e5a      	subs	r2, r3, #1
 800c7ae:	4930      	ldr	r1, [pc, #192]	; (800c870 <PWMBuiltIn_init+0x114>)
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800c7b6:	4a2c      	ldr	r2, [pc, #176]	; (800c868 <PWMBuiltIn_init+0x10c>)
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	ee07 3a90 	vmov	s15, r3
 800c7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c8:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800c7cc:	4a28      	ldr	r2, [pc, #160]	; (800c870 <PWMBuiltIn_init+0x114>)
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7de:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <PWMBuiltIn_init+0x104>)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ea:	ee07 3a90 	vmov	s15, r3
 800c7ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c7fa:	ed97 7a00 	vldr	s14, [r7]
 800c7fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c802:	491c      	ldr	r1, [pc, #112]	; (800c874 <PWMBuiltIn_init+0x118>)
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	4413      	add	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	3301      	adds	r3, #1
 800c81e:	60bb      	str	r3, [r7, #8]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b09      	cmp	r3, #9
 800c824:	ddaf      	ble.n	800c786 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c878 <PWMBuiltIn_init+0x11c>
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fcd4 	bl	800c1dc <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	b29b      	uxth	r3, r3
 800c838:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c87c <PWMBuiltIn_init+0x120>
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff fd6b 	bl	800c318 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3301      	adds	r3, #1
 800c846:	60fb      	str	r3, [r7, #12]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b13      	cmp	r3, #19
 800c84c:	dd8c      	ble.n	800c768 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800c84e:	f7ff ff71 	bl	800c734 <PWMBuiltInStart>
}
 800c852:	bf00      	nop
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000280 	.word	0x20000280
 800c860:	200008f8 	.word	0x200008f8
 800c864:	20000320 	.word	0x20000320
 800c868:	20000948 	.word	0x20000948
 800c86c:	20000348 	.word	0x20000348
 800c870:	20000970 	.word	0x20000970
 800c874:	20000998 	.word	0x20000998
 800c878:	00000000 	.word	0x00000000
 800c87c:	42200000 	.word	0x42200000

0800c880 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	460b      	mov	r3, r1
 800c88a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c88e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c894:	7afb      	ldrb	r3, [r7, #11]
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	601a      	str	r2, [r3, #0]
}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
	...

0800c8ac <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8bc:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d15b      	bne.n	800c980 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	ed93 7a00 	vldr	s14, [r3]
 800c8ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8de:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c8f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8fa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	ed93 7a00 	vldr	s14, [r3]
 800c904:	edd7 7a03 	vldr	s15, [r7, #12]
 800c908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c914:	edd7 7a03 	vldr	s15, [r7, #12]
 800c918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	3304      	adds	r3, #4
 800c922:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c92a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	ed93 7a00 	vldr	s14, [r3]
 800c934:	edd7 7a03 	vldr	s15, [r7, #12]
 800c938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c93c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c940:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c944:	edd7 7a03 	vldr	s15, [r7, #12]
 800c948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c950:	3308      	adds	r3, #8
 800c952:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c95a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	ed93 7a00 	vldr	s14, [r3]
 800c964:	edd7 7a03 	vldr	s15, [r7, #12]
 800c968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c970:	330c      	adds	r3, #12
 800c972:	edd7 7a03 	vldr	s15, [r7, #12]
 800c976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c97a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800c97e:	e0fc      	b.n	800cb7a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c986:	2b01      	cmp	r3, #1
 800c988:	f040 80f7 	bne.w	800cb7a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	ed93 7a00 	vldr	s14, [r3]
 800c992:	edd7 7a03 	vldr	s15, [r7, #12]
 800c996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c99a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c99e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9aa:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800cb88 <kalman_setQ+0x2dc>
 800c9ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9ce:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	ed93 7a00 	vldr	s14, [r3]
 800c9d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca04:	3304      	adds	r3, #4
 800ca06:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800ca0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca0e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	ed93 7a00 	vldr	s14, [r3]
 800ca18:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca20:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca28:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca30:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ca42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca46:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	ed93 7a00 	vldr	s14, [r3]
 800ca50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca58:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca60:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca68:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca70:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7c:	330c      	adds	r3, #12
 800ca7e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800ca82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca86:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	ed93 7a00 	vldr	s14, [r3]
 800ca90:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca98:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caa0:	edd7 7a03 	vldr	s15, [r7, #12]
 800caa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caa8:	edd7 7a03 	vldr	s15, [r7, #12]
 800caac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab4:	3310      	adds	r3, #16
 800cab6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800caba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cabe:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	ed93 7a00 	vldr	s14, [r3]
 800cac8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cacc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cadc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae4:	3314      	adds	r3, #20
 800cae6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800caea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800caee:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	ed93 7a00 	vldr	s14, [r3]
 800caf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb00:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb10:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1c:	3318      	adds	r3, #24
 800cb1e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cb22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb26:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	ed93 7a00 	vldr	s14, [r3]
 800cb30:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb38:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb40:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4c:	331c      	adds	r3, #28
 800cb4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cb52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb56:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	ed93 7a00 	vldr	s14, [r3]
 800cb60:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	3320      	adds	r3, #32
 800cb6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb76:	edc3 7a00 	vstr	s15, [r3]
}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	42100000 	.word	0x42100000

0800cb8c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d105      	bne.n	800cbac <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	6812      	ldr	r2, [r2, #0]
 800cba8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800cbaa:	e039      	b.n	800cc20 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d134      	bne.n	800cc20 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	6812      	ldr	r2, [r2, #0]
 800cbbe:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	f04f 0200 	mov.w	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbdc:	330c      	adds	r3, #12
 800cbde:	f04f 0200 	mov.w	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe8:	3310      	adds	r3, #16
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	6852      	ldr	r2, [r2, #4]
 800cbee:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf4:	3314      	adds	r3, #20
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc00:	3318      	adds	r3, #24
 800cc02:	f04f 0200 	mov.w	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc0c:	331c      	adds	r3, #28
 800cc0e:	f04f 0200 	mov.w	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc18:	3320      	adds	r3, #32
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	6892      	ldr	r2, [r2, #8]
 800cc1e:	601a      	str	r2, [r3, #0]
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	ed87 0a03 	vstr	s0, [r7, #12]
 800cc36:	edc7 0a02 	vstr	s1, [r7, #8]
 800cc3a:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800cc3e:	f107 0108 	add.w	r1, r7, #8
 800cc42:	f107 030c 	add.w	r3, r7, #12
 800cc46:	2200      	movs	r2, #0
 800cc48:	ed97 0a01 	vldr	s0, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f000 f807 	bl	800cc60 <KALMANFILTER>
 800cc52:	6178      	str	r0, [r7, #20]
	return pk;
 800cc54:	697b      	ldr	r3, [r7, #20]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
	...

0800cc60 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800cc72:	20c4      	movs	r0, #196	; 0xc4
 800cc74:	f003 fb26 	bl	80102c4 <malloc>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <KALMANFILTER+0x26>
		return NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e10e      	b.n	800cea4 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800cc86:	22c4      	movs	r2, #196	; 0xc4
 800cc88:	2100      	movs	r1, #0
 800cc8a:	6978      	ldr	r0, [r7, #20]
 800cc8c:	f003 fb2d 	bl	80102ea <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	887a      	ldrh	r2, [r7, #2]
 800cc94:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800cc98:	6978      	ldr	r0, [r7, #20]
 800cc9a:	f000 f90f 	bl	800cebc <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	4a82      	ldr	r2, [pc, #520]	; (800ceac <KALMANFILTER+0x24c>)
 800cca2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	4a81      	ldr	r2, [pc, #516]	; (800ceb0 <KALMANFILTER+0x250>)
 800ccaa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4a80      	ldr	r2, [pc, #512]	; (800ceb4 <KALMANFILTER+0x254>)
 800ccb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	4a7f      	ldr	r2, [pc, #508]	; (800ceb8 <KALMANFILTER+0x258>)
 800ccba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800ccc6:	887b      	ldrh	r3, [r7, #2]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	f040 8095 	bne.w	800cdf8 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ccd6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	695b      	ldr	r3, [r3, #20]
 800ccdc:	3304      	adds	r3, #4
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800cce2:	ed97 7a01 	vldr	s14, [r7, #4]
 800cce6:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ccf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccfc:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	330c      	adds	r3, #12
 800cd06:	f04f 0200 	mov.w	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	695b      	ldr	r3, [r3, #20]
 800cd10:	3310      	adds	r3, #16
 800cd12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd16:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	3314      	adds	r3, #20
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	3318      	adds	r3, #24
 800cd28:	f04f 0200 	mov.w	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	695b      	ldr	r3, [r3, #20]
 800cd32:	331c      	adds	r3, #28
 800cd34:	f04f 0200 	mov.w	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	3320      	adds	r3, #32
 800cd40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd44:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	f04f 0200 	mov.w	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	3304      	adds	r3, #4
 800cd56:	f04f 0200 	mov.w	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	3308      	adds	r3, #8
 800cd62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd66:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd70:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd76:	3304      	adds	r3, #4
 800cd78:	f04f 0200 	mov.w	r2, #0
 800cd7c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd82:	3308      	adds	r3, #8
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8e:	330c      	adds	r3, #12
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	3310      	adds	r3, #16
 800cd9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cda0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	3314      	adds	r3, #20
 800cda8:	f04f 0200 	mov.w	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	3318      	adds	r3, #24
 800cdb4:	f04f 0200 	mov.w	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbe:	331c      	adds	r3, #28
 800cdc0:	f04f 0200 	mov.w	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	3320      	adds	r3, #32
 800cdcc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cdd0:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f103 0210 	add.w	r2, r3, #16
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	3350      	adds	r3, #80	; 0x50
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f7f4 f86f 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	f103 0220 	add.w	r2, r3, #32
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	3358      	adds	r3, #88	; 0x58
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	f7f4 f866 	bl	8000ec2 <arm_mat_trans_f32>
 800cdf6:	e048      	b.n	800ce8a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800cdf8:	887b      	ldrh	r3, [r7, #2]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d145      	bne.n	800ce8a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce06:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	3308      	adds	r3, #8
 800ce18:	f04f 0200 	mov.w	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	330c      	adds	r3, #12
 800ce24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce28:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800ce2a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce2e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ce3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce42:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce58:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	3304      	adds	r3, #4
 800ce60:	f04f 0200 	mov.w	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f103 0210 	add.w	r2, r3, #16
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	3350      	adds	r3, #80	; 0x50
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7f4 f825 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f103 0220 	add.w	r2, r3, #32
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	3358      	adds	r3, #88	; 0x58
 800ce82:	4619      	mov	r1, r3
 800ce84:	4610      	mov	r0, r2
 800ce86:	f7f4 f81c 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce90:	68f9      	ldr	r1, [r7, #12]
 800ce92:	6978      	ldr	r0, [r7, #20]
 800ce94:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	6978      	ldr	r0, [r7, #20]
 800cea0:	4798      	blx	r3

	return ptKalmanFilter;
 800cea2:	697b      	ldr	r3, [r7, #20]
	
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	0800d22d 	.word	0x0800d22d
 800ceb0:	0800c8ad 	.word	0x0800c8ad
 800ceb4:	0800cb8d 	.word	0x0800cb8d
 800ceb8:	0800c881 	.word	0x0800c881

0800cebc <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	f040 80d9 	bne.w	800d082 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800ced0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800ced4:	f003 f9f6 	bl	80102c4 <malloc>
 800ced8:	4603      	mov	r3, r0
 800ceda:	461a      	mov	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cee8:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800ceea:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ceee:	2100      	movs	r1, #0
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f003 f9fa 	bl	80102ea <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2201      	movs	r2, #1
 800cefc:	2103      	movs	r1, #3
 800cefe:	f7f3 fc0f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f103 0010 	add.w	r0, r3, #16
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	330c      	adds	r3, #12
 800cf0c:	2203      	movs	r2, #3
 800cf0e:	2103      	movs	r1, #3
 800cf10:	f7f3 fc06 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f103 0018 	add.w	r0, r3, #24
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	3330      	adds	r3, #48	; 0x30
 800cf1e:	2201      	movs	r2, #1
 800cf20:	2103      	movs	r1, #3
 800cf22:	f7f3 fbfd 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f103 0008 	add.w	r0, r3, #8
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	333c      	adds	r3, #60	; 0x3c
 800cf30:	2201      	movs	r2, #1
 800cf32:	2101      	movs	r1, #1
 800cf34:	f7f3 fbf4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f103 0020 	add.w	r0, r3, #32
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	3340      	adds	r3, #64	; 0x40
 800cf42:	2203      	movs	r2, #3
 800cf44:	2103      	movs	r1, #3
 800cf46:	f7f3 fbeb 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	33f4      	adds	r3, #244	; 0xf4
 800cf54:	2201      	movs	r2, #1
 800cf56:	2103      	movs	r1, #3
 800cf58:	f7f3 fbe2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	3364      	adds	r3, #100	; 0x64
 800cf66:	2203      	movs	r2, #3
 800cf68:	2103      	movs	r1, #3
 800cf6a:	f7f3 fbd9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	3388      	adds	r3, #136	; 0x88
 800cf78:	2203      	movs	r2, #3
 800cf7a:	2103      	movs	r1, #3
 800cf7c:	f7f3 fbd0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	33ac      	adds	r3, #172	; 0xac
 800cf8a:	2203      	movs	r2, #3
 800cf8c:	2103      	movs	r1, #3
 800cf8e:	f7f3 fbc7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	33d0      	adds	r3, #208	; 0xd0
 800cf9c:	2203      	movs	r2, #3
 800cf9e:	2103      	movs	r1, #3
 800cfa0:	f7f3 fbbe 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	2103      	movs	r1, #3
 800cfb4:	f7f3 fbb4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	2103      	movs	r1, #3
 800cfc8:	f7f3 fbaa 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800cfd8:	2203      	movs	r2, #3
 800cfda:	2103      	movs	r1, #3
 800cfdc:	f7f3 fba0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800cfec:	2203      	movs	r2, #3
 800cfee:	2103      	movs	r1, #3
 800cff0:	f7f3 fb96 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d000:	2203      	movs	r2, #3
 800d002:	2103      	movs	r1, #3
 800d004:	f7f3 fb8c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d014:	2203      	movs	r2, #3
 800d016:	2103      	movs	r1, #3
 800d018:	f7f3 fb82 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d028:	2203      	movs	r2, #3
 800d02a:	2103      	movs	r1, #3
 800d02c:	f7f3 fb78 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d03c:	2201      	movs	r2, #1
 800d03e:	2103      	movs	r1, #3
 800d040:	f7f3 fb6e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d050:	2201      	movs	r2, #1
 800d052:	2103      	movs	r1, #3
 800d054:	f7f3 fb64 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d064:	2201      	movs	r2, #1
 800d066:	2103      	movs	r1, #3
 800d068:	f7f3 fb5a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d078:	2201      	movs	r2, #1
 800d07a:	2103      	movs	r1, #3
 800d07c:	f7f3 fb50 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d080:	e0d0      	b.n	800d224 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 80cb 	bne.w	800d224 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d08e:	20bc      	movs	r0, #188	; 0xbc
 800d090:	f003 f918 	bl	80102c4 <malloc>
 800d094:	4603      	mov	r3, r0
 800d096:	461a      	mov	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d0a4:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d0a6:	22bc      	movs	r2, #188	; 0xbc
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f003 f91d 	bl	80102ea <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	2102      	movs	r1, #2
 800d0b8:	f7f3 fb32 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f103 0010 	add.w	r0, r3, #16
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	2102      	movs	r1, #2
 800d0ca:	f7f3 fb29 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f103 0018 	add.w	r0, r3, #24
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3318      	adds	r3, #24
 800d0d8:	2201      	movs	r2, #1
 800d0da:	2102      	movs	r1, #2
 800d0dc:	f7f3 fb20 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f103 0008 	add.w	r0, r3, #8
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3320      	adds	r3, #32
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	f7f3 fb17 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f103 0020 	add.w	r0, r3, #32
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3324      	adds	r3, #36	; 0x24
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	2101      	movs	r1, #1
 800d100:	f7f3 fb0e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3358      	adds	r3, #88	; 0x58
 800d10e:	2201      	movs	r2, #1
 800d110:	2101      	movs	r1, #1
 800d112:	f7f3 fb05 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	332c      	adds	r3, #44	; 0x2c
 800d120:	2202      	movs	r2, #2
 800d122:	2102      	movs	r1, #2
 800d124:	f7f3 fafc 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	333c      	adds	r3, #60	; 0x3c
 800d132:	2202      	movs	r2, #2
 800d134:	2102      	movs	r1, #2
 800d136:	f7f3 faf3 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	334c      	adds	r3, #76	; 0x4c
 800d144:	2201      	movs	r2, #1
 800d146:	2101      	movs	r1, #1
 800d148:	f7f3 faea 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3350      	adds	r3, #80	; 0x50
 800d156:	2201      	movs	r2, #1
 800d158:	2102      	movs	r1, #2
 800d15a:	f7f3 fae1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	335c      	adds	r3, #92	; 0x5c
 800d168:	2202      	movs	r2, #2
 800d16a:	2102      	movs	r1, #2
 800d16c:	f7f3 fad8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	336c      	adds	r3, #108	; 0x6c
 800d17a:	2201      	movs	r2, #1
 800d17c:	2102      	movs	r1, #2
 800d17e:	f7f3 facf 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3374      	adds	r3, #116	; 0x74
 800d18c:	2201      	movs	r2, #1
 800d18e:	2102      	movs	r1, #2
 800d190:	f7f3 fac6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	337c      	adds	r3, #124	; 0x7c
 800d19e:	2202      	movs	r2, #2
 800d1a0:	2102      	movs	r1, #2
 800d1a2:	f7f3 fabd 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	338c      	adds	r3, #140	; 0x8c
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	2102      	movs	r1, #2
 800d1b4:	f7f3 fab4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	339c      	adds	r3, #156	; 0x9c
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	f7f3 faab 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	33a0      	adds	r3, #160	; 0xa0
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	f7f3 faa2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	33a4      	adds	r3, #164	; 0xa4
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	2101      	movs	r1, #1
 800d1ea:	f7f3 fa99 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	33a8      	adds	r3, #168	; 0xa8
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	f7f3 fa90 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	33ac      	adds	r3, #172	; 0xac
 800d20a:	2201      	movs	r2, #1
 800d20c:	2102      	movs	r1, #2
 800d20e:	f7f3 fa87 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	33b4      	adds	r3, #180	; 0xb4
 800d21c:	2201      	movs	r2, #1
 800d21e:	2102      	movs	r1, #2
 800d220:	f7f3 fa7e 	bl	8000720 <arm_mat_init_f32>
}
 800d224:	bf00      	nop
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f103 0010 	add.w	r0, r3, #16
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3398      	adds	r3, #152	; 0x98
 800d240:	461a      	mov	r2, r3
 800d242:	f7f3 fcbd 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f103 0010 	add.w	r0, r3, #16
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3368      	adds	r3, #104	; 0x68
 800d256:	461a      	mov	r2, r3
 800d258:	f7f3 fcb2 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	3370      	adds	r3, #112	; 0x70
 800d26c:	461a      	mov	r2, r3
 800d26e:	f7f3 fca7 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3368      	adds	r3, #104	; 0x68
 800d282:	461a      	mov	r2, r3
 800d284:	f7f3 f9b4 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3360      	adds	r3, #96	; 0x60
 800d298:	461a      	mov	r2, r3
 800d29a:	f7f3 fc91 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f103 0020 	add.w	r0, r3, #32
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3378      	adds	r3, #120	; 0x78
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f7f3 fc86 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3380      	adds	r3, #128	; 0x80
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f7f3 f993 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3378      	adds	r3, #120	; 0x78
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	f7f3 fa3a 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3348      	adds	r3, #72	; 0x48
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f7f3 fc67 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f103 0020 	add.w	r0, r3, #32
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3388      	adds	r3, #136	; 0x88
 800d302:	461a      	mov	r2, r3
 800d304:	f7f3 fc5c 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3390      	adds	r3, #144	; 0x90
 800d318:	461a      	mov	r2, r3
 800d31a:	f7f3 fd3a 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	33a0      	adds	r3, #160	; 0xa0
 800d32e:	461a      	mov	r2, r3
 800d330:	f7f3 fc46 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	33a0      	adds	r3, #160	; 0xa0
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4619      	mov	r1, r3
 800d342:	f7f3 f955 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f103 0120 	add.w	r1, r3, #32
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3330      	adds	r3, #48	; 0x30
 800d356:	461a      	mov	r2, r3
 800d358:	f7f3 fc32 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3370      	adds	r3, #112	; 0x70
 800d36c:	461a      	mov	r2, r3
 800d36e:	f7f3 fc27 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3330      	adds	r3, #48	; 0x30
 800d382:	461a      	mov	r2, r3
 800d384:	f7f3 fd05 	bl	8000d92 <arm_mat_sub_f32>

}
 800d388:	bf00      	nop
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d390:	b480      	push	{r7}
 800d392:	b089      	sub	sp, #36	; 0x24
 800d394:	af00      	add	r7, sp, #0
 800d396:	61f8      	str	r0, [r7, #28]
 800d398:	ed87 0a06 	vstr	s0, [r7, #24]
 800d39c:	edc7 0a05 	vstr	s1, [r7, #20]
 800d3a0:	ed87 1a04 	vstr	s2, [r7, #16]
 800d3a4:	edc7 1a03 	vstr	s3, [r7, #12]
 800d3a8:	ed87 2a02 	vstr	s4, [r7, #8]
 800d3ac:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	69ba      	ldr	r2, [r7, #24]
 800d3b4:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d3c8:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	f04f 0200 	mov.w	r2, #0
 800d3d0:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d3de:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	4a2f      	ldr	r2, [pc, #188]	; (800d4a8 <initPID+0x118>)
 800d3ec:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	edd3 6a02 	vldr	s13, [r3, #8]
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	ed93 7a00 	vldr	s14, [r3]
 800d3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	edd3 6a08 	vldr	s13, [r3, #32]
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	ed93 7a08 	vldr	s14, [r3, #32]
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	ed93 6a07 	vldr	s12, [r3, #28]
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	edd3 7a05 	vldr	s15, [r3, #20]
 800d41c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d420:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	edd3 7a00 	vldr	s15, [r3]
 800d434:	eeb1 7a67 	vneg.f32	s14, s15
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f04f 0200 	mov.w	r2, #0
 800d458:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	f04f 0200 	mov.w	r2, #0
 800d460:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	f04f 0200 	mov.w	r2, #0
 800d468:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	f04f 0200 	mov.w	r2, #0
 800d470:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800d478:	edd7 7a02 	vldr	s15, [r7, #8]
 800d47c:	eef1 7a67 	vneg.f32	s15, s15
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800d48c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d490:	eef1 7a67 	vneg.f32	s15, s15
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800d49a:	bf00      	nop
 800d49c:	3724      	adds	r7, #36	; 0x24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	41700000 	.word	0x41700000

0800d4ac <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b088      	sub	sp, #32
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	ed87 0a05 	vstr	s0, [r7, #20]
 800d4b6:	edc7 0a04 	vstr	s1, [r7, #16]
 800d4ba:	ed87 1a03 	vstr	s2, [r7, #12]
 800d4be:	edc7 1a02 	vstr	s3, [r7, #8]
 800d4c2:	ed87 2a01 	vstr	s4, [r7, #4]
 800d4c6:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800d4ca:	2054      	movs	r0, #84	; 0x54
 800d4cc:	f002 fefa 	bl	80102c4 <malloc>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d101      	bne.n	800d4de <newPID+0x32>
		return NULL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e014      	b.n	800d508 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800d4de:	2254      	movs	r2, #84	; 0x54
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	69f8      	ldr	r0, [r7, #28]
 800d4e4:	f002 ff01 	bl	80102ea <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800d4e8:	edd7 2a00 	vldr	s5, [r7]
 800d4ec:	ed97 2a01 	vldr	s4, [r7, #4]
 800d4f0:	edd7 1a02 	vldr	s3, [r7, #8]
 800d4f4:	ed97 1a03 	vldr	s2, [r7, #12]
 800d4f8:	edd7 0a04 	vldr	s1, [r7, #16]
 800d4fc:	ed97 0a05 	vldr	s0, [r7, #20]
 800d500:	69f8      	ldr	r0, [r7, #28]
 800d502:	f7ff ff45 	bl	800d390 <initPID>
	return pp;
 800d506:	69fb      	ldr	r3, [r7, #28]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3720      	adds	r7, #32
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <getUsartDevice>:
static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode);
static void printfBin_appendData(int16_t dat);
static void printfBin();
static void printfBin_init();

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a0c      	ldr	r2, [pc, #48]	; (800d54c <getUsartDevice+0x3c>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d101      	bne.n	800d524 <getUsartDevice+0x14>
		return &Usart1Device;
 800d520:	4b0b      	ldr	r3, [pc, #44]	; (800d550 <getUsartDevice+0x40>)
 800d522:	e00c      	b.n	800d53e <getUsartDevice+0x2e>
	if(huart==&huart2)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a0b      	ldr	r2, [pc, #44]	; (800d554 <getUsartDevice+0x44>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d101      	bne.n	800d530 <getUsartDevice+0x20>
		return &Usart2Device;
 800d52c:	4b0a      	ldr	r3, [pc, #40]	; (800d558 <getUsartDevice+0x48>)
 800d52e:	e006      	b.n	800d53e <getUsartDevice+0x2e>
	if(huart==&huart3)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a0a      	ldr	r2, [pc, #40]	; (800d55c <getUsartDevice+0x4c>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d101      	bne.n	800d53c <getUsartDevice+0x2c>
		return &Usart3Device;
 800d538:	4b09      	ldr	r3, [pc, #36]	; (800d560 <getUsartDevice+0x50>)
 800d53a:	e000      	b.n	800d53e <getUsartDevice+0x2e>
	return &Usart3Device;
 800d53c:	4b08      	ldr	r3, [pc, #32]	; (800d560 <getUsartDevice+0x50>)
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	20009d48 	.word	0x20009d48
 800d550:	2000dffc 	.word	0x2000dffc
 800d554:	20009dc8 	.word	0x20009dc8
 800d558:	2000a0ac 	.word	0x2000a0ac
 800d55c:	20009c68 	.word	0x20009c68
 800d560:	20011f4c 	.word	0x20011f4c

0800d564 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0

	 //Usart 1 is connected to raspberry pi on its usart1
	 myInitUsartMode(&huart1,IntMode);
 800d568:	2100      	movs	r1, #0
 800d56a:	4807      	ldr	r0, [pc, #28]	; (800d588 <my_UsartInit+0x24>)
 800d56c:	f000 f812 	bl	800d594 <myInitUsartMode>

	 //for application use
	 myInitUsartMode(&huart2,IntMode);
 800d570:	2100      	movs	r1, #0
 800d572:	4806      	ldr	r0, [pc, #24]	; (800d58c <my_UsartInit+0x28>)
 800d574:	f000 f80e 	bl	800d594 <myInitUsartMode>

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,DMAMode);
 800d578:	2101      	movs	r1, #1
 800d57a:	4805      	ldr	r0, [pc, #20]	; (800d590 <my_UsartInit+0x2c>)
 800d57c:	f000 f80a 	bl	800d594 <myInitUsartMode>

	 //Enable printf Binany
	 printfBin_init();
 800d580:	f000 fb6e 	bl	800dc60 <printfBin_init>
}
 800d584:	bf00      	nop
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20009d48 	.word	0x20009d48
 800d58c:	20009dc8 	.word	0x20009dc8
 800d590:	20009c68 	.word	0x20009c68

0800d594 <myInitUsartMode>:

void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff ffb5 	bl	800d510 <getUsartDevice>
 800d5a6:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800d5a8:	f643 7250 	movw	r2, #16208	; 0x3f50
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f002 fe9b 	bl	80102ea <memset>
	uartDev->huart = huart;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800d5c0:	68f9      	ldr	r1, [r7, #12]
 800d5c2:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d5c6:	440b      	add	r3, r1
 800d5c8:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800d5d0:	441a      	add	r2, r3
 800d5d2:	68f9      	ldr	r1, [r7, #12]
 800d5d4:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800d5d8:	440b      	add	r3, r1
 800d5da:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	f643 733c 	movw	r3, #16188	; 0x3f3c
 800d5e8:	440b      	add	r3, r1
 800d5ea:	601a      	str	r2, [r3, #0]
	if(usartMode==IntMode){
 800d5ec:	78fb      	ldrb	r3, [r7, #3]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d108      	bne.n	800d604 <myInitUsartMode+0x70>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f042 0220 	orr.w	r2, r2, #32
 800d600:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800d602:	e016      	b.n	800d632 <myInitUsartMode+0x9e>
	else if(usartMode==DMAMode){
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d113      	bne.n	800d632 <myInitUsartMode+0x9e>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800d614:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d618:	4619      	mov	r1, r3
 800d61a:	f7f8 fd5f 	bl	80060dc <HAL_UART_Receive_DMA>
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f042 0210 	orr.w	r2, r2, #16
 800d630:	601a      	str	r2, [r3, #0]
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <myUsartDMAIRQ>:
		HAL_UART_RxIdleCallback(&huart3);
		 HAL_UART_IRQHandler(&huart3);
	}
*/
void myUsartDMAIRQ(UART_HandleTypeDef *huart)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b086      	sub	sp, #24
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7ff ff64 	bl	800d510 <getUsartDevice>
 800d648:	6178      	str	r0, [r7, #20]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	69db      	ldr	r3, [r3, #28]
 800d650:	f003 0310 	and.w	r3, r3, #16
 800d654:	2b10      	cmp	r3, #16
 800d656:	bf0c      	ite	eq
 800d658:	2301      	moveq	r3, #1
 800d65a:	2300      	movne	r3, #0
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	613b      	str	r3, [r7, #16]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f003 0310 	and.w	r3, r3, #16
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bf14      	ite	ne
 800d66e:	2301      	movne	r3, #1
 800d670:	2300      	moveq	r3, #0
 800d672:	b2db      	uxtb	r3, r3
 800d674:	60fb      	str	r3, [r7, #12]
	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00c      	beq.n	800d696 <myUsartDMAIRQ+0x5c>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d009      	beq.n	800d696 <myUsartDMAIRQ+0x5c>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2210      	movs	r2, #16
 800d688:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		uartDev->Received = 1;
 800d68a:	697a      	ldr	r2, [r7, #20]
 800d68c:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800d690:	4413      	add	r3, r2
 800d692:	2201      	movs	r2, #1
 800d694:	801a      	strh	r2, [r3, #0]
		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/
	}
}
 800d696:	bf00      	nop
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800d6ac:	4a44      	ldr	r2, [pc, #272]	; (800d7c0 <_write+0x120>)
 800d6ae:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d6b2:	4413      	add	r3, r2
 800d6b4:	881b      	ldrh	r3, [r3, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6bc:	fb03 f302 	mul.w	r3, r3, r2
 800d6c0:	4a3f      	ldr	r2, [pc, #252]	; (800d7c0 <_write+0x120>)
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	6978      	ldr	r0, [r7, #20]
 800d6d0:	f002 fe00 	bl	80102d4 <memcpy>
	*(pDes+len)='\0';
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	4413      	add	r3, r2
 800d6da:	2200      	movs	r2, #0
 800d6dc:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800d6de:	4a38      	ldr	r2, [pc, #224]	; (800d7c0 <_write+0x120>)
 800d6e0:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d6e4:	4413      	add	r3, r2
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	b299      	uxth	r1, r3
 800d6ee:	4a34      	ldr	r2, [pc, #208]	; (800d7c0 <_write+0x120>)
 800d6f0:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d6f4:	4403      	add	r3, r0
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4413      	add	r3, r2
 800d6fa:	460a      	mov	r2, r1
 800d6fc:	805a      	strh	r2, [r3, #2]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800d6fe:	4a30      	ldr	r2, [pc, #192]	; (800d7c0 <_write+0x120>)
 800d700:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d704:	4413      	add	r3, r2
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	b299      	uxth	r1, r3
 800d70c:	4a2c      	ldr	r2, [pc, #176]	; (800d7c0 <_write+0x120>)
 800d70e:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d712:	4413      	add	r3, r2
 800d714:	460a      	mov	r2, r1
 800d716:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800d718:	4a29      	ldr	r2, [pc, #164]	; (800d7c0 <_write+0x120>)
 800d71a:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d71e:	4413      	add	r3, r2
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d11a      	bne.n	800d75c <_write+0xbc>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800d726:	4b26      	ldr	r3, [pc, #152]	; (800d7c0 <_write+0x120>)
 800d728:	6818      	ldr	r0, [r3, #0]
 800d72a:	4a25      	ldr	r2, [pc, #148]	; (800d7c0 <_write+0x120>)
 800d72c:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d730:	4413      	add	r3, r2
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	4619      	mov	r1, r3
 800d736:	4a22      	ldr	r2, [pc, #136]	; (800d7c0 <_write+0x120>)
 800d738:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d73c:	440b      	add	r3, r1
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	4413      	add	r3, r2
 800d742:	885b      	ldrh	r3, [r3, #2]
 800d744:	461a      	mov	r2, r3
 800d746:	6979      	ldr	r1, [r7, #20]
 800d748:	f7f8 fc4c 	bl	8005fe4 <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800d74c:	f7fe fb46 	bl	800bddc <micros>
 800d750:	4602      	mov	r2, r0
 800d752:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <_write+0x120>)
 800d754:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	e00a      	b.n	800d772 <_write+0xd2>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
 800d75c:	4a18      	ldr	r2, [pc, #96]	; (800d7c0 <_write+0x120>)
 800d75e:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d762:	4413      	add	r3, r2
 800d764:	8819      	ldrh	r1, [r3, #0]
 800d766:	4a16      	ldr	r2, [pc, #88]	; (800d7c0 <_write+0x120>)
 800d768:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d76c:	4413      	add	r3, r2
 800d76e:	460a      	mov	r2, r1
 800d770:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800d772:	4a13      	ldr	r2, [pc, #76]	; (800d7c0 <_write+0x120>)
 800d774:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d778:	4413      	add	r3, r2
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	3301      	adds	r3, #1
 800d77e:	b299      	uxth	r1, r3
 800d780:	4a0f      	ldr	r2, [pc, #60]	; (800d7c0 <_write+0x120>)
 800d782:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d786:	4413      	add	r3, r2
 800d788:	460a      	mov	r2, r1
 800d78a:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800d78c:	4a0c      	ldr	r2, [pc, #48]	; (800d7c0 <_write+0x120>)
 800d78e:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d792:	4413      	add	r3, r2
 800d794:	881a      	ldrh	r2, [r3, #0]
 800d796:	4b0b      	ldr	r3, [pc, #44]	; (800d7c4 <_write+0x124>)
 800d798:	fba3 1302 	umull	r1, r3, r3, r2
 800d79c:	08d9      	lsrs	r1, r3, #3
 800d79e:	460b      	mov	r3, r1
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	1a5b      	subs	r3, r3, r1
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	b299      	uxth	r1, r3
 800d7a8:	4a05      	ldr	r2, [pc, #20]	; (800d7c0 <_write+0x120>)
 800d7aa:	f643 239e 	movw	r3, #15006	; 0x3a9e
 800d7ae:	4413      	add	r3, r2
 800d7b0:	460a      	mov	r2, r1
 800d7b2:	801a      	strh	r2, [r3, #0]
//	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800d7b4:	687b      	ldr	r3, [r7, #4]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20011f4c 	.word	0x20011f4c
 800d7c4:	88888889 	.word	0x88888889

0800d7c8 <HAL_UART_TxCpltCallback>:



/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff fe9d 	bl	800d510 <getUsartDevice>
 800d7d6:	60f8      	str	r0, [r7, #12]
	 /*update information*/
	 uartDev->TxEnd = micros();
 800d7d8:	f7fe fb00 	bl	800bddc <micros>
 800d7dc:	4601      	mov	r1, r0
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	f643 7344 	movw	r3, #16196	; 0x3f44
 800d7e4:	4413      	add	r3, r2
 800d7e6:	6019      	str	r1, [r3, #0]
	 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	f643 7344 	movw	r3, #16196	; 0x3f44
 800d7ee:	4413      	add	r3, r2
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	1ad2      	subs	r2, r2, r3
 800d7fc:	68f9      	ldr	r1, [r7, #12]
 800d7fe:	f643 7348 	movw	r3, #16200	; 0x3f48
 800d802:	440b      	add	r3, r1
 800d804:	601a      	str	r2, [r3, #0]
	 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d80c:	4413      	add	r3, r2
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	4619      	mov	r1, r3
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d818:	440b      	add	r3, r1
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	4413      	add	r3, r2
 800d81e:	885b      	ldrh	r3, [r3, #2]
 800d820:	4619      	mov	r1, r3
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	f643 734c 	movw	r3, #16204	; 0x3f4c
 800d828:	4413      	add	r3, r2
 800d82a:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	uartDev->consumerTxBufNum++;
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d832:	4413      	add	r3, r2
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	3301      	adds	r3, #1
 800d838:	b299      	uxth	r1, r3
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d840:	4413      	add	r3, r2
 800d842:	460a      	mov	r2, r1
 800d844:	801a      	strh	r2, [r3, #0]
	uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d84c:	4413      	add	r3, r2
 800d84e:	881a      	ldrh	r2, [r3, #0]
 800d850:	4b27      	ldr	r3, [pc, #156]	; (800d8f0 <HAL_UART_TxCpltCallback+0x128>)
 800d852:	fba3 1302 	umull	r1, r3, r3, r2
 800d856:	08d9      	lsrs	r1, r3, #3
 800d858:	460b      	mov	r3, r1
 800d85a:	011b      	lsls	r3, r3, #4
 800d85c:	1a5b      	subs	r3, r3, r1
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	b299      	uxth	r1, r3
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d868:	4413      	add	r3, r2
 800d86a:	460a      	mov	r2, r1
 800d86c:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 uartDev->bufferedTxNum--;
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d874:	4413      	add	r3, r2
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	3b01      	subs	r3, #1
 800d87a:	b299      	uxth	r1, r3
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d882:	4413      	add	r3, r2
 800d884:	460a      	mov	r2, r1
 800d886:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(uartDev->bufferedTxNum>0){
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	f643 23a0 	movw	r3, #15008	; 0x3aa0
 800d88e:	4413      	add	r3, r2
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d027      	beq.n	800d8e6 <HAL_UART_TxCpltCallback+0x11e>
		uartDev->TxStart = micros();
 800d896:	f7fe faa1 	bl	800bddc <micros>
 800d89a:	4602      	mov	r2, r0
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800d8a2:	601a      	str	r2, [r3, #0]
		uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d8aa:	4413      	add	r3, r2
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8b4:	fb03 f302 	mul.w	r3, r3, r2
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	3304      	adds	r3, #4
 800d8be:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	f643 239c 	movw	r3, #15004	; 0x3a9c
 800d8ca:	4413      	add	r3, r2
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	f641 5350 	movw	r3, #7504	; 0x1d50
 800d8d6:	440b      	add	r3, r1
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	4413      	add	r3, r2
 800d8dc:	885b      	ldrh	r3, [r3, #2]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	f7f8 fb7f 	bl	8005fe4 <HAL_UART_Transmit_DMA>
	}
}
 800d8e6:	bf00      	nop
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	88888889 	.word	0x88888889

0800d8f4 <myUsartIntIRQ>:
	  myUsartIntIRQ(&huart1);
	  HAL_UART_IRQHandler(&huart1);
	}
*/
void myUsartIntIRQ(UART_HandleTypeDef *huart)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f7ff fe07 	bl	800d510 <getUsartDevice>
 800d902:	60f8      	str	r0, [r7, #12]
 	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	f003 0320 	and.w	r3, r3, #32
 800d90e:	2b20      	cmp	r3, #32
 800d910:	d148      	bne.n	800d9a4 <myUsartIntIRQ+0xb0>
	{
		*(uartDev->pRxBuf)=(uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d91e:	4413      	add	r3, r2
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	b2ca      	uxtb	r2, r1
 800d924:	701a      	strb	r2, [r3, #0]
		if(*(uartDev->pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d92c:	4413      	add	r3, r2
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b0a      	cmp	r3, #10
 800d934:	d12b      	bne.n	800d98e <myUsartIntIRQ+0x9a>
		{
			if((uartDev->pRxBuf)!=(uartDev->RxBuf)) // if '0x0a' is not in the beginning
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d93c:	4413      	add	r3, r2
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800d946:	429a      	cmp	r2, r3
 800d948:	d02c      	beq.n	800d9a4 <myUsartIntIRQ+0xb0>
			{
				if(*(uartDev->pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d950:	4413      	add	r3, r2
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3b01      	subs	r3, #1
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	2b0d      	cmp	r3, #13
 800d95a:	d106      	bne.n	800d96a <myUsartIntIRQ+0x76>
			    {
					uartDev->Received = 1;
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800d962:	4413      	add	r3, r2
 800d964:	2201      	movs	r2, #1
 800d966:	801a      	strh	r2, [r3, #0]
				}
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else uartDev->pRxBuf++;
	}
}
 800d968:	e01c      	b.n	800d9a4 <myUsartIntIRQ+0xb0>
					memset(uartDev->RxBuf,0,UART_RX_BUF_SIZE);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800d970:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f002 fcb7 	bl	80102ea <memset>
					uartDev->pRxBuf=uartDev->RxBuf;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f503 526b 	add.w	r2, r3, #15040	; 0x3ac0
 800d982:	68f9      	ldr	r1, [r7, #12]
 800d984:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d988:	440b      	add	r3, r1
 800d98a:	601a      	str	r2, [r3, #0]
}
 800d98c:	e00a      	b.n	800d9a4 <myUsartIntIRQ+0xb0>
		else uartDev->pRxBuf++;
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d994:	4413      	add	r3, r2
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	68f9      	ldr	r1, [r7, #12]
 800d99c:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800d9a0:	440b      	add	r3, r1
 800d9a2:	601a      	str	r2, [r3, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <UsartDMAReceiveHandler>:


void UsartDMAReceiveHandler(UART_DEVICE *UsartDevice)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800d9ba:	4413      	add	r3, r2
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	f040 80f5 	bne.w	800dbae <UsartDMAReceiveHandler+0x202>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ca:	2b22      	cmp	r3, #34	; 0x22
 800d9cc:	d14b      	bne.n	800da66 <UsartDMAReceiveHandler+0xba>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9da:	2b40      	cmp	r3, #64	; 0x40
 800d9dc:	d143      	bne.n	800da66 <UsartDMAReceiveHandler+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	689a      	ldr	r2, [r3, #8]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9f0:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d01c      	beq.n	800da36 <UsartDMAReceiveHandler+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	b299      	uxth	r1, r3
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	f643 7338 	movw	r3, #16184	; 0x3f38
 800da1a:	4413      	add	r3, r2
 800da1c:	460a      	mov	r2, r1
 800da1e:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2200      	movs	r2, #0
 800da26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da30:	4618      	mov	r0, r3
 800da32:	f7f4 faa1 	bl	8001f78 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800da48:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f022 0201 	bic.w	r2, r2, #1
 800da5c:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2220      	movs	r2, #32
 800da64:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	4619      	mov	r1, r3
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	f643 7338 	movw	r3, #16184	; 0x3f38
 800da78:	4413      	add	r3, r2
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	440b      	add	r3, r1
 800da7e:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800da86:	dd19      	ble.n	800dabc <UsartDMAReceiveHandler+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800da8e:	4413      	add	r3, r2
 800da90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800da94:	2100      	movs	r1, #0
 800da96:	4618      	mov	r0, r3
 800da98:	f002 fc27 	bl	80102ea <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800daa2:	441a      	add	r2, r3
 800daa4:	6879      	ldr	r1, [r7, #4]
 800daa6:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800daaa:	440b      	add	r3, r1
 800daac:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800dab4:	4413      	add	r3, r2
 800dab6:	2200      	movs	r2, #0
 800dab8:	801a      	strh	r2, [r3, #0]
 800daba:	e05a      	b.n	800db72 <UsartDMAReceiveHandler+0x1c6>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800dac2:	4413      	add	r3, r2
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800dacc:	4413      	add	r3, r2
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	18d0      	adds	r0, r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f503 516b 	add.w	r1, r3, #15040	; 0x3ac0
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dade:	4413      	add	r3, r2
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	f002 fbf6 	bl	80102d4 <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800daee:	4413      	add	r3, r2
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	f643 7338 	movw	r3, #16184	; 0x3f38
 800daf8:	440b      	add	r3, r1
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	441a      	add	r2, r3
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800db04:	440b      	add	r3, r1
 800db06:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	b299      	uxth	r1, r3
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800db12:	4413      	add	r3, r2
 800db14:	460a      	mov	r2, r1
 800db16:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800db1e:	4413      	add	r3, r2
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	3b01      	subs	r3, #1
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	441a      	add	r2, r3
 800db28:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800db2c:	4413      	add	r3, r2
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b0a      	cmp	r3, #10
 800db32:	d11e      	bne.n	800db72 <UsartDMAReceiveHandler+0x1c6>
				{
					serial3Callback((char *)UsartDevice->RxLineBuf);
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800db3a:	4413      	add	r3, r2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f001 fa0d 	bl	800ef5c <serial3Callback>
					memset(UsartDevice->RxLineBuf,0,len);
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	f643 43b8 	movw	r3, #15544	; 0x3cb8
 800db48:	4413      	add	r3, r2
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	2100      	movs	r1, #0
 800db4e:	4618      	mov	r0, r3
 800db50:	f002 fbcb 	bl	80102ea <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f643 42b8 	movw	r2, #15544	; 0x3cb8
 800db5a:	441a      	add	r2, r3
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	f643 63ac 	movw	r3, #16044	; 0x3eac
 800db62:	440b      	add	r3, r1
 800db64:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	f643 63b0 	movw	r3, #16048	; 0x3eb0
 800db6c:	4413      	add	r3, r2
 800db6e:	2200      	movs	r2, #0
 800db70:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800db78:	4413      	add	r3, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	f643 63b4 	movw	r3, #16052	; 0x3eb4
 800db84:	4413      	add	r3, r2
 800db86:	2264      	movs	r2, #100	; 0x64
 800db88:	2100      	movs	r1, #0
 800db8a:	4618      	mov	r0, r3
 800db8c:	f002 fbad 	bl	80102ea <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800db96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800db9a:	2100      	movs	r1, #0
 800db9c:	4618      	mov	r0, r3
 800db9e:	f002 fba4 	bl	80102ea <memset>
			UsartDevice->countRxBuf = 0;
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	f643 7338 	movw	r3, #16184	; 0x3f38
 800dba8:	4413      	add	r3, r2
 800dbaa:	2200      	movs	r2, #0
 800dbac:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6818      	ldr	r0, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800dbb8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	f7f8 fa8d 	bl	80060dc <HAL_UART_Receive_DMA>
}
 800dbc2:	bf00      	nop
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <Usart_ReceiveHandler>:

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceiveHandler()
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800dbd0:	4a1e      	ldr	r2, [pc, #120]	; (800dc4c <Usart_ReceiveHandler+0x80>)
 800dbd2:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dbd6:	4413      	add	r3, r2
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d114      	bne.n	800dc08 <Usart_ReceiveHandler+0x3c>
	{
		serial1Callback((char *)Usart1Device.RxBuf);
 800dbde:	481c      	ldr	r0, [pc, #112]	; (800dc50 <Usart_ReceiveHandler+0x84>)
 800dbe0:	f7fe f8e6 	bl	800bdb0 <serial1Callback>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800dbe4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dbe8:	2100      	movs	r1, #0
 800dbea:	4819      	ldr	r0, [pc, #100]	; (800dc50 <Usart_ReceiveHandler+0x84>)
 800dbec:	f002 fb7d 	bl	80102ea <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800dbf0:	4a16      	ldr	r2, [pc, #88]	; (800dc4c <Usart_ReceiveHandler+0x80>)
 800dbf2:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dbf6:	4413      	add	r3, r2
 800dbf8:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <Usart_ReceiveHandler+0x84>)
 800dbfa:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800dbfc:	4a13      	ldr	r2, [pc, #76]	; (800dc4c <Usart_ReceiveHandler+0x80>)
 800dbfe:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dc02:	4413      	add	r3, r2
 800dc04:	2200      	movs	r2, #0
 800dc06:	801a      	strh	r2, [r3, #0]
	}

	/********************************Usart 2 Int reception****************************/
	if(Usart2Device.Received == 1)
 800dc08:	4a12      	ldr	r2, [pc, #72]	; (800dc54 <Usart_ReceiveHandler+0x88>)
 800dc0a:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dc0e:	4413      	add	r3, r2
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d114      	bne.n	800dc40 <Usart_ReceiveHandler+0x74>
	{
		serial2Callback((char *)Usart2Device.RxBuf);
 800dc16:	4810      	ldr	r0, [pc, #64]	; (800dc58 <Usart_ReceiveHandler+0x8c>)
 800dc18:	f000 fb4e 	bl	800e2b8 <serial2Callback>
		memset(Usart2Device.RxBuf,0,UART_RX_BUF_SIZE);
 800dc1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dc20:	2100      	movs	r1, #0
 800dc22:	480d      	ldr	r0, [pc, #52]	; (800dc58 <Usart_ReceiveHandler+0x8c>)
 800dc24:	f002 fb61 	bl	80102ea <memset>
		Usart2Device.pRxBuf=Usart2Device.RxBuf;
 800dc28:	4a0a      	ldr	r2, [pc, #40]	; (800dc54 <Usart_ReceiveHandler+0x88>)
 800dc2a:	f643 43b4 	movw	r3, #15540	; 0x3cb4
 800dc2e:	4413      	add	r3, r2
 800dc30:	4a09      	ldr	r2, [pc, #36]	; (800dc58 <Usart_ReceiveHandler+0x8c>)
 800dc32:	601a      	str	r2, [r3, #0]
		Usart2Device.Received = 0;
 800dc34:	4a07      	ldr	r2, [pc, #28]	; (800dc54 <Usart_ReceiveHandler+0x88>)
 800dc36:	f643 733a 	movw	r3, #16186	; 0x3f3a
 800dc3a:	4413      	add	r3, r2
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	801a      	strh	r2, [r3, #0]
	}

	/********************************Usart 3 DMA reception****************************/
	UsartDMAReceiveHandler(&Usart3Device);
 800dc40:	4806      	ldr	r0, [pc, #24]	; (800dc5c <Usart_ReceiveHandler+0x90>)
 800dc42:	f7ff feb3 	bl	800d9ac <UsartDMAReceiveHandler>
}
 800dc46:	bf00      	nop
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2000dffc 	.word	0x2000dffc
 800dc50:	20011abc 	.word	0x20011abc
 800dc54:	2000a0ac 	.word	0x2000a0ac
 800dc58:	2000db6c 	.word	0x2000db6c
 800dc5c:	20011f4c 	.word	0x20011f4c

0800dc60 <printfBin_init>:

static PRINTFBINSTRUCT printfBinStruct;
//input: array pointer, and data number
//function: add header and tail, send into buffer
void printfBin_init()
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800dc64:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800dc68:	2100      	movs	r1, #0
 800dc6a:	480a      	ldr	r0, [pc, #40]	; (800dc94 <printfBin_init+0x34>)
 800dc6c:	f002 fb3d 	bl	80102ea <memset>
	printfBinStruct.header[0]=0x5a;
 800dc70:	4b08      	ldr	r3, [pc, #32]	; (800dc94 <printfBin_init+0x34>)
 800dc72:	225a      	movs	r2, #90	; 0x5a
 800dc74:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800dc76:	4b07      	ldr	r3, [pc, #28]	; (800dc94 <printfBin_init+0x34>)
 800dc78:	225a      	movs	r2, #90	; 0x5a
 800dc7a:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <printfBin_init+0x34>)
 800dc7e:	22a5      	movs	r2, #165	; 0xa5
 800dc80:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800dc82:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <printfBin_init+0x34>)
 800dc84:	22a5      	movs	r2, #165	; 0xa5
 800dc86:	70da      	strb	r2, [r3, #3]
	printfBinStruct.pData=printfBinStruct.data;
 800dc88:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <printfBin_init+0x34>)
 800dc8a:	4a03      	ldr	r2, [pc, #12]	; (800dc98 <printfBin_init+0x38>)
 800dc8c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
}
 800dc90:	bf00      	nop
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	20000cb8 	.word	0x20000cb8
 800dc98:	20000cbc 	.word	0x20000cbc

0800dc9c <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f04f 0200 	mov.w	r2, #0
 800dcbc:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f04f 0200 	mov.w	r2, #0
 800dcc4:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a0e      	ldr	r2, [pc, #56]	; (800dd04 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800dcca:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f04f 0200 	mov.w	r2, #0
 800dcd2:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f240 6266 	movw	r2, #1638	; 0x666
 800dcda:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f643 1299 	movw	r2, #14745	; 0x3999
 800dce2:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a08      	ldr	r2, [pc, #32]	; (800dd08 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800dce8:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a07      	ldr	r2, [pc, #28]	; (800dd0c <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800dcee:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2210      	movs	r2, #16
 800dcf4:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	48ca0080 	.word	0x48ca0080
 800dd08:	200095d8 	.word	0x200095d8
 800dd0c:	40021000 	.word	0x40021000

0800dd10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dd10:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dd48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dd14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dd16:	e003      	b.n	800dd20 <LoopCopyDataInit>

0800dd18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dd18:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dd1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dd1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dd1e:	3104      	adds	r1, #4

0800dd20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dd20:	480b      	ldr	r0, [pc, #44]	; (800dd50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dd22:	4b0c      	ldr	r3, [pc, #48]	; (800dd54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dd24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dd26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dd28:	d3f6      	bcc.n	800dd18 <CopyDataInit>
  ldr  r2, =_sbss
 800dd2a:	4a0b      	ldr	r2, [pc, #44]	; (800dd58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dd2c:	e002      	b.n	800dd34 <LoopFillZerobss>

0800dd2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dd2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dd30:	f842 3b04 	str.w	r3, [r2], #4

0800dd34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dd36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dd38:	d3f9      	bcc.n	800dd2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dd3a:	f7fb fc41 	bl	80095c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dd3e:	f002 fa9d 	bl	801027c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dd42:	f7fa fddd 	bl	8008900 <main>
  bx  lr    
 800dd46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dd48:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dd4c:	0801509c 	.word	0x0801509c
  ldr  r0, =_sdata
 800dd50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dd54:	20000548 	.word	0x20000548
  ldr  r2, =_sbss
 800dd58:	20000548 	.word	0x20000548
  ldr  r3, = _ebss
 800dd5c:	20015ea0 	.word	0x20015ea0

0800dd60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dd60:	e7fe      	b.n	800dd60 <ADC_IRQHandler>
	...

0800dd64 <HAL_CAN_RxFifo0MsgPendingCallback>:



/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  /* Get RX message */

  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800dd6c:	4b0a      	ldr	r3, [pc, #40]	; (800dd98 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800dd6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd70:	4a0a      	ldr	r2, [pc, #40]	; (800dd9c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800dd72:	2100      	movs	r1, #0
 800dd74:	4808      	ldr	r0, [pc, #32]	; (800dd98 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800dd76:	f000 f831 	bl	800dddc <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	bf14      	ite	ne
 800dd80:	2301      	movne	r3, #1
 800dd82:	2300      	moveq	r3, #0
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800dd8a:	f7fa ff07 	bl	8008b9c <Error_Handler>
  }
  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
  //printf("ID[%d]: %x %x %x %x %x %x %x %x\r\n", canbus.RxHeader.StdId, canbus.RxData[0], canbus.RxData[1], canbus.RxData[2], canbus.RxData[3], canbus.RxData[4], canbus.RxData[5], canbus.RxData[6], canbus.RxData[7]);
  //printf("FIFO0: ID[%d]\r\n", canbus.RxHeader.StdId, canbus.RxData);
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	200010a8 	.word	0x200010a8
 800dd9c:	200010e8 	.word	0x200010e8

0800dda0 <HAL_CAN_RxFifo1MsgPendingCallback>:

/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  /* Get RX message */


  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800dda8:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800ddaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddac:	4a0a      	ldr	r2, [pc, #40]	; (800ddd8 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4808      	ldr	r0, [pc, #32]	; (800ddd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800ddb2:	f000 f813 	bl	800dddc <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bf14      	ite	ne
 800ddbc:	2301      	movne	r3, #1
 800ddbe:	2300      	moveq	r3, #0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800ddc6:	f7fa fee9 	bl	8008b9c <Error_Handler>
  }
  //printf("FIFO1: ID[%d]\r\n", canbus.RxHeader.StdId);

  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
}
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	200010a8 	.word	0x200010a8
 800ddd8:	200010e8 	.word	0x200010e8

0800dddc <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>:

static HAL_StatusTypeDef my_HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
 800dde8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddf0:	77fb      	strb	r3, [r7, #31]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ddf2:	7ffb      	ldrb	r3, [r7, #31]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d003      	beq.n	800de00 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x24>
 800ddf8:	7ffb      	ldrb	r3, [r7, #31]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	f040 814a 	bne.w	800e094 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b8>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d113      	bne.n	800de2e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	2b00      	cmp	r3, #0
 800de12:	bf0c      	ite	eq
 800de14:	2301      	moveq	r3, #1
 800de16:	2300      	movne	r3, #0
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d01b      	beq.n	800de56 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e139      	b.n	800e0a2 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	f003 0303 	and.w	r3, r3, #3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bf0c      	ite	eq
 800de3c:	2301      	moveq	r3, #1
 800de3e:	2300      	movne	r3, #0
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d007      	beq.n	800de56 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e125      	b.n	800e0a2 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	331b      	adds	r3, #27
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	4413      	add	r3, r2
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 0204 	and.w	r2, r3, #4
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10c      	bne.n	800de8e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xb2>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	331b      	adds	r3, #27
 800de7c:	011b      	lsls	r3, r3, #4
 800de7e:	4413      	add	r3, r2
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	0d5b      	lsrs	r3, r3, #21
 800de84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	e00b      	b.n	800dea6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xca>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	331b      	adds	r3, #27
 800de96:	011b      	lsls	r3, r3, #4
 800de98:	4413      	add	r3, r2
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	08db      	lsrs	r3, r3, #3
 800de9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	331b      	adds	r3, #27
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	4413      	add	r3, r2
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0202 	and.w	r2, r3, #2
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	331b      	adds	r3, #27
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	4413      	add	r3, r2
 800dec8:	3304      	adds	r3, #4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f003 020f 	and.w	r2, r3, #15
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	331b      	adds	r3, #27
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	4413      	add	r3, r2
 800dee0:	3304      	adds	r3, #4
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	0a1b      	lsrs	r3, r3, #8
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	331b      	adds	r3, #27
 800def4:	011b      	lsls	r3, r3, #4
 800def6:	4413      	add	r3, r2
 800def8:	3304      	adds	r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	0c1b      	lsrs	r3, r3, #16
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	615a      	str	r2, [r3, #20]



    /**********************  added  ******************************************/
	int i = pHeader->StdId/6;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a68      	ldr	r2, [pc, #416]	; (800e0ac <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800df0a:	fba2 2303 	umull	r2, r3, r2, r3
 800df0e:	089b      	lsrs	r3, r3, #2
 800df10:	61bb      	str	r3, [r7, #24]
    int j = pHeader->StdId%6;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6819      	ldr	r1, [r3, #0]
 800df16:	4b65      	ldr	r3, [pc, #404]	; (800e0ac <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800df18:	fba3 2301 	umull	r2, r3, r3, r1
 800df1c:	089a      	lsrs	r2, r3, #2
 800df1e:	4613      	mov	r3, r2
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	4413      	add	r3, r2
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	1aca      	subs	r2, r1, r3
 800df28:	617a      	str	r2, [r7, #20]
    softArm.actuatorOnline[j][j]=10;
 800df2a:	4961      	ldr	r1, [pc, #388]	; (800e0b0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4613      	mov	r3, r2
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	4413      	add	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	18ca      	adds	r2, r1, r3
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	4413      	add	r3, r2
 800df3c:	f203 2302 	addw	r3, r3, #514	; 0x202
 800df40:	220a      	movs	r2, #10
 800df42:	701a      	strb	r2, [r3, #0]
    aData=(uint8_t *)(&softArm.sensorDataBuffer[i][j]);
 800df44:	69ba      	ldr	r2, [r7, #24]
 800df46:	4613      	mov	r3, r2
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	4413      	add	r3, r2
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	4413      	add	r3, r2
 800df52:	331b      	adds	r3, #27
 800df54:	00db      	lsls	r3, r3, #3
 800df56:	4a56      	ldr	r2, [pc, #344]	; (800e0b0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800df58:	4413      	add	r3, r2
 800df5a:	3304      	adds	r3, #4
 800df5c:	603b      	str	r3, [r7, #0]
    /****************************************************************/

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	011b      	lsls	r3, r3, #4
 800df66:	4413      	add	r3, r2
 800df68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	011b      	lsls	r3, r3, #4
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	0a1a      	lsrs	r2, r3, #8
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	011b      	lsls	r3, r3, #4
 800df96:	4413      	add	r3, r2
 800df98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	0c1a      	lsrs	r2, r3, #16
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	3302      	adds	r3, #2
 800dfa4:	b2d2      	uxtb	r2, r2
 800dfa6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	011b      	lsls	r3, r3, #4
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	0e1a      	lsrs	r2, r3, #24
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	3303      	adds	r3, #3
 800dfbe:	b2d2      	uxtb	r2, r2
 800dfc0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	011b      	lsls	r3, r3, #4
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	b2d2      	uxtb	r2, r2
 800dfd8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	011b      	lsls	r3, r3, #4
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	0a1a      	lsrs	r2, r3, #8
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	3305      	adds	r3, #5
 800dff0:	b2d2      	uxtb	r2, r2
 800dff2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	4413      	add	r3, r2
 800dffe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	0c1a      	lsrs	r2, r3, #16
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	3306      	adds	r3, #6
 800e00a:	b2d2      	uxtb	r2, r2
 800e00c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	011b      	lsls	r3, r3, #4
 800e016:	4413      	add	r3, r2
 800e018:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	0e1a      	lsrs	r2, r3, #24
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	3307      	adds	r3, #7
 800e024:	b2d2      	uxtb	r2, r2
 800e026:	701a      	strb	r2, [r3, #0]


    /**********************  Added Docode the sensor Data to SPI buffer*******************************/
    decodeSensorData(&softArm.sensorDataBuffer[i][j],&(softArm.sensorData.data[i][j]));
 800e028:	69ba      	ldr	r2, [r7, #24]
 800e02a:	4613      	mov	r3, r2
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	4413      	add	r3, r2
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	4413      	add	r3, r2
 800e036:	331b      	adds	r3, #27
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	4a1d      	ldr	r2, [pc, #116]	; (800e0b0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e03c:	4413      	add	r3, r2
 800e03e:	1d18      	adds	r0, r3, #4
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	461a      	mov	r2, r3
 800e044:	0052      	lsls	r2, r2, #1
 800e046:	441a      	add	r2, r3
 800e048:	0093      	lsls	r3, r2, #2
 800e04a:	461a      	mov	r2, r3
 800e04c:	69b9      	ldr	r1, [r7, #24]
 800e04e:	460b      	mov	r3, r1
 800e050:	00db      	lsls	r3, r3, #3
 800e052:	440b      	add	r3, r1
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4413      	add	r3, r2
 800e058:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e05c:	4a14      	ldr	r2, [pc, #80]	; (800e0b0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e05e:	4413      	add	r3, r2
 800e060:	3306      	adds	r3, #6
 800e062:	4619      	mov	r1, r3
 800e064:	f000 fdd4 	bl	800ec10 <decodeSensorData>
    /*******************************************************************/


    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d108      	bne.n	800e080 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2a4>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68da      	ldr	r2, [r3, #12]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f042 0220 	orr.w	r2, r2, #32
 800e07c:	60da      	str	r2, [r3, #12]
 800e07e:	e007      	b.n	800e090 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b4>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	691a      	ldr	r2, [r3, #16]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 0220 	orr.w	r2, r2, #32
 800e08e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    //printf("sensor[%d]: %hu\r\n", pHeader->StdId, softArm.sensorData[i][j].pressure);

    return HAL_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	e006      	b.n	800e0a2 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e098:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
  }
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3720      	adds	r7, #32
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	aaaaaaab 	.word	0xaaaaaaab
 800e0b0:	20001110 	.word	0x20001110

0800e0b4 <_ZN8SOFT_ARMC1Ev>:
SOFT_ARM softArm;

/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 800e0b4:	b5b0      	push	{r4, r5, r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2400      	movs	r4, #0
 800e0c0:	461d      	mov	r5, r3
 800e0c2:	2c00      	cmp	r4, #0
 800e0c4:	db06      	blt.n	800e0d4 <_ZN8SOFT_ARMC1Ev+0x20>
 800e0c6:	2106      	movs	r1, #6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f000 fa93 	bl	800e5f4 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 800e0ce:	35dc      	adds	r5, #220	; 0xdc
 800e0d0:	3c01      	subs	r4, #1
 800e0d2:	e7f6      	b.n	800e0c2 <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e0e0 <_ZN8SOFT_ARM17setupChamberPortsEv>:



void SOFT_ARM::setupChamberPorts()
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
	/*Every actuator is refered to with two numbers, segNum(0-8) and bellowNum(0-5)*/
	for(int j=0;j<SEGMENTNUM;j++){
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	dc3b      	bgt.n	800e16a <_ZN8SOFT_ARM17setupChamberPortsEv+0x8a>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	22dc      	movs	r2, #220	; 0xdc
 800e0f6:	fb02 f303 	mul.w	r3, r2, r3
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
 800e100:	2300      	movs	r3, #0
 800e102:	61bb      	str	r3, [r7, #24]
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	2b05      	cmp	r3, #5
 800e108:	dc2b      	bgt.n	800e162 <_ZN8SOFT_ARM17setupChamberPortsEv+0x82>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	3216      	adds	r2, #22
 800e110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e114:	613b      	str	r3, [r7, #16]
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	3314      	adds	r3, #20
 800e11c:	60fb      	str	r3, [r7, #12]
			/*analog port is treated as the overall No. in our arm.*/
			bellowCur->attach(pwmPortOffset+i*2, pwmPortOffset+i*2+1, BUILTIN_ANA_IN_NUM+j*BELLOWNUM+i);
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	005a      	lsls	r2, r3, #1
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	18d1      	adds	r1, r2, r3
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	005a      	lsls	r2, r3, #1
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4413      	add	r3, r2
 800e12e:	1c58      	adds	r0, r3, #1
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	4613      	mov	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	4413      	add	r3, r2
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	461a      	mov	r2, r3
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	4413      	add	r3, r2
 800e142:	4602      	mov	r2, r0
 800e144:	6938      	ldr	r0, [r7, #16]
 800e146:	f7fc fe71 	bl	800ae2c <_ZN7CHAMBER6attachEiii>
			bellowCur->writeOpening(0);
 800e14a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800e174 <_ZN8SOFT_ARM17setupChamberPortsEv+0x94>
 800e14e:	6938      	ldr	r0, [r7, #16]
 800e150:	f7fc ffbe 	bl	800b0d0 <_ZN7CHAMBER12writeOpeningEf>
			HAL_Delay(10);
 800e154:	200a      	movs	r0, #10
 800e156:	f7f2 ff5b 	bl	8001010 <HAL_Delay>
		for(int i=0;i<BELLOWNUM;i++)
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	3301      	adds	r3, #1
 800e15e:	61bb      	str	r3, [r7, #24]
 800e160:	e7d0      	b.n	800e104 <_ZN8SOFT_ARM17setupChamberPortsEv+0x24>
	for(int j=0;j<SEGMENTNUM;j++){
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	3301      	adds	r3, #1
 800e166:	61fb      	str	r3, [r7, #28]
 800e168:	e7c0      	b.n	800e0ec <_ZN8SOFT_ARM17setupChamberPortsEv+0xc>
		}
	}
}
 800e16a:	bf00      	nop
 800e16c:	3720      	adds	r7, #32
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	00000000 	.word	0x00000000

0800e178 <_ZN8SOFT_ARM15zeroPressureAllEv>:

void SOFT_ARM::zeroPressureAll() {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800e180:	2300      	movs	r3, #0
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	dc1b      	bgt.n	800e1c2 <_ZN8SOFT_ARM15zeroPressureAllEv+0x4a>
		for(int i=0;i<BELLOWNUM;i++){
 800e18a:	2300      	movs	r3, #0
 800e18c:	60bb      	str	r3, [r7, #8]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	2b05      	cmp	r3, #5
 800e192:	dc12      	bgt.n	800e1ba <_ZN8SOFT_ARM15zeroPressureAllEv+0x42>
			armSegments[j].bellows[i]->zeroPressure();
 800e194:	6879      	ldr	r1, [r7, #4]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	4613      	mov	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	1a9b      	subs	r3, r3, r2
 800e19e:	00db      	lsls	r3, r3, #3
 800e1a0:	1a9b      	subs	r3, r3, r2
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	3316      	adds	r3, #22
 800e1a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fc fe5a 	bl	800ae66 <_ZN7CHAMBER12zeroPressureEv>
		for(int i=0;i<BELLOWNUM;i++){
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	60bb      	str	r3, [r7, #8]
 800e1b8:	e7e9      	b.n	800e18e <_ZN8SOFT_ARM15zeroPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	e7e0      	b.n	800e184 <_ZN8SOFT_ARM15zeroPressureAllEv+0xc>
		}
	}
}
 800e1c2:	bf00      	nop
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	0000      	movs	r0, r0
 800e1cc:	0000      	movs	r0, r0
	...

0800e1d0 <_ZN8SOFT_ARM13readSensorAllEv>:


void SOFT_ARM::readSensorAll()
{
 800e1d0:	b590      	push	{r4, r7, lr}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	float localL=0;
 800e1d8:	f04f 0300 	mov.w	r3, #0
 800e1dc:	60fb      	str	r3, [r7, #12]
	for(int j=0;j<SEGMENTNUM;j++){
 800e1de:	2300      	movs	r3, #0
 800e1e0:	617b      	str	r3, [r7, #20]
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dc5e      	bgt.n	800e2a6 <_ZN8SOFT_ARM13readSensorAllEv+0xd6>

		//length is read through ADC
		localL=armSegments[j].readLength();
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	22dc      	movs	r2, #220	; 0xdc
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f000 fa37 	bl	800e668 <_ZN16SOFT_ARM_SEGMENT10readLengthEv>
 800e1fa:	ed87 0a03 	vstr	s0, [r7, #12]

		//IMU is read in the serial callback

		//pressure is read through ADC
		for(int i=0;i<BELLOWNUM;i++)
 800e1fe:	2300      	movs	r3, #0
 800e200:	613b      	str	r3, [r7, #16]
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	2b05      	cmp	r3, #5
 800e206:	dc4a      	bgt.n	800e29e <_ZN8SOFT_ARM13readSensorAllEv+0xce>
			{
			int16_t localP= (int16_t)(armSegments[j].bellows[i]->readPressure()*0.01); // HPa
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	697a      	ldr	r2, [r7, #20]
 800e20c:	4613      	mov	r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	1a9b      	subs	r3, r3, r2
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	1a9b      	subs	r3, r3, r2
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	4413      	add	r3, r2
 800e21a:	3316      	adds	r3, #22
 800e21c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e220:	4618      	mov	r0, r3
 800e222:	f7fc fe30 	bl	800ae86 <_ZN7CHAMBER12readPressureEv>
 800e226:	eef0 7a40 	vmov.f32	s15, s0
 800e22a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e22e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e2b0 <_ZN8SOFT_ARM13readSensorAllEv+0xe0>
 800e232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e236:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e23a:	ee17 3a90 	vmov	r3, s15
 800e23e:	817b      	strh	r3, [r7, #10]
			sensorData.data[j][i].pressure=localP;
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6979      	ldr	r1, [r7, #20]
 800e246:	461a      	mov	r2, r3
 800e248:	0052      	lsls	r2, r2, #1
 800e24a:	441a      	add	r2, r3
 800e24c:	0093      	lsls	r3, r2, #2
 800e24e:	461a      	mov	r2, r3
 800e250:	460b      	mov	r3, r1
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	440b      	add	r3, r1
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	4413      	add	r3, r2
 800e25a:	4403      	add	r3, r0
 800e25c:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800e260:	897a      	ldrh	r2, [r7, #10]
 800e262:	801a      	strh	r2, [r3, #0]
			sensorData.data[j][i].distance=localL;
 800e264:	edd7 7a03 	vldr	s15, [r7, #12]
 800e268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e26c:	ee17 3a90 	vmov	r3, s15
 800e270:	b29c      	uxth	r4, r3
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6979      	ldr	r1, [r7, #20]
 800e278:	461a      	mov	r2, r3
 800e27a:	0052      	lsls	r2, r2, #1
 800e27c:	441a      	add	r2, r3
 800e27e:	0093      	lsls	r3, r2, #2
 800e280:	461a      	mov	r2, r3
 800e282:	460b      	mov	r3, r1
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	440b      	add	r3, r1
 800e288:	00db      	lsls	r3, r3, #3
 800e28a:	4413      	add	r3, r2
 800e28c:	4403      	add	r3, r0
 800e28e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e292:	4622      	mov	r2, r4
 800e294:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<BELLOWNUM;i++)
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	3301      	adds	r3, #1
 800e29a:	613b      	str	r3, [r7, #16]
 800e29c:	e7b1      	b.n	800e202 <_ZN8SOFT_ARM13readSensorAllEv+0x32>
	for(int j=0;j<SEGMENTNUM;j++){
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	e79d      	b.n	800e1e2 <_ZN8SOFT_ARM13readSensorAllEv+0x12>
			}

	}
}
 800e2a6:	bf00      	nop
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd90      	pop	{r4, r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	47ae147b 	.word	0x47ae147b
 800e2b4:	3f847ae1 	.word	0x3f847ae1

0800e2b8 <serial2Callback>:

//This function is to reimplent the __weak defaut serial 2 callback
void serial2Callback(char *pSerialReceiveBuffer) {
 800e2b8:	b590      	push	{r4, r7, lr}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f300 8083 	bgt.w	800e3d2 <serial2Callback+0x11a>
		softArm.armSegments[j].readIMU(pSerialReceiveBuffer);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	22dc      	movs	r2, #220	; 0xdc
 800e2d0:	fb02 f303 	mul.w	r3, r2, r3
 800e2d4:	4a41      	ldr	r2, [pc, #260]	; (800e3dc <serial2Callback+0x124>)
 800e2d6:	4413      	add	r3, r2
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 fa36 	bl	800e74c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>
		for (int i = 0; i < BELLOWNUM; i++) {
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60bb      	str	r3, [r7, #8]
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	dc6f      	bgt.n	800e3ca <serial2Callback+0x112>
			softArm.sensorData.data[j][i].quaternion.imuData[0]=softArm.armSegments[j].imuData.q0_int;
 800e2ea:	4a3c      	ldr	r2, [pc, #240]	; (800e3dc <serial2Callback+0x124>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	21dc      	movs	r1, #220	; 0xdc
 800e2f0:	fb01 f303 	mul.w	r3, r1, r3
 800e2f4:	4413      	add	r3, r2
 800e2f6:	33c0      	adds	r3, #192	; 0xc0
 800e2f8:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e2fc:	4837      	ldr	r0, [pc, #220]	; (800e3dc <serial2Callback+0x124>)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	68f9      	ldr	r1, [r7, #12]
 800e302:	461a      	mov	r2, r3
 800e304:	0052      	lsls	r2, r2, #1
 800e306:	441a      	add	r2, r3
 800e308:	0093      	lsls	r3, r2, #2
 800e30a:	461a      	mov	r2, r3
 800e30c:	460b      	mov	r3, r1
 800e30e:	00db      	lsls	r3, r3, #3
 800e310:	440b      	add	r3, r1
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	4413      	add	r3, r2
 800e316:	4403      	add	r3, r0
 800e318:	f503 73b1 	add.w	r3, r3, #354	; 0x162
 800e31c:	4622      	mov	r2, r4
 800e31e:	801a      	strh	r2, [r3, #0]
			softArm.sensorData.data[j][i].quaternion.imuData[1]=softArm.armSegments[j].imuData.q1_int;
 800e320:	4a2e      	ldr	r2, [pc, #184]	; (800e3dc <serial2Callback+0x124>)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	21dc      	movs	r1, #220	; 0xdc
 800e326:	fb01 f303 	mul.w	r3, r1, r3
 800e32a:	4413      	add	r3, r2
 800e32c:	33c2      	adds	r3, #194	; 0xc2
 800e32e:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e332:	482a      	ldr	r0, [pc, #168]	; (800e3dc <serial2Callback+0x124>)
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	68f9      	ldr	r1, [r7, #12]
 800e338:	461a      	mov	r2, r3
 800e33a:	0052      	lsls	r2, r2, #1
 800e33c:	441a      	add	r2, r3
 800e33e:	0093      	lsls	r3, r2, #2
 800e340:	461a      	mov	r2, r3
 800e342:	460b      	mov	r3, r1
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	440b      	add	r3, r1
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	4413      	add	r3, r2
 800e34c:	4403      	add	r3, r0
 800e34e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e352:	4622      	mov	r2, r4
 800e354:	801a      	strh	r2, [r3, #0]
			softArm.sensorData.data[j][i].quaternion.imuData[2]=softArm.armSegments[j].imuData.q2_int;
 800e356:	4a21      	ldr	r2, [pc, #132]	; (800e3dc <serial2Callback+0x124>)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	21dc      	movs	r1, #220	; 0xdc
 800e35c:	fb01 f303 	mul.w	r3, r1, r3
 800e360:	4413      	add	r3, r2
 800e362:	33c4      	adds	r3, #196	; 0xc4
 800e364:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e368:	481c      	ldr	r0, [pc, #112]	; (800e3dc <serial2Callback+0x124>)
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	68f9      	ldr	r1, [r7, #12]
 800e36e:	461a      	mov	r2, r3
 800e370:	0052      	lsls	r2, r2, #1
 800e372:	441a      	add	r2, r3
 800e374:	0093      	lsls	r3, r2, #2
 800e376:	461a      	mov	r2, r3
 800e378:	460b      	mov	r3, r1
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	440b      	add	r3, r1
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	4413      	add	r3, r2
 800e382:	4403      	add	r3, r0
 800e384:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800e388:	4622      	mov	r2, r4
 800e38a:	801a      	strh	r2, [r3, #0]
			softArm.sensorData.data[j][i].quaternion.imuData[3]=softArm.armSegments[j].imuData.q3_int;
 800e38c:	4a13      	ldr	r2, [pc, #76]	; (800e3dc <serial2Callback+0x124>)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	21dc      	movs	r1, #220	; 0xdc
 800e392:	fb01 f303 	mul.w	r3, r1, r3
 800e396:	4413      	add	r3, r2
 800e398:	33c6      	adds	r3, #198	; 0xc6
 800e39a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e39e:	480f      	ldr	r0, [pc, #60]	; (800e3dc <serial2Callback+0x124>)
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	68f9      	ldr	r1, [r7, #12]
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	0052      	lsls	r2, r2, #1
 800e3a8:	441a      	add	r2, r3
 800e3aa:	0093      	lsls	r3, r2, #2
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	00db      	lsls	r3, r3, #3
 800e3b2:	440b      	add	r3, r1
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	4413      	add	r3, r2
 800e3b8:	4403      	add	r3, r0
 800e3ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e3be:	4622      	mov	r2, r4
 800e3c0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < BELLOWNUM; i++) {
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	60bb      	str	r3, [r7, #8]
 800e3c8:	e78c      	b.n	800e2e4 <serial2Callback+0x2c>
	for(int j=0;j<SEGMENTNUM;j++){
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	60fb      	str	r3, [r7, #12]
 800e3d0:	e778      	b.n	800e2c4 <serial2Callback+0xc>
		}
	}
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd90      	pop	{r4, r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	20001110 	.word	0x20001110

0800e3e0 <_ZN8SOFT_ARM15writeCommandAllEv>:
void SOFT_ARM::writeCommandAll()
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b088      	sub	sp, #32
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]

	for(int j=0;j<SEGMENTNUM;j++){
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	61fb      	str	r3, [r7, #28]
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f300 8086 	bgt.w	800e500 <_ZN8SOFT_ARM15writeCommandAllEv+0x120>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	22dc      	movs	r2, #220	; 0xdc
 800e3f8:	fb02 f303 	mul.w	r3, r2, r3
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	4413      	add	r3, r2
 800e400:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++){
 800e402:	2300      	movs	r3, #0
 800e404:	61bb      	str	r3, [r7, #24]
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	2b05      	cmp	r3, #5
 800e40a:	dc75      	bgt.n	800e4f8 <_ZN8SOFT_ARM15writeCommandAllEv+0x118>
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	3216      	adds	r2, #22
 800e412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e416:	613b      	str	r3, [r7, #16]

			//write pressure command from commandData to the chamber
			if(commandData.data[j][i].commandType==pressureCommandType){
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	69f9      	ldr	r1, [r7, #28]
 800e41e:	461a      	mov	r2, r3
 800e420:	0052      	lsls	r2, r2, #1
 800e422:	441a      	add	r2, r3
 800e424:	0093      	lsls	r3, r2, #2
 800e426:	461a      	mov	r2, r3
 800e428:	460b      	mov	r3, r1
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	440b      	add	r3, r1
 800e42e:	00db      	lsls	r3, r3, #3
 800e430:	4413      	add	r3, r2
 800e432:	4403      	add	r3, r0
 800e434:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 800e438:	881b      	ldrh	r3, [r3, #0]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d122      	bne.n	800e484 <_ZN8SOFT_ARM15writeCommandAllEv+0xa4>
				float pressureCommandTemp=commandData.data[j][i].values[0]*1000;//gauge PA
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	69f9      	ldr	r1, [r7, #28]
 800e444:	461a      	mov	r2, r3
 800e446:	0052      	lsls	r2, r2, #1
 800e448:	441a      	add	r2, r3
 800e44a:	0093      	lsls	r3, r2, #2
 800e44c:	461a      	mov	r2, r3
 800e44e:	460b      	mov	r3, r1
 800e450:	00db      	lsls	r3, r3, #3
 800e452:	440b      	add	r3, r1
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4413      	add	r3, r2
 800e458:	4403      	add	r3, r0
 800e45a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800e45e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e462:	461a      	mov	r2, r3
 800e464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e468:	fb03 f302 	mul.w	r3, r3, r2
 800e46c:	ee07 3a90 	vmov	s15, r3
 800e470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e474:	edc7 7a02 	vstr	s15, [r7, #8]
				bellowCur->writePressure(pressureCommandTemp);
 800e478:	ed97 0a02 	vldr	s0, [r7, #8]
 800e47c:	6938      	ldr	r0, [r7, #16]
 800e47e:	f7fc fd25 	bl	800aecc <_ZN7CHAMBER13writePressureEf>
 800e482:	e035      	b.n	800e4f0 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
			}
			else if(commandData.data[j][i].commandType==openingCommandType){
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	69f9      	ldr	r1, [r7, #28]
 800e48a:	461a      	mov	r2, r3
 800e48c:	0052      	lsls	r2, r2, #1
 800e48e:	441a      	add	r2, r3
 800e490:	0093      	lsls	r3, r2, #2
 800e492:	461a      	mov	r2, r3
 800e494:	460b      	mov	r3, r1
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	440b      	add	r3, r1
 800e49a:	00db      	lsls	r3, r3, #3
 800e49c:	4413      	add	r3, r2
 800e49e:	4403      	add	r3, r0
 800e4a0:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d122      	bne.n	800e4f0 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
				float openingCommandTemp=((int16_t)commandData.data[j][i].values[0])*3.0517578125e-5;//values[0]/32767
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	69f9      	ldr	r1, [r7, #28]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	0052      	lsls	r2, r2, #1
 800e4b4:	441a      	add	r2, r3
 800e4b6:	0093      	lsls	r3, r2, #2
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	440b      	add	r3, r1
 800e4c0:	00db      	lsls	r3, r3, #3
 800e4c2:	4413      	add	r3, r2
 800e4c4:	4403      	add	r3, r0
 800e4c6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800e4ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ce:	ee07 3a90 	vmov	s15, r3
 800e4d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e4d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 800e508 <_ZN8SOFT_ARM15writeCommandAllEv+0x128>
 800e4da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e4e2:	edc7 7a03 	vstr	s15, [r7, #12]
				bellowCur->writeOpening(openingCommandTemp);
 800e4e6:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4ea:	6938      	ldr	r0, [r7, #16]
 800e4ec:	f7fc fdf0 	bl	800b0d0 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++){
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	61bb      	str	r3, [r7, #24]
 800e4f6:	e786      	b.n	800e406 <_ZN8SOFT_ARM15writeCommandAllEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	61fb      	str	r3, [r7, #28]
 800e4fe:	e775      	b.n	800e3ec <_ZN8SOFT_ARM15writeCommandAllEv+0xc>
			}
		}
	}
}
 800e500:	bf00      	nop
 800e502:	3720      	adds	r7, #32
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	00000000 	.word	0x00000000
 800e50c:	3f000000 	.word	0x3f000000

0800e510 <_ZN8SOFT_ARM15execInfoCommandEPc>:

void SOFT_ARM::execInfoCommand(char *infoBuf){
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
	if(infoBuf[0]=='z'){
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	2b7a      	cmp	r3, #122	; 0x7a
 800e520:	d102      	bne.n	800e528 <_ZN8SOFT_ARM15execInfoCommandEPc+0x18>
		zeroPressureAll();
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7ff fe28 	bl	800e178 <_ZN8SOFT_ARM15zeroPressureAllEv>
	}
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <_Z41__static_initialization_and_destruction_0ii>:
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d107      	bne.n	800e550 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e546:	4293      	cmp	r3, r2
 800e548:	d102      	bne.n	800e550 <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
 800e54a:	4803      	ldr	r0, [pc, #12]	; (800e558 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800e54c:	f7ff fdb2 	bl	800e0b4 <_ZN8SOFT_ARMC1Ev>
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20001110 	.word	0x20001110

0800e55c <_GLOBAL__sub_I_softArm>:
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
 800e560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e564:	2001      	movs	r0, #1
 800e566:	f7ff ffe3 	bl	800e530 <_Z41__static_initialization_and_destruction_0ii>
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	ed87 0a01 	vstr	s0, [r7, #4]
 800e576:	ed97 0a01 	vldr	s0, [r7, #4]
 800e57a:	f000 fe33 	bl	800f1e4 <acosf>
 800e57e:	eef0 7a40 	vmov.f32	s15, s0
 800e582:	eeb0 0a67 	vmov.f32	s0, s15
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	ed87 0a01 	vstr	s0, [r7, #4]
 800e596:	edc7 0a00 	vstr	s1, [r7]
 800e59a:	edd7 0a00 	vldr	s1, [r7]
 800e59e:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5a2:	f000 fe73 	bl	800f28c <atan2f>
 800e5a6:	eef0 7a40 	vmov.f32	s15, s0
 800e5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	ed87 0a01 	vstr	s0, [r7, #4]
 800e5be:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5c2:	f000 fd8d 	bl	800f0e0 <cosf>
 800e5c6:	eef0 7a40 	vmov.f32	s15, s0
 800e5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	ed87 0a01 	vstr	s0, [r7, #4]
 800e5de:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5e2:	f000 fdbd 	bl	800f160 <sinf>
 800e5e6:	eef0 7a40 	vmov.f32	s15, s0
 800e5ea:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800e5f4:	b590      	push	{r4, r7, lr}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
{


	length = 0.367;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4a18      	ldr	r2, [pc, #96]	; (800e664 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x70>)
 800e602:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	alpha = 0;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f04f 0200 	mov.w	r2, #0
 800e60c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	beta = 0;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f04f 0200 	mov.w	r2, #0
 800e616:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	basePlatform = new PNEUDRIVE(num);
 800e61a:	2084      	movs	r0, #132	; 0x84
 800e61c:	f000 fd00 	bl	800f020 <_Znwj>
 800e620:	4603      	mov	r3, r0
 800e622:	461c      	mov	r4, r3
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	4620      	mov	r0, r4
 800e628:	f7fd fb06 	bl	800bc38 <_ZN9PNEUDRIVEC1Ei>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b05      	cmp	r3, #5
 800e638:	dc0f      	bgt.n	800e65a <_ZN16SOFT_ARM_SEGMENTC1Ei+0x66>
	{
		bellows[i]=basePlatform->chambers[i];
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e63e:	689a      	ldr	r2, [r3, #8]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	6819      	ldr	r1, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	3216      	adds	r2, #22
 800e64e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3301      	adds	r3, #1
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	e7ec      	b.n	800e634 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x40>
	}

}
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4618      	mov	r0, r3
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	bd90      	pop	{r4, r7, pc}
 800e664:	3ebbe76d 	.word	0x3ebbe76d

0800e668 <_ZN16SOFT_ARM_SEGMENT10readLengthEv>:
}




float SOFT_ARM_SEGMENT::readLength() {
 800e668:	b580      	push	{r7, lr}
 800e66a:	ed2d 8b04 	vpush	{d8-d9}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
	float vol=AnalogRead(lengthAnalogPort);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd fb35 	bl	800bcec <AnalogRead>
 800e682:	eef0 7a40 	vmov.f32	s15, s0
 800e686:	edc7 7a03 	vstr	s15, [r7, #12]
	lengthRaw= MAP(vol,0,10.0,0,1);
 800e68a:	ed97 7a03 	vldr	s14, [r7, #12]
 800e68e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e696:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800e748 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xe0>
 800e69a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	length=(lengthRaw-0.02)*(alpha/2/sin(alpha/2))+alpha*0.02*cos(beta);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800e6aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e6ae:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800e740 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xd8>
 800e6b2:	ee37 8b46 	vsub.f64	d8, d7, d6
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800e6bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e6c0:	ee87 9a87 	vdiv.f32	s18, s15, s14
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800e6ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e6ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e6d2:	eeb0 0a66 	vmov.f32	s0, s13
 800e6d6:	f7ff ff7d 	bl	800e5d4 <_ZSt3sinf>
 800e6da:	eeb0 7a40 	vmov.f32	s14, s0
 800e6de:	eec9 7a07 	vdiv.f32	s15, s18, s14
 800e6e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e6e6:	ee28 8b07 	vmul.f64	d8, d8, d7
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800e6f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e6f4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e740 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0xd8>
 800e6f8:	ee27 9b06 	vmul.f64	d9, d7, d6
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800e702:	eeb0 0a67 	vmov.f32	s0, s15
 800e706:	f7ff ff55 	bl	800e5b4 <_ZSt3cosf>
 800e70a:	eef0 7a40 	vmov.f32	s15, s0
 800e70e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e712:	ee29 7b07 	vmul.f64	d7, d9, d7
 800e716:	ee38 7b07 	vadd.f64	d7, d8, d7
 800e71a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	return length;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e72a:	ee07 3a90 	vmov	s15, r3
}
 800e72e:	eeb0 0a67 	vmov.f32	s0, s15
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	ecbd 8b04 	vpop	{d8-d9}
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	f3af 8000 	nop.w
 800e740:	47ae147b 	.word	0x47ae147b
 800e744:	3f947ae1 	.word	0x3f947ae1
 800e748:	00000000 	.word	0x00000000

0800e74c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>:

void SOFT_ARM_SEGMENT::readIMU(char *pBuffer) {
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
	IMUFRAME *pFrame=(IMUFRAME *)pBuffer;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	60fb      	str	r3, [r7, #12]
	if(pFrame->headerEuler[0]==0x55 && pFrame->headerEuler[1]==0x53)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b55      	cmp	r3, #85	; 0x55
 800e760:	f040 8096 	bne.w	800e890 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x144>
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	785b      	ldrb	r3, [r3, #1]
 800e768:	2b53      	cmp	r3, #83	; 0x53
 800e76a:	f040 8091 	bne.w	800e890 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x144>
	{
		imuData.angleX=(pFrame->Rx)/32768.0f*180;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e774:	b21b      	sxth	r3, r3
 800e776:	ee07 3a90 	vmov	s15, r3
 800e77a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e77e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e786:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e8a4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x158>
 800e78a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		imuData.angleY=(pFrame->Ry)/32768.0f*180;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e79a:	b21b      	sxth	r3, r3
 800e79c:	ee07 3a90 	vmov	s15, r3
 800e7a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7a4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e7a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e7ac:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e8a4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x158>
 800e7b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		imuData.angleZ=(pFrame->Rz)/32768.0f*180;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e7c0:	b21b      	sxth	r3, r3
 800e7c2:	ee07 3a90 	vmov	s15, r3
 800e7c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7ca:	eddf 6a35 	vldr	s13, [pc, #212]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e7ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e7d2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e8a4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x158>
 800e7d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		imuData.q0=(pFrame->q0)/32768.0f;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 800e7e6:	b21b      	sxth	r3, r3
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7f0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e7f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		imuData.q1=(pFrame->q1)/32768.0f;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f9b3 300f 	ldrsh.w	r3, [r3, #15]
 800e804:	b21b      	sxth	r3, r3
 800e806:	ee07 3a90 	vmov	s15, r3
 800e80a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e80e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		imuData.q2=(pFrame->q2)/32768.0f;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f9b3 3011 	ldrsh.w	r3, [r3, #17]
 800e822:	b21b      	sxth	r3, r3
 800e824:	ee07 3a90 	vmov	s15, r3
 800e828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e82c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		imuData.q3=(pFrame->q3)/32768.0f;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f9b3 3013 	ldrsh.w	r3, [r3, #19]
 800e840:	b21b      	sxth	r3, r3
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e84a:	eddf 6a15 	vldr	s13, [pc, #84]	; 800e8a0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x154>
 800e84e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
		imuData.q0_int=pFrame->q0;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 800e85e:	b21a      	sxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		imuData.q1_int=pFrame->q1;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f9b3 300f 	ldrsh.w	r3, [r3, #15]
 800e86c:	b21a      	sxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		imuData.q2_int=pFrame->q2;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f9b3 3011 	ldrsh.w	r3, [r3, #17]
 800e87a:	b21a      	sxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		imuData.q3_int=pFrame->q3;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f9b3 3013 	ldrsh.w	r3, [r3, #19]
 800e888:	b21a      	sxth	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	}
	quatern2AB();
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f809 	bl	800e8a8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>


}
 800e896:	bf00      	nop
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	47000000 	.word	0x47000000
 800e8a4:	43340000 	.word	0x43340000

0800e8a8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>:

void SOFT_ARM_SEGMENT::quatern2AB(){
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b086      	sub	sp, #24
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
	float n1=2*imuData.q0*imuData.q2 + 2*imuData.q1*imuData.q3;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800e8b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800e8c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800e8ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800e8d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8dc:	edc7 7a05 	vstr	s15, [r7, #20]
	float n2=2*imuData.q2*imuData.q3 - 2*imuData.q0*imuData.q1;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800e8e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800e8f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800e8fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800e904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e90c:	edc7 7a04 	vstr	s15, [r7, #16]
	float n3=imuData.q0*imuData.q0 - imuData.q1*imuData.q1 - imuData.q2*imuData.q2 + imuData.q3*imuData.q3;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800e91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800e92c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e930:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	edd3 6a2e 	vldr	s13, [r3, #184]	; 0xb8
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800e940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e944:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800e954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e95c:	edc7 7a03 	vstr	s15, [r7, #12]

	  n1=CONSTRAIN(n1,-1,1);
 800e960:	edd7 7a05 	vldr	s15, [r7, #20]
 800e964:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	d501      	bpl.n	800e976 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xce>
 800e972:	4b53      	ldr	r3, [pc, #332]	; (800eac0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800e974:	e00c      	b.n	800e990 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 800e976:	edd7 7a05 	vldr	s15, [r7, #20]
 800e97a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e97e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e986:	dd02      	ble.n	800e98e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe6>
 800e988:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e98c:	e000      	b.n	800e990 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	617b      	str	r3, [r7, #20]
	  n2=CONSTRAIN(n2,-1,1);
 800e992:	edd7 7a04 	vldr	s15, [r7, #16]
 800e996:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e99a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	d501      	bpl.n	800e9a8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x100>
 800e9a4:	4b46      	ldr	r3, [pc, #280]	; (800eac0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800e9a6:	e00c      	b.n	800e9c2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 800e9a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b8:	dd02      	ble.n	800e9c0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x118>
 800e9ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e9be:	e000      	b.n	800e9c2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	613b      	str	r3, [r7, #16]
	  n3=CONSTRAIN(n3,-1,1);
 800e9c4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e9c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e9cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d4:	d501      	bpl.n	800e9da <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x132>
 800e9d6:	4b3a      	ldr	r3, [pc, #232]	; (800eac0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x218>)
 800e9d8:	e00c      	b.n	800e9f4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 800e9da:	edd7 7a03 	vldr	s15, [r7, #12]
 800e9de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	dd02      	ble.n	800e9f2 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14a>
 800e9ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e9f0:	e000      	b.n	800e9f4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	60fb      	str	r3, [r7, #12]

	  alpha=acos(-n3);
 800e9f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e9fa:	eef1 7a67 	vneg.f32	s15, s15
 800e9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800ea02:	f7ff fdb3 	bl	800e56c <_ZSt4acosf>
 800ea06:	eef0 7a40 	vmov.f32	s15, s0
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	  alpha=CONSTRAIN(alpha,0.001,M_PI);//avoid singularity
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800ea16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea1a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 800eaa8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x200>
 800ea1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea26:	d501      	bpl.n	800ea2c <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x184>
 800ea28:	4b26      	ldr	r3, [pc, #152]	; (800eac4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x21c>)
 800ea2a:	e010      	b.n	800ea4e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a6>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800ea32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea36:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 800eab0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x208>
 800ea3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea42:	dd01      	ble.n	800ea48 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a0>
 800ea44:	4b20      	ldr	r3, [pc, #128]	; (800eac8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x220>)
 800ea46:	e002      	b.n	800ea4e <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1a6>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	  beta=atan2(-n2,n1);
 800ea54:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea58:	eef1 7a67 	vneg.f32	s15, s15
 800ea5c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ea60:	eef0 0a47 	vmov.f32	s1, s14
 800ea64:	eeb0 0a67 	vmov.f32	s0, s15
 800ea68:	f7ff fd90 	bl	800e58c <_ZSt5atan2ff>
 800ea6c:	eef0 7a40 	vmov.f32	s15, s0
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
	  if(alpha<0.13)//the smaller alpha is, the larger error beta would have.
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800ea7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea80:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800eab8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x210>
 800ea84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8c:	d400      	bmi.n	800ea90 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1e8>
		  beta=0;
}
 800ea8e:	e004      	b.n	800ea9a <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1f2>
		  beta=0;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f04f 0200 	mov.w	r2, #0
 800ea96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800ea9a:	bf00      	nop
 800ea9c:	3718      	adds	r7, #24
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	d2f1a9fc 	.word	0xd2f1a9fc
 800eaac:	3f50624d 	.word	0x3f50624d
 800eab0:	54442d18 	.word	0x54442d18
 800eab4:	400921fb 	.word	0x400921fb
 800eab8:	0a3d70a4 	.word	0x0a3d70a4
 800eabc:	3fc0a3d7 	.word	0x3fc0a3d7
 800eac0:	bf800000 	.word	0xbf800000
 800eac4:	3a83126f 	.word	0x3a83126f
 800eac8:	40490fdb 	.word	0x40490fdb

0800eacc <unpackQuaternion>:
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOri->imuData[maxLoc])&0x8000))>>15;
}

void unpackQuaternion(QUATERNIONCOMPACT *qCom,QUATERNION *qOri){
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
	int32_t lastNumOri=0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	61fb      	str	r3, [r7, #28]
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	785b      	ldrb	r3, [r3, #1]
 800eade:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	b21a      	sxth	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	78db      	ldrb	r3, [r3, #3]
 800eaec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	b21b      	sxth	r3, r3
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	b21b      	sxth	r3, r3
 800eaf8:	837b      	strh	r3, [r7, #26]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<COMPACT_SHIFT_BIT);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	833b      	strh	r3, [r7, #24]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<COMPACT_SHIFT_BIT);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	885b      	ldrh	r3, [r3, #2]
 800eb0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	82fb      	strh	r3, [r7, #22]
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<COMPACT_SHIFT_BIT);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	889b      	ldrh	r3, [r3, #4]
 800eb1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	82bb      	strh	r3, [r7, #20]

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 800eb24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800eb2c:	fb02 f203 	mul.w	r2, r2, r3
 800eb30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb34:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800eb38:	fb01 f303 	mul.w	r3, r1, r3
 800eb3c:	441a      	add	r2, r3
 800eb3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eb42:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800eb46:	fb01 f303 	mul.w	r3, r1, r3
 800eb4a:	4413      	add	r3, r2
 800eb4c:	613b      	str	r3, [r7, #16]
	const int maxNum=(uint32_t)(1<<30);
 800eb4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb52:	60fb      	str	r3, [r7, #12]
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	693a      	ldr	r2, [r7, #16]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d207      	bcs.n	800eb6c <unpackQuaternion+0xa0>
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	4618      	mov	r0, r3
 800eb64:	f000 f893 	bl	800ec8e <fastSqrt32>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	e000      	b.n	800eb6e <unpackQuaternion+0xa2>
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	61fb      	str	r3, [r7, #28]
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	795b      	ldrb	r3, [r3, #5]
 800eb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d005      	beq.n	800eb8a <unpackQuaternion+0xbe>
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	425b      	negs	r3, r3
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	b21b      	sxth	r3, r3
 800eb88:	e001      	b.n	800eb8e <unpackQuaternion+0xc2>
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	b21b      	sxth	r3, r3
 800eb8e:	817b      	strh	r3, [r7, #10]
	if(maxLoc==0)
 800eb90:	8b7b      	ldrh	r3, [r7, #26]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10c      	bne.n	800ebb0 <unpackQuaternion+0xe4>
	{
		qOri->imuData[1]=qRes0;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	8b3a      	ldrh	r2, [r7, #24]
 800eb9a:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes1;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	8afa      	ldrh	r2, [r7, #22]
 800eba0:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	8aba      	ldrh	r2, [r7, #20]
 800eba6:	80da      	strh	r2, [r3, #6]
		qOri->imuData[0]=lastNum;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	897a      	ldrh	r2, [r7, #10]
 800ebac:	801a      	strh	r2, [r3, #0]
		qOri->imuData[0]=qRes0;
		qOri->imuData[1]=qRes1;
		qOri->imuData[2]=qRes2;
		qOri->imuData[3]=lastNum;
	}
}
 800ebae:	e02b      	b.n	800ec08 <unpackQuaternion+0x13c>
	else if (maxLoc==1){
 800ebb0:	8b7b      	ldrh	r3, [r7, #26]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d10c      	bne.n	800ebd0 <unpackQuaternion+0x104>
		qOri->imuData[0]=qRes0;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	8b3a      	ldrh	r2, [r7, #24]
 800ebba:	801a      	strh	r2, [r3, #0]
		qOri->imuData[2]=qRes1;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	8afa      	ldrh	r2, [r7, #22]
 800ebc0:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	8aba      	ldrh	r2, [r7, #20]
 800ebc6:	80da      	strh	r2, [r3, #6]
		qOri->imuData[1]=lastNum;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	897a      	ldrh	r2, [r7, #10]
 800ebcc:	805a      	strh	r2, [r3, #2]
}
 800ebce:	e01b      	b.n	800ec08 <unpackQuaternion+0x13c>
	else if(maxLoc==2){
 800ebd0:	8b7b      	ldrh	r3, [r7, #26]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d10c      	bne.n	800ebf0 <unpackQuaternion+0x124>
		qOri->imuData[0]=qRes0;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	8b3a      	ldrh	r2, [r7, #24]
 800ebda:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	8afa      	ldrh	r2, [r7, #22]
 800ebe0:	805a      	strh	r2, [r3, #2]
		qOri->imuData[3]=qRes2;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	8aba      	ldrh	r2, [r7, #20]
 800ebe6:	80da      	strh	r2, [r3, #6]
		qOri->imuData[2]=lastNum;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	897a      	ldrh	r2, [r7, #10]
 800ebec:	809a      	strh	r2, [r3, #4]
}
 800ebee:	e00b      	b.n	800ec08 <unpackQuaternion+0x13c>
		qOri->imuData[0]=qRes0;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	8b3a      	ldrh	r2, [r7, #24]
 800ebf4:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	8afa      	ldrh	r2, [r7, #22]
 800ebfa:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes2;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	8aba      	ldrh	r2, [r7, #20]
 800ec00:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=lastNum;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	897a      	ldrh	r2, [r7, #10]
 800ec06:	80da      	strh	r2, [r3, #6]
}
 800ec08:	bf00      	nop
 800ec0a:	3720      	adds	r7, #32
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <decodeSensorData>:


void decodeSensorData(SENSORDATACOMPACT *scom, SENSORDATA *s) {
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]


#if COMPACT_VERSION_PRESSURE_HPA==1
	s->pressure=scom->pressure;    //absolute hpa
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	881b      	ldrh	r3, [r3, #0]
 800ec1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	b21a      	sxth	r2, r3
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	801a      	strh	r2, [r3, #0]
	s->distance= ((uint16_t)(scom->distance<<3)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	785b      	ldrb	r3, [r3, #1]
 800ec2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit2<<2)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	78db      	ldrb	r3, [r3, #3]
 800ec3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	4413      	add	r3, r2
 800ec4c:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit1<<1)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	795b      	ldrb	r3, [r3, #5]
 800ec52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	4413      	add	r3, r2
 800ec60:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit0));
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	79db      	ldrb	r3, [r3, #7]
 800ec66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	4413      	add	r3, r2
 800ec70:	b29a      	uxth	r2, r3
	s->distance= ((uint16_t)(scom->distance<<3)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	805a      	strh	r2, [r3, #2]
#else
	s->pressure=scom->pressure;    //absolute
	s->distance=scom->distance;
#endif
	unpackQuaternion(&(scom->quaternionCom),&(s->quaternion));
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	1c9a      	adds	r2, r3, #2
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4610      	mov	r0, r2
 800ec82:	f7ff ff23 	bl	800eacc <unpackQuaternion>
}
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <fastSqrt32>:


static unsigned int fastSqrt32(unsigned long n)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b085      	sub	sp, #20
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
    unsigned int c = 0x8000;
 800ec96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec9a:	60fb      	str	r3, [r7, #12]
    unsigned int g = 0x8000;
 800ec9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eca0:	60bb      	str	r3, [r7, #8]

    for(;;) {
        if(g*g > n)
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	fb02 f303 	mul.w	r3, r2, r3
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d203      	bcs.n	800ecb8 <fastSqrt32+0x2a>
            g ^= c;
 800ecb0:	68ba      	ldr	r2, [r7, #8]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4053      	eors	r3, r2
 800ecb6:	60bb      	str	r3, [r7, #8]
        c >>= 1;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	085b      	lsrs	r3, r3, #1
 800ecbc:	60fb      	str	r3, [r7, #12]
        if(c == 0)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <fastSqrt32+0x3a>
            return g;
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	e004      	b.n	800ecd2 <fastSqrt32+0x44>
        g |= c;
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	4313      	orrs	r3, r2
 800ecce:	60bb      	str	r3, [r7, #8]
        if(g*g > n)
 800ecd0:	e7e7      	b.n	800eca2 <fastSqrt32+0x14>
    }
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
	...

0800ece0 <setup>:
#include "spiSlave.h"
#include <SoftArm.h>



void setup() {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
	/*setup 1000Hz control loop*/
	setPeriodControlLoop(10);
 800ece4:	200a      	movs	r0, #10
 800ece6:	f7fd f8f1 	bl	800becc <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(100);
 800ecea:	2064      	movs	r0, #100	; 0x64
 800ecec:	f7fd f8fe 	bl	800beec <setPeriodSendLoop>

	/*soft arm chambers' PWM port mapping*/
	softArm.setupChamberPorts();
 800ecf0:	4803      	ldr	r0, [pc, #12]	; (800ed00 <setup+0x20>)
 800ecf2:	f7ff f9f5 	bl	800e0e0 <_ZN8SOFT_ARM17setupChamberPortsEv>

	/*start canBus receive*/
//	canConfig();

	/**********start the SPI slave in DMA*****/
	spiSlaveStart();
 800ecf6:	f000 f93b 	bl	800ef70 <spiSlaveStart>

}
 800ecfa:	bf00      	nop
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20001110 	.word	0x20001110

0800ed04 <loop>:

void loop() {
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0


	/***************Handle string commands from the raspberry pi********************/
	softArm.execInfoCommand(softArm.commandData.infos);
 800ed08:	4905      	ldr	r1, [pc, #20]	; (800ed20 <loop+0x1c>)
 800ed0a:	4806      	ldr	r0, [pc, #24]	; (800ed24 <loop+0x20>)
 800ed0c:	f7ff fc00 	bl	800e510 <_ZN8SOFT_ARM15execInfoCommandEPc>

	//update chamber's pressure from the CANbus************************/
	softArm.readSensorAll();
 800ed10:	4804      	ldr	r0, [pc, #16]	; (800ed24 <loop+0x20>)
 800ed12:	f7ff fa5d 	bl	800e1d0 <_ZN8SOFT_ARM13readSensorAllEv>

	/**Write the command of each chamber, either pressure or opening type*/
	softArm.writeCommandAll();
 800ed16:	4803      	ldr	r0, [pc, #12]	; (800ed24 <loop+0x20>)
 800ed18:	f7ff fb62 	bl	800e3e0 <_ZN8SOFT_ARM15writeCommandAllEv>

}
 800ed1c:	bf00      	nop
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20001308 	.word	0x20001308
 800ed24:	20001110 	.word	0x20001110

0800ed28 <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 800ed28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed2a:	b09d      	sub	sp, #116	; 0x74
 800ed2c:	af10      	add	r7, sp, #64	; 0x40
	//printf("Time: %d\r\n",millis());
	printf("Time:%10lu    PressureCommand:Pressure(KPa)    Distance(mm)\r\n",
 800ed2e:	f7fd f84d 	bl	800bdcc <millis>
 800ed32:	4603      	mov	r3, r0
 800ed34:	4619      	mov	r1, r3
 800ed36:	4886      	ldr	r0, [pc, #536]	; (800ef50 <serialDisplay+0x228>)
 800ed38:	f002 f9aa 	bl	8011090 <iprintf>
			millis());
	for (int i = 0; i < SEGMENTNUM; i++) {
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f300 80ff 	bgt.w	800ef46 <serialDisplay+0x21e>
		printf(
				"     %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd    |     %hu,  %hu, %hu, %hu, %hu, %hu\r\n",
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 800ed48:	4982      	ldr	r1, [pc, #520]	; (800ef54 <serialDisplay+0x22c>)
 800ed4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	4413      	add	r3, r2
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	440b      	add	r3, r1
 800ed56:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800ed5a:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ed5e:	469c      	mov	ip, r3
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 800ed60:	4a7c      	ldr	r2, [pc, #496]	; (800ef54 <serialDisplay+0x22c>)
 800ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed64:	21dc      	movs	r1, #220	; 0xdc
 800ed66:	fb01 f303 	mul.w	r3, r1, r3
 800ed6a:	4413      	add	r3, r2
 800ed6c:	3358      	adds	r3, #88	; 0x58
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ed74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 800ed78:	4976      	ldr	r1, [pc, #472]	; (800ef54 <serialDisplay+0x22c>)
 800ed7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4413      	add	r3, r2
 800ed82:	00db      	lsls	r3, r3, #3
 800ed84:	440b      	add	r3, r1
 800ed86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ed8a:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ed8e:	469e      	mov	lr, r3
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 800ed90:	4a70      	ldr	r2, [pc, #448]	; (800ef54 <serialDisplay+0x22c>)
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	21dc      	movs	r1, #220	; 0xdc
 800ed96:	fb01 f303 	mul.w	r3, r1, r3
 800ed9a:	4413      	add	r3, r2
 800ed9c:	335c      	adds	r3, #92	; 0x5c
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800eda4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eda8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 800edac:	4969      	ldr	r1, [pc, #420]	; (800ef54 <serialDisplay+0x22c>)
 800edae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb0:	4613      	mov	r3, r2
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	4413      	add	r3, r2
 800edb6:	00db      	lsls	r3, r3, #3
 800edb8:	440b      	add	r3, r1
 800edba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800edbe:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800edc2:	623b      	str	r3, [r7, #32]
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 800edc4:	4a63      	ldr	r2, [pc, #396]	; (800ef54 <serialDisplay+0x22c>)
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	21dc      	movs	r1, #220	; 0xdc
 800edca:	fb01 f303 	mul.w	r3, r1, r3
 800edce:	4413      	add	r3, r2
 800edd0:	3360      	adds	r3, #96	; 0x60
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800edd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eddc:	edc7 7a07 	vstr	s15, [r7, #28]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 800ede0:	495c      	ldr	r1, [pc, #368]	; (800ef54 <serialDisplay+0x22c>)
 800ede2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ede4:	4613      	mov	r3, r2
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	4413      	add	r3, r2
 800edea:	00db      	lsls	r3, r3, #3
 800edec:	440b      	add	r3, r1
 800edee:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800edf2:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800edf6:	61bb      	str	r3, [r7, #24]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 800edf8:	4a56      	ldr	r2, [pc, #344]	; (800ef54 <serialDisplay+0x22c>)
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	21dc      	movs	r1, #220	; 0xdc
 800edfe:	fb01 f303 	mul.w	r3, r1, r3
 800ee02:	4413      	add	r3, r2
 800ee04:	3364      	adds	r3, #100	; 0x64
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ee0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee10:	edc7 7a05 	vstr	s15, [r7, #20]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 800ee14:	494f      	ldr	r1, [pc, #316]	; (800ef54 <serialDisplay+0x22c>)
 800ee16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee18:	4613      	mov	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	440b      	add	r3, r1
 800ee22:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800ee26:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ee2a:	613b      	str	r3, [r7, #16]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 800ee2c:	4a49      	ldr	r2, [pc, #292]	; (800ef54 <serialDisplay+0x22c>)
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee30:	21dc      	movs	r1, #220	; 0xdc
 800ee32:	fb01 f303 	mul.w	r3, r1, r3
 800ee36:	4413      	add	r3, r2
 800ee38:	3368      	adds	r3, #104	; 0x68
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ee40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee44:	edc7 7a03 	vstr	s15, [r7, #12]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 800ee48:	4942      	ldr	r1, [pc, #264]	; (800ef54 <serialDisplay+0x22c>)
 800ee4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee4c:	4613      	mov	r3, r2
 800ee4e:	00db      	lsls	r3, r3, #3
 800ee50:	4413      	add	r3, r2
 800ee52:	00db      	lsls	r3, r3, #3
 800ee54:	440b      	add	r3, r1
 800ee56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ee5a:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 800ee5e:	60bb      	str	r3, [r7, #8]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 800ee60:	4a3c      	ldr	r2, [pc, #240]	; (800ef54 <serialDisplay+0x22c>)
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	21dc      	movs	r1, #220	; 0xdc
 800ee66:	fb01 f303 	mul.w	r3, r1, r3
 800ee6a:	4413      	add	r3, r2
 800ee6c:	336c      	adds	r3, #108	; 0x6c
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 800ee74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee78:	edc7 7a01 	vstr	s15, [r7, #4]
				softArm.sensorData.data[i][0].distance,
 800ee7c:	4935      	ldr	r1, [pc, #212]	; (800ef54 <serialDisplay+0x22c>)
 800ee7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee80:	4613      	mov	r3, r2
 800ee82:	00db      	lsls	r3, r3, #3
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ee8e:	881b      	ldrh	r3, [r3, #0]
		printf(
 800ee90:	603b      	str	r3, [r7, #0]
				softArm.sensorData.data[i][1].distance,
 800ee92:	4930      	ldr	r1, [pc, #192]	; (800ef54 <serialDisplay+0x22c>)
 800ee94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee96:	4613      	mov	r3, r2
 800ee98:	00db      	lsls	r3, r3, #3
 800ee9a:	4413      	add	r3, r2
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	440b      	add	r3, r1
 800eea0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800eea4:	881b      	ldrh	r3, [r3, #0]
		printf(
 800eea6:	461e      	mov	r6, r3
				softArm.sensorData.data[i][2].distance,
 800eea8:	492a      	ldr	r1, [pc, #168]	; (800ef54 <serialDisplay+0x22c>)
 800eeaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeac:	4613      	mov	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	4413      	add	r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	440b      	add	r3, r1
 800eeb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800eeba:	881b      	ldrh	r3, [r3, #0]
		printf(
 800eebc:	461d      	mov	r5, r3
				softArm.sensorData.data[i][3].distance,
 800eebe:	4925      	ldr	r1, [pc, #148]	; (800ef54 <serialDisplay+0x22c>)
 800eec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec2:	4613      	mov	r3, r2
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	4413      	add	r3, r2
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	440b      	add	r3, r1
 800eecc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800eed0:	881b      	ldrh	r3, [r3, #0]
		printf(
 800eed2:	461c      	mov	r4, r3
				softArm.sensorData.data[i][4].distance,
 800eed4:	491f      	ldr	r1, [pc, #124]	; (800ef54 <serialDisplay+0x22c>)
 800eed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eed8:	4613      	mov	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	4413      	add	r3, r2
 800eede:	00db      	lsls	r3, r3, #3
 800eee0:	440b      	add	r3, r1
 800eee2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eee6:	881b      	ldrh	r3, [r3, #0]
		printf(
 800eee8:	4618      	mov	r0, r3
				softArm.sensorData.data[i][5].distance);
 800eeea:	491a      	ldr	r1, [pc, #104]	; (800ef54 <serialDisplay+0x22c>)
 800eeec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeee:	4613      	mov	r3, r2
 800eef0:	00db      	lsls	r3, r3, #3
 800eef2:	4413      	add	r3, r2
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	440b      	add	r3, r1
 800eef8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800eefc:	881b      	ldrh	r3, [r3, #0]
		printf(
 800eefe:	930e      	str	r3, [sp, #56]	; 0x38
 800ef00:	900d      	str	r0, [sp, #52]	; 0x34
 800ef02:	940c      	str	r4, [sp, #48]	; 0x30
 800ef04:	950b      	str	r5, [sp, #44]	; 0x2c
 800ef06:	960a      	str	r6, [sp, #40]	; 0x28
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	9208      	str	r2, [sp, #32]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	9207      	str	r2, [sp, #28]
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	9206      	str	r2, [sp, #24]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	9205      	str	r2, [sp, #20]
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	9204      	str	r2, [sp, #16]
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	9203      	str	r2, [sp, #12]
 800ef24:	69fa      	ldr	r2, [r7, #28]
 800ef26:	9202      	str	r2, [sp, #8]
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4673      	mov	r3, lr
 800ef32:	ee17 2a10 	vmov	r2, s14
 800ef36:	4661      	mov	r1, ip
 800ef38:	4807      	ldr	r0, [pc, #28]	; (800ef58 <serialDisplay+0x230>)
 800ef3a:	f002 f8a9 	bl	8011090 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	3301      	adds	r3, #1
 800ef42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef44:	e6fc      	b.n	800ed40 <serialDisplay+0x18>
	}
}
 800ef46:	bf00      	nop
 800ef48:	3734      	adds	r7, #52	; 0x34
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	0801487c 	.word	0x0801487c
 800ef54:	20001110 	.word	0x20001110
 800ef58:	080148bc 	.word	0x080148bc

0800ef5c <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
//		softArm.canBusCommand[1] = 0xEF;
//		softArm.canBusCommand[2] = 0xFE;
//		softArm.canBusCommand[3] = 0xAF;
//		canSend();
	}
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <spiSlaveStart>:
#include <inttypes.h>

SPI_HandleTypeDef *hspiSlave=&hspi1;


void spiSlaveStart(){
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800ef74:	2352      	movs	r3, #82	; 0x52
 800ef76:	4a03      	ldr	r2, [pc, #12]	; (800ef84 <spiSlaveStart+0x14>)
 800ef78:	4903      	ldr	r1, [pc, #12]	; (800ef88 <spiSlaveStart+0x18>)
 800ef7a:	4804      	ldr	r0, [pc, #16]	; (800ef8c <spiSlaveStart+0x1c>)
 800ef7c:	f7f5 f9c8 	bl	8004310 <HAL_SPI_TransmitReceive_DMA>
}
 800ef80:	bf00      	nop
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	2000121c 	.word	0x2000121c
 800ef88:	2000126e 	.word	0x2000126e
 800ef8c:	200097c4 	.word	0x200097c4

0800ef90 <slaveSPITxRxCpltCallback>:



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <slaveSPITxRxCpltCallback+0x3c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d10f      	bne.n	800efc2 <slaveSPITxRxCpltCallback+0x32>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 800efa2:	4a0b      	ldr	r2, [pc, #44]	; (800efd0 <slaveSPITxRxCpltCallback+0x40>)
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <slaveSPITxRxCpltCallback+0x40>)
 800efa6:	f502 70d8 	add.w	r0, r2, #432	; 0x1b0
 800efaa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800efae:	2252      	movs	r2, #82	; 0x52
 800efb0:	4619      	mov	r1, r3
 800efb2:	f001 f98f 	bl	80102d4 <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800efb6:	2352      	movs	r3, #82	; 0x52
 800efb8:	4a06      	ldr	r2, [pc, #24]	; (800efd4 <slaveSPITxRxCpltCallback+0x44>)
 800efba:	4907      	ldr	r1, [pc, #28]	; (800efd8 <slaveSPITxRxCpltCallback+0x48>)
 800efbc:	4807      	ldr	r0, [pc, #28]	; (800efdc <slaveSPITxRxCpltCallback+0x4c>)
 800efbe:	f7f5 f9a7 	bl	8004310 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800efc2:	bf00      	nop
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20000370 	.word	0x20000370
 800efd0:	20001110 	.word	0x20001110
 800efd4:	2000121c 	.word	0x2000121c
 800efd8:	2000126e 	.word	0x2000126e
 800efdc:	200097c4 	.word	0x200097c4

0800efe0 <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800efe8:	4b08      	ldr	r3, [pc, #32]	; (800f00c <slaveSPIErrorCallback+0x2c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d108      	bne.n	800f004 <slaveSPIErrorCallback+0x24>
		printf("Error SPI 1 communication with RPI4\r\n");
 800eff2:	4807      	ldr	r0, [pc, #28]	; (800f010 <slaveSPIErrorCallback+0x30>)
 800eff4:	f002 f8c0 	bl	8011178 <puts>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800eff8:	2352      	movs	r3, #82	; 0x52
 800effa:	4a06      	ldr	r2, [pc, #24]	; (800f014 <slaveSPIErrorCallback+0x34>)
 800effc:	4906      	ldr	r1, [pc, #24]	; (800f018 <slaveSPIErrorCallback+0x38>)
 800effe:	4807      	ldr	r0, [pc, #28]	; (800f01c <slaveSPIErrorCallback+0x3c>)
 800f000:	f7f5 f986 	bl	8004310 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800f004:	bf00      	nop
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20000370 	.word	0x20000370
 800f010:	08014924 	.word	0x08014924
 800f014:	2000121c 	.word	0x2000121c
 800f018:	2000126e 	.word	0x2000126e
 800f01c:	200097c4 	.word	0x200097c4

0800f020 <_Znwj>:
 800f020:	b510      	push	{r4, lr}
 800f022:	2800      	cmp	r0, #0
 800f024:	bf14      	ite	ne
 800f026:	4604      	movne	r4, r0
 800f028:	2401      	moveq	r4, #1
 800f02a:	4620      	mov	r0, r4
 800f02c:	f001 f94a 	bl	80102c4 <malloc>
 800f030:	b930      	cbnz	r0, 800f040 <_Znwj+0x20>
 800f032:	f000 f807 	bl	800f044 <_ZSt15get_new_handlerv>
 800f036:	b908      	cbnz	r0, 800f03c <_Znwj+0x1c>
 800f038:	f001 f90a 	bl	8010250 <abort>
 800f03c:	4780      	blx	r0
 800f03e:	e7f4      	b.n	800f02a <_Znwj+0xa>
 800f040:	bd10      	pop	{r4, pc}
	...

0800f044 <_ZSt15get_new_handlerv>:
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <_ZSt15get_new_handlerv+0xc>)
 800f046:	6818      	ldr	r0, [r3, #0]
 800f048:	f3bf 8f5b 	dmb	ish
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	20001338 	.word	0x20001338

0800f054 <round>:
 800f054:	ee10 3a90 	vmov	r3, s1
 800f058:	b530      	push	{r4, r5, lr}
 800f05a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f05e:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800f062:	2913      	cmp	r1, #19
 800f064:	ee10 5a90 	vmov	r5, s1
 800f068:	ee10 2a10 	vmov	r2, s0
 800f06c:	dc17      	bgt.n	800f09e <round+0x4a>
 800f06e:	2900      	cmp	r1, #0
 800f070:	da09      	bge.n	800f086 <round+0x32>
 800f072:	3101      	adds	r1, #1
 800f074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f078:	d103      	bne.n	800f082 <round+0x2e>
 800f07a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f07e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f082:	2200      	movs	r2, #0
 800f084:	e024      	b.n	800f0d0 <round+0x7c>
 800f086:	4815      	ldr	r0, [pc, #84]	; (800f0dc <round+0x88>)
 800f088:	4108      	asrs	r0, r1
 800f08a:	4203      	tst	r3, r0
 800f08c:	d100      	bne.n	800f090 <round+0x3c>
 800f08e:	b16a      	cbz	r2, 800f0ac <round+0x58>
 800f090:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f094:	410b      	asrs	r3, r1
 800f096:	442b      	add	r3, r5
 800f098:	ea23 0300 	bic.w	r3, r3, r0
 800f09c:	e7f1      	b.n	800f082 <round+0x2e>
 800f09e:	2933      	cmp	r1, #51	; 0x33
 800f0a0:	dd05      	ble.n	800f0ae <round+0x5a>
 800f0a2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f0a6:	d101      	bne.n	800f0ac <round+0x58>
 800f0a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f0ac:	bd30      	pop	{r4, r5, pc}
 800f0ae:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800f0b2:	f04f 34ff 	mov.w	r4, #4294967295
 800f0b6:	40c4      	lsrs	r4, r0
 800f0b8:	4222      	tst	r2, r4
 800f0ba:	d0f7      	beq.n	800f0ac <round+0x58>
 800f0bc:	2001      	movs	r0, #1
 800f0be:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800f0c2:	fa00 f101 	lsl.w	r1, r0, r1
 800f0c6:	1852      	adds	r2, r2, r1
 800f0c8:	bf28      	it	cs
 800f0ca:	181b      	addcs	r3, r3, r0
 800f0cc:	ea22 0204 	bic.w	r2, r2, r4
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	ec41 0b10 	vmov	d0, r0, r1
 800f0d8:	e7e8      	b.n	800f0ac <round+0x58>
 800f0da:	bf00      	nop
 800f0dc:	000fffff 	.word	0x000fffff

0800f0e0 <cosf>:
 800f0e0:	ee10 3a10 	vmov	r3, s0
 800f0e4:	b507      	push	{r0, r1, r2, lr}
 800f0e6:	4a1c      	ldr	r2, [pc, #112]	; (800f158 <cosf+0x78>)
 800f0e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	dc04      	bgt.n	800f0fa <cosf+0x1a>
 800f0f0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800f15c <cosf+0x7c>
 800f0f4:	f000 fbf2 	bl	800f8dc <__kernel_cosf>
 800f0f8:	e004      	b.n	800f104 <cosf+0x24>
 800f0fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f0fe:	db04      	blt.n	800f10a <cosf+0x2a>
 800f100:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f104:	b003      	add	sp, #12
 800f106:	f85d fb04 	ldr.w	pc, [sp], #4
 800f10a:	4668      	mov	r0, sp
 800f10c:	f000 fab6 	bl	800f67c <__ieee754_rem_pio2f>
 800f110:	f000 0003 	and.w	r0, r0, #3
 800f114:	2801      	cmp	r0, #1
 800f116:	d007      	beq.n	800f128 <cosf+0x48>
 800f118:	2802      	cmp	r0, #2
 800f11a:	d00e      	beq.n	800f13a <cosf+0x5a>
 800f11c:	b9a0      	cbnz	r0, 800f148 <cosf+0x68>
 800f11e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f122:	ed9d 0a00 	vldr	s0, [sp]
 800f126:	e7e5      	b.n	800f0f4 <cosf+0x14>
 800f128:	eddd 0a01 	vldr	s1, [sp, #4]
 800f12c:	ed9d 0a00 	vldr	s0, [sp]
 800f130:	f000 feb4 	bl	800fe9c <__kernel_sinf>
 800f134:	eeb1 0a40 	vneg.f32	s0, s0
 800f138:	e7e4      	b.n	800f104 <cosf+0x24>
 800f13a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f13e:	ed9d 0a00 	vldr	s0, [sp]
 800f142:	f000 fbcb 	bl	800f8dc <__kernel_cosf>
 800f146:	e7f5      	b.n	800f134 <cosf+0x54>
 800f148:	2001      	movs	r0, #1
 800f14a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f14e:	ed9d 0a00 	vldr	s0, [sp]
 800f152:	f000 fea3 	bl	800fe9c <__kernel_sinf>
 800f156:	e7d5      	b.n	800f104 <cosf+0x24>
 800f158:	3f490fd8 	.word	0x3f490fd8
 800f15c:	00000000 	.word	0x00000000

0800f160 <sinf>:
 800f160:	ee10 3a10 	vmov	r3, s0
 800f164:	b507      	push	{r0, r1, r2, lr}
 800f166:	4a1d      	ldr	r2, [pc, #116]	; (800f1dc <sinf+0x7c>)
 800f168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f16c:	4293      	cmp	r3, r2
 800f16e:	dc05      	bgt.n	800f17c <sinf+0x1c>
 800f170:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800f1e0 <sinf+0x80>
 800f174:	2000      	movs	r0, #0
 800f176:	f000 fe91 	bl	800fe9c <__kernel_sinf>
 800f17a:	e004      	b.n	800f186 <sinf+0x26>
 800f17c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f180:	db04      	blt.n	800f18c <sinf+0x2c>
 800f182:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f186:	b003      	add	sp, #12
 800f188:	f85d fb04 	ldr.w	pc, [sp], #4
 800f18c:	4668      	mov	r0, sp
 800f18e:	f000 fa75 	bl	800f67c <__ieee754_rem_pio2f>
 800f192:	f000 0003 	and.w	r0, r0, #3
 800f196:	2801      	cmp	r0, #1
 800f198:	d008      	beq.n	800f1ac <sinf+0x4c>
 800f19a:	2802      	cmp	r0, #2
 800f19c:	d00d      	beq.n	800f1ba <sinf+0x5a>
 800f19e:	b9b0      	cbnz	r0, 800f1ce <sinf+0x6e>
 800f1a0:	2001      	movs	r0, #1
 800f1a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1a6:	ed9d 0a00 	vldr	s0, [sp]
 800f1aa:	e7e4      	b.n	800f176 <sinf+0x16>
 800f1ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1b0:	ed9d 0a00 	vldr	s0, [sp]
 800f1b4:	f000 fb92 	bl	800f8dc <__kernel_cosf>
 800f1b8:	e7e5      	b.n	800f186 <sinf+0x26>
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1c0:	ed9d 0a00 	vldr	s0, [sp]
 800f1c4:	f000 fe6a 	bl	800fe9c <__kernel_sinf>
 800f1c8:	eeb1 0a40 	vneg.f32	s0, s0
 800f1cc:	e7db      	b.n	800f186 <sinf+0x26>
 800f1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1d2:	ed9d 0a00 	vldr	s0, [sp]
 800f1d6:	f000 fb81 	bl	800f8dc <__kernel_cosf>
 800f1da:	e7f5      	b.n	800f1c8 <sinf+0x68>
 800f1dc:	3f490fd8 	.word	0x3f490fd8
 800f1e0:	00000000 	.word	0x00000000

0800f1e4 <acosf>:
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	ed2d 8b02 	vpush	{d8}
 800f1ea:	4c25      	ldr	r4, [pc, #148]	; (800f280 <acosf+0x9c>)
 800f1ec:	b08a      	sub	sp, #40	; 0x28
 800f1ee:	eeb0 8a40 	vmov.f32	s16, s0
 800f1f2:	f000 f89d 	bl	800f330 <__ieee754_acosf>
 800f1f6:	f994 3000 	ldrsb.w	r3, [r4]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	eef0 8a40 	vmov.f32	s17, s0
 800f200:	d038      	beq.n	800f274 <acosf+0x90>
 800f202:	eeb4 8a48 	vcmp.f32	s16, s16
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	d633      	bvs.n	800f274 <acosf+0x90>
 800f20c:	eeb0 0a48 	vmov.f32	s0, s16
 800f210:	f000 ff68 	bl	80100e4 <fabsf>
 800f214:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f218:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f220:	dd28      	ble.n	800f274 <acosf+0x90>
 800f222:	2301      	movs	r3, #1
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800f22a:	4b16      	ldr	r3, [pc, #88]	; (800f284 <acosf+0xa0>)
 800f22c:	9301      	str	r3, [sp, #4]
 800f22e:	4816      	ldr	r0, [pc, #88]	; (800f288 <acosf+0xa4>)
 800f230:	2300      	movs	r3, #0
 800f232:	9308      	str	r3, [sp, #32]
 800f234:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f238:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f23c:	f000 fe78 	bl	800ff30 <nan>
 800f240:	f994 3000 	ldrsb.w	r3, [r4]
 800f244:	2b02      	cmp	r3, #2
 800f246:	ed8d 0b06 	vstr	d0, [sp, #24]
 800f24a:	d104      	bne.n	800f256 <acosf+0x72>
 800f24c:	f001 f810 	bl	8010270 <__errno>
 800f250:	2321      	movs	r3, #33	; 0x21
 800f252:	6003      	str	r3, [r0, #0]
 800f254:	e004      	b.n	800f260 <acosf+0x7c>
 800f256:	4668      	mov	r0, sp
 800f258:	f000 fe68 	bl	800ff2c <matherr>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d0f5      	beq.n	800f24c <acosf+0x68>
 800f260:	9b08      	ldr	r3, [sp, #32]
 800f262:	b11b      	cbz	r3, 800f26c <acosf+0x88>
 800f264:	f001 f804 	bl	8010270 <__errno>
 800f268:	9b08      	ldr	r3, [sp, #32]
 800f26a:	6003      	str	r3, [r0, #0]
 800f26c:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f270:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 800f274:	eeb0 0a68 	vmov.f32	s0, s17
 800f278:	b00a      	add	sp, #40	; 0x28
 800f27a:	ecbd 8b02 	vpop	{d8}
 800f27e:	bd10      	pop	{r4, pc}
 800f280:	20000374 	.word	0x20000374
 800f284:	0801496c 	.word	0x0801496c
 800f288:	08014f79 	.word	0x08014f79

0800f28c <atan2f>:
 800f28c:	f000 b94c 	b.w	800f528 <__ieee754_atan2f>

0800f290 <sqrtf>:
 800f290:	b500      	push	{lr}
 800f292:	ed2d 8b02 	vpush	{d8}
 800f296:	b08b      	sub	sp, #44	; 0x2c
 800f298:	eeb0 8a40 	vmov.f32	s16, s0
 800f29c:	f000 fb1a 	bl	800f8d4 <__ieee754_sqrtf>
 800f2a0:	4b21      	ldr	r3, [pc, #132]	; (800f328 <sqrtf+0x98>)
 800f2a2:	f993 3000 	ldrsb.w	r3, [r3]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	d028      	beq.n	800f2fc <sqrtf+0x6c>
 800f2aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800f2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b2:	d623      	bvs.n	800f2fc <sqrtf+0x6c>
 800f2b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2bc:	d51e      	bpl.n	800f2fc <sqrtf+0x6c>
 800f2be:	2201      	movs	r2, #1
 800f2c0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800f2c4:	9200      	str	r2, [sp, #0]
 800f2c6:	4a19      	ldr	r2, [pc, #100]	; (800f32c <sqrtf+0x9c>)
 800f2c8:	9201      	str	r2, [sp, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	9208      	str	r2, [sp, #32]
 800f2ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f2d6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f320 <sqrtf+0x90>
 800f2da:	b9a3      	cbnz	r3, 800f306 <sqrtf+0x76>
 800f2dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f2e0:	4668      	mov	r0, sp
 800f2e2:	f000 fe23 	bl	800ff2c <matherr>
 800f2e6:	b1a0      	cbz	r0, 800f312 <sqrtf+0x82>
 800f2e8:	9b08      	ldr	r3, [sp, #32]
 800f2ea:	b11b      	cbz	r3, 800f2f4 <sqrtf+0x64>
 800f2ec:	f000 ffc0 	bl	8010270 <__errno>
 800f2f0:	9b08      	ldr	r3, [sp, #32]
 800f2f2:	6003      	str	r3, [r0, #0]
 800f2f4:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f2f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f2fc:	b00b      	add	sp, #44	; 0x2c
 800f2fe:	ecbd 8b02 	vpop	{d8}
 800f302:	f85d fb04 	ldr.w	pc, [sp], #4
 800f306:	2b02      	cmp	r3, #2
 800f308:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800f30c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800f310:	d1e6      	bne.n	800f2e0 <sqrtf+0x50>
 800f312:	f000 ffad 	bl	8010270 <__errno>
 800f316:	2321      	movs	r3, #33	; 0x21
 800f318:	6003      	str	r3, [r0, #0]
 800f31a:	e7e5      	b.n	800f2e8 <sqrtf+0x58>
 800f31c:	f3af 8000 	nop.w
	...
 800f328:	20000374 	.word	0x20000374
 800f32c:	08014972 	.word	0x08014972

0800f330 <__ieee754_acosf>:
 800f330:	b508      	push	{r3, lr}
 800f332:	ee10 3a10 	vmov	r3, s0
 800f336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f33a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f33e:	ed2d 8b0c 	vpush	{d8-d13}
 800f342:	d109      	bne.n	800f358 <__ieee754_acosf+0x28>
 800f344:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800f4e4 <__ieee754_acosf+0x1b4>
 800f348:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800f4e8 <__ieee754_acosf+0x1b8>
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	fe30 0a08 	vselgt.f32	s0, s0, s16
 800f352:	ecbd 8b0c 	vpop	{d8-d13}
 800f356:	bd08      	pop	{r3, pc}
 800f358:	dd04      	ble.n	800f364 <__ieee754_acosf+0x34>
 800f35a:	ee30 8a40 	vsub.f32	s16, s0, s0
 800f35e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f362:	e7f6      	b.n	800f352 <__ieee754_acosf+0x22>
 800f364:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800f368:	da3e      	bge.n	800f3e8 <__ieee754_acosf+0xb8>
 800f36a:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800f36e:	f340 80b5 	ble.w	800f4dc <__ieee754_acosf+0x1ac>
 800f372:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f376:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800f4ec <__ieee754_acosf+0x1bc>
 800f37a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f4f0 <__ieee754_acosf+0x1c0>
 800f37e:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 800f4f4 <__ieee754_acosf+0x1c4>
 800f382:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800f4f8 <__ieee754_acosf+0x1c8>
 800f386:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f38a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800f4fc <__ieee754_acosf+0x1cc>
 800f38e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f392:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800f500 <__ieee754_acosf+0x1d0>
 800f396:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f39a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800f504 <__ieee754_acosf+0x1d4>
 800f39e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f3a2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f508 <__ieee754_acosf+0x1d8>
 800f3a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f50c <__ieee754_acosf+0x1dc>
 800f3ae:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800f3b2:	eddf 6a57 	vldr	s13, [pc, #348]	; 800f510 <__ieee754_acosf+0x1e0>
 800f3b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f3ba:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800f514 <__ieee754_acosf+0x1e4>
 800f3be:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f3ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3ce:	eef0 7a66 	vmov.f32	s15, s13
 800f3d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3d6:	eea0 8a66 	vfms.f32	s16, s0, s13
 800f3da:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f3de:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f518 <__ieee754_acosf+0x1e8>
 800f3e2:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f3e6:	e7b4      	b.n	800f352 <__ieee754_acosf+0x22>
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	eddf da40 	vldr	s27, [pc, #256]	; 800f4ec <__ieee754_acosf+0x1bc>
 800f3ee:	eddf ca40 	vldr	s25, [pc, #256]	; 800f4f0 <__ieee754_acosf+0x1c0>
 800f3f2:	ed9f ca42 	vldr	s24, [pc, #264]	; 800f4fc <__ieee754_acosf+0x1cc>
 800f3f6:	eddf ba42 	vldr	s23, [pc, #264]	; 800f500 <__ieee754_acosf+0x1d0>
 800f3fa:	ed9f ba42 	vldr	s22, [pc, #264]	; 800f504 <__ieee754_acosf+0x1d4>
 800f3fe:	eddf 8a42 	vldr	s17, [pc, #264]	; 800f508 <__ieee754_acosf+0x1d8>
 800f402:	ed9f da42 	vldr	s26, [pc, #264]	; 800f50c <__ieee754_acosf+0x1dc>
 800f406:	eddf aa3b 	vldr	s21, [pc, #236]	; 800f4f4 <__ieee754_acosf+0x1c4>
 800f40a:	ed9f aa41 	vldr	s20, [pc, #260]	; 800f510 <__ieee754_acosf+0x1e0>
 800f40e:	eddf 9a41 	vldr	s19, [pc, #260]	; 800f514 <__ieee754_acosf+0x1e4>
 800f412:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f416:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f41a:	da28      	bge.n	800f46e <__ieee754_acosf+0x13e>
 800f41c:	ee30 0a09 	vadd.f32	s0, s0, s18
 800f420:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f424:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800f428:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800f42c:	eeac ca80 	vfma.f32	s24, s25, s0
 800f430:	eeaa aa80 	vfma.f32	s20, s21, s0
 800f434:	eeec ba00 	vfma.f32	s23, s24, s0
 800f438:	eeea 9a00 	vfma.f32	s19, s20, s0
 800f43c:	eeab ba80 	vfma.f32	s22, s23, s0
 800f440:	eea9 9a80 	vfma.f32	s18, s19, s0
 800f444:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800f448:	ee68 8a80 	vmul.f32	s17, s17, s0
 800f44c:	f000 fa42 	bl	800f8d4 <__ieee754_sqrtf>
 800f450:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800f454:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f51c <__ieee754_acosf+0x1ec>
 800f458:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f45c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f460:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f464:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800f520 <__ieee754_acosf+0x1f0>
 800f468:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f46c:	e771      	b.n	800f352 <__ieee754_acosf+0x22>
 800f46e:	ee39 8a40 	vsub.f32	s16, s18, s0
 800f472:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f476:	eeb0 0a48 	vmov.f32	s0, s16
 800f47a:	f000 fa2b 	bl	800f8d4 <__ieee754_sqrtf>
 800f47e:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800f482:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800f486:	eeac ca88 	vfma.f32	s24, s25, s16
 800f48a:	eeaa aa88 	vfma.f32	s20, s21, s16
 800f48e:	eeec ba08 	vfma.f32	s23, s24, s16
 800f492:	ee10 3a10 	vmov	r3, s0
 800f496:	eeab ba88 	vfma.f32	s22, s23, s16
 800f49a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f49e:	f023 030f 	bic.w	r3, r3, #15
 800f4a2:	eeea 9a08 	vfma.f32	s19, s20, s16
 800f4a6:	ee07 3a90 	vmov	s15, r3
 800f4aa:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800f4ae:	eeb0 6a48 	vmov.f32	s12, s16
 800f4b2:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800f4b6:	eea9 9a88 	vfma.f32	s18, s19, s16
 800f4ba:	ee70 6a27 	vadd.f32	s13, s0, s15
 800f4be:	ee68 8a88 	vmul.f32	s17, s17, s16
 800f4c2:	eeb0 7a40 	vmov.f32	s14, s0
 800f4c6:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800f4ca:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800f4ce:	eea7 0a26 	vfma.f32	s0, s14, s13
 800f4d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f4d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f4da:	e73a      	b.n	800f352 <__ieee754_acosf+0x22>
 800f4dc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800f524 <__ieee754_acosf+0x1f4>
 800f4e0:	e737      	b.n	800f352 <__ieee754_acosf+0x22>
 800f4e2:	bf00      	nop
 800f4e4:	00000000 	.word	0x00000000
 800f4e8:	40490fdb 	.word	0x40490fdb
 800f4ec:	3811ef08 	.word	0x3811ef08
 800f4f0:	3a4f7f04 	.word	0x3a4f7f04
 800f4f4:	bf303361 	.word	0xbf303361
 800f4f8:	33a22168 	.word	0x33a22168
 800f4fc:	bd241146 	.word	0xbd241146
 800f500:	3e4e0aa8 	.word	0x3e4e0aa8
 800f504:	bea6b090 	.word	0xbea6b090
 800f508:	3e2aaaab 	.word	0x3e2aaaab
 800f50c:	3d9dc62e 	.word	0x3d9dc62e
 800f510:	4001572d 	.word	0x4001572d
 800f514:	c019d139 	.word	0xc019d139
 800f518:	3fc90fda 	.word	0x3fc90fda
 800f51c:	b3a22168 	.word	0xb3a22168
 800f520:	40490fda 	.word	0x40490fda
 800f524:	3fc90fdb 	.word	0x3fc90fdb

0800f528 <__ieee754_atan2f>:
 800f528:	ee10 2a90 	vmov	r2, s1
 800f52c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f530:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f534:	b510      	push	{r4, lr}
 800f536:	eef0 7a40 	vmov.f32	s15, s0
 800f53a:	dc06      	bgt.n	800f54a <__ieee754_atan2f+0x22>
 800f53c:	ee10 0a10 	vmov	r0, s0
 800f540:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f544:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f548:	dd04      	ble.n	800f554 <__ieee754_atan2f+0x2c>
 800f54a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f54e:	eeb0 0a67 	vmov.f32	s0, s15
 800f552:	bd10      	pop	{r4, pc}
 800f554:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f558:	d103      	bne.n	800f562 <__ieee754_atan2f+0x3a>
 800f55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f55e:	f000 bcef 	b.w	800ff40 <atanf>
 800f562:	1794      	asrs	r4, r2, #30
 800f564:	f004 0402 	and.w	r4, r4, #2
 800f568:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f56c:	b93b      	cbnz	r3, 800f57e <__ieee754_atan2f+0x56>
 800f56e:	2c02      	cmp	r4, #2
 800f570:	d06b      	beq.n	800f64a <__ieee754_atan2f+0x122>
 800f572:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f650 <__ieee754_atan2f+0x128>
 800f576:	2c03      	cmp	r4, #3
 800f578:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800f57c:	e7e7      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f57e:	b939      	cbnz	r1, 800f590 <__ieee754_atan2f+0x68>
 800f580:	eddf 7a34 	vldr	s15, [pc, #208]	; 800f654 <__ieee754_atan2f+0x12c>
 800f584:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f658 <__ieee754_atan2f+0x130>
 800f588:	2800      	cmp	r0, #0
 800f58a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800f58e:	e7de      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f590:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f594:	d121      	bne.n	800f5da <__ieee754_atan2f+0xb2>
 800f596:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f59a:	d111      	bne.n	800f5c0 <__ieee754_atan2f+0x98>
 800f59c:	2c02      	cmp	r4, #2
 800f59e:	d009      	beq.n	800f5b4 <__ieee754_atan2f+0x8c>
 800f5a0:	2c03      	cmp	r4, #3
 800f5a2:	d00a      	beq.n	800f5ba <__ieee754_atan2f+0x92>
 800f5a4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f65c <__ieee754_atan2f+0x134>
 800f5a8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800f660 <__ieee754_atan2f+0x138>
 800f5ac:	2c01      	cmp	r4, #1
 800f5ae:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800f5b2:	e7cc      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f5b4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f664 <__ieee754_atan2f+0x13c>
 800f5b8:	e7c9      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f5ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f668 <__ieee754_atan2f+0x140>
 800f5be:	e7c6      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f5c0:	2c02      	cmp	r4, #2
 800f5c2:	d042      	beq.n	800f64a <__ieee754_atan2f+0x122>
 800f5c4:	2c03      	cmp	r4, #3
 800f5c6:	d005      	beq.n	800f5d4 <__ieee754_atan2f+0xac>
 800f5c8:	2c01      	cmp	r4, #1
 800f5ca:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f66c <__ieee754_atan2f+0x144>
 800f5ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f670 <__ieee754_atan2f+0x148>
 800f5d2:	e7ec      	b.n	800f5ae <__ieee754_atan2f+0x86>
 800f5d4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f650 <__ieee754_atan2f+0x128>
 800f5d8:	e7b9      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f5da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f5de:	d0cf      	beq.n	800f580 <__ieee754_atan2f+0x58>
 800f5e0:	1a5b      	subs	r3, r3, r1
 800f5e2:	15db      	asrs	r3, r3, #23
 800f5e4:	2b3c      	cmp	r3, #60	; 0x3c
 800f5e6:	dc1a      	bgt.n	800f61e <__ieee754_atan2f+0xf6>
 800f5e8:	2a00      	cmp	r2, #0
 800f5ea:	da01      	bge.n	800f5f0 <__ieee754_atan2f+0xc8>
 800f5ec:	333c      	adds	r3, #60	; 0x3c
 800f5ee:	db19      	blt.n	800f624 <__ieee754_atan2f+0xfc>
 800f5f0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f5f4:	f000 fd76 	bl	80100e4 <fabsf>
 800f5f8:	f000 fca2 	bl	800ff40 <atanf>
 800f5fc:	eef0 7a40 	vmov.f32	s15, s0
 800f600:	2c01      	cmp	r4, #1
 800f602:	d012      	beq.n	800f62a <__ieee754_atan2f+0x102>
 800f604:	2c02      	cmp	r4, #2
 800f606:	d017      	beq.n	800f638 <__ieee754_atan2f+0x110>
 800f608:	2c00      	cmp	r4, #0
 800f60a:	d0a0      	beq.n	800f54e <__ieee754_atan2f+0x26>
 800f60c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f674 <__ieee754_atan2f+0x14c>
 800f610:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f614:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f678 <__ieee754_atan2f+0x150>
 800f618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f61c:	e797      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f61e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f654 <__ieee754_atan2f+0x12c>
 800f622:	e7ed      	b.n	800f600 <__ieee754_atan2f+0xd8>
 800f624:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f670 <__ieee754_atan2f+0x148>
 800f628:	e7ea      	b.n	800f600 <__ieee754_atan2f+0xd8>
 800f62a:	ee17 3a90 	vmov	r3, s15
 800f62e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f632:	ee07 3a90 	vmov	s15, r3
 800f636:	e78a      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f638:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f674 <__ieee754_atan2f+0x14c>
 800f63c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f640:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f678 <__ieee754_atan2f+0x150>
 800f644:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f648:	e781      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f64a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f678 <__ieee754_atan2f+0x150>
 800f64e:	e77e      	b.n	800f54e <__ieee754_atan2f+0x26>
 800f650:	c0490fdb 	.word	0xc0490fdb
 800f654:	3fc90fdb 	.word	0x3fc90fdb
 800f658:	bfc90fdb 	.word	0xbfc90fdb
 800f65c:	bf490fdb 	.word	0xbf490fdb
 800f660:	3f490fdb 	.word	0x3f490fdb
 800f664:	4016cbe4 	.word	0x4016cbe4
 800f668:	c016cbe4 	.word	0xc016cbe4
 800f66c:	80000000 	.word	0x80000000
 800f670:	00000000 	.word	0x00000000
 800f674:	33bbbd2e 	.word	0x33bbbd2e
 800f678:	40490fdb 	.word	0x40490fdb

0800f67c <__ieee754_rem_pio2f>:
 800f67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67e:	ee10 6a10 	vmov	r6, s0
 800f682:	4b86      	ldr	r3, [pc, #536]	; (800f89c <__ieee754_rem_pio2f+0x220>)
 800f684:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800f688:	429c      	cmp	r4, r3
 800f68a:	b087      	sub	sp, #28
 800f68c:	4605      	mov	r5, r0
 800f68e:	dc05      	bgt.n	800f69c <__ieee754_rem_pio2f+0x20>
 800f690:	2300      	movs	r3, #0
 800f692:	ed85 0a00 	vstr	s0, [r5]
 800f696:	6043      	str	r3, [r0, #4]
 800f698:	2000      	movs	r0, #0
 800f69a:	e020      	b.n	800f6de <__ieee754_rem_pio2f+0x62>
 800f69c:	4b80      	ldr	r3, [pc, #512]	; (800f8a0 <__ieee754_rem_pio2f+0x224>)
 800f69e:	429c      	cmp	r4, r3
 800f6a0:	dc38      	bgt.n	800f714 <__ieee754_rem_pio2f+0x98>
 800f6a2:	2e00      	cmp	r6, #0
 800f6a4:	f024 040f 	bic.w	r4, r4, #15
 800f6a8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800f8a4 <__ieee754_rem_pio2f+0x228>
 800f6ac:	4b7e      	ldr	r3, [pc, #504]	; (800f8a8 <__ieee754_rem_pio2f+0x22c>)
 800f6ae:	dd18      	ble.n	800f6e2 <__ieee754_rem_pio2f+0x66>
 800f6b0:	429c      	cmp	r4, r3
 800f6b2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f6b6:	bf09      	itett	eq
 800f6b8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800f8ac <__ieee754_rem_pio2f+0x230>
 800f6bc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800f8b0 <__ieee754_rem_pio2f+0x234>
 800f6c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f6c4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800f8b4 <__ieee754_rem_pio2f+0x238>
 800f6c8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f6cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6d0:	edc0 6a00 	vstr	s13, [r0]
 800f6d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6d8:	edc0 7a01 	vstr	s15, [r0, #4]
 800f6dc:	2001      	movs	r0, #1
 800f6de:	b007      	add	sp, #28
 800f6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6e2:	429c      	cmp	r4, r3
 800f6e4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f6e8:	bf09      	itett	eq
 800f6ea:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800f8ac <__ieee754_rem_pio2f+0x230>
 800f6ee:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800f8b0 <__ieee754_rem_pio2f+0x234>
 800f6f2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f6f6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800f8b4 <__ieee754_rem_pio2f+0x238>
 800f6fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f6fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f702:	edc0 6a00 	vstr	s13, [r0]
 800f706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f70a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f70e:	f04f 30ff 	mov.w	r0, #4294967295
 800f712:	e7e4      	b.n	800f6de <__ieee754_rem_pio2f+0x62>
 800f714:	4b68      	ldr	r3, [pc, #416]	; (800f8b8 <__ieee754_rem_pio2f+0x23c>)
 800f716:	429c      	cmp	r4, r3
 800f718:	dc71      	bgt.n	800f7fe <__ieee754_rem_pio2f+0x182>
 800f71a:	f000 fce3 	bl	80100e4 <fabsf>
 800f71e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f8bc <__ieee754_rem_pio2f+0x240>
 800f722:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f726:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f72a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f72e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f732:	ee17 0a90 	vmov	r0, s15
 800f736:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f8a4 <__ieee754_rem_pio2f+0x228>
 800f73a:	eeb1 7a46 	vneg.f32	s14, s12
 800f73e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f742:	281f      	cmp	r0, #31
 800f744:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f8b0 <__ieee754_rem_pio2f+0x234>
 800f748:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f74c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f750:	ee16 3a90 	vmov	r3, s13
 800f754:	dc1c      	bgt.n	800f790 <__ieee754_rem_pio2f+0x114>
 800f756:	1e47      	subs	r7, r0, #1
 800f758:	4959      	ldr	r1, [pc, #356]	; (800f8c0 <__ieee754_rem_pio2f+0x244>)
 800f75a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f75e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800f762:	428a      	cmp	r2, r1
 800f764:	d014      	beq.n	800f790 <__ieee754_rem_pio2f+0x114>
 800f766:	602b      	str	r3, [r5, #0]
 800f768:	ed95 7a00 	vldr	s14, [r5]
 800f76c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f770:	2e00      	cmp	r6, #0
 800f772:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f776:	ed85 0a01 	vstr	s0, [r5, #4]
 800f77a:	dab0      	bge.n	800f6de <__ieee754_rem_pio2f+0x62>
 800f77c:	eeb1 7a47 	vneg.f32	s14, s14
 800f780:	eeb1 0a40 	vneg.f32	s0, s0
 800f784:	ed85 7a00 	vstr	s14, [r5]
 800f788:	ed85 0a01 	vstr	s0, [r5, #4]
 800f78c:	4240      	negs	r0, r0
 800f78e:	e7a6      	b.n	800f6de <__ieee754_rem_pio2f+0x62>
 800f790:	15e4      	asrs	r4, r4, #23
 800f792:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f796:	1aa2      	subs	r2, r4, r2
 800f798:	2a08      	cmp	r2, #8
 800f79a:	dde4      	ble.n	800f766 <__ieee754_rem_pio2f+0xea>
 800f79c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f8ac <__ieee754_rem_pio2f+0x230>
 800f7a0:	eef0 6a40 	vmov.f32	s13, s0
 800f7a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f7a8:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f7ac:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f7b0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800f8b4 <__ieee754_rem_pio2f+0x238>
 800f7b4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800f7b8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800f7bc:	eef0 7a40 	vmov.f32	s15, s0
 800f7c0:	ee15 3a90 	vmov	r3, s11
 800f7c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f7c8:	1aa4      	subs	r4, r4, r2
 800f7ca:	2c19      	cmp	r4, #25
 800f7cc:	dc04      	bgt.n	800f7d8 <__ieee754_rem_pio2f+0x15c>
 800f7ce:	edc5 5a00 	vstr	s11, [r5]
 800f7d2:	eeb0 0a66 	vmov.f32	s0, s13
 800f7d6:	e7c7      	b.n	800f768 <__ieee754_rem_pio2f+0xec>
 800f7d8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f8c4 <__ieee754_rem_pio2f+0x248>
 800f7dc:	eeb0 0a66 	vmov.f32	s0, s13
 800f7e0:	eea7 0a25 	vfma.f32	s0, s14, s11
 800f7e4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f7e8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f7ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f8c8 <__ieee754_rem_pio2f+0x24c>
 800f7f0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800f7f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f7f8:	ed85 7a00 	vstr	s14, [r5]
 800f7fc:	e7b4      	b.n	800f768 <__ieee754_rem_pio2f+0xec>
 800f7fe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f802:	db06      	blt.n	800f812 <__ieee754_rem_pio2f+0x196>
 800f804:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f808:	edc0 7a01 	vstr	s15, [r0, #4]
 800f80c:	edc0 7a00 	vstr	s15, [r0]
 800f810:	e742      	b.n	800f698 <__ieee754_rem_pio2f+0x1c>
 800f812:	15e2      	asrs	r2, r4, #23
 800f814:	3a86      	subs	r2, #134	; 0x86
 800f816:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800f81a:	ee07 3a90 	vmov	s15, r3
 800f81e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f822:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800f8cc <__ieee754_rem_pio2f+0x250>
 800f826:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f82a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f82e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f832:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f836:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f83a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f83e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f842:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f846:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f84a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	edcd 7a05 	vstr	s15, [sp, #20]
 800f856:	d11e      	bne.n	800f896 <__ieee754_rem_pio2f+0x21a>
 800f858:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	bf0c      	ite	eq
 800f862:	2301      	moveq	r3, #1
 800f864:	2302      	movne	r3, #2
 800f866:	491a      	ldr	r1, [pc, #104]	; (800f8d0 <__ieee754_rem_pio2f+0x254>)
 800f868:	9101      	str	r1, [sp, #4]
 800f86a:	2102      	movs	r1, #2
 800f86c:	9100      	str	r1, [sp, #0]
 800f86e:	a803      	add	r0, sp, #12
 800f870:	4629      	mov	r1, r5
 800f872:	f000 f891 	bl	800f998 <__kernel_rem_pio2f>
 800f876:	2e00      	cmp	r6, #0
 800f878:	f6bf af31 	bge.w	800f6de <__ieee754_rem_pio2f+0x62>
 800f87c:	edd5 7a00 	vldr	s15, [r5]
 800f880:	eef1 7a67 	vneg.f32	s15, s15
 800f884:	edc5 7a00 	vstr	s15, [r5]
 800f888:	edd5 7a01 	vldr	s15, [r5, #4]
 800f88c:	eef1 7a67 	vneg.f32	s15, s15
 800f890:	edc5 7a01 	vstr	s15, [r5, #4]
 800f894:	e77a      	b.n	800f78c <__ieee754_rem_pio2f+0x110>
 800f896:	2303      	movs	r3, #3
 800f898:	e7e5      	b.n	800f866 <__ieee754_rem_pio2f+0x1ea>
 800f89a:	bf00      	nop
 800f89c:	3f490fd8 	.word	0x3f490fd8
 800f8a0:	4016cbe3 	.word	0x4016cbe3
 800f8a4:	3fc90f80 	.word	0x3fc90f80
 800f8a8:	3fc90fd0 	.word	0x3fc90fd0
 800f8ac:	37354400 	.word	0x37354400
 800f8b0:	37354443 	.word	0x37354443
 800f8b4:	2e85a308 	.word	0x2e85a308
 800f8b8:	43490f80 	.word	0x43490f80
 800f8bc:	3f22f984 	.word	0x3f22f984
 800f8c0:	08014978 	.word	0x08014978
 800f8c4:	2e85a300 	.word	0x2e85a300
 800f8c8:	248d3132 	.word	0x248d3132
 800f8cc:	43800000 	.word	0x43800000
 800f8d0:	080149f8 	.word	0x080149f8

0800f8d4 <__ieee754_sqrtf>:
 800f8d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f8d8:	4770      	bx	lr
	...

0800f8dc <__kernel_cosf>:
 800f8dc:	ee10 3a10 	vmov	r3, s0
 800f8e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f8e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8ec:	da05      	bge.n	800f8fa <__kernel_cosf+0x1e>
 800f8ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f8f2:	ee17 2a90 	vmov	r2, s15
 800f8f6:	2a00      	cmp	r2, #0
 800f8f8:	d03b      	beq.n	800f972 <__kernel_cosf+0x96>
 800f8fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f8fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f978 <__kernel_cosf+0x9c>
 800f906:	4a1d      	ldr	r2, [pc, #116]	; (800f97c <__kernel_cosf+0xa0>)
 800f908:	ee66 7a07 	vmul.f32	s15, s12, s14
 800f90c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f980 <__kernel_cosf+0xa4>
 800f910:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f914:	4293      	cmp	r3, r2
 800f916:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800f984 <__kernel_cosf+0xa8>
 800f91a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f91e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f988 <__kernel_cosf+0xac>
 800f922:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f926:	eddf 5a19 	vldr	s11, [pc, #100]	; 800f98c <__kernel_cosf+0xb0>
 800f92a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f92e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f990 <__kernel_cosf+0xb4>
 800f932:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f936:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800f93a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f93e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f942:	dc04      	bgt.n	800f94e <__kernel_cosf+0x72>
 800f944:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800f948:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800f94c:	4770      	bx	lr
 800f94e:	4a11      	ldr	r2, [pc, #68]	; (800f994 <__kernel_cosf+0xb8>)
 800f950:	4293      	cmp	r3, r2
 800f952:	bfda      	itte	le
 800f954:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f958:	ee07 3a10 	vmovle	s14, r3
 800f95c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800f960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f964:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800f968:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f96c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f970:	4770      	bx	lr
 800f972:	eeb0 0a66 	vmov.f32	s0, s13
 800f976:	4770      	bx	lr
 800f978:	ad47d74e 	.word	0xad47d74e
 800f97c:	3e999999 	.word	0x3e999999
 800f980:	310f74f6 	.word	0x310f74f6
 800f984:	b493f27c 	.word	0xb493f27c
 800f988:	37d00d01 	.word	0x37d00d01
 800f98c:	bab60b61 	.word	0xbab60b61
 800f990:	3d2aaaab 	.word	0x3d2aaaab
 800f994:	3f480000 	.word	0x3f480000

0800f998 <__kernel_rem_pio2f>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	ed2d 8b04 	vpush	{d8-d9}
 800f9a0:	b0d7      	sub	sp, #348	; 0x15c
 800f9a2:	469b      	mov	fp, r3
 800f9a4:	460e      	mov	r6, r1
 800f9a6:	4bbe      	ldr	r3, [pc, #760]	; (800fca0 <__kernel_rem_pio2f+0x308>)
 800f9a8:	9964      	ldr	r1, [sp, #400]	; 0x190
 800f9aa:	9002      	str	r0, [sp, #8]
 800f9ac:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f9b0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800f9b2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800f9b6:	1ed1      	subs	r1, r2, #3
 800f9b8:	2308      	movs	r3, #8
 800f9ba:	fb91 f1f3 	sdiv	r1, r1, r3
 800f9be:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f9c2:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f9c6:	1c4c      	adds	r4, r1, #1
 800f9c8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800f9cc:	eba1 050a 	sub.w	r5, r1, sl
 800f9d0:	aa1a      	add	r2, sp, #104	; 0x68
 800f9d2:	eb09 070a 	add.w	r7, r9, sl
 800f9d6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f9da:	4696      	mov	lr, r2
 800f9dc:	2300      	movs	r3, #0
 800f9de:	42bb      	cmp	r3, r7
 800f9e0:	dd0f      	ble.n	800fa02 <__kernel_rem_pio2f+0x6a>
 800f9e2:	af42      	add	r7, sp, #264	; 0x108
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	454a      	cmp	r2, r9
 800f9e8:	dc27      	bgt.n	800fa3a <__kernel_rem_pio2f+0xa2>
 800f9ea:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f9ee:	eb0b 0302 	add.w	r3, fp, r2
 800f9f2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f9f6:	9d02      	ldr	r5, [sp, #8]
 800f9f8:	eddf 7aad 	vldr	s15, [pc, #692]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800f9fc:	f04f 0c00 	mov.w	ip, #0
 800fa00:	e015      	b.n	800fa2e <__kernel_rem_pio2f+0x96>
 800fa02:	42dd      	cmn	r5, r3
 800fa04:	bf5d      	ittte	pl
 800fa06:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800fa0a:	ee07 2a90 	vmovpl	s15, r2
 800fa0e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fa12:	eef0 7a47 	vmovmi.f32	s15, s14
 800fa16:	ecee 7a01 	vstmia	lr!, {s15}
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	e7df      	b.n	800f9de <__kernel_rem_pio2f+0x46>
 800fa1e:	ecf5 6a01 	vldmia	r5!, {s13}
 800fa22:	ed33 7a01 	vldmdb	r3!, {s14}
 800fa26:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa2a:	f10c 0c01 	add.w	ip, ip, #1
 800fa2e:	45d4      	cmp	ip, sl
 800fa30:	ddf5      	ble.n	800fa1e <__kernel_rem_pio2f+0x86>
 800fa32:	ece7 7a01 	vstmia	r7!, {s15}
 800fa36:	3201      	adds	r2, #1
 800fa38:	e7d5      	b.n	800f9e6 <__kernel_rem_pio2f+0x4e>
 800fa3a:	ab06      	add	r3, sp, #24
 800fa3c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800fa40:	9304      	str	r3, [sp, #16]
 800fa42:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800fcac <__kernel_rem_pio2f+0x314>
 800fa46:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800fca8 <__kernel_rem_pio2f+0x310>
 800fa4a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800fa4e:	9303      	str	r3, [sp, #12]
 800fa50:	464d      	mov	r5, r9
 800fa52:	ab56      	add	r3, sp, #344	; 0x158
 800fa54:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800fa58:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800fa5c:	3f01      	subs	r7, #1
 800fa5e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800fa62:	00bf      	lsls	r7, r7, #2
 800fa64:	ab56      	add	r3, sp, #344	; 0x158
 800fa66:	19da      	adds	r2, r3, r7
 800fa68:	3a4c      	subs	r2, #76	; 0x4c
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	1ae9      	subs	r1, r5, r3
 800fa6e:	2900      	cmp	r1, #0
 800fa70:	dc4c      	bgt.n	800fb0c <__kernel_rem_pio2f+0x174>
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 fb80 	bl	8010178 <scalbnf>
 800fa78:	eeb0 8a40 	vmov.f32	s16, s0
 800fa7c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fa80:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fa84:	f000 fb36 	bl	80100f4 <floorf>
 800fa88:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fa8c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fa90:	2c00      	cmp	r4, #0
 800fa92:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fa96:	edcd 7a01 	vstr	s15, [sp, #4]
 800fa9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa9e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800faa2:	dd48      	ble.n	800fb36 <__kernel_rem_pio2f+0x19e>
 800faa4:	1e69      	subs	r1, r5, #1
 800faa6:	ab06      	add	r3, sp, #24
 800faa8:	f1c4 0008 	rsb	r0, r4, #8
 800faac:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800fab0:	9a01      	ldr	r2, [sp, #4]
 800fab2:	fa4c f300 	asr.w	r3, ip, r0
 800fab6:	441a      	add	r2, r3
 800fab8:	4083      	lsls	r3, r0
 800faba:	9201      	str	r2, [sp, #4]
 800fabc:	ebac 0203 	sub.w	r2, ip, r3
 800fac0:	ab06      	add	r3, sp, #24
 800fac2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fac6:	f1c4 0307 	rsb	r3, r4, #7
 800faca:	fa42 f803 	asr.w	r8, r2, r3
 800face:	f1b8 0f00 	cmp.w	r8, #0
 800fad2:	dd41      	ble.n	800fb58 <__kernel_rem_pio2f+0x1c0>
 800fad4:	9b01      	ldr	r3, [sp, #4]
 800fad6:	2000      	movs	r0, #0
 800fad8:	3301      	adds	r3, #1
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	4601      	mov	r1, r0
 800fade:	4285      	cmp	r5, r0
 800fae0:	dc6d      	bgt.n	800fbbe <__kernel_rem_pio2f+0x226>
 800fae2:	2c00      	cmp	r4, #0
 800fae4:	dd04      	ble.n	800faf0 <__kernel_rem_pio2f+0x158>
 800fae6:	2c01      	cmp	r4, #1
 800fae8:	d07e      	beq.n	800fbe8 <__kernel_rem_pio2f+0x250>
 800faea:	2c02      	cmp	r4, #2
 800faec:	f000 8086 	beq.w	800fbfc <__kernel_rem_pio2f+0x264>
 800faf0:	f1b8 0f02 	cmp.w	r8, #2
 800faf4:	d130      	bne.n	800fb58 <__kernel_rem_pio2f+0x1c0>
 800faf6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fafa:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fafe:	b359      	cbz	r1, 800fb58 <__kernel_rem_pio2f+0x1c0>
 800fb00:	4620      	mov	r0, r4
 800fb02:	f000 fb39 	bl	8010178 <scalbnf>
 800fb06:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fb0a:	e025      	b.n	800fb58 <__kernel_rem_pio2f+0x1c0>
 800fb0c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fb10:	a806      	add	r0, sp, #24
 800fb12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fb1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb22:	ee10 1a10 	vmov	r1, s0
 800fb26:	ed32 0a01 	vldmdb	r2!, {s0}
 800fb2a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800fb2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fb32:	3301      	adds	r3, #1
 800fb34:	e79a      	b.n	800fa6c <__kernel_rem_pio2f+0xd4>
 800fb36:	d106      	bne.n	800fb46 <__kernel_rem_pio2f+0x1ae>
 800fb38:	1e6b      	subs	r3, r5, #1
 800fb3a:	aa06      	add	r2, sp, #24
 800fb3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb40:	ea4f 2822 	mov.w	r8, r2, asr #8
 800fb44:	e7c3      	b.n	800face <__kernel_rem_pio2f+0x136>
 800fb46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fb4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb52:	da31      	bge.n	800fbb8 <__kernel_rem_pio2f+0x220>
 800fb54:	f04f 0800 	mov.w	r8, #0
 800fb58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb60:	f040 80a8 	bne.w	800fcb4 <__kernel_rem_pio2f+0x31c>
 800fb64:	1e6b      	subs	r3, r5, #1
 800fb66:	4618      	mov	r0, r3
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4548      	cmp	r0, r9
 800fb6c:	da4d      	bge.n	800fc0a <__kernel_rem_pio2f+0x272>
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	f000 8087 	beq.w	800fc82 <__kernel_rem_pio2f+0x2ea>
 800fb74:	aa06      	add	r2, sp, #24
 800fb76:	3c08      	subs	r4, #8
 800fb78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	f000 808d 	beq.w	800fc9c <__kernel_rem_pio2f+0x304>
 800fb82:	4620      	mov	r0, r4
 800fb84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb88:	9302      	str	r3, [sp, #8]
 800fb8a:	f000 faf5 	bl	8010178 <scalbnf>
 800fb8e:	9b02      	ldr	r3, [sp, #8]
 800fb90:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800fcac <__kernel_rem_pio2f+0x314>
 800fb94:	0099      	lsls	r1, r3, #2
 800fb96:	aa42      	add	r2, sp, #264	; 0x108
 800fb98:	1850      	adds	r0, r2, r1
 800fb9a:	1d05      	adds	r5, r0, #4
 800fb9c:	461c      	mov	r4, r3
 800fb9e:	2c00      	cmp	r4, #0
 800fba0:	f280 80b8 	bge.w	800fd14 <__kernel_rem_pio2f+0x37c>
 800fba4:	2500      	movs	r5, #0
 800fba6:	1b5c      	subs	r4, r3, r5
 800fba8:	2c00      	cmp	r4, #0
 800fbaa:	f2c0 80d8 	blt.w	800fd5e <__kernel_rem_pio2f+0x3c6>
 800fbae:	4f3d      	ldr	r7, [pc, #244]	; (800fca4 <__kernel_rem_pio2f+0x30c>)
 800fbb0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800fbb4:	2400      	movs	r4, #0
 800fbb6:	e0c6      	b.n	800fd46 <__kernel_rem_pio2f+0x3ae>
 800fbb8:	f04f 0802 	mov.w	r8, #2
 800fbbc:	e78a      	b.n	800fad4 <__kernel_rem_pio2f+0x13c>
 800fbbe:	ab06      	add	r3, sp, #24
 800fbc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fbc4:	b949      	cbnz	r1, 800fbda <__kernel_rem_pio2f+0x242>
 800fbc6:	b12b      	cbz	r3, 800fbd4 <__kernel_rem_pio2f+0x23c>
 800fbc8:	aa06      	add	r2, sp, #24
 800fbca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800fbce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	e781      	b.n	800fade <__kernel_rem_pio2f+0x146>
 800fbda:	aa06      	add	r2, sp, #24
 800fbdc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800fbe0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	e7f5      	b.n	800fbd4 <__kernel_rem_pio2f+0x23c>
 800fbe8:	1e68      	subs	r0, r5, #1
 800fbea:	ab06      	add	r3, sp, #24
 800fbec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fbf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbf4:	aa06      	add	r2, sp, #24
 800fbf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fbfa:	e779      	b.n	800faf0 <__kernel_rem_pio2f+0x158>
 800fbfc:	1e68      	subs	r0, r5, #1
 800fbfe:	ab06      	add	r3, sp, #24
 800fc00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fc04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc08:	e7f4      	b.n	800fbf4 <__kernel_rem_pio2f+0x25c>
 800fc0a:	a906      	add	r1, sp, #24
 800fc0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fc10:	3801      	subs	r0, #1
 800fc12:	430a      	orrs	r2, r1
 800fc14:	e7a9      	b.n	800fb6a <__kernel_rem_pio2f+0x1d2>
 800fc16:	f10c 0c01 	add.w	ip, ip, #1
 800fc1a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc1e:	2a00      	cmp	r2, #0
 800fc20:	d0f9      	beq.n	800fc16 <__kernel_rem_pio2f+0x27e>
 800fc22:	eb0b 0305 	add.w	r3, fp, r5
 800fc26:	aa1a      	add	r2, sp, #104	; 0x68
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	1898      	adds	r0, r3, r2
 800fc2c:	3004      	adds	r0, #4
 800fc2e:	1c69      	adds	r1, r5, #1
 800fc30:	3704      	adds	r7, #4
 800fc32:	2200      	movs	r2, #0
 800fc34:	4465      	add	r5, ip
 800fc36:	9005      	str	r0, [sp, #20]
 800fc38:	428d      	cmp	r5, r1
 800fc3a:	f6ff af0a 	blt.w	800fa52 <__kernel_rem_pio2f+0xba>
 800fc3e:	a81a      	add	r0, sp, #104	; 0x68
 800fc40:	eb02 0c03 	add.w	ip, r2, r3
 800fc44:	4484      	add	ip, r0
 800fc46:	9803      	ldr	r0, [sp, #12]
 800fc48:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fc4c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800fc50:	9001      	str	r0, [sp, #4]
 800fc52:	ee07 0a90 	vmov	s15, r0
 800fc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc5a:	9805      	ldr	r0, [sp, #20]
 800fc5c:	edcc 7a00 	vstr	s15, [ip]
 800fc60:	eddf 7a13 	vldr	s15, [pc, #76]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800fc64:	eb00 0802 	add.w	r8, r0, r2
 800fc68:	f04f 0c00 	mov.w	ip, #0
 800fc6c:	45d4      	cmp	ip, sl
 800fc6e:	dd0c      	ble.n	800fc8a <__kernel_rem_pio2f+0x2f2>
 800fc70:	eb02 0c07 	add.w	ip, r2, r7
 800fc74:	a842      	add	r0, sp, #264	; 0x108
 800fc76:	4484      	add	ip, r0
 800fc78:	edcc 7a01 	vstr	s15, [ip, #4]
 800fc7c:	3101      	adds	r1, #1
 800fc7e:	3204      	adds	r2, #4
 800fc80:	e7da      	b.n	800fc38 <__kernel_rem_pio2f+0x2a0>
 800fc82:	9b04      	ldr	r3, [sp, #16]
 800fc84:	f04f 0c01 	mov.w	ip, #1
 800fc88:	e7c7      	b.n	800fc1a <__kernel_rem_pio2f+0x282>
 800fc8a:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc8e:	ed38 7a01 	vldmdb	r8!, {s14}
 800fc92:	f10c 0c01 	add.w	ip, ip, #1
 800fc96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc9a:	e7e7      	b.n	800fc6c <__kernel_rem_pio2f+0x2d4>
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	e769      	b.n	800fb74 <__kernel_rem_pio2f+0x1dc>
 800fca0:	08014d3c 	.word	0x08014d3c
 800fca4:	08014d10 	.word	0x08014d10
 800fca8:	43800000 	.word	0x43800000
 800fcac:	3b800000 	.word	0x3b800000
 800fcb0:	00000000 	.word	0x00000000
 800fcb4:	4260      	negs	r0, r4
 800fcb6:	eeb0 0a48 	vmov.f32	s0, s16
 800fcba:	f000 fa5d 	bl	8010178 <scalbnf>
 800fcbe:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800fca8 <__kernel_rem_pio2f+0x310>
 800fcc2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcca:	db1a      	blt.n	800fd02 <__kernel_rem_pio2f+0x36a>
 800fccc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fcac <__kernel_rem_pio2f+0x314>
 800fcd0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fcd4:	aa06      	add	r2, sp, #24
 800fcd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcda:	a906      	add	r1, sp, #24
 800fcdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fce0:	3408      	adds	r4, #8
 800fce2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fcee:	ee10 3a10 	vmov	r3, s0
 800fcf2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fcf6:	1c6b      	adds	r3, r5, #1
 800fcf8:	ee17 2a90 	vmov	r2, s15
 800fcfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fd00:	e73f      	b.n	800fb82 <__kernel_rem_pio2f+0x1ea>
 800fd02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd06:	aa06      	add	r2, sp, #24
 800fd08:	ee10 3a10 	vmov	r3, s0
 800fd0c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fd10:	462b      	mov	r3, r5
 800fd12:	e736      	b.n	800fb82 <__kernel_rem_pio2f+0x1ea>
 800fd14:	aa06      	add	r2, sp, #24
 800fd16:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800fd1a:	9202      	str	r2, [sp, #8]
 800fd1c:	ee07 2a90 	vmov	s15, r2
 800fd20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd24:	3c01      	subs	r4, #1
 800fd26:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fd2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fd2e:	ed65 7a01 	vstmdb	r5!, {s15}
 800fd32:	e734      	b.n	800fb9e <__kernel_rem_pio2f+0x206>
 800fd34:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800fd38:	ecf7 6a01 	vldmia	r7!, {s13}
 800fd3c:	ed9c 7a00 	vldr	s14, [ip]
 800fd40:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd44:	3401      	adds	r4, #1
 800fd46:	454c      	cmp	r4, r9
 800fd48:	dc01      	bgt.n	800fd4e <__kernel_rem_pio2f+0x3b6>
 800fd4a:	42a5      	cmp	r5, r4
 800fd4c:	daf2      	bge.n	800fd34 <__kernel_rem_pio2f+0x39c>
 800fd4e:	aa56      	add	r2, sp, #344	; 0x158
 800fd50:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800fd54:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800fd58:	3501      	adds	r5, #1
 800fd5a:	3804      	subs	r0, #4
 800fd5c:	e723      	b.n	800fba6 <__kernel_rem_pio2f+0x20e>
 800fd5e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800fd60:	2a03      	cmp	r2, #3
 800fd62:	d84d      	bhi.n	800fe00 <__kernel_rem_pio2f+0x468>
 800fd64:	e8df f002 	tbb	[pc, r2]
 800fd68:	021f1f3e 	.word	0x021f1f3e
 800fd6c:	aa56      	add	r2, sp, #344	; 0x158
 800fd6e:	4411      	add	r1, r2
 800fd70:	399c      	subs	r1, #156	; 0x9c
 800fd72:	4608      	mov	r0, r1
 800fd74:	461c      	mov	r4, r3
 800fd76:	2c00      	cmp	r4, #0
 800fd78:	dc5f      	bgt.n	800fe3a <__kernel_rem_pio2f+0x4a2>
 800fd7a:	4608      	mov	r0, r1
 800fd7c:	461c      	mov	r4, r3
 800fd7e:	2c01      	cmp	r4, #1
 800fd80:	dc6b      	bgt.n	800fe5a <__kernel_rem_pio2f+0x4c2>
 800fd82:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	dc77      	bgt.n	800fe7a <__kernel_rem_pio2f+0x4e2>
 800fd8a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800fd8e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800fd92:	f1b8 0f00 	cmp.w	r8, #0
 800fd96:	d176      	bne.n	800fe86 <__kernel_rem_pio2f+0x4ee>
 800fd98:	edc6 6a00 	vstr	s13, [r6]
 800fd9c:	ed86 7a01 	vstr	s14, [r6, #4]
 800fda0:	edc6 7a02 	vstr	s15, [r6, #8]
 800fda4:	e02c      	b.n	800fe00 <__kernel_rem_pio2f+0x468>
 800fda6:	aa56      	add	r2, sp, #344	; 0x158
 800fda8:	4411      	add	r1, r2
 800fdaa:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800fdae:	399c      	subs	r1, #156	; 0x9c
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	da32      	bge.n	800fe1c <__kernel_rem_pio2f+0x484>
 800fdb6:	f1b8 0f00 	cmp.w	r8, #0
 800fdba:	d035      	beq.n	800fe28 <__kernel_rem_pio2f+0x490>
 800fdbc:	eef1 7a47 	vneg.f32	s15, s14
 800fdc0:	edc6 7a00 	vstr	s15, [r6]
 800fdc4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800fdc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdcc:	a82f      	add	r0, sp, #188	; 0xbc
 800fdce:	2101      	movs	r1, #1
 800fdd0:	428b      	cmp	r3, r1
 800fdd2:	da2c      	bge.n	800fe2e <__kernel_rem_pio2f+0x496>
 800fdd4:	f1b8 0f00 	cmp.w	r8, #0
 800fdd8:	d001      	beq.n	800fdde <__kernel_rem_pio2f+0x446>
 800fdda:	eef1 7a67 	vneg.f32	s15, s15
 800fdde:	edc6 7a01 	vstr	s15, [r6, #4]
 800fde2:	e00d      	b.n	800fe00 <__kernel_rem_pio2f+0x468>
 800fde4:	aa56      	add	r2, sp, #344	; 0x158
 800fde6:	4411      	add	r1, r2
 800fde8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800fcb0 <__kernel_rem_pio2f+0x318>
 800fdec:	399c      	subs	r1, #156	; 0x9c
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	da0e      	bge.n	800fe10 <__kernel_rem_pio2f+0x478>
 800fdf2:	f1b8 0f00 	cmp.w	r8, #0
 800fdf6:	d001      	beq.n	800fdfc <__kernel_rem_pio2f+0x464>
 800fdf8:	eef1 7a67 	vneg.f32	s15, s15
 800fdfc:	edc6 7a00 	vstr	s15, [r6]
 800fe00:	9b01      	ldr	r3, [sp, #4]
 800fe02:	f003 0007 	and.w	r0, r3, #7
 800fe06:	b057      	add	sp, #348	; 0x15c
 800fe08:	ecbd 8b04 	vpop	{d8-d9}
 800fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe10:	ed31 7a01 	vldmdb	r1!, {s14}
 800fe14:	3b01      	subs	r3, #1
 800fe16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe1a:	e7e8      	b.n	800fdee <__kernel_rem_pio2f+0x456>
 800fe1c:	ed71 7a01 	vldmdb	r1!, {s15}
 800fe20:	3801      	subs	r0, #1
 800fe22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe26:	e7c4      	b.n	800fdb2 <__kernel_rem_pio2f+0x41a>
 800fe28:	eef0 7a47 	vmov.f32	s15, s14
 800fe2c:	e7c8      	b.n	800fdc0 <__kernel_rem_pio2f+0x428>
 800fe2e:	ecb0 7a01 	vldmia	r0!, {s14}
 800fe32:	3101      	adds	r1, #1
 800fe34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe38:	e7ca      	b.n	800fdd0 <__kernel_rem_pio2f+0x438>
 800fe3a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800fe3e:	ed70 6a01 	vldmdb	r0!, {s13}
 800fe42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fe46:	3c01      	subs	r4, #1
 800fe48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe4c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800fe50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe54:	edc0 7a00 	vstr	s15, [r0]
 800fe58:	e78d      	b.n	800fd76 <__kernel_rem_pio2f+0x3de>
 800fe5a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800fe5e:	ed70 6a01 	vldmdb	r0!, {s13}
 800fe62:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fe66:	3c01      	subs	r4, #1
 800fe68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe6c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800fe70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe74:	edc0 7a00 	vstr	s15, [r0]
 800fe78:	e781      	b.n	800fd7e <__kernel_rem_pio2f+0x3e6>
 800fe7a:	ed31 7a01 	vldmdb	r1!, {s14}
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe84:	e77f      	b.n	800fd86 <__kernel_rem_pio2f+0x3ee>
 800fe86:	eef1 6a66 	vneg.f32	s13, s13
 800fe8a:	eeb1 7a47 	vneg.f32	s14, s14
 800fe8e:	edc6 6a00 	vstr	s13, [r6]
 800fe92:	ed86 7a01 	vstr	s14, [r6, #4]
 800fe96:	eef1 7a67 	vneg.f32	s15, s15
 800fe9a:	e781      	b.n	800fda0 <__kernel_rem_pio2f+0x408>

0800fe9c <__kernel_sinf>:
 800fe9c:	ee10 3a10 	vmov	r3, s0
 800fea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fea4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fea8:	da04      	bge.n	800feb4 <__kernel_sinf+0x18>
 800feaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800feae:	ee17 3a90 	vmov	r3, s15
 800feb2:	b35b      	cbz	r3, 800ff0c <__kernel_sinf+0x70>
 800feb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800feb8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ff10 <__kernel_sinf+0x74>
 800febc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ff14 <__kernel_sinf+0x78>
 800fec0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fec4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ff18 <__kernel_sinf+0x7c>
 800fec8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fecc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ff1c <__kernel_sinf+0x80>
 800fed0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fed4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ff20 <__kernel_sinf+0x84>
 800fed8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fedc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fee0:	b930      	cbnz	r0, 800fef0 <__kernel_sinf+0x54>
 800fee2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ff24 <__kernel_sinf+0x88>
 800fee6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800feea:	eea6 0a26 	vfma.f32	s0, s12, s13
 800feee:	4770      	bx	lr
 800fef0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fef4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fef8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fefc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ff00:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ff28 <__kernel_sinf+0x8c>
 800ff04:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ff08:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	2f2ec9d3 	.word	0x2f2ec9d3
 800ff14:	b2d72f34 	.word	0xb2d72f34
 800ff18:	3638ef1b 	.word	0x3638ef1b
 800ff1c:	b9500d01 	.word	0xb9500d01
 800ff20:	3c088889 	.word	0x3c088889
 800ff24:	be2aaaab 	.word	0xbe2aaaab
 800ff28:	3e2aaaab 	.word	0x3e2aaaab

0800ff2c <matherr>:
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	4770      	bx	lr

0800ff30 <nan>:
 800ff30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff38 <nan+0x8>
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	00000000 	.word	0x00000000
 800ff3c:	7ff80000 	.word	0x7ff80000

0800ff40 <atanf>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	ee10 5a10 	vmov	r5, s0
 800ff46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ff4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ff4e:	eef0 7a40 	vmov.f32	s15, s0
 800ff52:	db0f      	blt.n	800ff74 <atanf+0x34>
 800ff54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ff58:	dd04      	ble.n	800ff64 <atanf+0x24>
 800ff5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ff5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ff62:	bd38      	pop	{r3, r4, r5, pc}
 800ff64:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8010098 <atanf+0x158>
 800ff68:	eddf 7a4c 	vldr	s15, [pc, #304]	; 801009c <atanf+0x15c>
 800ff6c:	2d00      	cmp	r5, #0
 800ff6e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800ff72:	e7f4      	b.n	800ff5e <atanf+0x1e>
 800ff74:	4b4a      	ldr	r3, [pc, #296]	; (80100a0 <atanf+0x160>)
 800ff76:	429c      	cmp	r4, r3
 800ff78:	dc10      	bgt.n	800ff9c <atanf+0x5c>
 800ff7a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ff7e:	da0a      	bge.n	800ff96 <atanf+0x56>
 800ff80:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80100a4 <atanf+0x164>
 800ff84:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ff88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff8c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ff90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff94:	dce3      	bgt.n	800ff5e <atanf+0x1e>
 800ff96:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9a:	e013      	b.n	800ffc4 <atanf+0x84>
 800ff9c:	f000 f8a2 	bl	80100e4 <fabsf>
 800ffa0:	4b41      	ldr	r3, [pc, #260]	; (80100a8 <atanf+0x168>)
 800ffa2:	429c      	cmp	r4, r3
 800ffa4:	dc4f      	bgt.n	8010046 <atanf+0x106>
 800ffa6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	dc41      	bgt.n	8010032 <atanf+0xf2>
 800ffae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ffb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ffb6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ffba:	2300      	movs	r3, #0
 800ffbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ffc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ffca:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80100ac <atanf+0x16c>
 800ffce:	eddf 5a38 	vldr	s11, [pc, #224]	; 80100b0 <atanf+0x170>
 800ffd2:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80100b4 <atanf+0x174>
 800ffd6:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ffda:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ffde:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80100b8 <atanf+0x178>
 800ffe2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ffe6:	eddf 5a35 	vldr	s11, [pc, #212]	; 80100bc <atanf+0x17c>
 800ffea:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ffee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80100c0 <atanf+0x180>
 800fff2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fff6:	eddf 5a33 	vldr	s11, [pc, #204]	; 80100c4 <atanf+0x184>
 800fffa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fffe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80100c8 <atanf+0x188>
 8010002:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010006:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80100cc <atanf+0x18c>
 801000a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801000e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80100d0 <atanf+0x190>
 8010012:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010016:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80100d4 <atanf+0x194>
 801001a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801001e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010022:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010026:	ee27 7a27 	vmul.f32	s14, s14, s15
 801002a:	d121      	bne.n	8010070 <atanf+0x130>
 801002c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010030:	e795      	b.n	800ff5e <atanf+0x1e>
 8010032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010036:	ee30 7a67 	vsub.f32	s14, s0, s15
 801003a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801003e:	2301      	movs	r3, #1
 8010040:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010044:	e7be      	b.n	800ffc4 <atanf+0x84>
 8010046:	4b24      	ldr	r3, [pc, #144]	; (80100d8 <atanf+0x198>)
 8010048:	429c      	cmp	r4, r3
 801004a:	dc0b      	bgt.n	8010064 <atanf+0x124>
 801004c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010054:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010058:	2302      	movs	r3, #2
 801005a:	ee70 6a67 	vsub.f32	s13, s0, s15
 801005e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010062:	e7af      	b.n	800ffc4 <atanf+0x84>
 8010064:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010068:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801006c:	2303      	movs	r3, #3
 801006e:	e7a9      	b.n	800ffc4 <atanf+0x84>
 8010070:	4a1a      	ldr	r2, [pc, #104]	; (80100dc <atanf+0x19c>)
 8010072:	491b      	ldr	r1, [pc, #108]	; (80100e0 <atanf+0x1a0>)
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	441a      	add	r2, r3
 8010078:	440b      	add	r3, r1
 801007a:	edd3 6a00 	vldr	s13, [r3]
 801007e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010082:	2d00      	cmp	r5, #0
 8010084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010088:	ed92 7a00 	vldr	s14, [r2]
 801008c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010090:	bfb8      	it	lt
 8010092:	eef1 7a67 	vneglt.f32	s15, s15
 8010096:	e762      	b.n	800ff5e <atanf+0x1e>
 8010098:	bfc90fdb 	.word	0xbfc90fdb
 801009c:	3fc90fdb 	.word	0x3fc90fdb
 80100a0:	3edfffff 	.word	0x3edfffff
 80100a4:	7149f2ca 	.word	0x7149f2ca
 80100a8:	3f97ffff 	.word	0x3f97ffff
 80100ac:	3c8569d7 	.word	0x3c8569d7
 80100b0:	3d4bda59 	.word	0x3d4bda59
 80100b4:	bd6ef16b 	.word	0xbd6ef16b
 80100b8:	3d886b35 	.word	0x3d886b35
 80100bc:	3dba2e6e 	.word	0x3dba2e6e
 80100c0:	3e124925 	.word	0x3e124925
 80100c4:	3eaaaaab 	.word	0x3eaaaaab
 80100c8:	bd15a221 	.word	0xbd15a221
 80100cc:	bd9d8795 	.word	0xbd9d8795
 80100d0:	bde38e38 	.word	0xbde38e38
 80100d4:	be4ccccd 	.word	0xbe4ccccd
 80100d8:	401bffff 	.word	0x401bffff
 80100dc:	08014d48 	.word	0x08014d48
 80100e0:	08014d58 	.word	0x08014d58

080100e4 <fabsf>:
 80100e4:	ee10 3a10 	vmov	r3, s0
 80100e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80100ec:	ee00 3a10 	vmov	s0, r3
 80100f0:	4770      	bx	lr
	...

080100f4 <floorf>:
 80100f4:	ee10 3a10 	vmov	r3, s0
 80100f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80100fc:	0dca      	lsrs	r2, r1, #23
 80100fe:	3a7f      	subs	r2, #127	; 0x7f
 8010100:	2a16      	cmp	r2, #22
 8010102:	dc2a      	bgt.n	801015a <floorf+0x66>
 8010104:	2a00      	cmp	r2, #0
 8010106:	da11      	bge.n	801012c <floorf+0x38>
 8010108:	eddf 7a18 	vldr	s15, [pc, #96]	; 801016c <floorf+0x78>
 801010c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010110:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010118:	dd05      	ble.n	8010126 <floorf+0x32>
 801011a:	2b00      	cmp	r3, #0
 801011c:	da23      	bge.n	8010166 <floorf+0x72>
 801011e:	4a14      	ldr	r2, [pc, #80]	; (8010170 <floorf+0x7c>)
 8010120:	2900      	cmp	r1, #0
 8010122:	bf18      	it	ne
 8010124:	4613      	movne	r3, r2
 8010126:	ee00 3a10 	vmov	s0, r3
 801012a:	4770      	bx	lr
 801012c:	4911      	ldr	r1, [pc, #68]	; (8010174 <floorf+0x80>)
 801012e:	4111      	asrs	r1, r2
 8010130:	420b      	tst	r3, r1
 8010132:	d0fa      	beq.n	801012a <floorf+0x36>
 8010134:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801016c <floorf+0x78>
 8010138:	ee30 0a27 	vadd.f32	s0, s0, s15
 801013c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010144:	ddef      	ble.n	8010126 <floorf+0x32>
 8010146:	2b00      	cmp	r3, #0
 8010148:	bfbe      	ittt	lt
 801014a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801014e:	fa40 f202 	asrlt.w	r2, r0, r2
 8010152:	189b      	addlt	r3, r3, r2
 8010154:	ea23 0301 	bic.w	r3, r3, r1
 8010158:	e7e5      	b.n	8010126 <floorf+0x32>
 801015a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801015e:	d3e4      	bcc.n	801012a <floorf+0x36>
 8010160:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010164:	4770      	bx	lr
 8010166:	2300      	movs	r3, #0
 8010168:	e7dd      	b.n	8010126 <floorf+0x32>
 801016a:	bf00      	nop
 801016c:	7149f2ca 	.word	0x7149f2ca
 8010170:	bf800000 	.word	0xbf800000
 8010174:	007fffff 	.word	0x007fffff

08010178 <scalbnf>:
 8010178:	b508      	push	{r3, lr}
 801017a:	ee10 2a10 	vmov	r2, s0
 801017e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8010182:	ed2d 8b02 	vpush	{d8}
 8010186:	eef0 0a40 	vmov.f32	s1, s0
 801018a:	d004      	beq.n	8010196 <scalbnf+0x1e>
 801018c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010190:	d306      	bcc.n	80101a0 <scalbnf+0x28>
 8010192:	ee70 0a00 	vadd.f32	s1, s0, s0
 8010196:	ecbd 8b02 	vpop	{d8}
 801019a:	eeb0 0a60 	vmov.f32	s0, s1
 801019e:	bd08      	pop	{r3, pc}
 80101a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80101a4:	d21c      	bcs.n	80101e0 <scalbnf+0x68>
 80101a6:	4b1f      	ldr	r3, [pc, #124]	; (8010224 <scalbnf+0xac>)
 80101a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010228 <scalbnf+0xb0>
 80101ac:	4298      	cmp	r0, r3
 80101ae:	ee60 0a27 	vmul.f32	s1, s0, s15
 80101b2:	db10      	blt.n	80101d6 <scalbnf+0x5e>
 80101b4:	ee10 2a90 	vmov	r2, s1
 80101b8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80101bc:	3b19      	subs	r3, #25
 80101be:	4403      	add	r3, r0
 80101c0:	2bfe      	cmp	r3, #254	; 0xfe
 80101c2:	dd0f      	ble.n	80101e4 <scalbnf+0x6c>
 80101c4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801022c <scalbnf+0xb4>
 80101c8:	eeb0 0a48 	vmov.f32	s0, s16
 80101cc:	f000 f834 	bl	8010238 <copysignf>
 80101d0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80101d4:	e7df      	b.n	8010196 <scalbnf+0x1e>
 80101d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8010230 <scalbnf+0xb8>
 80101da:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80101de:	e7da      	b.n	8010196 <scalbnf+0x1e>
 80101e0:	0ddb      	lsrs	r3, r3, #23
 80101e2:	e7ec      	b.n	80101be <scalbnf+0x46>
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	dd06      	ble.n	80101f6 <scalbnf+0x7e>
 80101e8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80101ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80101f0:	ee00 3a90 	vmov	s1, r3
 80101f4:	e7cf      	b.n	8010196 <scalbnf+0x1e>
 80101f6:	f113 0f16 	cmn.w	r3, #22
 80101fa:	da06      	bge.n	801020a <scalbnf+0x92>
 80101fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010200:	4298      	cmp	r0, r3
 8010202:	dcdf      	bgt.n	80101c4 <scalbnf+0x4c>
 8010204:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8010230 <scalbnf+0xb8>
 8010208:	e7de      	b.n	80101c8 <scalbnf+0x50>
 801020a:	3319      	adds	r3, #25
 801020c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8010210:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010214:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010234 <scalbnf+0xbc>
 8010218:	ee07 3a10 	vmov	s14, r3
 801021c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8010220:	e7b9      	b.n	8010196 <scalbnf+0x1e>
 8010222:	bf00      	nop
 8010224:	ffff3cb0 	.word	0xffff3cb0
 8010228:	4c000000 	.word	0x4c000000
 801022c:	7149f2ca 	.word	0x7149f2ca
 8010230:	0da24260 	.word	0x0da24260
 8010234:	33000000 	.word	0x33000000

08010238 <copysignf>:
 8010238:	ee10 3a10 	vmov	r3, s0
 801023c:	ee10 2a90 	vmov	r2, s1
 8010240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010244:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010248:	4313      	orrs	r3, r2
 801024a:	ee00 3a10 	vmov	s0, r3
 801024e:	4770      	bx	lr

08010250 <abort>:
 8010250:	b508      	push	{r3, lr}
 8010252:	2006      	movs	r0, #6
 8010254:	f000 ffd6 	bl	8011204 <raise>
 8010258:	2001      	movs	r0, #1
 801025a:	f004 fa3f 	bl	80146dc <_exit>
	...

08010260 <calloc>:
 8010260:	4b02      	ldr	r3, [pc, #8]	; (801026c <calloc+0xc>)
 8010262:	460a      	mov	r2, r1
 8010264:	4601      	mov	r1, r0
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	f000 b847 	b.w	80102fa <_calloc_r>
 801026c:	20000378 	.word	0x20000378

08010270 <__errno>:
 8010270:	4b01      	ldr	r3, [pc, #4]	; (8010278 <__errno+0x8>)
 8010272:	6818      	ldr	r0, [r3, #0]
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	20000378 	.word	0x20000378

0801027c <__libc_init_array>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	4e0d      	ldr	r6, [pc, #52]	; (80102b4 <__libc_init_array+0x38>)
 8010280:	4c0d      	ldr	r4, [pc, #52]	; (80102b8 <__libc_init_array+0x3c>)
 8010282:	1ba4      	subs	r4, r4, r6
 8010284:	10a4      	asrs	r4, r4, #2
 8010286:	2500      	movs	r5, #0
 8010288:	42a5      	cmp	r5, r4
 801028a:	d109      	bne.n	80102a0 <__libc_init_array+0x24>
 801028c:	4e0b      	ldr	r6, [pc, #44]	; (80102bc <__libc_init_array+0x40>)
 801028e:	4c0c      	ldr	r4, [pc, #48]	; (80102c0 <__libc_init_array+0x44>)
 8010290:	f004 fa26 	bl	80146e0 <_init>
 8010294:	1ba4      	subs	r4, r4, r6
 8010296:	10a4      	asrs	r4, r4, #2
 8010298:	2500      	movs	r5, #0
 801029a:	42a5      	cmp	r5, r4
 801029c:	d105      	bne.n	80102aa <__libc_init_array+0x2e>
 801029e:	bd70      	pop	{r4, r5, r6, pc}
 80102a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102a4:	4798      	blx	r3
 80102a6:	3501      	adds	r5, #1
 80102a8:	e7ee      	b.n	8010288 <__libc_init_array+0xc>
 80102aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102ae:	4798      	blx	r3
 80102b0:	3501      	adds	r5, #1
 80102b2:	e7f2      	b.n	801029a <__libc_init_array+0x1e>
 80102b4:	08015090 	.word	0x08015090
 80102b8:	08015090 	.word	0x08015090
 80102bc:	08015090 	.word	0x08015090
 80102c0:	08015098 	.word	0x08015098

080102c4 <malloc>:
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <malloc+0xc>)
 80102c6:	4601      	mov	r1, r0
 80102c8:	6818      	ldr	r0, [r3, #0]
 80102ca:	f000 b873 	b.w	80103b4 <_malloc_r>
 80102ce:	bf00      	nop
 80102d0:	20000378 	.word	0x20000378

080102d4 <memcpy>:
 80102d4:	b510      	push	{r4, lr}
 80102d6:	1e43      	subs	r3, r0, #1
 80102d8:	440a      	add	r2, r1
 80102da:	4291      	cmp	r1, r2
 80102dc:	d100      	bne.n	80102e0 <memcpy+0xc>
 80102de:	bd10      	pop	{r4, pc}
 80102e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e8:	e7f7      	b.n	80102da <memcpy+0x6>

080102ea <memset>:
 80102ea:	4402      	add	r2, r0
 80102ec:	4603      	mov	r3, r0
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d100      	bne.n	80102f4 <memset+0xa>
 80102f2:	4770      	bx	lr
 80102f4:	f803 1b01 	strb.w	r1, [r3], #1
 80102f8:	e7f9      	b.n	80102ee <memset+0x4>

080102fa <_calloc_r>:
 80102fa:	b538      	push	{r3, r4, r5, lr}
 80102fc:	fb02 f401 	mul.w	r4, r2, r1
 8010300:	4621      	mov	r1, r4
 8010302:	f000 f857 	bl	80103b4 <_malloc_r>
 8010306:	4605      	mov	r5, r0
 8010308:	b118      	cbz	r0, 8010312 <_calloc_r+0x18>
 801030a:	4622      	mov	r2, r4
 801030c:	2100      	movs	r1, #0
 801030e:	f7ff ffec 	bl	80102ea <memset>
 8010312:	4628      	mov	r0, r5
 8010314:	bd38      	pop	{r3, r4, r5, pc}
	...

08010318 <_free_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4605      	mov	r5, r0
 801031c:	2900      	cmp	r1, #0
 801031e:	d045      	beq.n	80103ac <_free_r+0x94>
 8010320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010324:	1f0c      	subs	r4, r1, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	bfb8      	it	lt
 801032a:	18e4      	addlt	r4, r4, r3
 801032c:	f003 f9ea 	bl	8013704 <__malloc_lock>
 8010330:	4a1f      	ldr	r2, [pc, #124]	; (80103b0 <_free_r+0x98>)
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	4610      	mov	r0, r2
 8010336:	b933      	cbnz	r3, 8010346 <_free_r+0x2e>
 8010338:	6063      	str	r3, [r4, #4]
 801033a:	6014      	str	r4, [r2, #0]
 801033c:	4628      	mov	r0, r5
 801033e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010342:	f003 b9e0 	b.w	8013706 <__malloc_unlock>
 8010346:	42a3      	cmp	r3, r4
 8010348:	d90c      	bls.n	8010364 <_free_r+0x4c>
 801034a:	6821      	ldr	r1, [r4, #0]
 801034c:	1862      	adds	r2, r4, r1
 801034e:	4293      	cmp	r3, r2
 8010350:	bf04      	itt	eq
 8010352:	681a      	ldreq	r2, [r3, #0]
 8010354:	685b      	ldreq	r3, [r3, #4]
 8010356:	6063      	str	r3, [r4, #4]
 8010358:	bf04      	itt	eq
 801035a:	1852      	addeq	r2, r2, r1
 801035c:	6022      	streq	r2, [r4, #0]
 801035e:	6004      	str	r4, [r0, #0]
 8010360:	e7ec      	b.n	801033c <_free_r+0x24>
 8010362:	4613      	mov	r3, r2
 8010364:	685a      	ldr	r2, [r3, #4]
 8010366:	b10a      	cbz	r2, 801036c <_free_r+0x54>
 8010368:	42a2      	cmp	r2, r4
 801036a:	d9fa      	bls.n	8010362 <_free_r+0x4a>
 801036c:	6819      	ldr	r1, [r3, #0]
 801036e:	1858      	adds	r0, r3, r1
 8010370:	42a0      	cmp	r0, r4
 8010372:	d10b      	bne.n	801038c <_free_r+0x74>
 8010374:	6820      	ldr	r0, [r4, #0]
 8010376:	4401      	add	r1, r0
 8010378:	1858      	adds	r0, r3, r1
 801037a:	4282      	cmp	r2, r0
 801037c:	6019      	str	r1, [r3, #0]
 801037e:	d1dd      	bne.n	801033c <_free_r+0x24>
 8010380:	6810      	ldr	r0, [r2, #0]
 8010382:	6852      	ldr	r2, [r2, #4]
 8010384:	605a      	str	r2, [r3, #4]
 8010386:	4401      	add	r1, r0
 8010388:	6019      	str	r1, [r3, #0]
 801038a:	e7d7      	b.n	801033c <_free_r+0x24>
 801038c:	d902      	bls.n	8010394 <_free_r+0x7c>
 801038e:	230c      	movs	r3, #12
 8010390:	602b      	str	r3, [r5, #0]
 8010392:	e7d3      	b.n	801033c <_free_r+0x24>
 8010394:	6820      	ldr	r0, [r4, #0]
 8010396:	1821      	adds	r1, r4, r0
 8010398:	428a      	cmp	r2, r1
 801039a:	bf04      	itt	eq
 801039c:	6811      	ldreq	r1, [r2, #0]
 801039e:	6852      	ldreq	r2, [r2, #4]
 80103a0:	6062      	str	r2, [r4, #4]
 80103a2:	bf04      	itt	eq
 80103a4:	1809      	addeq	r1, r1, r0
 80103a6:	6021      	streq	r1, [r4, #0]
 80103a8:	605c      	str	r4, [r3, #4]
 80103aa:	e7c7      	b.n	801033c <_free_r+0x24>
 80103ac:	bd38      	pop	{r3, r4, r5, pc}
 80103ae:	bf00      	nop
 80103b0:	2000133c 	.word	0x2000133c

080103b4 <_malloc_r>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	1ccd      	adds	r5, r1, #3
 80103b8:	f025 0503 	bic.w	r5, r5, #3
 80103bc:	3508      	adds	r5, #8
 80103be:	2d0c      	cmp	r5, #12
 80103c0:	bf38      	it	cc
 80103c2:	250c      	movcc	r5, #12
 80103c4:	2d00      	cmp	r5, #0
 80103c6:	4606      	mov	r6, r0
 80103c8:	db01      	blt.n	80103ce <_malloc_r+0x1a>
 80103ca:	42a9      	cmp	r1, r5
 80103cc:	d903      	bls.n	80103d6 <_malloc_r+0x22>
 80103ce:	230c      	movs	r3, #12
 80103d0:	6033      	str	r3, [r6, #0]
 80103d2:	2000      	movs	r0, #0
 80103d4:	bd70      	pop	{r4, r5, r6, pc}
 80103d6:	f003 f995 	bl	8013704 <__malloc_lock>
 80103da:	4a21      	ldr	r2, [pc, #132]	; (8010460 <_malloc_r+0xac>)
 80103dc:	6814      	ldr	r4, [r2, #0]
 80103de:	4621      	mov	r1, r4
 80103e0:	b991      	cbnz	r1, 8010408 <_malloc_r+0x54>
 80103e2:	4c20      	ldr	r4, [pc, #128]	; (8010464 <_malloc_r+0xb0>)
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	b91b      	cbnz	r3, 80103f0 <_malloc_r+0x3c>
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 fecd 	bl	8011188 <_sbrk_r>
 80103ee:	6020      	str	r0, [r4, #0]
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f000 fec8 	bl	8011188 <_sbrk_r>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d124      	bne.n	8010446 <_malloc_r+0x92>
 80103fc:	230c      	movs	r3, #12
 80103fe:	6033      	str	r3, [r6, #0]
 8010400:	4630      	mov	r0, r6
 8010402:	f003 f980 	bl	8013706 <__malloc_unlock>
 8010406:	e7e4      	b.n	80103d2 <_malloc_r+0x1e>
 8010408:	680b      	ldr	r3, [r1, #0]
 801040a:	1b5b      	subs	r3, r3, r5
 801040c:	d418      	bmi.n	8010440 <_malloc_r+0x8c>
 801040e:	2b0b      	cmp	r3, #11
 8010410:	d90f      	bls.n	8010432 <_malloc_r+0x7e>
 8010412:	600b      	str	r3, [r1, #0]
 8010414:	50cd      	str	r5, [r1, r3]
 8010416:	18cc      	adds	r4, r1, r3
 8010418:	4630      	mov	r0, r6
 801041a:	f003 f974 	bl	8013706 <__malloc_unlock>
 801041e:	f104 000b 	add.w	r0, r4, #11
 8010422:	1d23      	adds	r3, r4, #4
 8010424:	f020 0007 	bic.w	r0, r0, #7
 8010428:	1ac3      	subs	r3, r0, r3
 801042a:	d0d3      	beq.n	80103d4 <_malloc_r+0x20>
 801042c:	425a      	negs	r2, r3
 801042e:	50e2      	str	r2, [r4, r3]
 8010430:	e7d0      	b.n	80103d4 <_malloc_r+0x20>
 8010432:	428c      	cmp	r4, r1
 8010434:	684b      	ldr	r3, [r1, #4]
 8010436:	bf16      	itet	ne
 8010438:	6063      	strne	r3, [r4, #4]
 801043a:	6013      	streq	r3, [r2, #0]
 801043c:	460c      	movne	r4, r1
 801043e:	e7eb      	b.n	8010418 <_malloc_r+0x64>
 8010440:	460c      	mov	r4, r1
 8010442:	6849      	ldr	r1, [r1, #4]
 8010444:	e7cc      	b.n	80103e0 <_malloc_r+0x2c>
 8010446:	1cc4      	adds	r4, r0, #3
 8010448:	f024 0403 	bic.w	r4, r4, #3
 801044c:	42a0      	cmp	r0, r4
 801044e:	d005      	beq.n	801045c <_malloc_r+0xa8>
 8010450:	1a21      	subs	r1, r4, r0
 8010452:	4630      	mov	r0, r6
 8010454:	f000 fe98 	bl	8011188 <_sbrk_r>
 8010458:	3001      	adds	r0, #1
 801045a:	d0cf      	beq.n	80103fc <_malloc_r+0x48>
 801045c:	6025      	str	r5, [r4, #0]
 801045e:	e7db      	b.n	8010418 <_malloc_r+0x64>
 8010460:	2000133c 	.word	0x2000133c
 8010464:	20001340 	.word	0x20001340

08010468 <__cvt>:
 8010468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801046a:	ed2d 8b02 	vpush	{d8}
 801046e:	eeb0 8b40 	vmov.f64	d8, d0
 8010472:	b085      	sub	sp, #20
 8010474:	4617      	mov	r7, r2
 8010476:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010478:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801047a:	ee18 2a90 	vmov	r2, s17
 801047e:	f025 0520 	bic.w	r5, r5, #32
 8010482:	2a00      	cmp	r2, #0
 8010484:	bfb6      	itet	lt
 8010486:	222d      	movlt	r2, #45	; 0x2d
 8010488:	2200      	movge	r2, #0
 801048a:	eeb1 8b40 	vneglt.f64	d8, d0
 801048e:	2d46      	cmp	r5, #70	; 0x46
 8010490:	460c      	mov	r4, r1
 8010492:	701a      	strb	r2, [r3, #0]
 8010494:	d004      	beq.n	80104a0 <__cvt+0x38>
 8010496:	2d45      	cmp	r5, #69	; 0x45
 8010498:	d100      	bne.n	801049c <__cvt+0x34>
 801049a:	3401      	adds	r4, #1
 801049c:	2102      	movs	r1, #2
 801049e:	e000      	b.n	80104a2 <__cvt+0x3a>
 80104a0:	2103      	movs	r1, #3
 80104a2:	ab03      	add	r3, sp, #12
 80104a4:	9301      	str	r3, [sp, #4]
 80104a6:	ab02      	add	r3, sp, #8
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	4622      	mov	r2, r4
 80104ac:	4633      	mov	r3, r6
 80104ae:	eeb0 0b48 	vmov.f64	d0, d8
 80104b2:	f001 feb1 	bl	8012218 <_dtoa_r>
 80104b6:	2d47      	cmp	r5, #71	; 0x47
 80104b8:	d101      	bne.n	80104be <__cvt+0x56>
 80104ba:	07fb      	lsls	r3, r7, #31
 80104bc:	d51e      	bpl.n	80104fc <__cvt+0x94>
 80104be:	2d46      	cmp	r5, #70	; 0x46
 80104c0:	eb00 0304 	add.w	r3, r0, r4
 80104c4:	d10c      	bne.n	80104e0 <__cvt+0x78>
 80104c6:	7802      	ldrb	r2, [r0, #0]
 80104c8:	2a30      	cmp	r2, #48	; 0x30
 80104ca:	d107      	bne.n	80104dc <__cvt+0x74>
 80104cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	bf1c      	itt	ne
 80104d6:	f1c4 0401 	rsbne	r4, r4, #1
 80104da:	6034      	strne	r4, [r6, #0]
 80104dc:	6832      	ldr	r2, [r6, #0]
 80104de:	4413      	add	r3, r2
 80104e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80104e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e8:	d007      	beq.n	80104fa <__cvt+0x92>
 80104ea:	2130      	movs	r1, #48	; 0x30
 80104ec:	9a03      	ldr	r2, [sp, #12]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d204      	bcs.n	80104fc <__cvt+0x94>
 80104f2:	1c54      	adds	r4, r2, #1
 80104f4:	9403      	str	r4, [sp, #12]
 80104f6:	7011      	strb	r1, [r2, #0]
 80104f8:	e7f8      	b.n	80104ec <__cvt+0x84>
 80104fa:	9303      	str	r3, [sp, #12]
 80104fc:	9b03      	ldr	r3, [sp, #12]
 80104fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010500:	1a1b      	subs	r3, r3, r0
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	b005      	add	sp, #20
 8010506:	ecbd 8b02 	vpop	{d8}
 801050a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801050c <__exponent>:
 801050c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801050e:	2900      	cmp	r1, #0
 8010510:	4604      	mov	r4, r0
 8010512:	bfba      	itte	lt
 8010514:	4249      	neglt	r1, r1
 8010516:	232d      	movlt	r3, #45	; 0x2d
 8010518:	232b      	movge	r3, #43	; 0x2b
 801051a:	2909      	cmp	r1, #9
 801051c:	f804 2b02 	strb.w	r2, [r4], #2
 8010520:	7043      	strb	r3, [r0, #1]
 8010522:	dd20      	ble.n	8010566 <__exponent+0x5a>
 8010524:	f10d 0307 	add.w	r3, sp, #7
 8010528:	461f      	mov	r7, r3
 801052a:	260a      	movs	r6, #10
 801052c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010530:	fb06 1115 	mls	r1, r6, r5, r1
 8010534:	3130      	adds	r1, #48	; 0x30
 8010536:	2d09      	cmp	r5, #9
 8010538:	f803 1c01 	strb.w	r1, [r3, #-1]
 801053c:	f103 32ff 	add.w	r2, r3, #4294967295
 8010540:	4629      	mov	r1, r5
 8010542:	dc09      	bgt.n	8010558 <__exponent+0x4c>
 8010544:	3130      	adds	r1, #48	; 0x30
 8010546:	3b02      	subs	r3, #2
 8010548:	f802 1c01 	strb.w	r1, [r2, #-1]
 801054c:	42bb      	cmp	r3, r7
 801054e:	4622      	mov	r2, r4
 8010550:	d304      	bcc.n	801055c <__exponent+0x50>
 8010552:	1a10      	subs	r0, r2, r0
 8010554:	b003      	add	sp, #12
 8010556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010558:	4613      	mov	r3, r2
 801055a:	e7e7      	b.n	801052c <__exponent+0x20>
 801055c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010560:	f804 2b01 	strb.w	r2, [r4], #1
 8010564:	e7f2      	b.n	801054c <__exponent+0x40>
 8010566:	2330      	movs	r3, #48	; 0x30
 8010568:	4419      	add	r1, r3
 801056a:	7083      	strb	r3, [r0, #2]
 801056c:	1d02      	adds	r2, r0, #4
 801056e:	70c1      	strb	r1, [r0, #3]
 8010570:	e7ef      	b.n	8010552 <__exponent+0x46>
 8010572:	0000      	movs	r0, r0
 8010574:	0000      	movs	r0, r0
	...

08010578 <_printf_float>:
 8010578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057c:	b08d      	sub	sp, #52	; 0x34
 801057e:	460c      	mov	r4, r1
 8010580:	4616      	mov	r6, r2
 8010582:	461f      	mov	r7, r3
 8010584:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010588:	4605      	mov	r5, r0
 801058a:	f003 f837 	bl	80135fc <_localeconv_r>
 801058e:	f8d0 b000 	ldr.w	fp, [r0]
 8010592:	4658      	mov	r0, fp
 8010594:	f7ef fe54 	bl	8000240 <strlen>
 8010598:	2300      	movs	r3, #0
 801059a:	930a      	str	r3, [sp, #40]	; 0x28
 801059c:	f8d8 3000 	ldr.w	r3, [r8]
 80105a0:	9005      	str	r0, [sp, #20]
 80105a2:	3307      	adds	r3, #7
 80105a4:	f023 0307 	bic.w	r3, r3, #7
 80105a8:	f103 0108 	add.w	r1, r3, #8
 80105ac:	f894 9018 	ldrb.w	r9, [r4, #24]
 80105b0:	6822      	ldr	r2, [r4, #0]
 80105b2:	f8c8 1000 	str.w	r1, [r8]
 80105b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80105be:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010848 <_printf_float+0x2d0>
 80105c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80105c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80105ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d2:	dd24      	ble.n	801061e <_printf_float+0xa6>
 80105d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80105d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105dc:	d502      	bpl.n	80105e4 <_printf_float+0x6c>
 80105de:	232d      	movs	r3, #45	; 0x2d
 80105e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105e4:	499a      	ldr	r1, [pc, #616]	; (8010850 <_printf_float+0x2d8>)
 80105e6:	4b9b      	ldr	r3, [pc, #620]	; (8010854 <_printf_float+0x2dc>)
 80105e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80105ec:	bf8c      	ite	hi
 80105ee:	4688      	movhi	r8, r1
 80105f0:	4698      	movls	r8, r3
 80105f2:	f022 0204 	bic.w	r2, r2, #4
 80105f6:	2303      	movs	r3, #3
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	6022      	str	r2, [r4, #0]
 80105fc:	f04f 0a00 	mov.w	sl, #0
 8010600:	9700      	str	r7, [sp, #0]
 8010602:	4633      	mov	r3, r6
 8010604:	aa0b      	add	r2, sp, #44	; 0x2c
 8010606:	4621      	mov	r1, r4
 8010608:	4628      	mov	r0, r5
 801060a:	f000 f9e1 	bl	80109d0 <_printf_common>
 801060e:	3001      	adds	r0, #1
 8010610:	f040 8089 	bne.w	8010726 <_printf_float+0x1ae>
 8010614:	f04f 30ff 	mov.w	r0, #4294967295
 8010618:	b00d      	add	sp, #52	; 0x34
 801061a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801061e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010626:	d702      	bvc.n	801062e <_printf_float+0xb6>
 8010628:	498b      	ldr	r1, [pc, #556]	; (8010858 <_printf_float+0x2e0>)
 801062a:	4b8c      	ldr	r3, [pc, #560]	; (801085c <_printf_float+0x2e4>)
 801062c:	e7dc      	b.n	80105e8 <_printf_float+0x70>
 801062e:	6861      	ldr	r1, [r4, #4]
 8010630:	1c4b      	adds	r3, r1, #1
 8010632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010636:	ab0a      	add	r3, sp, #40	; 0x28
 8010638:	a809      	add	r0, sp, #36	; 0x24
 801063a:	d13b      	bne.n	80106b4 <_printf_float+0x13c>
 801063c:	2106      	movs	r1, #6
 801063e:	6061      	str	r1, [r4, #4]
 8010640:	f04f 0c00 	mov.w	ip, #0
 8010644:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010648:	e9cd 0900 	strd	r0, r9, [sp]
 801064c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010650:	6022      	str	r2, [r4, #0]
 8010652:	6861      	ldr	r1, [r4, #4]
 8010654:	4628      	mov	r0, r5
 8010656:	f7ff ff07 	bl	8010468 <__cvt>
 801065a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801065e:	2b47      	cmp	r3, #71	; 0x47
 8010660:	4680      	mov	r8, r0
 8010662:	d109      	bne.n	8010678 <_printf_float+0x100>
 8010664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010666:	1cd8      	adds	r0, r3, #3
 8010668:	db02      	blt.n	8010670 <_printf_float+0xf8>
 801066a:	6862      	ldr	r2, [r4, #4]
 801066c:	4293      	cmp	r3, r2
 801066e:	dd47      	ble.n	8010700 <_printf_float+0x188>
 8010670:	f1a9 0902 	sub.w	r9, r9, #2
 8010674:	fa5f f989 	uxtb.w	r9, r9
 8010678:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801067c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801067e:	d824      	bhi.n	80106ca <_printf_float+0x152>
 8010680:	3901      	subs	r1, #1
 8010682:	464a      	mov	r2, r9
 8010684:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010688:	9109      	str	r1, [sp, #36]	; 0x24
 801068a:	f7ff ff3f 	bl	801050c <__exponent>
 801068e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010690:	1813      	adds	r3, r2, r0
 8010692:	2a01      	cmp	r2, #1
 8010694:	4682      	mov	sl, r0
 8010696:	6123      	str	r3, [r4, #16]
 8010698:	dc02      	bgt.n	80106a0 <_printf_float+0x128>
 801069a:	6822      	ldr	r2, [r4, #0]
 801069c:	07d1      	lsls	r1, r2, #31
 801069e:	d501      	bpl.n	80106a4 <_printf_float+0x12c>
 80106a0:	3301      	adds	r3, #1
 80106a2:	6123      	str	r3, [r4, #16]
 80106a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d0a9      	beq.n	8010600 <_printf_float+0x88>
 80106ac:	232d      	movs	r3, #45	; 0x2d
 80106ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106b2:	e7a5      	b.n	8010600 <_printf_float+0x88>
 80106b4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80106b8:	f000 8178 	beq.w	80109ac <_printf_float+0x434>
 80106bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80106c0:	d1be      	bne.n	8010640 <_printf_float+0xc8>
 80106c2:	2900      	cmp	r1, #0
 80106c4:	d1bc      	bne.n	8010640 <_printf_float+0xc8>
 80106c6:	2101      	movs	r1, #1
 80106c8:	e7b9      	b.n	801063e <_printf_float+0xc6>
 80106ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80106ce:	d119      	bne.n	8010704 <_printf_float+0x18c>
 80106d0:	2900      	cmp	r1, #0
 80106d2:	6863      	ldr	r3, [r4, #4]
 80106d4:	dd0c      	ble.n	80106f0 <_printf_float+0x178>
 80106d6:	6121      	str	r1, [r4, #16]
 80106d8:	b913      	cbnz	r3, 80106e0 <_printf_float+0x168>
 80106da:	6822      	ldr	r2, [r4, #0]
 80106dc:	07d2      	lsls	r2, r2, #31
 80106de:	d502      	bpl.n	80106e6 <_printf_float+0x16e>
 80106e0:	3301      	adds	r3, #1
 80106e2:	440b      	add	r3, r1
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80106ea:	f04f 0a00 	mov.w	sl, #0
 80106ee:	e7d9      	b.n	80106a4 <_printf_float+0x12c>
 80106f0:	b913      	cbnz	r3, 80106f8 <_printf_float+0x180>
 80106f2:	6822      	ldr	r2, [r4, #0]
 80106f4:	07d0      	lsls	r0, r2, #31
 80106f6:	d501      	bpl.n	80106fc <_printf_float+0x184>
 80106f8:	3302      	adds	r3, #2
 80106fa:	e7f3      	b.n	80106e4 <_printf_float+0x16c>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e7f1      	b.n	80106e4 <_printf_float+0x16c>
 8010700:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010704:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010708:	4293      	cmp	r3, r2
 801070a:	db05      	blt.n	8010718 <_printf_float+0x1a0>
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	6123      	str	r3, [r4, #16]
 8010710:	07d1      	lsls	r1, r2, #31
 8010712:	d5e8      	bpl.n	80106e6 <_printf_float+0x16e>
 8010714:	3301      	adds	r3, #1
 8010716:	e7e5      	b.n	80106e4 <_printf_float+0x16c>
 8010718:	2b00      	cmp	r3, #0
 801071a:	bfd4      	ite	le
 801071c:	f1c3 0302 	rsble	r3, r3, #2
 8010720:	2301      	movgt	r3, #1
 8010722:	4413      	add	r3, r2
 8010724:	e7de      	b.n	80106e4 <_printf_float+0x16c>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	055a      	lsls	r2, r3, #21
 801072a:	d407      	bmi.n	801073c <_printf_float+0x1c4>
 801072c:	6923      	ldr	r3, [r4, #16]
 801072e:	4642      	mov	r2, r8
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	47b8      	blx	r7
 8010736:	3001      	adds	r0, #1
 8010738:	d12a      	bne.n	8010790 <_printf_float+0x218>
 801073a:	e76b      	b.n	8010614 <_printf_float+0x9c>
 801073c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010740:	f240 80de 	bls.w	8010900 <_printf_float+0x388>
 8010744:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010748:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010750:	d133      	bne.n	80107ba <_printf_float+0x242>
 8010752:	2301      	movs	r3, #1
 8010754:	4a42      	ldr	r2, [pc, #264]	; (8010860 <_printf_float+0x2e8>)
 8010756:	4631      	mov	r1, r6
 8010758:	4628      	mov	r0, r5
 801075a:	47b8      	blx	r7
 801075c:	3001      	adds	r0, #1
 801075e:	f43f af59 	beq.w	8010614 <_printf_float+0x9c>
 8010762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010766:	429a      	cmp	r2, r3
 8010768:	db02      	blt.n	8010770 <_printf_float+0x1f8>
 801076a:	6823      	ldr	r3, [r4, #0]
 801076c:	07d8      	lsls	r0, r3, #31
 801076e:	d50f      	bpl.n	8010790 <_printf_float+0x218>
 8010770:	9b05      	ldr	r3, [sp, #20]
 8010772:	465a      	mov	r2, fp
 8010774:	4631      	mov	r1, r6
 8010776:	4628      	mov	r0, r5
 8010778:	47b8      	blx	r7
 801077a:	3001      	adds	r0, #1
 801077c:	f43f af4a 	beq.w	8010614 <_printf_float+0x9c>
 8010780:	f04f 0800 	mov.w	r8, #0
 8010784:	f104 091a 	add.w	r9, r4, #26
 8010788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801078a:	3b01      	subs	r3, #1
 801078c:	4543      	cmp	r3, r8
 801078e:	dc09      	bgt.n	80107a4 <_printf_float+0x22c>
 8010790:	6823      	ldr	r3, [r4, #0]
 8010792:	079b      	lsls	r3, r3, #30
 8010794:	f100 8105 	bmi.w	80109a2 <_printf_float+0x42a>
 8010798:	68e0      	ldr	r0, [r4, #12]
 801079a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801079c:	4298      	cmp	r0, r3
 801079e:	bfb8      	it	lt
 80107a0:	4618      	movlt	r0, r3
 80107a2:	e739      	b.n	8010618 <_printf_float+0xa0>
 80107a4:	2301      	movs	r3, #1
 80107a6:	464a      	mov	r2, r9
 80107a8:	4631      	mov	r1, r6
 80107aa:	4628      	mov	r0, r5
 80107ac:	47b8      	blx	r7
 80107ae:	3001      	adds	r0, #1
 80107b0:	f43f af30 	beq.w	8010614 <_printf_float+0x9c>
 80107b4:	f108 0801 	add.w	r8, r8, #1
 80107b8:	e7e6      	b.n	8010788 <_printf_float+0x210>
 80107ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dc2b      	bgt.n	8010818 <_printf_float+0x2a0>
 80107c0:	2301      	movs	r3, #1
 80107c2:	4a27      	ldr	r2, [pc, #156]	; (8010860 <_printf_float+0x2e8>)
 80107c4:	4631      	mov	r1, r6
 80107c6:	4628      	mov	r0, r5
 80107c8:	47b8      	blx	r7
 80107ca:	3001      	adds	r0, #1
 80107cc:	f43f af22 	beq.w	8010614 <_printf_float+0x9c>
 80107d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d2:	b923      	cbnz	r3, 80107de <_printf_float+0x266>
 80107d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d6:	b913      	cbnz	r3, 80107de <_printf_float+0x266>
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	07d9      	lsls	r1, r3, #31
 80107dc:	d5d8      	bpl.n	8010790 <_printf_float+0x218>
 80107de:	9b05      	ldr	r3, [sp, #20]
 80107e0:	465a      	mov	r2, fp
 80107e2:	4631      	mov	r1, r6
 80107e4:	4628      	mov	r0, r5
 80107e6:	47b8      	blx	r7
 80107e8:	3001      	adds	r0, #1
 80107ea:	f43f af13 	beq.w	8010614 <_printf_float+0x9c>
 80107ee:	f04f 0900 	mov.w	r9, #0
 80107f2:	f104 0a1a 	add.w	sl, r4, #26
 80107f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f8:	425b      	negs	r3, r3
 80107fa:	454b      	cmp	r3, r9
 80107fc:	dc01      	bgt.n	8010802 <_printf_float+0x28a>
 80107fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010800:	e795      	b.n	801072e <_printf_float+0x1b6>
 8010802:	2301      	movs	r3, #1
 8010804:	4652      	mov	r2, sl
 8010806:	4631      	mov	r1, r6
 8010808:	4628      	mov	r0, r5
 801080a:	47b8      	blx	r7
 801080c:	3001      	adds	r0, #1
 801080e:	f43f af01 	beq.w	8010614 <_printf_float+0x9c>
 8010812:	f109 0901 	add.w	r9, r9, #1
 8010816:	e7ee      	b.n	80107f6 <_printf_float+0x27e>
 8010818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801081a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801081c:	429a      	cmp	r2, r3
 801081e:	bfa8      	it	ge
 8010820:	461a      	movge	r2, r3
 8010822:	2a00      	cmp	r2, #0
 8010824:	4691      	mov	r9, r2
 8010826:	dd07      	ble.n	8010838 <_printf_float+0x2c0>
 8010828:	4613      	mov	r3, r2
 801082a:	4631      	mov	r1, r6
 801082c:	4642      	mov	r2, r8
 801082e:	4628      	mov	r0, r5
 8010830:	47b8      	blx	r7
 8010832:	3001      	adds	r0, #1
 8010834:	f43f aeee 	beq.w	8010614 <_printf_float+0x9c>
 8010838:	f104 031a 	add.w	r3, r4, #26
 801083c:	f04f 0a00 	mov.w	sl, #0
 8010840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010844:	9307      	str	r3, [sp, #28]
 8010846:	e017      	b.n	8010878 <_printf_float+0x300>
 8010848:	ffffffff 	.word	0xffffffff
 801084c:	7fefffff 	.word	0x7fefffff
 8010850:	08014d70 	.word	0x08014d70
 8010854:	08014d6c 	.word	0x08014d6c
 8010858:	08014d78 	.word	0x08014d78
 801085c:	08014d74 	.word	0x08014d74
 8010860:	08014d7c 	.word	0x08014d7c
 8010864:	2301      	movs	r3, #1
 8010866:	9a07      	ldr	r2, [sp, #28]
 8010868:	4631      	mov	r1, r6
 801086a:	4628      	mov	r0, r5
 801086c:	47b8      	blx	r7
 801086e:	3001      	adds	r0, #1
 8010870:	f43f aed0 	beq.w	8010614 <_printf_float+0x9c>
 8010874:	f10a 0a01 	add.w	sl, sl, #1
 8010878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801087a:	9306      	str	r3, [sp, #24]
 801087c:	eba3 0309 	sub.w	r3, r3, r9
 8010880:	4553      	cmp	r3, sl
 8010882:	dcef      	bgt.n	8010864 <_printf_float+0x2ec>
 8010884:	9b06      	ldr	r3, [sp, #24]
 8010886:	4498      	add	r8, r3
 8010888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801088c:	429a      	cmp	r2, r3
 801088e:	db15      	blt.n	80108bc <_printf_float+0x344>
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	07da      	lsls	r2, r3, #31
 8010894:	d412      	bmi.n	80108bc <_printf_float+0x344>
 8010896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010898:	9a06      	ldr	r2, [sp, #24]
 801089a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801089c:	1a9a      	subs	r2, r3, r2
 801089e:	eba3 0a01 	sub.w	sl, r3, r1
 80108a2:	4592      	cmp	sl, r2
 80108a4:	bfa8      	it	ge
 80108a6:	4692      	movge	sl, r2
 80108a8:	f1ba 0f00 	cmp.w	sl, #0
 80108ac:	dc0e      	bgt.n	80108cc <_printf_float+0x354>
 80108ae:	f04f 0800 	mov.w	r8, #0
 80108b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108b6:	f104 091a 	add.w	r9, r4, #26
 80108ba:	e019      	b.n	80108f0 <_printf_float+0x378>
 80108bc:	9b05      	ldr	r3, [sp, #20]
 80108be:	465a      	mov	r2, fp
 80108c0:	4631      	mov	r1, r6
 80108c2:	4628      	mov	r0, r5
 80108c4:	47b8      	blx	r7
 80108c6:	3001      	adds	r0, #1
 80108c8:	d1e5      	bne.n	8010896 <_printf_float+0x31e>
 80108ca:	e6a3      	b.n	8010614 <_printf_float+0x9c>
 80108cc:	4653      	mov	r3, sl
 80108ce:	4642      	mov	r2, r8
 80108d0:	4631      	mov	r1, r6
 80108d2:	4628      	mov	r0, r5
 80108d4:	47b8      	blx	r7
 80108d6:	3001      	adds	r0, #1
 80108d8:	d1e9      	bne.n	80108ae <_printf_float+0x336>
 80108da:	e69b      	b.n	8010614 <_printf_float+0x9c>
 80108dc:	2301      	movs	r3, #1
 80108de:	464a      	mov	r2, r9
 80108e0:	4631      	mov	r1, r6
 80108e2:	4628      	mov	r0, r5
 80108e4:	47b8      	blx	r7
 80108e6:	3001      	adds	r0, #1
 80108e8:	f43f ae94 	beq.w	8010614 <_printf_float+0x9c>
 80108ec:	f108 0801 	add.w	r8, r8, #1
 80108f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	eba3 030a 	sub.w	r3, r3, sl
 80108fa:	4543      	cmp	r3, r8
 80108fc:	dcee      	bgt.n	80108dc <_printf_float+0x364>
 80108fe:	e747      	b.n	8010790 <_printf_float+0x218>
 8010900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010902:	2a01      	cmp	r2, #1
 8010904:	dc01      	bgt.n	801090a <_printf_float+0x392>
 8010906:	07db      	lsls	r3, r3, #31
 8010908:	d539      	bpl.n	801097e <_printf_float+0x406>
 801090a:	2301      	movs	r3, #1
 801090c:	4642      	mov	r2, r8
 801090e:	4631      	mov	r1, r6
 8010910:	4628      	mov	r0, r5
 8010912:	47b8      	blx	r7
 8010914:	3001      	adds	r0, #1
 8010916:	f43f ae7d 	beq.w	8010614 <_printf_float+0x9c>
 801091a:	9b05      	ldr	r3, [sp, #20]
 801091c:	465a      	mov	r2, fp
 801091e:	4631      	mov	r1, r6
 8010920:	4628      	mov	r0, r5
 8010922:	47b8      	blx	r7
 8010924:	3001      	adds	r0, #1
 8010926:	f108 0801 	add.w	r8, r8, #1
 801092a:	f43f ae73 	beq.w	8010614 <_printf_float+0x9c>
 801092e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010940:	d018      	beq.n	8010974 <_printf_float+0x3fc>
 8010942:	4642      	mov	r2, r8
 8010944:	4631      	mov	r1, r6
 8010946:	4628      	mov	r0, r5
 8010948:	47b8      	blx	r7
 801094a:	3001      	adds	r0, #1
 801094c:	d10e      	bne.n	801096c <_printf_float+0x3f4>
 801094e:	e661      	b.n	8010614 <_printf_float+0x9c>
 8010950:	2301      	movs	r3, #1
 8010952:	464a      	mov	r2, r9
 8010954:	4631      	mov	r1, r6
 8010956:	4628      	mov	r0, r5
 8010958:	47b8      	blx	r7
 801095a:	3001      	adds	r0, #1
 801095c:	f43f ae5a 	beq.w	8010614 <_printf_float+0x9c>
 8010960:	f108 0801 	add.w	r8, r8, #1
 8010964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010966:	3b01      	subs	r3, #1
 8010968:	4543      	cmp	r3, r8
 801096a:	dcf1      	bgt.n	8010950 <_printf_float+0x3d8>
 801096c:	4653      	mov	r3, sl
 801096e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010972:	e6dd      	b.n	8010730 <_printf_float+0x1b8>
 8010974:	f04f 0800 	mov.w	r8, #0
 8010978:	f104 091a 	add.w	r9, r4, #26
 801097c:	e7f2      	b.n	8010964 <_printf_float+0x3ec>
 801097e:	2301      	movs	r3, #1
 8010980:	e7df      	b.n	8010942 <_printf_float+0x3ca>
 8010982:	2301      	movs	r3, #1
 8010984:	464a      	mov	r2, r9
 8010986:	4631      	mov	r1, r6
 8010988:	4628      	mov	r0, r5
 801098a:	47b8      	blx	r7
 801098c:	3001      	adds	r0, #1
 801098e:	f43f ae41 	beq.w	8010614 <_printf_float+0x9c>
 8010992:	f108 0801 	add.w	r8, r8, #1
 8010996:	68e3      	ldr	r3, [r4, #12]
 8010998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	4543      	cmp	r3, r8
 801099e:	dcf0      	bgt.n	8010982 <_printf_float+0x40a>
 80109a0:	e6fa      	b.n	8010798 <_printf_float+0x220>
 80109a2:	f04f 0800 	mov.w	r8, #0
 80109a6:	f104 0919 	add.w	r9, r4, #25
 80109aa:	e7f4      	b.n	8010996 <_printf_float+0x41e>
 80109ac:	2900      	cmp	r1, #0
 80109ae:	f43f ae8a 	beq.w	80106c6 <_printf_float+0x14e>
 80109b2:	f04f 0c00 	mov.w	ip, #0
 80109b6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80109ba:	e9cd 0900 	strd	r0, r9, [sp]
 80109be:	6022      	str	r2, [r4, #0]
 80109c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80109c4:	4628      	mov	r0, r5
 80109c6:	f7ff fd4f 	bl	8010468 <__cvt>
 80109ca:	4680      	mov	r8, r0
 80109cc:	e64a      	b.n	8010664 <_printf_float+0xec>
 80109ce:	bf00      	nop

080109d0 <_printf_common>:
 80109d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d4:	4691      	mov	r9, r2
 80109d6:	461f      	mov	r7, r3
 80109d8:	688a      	ldr	r2, [r1, #8]
 80109da:	690b      	ldr	r3, [r1, #16]
 80109dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109e0:	4293      	cmp	r3, r2
 80109e2:	bfb8      	it	lt
 80109e4:	4613      	movlt	r3, r2
 80109e6:	f8c9 3000 	str.w	r3, [r9]
 80109ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109ee:	4606      	mov	r6, r0
 80109f0:	460c      	mov	r4, r1
 80109f2:	b112      	cbz	r2, 80109fa <_printf_common+0x2a>
 80109f4:	3301      	adds	r3, #1
 80109f6:	f8c9 3000 	str.w	r3, [r9]
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	0699      	lsls	r1, r3, #26
 80109fe:	bf42      	ittt	mi
 8010a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a04:	3302      	addmi	r3, #2
 8010a06:	f8c9 3000 	strmi.w	r3, [r9]
 8010a0a:	6825      	ldr	r5, [r4, #0]
 8010a0c:	f015 0506 	ands.w	r5, r5, #6
 8010a10:	d107      	bne.n	8010a22 <_printf_common+0x52>
 8010a12:	f104 0a19 	add.w	sl, r4, #25
 8010a16:	68e3      	ldr	r3, [r4, #12]
 8010a18:	f8d9 2000 	ldr.w	r2, [r9]
 8010a1c:	1a9b      	subs	r3, r3, r2
 8010a1e:	42ab      	cmp	r3, r5
 8010a20:	dc28      	bgt.n	8010a74 <_printf_common+0xa4>
 8010a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a26:	6822      	ldr	r2, [r4, #0]
 8010a28:	3300      	adds	r3, #0
 8010a2a:	bf18      	it	ne
 8010a2c:	2301      	movne	r3, #1
 8010a2e:	0692      	lsls	r2, r2, #26
 8010a30:	d42d      	bmi.n	8010a8e <_printf_common+0xbe>
 8010a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a36:	4639      	mov	r1, r7
 8010a38:	4630      	mov	r0, r6
 8010a3a:	47c0      	blx	r8
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d020      	beq.n	8010a82 <_printf_common+0xb2>
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	68e5      	ldr	r5, [r4, #12]
 8010a44:	f8d9 2000 	ldr.w	r2, [r9]
 8010a48:	f003 0306 	and.w	r3, r3, #6
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	bf08      	it	eq
 8010a50:	1aad      	subeq	r5, r5, r2
 8010a52:	68a3      	ldr	r3, [r4, #8]
 8010a54:	6922      	ldr	r2, [r4, #16]
 8010a56:	bf0c      	ite	eq
 8010a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a5c:	2500      	movne	r5, #0
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	bfc4      	itt	gt
 8010a62:	1a9b      	subgt	r3, r3, r2
 8010a64:	18ed      	addgt	r5, r5, r3
 8010a66:	f04f 0900 	mov.w	r9, #0
 8010a6a:	341a      	adds	r4, #26
 8010a6c:	454d      	cmp	r5, r9
 8010a6e:	d11a      	bne.n	8010aa6 <_printf_common+0xd6>
 8010a70:	2000      	movs	r0, #0
 8010a72:	e008      	b.n	8010a86 <_printf_common+0xb6>
 8010a74:	2301      	movs	r3, #1
 8010a76:	4652      	mov	r2, sl
 8010a78:	4639      	mov	r1, r7
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	47c0      	blx	r8
 8010a7e:	3001      	adds	r0, #1
 8010a80:	d103      	bne.n	8010a8a <_printf_common+0xba>
 8010a82:	f04f 30ff 	mov.w	r0, #4294967295
 8010a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a8a:	3501      	adds	r5, #1
 8010a8c:	e7c3      	b.n	8010a16 <_printf_common+0x46>
 8010a8e:	18e1      	adds	r1, r4, r3
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	2030      	movs	r0, #48	; 0x30
 8010a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a98:	4422      	add	r2, r4
 8010a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010aa2:	3302      	adds	r3, #2
 8010aa4:	e7c5      	b.n	8010a32 <_printf_common+0x62>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4639      	mov	r1, r7
 8010aac:	4630      	mov	r0, r6
 8010aae:	47c0      	blx	r8
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d0e6      	beq.n	8010a82 <_printf_common+0xb2>
 8010ab4:	f109 0901 	add.w	r9, r9, #1
 8010ab8:	e7d8      	b.n	8010a6c <_printf_common+0x9c>
	...

08010abc <_printf_i>:
 8010abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	7e09      	ldrb	r1, [r1, #24]
 8010ac8:	b085      	sub	sp, #20
 8010aca:	296e      	cmp	r1, #110	; 0x6e
 8010acc:	4617      	mov	r7, r2
 8010ace:	4606      	mov	r6, r0
 8010ad0:	4698      	mov	r8, r3
 8010ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ad4:	f000 80b3 	beq.w	8010c3e <_printf_i+0x182>
 8010ad8:	d822      	bhi.n	8010b20 <_printf_i+0x64>
 8010ada:	2963      	cmp	r1, #99	; 0x63
 8010adc:	d036      	beq.n	8010b4c <_printf_i+0x90>
 8010ade:	d80a      	bhi.n	8010af6 <_printf_i+0x3a>
 8010ae0:	2900      	cmp	r1, #0
 8010ae2:	f000 80b9 	beq.w	8010c58 <_printf_i+0x19c>
 8010ae6:	2958      	cmp	r1, #88	; 0x58
 8010ae8:	f000 8083 	beq.w	8010bf2 <_printf_i+0x136>
 8010aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010af4:	e032      	b.n	8010b5c <_printf_i+0xa0>
 8010af6:	2964      	cmp	r1, #100	; 0x64
 8010af8:	d001      	beq.n	8010afe <_printf_i+0x42>
 8010afa:	2969      	cmp	r1, #105	; 0x69
 8010afc:	d1f6      	bne.n	8010aec <_printf_i+0x30>
 8010afe:	6820      	ldr	r0, [r4, #0]
 8010b00:	6813      	ldr	r3, [r2, #0]
 8010b02:	0605      	lsls	r5, r0, #24
 8010b04:	f103 0104 	add.w	r1, r3, #4
 8010b08:	d52a      	bpl.n	8010b60 <_printf_i+0xa4>
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	6011      	str	r1, [r2, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	da03      	bge.n	8010b1a <_printf_i+0x5e>
 8010b12:	222d      	movs	r2, #45	; 0x2d
 8010b14:	425b      	negs	r3, r3
 8010b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b1a:	486f      	ldr	r0, [pc, #444]	; (8010cd8 <_printf_i+0x21c>)
 8010b1c:	220a      	movs	r2, #10
 8010b1e:	e039      	b.n	8010b94 <_printf_i+0xd8>
 8010b20:	2973      	cmp	r1, #115	; 0x73
 8010b22:	f000 809d 	beq.w	8010c60 <_printf_i+0x1a4>
 8010b26:	d808      	bhi.n	8010b3a <_printf_i+0x7e>
 8010b28:	296f      	cmp	r1, #111	; 0x6f
 8010b2a:	d020      	beq.n	8010b6e <_printf_i+0xb2>
 8010b2c:	2970      	cmp	r1, #112	; 0x70
 8010b2e:	d1dd      	bne.n	8010aec <_printf_i+0x30>
 8010b30:	6823      	ldr	r3, [r4, #0]
 8010b32:	f043 0320 	orr.w	r3, r3, #32
 8010b36:	6023      	str	r3, [r4, #0]
 8010b38:	e003      	b.n	8010b42 <_printf_i+0x86>
 8010b3a:	2975      	cmp	r1, #117	; 0x75
 8010b3c:	d017      	beq.n	8010b6e <_printf_i+0xb2>
 8010b3e:	2978      	cmp	r1, #120	; 0x78
 8010b40:	d1d4      	bne.n	8010aec <_printf_i+0x30>
 8010b42:	2378      	movs	r3, #120	; 0x78
 8010b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b48:	4864      	ldr	r0, [pc, #400]	; (8010cdc <_printf_i+0x220>)
 8010b4a:	e055      	b.n	8010bf8 <_printf_i+0x13c>
 8010b4c:	6813      	ldr	r3, [r2, #0]
 8010b4e:	1d19      	adds	r1, r3, #4
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6011      	str	r1, [r2, #0]
 8010b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e08c      	b.n	8010c7a <_printf_i+0x1be>
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6011      	str	r1, [r2, #0]
 8010b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b68:	bf18      	it	ne
 8010b6a:	b21b      	sxthne	r3, r3
 8010b6c:	e7cf      	b.n	8010b0e <_printf_i+0x52>
 8010b6e:	6813      	ldr	r3, [r2, #0]
 8010b70:	6825      	ldr	r5, [r4, #0]
 8010b72:	1d18      	adds	r0, r3, #4
 8010b74:	6010      	str	r0, [r2, #0]
 8010b76:	0628      	lsls	r0, r5, #24
 8010b78:	d501      	bpl.n	8010b7e <_printf_i+0xc2>
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	e002      	b.n	8010b84 <_printf_i+0xc8>
 8010b7e:	0668      	lsls	r0, r5, #25
 8010b80:	d5fb      	bpl.n	8010b7a <_printf_i+0xbe>
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	4854      	ldr	r0, [pc, #336]	; (8010cd8 <_printf_i+0x21c>)
 8010b86:	296f      	cmp	r1, #111	; 0x6f
 8010b88:	bf14      	ite	ne
 8010b8a:	220a      	movne	r2, #10
 8010b8c:	2208      	moveq	r2, #8
 8010b8e:	2100      	movs	r1, #0
 8010b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b94:	6865      	ldr	r5, [r4, #4]
 8010b96:	60a5      	str	r5, [r4, #8]
 8010b98:	2d00      	cmp	r5, #0
 8010b9a:	f2c0 8095 	blt.w	8010cc8 <_printf_i+0x20c>
 8010b9e:	6821      	ldr	r1, [r4, #0]
 8010ba0:	f021 0104 	bic.w	r1, r1, #4
 8010ba4:	6021      	str	r1, [r4, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d13d      	bne.n	8010c26 <_printf_i+0x16a>
 8010baa:	2d00      	cmp	r5, #0
 8010bac:	f040 808e 	bne.w	8010ccc <_printf_i+0x210>
 8010bb0:	4665      	mov	r5, ip
 8010bb2:	2a08      	cmp	r2, #8
 8010bb4:	d10b      	bne.n	8010bce <_printf_i+0x112>
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	07db      	lsls	r3, r3, #31
 8010bba:	d508      	bpl.n	8010bce <_printf_i+0x112>
 8010bbc:	6923      	ldr	r3, [r4, #16]
 8010bbe:	6862      	ldr	r2, [r4, #4]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	bfde      	ittt	le
 8010bc4:	2330      	movle	r3, #48	; 0x30
 8010bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010bce:	ebac 0305 	sub.w	r3, ip, r5
 8010bd2:	6123      	str	r3, [r4, #16]
 8010bd4:	f8cd 8000 	str.w	r8, [sp]
 8010bd8:	463b      	mov	r3, r7
 8010bda:	aa03      	add	r2, sp, #12
 8010bdc:	4621      	mov	r1, r4
 8010bde:	4630      	mov	r0, r6
 8010be0:	f7ff fef6 	bl	80109d0 <_printf_common>
 8010be4:	3001      	adds	r0, #1
 8010be6:	d14d      	bne.n	8010c84 <_printf_i+0x1c8>
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bec:	b005      	add	sp, #20
 8010bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bf2:	4839      	ldr	r0, [pc, #228]	; (8010cd8 <_printf_i+0x21c>)
 8010bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010bf8:	6813      	ldr	r3, [r2, #0]
 8010bfa:	6821      	ldr	r1, [r4, #0]
 8010bfc:	1d1d      	adds	r5, r3, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	6015      	str	r5, [r2, #0]
 8010c02:	060a      	lsls	r2, r1, #24
 8010c04:	d50b      	bpl.n	8010c1e <_printf_i+0x162>
 8010c06:	07ca      	lsls	r2, r1, #31
 8010c08:	bf44      	itt	mi
 8010c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8010c0e:	6021      	strmi	r1, [r4, #0]
 8010c10:	b91b      	cbnz	r3, 8010c1a <_printf_i+0x15e>
 8010c12:	6822      	ldr	r2, [r4, #0]
 8010c14:	f022 0220 	bic.w	r2, r2, #32
 8010c18:	6022      	str	r2, [r4, #0]
 8010c1a:	2210      	movs	r2, #16
 8010c1c:	e7b7      	b.n	8010b8e <_printf_i+0xd2>
 8010c1e:	064d      	lsls	r5, r1, #25
 8010c20:	bf48      	it	mi
 8010c22:	b29b      	uxthmi	r3, r3
 8010c24:	e7ef      	b.n	8010c06 <_printf_i+0x14a>
 8010c26:	4665      	mov	r5, ip
 8010c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8010c30:	5cc3      	ldrb	r3, [r0, r3]
 8010c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c36:	460b      	mov	r3, r1
 8010c38:	2900      	cmp	r1, #0
 8010c3a:	d1f5      	bne.n	8010c28 <_printf_i+0x16c>
 8010c3c:	e7b9      	b.n	8010bb2 <_printf_i+0xf6>
 8010c3e:	6813      	ldr	r3, [r2, #0]
 8010c40:	6825      	ldr	r5, [r4, #0]
 8010c42:	6961      	ldr	r1, [r4, #20]
 8010c44:	1d18      	adds	r0, r3, #4
 8010c46:	6010      	str	r0, [r2, #0]
 8010c48:	0628      	lsls	r0, r5, #24
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	d501      	bpl.n	8010c52 <_printf_i+0x196>
 8010c4e:	6019      	str	r1, [r3, #0]
 8010c50:	e002      	b.n	8010c58 <_printf_i+0x19c>
 8010c52:	066a      	lsls	r2, r5, #25
 8010c54:	d5fb      	bpl.n	8010c4e <_printf_i+0x192>
 8010c56:	8019      	strh	r1, [r3, #0]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	6123      	str	r3, [r4, #16]
 8010c5c:	4665      	mov	r5, ip
 8010c5e:	e7b9      	b.n	8010bd4 <_printf_i+0x118>
 8010c60:	6813      	ldr	r3, [r2, #0]
 8010c62:	1d19      	adds	r1, r3, #4
 8010c64:	6011      	str	r1, [r2, #0]
 8010c66:	681d      	ldr	r5, [r3, #0]
 8010c68:	6862      	ldr	r2, [r4, #4]
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f7ef faef 	bl	8000250 <memchr>
 8010c72:	b108      	cbz	r0, 8010c78 <_printf_i+0x1bc>
 8010c74:	1b40      	subs	r0, r0, r5
 8010c76:	6060      	str	r0, [r4, #4]
 8010c78:	6863      	ldr	r3, [r4, #4]
 8010c7a:	6123      	str	r3, [r4, #16]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c82:	e7a7      	b.n	8010bd4 <_printf_i+0x118>
 8010c84:	6923      	ldr	r3, [r4, #16]
 8010c86:	462a      	mov	r2, r5
 8010c88:	4639      	mov	r1, r7
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	47c0      	blx	r8
 8010c8e:	3001      	adds	r0, #1
 8010c90:	d0aa      	beq.n	8010be8 <_printf_i+0x12c>
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	079b      	lsls	r3, r3, #30
 8010c96:	d413      	bmi.n	8010cc0 <_printf_i+0x204>
 8010c98:	68e0      	ldr	r0, [r4, #12]
 8010c9a:	9b03      	ldr	r3, [sp, #12]
 8010c9c:	4298      	cmp	r0, r3
 8010c9e:	bfb8      	it	lt
 8010ca0:	4618      	movlt	r0, r3
 8010ca2:	e7a3      	b.n	8010bec <_printf_i+0x130>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	464a      	mov	r2, r9
 8010ca8:	4639      	mov	r1, r7
 8010caa:	4630      	mov	r0, r6
 8010cac:	47c0      	blx	r8
 8010cae:	3001      	adds	r0, #1
 8010cb0:	d09a      	beq.n	8010be8 <_printf_i+0x12c>
 8010cb2:	3501      	adds	r5, #1
 8010cb4:	68e3      	ldr	r3, [r4, #12]
 8010cb6:	9a03      	ldr	r2, [sp, #12]
 8010cb8:	1a9b      	subs	r3, r3, r2
 8010cba:	42ab      	cmp	r3, r5
 8010cbc:	dcf2      	bgt.n	8010ca4 <_printf_i+0x1e8>
 8010cbe:	e7eb      	b.n	8010c98 <_printf_i+0x1dc>
 8010cc0:	2500      	movs	r5, #0
 8010cc2:	f104 0919 	add.w	r9, r4, #25
 8010cc6:	e7f5      	b.n	8010cb4 <_printf_i+0x1f8>
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1ac      	bne.n	8010c26 <_printf_i+0x16a>
 8010ccc:	7803      	ldrb	r3, [r0, #0]
 8010cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cd6:	e76c      	b.n	8010bb2 <_printf_i+0xf6>
 8010cd8:	08014d7e 	.word	0x08014d7e
 8010cdc:	08014d8f 	.word	0x08014d8f

08010ce0 <_scanf_float>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	469a      	mov	sl, r3
 8010ce6:	688b      	ldr	r3, [r1, #8]
 8010ce8:	4616      	mov	r6, r2
 8010cea:	1e5a      	subs	r2, r3, #1
 8010cec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010cf0:	b087      	sub	sp, #28
 8010cf2:	bf83      	ittte	hi
 8010cf4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010cf8:	189b      	addhi	r3, r3, r2
 8010cfa:	9301      	strhi	r3, [sp, #4]
 8010cfc:	2300      	movls	r3, #0
 8010cfe:	bf86      	itte	hi
 8010d00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d04:	608b      	strhi	r3, [r1, #8]
 8010d06:	9301      	strls	r3, [sp, #4]
 8010d08:	680b      	ldr	r3, [r1, #0]
 8010d0a:	4688      	mov	r8, r1
 8010d0c:	f04f 0b00 	mov.w	fp, #0
 8010d10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d14:	f848 3b1c 	str.w	r3, [r8], #28
 8010d18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	460c      	mov	r4, r1
 8010d20:	4645      	mov	r5, r8
 8010d22:	465a      	mov	r2, fp
 8010d24:	46d9      	mov	r9, fp
 8010d26:	f8cd b008 	str.w	fp, [sp, #8]
 8010d2a:	68a1      	ldr	r1, [r4, #8]
 8010d2c:	b181      	cbz	r1, 8010d50 <_scanf_float+0x70>
 8010d2e:	6833      	ldr	r3, [r6, #0]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b49      	cmp	r3, #73	; 0x49
 8010d34:	d071      	beq.n	8010e1a <_scanf_float+0x13a>
 8010d36:	d84d      	bhi.n	8010dd4 <_scanf_float+0xf4>
 8010d38:	2b39      	cmp	r3, #57	; 0x39
 8010d3a:	d840      	bhi.n	8010dbe <_scanf_float+0xde>
 8010d3c:	2b31      	cmp	r3, #49	; 0x31
 8010d3e:	f080 8088 	bcs.w	8010e52 <_scanf_float+0x172>
 8010d42:	2b2d      	cmp	r3, #45	; 0x2d
 8010d44:	f000 8090 	beq.w	8010e68 <_scanf_float+0x188>
 8010d48:	d815      	bhi.n	8010d76 <_scanf_float+0x96>
 8010d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8010d4c:	f000 808c 	beq.w	8010e68 <_scanf_float+0x188>
 8010d50:	f1b9 0f00 	cmp.w	r9, #0
 8010d54:	d003      	beq.n	8010d5e <_scanf_float+0x7e>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d5c:	6023      	str	r3, [r4, #0]
 8010d5e:	3a01      	subs	r2, #1
 8010d60:	2a01      	cmp	r2, #1
 8010d62:	f200 80ea 	bhi.w	8010f3a <_scanf_float+0x25a>
 8010d66:	4545      	cmp	r5, r8
 8010d68:	f200 80dc 	bhi.w	8010f24 <_scanf_float+0x244>
 8010d6c:	2601      	movs	r6, #1
 8010d6e:	4630      	mov	r0, r6
 8010d70:	b007      	add	sp, #28
 8010d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d76:	2b2e      	cmp	r3, #46	; 0x2e
 8010d78:	f000 809f 	beq.w	8010eba <_scanf_float+0x1da>
 8010d7c:	2b30      	cmp	r3, #48	; 0x30
 8010d7e:	d1e7      	bne.n	8010d50 <_scanf_float+0x70>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010d86:	d064      	beq.n	8010e52 <_scanf_float+0x172>
 8010d88:	9b01      	ldr	r3, [sp, #4]
 8010d8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010d8e:	6020      	str	r0, [r4, #0]
 8010d90:	f109 0901 	add.w	r9, r9, #1
 8010d94:	b11b      	cbz	r3, 8010d9e <_scanf_float+0xbe>
 8010d96:	3b01      	subs	r3, #1
 8010d98:	3101      	adds	r1, #1
 8010d9a:	9301      	str	r3, [sp, #4]
 8010d9c:	60a1      	str	r1, [r4, #8]
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	3b01      	subs	r3, #1
 8010da2:	60a3      	str	r3, [r4, #8]
 8010da4:	6923      	ldr	r3, [r4, #16]
 8010da6:	3301      	adds	r3, #1
 8010da8:	6123      	str	r3, [r4, #16]
 8010daa:	6873      	ldr	r3, [r6, #4]
 8010dac:	3b01      	subs	r3, #1
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	6073      	str	r3, [r6, #4]
 8010db2:	f340 80ac 	ble.w	8010f0e <_scanf_float+0x22e>
 8010db6:	6833      	ldr	r3, [r6, #0]
 8010db8:	3301      	adds	r3, #1
 8010dba:	6033      	str	r3, [r6, #0]
 8010dbc:	e7b5      	b.n	8010d2a <_scanf_float+0x4a>
 8010dbe:	2b45      	cmp	r3, #69	; 0x45
 8010dc0:	f000 8085 	beq.w	8010ece <_scanf_float+0x1ee>
 8010dc4:	2b46      	cmp	r3, #70	; 0x46
 8010dc6:	d06a      	beq.n	8010e9e <_scanf_float+0x1be>
 8010dc8:	2b41      	cmp	r3, #65	; 0x41
 8010dca:	d1c1      	bne.n	8010d50 <_scanf_float+0x70>
 8010dcc:	2a01      	cmp	r2, #1
 8010dce:	d1bf      	bne.n	8010d50 <_scanf_float+0x70>
 8010dd0:	2202      	movs	r2, #2
 8010dd2:	e046      	b.n	8010e62 <_scanf_float+0x182>
 8010dd4:	2b65      	cmp	r3, #101	; 0x65
 8010dd6:	d07a      	beq.n	8010ece <_scanf_float+0x1ee>
 8010dd8:	d818      	bhi.n	8010e0c <_scanf_float+0x12c>
 8010dda:	2b54      	cmp	r3, #84	; 0x54
 8010ddc:	d066      	beq.n	8010eac <_scanf_float+0x1cc>
 8010dde:	d811      	bhi.n	8010e04 <_scanf_float+0x124>
 8010de0:	2b4e      	cmp	r3, #78	; 0x4e
 8010de2:	d1b5      	bne.n	8010d50 <_scanf_float+0x70>
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	d146      	bne.n	8010e76 <_scanf_float+0x196>
 8010de8:	f1b9 0f00 	cmp.w	r9, #0
 8010dec:	d145      	bne.n	8010e7a <_scanf_float+0x19a>
 8010dee:	6821      	ldr	r1, [r4, #0]
 8010df0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010df4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010df8:	d13f      	bne.n	8010e7a <_scanf_float+0x19a>
 8010dfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010dfe:	6021      	str	r1, [r4, #0]
 8010e00:	2201      	movs	r2, #1
 8010e02:	e02e      	b.n	8010e62 <_scanf_float+0x182>
 8010e04:	2b59      	cmp	r3, #89	; 0x59
 8010e06:	d01e      	beq.n	8010e46 <_scanf_float+0x166>
 8010e08:	2b61      	cmp	r3, #97	; 0x61
 8010e0a:	e7de      	b.n	8010dca <_scanf_float+0xea>
 8010e0c:	2b6e      	cmp	r3, #110	; 0x6e
 8010e0e:	d0e9      	beq.n	8010de4 <_scanf_float+0x104>
 8010e10:	d815      	bhi.n	8010e3e <_scanf_float+0x15e>
 8010e12:	2b66      	cmp	r3, #102	; 0x66
 8010e14:	d043      	beq.n	8010e9e <_scanf_float+0x1be>
 8010e16:	2b69      	cmp	r3, #105	; 0x69
 8010e18:	d19a      	bne.n	8010d50 <_scanf_float+0x70>
 8010e1a:	f1bb 0f00 	cmp.w	fp, #0
 8010e1e:	d138      	bne.n	8010e92 <_scanf_float+0x1b2>
 8010e20:	f1b9 0f00 	cmp.w	r9, #0
 8010e24:	d197      	bne.n	8010d56 <_scanf_float+0x76>
 8010e26:	6821      	ldr	r1, [r4, #0]
 8010e28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010e2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010e30:	d195      	bne.n	8010d5e <_scanf_float+0x7e>
 8010e32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e36:	6021      	str	r1, [r4, #0]
 8010e38:	f04f 0b01 	mov.w	fp, #1
 8010e3c:	e011      	b.n	8010e62 <_scanf_float+0x182>
 8010e3e:	2b74      	cmp	r3, #116	; 0x74
 8010e40:	d034      	beq.n	8010eac <_scanf_float+0x1cc>
 8010e42:	2b79      	cmp	r3, #121	; 0x79
 8010e44:	d184      	bne.n	8010d50 <_scanf_float+0x70>
 8010e46:	f1bb 0f07 	cmp.w	fp, #7
 8010e4a:	d181      	bne.n	8010d50 <_scanf_float+0x70>
 8010e4c:	f04f 0b08 	mov.w	fp, #8
 8010e50:	e007      	b.n	8010e62 <_scanf_float+0x182>
 8010e52:	eb12 0f0b 	cmn.w	r2, fp
 8010e56:	f47f af7b 	bne.w	8010d50 <_scanf_float+0x70>
 8010e5a:	6821      	ldr	r1, [r4, #0]
 8010e5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010e60:	6021      	str	r1, [r4, #0]
 8010e62:	702b      	strb	r3, [r5, #0]
 8010e64:	3501      	adds	r5, #1
 8010e66:	e79a      	b.n	8010d9e <_scanf_float+0xbe>
 8010e68:	6821      	ldr	r1, [r4, #0]
 8010e6a:	0608      	lsls	r0, r1, #24
 8010e6c:	f57f af70 	bpl.w	8010d50 <_scanf_float+0x70>
 8010e70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010e74:	e7f4      	b.n	8010e60 <_scanf_float+0x180>
 8010e76:	2a02      	cmp	r2, #2
 8010e78:	d047      	beq.n	8010f0a <_scanf_float+0x22a>
 8010e7a:	f1bb 0f01 	cmp.w	fp, #1
 8010e7e:	d003      	beq.n	8010e88 <_scanf_float+0x1a8>
 8010e80:	f1bb 0f04 	cmp.w	fp, #4
 8010e84:	f47f af64 	bne.w	8010d50 <_scanf_float+0x70>
 8010e88:	f10b 0b01 	add.w	fp, fp, #1
 8010e8c:	fa5f fb8b 	uxtb.w	fp, fp
 8010e90:	e7e7      	b.n	8010e62 <_scanf_float+0x182>
 8010e92:	f1bb 0f03 	cmp.w	fp, #3
 8010e96:	d0f7      	beq.n	8010e88 <_scanf_float+0x1a8>
 8010e98:	f1bb 0f05 	cmp.w	fp, #5
 8010e9c:	e7f2      	b.n	8010e84 <_scanf_float+0x1a4>
 8010e9e:	f1bb 0f02 	cmp.w	fp, #2
 8010ea2:	f47f af55 	bne.w	8010d50 <_scanf_float+0x70>
 8010ea6:	f04f 0b03 	mov.w	fp, #3
 8010eaa:	e7da      	b.n	8010e62 <_scanf_float+0x182>
 8010eac:	f1bb 0f06 	cmp.w	fp, #6
 8010eb0:	f47f af4e 	bne.w	8010d50 <_scanf_float+0x70>
 8010eb4:	f04f 0b07 	mov.w	fp, #7
 8010eb8:	e7d3      	b.n	8010e62 <_scanf_float+0x182>
 8010eba:	6821      	ldr	r1, [r4, #0]
 8010ebc:	0588      	lsls	r0, r1, #22
 8010ebe:	f57f af47 	bpl.w	8010d50 <_scanf_float+0x70>
 8010ec2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010ec6:	6021      	str	r1, [r4, #0]
 8010ec8:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ecc:	e7c9      	b.n	8010e62 <_scanf_float+0x182>
 8010ece:	6821      	ldr	r1, [r4, #0]
 8010ed0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010ed4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010ed8:	d006      	beq.n	8010ee8 <_scanf_float+0x208>
 8010eda:	0548      	lsls	r0, r1, #21
 8010edc:	f57f af38 	bpl.w	8010d50 <_scanf_float+0x70>
 8010ee0:	f1b9 0f00 	cmp.w	r9, #0
 8010ee4:	f43f af3b 	beq.w	8010d5e <_scanf_float+0x7e>
 8010ee8:	0588      	lsls	r0, r1, #22
 8010eea:	bf58      	it	pl
 8010eec:	9802      	ldrpl	r0, [sp, #8]
 8010eee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010ef2:	bf58      	it	pl
 8010ef4:	eba9 0000 	subpl.w	r0, r9, r0
 8010ef8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010efc:	bf58      	it	pl
 8010efe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010f02:	6021      	str	r1, [r4, #0]
 8010f04:	f04f 0900 	mov.w	r9, #0
 8010f08:	e7ab      	b.n	8010e62 <_scanf_float+0x182>
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	e7a9      	b.n	8010e62 <_scanf_float+0x182>
 8010f0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f12:	9205      	str	r2, [sp, #20]
 8010f14:	4631      	mov	r1, r6
 8010f16:	4638      	mov	r0, r7
 8010f18:	4798      	blx	r3
 8010f1a:	9a05      	ldr	r2, [sp, #20]
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	f43f af04 	beq.w	8010d2a <_scanf_float+0x4a>
 8010f22:	e715      	b.n	8010d50 <_scanf_float+0x70>
 8010f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f2c:	4632      	mov	r2, r6
 8010f2e:	4638      	mov	r0, r7
 8010f30:	4798      	blx	r3
 8010f32:	6923      	ldr	r3, [r4, #16]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	6123      	str	r3, [r4, #16]
 8010f38:	e715      	b.n	8010d66 <_scanf_float+0x86>
 8010f3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f3e:	2b06      	cmp	r3, #6
 8010f40:	d80a      	bhi.n	8010f58 <_scanf_float+0x278>
 8010f42:	f1bb 0f02 	cmp.w	fp, #2
 8010f46:	d966      	bls.n	8011016 <_scanf_float+0x336>
 8010f48:	f1ab 0b03 	sub.w	fp, fp, #3
 8010f4c:	fa5f fb8b 	uxtb.w	fp, fp
 8010f50:	eba5 0b0b 	sub.w	fp, r5, fp
 8010f54:	455d      	cmp	r5, fp
 8010f56:	d149      	bne.n	8010fec <_scanf_float+0x30c>
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	05da      	lsls	r2, r3, #23
 8010f5c:	d51f      	bpl.n	8010f9e <_scanf_float+0x2be>
 8010f5e:	055b      	lsls	r3, r3, #21
 8010f60:	d466      	bmi.n	8011030 <_scanf_float+0x350>
 8010f62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	2965      	cmp	r1, #101	; 0x65
 8010f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	d00d      	beq.n	8010f92 <_scanf_float+0x2b2>
 8010f76:	2945      	cmp	r1, #69	; 0x45
 8010f78:	d00b      	beq.n	8010f92 <_scanf_float+0x2b2>
 8010f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f7e:	4632      	mov	r2, r6
 8010f80:	4638      	mov	r0, r7
 8010f82:	4798      	blx	r3
 8010f84:	6923      	ldr	r3, [r4, #16]
 8010f86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8010f90:	6123      	str	r3, [r4, #16]
 8010f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f96:	4632      	mov	r2, r6
 8010f98:	4638      	mov	r0, r7
 8010f9a:	4798      	blx	r3
 8010f9c:	465d      	mov	r5, fp
 8010f9e:	6826      	ldr	r6, [r4, #0]
 8010fa0:	f016 0610 	ands.w	r6, r6, #16
 8010fa4:	d170      	bne.n	8011088 <_scanf_float+0x3a8>
 8010fa6:	702e      	strb	r6, [r5, #0]
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fb2:	d140      	bne.n	8011036 <_scanf_float+0x356>
 8010fb4:	9b02      	ldr	r3, [sp, #8]
 8010fb6:	eba9 0303 	sub.w	r3, r9, r3
 8010fba:	425a      	negs	r2, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d147      	bne.n	8011050 <_scanf_float+0x370>
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	4641      	mov	r1, r8
 8010fc6:	f000 ff3b 	bl	8011e40 <_strtod_r>
 8010fca:	6820      	ldr	r0, [r4, #0]
 8010fcc:	f8da 3000 	ldr.w	r3, [sl]
 8010fd0:	f010 0f02 	tst.w	r0, #2
 8010fd4:	f103 0204 	add.w	r2, r3, #4
 8010fd8:	f8ca 2000 	str.w	r2, [sl]
 8010fdc:	d043      	beq.n	8011066 <_scanf_float+0x386>
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	ed83 0b00 	vstr	d0, [r3]
 8010fe4:	68e3      	ldr	r3, [r4, #12]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	60e3      	str	r3, [r4, #12]
 8010fea:	e6c0      	b.n	8010d6e <_scanf_float+0x8e>
 8010fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ff0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ff4:	4632      	mov	r2, r6
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	4798      	blx	r3
 8010ffa:	6923      	ldr	r3, [r4, #16]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	6123      	str	r3, [r4, #16]
 8011000:	e7a8      	b.n	8010f54 <_scanf_float+0x274>
 8011002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011006:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801100a:	4632      	mov	r2, r6
 801100c:	4638      	mov	r0, r7
 801100e:	4798      	blx	r3
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	3b01      	subs	r3, #1
 8011014:	6123      	str	r3, [r4, #16]
 8011016:	4545      	cmp	r5, r8
 8011018:	d8f3      	bhi.n	8011002 <_scanf_float+0x322>
 801101a:	e6a7      	b.n	8010d6c <_scanf_float+0x8c>
 801101c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011020:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011024:	4632      	mov	r2, r6
 8011026:	4638      	mov	r0, r7
 8011028:	4798      	blx	r3
 801102a:	6923      	ldr	r3, [r4, #16]
 801102c:	3b01      	subs	r3, #1
 801102e:	6123      	str	r3, [r4, #16]
 8011030:	4545      	cmp	r5, r8
 8011032:	d8f3      	bhi.n	801101c <_scanf_float+0x33c>
 8011034:	e69a      	b.n	8010d6c <_scanf_float+0x8c>
 8011036:	9b03      	ldr	r3, [sp, #12]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d0c1      	beq.n	8010fc0 <_scanf_float+0x2e0>
 801103c:	9904      	ldr	r1, [sp, #16]
 801103e:	230a      	movs	r3, #10
 8011040:	4632      	mov	r2, r6
 8011042:	3101      	adds	r1, #1
 8011044:	4638      	mov	r0, r7
 8011046:	f000 ff87 	bl	8011f58 <_strtol_r>
 801104a:	9b03      	ldr	r3, [sp, #12]
 801104c:	9d04      	ldr	r5, [sp, #16]
 801104e:	1ac2      	subs	r2, r0, r3
 8011050:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011054:	429d      	cmp	r5, r3
 8011056:	bf28      	it	cs
 8011058:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801105c:	490b      	ldr	r1, [pc, #44]	; (801108c <_scanf_float+0x3ac>)
 801105e:	4628      	mov	r0, r5
 8011060:	f000 f8ec 	bl	801123c <siprintf>
 8011064:	e7ac      	b.n	8010fc0 <_scanf_float+0x2e0>
 8011066:	f010 0004 	ands.w	r0, r0, #4
 801106a:	d1b8      	bne.n	8010fde <_scanf_float+0x2fe>
 801106c:	eeb4 0b40 	vcmp.f64	d0, d0
 8011070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011074:	681d      	ldr	r5, [r3, #0]
 8011076:	d704      	bvc.n	8011082 <_scanf_float+0x3a2>
 8011078:	f000 f896 	bl	80111a8 <nanf>
 801107c:	ed85 0a00 	vstr	s0, [r5]
 8011080:	e7b0      	b.n	8010fe4 <_scanf_float+0x304>
 8011082:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011086:	e7f9      	b.n	801107c <_scanf_float+0x39c>
 8011088:	2600      	movs	r6, #0
 801108a:	e670      	b.n	8010d6e <_scanf_float+0x8e>
 801108c:	08014da0 	.word	0x08014da0

08011090 <iprintf>:
 8011090:	b40f      	push	{r0, r1, r2, r3}
 8011092:	4b0a      	ldr	r3, [pc, #40]	; (80110bc <iprintf+0x2c>)
 8011094:	b513      	push	{r0, r1, r4, lr}
 8011096:	681c      	ldr	r4, [r3, #0]
 8011098:	b124      	cbz	r4, 80110a4 <iprintf+0x14>
 801109a:	69a3      	ldr	r3, [r4, #24]
 801109c:	b913      	cbnz	r3, 80110a4 <iprintf+0x14>
 801109e:	4620      	mov	r0, r4
 80110a0:	f001 fef6 	bl	8012e90 <__sinit>
 80110a4:	ab05      	add	r3, sp, #20
 80110a6:	9a04      	ldr	r2, [sp, #16]
 80110a8:	68a1      	ldr	r1, [r4, #8]
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	4620      	mov	r0, r4
 80110ae:	f003 f8a7 	bl	8014200 <_vfiprintf_r>
 80110b2:	b002      	add	sp, #8
 80110b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110b8:	b004      	add	sp, #16
 80110ba:	4770      	bx	lr
 80110bc:	20000378 	.word	0x20000378

080110c0 <_puts_r>:
 80110c0:	b570      	push	{r4, r5, r6, lr}
 80110c2:	460e      	mov	r6, r1
 80110c4:	4605      	mov	r5, r0
 80110c6:	b118      	cbz	r0, 80110d0 <_puts_r+0x10>
 80110c8:	6983      	ldr	r3, [r0, #24]
 80110ca:	b90b      	cbnz	r3, 80110d0 <_puts_r+0x10>
 80110cc:	f001 fee0 	bl	8012e90 <__sinit>
 80110d0:	69ab      	ldr	r3, [r5, #24]
 80110d2:	68ac      	ldr	r4, [r5, #8]
 80110d4:	b913      	cbnz	r3, 80110dc <_puts_r+0x1c>
 80110d6:	4628      	mov	r0, r5
 80110d8:	f001 feda 	bl	8012e90 <__sinit>
 80110dc:	4b23      	ldr	r3, [pc, #140]	; (801116c <_puts_r+0xac>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	d117      	bne.n	8011112 <_puts_r+0x52>
 80110e2:	686c      	ldr	r4, [r5, #4]
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	071b      	lsls	r3, r3, #28
 80110e8:	d51d      	bpl.n	8011126 <_puts_r+0x66>
 80110ea:	6923      	ldr	r3, [r4, #16]
 80110ec:	b1db      	cbz	r3, 8011126 <_puts_r+0x66>
 80110ee:	3e01      	subs	r6, #1
 80110f0:	68a3      	ldr	r3, [r4, #8]
 80110f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80110f6:	3b01      	subs	r3, #1
 80110f8:	60a3      	str	r3, [r4, #8]
 80110fa:	b9e9      	cbnz	r1, 8011138 <_puts_r+0x78>
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	da2e      	bge.n	801115e <_puts_r+0x9e>
 8011100:	4622      	mov	r2, r4
 8011102:	210a      	movs	r1, #10
 8011104:	4628      	mov	r0, r5
 8011106:	f000 ff39 	bl	8011f7c <__swbuf_r>
 801110a:	3001      	adds	r0, #1
 801110c:	d011      	beq.n	8011132 <_puts_r+0x72>
 801110e:	200a      	movs	r0, #10
 8011110:	e011      	b.n	8011136 <_puts_r+0x76>
 8011112:	4b17      	ldr	r3, [pc, #92]	; (8011170 <_puts_r+0xb0>)
 8011114:	429c      	cmp	r4, r3
 8011116:	d101      	bne.n	801111c <_puts_r+0x5c>
 8011118:	68ac      	ldr	r4, [r5, #8]
 801111a:	e7e3      	b.n	80110e4 <_puts_r+0x24>
 801111c:	4b15      	ldr	r3, [pc, #84]	; (8011174 <_puts_r+0xb4>)
 801111e:	429c      	cmp	r4, r3
 8011120:	bf08      	it	eq
 8011122:	68ec      	ldreq	r4, [r5, #12]
 8011124:	e7de      	b.n	80110e4 <_puts_r+0x24>
 8011126:	4621      	mov	r1, r4
 8011128:	4628      	mov	r0, r5
 801112a:	f000 ff79 	bl	8012020 <__swsetup_r>
 801112e:	2800      	cmp	r0, #0
 8011130:	d0dd      	beq.n	80110ee <_puts_r+0x2e>
 8011132:	f04f 30ff 	mov.w	r0, #4294967295
 8011136:	bd70      	pop	{r4, r5, r6, pc}
 8011138:	2b00      	cmp	r3, #0
 801113a:	da04      	bge.n	8011146 <_puts_r+0x86>
 801113c:	69a2      	ldr	r2, [r4, #24]
 801113e:	429a      	cmp	r2, r3
 8011140:	dc06      	bgt.n	8011150 <_puts_r+0x90>
 8011142:	290a      	cmp	r1, #10
 8011144:	d004      	beq.n	8011150 <_puts_r+0x90>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	6022      	str	r2, [r4, #0]
 801114c:	7019      	strb	r1, [r3, #0]
 801114e:	e7cf      	b.n	80110f0 <_puts_r+0x30>
 8011150:	4622      	mov	r2, r4
 8011152:	4628      	mov	r0, r5
 8011154:	f000 ff12 	bl	8011f7c <__swbuf_r>
 8011158:	3001      	adds	r0, #1
 801115a:	d1c9      	bne.n	80110f0 <_puts_r+0x30>
 801115c:	e7e9      	b.n	8011132 <_puts_r+0x72>
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	200a      	movs	r0, #10
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	6022      	str	r2, [r4, #0]
 8011166:	7018      	strb	r0, [r3, #0]
 8011168:	e7e5      	b.n	8011136 <_puts_r+0x76>
 801116a:	bf00      	nop
 801116c:	08014e28 	.word	0x08014e28
 8011170:	08014e48 	.word	0x08014e48
 8011174:	08014e08 	.word	0x08014e08

08011178 <puts>:
 8011178:	4b02      	ldr	r3, [pc, #8]	; (8011184 <puts+0xc>)
 801117a:	4601      	mov	r1, r0
 801117c:	6818      	ldr	r0, [r3, #0]
 801117e:	f7ff bf9f 	b.w	80110c0 <_puts_r>
 8011182:	bf00      	nop
 8011184:	20000378 	.word	0x20000378

08011188 <_sbrk_r>:
 8011188:	b538      	push	{r3, r4, r5, lr}
 801118a:	4c06      	ldr	r4, [pc, #24]	; (80111a4 <_sbrk_r+0x1c>)
 801118c:	2300      	movs	r3, #0
 801118e:	4605      	mov	r5, r0
 8011190:	4608      	mov	r0, r1
 8011192:	6023      	str	r3, [r4, #0]
 8011194:	f003 fa94 	bl	80146c0 <_sbrk>
 8011198:	1c43      	adds	r3, r0, #1
 801119a:	d102      	bne.n	80111a2 <_sbrk_r+0x1a>
 801119c:	6823      	ldr	r3, [r4, #0]
 801119e:	b103      	cbz	r3, 80111a2 <_sbrk_r+0x1a>
 80111a0:	602b      	str	r3, [r5, #0]
 80111a2:	bd38      	pop	{r3, r4, r5, pc}
 80111a4:	20015e9c 	.word	0x20015e9c

080111a8 <nanf>:
 80111a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80111b0 <nanf+0x8>
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	7fc00000 	.word	0x7fc00000

080111b4 <_raise_r>:
 80111b4:	291f      	cmp	r1, #31
 80111b6:	b538      	push	{r3, r4, r5, lr}
 80111b8:	4604      	mov	r4, r0
 80111ba:	460d      	mov	r5, r1
 80111bc:	d904      	bls.n	80111c8 <_raise_r+0x14>
 80111be:	2316      	movs	r3, #22
 80111c0:	6003      	str	r3, [r0, #0]
 80111c2:	f04f 30ff 	mov.w	r0, #4294967295
 80111c6:	bd38      	pop	{r3, r4, r5, pc}
 80111c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80111ca:	b112      	cbz	r2, 80111d2 <_raise_r+0x1e>
 80111cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80111d0:	b94b      	cbnz	r3, 80111e6 <_raise_r+0x32>
 80111d2:	4620      	mov	r0, r4
 80111d4:	f000 f830 	bl	8011238 <_getpid_r>
 80111d8:	462a      	mov	r2, r5
 80111da:	4601      	mov	r1, r0
 80111dc:	4620      	mov	r0, r4
 80111de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e2:	f000 b817 	b.w	8011214 <_kill_r>
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d00a      	beq.n	8011200 <_raise_r+0x4c>
 80111ea:	1c59      	adds	r1, r3, #1
 80111ec:	d103      	bne.n	80111f6 <_raise_r+0x42>
 80111ee:	2316      	movs	r3, #22
 80111f0:	6003      	str	r3, [r0, #0]
 80111f2:	2001      	movs	r0, #1
 80111f4:	e7e7      	b.n	80111c6 <_raise_r+0x12>
 80111f6:	2400      	movs	r4, #0
 80111f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111fc:	4628      	mov	r0, r5
 80111fe:	4798      	blx	r3
 8011200:	2000      	movs	r0, #0
 8011202:	e7e0      	b.n	80111c6 <_raise_r+0x12>

08011204 <raise>:
 8011204:	4b02      	ldr	r3, [pc, #8]	; (8011210 <raise+0xc>)
 8011206:	4601      	mov	r1, r0
 8011208:	6818      	ldr	r0, [r3, #0]
 801120a:	f7ff bfd3 	b.w	80111b4 <_raise_r>
 801120e:	bf00      	nop
 8011210:	20000378 	.word	0x20000378

08011214 <_kill_r>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	4c07      	ldr	r4, [pc, #28]	; (8011234 <_kill_r+0x20>)
 8011218:	2300      	movs	r3, #0
 801121a:	4605      	mov	r5, r0
 801121c:	4608      	mov	r0, r1
 801121e:	4611      	mov	r1, r2
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	f003 fa35 	bl	8014690 <_kill>
 8011226:	1c43      	adds	r3, r0, #1
 8011228:	d102      	bne.n	8011230 <_kill_r+0x1c>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	b103      	cbz	r3, 8011230 <_kill_r+0x1c>
 801122e:	602b      	str	r3, [r5, #0]
 8011230:	bd38      	pop	{r3, r4, r5, pc}
 8011232:	bf00      	nop
 8011234:	20015e9c 	.word	0x20015e9c

08011238 <_getpid_r>:
 8011238:	f003 ba1a 	b.w	8014670 <_getpid>

0801123c <siprintf>:
 801123c:	b40e      	push	{r1, r2, r3}
 801123e:	b500      	push	{lr}
 8011240:	b09c      	sub	sp, #112	; 0x70
 8011242:	ab1d      	add	r3, sp, #116	; 0x74
 8011244:	9002      	str	r0, [sp, #8]
 8011246:	9006      	str	r0, [sp, #24]
 8011248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801124c:	4809      	ldr	r0, [pc, #36]	; (8011274 <siprintf+0x38>)
 801124e:	9107      	str	r1, [sp, #28]
 8011250:	9104      	str	r1, [sp, #16]
 8011252:	4909      	ldr	r1, [pc, #36]	; (8011278 <siprintf+0x3c>)
 8011254:	f853 2b04 	ldr.w	r2, [r3], #4
 8011258:	9105      	str	r1, [sp, #20]
 801125a:	6800      	ldr	r0, [r0, #0]
 801125c:	9301      	str	r3, [sp, #4]
 801125e:	a902      	add	r1, sp, #8
 8011260:	f002 feac 	bl	8013fbc <_svfiprintf_r>
 8011264:	9b02      	ldr	r3, [sp, #8]
 8011266:	2200      	movs	r2, #0
 8011268:	701a      	strb	r2, [r3, #0]
 801126a:	b01c      	add	sp, #112	; 0x70
 801126c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011270:	b003      	add	sp, #12
 8011272:	4770      	bx	lr
 8011274:	20000378 	.word	0x20000378
 8011278:	ffff0208 	.word	0xffff0208

0801127c <sulp>:
 801127c:	b570      	push	{r4, r5, r6, lr}
 801127e:	4604      	mov	r4, r0
 8011280:	460d      	mov	r5, r1
 8011282:	4616      	mov	r6, r2
 8011284:	ec45 4b10 	vmov	d0, r4, r5
 8011288:	f002 fd0a 	bl	8013ca0 <__ulp>
 801128c:	b17e      	cbz	r6, 80112ae <sulp+0x32>
 801128e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011296:	2b00      	cmp	r3, #0
 8011298:	dd09      	ble.n	80112ae <sulp+0x32>
 801129a:	051b      	lsls	r3, r3, #20
 801129c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80112a0:	2000      	movs	r0, #0
 80112a2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80112a6:	ec41 0b17 	vmov	d7, r0, r1
 80112aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80112ae:	bd70      	pop	{r4, r5, r6, pc}

080112b0 <_strtod_l>:
 80112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	ed2d 8b0c 	vpush	{d8-d13}
 80112b8:	4698      	mov	r8, r3
 80112ba:	b09d      	sub	sp, #116	; 0x74
 80112bc:	2300      	movs	r3, #0
 80112be:	4604      	mov	r4, r0
 80112c0:	4640      	mov	r0, r8
 80112c2:	460e      	mov	r6, r1
 80112c4:	9214      	str	r2, [sp, #80]	; 0x50
 80112c6:	9318      	str	r3, [sp, #96]	; 0x60
 80112c8:	f002 f995 	bl	80135f6 <__localeconv_l>
 80112cc:	4681      	mov	r9, r0
 80112ce:	6800      	ldr	r0, [r0, #0]
 80112d0:	f7ee ffb6 	bl	8000240 <strlen>
 80112d4:	f04f 0a00 	mov.w	sl, #0
 80112d8:	4607      	mov	r7, r0
 80112da:	f04f 0b00 	mov.w	fp, #0
 80112de:	9617      	str	r6, [sp, #92]	; 0x5c
 80112e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112e2:	781a      	ldrb	r2, [r3, #0]
 80112e4:	2a0d      	cmp	r2, #13
 80112e6:	d834      	bhi.n	8011352 <_strtod_l+0xa2>
 80112e8:	2a09      	cmp	r2, #9
 80112ea:	d238      	bcs.n	801135e <_strtod_l+0xae>
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	d040      	beq.n	8011372 <_strtod_l+0xc2>
 80112f0:	2300      	movs	r3, #0
 80112f2:	930d      	str	r3, [sp, #52]	; 0x34
 80112f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80112f6:	782b      	ldrb	r3, [r5, #0]
 80112f8:	2b30      	cmp	r3, #48	; 0x30
 80112fa:	f040 80b3 	bne.w	8011464 <_strtod_l+0x1b4>
 80112fe:	786b      	ldrb	r3, [r5, #1]
 8011300:	2b58      	cmp	r3, #88	; 0x58
 8011302:	d001      	beq.n	8011308 <_strtod_l+0x58>
 8011304:	2b78      	cmp	r3, #120	; 0x78
 8011306:	d169      	bne.n	80113dc <_strtod_l+0x12c>
 8011308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	ab18      	add	r3, sp, #96	; 0x60
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	f8cd 8008 	str.w	r8, [sp, #8]
 8011314:	ab19      	add	r3, sp, #100	; 0x64
 8011316:	4a8f      	ldr	r2, [pc, #572]	; (8011554 <_strtod_l+0x2a4>)
 8011318:	a917      	add	r1, sp, #92	; 0x5c
 801131a:	4620      	mov	r0, r4
 801131c:	f001 fe91 	bl	8013042 <__gethex>
 8011320:	f010 0607 	ands.w	r6, r0, #7
 8011324:	4607      	mov	r7, r0
 8011326:	d005      	beq.n	8011334 <_strtod_l+0x84>
 8011328:	2e06      	cmp	r6, #6
 801132a:	d12c      	bne.n	8011386 <_strtod_l+0xd6>
 801132c:	3501      	adds	r5, #1
 801132e:	2300      	movs	r3, #0
 8011330:	9517      	str	r5, [sp, #92]	; 0x5c
 8011332:	930d      	str	r3, [sp, #52]	; 0x34
 8011334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011336:	2b00      	cmp	r3, #0
 8011338:	f040 855e 	bne.w	8011df8 <_strtod_l+0xb48>
 801133c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801133e:	b1eb      	cbz	r3, 801137c <_strtod_l+0xcc>
 8011340:	ec4b ab17 	vmov	d7, sl, fp
 8011344:	eeb1 0b47 	vneg.f64	d0, d7
 8011348:	b01d      	add	sp, #116	; 0x74
 801134a:	ecbd 8b0c 	vpop	{d8-d13}
 801134e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011352:	2a2b      	cmp	r2, #43	; 0x2b
 8011354:	d015      	beq.n	8011382 <_strtod_l+0xd2>
 8011356:	2a2d      	cmp	r2, #45	; 0x2d
 8011358:	d004      	beq.n	8011364 <_strtod_l+0xb4>
 801135a:	2a20      	cmp	r2, #32
 801135c:	d1c8      	bne.n	80112f0 <_strtod_l+0x40>
 801135e:	3301      	adds	r3, #1
 8011360:	9317      	str	r3, [sp, #92]	; 0x5c
 8011362:	e7bd      	b.n	80112e0 <_strtod_l+0x30>
 8011364:	2201      	movs	r2, #1
 8011366:	920d      	str	r2, [sp, #52]	; 0x34
 8011368:	1c5a      	adds	r2, r3, #1
 801136a:	9217      	str	r2, [sp, #92]	; 0x5c
 801136c:	785b      	ldrb	r3, [r3, #1]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d1c0      	bne.n	80112f4 <_strtod_l+0x44>
 8011372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011374:	9617      	str	r6, [sp, #92]	; 0x5c
 8011376:	2b00      	cmp	r3, #0
 8011378:	f040 853c 	bne.w	8011df4 <_strtod_l+0xb44>
 801137c:	ec4b ab10 	vmov	d0, sl, fp
 8011380:	e7e2      	b.n	8011348 <_strtod_l+0x98>
 8011382:	2200      	movs	r2, #0
 8011384:	e7ef      	b.n	8011366 <_strtod_l+0xb6>
 8011386:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011388:	b13a      	cbz	r2, 801139a <_strtod_l+0xea>
 801138a:	2135      	movs	r1, #53	; 0x35
 801138c:	a81a      	add	r0, sp, #104	; 0x68
 801138e:	f002 fd80 	bl	8013e92 <__copybits>
 8011392:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011394:	4620      	mov	r0, r4
 8011396:	f002 f9eb 	bl	8013770 <_Bfree>
 801139a:	3e01      	subs	r6, #1
 801139c:	2e04      	cmp	r6, #4
 801139e:	d806      	bhi.n	80113ae <_strtod_l+0xfe>
 80113a0:	e8df f006 	tbb	[pc, r6]
 80113a4:	1714030a 	.word	0x1714030a
 80113a8:	0a          	.byte	0x0a
 80113a9:	00          	.byte	0x00
 80113aa:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80113ae:	073b      	lsls	r3, r7, #28
 80113b0:	d5c0      	bpl.n	8011334 <_strtod_l+0x84>
 80113b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80113b6:	e7bd      	b.n	8011334 <_strtod_l+0x84>
 80113b8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80113bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80113be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80113c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80113c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80113ca:	e7f0      	b.n	80113ae <_strtod_l+0xfe>
 80113cc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011558 <_strtod_l+0x2a8>
 80113d0:	e7ed      	b.n	80113ae <_strtod_l+0xfe>
 80113d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80113d6:	f04f 3aff 	mov.w	sl, #4294967295
 80113da:	e7e8      	b.n	80113ae <_strtod_l+0xfe>
 80113dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113de:	1c5a      	adds	r2, r3, #1
 80113e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80113e2:	785b      	ldrb	r3, [r3, #1]
 80113e4:	2b30      	cmp	r3, #48	; 0x30
 80113e6:	d0f9      	beq.n	80113dc <_strtod_l+0x12c>
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d0a3      	beq.n	8011334 <_strtod_l+0x84>
 80113ec:	2301      	movs	r3, #1
 80113ee:	930a      	str	r3, [sp, #40]	; 0x28
 80113f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113f2:	930c      	str	r3, [sp, #48]	; 0x30
 80113f4:	2300      	movs	r3, #0
 80113f6:	9306      	str	r3, [sp, #24]
 80113f8:	9308      	str	r3, [sp, #32]
 80113fa:	461d      	mov	r5, r3
 80113fc:	220a      	movs	r2, #10
 80113fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011400:	f890 8000 	ldrb.w	r8, [r0]
 8011404:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011408:	b2d9      	uxtb	r1, r3
 801140a:	2909      	cmp	r1, #9
 801140c:	d92c      	bls.n	8011468 <_strtod_l+0x1b8>
 801140e:	463a      	mov	r2, r7
 8011410:	f8d9 1000 	ldr.w	r1, [r9]
 8011414:	f003 f84d 	bl	80144b2 <strncmp>
 8011418:	2800      	cmp	r0, #0
 801141a:	d035      	beq.n	8011488 <_strtod_l+0x1d8>
 801141c:	2000      	movs	r0, #0
 801141e:	4642      	mov	r2, r8
 8011420:	462b      	mov	r3, r5
 8011422:	4601      	mov	r1, r0
 8011424:	9004      	str	r0, [sp, #16]
 8011426:	2a65      	cmp	r2, #101	; 0x65
 8011428:	d001      	beq.n	801142e <_strtod_l+0x17e>
 801142a:	2a45      	cmp	r2, #69	; 0x45
 801142c:	d117      	bne.n	801145e <_strtod_l+0x1ae>
 801142e:	b923      	cbnz	r3, 801143a <_strtod_l+0x18a>
 8011430:	b910      	cbnz	r0, 8011438 <_strtod_l+0x188>
 8011432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011434:	2b00      	cmp	r3, #0
 8011436:	d09c      	beq.n	8011372 <_strtod_l+0xc2>
 8011438:	2300      	movs	r3, #0
 801143a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801143c:	1c72      	adds	r2, r6, #1
 801143e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011440:	7872      	ldrb	r2, [r6, #1]
 8011442:	2a2b      	cmp	r2, #43	; 0x2b
 8011444:	f000 8082 	beq.w	801154c <_strtod_l+0x29c>
 8011448:	2a2d      	cmp	r2, #45	; 0x2d
 801144a:	d079      	beq.n	8011540 <_strtod_l+0x290>
 801144c:	f04f 0e00 	mov.w	lr, #0
 8011450:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011454:	f1bc 0f09 	cmp.w	ip, #9
 8011458:	f240 8086 	bls.w	8011568 <_strtod_l+0x2b8>
 801145c:	9617      	str	r6, [sp, #92]	; 0x5c
 801145e:	f04f 0800 	mov.w	r8, #0
 8011462:	e0a8      	b.n	80115b6 <_strtod_l+0x306>
 8011464:	2300      	movs	r3, #0
 8011466:	e7c2      	b.n	80113ee <_strtod_l+0x13e>
 8011468:	2d08      	cmp	r5, #8
 801146a:	bfd5      	itete	le
 801146c:	9908      	ldrle	r1, [sp, #32]
 801146e:	9906      	ldrgt	r1, [sp, #24]
 8011470:	fb02 3301 	mlale	r3, r2, r1, r3
 8011474:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011478:	f100 0001 	add.w	r0, r0, #1
 801147c:	bfd4      	ite	le
 801147e:	9308      	strle	r3, [sp, #32]
 8011480:	9306      	strgt	r3, [sp, #24]
 8011482:	3501      	adds	r5, #1
 8011484:	9017      	str	r0, [sp, #92]	; 0x5c
 8011486:	e7ba      	b.n	80113fe <_strtod_l+0x14e>
 8011488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801148a:	19da      	adds	r2, r3, r7
 801148c:	9217      	str	r2, [sp, #92]	; 0x5c
 801148e:	5dda      	ldrb	r2, [r3, r7]
 8011490:	2d00      	cmp	r5, #0
 8011492:	d038      	beq.n	8011506 <_strtod_l+0x256>
 8011494:	4601      	mov	r1, r0
 8011496:	462b      	mov	r3, r5
 8011498:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801149c:	2f09      	cmp	r7, #9
 801149e:	d913      	bls.n	80114c8 <_strtod_l+0x218>
 80114a0:	2701      	movs	r7, #1
 80114a2:	9704      	str	r7, [sp, #16]
 80114a4:	e7bf      	b.n	8011426 <_strtod_l+0x176>
 80114a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114a8:	1c5a      	adds	r2, r3, #1
 80114aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80114ac:	785a      	ldrb	r2, [r3, #1]
 80114ae:	3001      	adds	r0, #1
 80114b0:	2a30      	cmp	r2, #48	; 0x30
 80114b2:	d0f8      	beq.n	80114a6 <_strtod_l+0x1f6>
 80114b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80114b8:	2b08      	cmp	r3, #8
 80114ba:	f200 84a2 	bhi.w	8011e02 <_strtod_l+0xb52>
 80114be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114c0:	930c      	str	r3, [sp, #48]	; 0x30
 80114c2:	4601      	mov	r1, r0
 80114c4:	2000      	movs	r0, #0
 80114c6:	4603      	mov	r3, r0
 80114c8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80114cc:	f100 0701 	add.w	r7, r0, #1
 80114d0:	d013      	beq.n	80114fa <_strtod_l+0x24a>
 80114d2:	4439      	add	r1, r7
 80114d4:	eb00 0e03 	add.w	lr, r0, r3
 80114d8:	461f      	mov	r7, r3
 80114da:	f04f 0c0a 	mov.w	ip, #10
 80114de:	45be      	cmp	lr, r7
 80114e0:	d113      	bne.n	801150a <_strtod_l+0x25a>
 80114e2:	181f      	adds	r7, r3, r0
 80114e4:	2f08      	cmp	r7, #8
 80114e6:	f103 0301 	add.w	r3, r3, #1
 80114ea:	4403      	add	r3, r0
 80114ec:	dc1d      	bgt.n	801152a <_strtod_l+0x27a>
 80114ee:	9a08      	ldr	r2, [sp, #32]
 80114f0:	200a      	movs	r0, #10
 80114f2:	fb00 8202 	mla	r2, r0, r2, r8
 80114f6:	9208      	str	r2, [sp, #32]
 80114f8:	2700      	movs	r7, #0
 80114fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114fc:	1c50      	adds	r0, r2, #1
 80114fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8011500:	7852      	ldrb	r2, [r2, #1]
 8011502:	4638      	mov	r0, r7
 8011504:	e7c8      	b.n	8011498 <_strtod_l+0x1e8>
 8011506:	4628      	mov	r0, r5
 8011508:	e7d2      	b.n	80114b0 <_strtod_l+0x200>
 801150a:	2f08      	cmp	r7, #8
 801150c:	f107 0701 	add.w	r7, r7, #1
 8011510:	dc04      	bgt.n	801151c <_strtod_l+0x26c>
 8011512:	9a08      	ldr	r2, [sp, #32]
 8011514:	fb0c f202 	mul.w	r2, ip, r2
 8011518:	9208      	str	r2, [sp, #32]
 801151a:	e7e0      	b.n	80114de <_strtod_l+0x22e>
 801151c:	2f10      	cmp	r7, #16
 801151e:	bfde      	ittt	le
 8011520:	9a06      	ldrle	r2, [sp, #24]
 8011522:	fb0c f202 	mulle.w	r2, ip, r2
 8011526:	9206      	strle	r2, [sp, #24]
 8011528:	e7d9      	b.n	80114de <_strtod_l+0x22e>
 801152a:	2b10      	cmp	r3, #16
 801152c:	bfdf      	itttt	le
 801152e:	9a06      	ldrle	r2, [sp, #24]
 8011530:	200a      	movle	r0, #10
 8011532:	fb00 8202 	mlale	r2, r0, r2, r8
 8011536:	9206      	strle	r2, [sp, #24]
 8011538:	e7de      	b.n	80114f8 <_strtod_l+0x248>
 801153a:	2301      	movs	r3, #1
 801153c:	9304      	str	r3, [sp, #16]
 801153e:	e777      	b.n	8011430 <_strtod_l+0x180>
 8011540:	f04f 0e01 	mov.w	lr, #1
 8011544:	1cb2      	adds	r2, r6, #2
 8011546:	9217      	str	r2, [sp, #92]	; 0x5c
 8011548:	78b2      	ldrb	r2, [r6, #2]
 801154a:	e781      	b.n	8011450 <_strtod_l+0x1a0>
 801154c:	f04f 0e00 	mov.w	lr, #0
 8011550:	e7f8      	b.n	8011544 <_strtod_l+0x294>
 8011552:	bf00      	nop
 8011554:	08014da8 	.word	0x08014da8
 8011558:	7ff00000 	.word	0x7ff00000
 801155c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801155e:	f102 0c01 	add.w	ip, r2, #1
 8011562:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011566:	7852      	ldrb	r2, [r2, #1]
 8011568:	2a30      	cmp	r2, #48	; 0x30
 801156a:	d0f7      	beq.n	801155c <_strtod_l+0x2ac>
 801156c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011570:	f1bc 0f08 	cmp.w	ip, #8
 8011574:	f63f af73 	bhi.w	801145e <_strtod_l+0x1ae>
 8011578:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 801157c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801157e:	920e      	str	r2, [sp, #56]	; 0x38
 8011580:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011582:	f102 0c01 	add.w	ip, r2, #1
 8011586:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801158a:	7852      	ldrb	r2, [r2, #1]
 801158c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011590:	f1b9 0f09 	cmp.w	r9, #9
 8011594:	d939      	bls.n	801160a <_strtod_l+0x35a>
 8011596:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011598:	ebac 0c07 	sub.w	ip, ip, r7
 801159c:	f1bc 0f08 	cmp.w	ip, #8
 80115a0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80115a4:	dc37      	bgt.n	8011616 <_strtod_l+0x366>
 80115a6:	45e0      	cmp	r8, ip
 80115a8:	bfa8      	it	ge
 80115aa:	46e0      	movge	r8, ip
 80115ac:	f1be 0f00 	cmp.w	lr, #0
 80115b0:	d001      	beq.n	80115b6 <_strtod_l+0x306>
 80115b2:	f1c8 0800 	rsb	r8, r8, #0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d151      	bne.n	801165e <_strtod_l+0x3ae>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	f47f aeba 	bne.w	8011334 <_strtod_l+0x84>
 80115c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f47f aeb6 	bne.w	8011334 <_strtod_l+0x84>
 80115c8:	9b04      	ldr	r3, [sp, #16]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f47f aed1 	bne.w	8011372 <_strtod_l+0xc2>
 80115d0:	2a4e      	cmp	r2, #78	; 0x4e
 80115d2:	d027      	beq.n	8011624 <_strtod_l+0x374>
 80115d4:	dc21      	bgt.n	801161a <_strtod_l+0x36a>
 80115d6:	2a49      	cmp	r2, #73	; 0x49
 80115d8:	f47f aecb 	bne.w	8011372 <_strtod_l+0xc2>
 80115dc:	499a      	ldr	r1, [pc, #616]	; (8011848 <_strtod_l+0x598>)
 80115de:	a817      	add	r0, sp, #92	; 0x5c
 80115e0:	f001 ff62 	bl	80134a8 <__match>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f43f aec4 	beq.w	8011372 <_strtod_l+0xc2>
 80115ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115ec:	4997      	ldr	r1, [pc, #604]	; (801184c <_strtod_l+0x59c>)
 80115ee:	3b01      	subs	r3, #1
 80115f0:	a817      	add	r0, sp, #92	; 0x5c
 80115f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80115f4:	f001 ff58 	bl	80134a8 <__match>
 80115f8:	b910      	cbnz	r0, 8011600 <_strtod_l+0x350>
 80115fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115fc:	3301      	adds	r3, #1
 80115fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8011600:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011864 <_strtod_l+0x5b4>
 8011604:	f04f 0a00 	mov.w	sl, #0
 8011608:	e694      	b.n	8011334 <_strtod_l+0x84>
 801160a:	270a      	movs	r7, #10
 801160c:	fb07 2808 	mla	r8, r7, r8, r2
 8011610:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011614:	e7b4      	b.n	8011580 <_strtod_l+0x2d0>
 8011616:	46e0      	mov	r8, ip
 8011618:	e7c8      	b.n	80115ac <_strtod_l+0x2fc>
 801161a:	2a69      	cmp	r2, #105	; 0x69
 801161c:	d0de      	beq.n	80115dc <_strtod_l+0x32c>
 801161e:	2a6e      	cmp	r2, #110	; 0x6e
 8011620:	f47f aea7 	bne.w	8011372 <_strtod_l+0xc2>
 8011624:	498a      	ldr	r1, [pc, #552]	; (8011850 <_strtod_l+0x5a0>)
 8011626:	a817      	add	r0, sp, #92	; 0x5c
 8011628:	f001 ff3e 	bl	80134a8 <__match>
 801162c:	2800      	cmp	r0, #0
 801162e:	f43f aea0 	beq.w	8011372 <_strtod_l+0xc2>
 8011632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	2b28      	cmp	r3, #40	; 0x28
 8011638:	d10e      	bne.n	8011658 <_strtod_l+0x3a8>
 801163a:	aa1a      	add	r2, sp, #104	; 0x68
 801163c:	4985      	ldr	r1, [pc, #532]	; (8011854 <_strtod_l+0x5a4>)
 801163e:	a817      	add	r0, sp, #92	; 0x5c
 8011640:	f001 ff46 	bl	80134d0 <__hexnan>
 8011644:	2805      	cmp	r0, #5
 8011646:	d107      	bne.n	8011658 <_strtod_l+0x3a8>
 8011648:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801164a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801164e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011652:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011656:	e66d      	b.n	8011334 <_strtod_l+0x84>
 8011658:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011868 <_strtod_l+0x5b8>
 801165c:	e7d2      	b.n	8011604 <_strtod_l+0x354>
 801165e:	eddd 7a08 	vldr	s15, [sp, #32]
 8011662:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011666:	eba8 0201 	sub.w	r2, r8, r1
 801166a:	2d00      	cmp	r5, #0
 801166c:	bf08      	it	eq
 801166e:	461d      	moveq	r5, r3
 8011670:	2b10      	cmp	r3, #16
 8011672:	9204      	str	r2, [sp, #16]
 8011674:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011678:	461a      	mov	r2, r3
 801167a:	bfa8      	it	ge
 801167c:	2210      	movge	r2, #16
 801167e:	2b09      	cmp	r3, #9
 8011680:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011684:	dc14      	bgt.n	80116b0 <_strtod_l+0x400>
 8011686:	9904      	ldr	r1, [sp, #16]
 8011688:	2900      	cmp	r1, #0
 801168a:	f43f ae53 	beq.w	8011334 <_strtod_l+0x84>
 801168e:	9904      	ldr	r1, [sp, #16]
 8011690:	dd72      	ble.n	8011778 <_strtod_l+0x4c8>
 8011692:	2916      	cmp	r1, #22
 8011694:	dc5a      	bgt.n	801174c <_strtod_l+0x49c>
 8011696:	4970      	ldr	r1, [pc, #448]	; (8011858 <_strtod_l+0x5a8>)
 8011698:	9b04      	ldr	r3, [sp, #16]
 801169a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801169e:	ed91 7b00 	vldr	d7, [r1]
 80116a2:	ec4b ab16 	vmov	d6, sl, fp
 80116a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116aa:	ec5b ab17 	vmov	sl, fp, d7
 80116ae:	e641      	b.n	8011334 <_strtod_l+0x84>
 80116b0:	4969      	ldr	r1, [pc, #420]	; (8011858 <_strtod_l+0x5a8>)
 80116b2:	eddd 7a06 	vldr	s15, [sp, #24]
 80116b6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80116ba:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80116be:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80116c2:	2b0f      	cmp	r3, #15
 80116c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80116c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116cc:	ec5b ab17 	vmov	sl, fp, d7
 80116d0:	ddd9      	ble.n	8011686 <_strtod_l+0x3d6>
 80116d2:	9904      	ldr	r1, [sp, #16]
 80116d4:	1a9a      	subs	r2, r3, r2
 80116d6:	440a      	add	r2, r1
 80116d8:	2a00      	cmp	r2, #0
 80116da:	f340 8096 	ble.w	801180a <_strtod_l+0x55a>
 80116de:	f012 000f 	ands.w	r0, r2, #15
 80116e2:	d00a      	beq.n	80116fa <_strtod_l+0x44a>
 80116e4:	495c      	ldr	r1, [pc, #368]	; (8011858 <_strtod_l+0x5a8>)
 80116e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80116ea:	ed91 7b00 	vldr	d7, [r1]
 80116ee:	ec4b ab16 	vmov	d6, sl, fp
 80116f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116f6:	ec5b ab17 	vmov	sl, fp, d7
 80116fa:	f032 020f 	bics.w	r2, r2, #15
 80116fe:	d072      	beq.n	80117e6 <_strtod_l+0x536>
 8011700:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011704:	dd45      	ble.n	8011792 <_strtod_l+0x4e2>
 8011706:	2500      	movs	r5, #0
 8011708:	46a8      	mov	r8, r5
 801170a:	9506      	str	r5, [sp, #24]
 801170c:	46a9      	mov	r9, r5
 801170e:	2322      	movs	r3, #34	; 0x22
 8011710:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011864 <_strtod_l+0x5b4>
 8011714:	6023      	str	r3, [r4, #0]
 8011716:	f04f 0a00 	mov.w	sl, #0
 801171a:	9b06      	ldr	r3, [sp, #24]
 801171c:	2b00      	cmp	r3, #0
 801171e:	f43f ae09 	beq.w	8011334 <_strtod_l+0x84>
 8011722:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011724:	4620      	mov	r0, r4
 8011726:	f002 f823 	bl	8013770 <_Bfree>
 801172a:	4649      	mov	r1, r9
 801172c:	4620      	mov	r0, r4
 801172e:	f002 f81f 	bl	8013770 <_Bfree>
 8011732:	4641      	mov	r1, r8
 8011734:	4620      	mov	r0, r4
 8011736:	f002 f81b 	bl	8013770 <_Bfree>
 801173a:	9906      	ldr	r1, [sp, #24]
 801173c:	4620      	mov	r0, r4
 801173e:	f002 f817 	bl	8013770 <_Bfree>
 8011742:	4629      	mov	r1, r5
 8011744:	4620      	mov	r0, r4
 8011746:	f002 f813 	bl	8013770 <_Bfree>
 801174a:	e5f3      	b.n	8011334 <_strtod_l+0x84>
 801174c:	9804      	ldr	r0, [sp, #16]
 801174e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011752:	4281      	cmp	r1, r0
 8011754:	dbbd      	blt.n	80116d2 <_strtod_l+0x422>
 8011756:	4a40      	ldr	r2, [pc, #256]	; (8011858 <_strtod_l+0x5a8>)
 8011758:	f1c3 030f 	rsb	r3, r3, #15
 801175c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011760:	ed91 7b00 	vldr	d7, [r1]
 8011764:	ec4b ab16 	vmov	d6, sl, fp
 8011768:	1ac3      	subs	r3, r0, r3
 801176a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801176e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011772:	ed92 6b00 	vldr	d6, [r2]
 8011776:	e796      	b.n	80116a6 <_strtod_l+0x3f6>
 8011778:	3116      	adds	r1, #22
 801177a:	dbaa      	blt.n	80116d2 <_strtod_l+0x422>
 801177c:	4936      	ldr	r1, [pc, #216]	; (8011858 <_strtod_l+0x5a8>)
 801177e:	9b04      	ldr	r3, [sp, #16]
 8011780:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011784:	ed91 7b00 	vldr	d7, [r1]
 8011788:	ec4b ab16 	vmov	d6, sl, fp
 801178c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011790:	e78b      	b.n	80116aa <_strtod_l+0x3fa>
 8011792:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011796:	2000      	movs	r0, #0
 8011798:	4e30      	ldr	r6, [pc, #192]	; (801185c <_strtod_l+0x5ac>)
 801179a:	1112      	asrs	r2, r2, #4
 801179c:	4601      	mov	r1, r0
 801179e:	2a01      	cmp	r2, #1
 80117a0:	dc23      	bgt.n	80117ea <_strtod_l+0x53a>
 80117a2:	b108      	cbz	r0, 80117a8 <_strtod_l+0x4f8>
 80117a4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80117a8:	4a2c      	ldr	r2, [pc, #176]	; (801185c <_strtod_l+0x5ac>)
 80117aa:	482d      	ldr	r0, [pc, #180]	; (8011860 <_strtod_l+0x5b0>)
 80117ac:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80117b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80117b4:	ed91 7b00 	vldr	d7, [r1]
 80117b8:	ec4b ab16 	vmov	d6, sl, fp
 80117bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80117c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80117c4:	9907      	ldr	r1, [sp, #28]
 80117c6:	4a27      	ldr	r2, [pc, #156]	; (8011864 <_strtod_l+0x5b4>)
 80117c8:	400a      	ands	r2, r1
 80117ca:	4282      	cmp	r2, r0
 80117cc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80117d0:	d899      	bhi.n	8011706 <_strtod_l+0x456>
 80117d2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80117d6:	4282      	cmp	r2, r0
 80117d8:	bf86      	itte	hi
 80117da:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801186c <_strtod_l+0x5bc>
 80117de:	f04f 3aff 	movhi.w	sl, #4294967295
 80117e2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80117e6:	2700      	movs	r7, #0
 80117e8:	e070      	b.n	80118cc <_strtod_l+0x61c>
 80117ea:	07d7      	lsls	r7, r2, #31
 80117ec:	d50a      	bpl.n	8011804 <_strtod_l+0x554>
 80117ee:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80117f2:	ed90 7b00 	vldr	d7, [r0]
 80117f6:	ed9d 6b06 	vldr	d6, [sp, #24]
 80117fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011802:	2001      	movs	r0, #1
 8011804:	3101      	adds	r1, #1
 8011806:	1052      	asrs	r2, r2, #1
 8011808:	e7c9      	b.n	801179e <_strtod_l+0x4ee>
 801180a:	d0ec      	beq.n	80117e6 <_strtod_l+0x536>
 801180c:	4252      	negs	r2, r2
 801180e:	f012 000f 	ands.w	r0, r2, #15
 8011812:	d00a      	beq.n	801182a <_strtod_l+0x57a>
 8011814:	4910      	ldr	r1, [pc, #64]	; (8011858 <_strtod_l+0x5a8>)
 8011816:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801181a:	ed91 7b00 	vldr	d7, [r1]
 801181e:	ec4b ab16 	vmov	d6, sl, fp
 8011822:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011826:	ec5b ab17 	vmov	sl, fp, d7
 801182a:	1112      	asrs	r2, r2, #4
 801182c:	d0db      	beq.n	80117e6 <_strtod_l+0x536>
 801182e:	2a1f      	cmp	r2, #31
 8011830:	dd1e      	ble.n	8011870 <_strtod_l+0x5c0>
 8011832:	2500      	movs	r5, #0
 8011834:	46a8      	mov	r8, r5
 8011836:	9506      	str	r5, [sp, #24]
 8011838:	46a9      	mov	r9, r5
 801183a:	2322      	movs	r3, #34	; 0x22
 801183c:	f04f 0a00 	mov.w	sl, #0
 8011840:	f04f 0b00 	mov.w	fp, #0
 8011844:	6023      	str	r3, [r4, #0]
 8011846:	e768      	b.n	801171a <_strtod_l+0x46a>
 8011848:	08014d71 	.word	0x08014d71
 801184c:	08014dfb 	.word	0x08014dfb
 8011850:	08014d79 	.word	0x08014d79
 8011854:	08014dbc 	.word	0x08014dbc
 8011858:	08014ea0 	.word	0x08014ea0
 801185c:	08014e78 	.word	0x08014e78
 8011860:	7ca00000 	.word	0x7ca00000
 8011864:	7ff00000 	.word	0x7ff00000
 8011868:	fff80000 	.word	0xfff80000
 801186c:	7fefffff 	.word	0x7fefffff
 8011870:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011874:	f012 0710 	ands.w	r7, r2, #16
 8011878:	49ab      	ldr	r1, [pc, #684]	; (8011b28 <_strtod_l+0x878>)
 801187a:	bf18      	it	ne
 801187c:	276a      	movne	r7, #106	; 0x6a
 801187e:	2000      	movs	r0, #0
 8011880:	2a00      	cmp	r2, #0
 8011882:	f300 8113 	bgt.w	8011aac <_strtod_l+0x7fc>
 8011886:	b108      	cbz	r0, 801188c <_strtod_l+0x5dc>
 8011888:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801188c:	b1bf      	cbz	r7, 80118be <_strtod_l+0x60e>
 801188e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011892:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011896:	2a00      	cmp	r2, #0
 8011898:	4659      	mov	r1, fp
 801189a:	dd10      	ble.n	80118be <_strtod_l+0x60e>
 801189c:	2a1f      	cmp	r2, #31
 801189e:	f340 8113 	ble.w	8011ac8 <_strtod_l+0x818>
 80118a2:	2a34      	cmp	r2, #52	; 0x34
 80118a4:	bfde      	ittt	le
 80118a6:	3a20      	suble	r2, #32
 80118a8:	f04f 30ff 	movle.w	r0, #4294967295
 80118ac:	fa00 f202 	lslle.w	r2, r0, r2
 80118b0:	f04f 0a00 	mov.w	sl, #0
 80118b4:	bfcc      	ite	gt
 80118b6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80118ba:	ea02 0b01 	andle.w	fp, r2, r1
 80118be:	ec4b ab17 	vmov	d7, sl, fp
 80118c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ca:	d0b2      	beq.n	8011832 <_strtod_l+0x582>
 80118cc:	9a08      	ldr	r2, [sp, #32]
 80118ce:	9200      	str	r2, [sp, #0]
 80118d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118d2:	462a      	mov	r2, r5
 80118d4:	4620      	mov	r0, r4
 80118d6:	f001 ff9d 	bl	8013814 <__s2b>
 80118da:	9006      	str	r0, [sp, #24]
 80118dc:	2800      	cmp	r0, #0
 80118de:	f43f af12 	beq.w	8011706 <_strtod_l+0x456>
 80118e2:	9a04      	ldr	r2, [sp, #16]
 80118e4:	9b04      	ldr	r3, [sp, #16]
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	f1c3 0300 	rsb	r3, r3, #0
 80118ec:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011b10 <_strtod_l+0x860>
 80118f0:	bfa8      	it	ge
 80118f2:	2300      	movge	r3, #0
 80118f4:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011b18 <_strtod_l+0x868>
 80118f8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011b20 <_strtod_l+0x870>
 80118fc:	930e      	str	r3, [sp, #56]	; 0x38
 80118fe:	2500      	movs	r5, #0
 8011900:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011904:	9310      	str	r3, [sp, #64]	; 0x40
 8011906:	46a8      	mov	r8, r5
 8011908:	9b06      	ldr	r3, [sp, #24]
 801190a:	4620      	mov	r0, r4
 801190c:	6859      	ldr	r1, [r3, #4]
 801190e:	f001 fefb 	bl	8013708 <_Balloc>
 8011912:	4681      	mov	r9, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	f43f aefa 	beq.w	801170e <_strtod_l+0x45e>
 801191a:	9b06      	ldr	r3, [sp, #24]
 801191c:	691a      	ldr	r2, [r3, #16]
 801191e:	3202      	adds	r2, #2
 8011920:	f103 010c 	add.w	r1, r3, #12
 8011924:	0092      	lsls	r2, r2, #2
 8011926:	300c      	adds	r0, #12
 8011928:	f7fe fcd4 	bl	80102d4 <memcpy>
 801192c:	aa1a      	add	r2, sp, #104	; 0x68
 801192e:	a919      	add	r1, sp, #100	; 0x64
 8011930:	ec4b ab10 	vmov	d0, sl, fp
 8011934:	4620      	mov	r0, r4
 8011936:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801193a:	f002 fa27 	bl	8013d8c <__d2b>
 801193e:	9018      	str	r0, [sp, #96]	; 0x60
 8011940:	2800      	cmp	r0, #0
 8011942:	f43f aee4 	beq.w	801170e <_strtod_l+0x45e>
 8011946:	2101      	movs	r1, #1
 8011948:	4620      	mov	r0, r4
 801194a:	f001 ffef 	bl	801392c <__i2b>
 801194e:	4680      	mov	r8, r0
 8011950:	2800      	cmp	r0, #0
 8011952:	f43f aedc 	beq.w	801170e <_strtod_l+0x45e>
 8011956:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011958:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801195a:	2e00      	cmp	r6, #0
 801195c:	bfb1      	iteee	lt
 801195e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011960:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011962:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011964:	18f3      	addge	r3, r6, r3
 8011966:	bfba      	itte	lt
 8011968:	1b98      	sublt	r0, r3, r6
 801196a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801196c:	9308      	strge	r3, [sp, #32]
 801196e:	eba6 0607 	sub.w	r6, r6, r7
 8011972:	bfb8      	it	lt
 8011974:	9308      	strlt	r3, [sp, #32]
 8011976:	4416      	add	r6, r2
 8011978:	4b6c      	ldr	r3, [pc, #432]	; (8011b2c <_strtod_l+0x87c>)
 801197a:	3e01      	subs	r6, #1
 801197c:	429e      	cmp	r6, r3
 801197e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011982:	f280 80b4 	bge.w	8011aee <_strtod_l+0x83e>
 8011986:	1b9b      	subs	r3, r3, r6
 8011988:	2b1f      	cmp	r3, #31
 801198a:	eba2 0203 	sub.w	r2, r2, r3
 801198e:	f04f 0101 	mov.w	r1, #1
 8011992:	f300 80a0 	bgt.w	8011ad6 <_strtod_l+0x826>
 8011996:	fa01 f303 	lsl.w	r3, r1, r3
 801199a:	9311      	str	r3, [sp, #68]	; 0x44
 801199c:	2300      	movs	r3, #0
 801199e:	930f      	str	r3, [sp, #60]	; 0x3c
 80119a0:	9b08      	ldr	r3, [sp, #32]
 80119a2:	4413      	add	r3, r2
 80119a4:	4402      	add	r2, r0
 80119a6:	18be      	adds	r6, r7, r2
 80119a8:	9a08      	ldr	r2, [sp, #32]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	bfa8      	it	ge
 80119ae:	461a      	movge	r2, r3
 80119b0:	42b2      	cmp	r2, r6
 80119b2:	bfa8      	it	ge
 80119b4:	4632      	movge	r2, r6
 80119b6:	2a00      	cmp	r2, #0
 80119b8:	dd04      	ble.n	80119c4 <_strtod_l+0x714>
 80119ba:	9908      	ldr	r1, [sp, #32]
 80119bc:	1a9b      	subs	r3, r3, r2
 80119be:	1ab6      	subs	r6, r6, r2
 80119c0:	1a8a      	subs	r2, r1, r2
 80119c2:	9208      	str	r2, [sp, #32]
 80119c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119c6:	b1c2      	cbz	r2, 80119fa <_strtod_l+0x74a>
 80119c8:	4641      	mov	r1, r8
 80119ca:	4620      	mov	r0, r4
 80119cc:	9315      	str	r3, [sp, #84]	; 0x54
 80119ce:	f002 f84d 	bl	8013a6c <__pow5mult>
 80119d2:	4680      	mov	r8, r0
 80119d4:	2800      	cmp	r0, #0
 80119d6:	f43f ae9a 	beq.w	801170e <_strtod_l+0x45e>
 80119da:	4601      	mov	r1, r0
 80119dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119de:	4620      	mov	r0, r4
 80119e0:	f001 ffad 	bl	801393e <__multiply>
 80119e4:	900c      	str	r0, [sp, #48]	; 0x30
 80119e6:	2800      	cmp	r0, #0
 80119e8:	f43f ae91 	beq.w	801170e <_strtod_l+0x45e>
 80119ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80119ee:	4620      	mov	r0, r4
 80119f0:	f001 febe 	bl	8013770 <_Bfree>
 80119f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119f8:	9218      	str	r2, [sp, #96]	; 0x60
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	dc7c      	bgt.n	8011af8 <_strtod_l+0x848>
 80119fe:	9b04      	ldr	r3, [sp, #16]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	dd08      	ble.n	8011a16 <_strtod_l+0x766>
 8011a04:	4649      	mov	r1, r9
 8011a06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f002 f82f 	bl	8013a6c <__pow5mult>
 8011a0e:	4681      	mov	r9, r0
 8011a10:	2800      	cmp	r0, #0
 8011a12:	f43f ae7c 	beq.w	801170e <_strtod_l+0x45e>
 8011a16:	2e00      	cmp	r6, #0
 8011a18:	dd08      	ble.n	8011a2c <_strtod_l+0x77c>
 8011a1a:	4649      	mov	r1, r9
 8011a1c:	4632      	mov	r2, r6
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f002 f872 	bl	8013b08 <__lshift>
 8011a24:	4681      	mov	r9, r0
 8011a26:	2800      	cmp	r0, #0
 8011a28:	f43f ae71 	beq.w	801170e <_strtod_l+0x45e>
 8011a2c:	9b08      	ldr	r3, [sp, #32]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	dd08      	ble.n	8011a44 <_strtod_l+0x794>
 8011a32:	4641      	mov	r1, r8
 8011a34:	461a      	mov	r2, r3
 8011a36:	4620      	mov	r0, r4
 8011a38:	f002 f866 	bl	8013b08 <__lshift>
 8011a3c:	4680      	mov	r8, r0
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	f43f ae65 	beq.w	801170e <_strtod_l+0x45e>
 8011a44:	464a      	mov	r2, r9
 8011a46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f002 f8cb 	bl	8013be4 <__mdiff>
 8011a4e:	4605      	mov	r5, r0
 8011a50:	2800      	cmp	r0, #0
 8011a52:	f43f ae5c 	beq.w	801170e <_strtod_l+0x45e>
 8011a56:	68c3      	ldr	r3, [r0, #12]
 8011a58:	930c      	str	r3, [sp, #48]	; 0x30
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	60c3      	str	r3, [r0, #12]
 8011a5e:	4641      	mov	r1, r8
 8011a60:	f002 f8a6 	bl	8013bb0 <__mcmp>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	da63      	bge.n	8011b30 <_strtod_l+0x880>
 8011a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a6a:	b9e3      	cbnz	r3, 8011aa6 <_strtod_l+0x7f6>
 8011a6c:	f1ba 0f00 	cmp.w	sl, #0
 8011a70:	d119      	bne.n	8011aa6 <_strtod_l+0x7f6>
 8011a72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a76:	b9b3      	cbnz	r3, 8011aa6 <_strtod_l+0x7f6>
 8011a78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a7c:	0d1b      	lsrs	r3, r3, #20
 8011a7e:	051b      	lsls	r3, r3, #20
 8011a80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011a84:	d90f      	bls.n	8011aa6 <_strtod_l+0x7f6>
 8011a86:	696b      	ldr	r3, [r5, #20]
 8011a88:	b913      	cbnz	r3, 8011a90 <_strtod_l+0x7e0>
 8011a8a:	692b      	ldr	r3, [r5, #16]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	dd0a      	ble.n	8011aa6 <_strtod_l+0x7f6>
 8011a90:	4629      	mov	r1, r5
 8011a92:	2201      	movs	r2, #1
 8011a94:	4620      	mov	r0, r4
 8011a96:	f002 f837 	bl	8013b08 <__lshift>
 8011a9a:	4641      	mov	r1, r8
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	f002 f887 	bl	8013bb0 <__mcmp>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	dc75      	bgt.n	8011b92 <_strtod_l+0x8e2>
 8011aa6:	2f00      	cmp	r7, #0
 8011aa8:	d17f      	bne.n	8011baa <_strtod_l+0x8fa>
 8011aaa:	e63a      	b.n	8011722 <_strtod_l+0x472>
 8011aac:	07d6      	lsls	r6, r2, #31
 8011aae:	d508      	bpl.n	8011ac2 <_strtod_l+0x812>
 8011ab0:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011ab4:	ed91 7b00 	vldr	d7, [r1]
 8011ab8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011abc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011ac0:	2001      	movs	r0, #1
 8011ac2:	1052      	asrs	r2, r2, #1
 8011ac4:	3108      	adds	r1, #8
 8011ac6:	e6db      	b.n	8011880 <_strtod_l+0x5d0>
 8011ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8011acc:	fa01 f202 	lsl.w	r2, r1, r2
 8011ad0:	ea02 0a0a 	and.w	sl, r2, sl
 8011ad4:	e6f3      	b.n	80118be <_strtod_l+0x60e>
 8011ad6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011ada:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011ade:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011ae2:	36e2      	adds	r6, #226	; 0xe2
 8011ae4:	fa01 f306 	lsl.w	r3, r1, r6
 8011ae8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011aea:	9111      	str	r1, [sp, #68]	; 0x44
 8011aec:	e758      	b.n	80119a0 <_strtod_l+0x6f0>
 8011aee:	2300      	movs	r3, #0
 8011af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8011af2:	2301      	movs	r3, #1
 8011af4:	9311      	str	r3, [sp, #68]	; 0x44
 8011af6:	e753      	b.n	80119a0 <_strtod_l+0x6f0>
 8011af8:	461a      	mov	r2, r3
 8011afa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011afc:	4620      	mov	r0, r4
 8011afe:	f002 f803 	bl	8013b08 <__lshift>
 8011b02:	9018      	str	r0, [sp, #96]	; 0x60
 8011b04:	2800      	cmp	r0, #0
 8011b06:	f47f af7a 	bne.w	80119fe <_strtod_l+0x74e>
 8011b0a:	e600      	b.n	801170e <_strtod_l+0x45e>
 8011b0c:	f3af 8000 	nop.w
 8011b10:	94a03595 	.word	0x94a03595
 8011b14:	3fdfffff 	.word	0x3fdfffff
 8011b18:	35afe535 	.word	0x35afe535
 8011b1c:	3fe00000 	.word	0x3fe00000
 8011b20:	94a03595 	.word	0x94a03595
 8011b24:	3fcfffff 	.word	0x3fcfffff
 8011b28:	08014dd0 	.word	0x08014dd0
 8011b2c:	fffffc02 	.word	0xfffffc02
 8011b30:	f8cd b020 	str.w	fp, [sp, #32]
 8011b34:	f040 8085 	bne.w	8011c42 <_strtod_l+0x992>
 8011b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b3e:	b322      	cbz	r2, 8011b8a <_strtod_l+0x8da>
 8011b40:	4ab7      	ldr	r2, [pc, #732]	; (8011e20 <_strtod_l+0xb70>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d154      	bne.n	8011bf0 <_strtod_l+0x940>
 8011b46:	4651      	mov	r1, sl
 8011b48:	b1e7      	cbz	r7, 8011b84 <_strtod_l+0x8d4>
 8011b4a:	4bb6      	ldr	r3, [pc, #728]	; (8011e24 <_strtod_l+0xb74>)
 8011b4c:	465a      	mov	r2, fp
 8011b4e:	4013      	ands	r3, r2
 8011b50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011b54:	f04f 32ff 	mov.w	r2, #4294967295
 8011b58:	d803      	bhi.n	8011b62 <_strtod_l+0x8b2>
 8011b5a:	0d1b      	lsrs	r3, r3, #20
 8011b5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011b60:	409a      	lsls	r2, r3
 8011b62:	4291      	cmp	r1, r2
 8011b64:	d144      	bne.n	8011bf0 <_strtod_l+0x940>
 8011b66:	4bb0      	ldr	r3, [pc, #704]	; (8011e28 <_strtod_l+0xb78>)
 8011b68:	9a08      	ldr	r2, [sp, #32]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d102      	bne.n	8011b74 <_strtod_l+0x8c4>
 8011b6e:	3101      	adds	r1, #1
 8011b70:	f43f adcd 	beq.w	801170e <_strtod_l+0x45e>
 8011b74:	4bab      	ldr	r3, [pc, #684]	; (8011e24 <_strtod_l+0xb74>)
 8011b76:	9a08      	ldr	r2, [sp, #32]
 8011b78:	401a      	ands	r2, r3
 8011b7a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8011b7e:	f04f 0a00 	mov.w	sl, #0
 8011b82:	e790      	b.n	8011aa6 <_strtod_l+0x7f6>
 8011b84:	f04f 32ff 	mov.w	r2, #4294967295
 8011b88:	e7eb      	b.n	8011b62 <_strtod_l+0x8b2>
 8011b8a:	bb8b      	cbnz	r3, 8011bf0 <_strtod_l+0x940>
 8011b8c:	f1ba 0f00 	cmp.w	sl, #0
 8011b90:	d12e      	bne.n	8011bf0 <_strtod_l+0x940>
 8011b92:	465b      	mov	r3, fp
 8011b94:	4aa3      	ldr	r2, [pc, #652]	; (8011e24 <_strtod_l+0xb74>)
 8011b96:	b30f      	cbz	r7, 8011bdc <_strtod_l+0x92c>
 8011b98:	ea02 010b 	and.w	r1, r2, fp
 8011b9c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ba0:	dc1c      	bgt.n	8011bdc <_strtod_l+0x92c>
 8011ba2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011ba6:	f77f ae48 	ble.w	801183a <_strtod_l+0x58a>
 8011baa:	4aa0      	ldr	r2, [pc, #640]	; (8011e2c <_strtod_l+0xb7c>)
 8011bac:	2300      	movs	r3, #0
 8011bae:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8011bb2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8011bb6:	ec4b ab17 	vmov	d7, sl, fp
 8011bba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bbe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011bc2:	9b05      	ldr	r3, [sp, #20]
 8011bc4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	f47f adaa 	bne.w	8011722 <_strtod_l+0x472>
 8011bce:	9b04      	ldr	r3, [sp, #16]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f47f ada6 	bne.w	8011722 <_strtod_l+0x472>
 8011bd6:	2322      	movs	r3, #34	; 0x22
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	e5a2      	b.n	8011722 <_strtod_l+0x472>
 8011bdc:	4013      	ands	r3, r2
 8011bde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011be2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011be6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011bea:	f04f 3aff 	mov.w	sl, #4294967295
 8011bee:	e75a      	b.n	8011aa6 <_strtod_l+0x7f6>
 8011bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bf2:	b18b      	cbz	r3, 8011c18 <_strtod_l+0x968>
 8011bf4:	9a08      	ldr	r2, [sp, #32]
 8011bf6:	4213      	tst	r3, r2
 8011bf8:	f43f af55 	beq.w	8011aa6 <_strtod_l+0x7f6>
 8011bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bfe:	463a      	mov	r2, r7
 8011c00:	4650      	mov	r0, sl
 8011c02:	4659      	mov	r1, fp
 8011c04:	b163      	cbz	r3, 8011c20 <_strtod_l+0x970>
 8011c06:	f7ff fb39 	bl	801127c <sulp>
 8011c0a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011c0e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011c12:	ec5b ab17 	vmov	sl, fp, d7
 8011c16:	e746      	b.n	8011aa6 <_strtod_l+0x7f6>
 8011c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c1a:	ea13 0f0a 	tst.w	r3, sl
 8011c1e:	e7eb      	b.n	8011bf8 <_strtod_l+0x948>
 8011c20:	f7ff fb2c 	bl	801127c <sulp>
 8011c24:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011c28:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011c2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011c30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c38:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011c3c:	f43f adfd 	beq.w	801183a <_strtod_l+0x58a>
 8011c40:	e731      	b.n	8011aa6 <_strtod_l+0x7f6>
 8011c42:	4641      	mov	r1, r8
 8011c44:	4628      	mov	r0, r5
 8011c46:	f002 f8f0 	bl	8013e2a <__ratio>
 8011c4a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011c4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c56:	d869      	bhi.n	8011d2c <_strtod_l+0xa7c>
 8011c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d045      	beq.n	8011cea <_strtod_l+0xa3a>
 8011c5e:	4b74      	ldr	r3, [pc, #464]	; (8011e30 <_strtod_l+0xb80>)
 8011c60:	2200      	movs	r2, #0
 8011c62:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011c66:	9808      	ldr	r0, [sp, #32]
 8011c68:	496e      	ldr	r1, [pc, #440]	; (8011e24 <_strtod_l+0xb74>)
 8011c6a:	ea00 0601 	and.w	r6, r0, r1
 8011c6e:	4871      	ldr	r0, [pc, #452]	; (8011e34 <_strtod_l+0xb84>)
 8011c70:	4286      	cmp	r6, r0
 8011c72:	f040 8089 	bne.w	8011d88 <_strtod_l+0xad8>
 8011c76:	910f      	str	r1, [sp, #60]	; 0x3c
 8011c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011c7c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011c80:	9908      	ldr	r1, [sp, #32]
 8011c82:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011c86:	ec4b ab10 	vmov	d0, sl, fp
 8011c8a:	ec43 2b1c 	vmov	d12, r2, r3
 8011c8e:	f002 f807 	bl	8013ca0 <__ulp>
 8011c92:	ec4b ab1d 	vmov	d13, sl, fp
 8011c96:	eeac db00 	vfma.f64	d13, d12, d0
 8011c9a:	ed8d db08 	vstr	d13, [sp, #32]
 8011c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ca2:	4a65      	ldr	r2, [pc, #404]	; (8011e38 <_strtod_l+0xb88>)
 8011ca4:	4019      	ands	r1, r3
 8011ca6:	4291      	cmp	r1, r2
 8011ca8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8011cac:	d948      	bls.n	8011d40 <_strtod_l+0xa90>
 8011cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d103      	bne.n	8011cc0 <_strtod_l+0xa10>
 8011cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cba:	3301      	adds	r3, #1
 8011cbc:	f43f ad27 	beq.w	801170e <_strtod_l+0x45e>
 8011cc0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011e28 <_strtod_l+0xb78>
 8011cc4:	f04f 3aff 	mov.w	sl, #4294967295
 8011cc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f001 fd50 	bl	8013770 <_Bfree>
 8011cd0:	4649      	mov	r1, r9
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f001 fd4c 	bl	8013770 <_Bfree>
 8011cd8:	4641      	mov	r1, r8
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f001 fd48 	bl	8013770 <_Bfree>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f001 fd44 	bl	8013770 <_Bfree>
 8011ce8:	e60e      	b.n	8011908 <_strtod_l+0x658>
 8011cea:	f1ba 0f00 	cmp.w	sl, #0
 8011cee:	d113      	bne.n	8011d18 <_strtod_l+0xa68>
 8011cf0:	9b08      	ldr	r3, [sp, #32]
 8011cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cf6:	b9b3      	cbnz	r3, 8011d26 <_strtod_l+0xa76>
 8011cf8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011cfc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011d08:	d401      	bmi.n	8011d0e <_strtod_l+0xa5e>
 8011d0a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011d0e:	eeb1 7b48 	vneg.f64	d7, d8
 8011d12:	ec53 2b17 	vmov	r2, r3, d7
 8011d16:	e7a6      	b.n	8011c66 <_strtod_l+0x9b6>
 8011d18:	f1ba 0f01 	cmp.w	sl, #1
 8011d1c:	d103      	bne.n	8011d26 <_strtod_l+0xa76>
 8011d1e:	9b08      	ldr	r3, [sp, #32]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f43f ad8a 	beq.w	801183a <_strtod_l+0x58a>
 8011d26:	2200      	movs	r2, #0
 8011d28:	4b44      	ldr	r3, [pc, #272]	; (8011e3c <_strtod_l+0xb8c>)
 8011d2a:	e79a      	b.n	8011c62 <_strtod_l+0x9b2>
 8011d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d2e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011d32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d0e9      	beq.n	8011d0e <_strtod_l+0xa5e>
 8011d3a:	ec53 2b18 	vmov	r2, r3, d8
 8011d3e:	e792      	b.n	8011c66 <_strtod_l+0x9b6>
 8011d40:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011d44:	2f00      	cmp	r7, #0
 8011d46:	d1bf      	bne.n	8011cc8 <_strtod_l+0xa18>
 8011d48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d4c:	0d1b      	lsrs	r3, r3, #20
 8011d4e:	051b      	lsls	r3, r3, #20
 8011d50:	429e      	cmp	r6, r3
 8011d52:	d1b9      	bne.n	8011cc8 <_strtod_l+0xa18>
 8011d54:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d5a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011d5e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011d62:	b92b      	cbnz	r3, 8011d70 <_strtod_l+0xac0>
 8011d64:	f1ba 0f00 	cmp.w	sl, #0
 8011d68:	d102      	bne.n	8011d70 <_strtod_l+0xac0>
 8011d6a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011d6e:	b3d2      	cbz	r2, 8011de6 <_strtod_l+0xb36>
 8011d70:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d78:	f53f acd3 	bmi.w	8011722 <_strtod_l+0x472>
 8011d7c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d84:	dda0      	ble.n	8011cc8 <_strtod_l+0xa18>
 8011d86:	e4cc      	b.n	8011722 <_strtod_l+0x472>
 8011d88:	b1ef      	cbz	r7, 8011dc6 <_strtod_l+0xb16>
 8011d8a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011d8e:	d81a      	bhi.n	8011dc6 <_strtod_l+0xb16>
 8011d90:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011e18 <_strtod_l+0xb68>
 8011d94:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9c:	d810      	bhi.n	8011dc0 <_strtod_l+0xb10>
 8011d9e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011da2:	ee17 3a90 	vmov	r3, s15
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	bf08      	it	eq
 8011daa:	2301      	moveq	r3, #1
 8011dac:	ee07 3a90 	vmov	s15, r3
 8011db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011db2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011db6:	b99b      	cbnz	r3, 8011de0 <_strtod_l+0xb30>
 8011db8:	eeb1 7b48 	vneg.f64	d7, d8
 8011dbc:	ec53 2b17 	vmov	r2, r3, d7
 8011dc0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011dc4:	1b8b      	subs	r3, r1, r6
 8011dc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011dca:	ec43 2b1c 	vmov	d12, r2, r3
 8011dce:	f001 ff67 	bl	8013ca0 <__ulp>
 8011dd2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011dd6:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011dda:	ec5b ab17 	vmov	sl, fp, d7
 8011dde:	e7b1      	b.n	8011d44 <_strtod_l+0xa94>
 8011de0:	ec53 2b18 	vmov	r2, r3, d8
 8011de4:	e7ec      	b.n	8011dc0 <_strtod_l+0xb10>
 8011de6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dee:	f57f af6b 	bpl.w	8011cc8 <_strtod_l+0xa18>
 8011df2:	e496      	b.n	8011722 <_strtod_l+0x472>
 8011df4:	2300      	movs	r3, #0
 8011df6:	930d      	str	r3, [sp, #52]	; 0x34
 8011df8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	f7ff ba9d 	b.w	801133c <_strtod_l+0x8c>
 8011e02:	2a65      	cmp	r2, #101	; 0x65
 8011e04:	f04f 0100 	mov.w	r1, #0
 8011e08:	f43f ab97 	beq.w	801153a <_strtod_l+0x28a>
 8011e0c:	2701      	movs	r7, #1
 8011e0e:	460b      	mov	r3, r1
 8011e10:	9704      	str	r7, [sp, #16]
 8011e12:	f7ff bb0a 	b.w	801142a <_strtod_l+0x17a>
 8011e16:	bf00      	nop
 8011e18:	ffc00000 	.word	0xffc00000
 8011e1c:	41dfffff 	.word	0x41dfffff
 8011e20:	000fffff 	.word	0x000fffff
 8011e24:	7ff00000 	.word	0x7ff00000
 8011e28:	7fefffff 	.word	0x7fefffff
 8011e2c:	39500000 	.word	0x39500000
 8011e30:	3ff00000 	.word	0x3ff00000
 8011e34:	7fe00000 	.word	0x7fe00000
 8011e38:	7c9fffff 	.word	0x7c9fffff
 8011e3c:	bff00000 	.word	0xbff00000

08011e40 <_strtod_r>:
 8011e40:	4b05      	ldr	r3, [pc, #20]	; (8011e58 <_strtod_r+0x18>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	b410      	push	{r4}
 8011e46:	6a1b      	ldr	r3, [r3, #32]
 8011e48:	4c04      	ldr	r4, [pc, #16]	; (8011e5c <_strtod_r+0x1c>)
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	bf08      	it	eq
 8011e4e:	4623      	moveq	r3, r4
 8011e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e54:	f7ff ba2c 	b.w	80112b0 <_strtod_l>
 8011e58:	20000378 	.word	0x20000378
 8011e5c:	200003dc 	.word	0x200003dc

08011e60 <_strtol_l.isra.0>:
 8011e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e64:	4680      	mov	r8, r0
 8011e66:	4689      	mov	r9, r1
 8011e68:	4692      	mov	sl, r2
 8011e6a:	461e      	mov	r6, r3
 8011e6c:	460f      	mov	r7, r1
 8011e6e:	463d      	mov	r5, r7
 8011e70:	9808      	ldr	r0, [sp, #32]
 8011e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e76:	f001 fbbb 	bl	80135f0 <__locale_ctype_ptr_l>
 8011e7a:	4420      	add	r0, r4
 8011e7c:	7843      	ldrb	r3, [r0, #1]
 8011e7e:	f013 0308 	ands.w	r3, r3, #8
 8011e82:	d132      	bne.n	8011eea <_strtol_l.isra.0+0x8a>
 8011e84:	2c2d      	cmp	r4, #45	; 0x2d
 8011e86:	d132      	bne.n	8011eee <_strtol_l.isra.0+0x8e>
 8011e88:	787c      	ldrb	r4, [r7, #1]
 8011e8a:	1cbd      	adds	r5, r7, #2
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	2e00      	cmp	r6, #0
 8011e90:	d05d      	beq.n	8011f4e <_strtol_l.isra.0+0xee>
 8011e92:	2e10      	cmp	r6, #16
 8011e94:	d109      	bne.n	8011eaa <_strtol_l.isra.0+0x4a>
 8011e96:	2c30      	cmp	r4, #48	; 0x30
 8011e98:	d107      	bne.n	8011eaa <_strtol_l.isra.0+0x4a>
 8011e9a:	782b      	ldrb	r3, [r5, #0]
 8011e9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ea0:	2b58      	cmp	r3, #88	; 0x58
 8011ea2:	d14f      	bne.n	8011f44 <_strtol_l.isra.0+0xe4>
 8011ea4:	786c      	ldrb	r4, [r5, #1]
 8011ea6:	2610      	movs	r6, #16
 8011ea8:	3502      	adds	r5, #2
 8011eaa:	2a00      	cmp	r2, #0
 8011eac:	bf14      	ite	ne
 8011eae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011eb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011eb6:	2700      	movs	r7, #0
 8011eb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8011ebc:	4638      	mov	r0, r7
 8011ebe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011ec2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011ec6:	2b09      	cmp	r3, #9
 8011ec8:	d817      	bhi.n	8011efa <_strtol_l.isra.0+0x9a>
 8011eca:	461c      	mov	r4, r3
 8011ecc:	42a6      	cmp	r6, r4
 8011ece:	dd23      	ble.n	8011f18 <_strtol_l.isra.0+0xb8>
 8011ed0:	1c7b      	adds	r3, r7, #1
 8011ed2:	d007      	beq.n	8011ee4 <_strtol_l.isra.0+0x84>
 8011ed4:	4584      	cmp	ip, r0
 8011ed6:	d31c      	bcc.n	8011f12 <_strtol_l.isra.0+0xb2>
 8011ed8:	d101      	bne.n	8011ede <_strtol_l.isra.0+0x7e>
 8011eda:	45a6      	cmp	lr, r4
 8011edc:	db19      	blt.n	8011f12 <_strtol_l.isra.0+0xb2>
 8011ede:	fb00 4006 	mla	r0, r0, r6, r4
 8011ee2:	2701      	movs	r7, #1
 8011ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ee8:	e7eb      	b.n	8011ec2 <_strtol_l.isra.0+0x62>
 8011eea:	462f      	mov	r7, r5
 8011eec:	e7bf      	b.n	8011e6e <_strtol_l.isra.0+0xe>
 8011eee:	2c2b      	cmp	r4, #43	; 0x2b
 8011ef0:	bf04      	itt	eq
 8011ef2:	1cbd      	addeq	r5, r7, #2
 8011ef4:	787c      	ldrbeq	r4, [r7, #1]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	e7c9      	b.n	8011e8e <_strtol_l.isra.0+0x2e>
 8011efa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011efe:	2b19      	cmp	r3, #25
 8011f00:	d801      	bhi.n	8011f06 <_strtol_l.isra.0+0xa6>
 8011f02:	3c37      	subs	r4, #55	; 0x37
 8011f04:	e7e2      	b.n	8011ecc <_strtol_l.isra.0+0x6c>
 8011f06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011f0a:	2b19      	cmp	r3, #25
 8011f0c:	d804      	bhi.n	8011f18 <_strtol_l.isra.0+0xb8>
 8011f0e:	3c57      	subs	r4, #87	; 0x57
 8011f10:	e7dc      	b.n	8011ecc <_strtol_l.isra.0+0x6c>
 8011f12:	f04f 37ff 	mov.w	r7, #4294967295
 8011f16:	e7e5      	b.n	8011ee4 <_strtol_l.isra.0+0x84>
 8011f18:	1c7b      	adds	r3, r7, #1
 8011f1a:	d108      	bne.n	8011f2e <_strtol_l.isra.0+0xce>
 8011f1c:	2322      	movs	r3, #34	; 0x22
 8011f1e:	f8c8 3000 	str.w	r3, [r8]
 8011f22:	4608      	mov	r0, r1
 8011f24:	f1ba 0f00 	cmp.w	sl, #0
 8011f28:	d107      	bne.n	8011f3a <_strtol_l.isra.0+0xda>
 8011f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2e:	b102      	cbz	r2, 8011f32 <_strtol_l.isra.0+0xd2>
 8011f30:	4240      	negs	r0, r0
 8011f32:	f1ba 0f00 	cmp.w	sl, #0
 8011f36:	d0f8      	beq.n	8011f2a <_strtol_l.isra.0+0xca>
 8011f38:	b10f      	cbz	r7, 8011f3e <_strtol_l.isra.0+0xde>
 8011f3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011f3e:	f8ca 9000 	str.w	r9, [sl]
 8011f42:	e7f2      	b.n	8011f2a <_strtol_l.isra.0+0xca>
 8011f44:	2430      	movs	r4, #48	; 0x30
 8011f46:	2e00      	cmp	r6, #0
 8011f48:	d1af      	bne.n	8011eaa <_strtol_l.isra.0+0x4a>
 8011f4a:	2608      	movs	r6, #8
 8011f4c:	e7ad      	b.n	8011eaa <_strtol_l.isra.0+0x4a>
 8011f4e:	2c30      	cmp	r4, #48	; 0x30
 8011f50:	d0a3      	beq.n	8011e9a <_strtol_l.isra.0+0x3a>
 8011f52:	260a      	movs	r6, #10
 8011f54:	e7a9      	b.n	8011eaa <_strtol_l.isra.0+0x4a>
	...

08011f58 <_strtol_r>:
 8011f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f5a:	4c06      	ldr	r4, [pc, #24]	; (8011f74 <_strtol_r+0x1c>)
 8011f5c:	4d06      	ldr	r5, [pc, #24]	; (8011f78 <_strtol_r+0x20>)
 8011f5e:	6824      	ldr	r4, [r4, #0]
 8011f60:	6a24      	ldr	r4, [r4, #32]
 8011f62:	2c00      	cmp	r4, #0
 8011f64:	bf08      	it	eq
 8011f66:	462c      	moveq	r4, r5
 8011f68:	9400      	str	r4, [sp, #0]
 8011f6a:	f7ff ff79 	bl	8011e60 <_strtol_l.isra.0>
 8011f6e:	b003      	add	sp, #12
 8011f70:	bd30      	pop	{r4, r5, pc}
 8011f72:	bf00      	nop
 8011f74:	20000378 	.word	0x20000378
 8011f78:	200003dc 	.word	0x200003dc

08011f7c <__swbuf_r>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	460e      	mov	r6, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	4605      	mov	r5, r0
 8011f84:	b118      	cbz	r0, 8011f8e <__swbuf_r+0x12>
 8011f86:	6983      	ldr	r3, [r0, #24]
 8011f88:	b90b      	cbnz	r3, 8011f8e <__swbuf_r+0x12>
 8011f8a:	f000 ff81 	bl	8012e90 <__sinit>
 8011f8e:	4b21      	ldr	r3, [pc, #132]	; (8012014 <__swbuf_r+0x98>)
 8011f90:	429c      	cmp	r4, r3
 8011f92:	d12a      	bne.n	8011fea <__swbuf_r+0x6e>
 8011f94:	686c      	ldr	r4, [r5, #4]
 8011f96:	69a3      	ldr	r3, [r4, #24]
 8011f98:	60a3      	str	r3, [r4, #8]
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	071a      	lsls	r2, r3, #28
 8011f9e:	d52e      	bpl.n	8011ffe <__swbuf_r+0x82>
 8011fa0:	6923      	ldr	r3, [r4, #16]
 8011fa2:	b363      	cbz	r3, 8011ffe <__swbuf_r+0x82>
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	1ac0      	subs	r0, r0, r3
 8011faa:	6963      	ldr	r3, [r4, #20]
 8011fac:	b2f6      	uxtb	r6, r6
 8011fae:	4283      	cmp	r3, r0
 8011fb0:	4637      	mov	r7, r6
 8011fb2:	dc04      	bgt.n	8011fbe <__swbuf_r+0x42>
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f000 ff00 	bl	8012dbc <_fflush_r>
 8011fbc:	bb28      	cbnz	r0, 801200a <__swbuf_r+0x8e>
 8011fbe:	68a3      	ldr	r3, [r4, #8]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	60a3      	str	r3, [r4, #8]
 8011fc4:	6823      	ldr	r3, [r4, #0]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	6022      	str	r2, [r4, #0]
 8011fca:	701e      	strb	r6, [r3, #0]
 8011fcc:	6963      	ldr	r3, [r4, #20]
 8011fce:	3001      	adds	r0, #1
 8011fd0:	4283      	cmp	r3, r0
 8011fd2:	d004      	beq.n	8011fde <__swbuf_r+0x62>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	07db      	lsls	r3, r3, #31
 8011fd8:	d519      	bpl.n	801200e <__swbuf_r+0x92>
 8011fda:	2e0a      	cmp	r6, #10
 8011fdc:	d117      	bne.n	801200e <__swbuf_r+0x92>
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f000 feeb 	bl	8012dbc <_fflush_r>
 8011fe6:	b190      	cbz	r0, 801200e <__swbuf_r+0x92>
 8011fe8:	e00f      	b.n	801200a <__swbuf_r+0x8e>
 8011fea:	4b0b      	ldr	r3, [pc, #44]	; (8012018 <__swbuf_r+0x9c>)
 8011fec:	429c      	cmp	r4, r3
 8011fee:	d101      	bne.n	8011ff4 <__swbuf_r+0x78>
 8011ff0:	68ac      	ldr	r4, [r5, #8]
 8011ff2:	e7d0      	b.n	8011f96 <__swbuf_r+0x1a>
 8011ff4:	4b09      	ldr	r3, [pc, #36]	; (801201c <__swbuf_r+0xa0>)
 8011ff6:	429c      	cmp	r4, r3
 8011ff8:	bf08      	it	eq
 8011ffa:	68ec      	ldreq	r4, [r5, #12]
 8011ffc:	e7cb      	b.n	8011f96 <__swbuf_r+0x1a>
 8011ffe:	4621      	mov	r1, r4
 8012000:	4628      	mov	r0, r5
 8012002:	f000 f80d 	bl	8012020 <__swsetup_r>
 8012006:	2800      	cmp	r0, #0
 8012008:	d0cc      	beq.n	8011fa4 <__swbuf_r+0x28>
 801200a:	f04f 37ff 	mov.w	r7, #4294967295
 801200e:	4638      	mov	r0, r7
 8012010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012012:	bf00      	nop
 8012014:	08014e28 	.word	0x08014e28
 8012018:	08014e48 	.word	0x08014e48
 801201c:	08014e08 	.word	0x08014e08

08012020 <__swsetup_r>:
 8012020:	4b32      	ldr	r3, [pc, #200]	; (80120ec <__swsetup_r+0xcc>)
 8012022:	b570      	push	{r4, r5, r6, lr}
 8012024:	681d      	ldr	r5, [r3, #0]
 8012026:	4606      	mov	r6, r0
 8012028:	460c      	mov	r4, r1
 801202a:	b125      	cbz	r5, 8012036 <__swsetup_r+0x16>
 801202c:	69ab      	ldr	r3, [r5, #24]
 801202e:	b913      	cbnz	r3, 8012036 <__swsetup_r+0x16>
 8012030:	4628      	mov	r0, r5
 8012032:	f000 ff2d 	bl	8012e90 <__sinit>
 8012036:	4b2e      	ldr	r3, [pc, #184]	; (80120f0 <__swsetup_r+0xd0>)
 8012038:	429c      	cmp	r4, r3
 801203a:	d10f      	bne.n	801205c <__swsetup_r+0x3c>
 801203c:	686c      	ldr	r4, [r5, #4]
 801203e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012042:	b29a      	uxth	r2, r3
 8012044:	0715      	lsls	r5, r2, #28
 8012046:	d42c      	bmi.n	80120a2 <__swsetup_r+0x82>
 8012048:	06d0      	lsls	r0, r2, #27
 801204a:	d411      	bmi.n	8012070 <__swsetup_r+0x50>
 801204c:	2209      	movs	r2, #9
 801204e:	6032      	str	r2, [r6, #0]
 8012050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012054:	81a3      	strh	r3, [r4, #12]
 8012056:	f04f 30ff 	mov.w	r0, #4294967295
 801205a:	e03e      	b.n	80120da <__swsetup_r+0xba>
 801205c:	4b25      	ldr	r3, [pc, #148]	; (80120f4 <__swsetup_r+0xd4>)
 801205e:	429c      	cmp	r4, r3
 8012060:	d101      	bne.n	8012066 <__swsetup_r+0x46>
 8012062:	68ac      	ldr	r4, [r5, #8]
 8012064:	e7eb      	b.n	801203e <__swsetup_r+0x1e>
 8012066:	4b24      	ldr	r3, [pc, #144]	; (80120f8 <__swsetup_r+0xd8>)
 8012068:	429c      	cmp	r4, r3
 801206a:	bf08      	it	eq
 801206c:	68ec      	ldreq	r4, [r5, #12]
 801206e:	e7e6      	b.n	801203e <__swsetup_r+0x1e>
 8012070:	0751      	lsls	r1, r2, #29
 8012072:	d512      	bpl.n	801209a <__swsetup_r+0x7a>
 8012074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012076:	b141      	cbz	r1, 801208a <__swsetup_r+0x6a>
 8012078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801207c:	4299      	cmp	r1, r3
 801207e:	d002      	beq.n	8012086 <__swsetup_r+0x66>
 8012080:	4630      	mov	r0, r6
 8012082:	f7fe f949 	bl	8010318 <_free_r>
 8012086:	2300      	movs	r3, #0
 8012088:	6363      	str	r3, [r4, #52]	; 0x34
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	2300      	movs	r3, #0
 8012094:	6063      	str	r3, [r4, #4]
 8012096:	6923      	ldr	r3, [r4, #16]
 8012098:	6023      	str	r3, [r4, #0]
 801209a:	89a3      	ldrh	r3, [r4, #12]
 801209c:	f043 0308 	orr.w	r3, r3, #8
 80120a0:	81a3      	strh	r3, [r4, #12]
 80120a2:	6923      	ldr	r3, [r4, #16]
 80120a4:	b94b      	cbnz	r3, 80120ba <__swsetup_r+0x9a>
 80120a6:	89a3      	ldrh	r3, [r4, #12]
 80120a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120b0:	d003      	beq.n	80120ba <__swsetup_r+0x9a>
 80120b2:	4621      	mov	r1, r4
 80120b4:	4630      	mov	r0, r6
 80120b6:	f001 fad3 	bl	8013660 <__smakebuf_r>
 80120ba:	89a2      	ldrh	r2, [r4, #12]
 80120bc:	f012 0301 	ands.w	r3, r2, #1
 80120c0:	d00c      	beq.n	80120dc <__swsetup_r+0xbc>
 80120c2:	2300      	movs	r3, #0
 80120c4:	60a3      	str	r3, [r4, #8]
 80120c6:	6963      	ldr	r3, [r4, #20]
 80120c8:	425b      	negs	r3, r3
 80120ca:	61a3      	str	r3, [r4, #24]
 80120cc:	6923      	ldr	r3, [r4, #16]
 80120ce:	b953      	cbnz	r3, 80120e6 <__swsetup_r+0xc6>
 80120d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80120d8:	d1ba      	bne.n	8012050 <__swsetup_r+0x30>
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	0792      	lsls	r2, r2, #30
 80120de:	bf58      	it	pl
 80120e0:	6963      	ldrpl	r3, [r4, #20]
 80120e2:	60a3      	str	r3, [r4, #8]
 80120e4:	e7f2      	b.n	80120cc <__swsetup_r+0xac>
 80120e6:	2000      	movs	r0, #0
 80120e8:	e7f7      	b.n	80120da <__swsetup_r+0xba>
 80120ea:	bf00      	nop
 80120ec:	20000378 	.word	0x20000378
 80120f0:	08014e28 	.word	0x08014e28
 80120f4:	08014e48 	.word	0x08014e48
 80120f8:	08014e08 	.word	0x08014e08

080120fc <quorem>:
 80120fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012100:	6903      	ldr	r3, [r0, #16]
 8012102:	690c      	ldr	r4, [r1, #16]
 8012104:	42a3      	cmp	r3, r4
 8012106:	4680      	mov	r8, r0
 8012108:	f2c0 8082 	blt.w	8012210 <quorem+0x114>
 801210c:	3c01      	subs	r4, #1
 801210e:	f101 0714 	add.w	r7, r1, #20
 8012112:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012116:	f100 0614 	add.w	r6, r0, #20
 801211a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801211e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012122:	eb06 030c 	add.w	r3, r6, ip
 8012126:	3501      	adds	r5, #1
 8012128:	eb07 090c 	add.w	r9, r7, ip
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012132:	b395      	cbz	r5, 801219a <quorem+0x9e>
 8012134:	f04f 0a00 	mov.w	sl, #0
 8012138:	4638      	mov	r0, r7
 801213a:	46b6      	mov	lr, r6
 801213c:	46d3      	mov	fp, sl
 801213e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012142:	b293      	uxth	r3, r2
 8012144:	fb05 a303 	mla	r3, r5, r3, sl
 8012148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801214c:	b29b      	uxth	r3, r3
 801214e:	ebab 0303 	sub.w	r3, fp, r3
 8012152:	0c12      	lsrs	r2, r2, #16
 8012154:	f8de b000 	ldr.w	fp, [lr]
 8012158:	fb05 a202 	mla	r2, r5, r2, sl
 801215c:	fa13 f38b 	uxtah	r3, r3, fp
 8012160:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012164:	fa1f fb82 	uxth.w	fp, r2
 8012168:	f8de 2000 	ldr.w	r2, [lr]
 801216c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012174:	b29b      	uxth	r3, r3
 8012176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801217a:	4581      	cmp	r9, r0
 801217c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012180:	f84e 3b04 	str.w	r3, [lr], #4
 8012184:	d2db      	bcs.n	801213e <quorem+0x42>
 8012186:	f856 300c 	ldr.w	r3, [r6, ip]
 801218a:	b933      	cbnz	r3, 801219a <quorem+0x9e>
 801218c:	9b01      	ldr	r3, [sp, #4]
 801218e:	3b04      	subs	r3, #4
 8012190:	429e      	cmp	r6, r3
 8012192:	461a      	mov	r2, r3
 8012194:	d330      	bcc.n	80121f8 <quorem+0xfc>
 8012196:	f8c8 4010 	str.w	r4, [r8, #16]
 801219a:	4640      	mov	r0, r8
 801219c:	f001 fd08 	bl	8013bb0 <__mcmp>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	db25      	blt.n	80121f0 <quorem+0xf4>
 80121a4:	3501      	adds	r5, #1
 80121a6:	4630      	mov	r0, r6
 80121a8:	f04f 0c00 	mov.w	ip, #0
 80121ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80121b0:	f8d0 e000 	ldr.w	lr, [r0]
 80121b4:	b293      	uxth	r3, r2
 80121b6:	ebac 0303 	sub.w	r3, ip, r3
 80121ba:	0c12      	lsrs	r2, r2, #16
 80121bc:	fa13 f38e 	uxtah	r3, r3, lr
 80121c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80121c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121ce:	45b9      	cmp	r9, r7
 80121d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80121d4:	f840 3b04 	str.w	r3, [r0], #4
 80121d8:	d2e8      	bcs.n	80121ac <quorem+0xb0>
 80121da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80121de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80121e2:	b92a      	cbnz	r2, 80121f0 <quorem+0xf4>
 80121e4:	3b04      	subs	r3, #4
 80121e6:	429e      	cmp	r6, r3
 80121e8:	461a      	mov	r2, r3
 80121ea:	d30b      	bcc.n	8012204 <quorem+0x108>
 80121ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80121f0:	4628      	mov	r0, r5
 80121f2:	b003      	add	sp, #12
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	6812      	ldr	r2, [r2, #0]
 80121fa:	3b04      	subs	r3, #4
 80121fc:	2a00      	cmp	r2, #0
 80121fe:	d1ca      	bne.n	8012196 <quorem+0x9a>
 8012200:	3c01      	subs	r4, #1
 8012202:	e7c5      	b.n	8012190 <quorem+0x94>
 8012204:	6812      	ldr	r2, [r2, #0]
 8012206:	3b04      	subs	r3, #4
 8012208:	2a00      	cmp	r2, #0
 801220a:	d1ef      	bne.n	80121ec <quorem+0xf0>
 801220c:	3c01      	subs	r4, #1
 801220e:	e7ea      	b.n	80121e6 <quorem+0xea>
 8012210:	2000      	movs	r0, #0
 8012212:	e7ee      	b.n	80121f2 <quorem+0xf6>
 8012214:	0000      	movs	r0, r0
	...

08012218 <_dtoa_r>:
 8012218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	ec57 6b10 	vmov	r6, r7, d0
 8012220:	b095      	sub	sp, #84	; 0x54
 8012222:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012224:	9108      	str	r1, [sp, #32]
 8012226:	4604      	mov	r4, r0
 8012228:	920a      	str	r2, [sp, #40]	; 0x28
 801222a:	9311      	str	r3, [sp, #68]	; 0x44
 801222c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012230:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012234:	b93d      	cbnz	r5, 8012246 <_dtoa_r+0x2e>
 8012236:	2010      	movs	r0, #16
 8012238:	f7fe f844 	bl	80102c4 <malloc>
 801223c:	6260      	str	r0, [r4, #36]	; 0x24
 801223e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012242:	6005      	str	r5, [r0, #0]
 8012244:	60c5      	str	r5, [r0, #12]
 8012246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012248:	6819      	ldr	r1, [r3, #0]
 801224a:	b151      	cbz	r1, 8012262 <_dtoa_r+0x4a>
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	604a      	str	r2, [r1, #4]
 8012250:	2301      	movs	r3, #1
 8012252:	4093      	lsls	r3, r2
 8012254:	608b      	str	r3, [r1, #8]
 8012256:	4620      	mov	r0, r4
 8012258:	f001 fa8a 	bl	8013770 <_Bfree>
 801225c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801225e:	2200      	movs	r2, #0
 8012260:	601a      	str	r2, [r3, #0]
 8012262:	1e3b      	subs	r3, r7, #0
 8012264:	bfb9      	ittee	lt
 8012266:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801226a:	9303      	strlt	r3, [sp, #12]
 801226c:	2300      	movge	r3, #0
 801226e:	f8c8 3000 	strge.w	r3, [r8]
 8012272:	9d03      	ldr	r5, [sp, #12]
 8012274:	4bac      	ldr	r3, [pc, #688]	; (8012528 <_dtoa_r+0x310>)
 8012276:	bfbc      	itt	lt
 8012278:	2201      	movlt	r2, #1
 801227a:	f8c8 2000 	strlt.w	r2, [r8]
 801227e:	43ab      	bics	r3, r5
 8012280:	d11b      	bne.n	80122ba <_dtoa_r+0xa2>
 8012282:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012284:	f242 730f 	movw	r3, #9999	; 0x270f
 8012288:	6013      	str	r3, [r2, #0]
 801228a:	9b02      	ldr	r3, [sp, #8]
 801228c:	b923      	cbnz	r3, 8012298 <_dtoa_r+0x80>
 801228e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012292:	2d00      	cmp	r5, #0
 8012294:	f000 84dd 	beq.w	8012c52 <_dtoa_r+0xa3a>
 8012298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801229a:	b953      	cbnz	r3, 80122b2 <_dtoa_r+0x9a>
 801229c:	4ba3      	ldr	r3, [pc, #652]	; (801252c <_dtoa_r+0x314>)
 801229e:	e020      	b.n	80122e2 <_dtoa_r+0xca>
 80122a0:	4ba3      	ldr	r3, [pc, #652]	; (8012530 <_dtoa_r+0x318>)
 80122a2:	9304      	str	r3, [sp, #16]
 80122a4:	3308      	adds	r3, #8
 80122a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80122a8:	6013      	str	r3, [r2, #0]
 80122aa:	9804      	ldr	r0, [sp, #16]
 80122ac:	b015      	add	sp, #84	; 0x54
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	4b9e      	ldr	r3, [pc, #632]	; (801252c <_dtoa_r+0x314>)
 80122b4:	9304      	str	r3, [sp, #16]
 80122b6:	3303      	adds	r3, #3
 80122b8:	e7f5      	b.n	80122a6 <_dtoa_r+0x8e>
 80122ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80122ca:	d10c      	bne.n	80122e6 <_dtoa_r+0xce>
 80122cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80122ce:	2301      	movs	r3, #1
 80122d0:	6013      	str	r3, [r2, #0]
 80122d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 84b9 	beq.w	8012c4c <_dtoa_r+0xa34>
 80122da:	4b96      	ldr	r3, [pc, #600]	; (8012534 <_dtoa_r+0x31c>)
 80122dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80122de:	6013      	str	r3, [r2, #0]
 80122e0:	3b01      	subs	r3, #1
 80122e2:	9304      	str	r3, [sp, #16]
 80122e4:	e7e1      	b.n	80122aa <_dtoa_r+0x92>
 80122e6:	a913      	add	r1, sp, #76	; 0x4c
 80122e8:	aa12      	add	r2, sp, #72	; 0x48
 80122ea:	ed9d 0b04 	vldr	d0, [sp, #16]
 80122ee:	4620      	mov	r0, r4
 80122f0:	f001 fd4c 	bl	8013d8c <__d2b>
 80122f4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80122f8:	9001      	str	r0, [sp, #4]
 80122fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80122fc:	2e00      	cmp	r6, #0
 80122fe:	d046      	beq.n	801238e <_dtoa_r+0x176>
 8012300:	9805      	ldr	r0, [sp, #20]
 8012302:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801230a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801230e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012312:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012316:	2700      	movs	r7, #0
 8012318:	ee07 aa90 	vmov	s15, sl
 801231c:	ec43 2b16 	vmov	d6, r2, r3
 8012320:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012324:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012510 <_dtoa_r+0x2f8>
 8012328:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801232c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012330:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012518 <_dtoa_r+0x300>
 8012334:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012338:	eeb0 7b46 	vmov.f64	d7, d6
 801233c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012520 <_dtoa_r+0x308>
 8012340:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012344:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012348:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012350:	ee16 ba90 	vmov	fp, s13
 8012354:	d508      	bpl.n	8012368 <_dtoa_r+0x150>
 8012356:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801235a:	eeb4 6b47 	vcmp.f64	d6, d7
 801235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012362:	bf18      	it	ne
 8012364:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012368:	f1bb 0f16 	cmp.w	fp, #22
 801236c:	d834      	bhi.n	80123d8 <_dtoa_r+0x1c0>
 801236e:	4b72      	ldr	r3, [pc, #456]	; (8012538 <_dtoa_r+0x320>)
 8012370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012374:	ed93 7b00 	vldr	d7, [r3]
 8012378:	ed9d 6b02 	vldr	d6, [sp, #8]
 801237c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012384:	dd01      	ble.n	801238a <_dtoa_r+0x172>
 8012386:	f10b 3bff 	add.w	fp, fp, #4294967295
 801238a:	2300      	movs	r3, #0
 801238c:	e025      	b.n	80123da <_dtoa_r+0x1c2>
 801238e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012390:	eb01 0a03 	add.w	sl, r1, r3
 8012394:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012398:	2b20      	cmp	r3, #32
 801239a:	dd17      	ble.n	80123cc <_dtoa_r+0x1b4>
 801239c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80123a0:	9a02      	ldr	r2, [sp, #8]
 80123a2:	409d      	lsls	r5, r3
 80123a4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80123a8:	fa22 f303 	lsr.w	r3, r2, r3
 80123ac:	432b      	orrs	r3, r5
 80123ae:	ee07 3a90 	vmov	s15, r3
 80123b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80123b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80123be:	9805      	ldr	r0, [sp, #20]
 80123c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123c4:	2701      	movs	r7, #1
 80123c6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80123ca:	e7a5      	b.n	8012318 <_dtoa_r+0x100>
 80123cc:	9a02      	ldr	r2, [sp, #8]
 80123ce:	f1c3 0320 	rsb	r3, r3, #32
 80123d2:	fa02 f303 	lsl.w	r3, r2, r3
 80123d6:	e7ea      	b.n	80123ae <_dtoa_r+0x196>
 80123d8:	2301      	movs	r3, #1
 80123da:	eba1 0a0a 	sub.w	sl, r1, sl
 80123de:	9310      	str	r3, [sp, #64]	; 0x40
 80123e0:	f1ba 0301 	subs.w	r3, sl, #1
 80123e4:	9307      	str	r3, [sp, #28]
 80123e6:	bf43      	ittte	mi
 80123e8:	2300      	movmi	r3, #0
 80123ea:	f1ca 0a01 	rsbmi	sl, sl, #1
 80123ee:	9307      	strmi	r3, [sp, #28]
 80123f0:	f04f 0a00 	movpl.w	sl, #0
 80123f4:	f1bb 0f00 	cmp.w	fp, #0
 80123f8:	db19      	blt.n	801242e <_dtoa_r+0x216>
 80123fa:	9b07      	ldr	r3, [sp, #28]
 80123fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012400:	445b      	add	r3, fp
 8012402:	9307      	str	r3, [sp, #28]
 8012404:	f04f 0800 	mov.w	r8, #0
 8012408:	9b08      	ldr	r3, [sp, #32]
 801240a:	2b09      	cmp	r3, #9
 801240c:	d866      	bhi.n	80124dc <_dtoa_r+0x2c4>
 801240e:	2b05      	cmp	r3, #5
 8012410:	bfc4      	itt	gt
 8012412:	3b04      	subgt	r3, #4
 8012414:	9308      	strgt	r3, [sp, #32]
 8012416:	9b08      	ldr	r3, [sp, #32]
 8012418:	f1a3 0302 	sub.w	r3, r3, #2
 801241c:	bfcc      	ite	gt
 801241e:	2500      	movgt	r5, #0
 8012420:	2501      	movle	r5, #1
 8012422:	2b03      	cmp	r3, #3
 8012424:	d866      	bhi.n	80124f4 <_dtoa_r+0x2dc>
 8012426:	e8df f003 	tbb	[pc, r3]
 801242a:	5755      	.short	0x5755
 801242c:	4909      	.short	0x4909
 801242e:	2300      	movs	r3, #0
 8012430:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012434:	f1cb 0800 	rsb	r8, fp, #0
 8012438:	930b      	str	r3, [sp, #44]	; 0x2c
 801243a:	e7e5      	b.n	8012408 <_dtoa_r+0x1f0>
 801243c:	2301      	movs	r3, #1
 801243e:	9309      	str	r3, [sp, #36]	; 0x24
 8012440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012442:	2b00      	cmp	r3, #0
 8012444:	dd59      	ble.n	80124fa <_dtoa_r+0x2e2>
 8012446:	9306      	str	r3, [sp, #24]
 8012448:	4699      	mov	r9, r3
 801244a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801244c:	2200      	movs	r2, #0
 801244e:	6072      	str	r2, [r6, #4]
 8012450:	2204      	movs	r2, #4
 8012452:	f102 0014 	add.w	r0, r2, #20
 8012456:	4298      	cmp	r0, r3
 8012458:	6871      	ldr	r1, [r6, #4]
 801245a:	d953      	bls.n	8012504 <_dtoa_r+0x2ec>
 801245c:	4620      	mov	r0, r4
 801245e:	f001 f953 	bl	8013708 <_Balloc>
 8012462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012464:	6030      	str	r0, [r6, #0]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	9304      	str	r3, [sp, #16]
 801246a:	f1b9 0f0e 	cmp.w	r9, #14
 801246e:	f200 80c2 	bhi.w	80125f6 <_dtoa_r+0x3de>
 8012472:	2d00      	cmp	r5, #0
 8012474:	f000 80bf 	beq.w	80125f6 <_dtoa_r+0x3de>
 8012478:	ed9d 7b02 	vldr	d7, [sp, #8]
 801247c:	f1bb 0f00 	cmp.w	fp, #0
 8012480:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012484:	f340 80e6 	ble.w	8012654 <_dtoa_r+0x43c>
 8012488:	4a2b      	ldr	r2, [pc, #172]	; (8012538 <_dtoa_r+0x320>)
 801248a:	f00b 030f 	and.w	r3, fp, #15
 801248e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012492:	ed93 7b00 	vldr	d7, [r3]
 8012496:	ea4f 132b 	mov.w	r3, fp, asr #4
 801249a:	06da      	lsls	r2, r3, #27
 801249c:	f140 80d8 	bpl.w	8012650 <_dtoa_r+0x438>
 80124a0:	4a26      	ldr	r2, [pc, #152]	; (801253c <_dtoa_r+0x324>)
 80124a2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80124a6:	ed92 6b08 	vldr	d6, [r2, #32]
 80124aa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80124ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80124b2:	f003 030f 	and.w	r3, r3, #15
 80124b6:	2203      	movs	r2, #3
 80124b8:	4920      	ldr	r1, [pc, #128]	; (801253c <_dtoa_r+0x324>)
 80124ba:	e04a      	b.n	8012552 <_dtoa_r+0x33a>
 80124bc:	2301      	movs	r3, #1
 80124be:	9309      	str	r3, [sp, #36]	; 0x24
 80124c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124c2:	445b      	add	r3, fp
 80124c4:	f103 0901 	add.w	r9, r3, #1
 80124c8:	9306      	str	r3, [sp, #24]
 80124ca:	464b      	mov	r3, r9
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	bfb8      	it	lt
 80124d0:	2301      	movlt	r3, #1
 80124d2:	e7ba      	b.n	801244a <_dtoa_r+0x232>
 80124d4:	2300      	movs	r3, #0
 80124d6:	e7b2      	b.n	801243e <_dtoa_r+0x226>
 80124d8:	2300      	movs	r3, #0
 80124da:	e7f0      	b.n	80124be <_dtoa_r+0x2a6>
 80124dc:	2501      	movs	r5, #1
 80124de:	2300      	movs	r3, #0
 80124e0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80124e4:	f04f 33ff 	mov.w	r3, #4294967295
 80124e8:	9306      	str	r3, [sp, #24]
 80124ea:	4699      	mov	r9, r3
 80124ec:	2200      	movs	r2, #0
 80124ee:	2312      	movs	r3, #18
 80124f0:	920a      	str	r2, [sp, #40]	; 0x28
 80124f2:	e7aa      	b.n	801244a <_dtoa_r+0x232>
 80124f4:	2301      	movs	r3, #1
 80124f6:	9309      	str	r3, [sp, #36]	; 0x24
 80124f8:	e7f4      	b.n	80124e4 <_dtoa_r+0x2cc>
 80124fa:	2301      	movs	r3, #1
 80124fc:	9306      	str	r3, [sp, #24]
 80124fe:	4699      	mov	r9, r3
 8012500:	461a      	mov	r2, r3
 8012502:	e7f5      	b.n	80124f0 <_dtoa_r+0x2d8>
 8012504:	3101      	adds	r1, #1
 8012506:	6071      	str	r1, [r6, #4]
 8012508:	0052      	lsls	r2, r2, #1
 801250a:	e7a2      	b.n	8012452 <_dtoa_r+0x23a>
 801250c:	f3af 8000 	nop.w
 8012510:	636f4361 	.word	0x636f4361
 8012514:	3fd287a7 	.word	0x3fd287a7
 8012518:	8b60c8b3 	.word	0x8b60c8b3
 801251c:	3fc68a28 	.word	0x3fc68a28
 8012520:	509f79fb 	.word	0x509f79fb
 8012524:	3fd34413 	.word	0x3fd34413
 8012528:	7ff00000 	.word	0x7ff00000
 801252c:	08014e01 	.word	0x08014e01
 8012530:	08014df8 	.word	0x08014df8
 8012534:	08014d7d 	.word	0x08014d7d
 8012538:	08014ea0 	.word	0x08014ea0
 801253c:	08014e78 	.word	0x08014e78
 8012540:	07de      	lsls	r6, r3, #31
 8012542:	d504      	bpl.n	801254e <_dtoa_r+0x336>
 8012544:	ed91 6b00 	vldr	d6, [r1]
 8012548:	3201      	adds	r2, #1
 801254a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801254e:	105b      	asrs	r3, r3, #1
 8012550:	3108      	adds	r1, #8
 8012552:	2b00      	cmp	r3, #0
 8012554:	d1f4      	bne.n	8012540 <_dtoa_r+0x328>
 8012556:	ed9d 6b02 	vldr	d6, [sp, #8]
 801255a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801255e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 80a7 	beq.w	80126b8 <_dtoa_r+0x4a0>
 801256a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801256e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012572:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257a:	f140 809d 	bpl.w	80126b8 <_dtoa_r+0x4a0>
 801257e:	f1b9 0f00 	cmp.w	r9, #0
 8012582:	f000 8099 	beq.w	80126b8 <_dtoa_r+0x4a0>
 8012586:	9b06      	ldr	r3, [sp, #24]
 8012588:	2b00      	cmp	r3, #0
 801258a:	dd30      	ble.n	80125ee <_dtoa_r+0x3d6>
 801258c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012590:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012598:	9d06      	ldr	r5, [sp, #24]
 801259a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801259e:	3201      	adds	r2, #1
 80125a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80125a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80125a8:	ee07 2a90 	vmov	s15, r2
 80125ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80125b0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80125b4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80125b8:	9a03      	ldr	r2, [sp, #12]
 80125ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125be:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80125c2:	2d00      	cmp	r5, #0
 80125c4:	d17b      	bne.n	80126be <_dtoa_r+0x4a6>
 80125c6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80125ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80125ce:	ec41 0b17 	vmov	d7, r0, r1
 80125d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125da:	f300 8253 	bgt.w	8012a84 <_dtoa_r+0x86c>
 80125de:	eeb1 7b47 	vneg.f64	d7, d7
 80125e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ea:	f100 8249 	bmi.w	8012a80 <_dtoa_r+0x868>
 80125ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80125f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f2c0 8119 	blt.w	8012830 <_dtoa_r+0x618>
 80125fe:	f1bb 0f0e 	cmp.w	fp, #14
 8012602:	f300 8115 	bgt.w	8012830 <_dtoa_r+0x618>
 8012606:	4bc3      	ldr	r3, [pc, #780]	; (8012914 <_dtoa_r+0x6fc>)
 8012608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801260c:	ed93 6b00 	vldr	d6, [r3]
 8012610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012612:	2b00      	cmp	r3, #0
 8012614:	f280 80ba 	bge.w	801278c <_dtoa_r+0x574>
 8012618:	f1b9 0f00 	cmp.w	r9, #0
 801261c:	f300 80b6 	bgt.w	801278c <_dtoa_r+0x574>
 8012620:	f040 822d 	bne.w	8012a7e <_dtoa_r+0x866>
 8012624:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012628:	ee26 6b07 	vmul.f64	d6, d6, d7
 801262c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012630:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012638:	464d      	mov	r5, r9
 801263a:	464f      	mov	r7, r9
 801263c:	f280 8204 	bge.w	8012a48 <_dtoa_r+0x830>
 8012640:	9b04      	ldr	r3, [sp, #16]
 8012642:	9a04      	ldr	r2, [sp, #16]
 8012644:	1c5e      	adds	r6, r3, #1
 8012646:	2331      	movs	r3, #49	; 0x31
 8012648:	7013      	strb	r3, [r2, #0]
 801264a:	f10b 0b01 	add.w	fp, fp, #1
 801264e:	e1ff      	b.n	8012a50 <_dtoa_r+0x838>
 8012650:	2202      	movs	r2, #2
 8012652:	e731      	b.n	80124b8 <_dtoa_r+0x2a0>
 8012654:	d02e      	beq.n	80126b4 <_dtoa_r+0x49c>
 8012656:	f1cb 0300 	rsb	r3, fp, #0
 801265a:	4aae      	ldr	r2, [pc, #696]	; (8012914 <_dtoa_r+0x6fc>)
 801265c:	f003 010f 	and.w	r1, r3, #15
 8012660:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012664:	ed92 7b00 	vldr	d7, [r2]
 8012668:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801266c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012670:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012674:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012678:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801267c:	49a6      	ldr	r1, [pc, #664]	; (8012918 <_dtoa_r+0x700>)
 801267e:	111b      	asrs	r3, r3, #4
 8012680:	2000      	movs	r0, #0
 8012682:	2202      	movs	r2, #2
 8012684:	b93b      	cbnz	r3, 8012696 <_dtoa_r+0x47e>
 8012686:	2800      	cmp	r0, #0
 8012688:	f43f af6b 	beq.w	8012562 <_dtoa_r+0x34a>
 801268c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012694:	e765      	b.n	8012562 <_dtoa_r+0x34a>
 8012696:	07dd      	lsls	r5, r3, #31
 8012698:	d509      	bpl.n	80126ae <_dtoa_r+0x496>
 801269a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801269e:	ed91 7b00 	vldr	d7, [r1]
 80126a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80126a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80126aa:	3201      	adds	r2, #1
 80126ac:	2001      	movs	r0, #1
 80126ae:	105b      	asrs	r3, r3, #1
 80126b0:	3108      	adds	r1, #8
 80126b2:	e7e7      	b.n	8012684 <_dtoa_r+0x46c>
 80126b4:	2202      	movs	r2, #2
 80126b6:	e754      	b.n	8012562 <_dtoa_r+0x34a>
 80126b8:	465b      	mov	r3, fp
 80126ba:	464d      	mov	r5, r9
 80126bc:	e770      	b.n	80125a0 <_dtoa_r+0x388>
 80126be:	4a95      	ldr	r2, [pc, #596]	; (8012914 <_dtoa_r+0x6fc>)
 80126c0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80126c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80126c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ca:	ec41 0b17 	vmov	d7, r0, r1
 80126ce:	b35a      	cbz	r2, 8012728 <_dtoa_r+0x510>
 80126d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80126d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80126d8:	9e04      	ldr	r6, [sp, #16]
 80126da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80126de:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80126e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80126e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80126ea:	ee14 2a90 	vmov	r2, s9
 80126ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80126f2:	3230      	adds	r2, #48	; 0x30
 80126f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80126f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012700:	f806 2b01 	strb.w	r2, [r6], #1
 8012704:	d43b      	bmi.n	801277e <_dtoa_r+0x566>
 8012706:	ee32 5b46 	vsub.f64	d5, d2, d6
 801270a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012712:	d472      	bmi.n	80127fa <_dtoa_r+0x5e2>
 8012714:	9a04      	ldr	r2, [sp, #16]
 8012716:	1ab2      	subs	r2, r6, r2
 8012718:	4295      	cmp	r5, r2
 801271a:	f77f af68 	ble.w	80125ee <_dtoa_r+0x3d6>
 801271e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012722:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012726:	e7de      	b.n	80126e6 <_dtoa_r+0x4ce>
 8012728:	9a04      	ldr	r2, [sp, #16]
 801272a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801272e:	1956      	adds	r6, r2, r5
 8012730:	4611      	mov	r1, r2
 8012732:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012736:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801273a:	ee14 2a90 	vmov	r2, s9
 801273e:	3230      	adds	r2, #48	; 0x30
 8012740:	f801 2b01 	strb.w	r2, [r1], #1
 8012744:	42b1      	cmp	r1, r6
 8012746:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801274a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801274e:	d11a      	bne.n	8012786 <_dtoa_r+0x56e>
 8012750:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012754:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012758:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012760:	dc4b      	bgt.n	80127fa <_dtoa_r+0x5e2>
 8012762:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276e:	f57f af3e 	bpl.w	80125ee <_dtoa_r+0x3d6>
 8012772:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012776:	2a30      	cmp	r2, #48	; 0x30
 8012778:	f106 31ff 	add.w	r1, r6, #4294967295
 801277c:	d001      	beq.n	8012782 <_dtoa_r+0x56a>
 801277e:	469b      	mov	fp, r3
 8012780:	e02a      	b.n	80127d8 <_dtoa_r+0x5c0>
 8012782:	460e      	mov	r6, r1
 8012784:	e7f5      	b.n	8012772 <_dtoa_r+0x55a>
 8012786:	ee26 6b03 	vmul.f64	d6, d6, d3
 801278a:	e7d4      	b.n	8012736 <_dtoa_r+0x51e>
 801278c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012790:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012794:	9e04      	ldr	r6, [sp, #16]
 8012796:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801279a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801279e:	ee15 3a10 	vmov	r3, s10
 80127a2:	3330      	adds	r3, #48	; 0x30
 80127a4:	f806 3b01 	strb.w	r3, [r6], #1
 80127a8:	9b04      	ldr	r3, [sp, #16]
 80127aa:	1af3      	subs	r3, r6, r3
 80127ac:	4599      	cmp	r9, r3
 80127ae:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80127b2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80127b6:	d133      	bne.n	8012820 <_dtoa_r+0x608>
 80127b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80127bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80127c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c4:	dc18      	bgt.n	80127f8 <_dtoa_r+0x5e0>
 80127c6:	eeb4 7b46 	vcmp.f64	d7, d6
 80127ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ce:	d103      	bne.n	80127d8 <_dtoa_r+0x5c0>
 80127d0:	ee15 3a10 	vmov	r3, s10
 80127d4:	07db      	lsls	r3, r3, #31
 80127d6:	d40f      	bmi.n	80127f8 <_dtoa_r+0x5e0>
 80127d8:	9901      	ldr	r1, [sp, #4]
 80127da:	4620      	mov	r0, r4
 80127dc:	f000 ffc8 	bl	8013770 <_Bfree>
 80127e0:	2300      	movs	r3, #0
 80127e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127e4:	7033      	strb	r3, [r6, #0]
 80127e6:	f10b 0301 	add.w	r3, fp, #1
 80127ea:	6013      	str	r3, [r2, #0]
 80127ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f43f ad5b 	beq.w	80122aa <_dtoa_r+0x92>
 80127f4:	601e      	str	r6, [r3, #0]
 80127f6:	e558      	b.n	80122aa <_dtoa_r+0x92>
 80127f8:	465b      	mov	r3, fp
 80127fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80127fe:	2939      	cmp	r1, #57	; 0x39
 8012800:	f106 32ff 	add.w	r2, r6, #4294967295
 8012804:	d106      	bne.n	8012814 <_dtoa_r+0x5fc>
 8012806:	9904      	ldr	r1, [sp, #16]
 8012808:	4291      	cmp	r1, r2
 801280a:	d107      	bne.n	801281c <_dtoa_r+0x604>
 801280c:	2230      	movs	r2, #48	; 0x30
 801280e:	700a      	strb	r2, [r1, #0]
 8012810:	3301      	adds	r3, #1
 8012812:	460a      	mov	r2, r1
 8012814:	7811      	ldrb	r1, [r2, #0]
 8012816:	3101      	adds	r1, #1
 8012818:	7011      	strb	r1, [r2, #0]
 801281a:	e7b0      	b.n	801277e <_dtoa_r+0x566>
 801281c:	4616      	mov	r6, r2
 801281e:	e7ec      	b.n	80127fa <_dtoa_r+0x5e2>
 8012820:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012824:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282c:	d1b3      	bne.n	8012796 <_dtoa_r+0x57e>
 801282e:	e7d3      	b.n	80127d8 <_dtoa_r+0x5c0>
 8012830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012832:	2a00      	cmp	r2, #0
 8012834:	f000 808d 	beq.w	8012952 <_dtoa_r+0x73a>
 8012838:	9a08      	ldr	r2, [sp, #32]
 801283a:	2a01      	cmp	r2, #1
 801283c:	dc72      	bgt.n	8012924 <_dtoa_r+0x70c>
 801283e:	2f00      	cmp	r7, #0
 8012840:	d06c      	beq.n	801291c <_dtoa_r+0x704>
 8012842:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012846:	4645      	mov	r5, r8
 8012848:	4656      	mov	r6, sl
 801284a:	9a07      	ldr	r2, [sp, #28]
 801284c:	2101      	movs	r1, #1
 801284e:	441a      	add	r2, r3
 8012850:	4620      	mov	r0, r4
 8012852:	449a      	add	sl, r3
 8012854:	9207      	str	r2, [sp, #28]
 8012856:	f001 f869 	bl	801392c <__i2b>
 801285a:	4607      	mov	r7, r0
 801285c:	2e00      	cmp	r6, #0
 801285e:	dd0b      	ble.n	8012878 <_dtoa_r+0x660>
 8012860:	9b07      	ldr	r3, [sp, #28]
 8012862:	2b00      	cmp	r3, #0
 8012864:	dd08      	ble.n	8012878 <_dtoa_r+0x660>
 8012866:	42b3      	cmp	r3, r6
 8012868:	9a07      	ldr	r2, [sp, #28]
 801286a:	bfa8      	it	ge
 801286c:	4633      	movge	r3, r6
 801286e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012872:	1af6      	subs	r6, r6, r3
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	9307      	str	r3, [sp, #28]
 8012878:	f1b8 0f00 	cmp.w	r8, #0
 801287c:	d01d      	beq.n	80128ba <_dtoa_r+0x6a2>
 801287e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012880:	2b00      	cmp	r3, #0
 8012882:	d06a      	beq.n	801295a <_dtoa_r+0x742>
 8012884:	b18d      	cbz	r5, 80128aa <_dtoa_r+0x692>
 8012886:	4639      	mov	r1, r7
 8012888:	462a      	mov	r2, r5
 801288a:	4620      	mov	r0, r4
 801288c:	f001 f8ee 	bl	8013a6c <__pow5mult>
 8012890:	9a01      	ldr	r2, [sp, #4]
 8012892:	4601      	mov	r1, r0
 8012894:	4607      	mov	r7, r0
 8012896:	4620      	mov	r0, r4
 8012898:	f001 f851 	bl	801393e <__multiply>
 801289c:	9901      	ldr	r1, [sp, #4]
 801289e:	900c      	str	r0, [sp, #48]	; 0x30
 80128a0:	4620      	mov	r0, r4
 80128a2:	f000 ff65 	bl	8013770 <_Bfree>
 80128a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	ebb8 0205 	subs.w	r2, r8, r5
 80128ae:	d004      	beq.n	80128ba <_dtoa_r+0x6a2>
 80128b0:	9901      	ldr	r1, [sp, #4]
 80128b2:	4620      	mov	r0, r4
 80128b4:	f001 f8da 	bl	8013a6c <__pow5mult>
 80128b8:	9001      	str	r0, [sp, #4]
 80128ba:	2101      	movs	r1, #1
 80128bc:	4620      	mov	r0, r4
 80128be:	f001 f835 	bl	801392c <__i2b>
 80128c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128c4:	4605      	mov	r5, r0
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 81ca 	beq.w	8012c60 <_dtoa_r+0xa48>
 80128cc:	461a      	mov	r2, r3
 80128ce:	4601      	mov	r1, r0
 80128d0:	4620      	mov	r0, r4
 80128d2:	f001 f8cb 	bl	8013a6c <__pow5mult>
 80128d6:	9b08      	ldr	r3, [sp, #32]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	4605      	mov	r5, r0
 80128dc:	dc44      	bgt.n	8012968 <_dtoa_r+0x750>
 80128de:	9b02      	ldr	r3, [sp, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d13c      	bne.n	801295e <_dtoa_r+0x746>
 80128e4:	9b03      	ldr	r3, [sp, #12]
 80128e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d137      	bne.n	801295e <_dtoa_r+0x746>
 80128ee:	9b03      	ldr	r3, [sp, #12]
 80128f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128f4:	0d1b      	lsrs	r3, r3, #20
 80128f6:	051b      	lsls	r3, r3, #20
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d033      	beq.n	8012964 <_dtoa_r+0x74c>
 80128fc:	9b07      	ldr	r3, [sp, #28]
 80128fe:	3301      	adds	r3, #1
 8012900:	f10a 0a01 	add.w	sl, sl, #1
 8012904:	9307      	str	r3, [sp, #28]
 8012906:	f04f 0801 	mov.w	r8, #1
 801290a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801290c:	bb73      	cbnz	r3, 801296c <_dtoa_r+0x754>
 801290e:	2001      	movs	r0, #1
 8012910:	e034      	b.n	801297c <_dtoa_r+0x764>
 8012912:	bf00      	nop
 8012914:	08014ea0 	.word	0x08014ea0
 8012918:	08014e78 	.word	0x08014e78
 801291c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801291e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012922:	e790      	b.n	8012846 <_dtoa_r+0x62e>
 8012924:	f109 35ff 	add.w	r5, r9, #4294967295
 8012928:	45a8      	cmp	r8, r5
 801292a:	bfbf      	itttt	lt
 801292c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801292e:	eba5 0808 	sublt.w	r8, r5, r8
 8012932:	4443      	addlt	r3, r8
 8012934:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012936:	bfb6      	itet	lt
 8012938:	46a8      	movlt	r8, r5
 801293a:	eba8 0505 	subge.w	r5, r8, r5
 801293e:	2500      	movlt	r5, #0
 8012940:	f1b9 0f00 	cmp.w	r9, #0
 8012944:	bfb9      	ittee	lt
 8012946:	ebaa 0609 	sublt.w	r6, sl, r9
 801294a:	2300      	movlt	r3, #0
 801294c:	4656      	movge	r6, sl
 801294e:	464b      	movge	r3, r9
 8012950:	e77b      	b.n	801284a <_dtoa_r+0x632>
 8012952:	4645      	mov	r5, r8
 8012954:	4656      	mov	r6, sl
 8012956:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012958:	e780      	b.n	801285c <_dtoa_r+0x644>
 801295a:	4642      	mov	r2, r8
 801295c:	e7a8      	b.n	80128b0 <_dtoa_r+0x698>
 801295e:	f04f 0800 	mov.w	r8, #0
 8012962:	e7d2      	b.n	801290a <_dtoa_r+0x6f2>
 8012964:	4698      	mov	r8, r3
 8012966:	e7d0      	b.n	801290a <_dtoa_r+0x6f2>
 8012968:	f04f 0800 	mov.w	r8, #0
 801296c:	692b      	ldr	r3, [r5, #16]
 801296e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012972:	6918      	ldr	r0, [r3, #16]
 8012974:	f000 ff8c 	bl	8013890 <__hi0bits>
 8012978:	f1c0 0020 	rsb	r0, r0, #32
 801297c:	9b07      	ldr	r3, [sp, #28]
 801297e:	4418      	add	r0, r3
 8012980:	f010 001f 	ands.w	r0, r0, #31
 8012984:	d047      	beq.n	8012a16 <_dtoa_r+0x7fe>
 8012986:	f1c0 0320 	rsb	r3, r0, #32
 801298a:	2b04      	cmp	r3, #4
 801298c:	dd3b      	ble.n	8012a06 <_dtoa_r+0x7ee>
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	f1c0 001c 	rsb	r0, r0, #28
 8012994:	4482      	add	sl, r0
 8012996:	4406      	add	r6, r0
 8012998:	4403      	add	r3, r0
 801299a:	9307      	str	r3, [sp, #28]
 801299c:	f1ba 0f00 	cmp.w	sl, #0
 80129a0:	dd05      	ble.n	80129ae <_dtoa_r+0x796>
 80129a2:	4652      	mov	r2, sl
 80129a4:	9901      	ldr	r1, [sp, #4]
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 f8ae 	bl	8013b08 <__lshift>
 80129ac:	9001      	str	r0, [sp, #4]
 80129ae:	9b07      	ldr	r3, [sp, #28]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	dd05      	ble.n	80129c0 <_dtoa_r+0x7a8>
 80129b4:	4629      	mov	r1, r5
 80129b6:	461a      	mov	r2, r3
 80129b8:	4620      	mov	r0, r4
 80129ba:	f001 f8a5 	bl	8013b08 <__lshift>
 80129be:	4605      	mov	r5, r0
 80129c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129c2:	b353      	cbz	r3, 8012a1a <_dtoa_r+0x802>
 80129c4:	4629      	mov	r1, r5
 80129c6:	9801      	ldr	r0, [sp, #4]
 80129c8:	f001 f8f2 	bl	8013bb0 <__mcmp>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	da24      	bge.n	8012a1a <_dtoa_r+0x802>
 80129d0:	2300      	movs	r3, #0
 80129d2:	220a      	movs	r2, #10
 80129d4:	9901      	ldr	r1, [sp, #4]
 80129d6:	4620      	mov	r0, r4
 80129d8:	f000 fee1 	bl	801379e <__multadd>
 80129dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129de:	9001      	str	r0, [sp, #4]
 80129e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 8142 	beq.w	8012c6e <_dtoa_r+0xa56>
 80129ea:	2300      	movs	r3, #0
 80129ec:	4639      	mov	r1, r7
 80129ee:	220a      	movs	r2, #10
 80129f0:	4620      	mov	r0, r4
 80129f2:	f000 fed4 	bl	801379e <__multadd>
 80129f6:	9b06      	ldr	r3, [sp, #24]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	4607      	mov	r7, r0
 80129fc:	dc4b      	bgt.n	8012a96 <_dtoa_r+0x87e>
 80129fe:	9b08      	ldr	r3, [sp, #32]
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	dd48      	ble.n	8012a96 <_dtoa_r+0x87e>
 8012a04:	e011      	b.n	8012a2a <_dtoa_r+0x812>
 8012a06:	d0c9      	beq.n	801299c <_dtoa_r+0x784>
 8012a08:	9a07      	ldr	r2, [sp, #28]
 8012a0a:	331c      	adds	r3, #28
 8012a0c:	441a      	add	r2, r3
 8012a0e:	449a      	add	sl, r3
 8012a10:	441e      	add	r6, r3
 8012a12:	4613      	mov	r3, r2
 8012a14:	e7c1      	b.n	801299a <_dtoa_r+0x782>
 8012a16:	4603      	mov	r3, r0
 8012a18:	e7f6      	b.n	8012a08 <_dtoa_r+0x7f0>
 8012a1a:	f1b9 0f00 	cmp.w	r9, #0
 8012a1e:	dc34      	bgt.n	8012a8a <_dtoa_r+0x872>
 8012a20:	9b08      	ldr	r3, [sp, #32]
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	dd31      	ble.n	8012a8a <_dtoa_r+0x872>
 8012a26:	f8cd 9018 	str.w	r9, [sp, #24]
 8012a2a:	9b06      	ldr	r3, [sp, #24]
 8012a2c:	b963      	cbnz	r3, 8012a48 <_dtoa_r+0x830>
 8012a2e:	4629      	mov	r1, r5
 8012a30:	2205      	movs	r2, #5
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 feb3 	bl	801379e <__multadd>
 8012a38:	4601      	mov	r1, r0
 8012a3a:	4605      	mov	r5, r0
 8012a3c:	9801      	ldr	r0, [sp, #4]
 8012a3e:	f001 f8b7 	bl	8013bb0 <__mcmp>
 8012a42:	2800      	cmp	r0, #0
 8012a44:	f73f adfc 	bgt.w	8012640 <_dtoa_r+0x428>
 8012a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a4a:	9e04      	ldr	r6, [sp, #16]
 8012a4c:	ea6f 0b03 	mvn.w	fp, r3
 8012a50:	f04f 0900 	mov.w	r9, #0
 8012a54:	4629      	mov	r1, r5
 8012a56:	4620      	mov	r0, r4
 8012a58:	f000 fe8a 	bl	8013770 <_Bfree>
 8012a5c:	2f00      	cmp	r7, #0
 8012a5e:	f43f aebb 	beq.w	80127d8 <_dtoa_r+0x5c0>
 8012a62:	f1b9 0f00 	cmp.w	r9, #0
 8012a66:	d005      	beq.n	8012a74 <_dtoa_r+0x85c>
 8012a68:	45b9      	cmp	r9, r7
 8012a6a:	d003      	beq.n	8012a74 <_dtoa_r+0x85c>
 8012a6c:	4649      	mov	r1, r9
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f000 fe7e 	bl	8013770 <_Bfree>
 8012a74:	4639      	mov	r1, r7
 8012a76:	4620      	mov	r0, r4
 8012a78:	f000 fe7a 	bl	8013770 <_Bfree>
 8012a7c:	e6ac      	b.n	80127d8 <_dtoa_r+0x5c0>
 8012a7e:	2500      	movs	r5, #0
 8012a80:	462f      	mov	r7, r5
 8012a82:	e7e1      	b.n	8012a48 <_dtoa_r+0x830>
 8012a84:	469b      	mov	fp, r3
 8012a86:	462f      	mov	r7, r5
 8012a88:	e5da      	b.n	8012640 <_dtoa_r+0x428>
 8012a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a8c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f000 80f3 	beq.w	8012c7c <_dtoa_r+0xa64>
 8012a96:	2e00      	cmp	r6, #0
 8012a98:	dd05      	ble.n	8012aa6 <_dtoa_r+0x88e>
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f001 f832 	bl	8013b08 <__lshift>
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	f1b8 0f00 	cmp.w	r8, #0
 8012aaa:	d04c      	beq.n	8012b46 <_dtoa_r+0x92e>
 8012aac:	6879      	ldr	r1, [r7, #4]
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f000 fe2a 	bl	8013708 <_Balloc>
 8012ab4:	693a      	ldr	r2, [r7, #16]
 8012ab6:	3202      	adds	r2, #2
 8012ab8:	4606      	mov	r6, r0
 8012aba:	0092      	lsls	r2, r2, #2
 8012abc:	f107 010c 	add.w	r1, r7, #12
 8012ac0:	300c      	adds	r0, #12
 8012ac2:	f7fd fc07 	bl	80102d4 <memcpy>
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	4631      	mov	r1, r6
 8012aca:	4620      	mov	r0, r4
 8012acc:	f001 f81c 	bl	8013b08 <__lshift>
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	46b9      	mov	r9, r7
 8012adc:	9307      	str	r3, [sp, #28]
 8012ade:	4607      	mov	r7, r0
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	9801      	ldr	r0, [sp, #4]
 8012ae4:	f7ff fb0a 	bl	80120fc <quorem>
 8012ae8:	4649      	mov	r1, r9
 8012aea:	4606      	mov	r6, r0
 8012aec:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012af0:	9801      	ldr	r0, [sp, #4]
 8012af2:	f001 f85d 	bl	8013bb0 <__mcmp>
 8012af6:	463a      	mov	r2, r7
 8012af8:	9002      	str	r0, [sp, #8]
 8012afa:	4629      	mov	r1, r5
 8012afc:	4620      	mov	r0, r4
 8012afe:	f001 f871 	bl	8013be4 <__mdiff>
 8012b02:	68c3      	ldr	r3, [r0, #12]
 8012b04:	4602      	mov	r2, r0
 8012b06:	bb03      	cbnz	r3, 8012b4a <_dtoa_r+0x932>
 8012b08:	4601      	mov	r1, r0
 8012b0a:	9009      	str	r0, [sp, #36]	; 0x24
 8012b0c:	9801      	ldr	r0, [sp, #4]
 8012b0e:	f001 f84f 	bl	8013bb0 <__mcmp>
 8012b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b14:	4603      	mov	r3, r0
 8012b16:	4611      	mov	r1, r2
 8012b18:	4620      	mov	r0, r4
 8012b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b1c:	f000 fe28 	bl	8013770 <_Bfree>
 8012b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b22:	b9a3      	cbnz	r3, 8012b4e <_dtoa_r+0x936>
 8012b24:	9a08      	ldr	r2, [sp, #32]
 8012b26:	b992      	cbnz	r2, 8012b4e <_dtoa_r+0x936>
 8012b28:	9a07      	ldr	r2, [sp, #28]
 8012b2a:	b982      	cbnz	r2, 8012b4e <_dtoa_r+0x936>
 8012b2c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012b30:	d029      	beq.n	8012b86 <_dtoa_r+0x96e>
 8012b32:	9b02      	ldr	r3, [sp, #8]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	dd01      	ble.n	8012b3c <_dtoa_r+0x924>
 8012b38:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012b3c:	f10a 0601 	add.w	r6, sl, #1
 8012b40:	f88a 8000 	strb.w	r8, [sl]
 8012b44:	e786      	b.n	8012a54 <_dtoa_r+0x83c>
 8012b46:	4638      	mov	r0, r7
 8012b48:	e7c2      	b.n	8012ad0 <_dtoa_r+0x8b8>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e7e3      	b.n	8012b16 <_dtoa_r+0x8fe>
 8012b4e:	9a02      	ldr	r2, [sp, #8]
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	db04      	blt.n	8012b5e <_dtoa_r+0x946>
 8012b54:	d124      	bne.n	8012ba0 <_dtoa_r+0x988>
 8012b56:	9a08      	ldr	r2, [sp, #32]
 8012b58:	bb12      	cbnz	r2, 8012ba0 <_dtoa_r+0x988>
 8012b5a:	9a07      	ldr	r2, [sp, #28]
 8012b5c:	bb02      	cbnz	r2, 8012ba0 <_dtoa_r+0x988>
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	ddec      	ble.n	8012b3c <_dtoa_r+0x924>
 8012b62:	2201      	movs	r2, #1
 8012b64:	9901      	ldr	r1, [sp, #4]
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 ffce 	bl	8013b08 <__lshift>
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	9001      	str	r0, [sp, #4]
 8012b70:	f001 f81e 	bl	8013bb0 <__mcmp>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	dc03      	bgt.n	8012b80 <_dtoa_r+0x968>
 8012b78:	d1e0      	bne.n	8012b3c <_dtoa_r+0x924>
 8012b7a:	f018 0f01 	tst.w	r8, #1
 8012b7e:	d0dd      	beq.n	8012b3c <_dtoa_r+0x924>
 8012b80:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012b84:	d1d8      	bne.n	8012b38 <_dtoa_r+0x920>
 8012b86:	2339      	movs	r3, #57	; 0x39
 8012b88:	f10a 0601 	add.w	r6, sl, #1
 8012b8c:	f88a 3000 	strb.w	r3, [sl]
 8012b90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b94:	2b39      	cmp	r3, #57	; 0x39
 8012b96:	f106 32ff 	add.w	r2, r6, #4294967295
 8012b9a:	d04c      	beq.n	8012c36 <_dtoa_r+0xa1e>
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	e051      	b.n	8012c44 <_dtoa_r+0xa2c>
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	f10a 0601 	add.w	r6, sl, #1
 8012ba6:	dd05      	ble.n	8012bb4 <_dtoa_r+0x99c>
 8012ba8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012bac:	d0eb      	beq.n	8012b86 <_dtoa_r+0x96e>
 8012bae:	f108 0801 	add.w	r8, r8, #1
 8012bb2:	e7c5      	b.n	8012b40 <_dtoa_r+0x928>
 8012bb4:	9b04      	ldr	r3, [sp, #16]
 8012bb6:	9a06      	ldr	r2, [sp, #24]
 8012bb8:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012bbc:	1af3      	subs	r3, r6, r3
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d021      	beq.n	8012c06 <_dtoa_r+0x9ee>
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	220a      	movs	r2, #10
 8012bc6:	9901      	ldr	r1, [sp, #4]
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f000 fde8 	bl	801379e <__multadd>
 8012bce:	45b9      	cmp	r9, r7
 8012bd0:	9001      	str	r0, [sp, #4]
 8012bd2:	f04f 0300 	mov.w	r3, #0
 8012bd6:	f04f 020a 	mov.w	r2, #10
 8012bda:	4649      	mov	r1, r9
 8012bdc:	4620      	mov	r0, r4
 8012bde:	d105      	bne.n	8012bec <_dtoa_r+0x9d4>
 8012be0:	f000 fddd 	bl	801379e <__multadd>
 8012be4:	4681      	mov	r9, r0
 8012be6:	4607      	mov	r7, r0
 8012be8:	46b2      	mov	sl, r6
 8012bea:	e779      	b.n	8012ae0 <_dtoa_r+0x8c8>
 8012bec:	f000 fdd7 	bl	801379e <__multadd>
 8012bf0:	4639      	mov	r1, r7
 8012bf2:	4681      	mov	r9, r0
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	220a      	movs	r2, #10
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f000 fdd0 	bl	801379e <__multadd>
 8012bfe:	4607      	mov	r7, r0
 8012c00:	e7f2      	b.n	8012be8 <_dtoa_r+0x9d0>
 8012c02:	f04f 0900 	mov.w	r9, #0
 8012c06:	2201      	movs	r2, #1
 8012c08:	9901      	ldr	r1, [sp, #4]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 ff7c 	bl	8013b08 <__lshift>
 8012c10:	4629      	mov	r1, r5
 8012c12:	9001      	str	r0, [sp, #4]
 8012c14:	f000 ffcc 	bl	8013bb0 <__mcmp>
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	dcb9      	bgt.n	8012b90 <_dtoa_r+0x978>
 8012c1c:	d102      	bne.n	8012c24 <_dtoa_r+0xa0c>
 8012c1e:	f018 0f01 	tst.w	r8, #1
 8012c22:	d1b5      	bne.n	8012b90 <_dtoa_r+0x978>
 8012c24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012c28:	2b30      	cmp	r3, #48	; 0x30
 8012c2a:	f106 32ff 	add.w	r2, r6, #4294967295
 8012c2e:	f47f af11 	bne.w	8012a54 <_dtoa_r+0x83c>
 8012c32:	4616      	mov	r6, r2
 8012c34:	e7f6      	b.n	8012c24 <_dtoa_r+0xa0c>
 8012c36:	9b04      	ldr	r3, [sp, #16]
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d105      	bne.n	8012c48 <_dtoa_r+0xa30>
 8012c3c:	9a04      	ldr	r2, [sp, #16]
 8012c3e:	f10b 0b01 	add.w	fp, fp, #1
 8012c42:	2331      	movs	r3, #49	; 0x31
 8012c44:	7013      	strb	r3, [r2, #0]
 8012c46:	e705      	b.n	8012a54 <_dtoa_r+0x83c>
 8012c48:	4616      	mov	r6, r2
 8012c4a:	e7a1      	b.n	8012b90 <_dtoa_r+0x978>
 8012c4c:	4b16      	ldr	r3, [pc, #88]	; (8012ca8 <_dtoa_r+0xa90>)
 8012c4e:	f7ff bb48 	b.w	80122e2 <_dtoa_r+0xca>
 8012c52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f47f ab23 	bne.w	80122a0 <_dtoa_r+0x88>
 8012c5a:	4b14      	ldr	r3, [pc, #80]	; (8012cac <_dtoa_r+0xa94>)
 8012c5c:	f7ff bb41 	b.w	80122e2 <_dtoa_r+0xca>
 8012c60:	9b08      	ldr	r3, [sp, #32]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	f77f ae3b 	ble.w	80128de <_dtoa_r+0x6c6>
 8012c68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012c6c:	e64f      	b.n	801290e <_dtoa_r+0x6f6>
 8012c6e:	9b06      	ldr	r3, [sp, #24]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	dc03      	bgt.n	8012c7c <_dtoa_r+0xa64>
 8012c74:	9b08      	ldr	r3, [sp, #32]
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	f73f aed7 	bgt.w	8012a2a <_dtoa_r+0x812>
 8012c7c:	9e04      	ldr	r6, [sp, #16]
 8012c7e:	9801      	ldr	r0, [sp, #4]
 8012c80:	4629      	mov	r1, r5
 8012c82:	f7ff fa3b 	bl	80120fc <quorem>
 8012c86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012c8a:	f806 8b01 	strb.w	r8, [r6], #1
 8012c8e:	9b04      	ldr	r3, [sp, #16]
 8012c90:	9a06      	ldr	r2, [sp, #24]
 8012c92:	1af3      	subs	r3, r6, r3
 8012c94:	429a      	cmp	r2, r3
 8012c96:	ddb4      	ble.n	8012c02 <_dtoa_r+0x9ea>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	220a      	movs	r2, #10
 8012c9c:	9901      	ldr	r1, [sp, #4]
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f000 fd7d 	bl	801379e <__multadd>
 8012ca4:	9001      	str	r0, [sp, #4]
 8012ca6:	e7ea      	b.n	8012c7e <_dtoa_r+0xa66>
 8012ca8:	08014d7c 	.word	0x08014d7c
 8012cac:	08014df8 	.word	0x08014df8

08012cb0 <__sflush_r>:
 8012cb0:	898a      	ldrh	r2, [r1, #12]
 8012cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	0710      	lsls	r0, r2, #28
 8012cba:	460c      	mov	r4, r1
 8012cbc:	d458      	bmi.n	8012d70 <__sflush_r+0xc0>
 8012cbe:	684b      	ldr	r3, [r1, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc05      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dc02      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cca:	2000      	movs	r0, #0
 8012ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	d0f9      	beq.n	8012cca <__sflush_r+0x1a>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cdc:	682f      	ldr	r7, [r5, #0]
 8012cde:	6a21      	ldr	r1, [r4, #32]
 8012ce0:	602b      	str	r3, [r5, #0]
 8012ce2:	d032      	beq.n	8012d4a <__sflush_r+0x9a>
 8012ce4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ce6:	89a3      	ldrh	r3, [r4, #12]
 8012ce8:	075a      	lsls	r2, r3, #29
 8012cea:	d505      	bpl.n	8012cf8 <__sflush_r+0x48>
 8012cec:	6863      	ldr	r3, [r4, #4]
 8012cee:	1ac0      	subs	r0, r0, r3
 8012cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cf2:	b10b      	cbz	r3, 8012cf8 <__sflush_r+0x48>
 8012cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cf6:	1ac0      	subs	r0, r0, r3
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cfe:	6a21      	ldr	r1, [r4, #32]
 8012d00:	4628      	mov	r0, r5
 8012d02:	47b0      	blx	r6
 8012d04:	1c43      	adds	r3, r0, #1
 8012d06:	89a3      	ldrh	r3, [r4, #12]
 8012d08:	d106      	bne.n	8012d18 <__sflush_r+0x68>
 8012d0a:	6829      	ldr	r1, [r5, #0]
 8012d0c:	291d      	cmp	r1, #29
 8012d0e:	d848      	bhi.n	8012da2 <__sflush_r+0xf2>
 8012d10:	4a29      	ldr	r2, [pc, #164]	; (8012db8 <__sflush_r+0x108>)
 8012d12:	40ca      	lsrs	r2, r1
 8012d14:	07d6      	lsls	r6, r2, #31
 8012d16:	d544      	bpl.n	8012da2 <__sflush_r+0xf2>
 8012d18:	2200      	movs	r2, #0
 8012d1a:	6062      	str	r2, [r4, #4]
 8012d1c:	04d9      	lsls	r1, r3, #19
 8012d1e:	6922      	ldr	r2, [r4, #16]
 8012d20:	6022      	str	r2, [r4, #0]
 8012d22:	d504      	bpl.n	8012d2e <__sflush_r+0x7e>
 8012d24:	1c42      	adds	r2, r0, #1
 8012d26:	d101      	bne.n	8012d2c <__sflush_r+0x7c>
 8012d28:	682b      	ldr	r3, [r5, #0]
 8012d2a:	b903      	cbnz	r3, 8012d2e <__sflush_r+0x7e>
 8012d2c:	6560      	str	r0, [r4, #84]	; 0x54
 8012d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d30:	602f      	str	r7, [r5, #0]
 8012d32:	2900      	cmp	r1, #0
 8012d34:	d0c9      	beq.n	8012cca <__sflush_r+0x1a>
 8012d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d3a:	4299      	cmp	r1, r3
 8012d3c:	d002      	beq.n	8012d44 <__sflush_r+0x94>
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f7fd faea 	bl	8010318 <_free_r>
 8012d44:	2000      	movs	r0, #0
 8012d46:	6360      	str	r0, [r4, #52]	; 0x34
 8012d48:	e7c0      	b.n	8012ccc <__sflush_r+0x1c>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	47b0      	blx	r6
 8012d50:	1c41      	adds	r1, r0, #1
 8012d52:	d1c8      	bne.n	8012ce6 <__sflush_r+0x36>
 8012d54:	682b      	ldr	r3, [r5, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d0c5      	beq.n	8012ce6 <__sflush_r+0x36>
 8012d5a:	2b1d      	cmp	r3, #29
 8012d5c:	d001      	beq.n	8012d62 <__sflush_r+0xb2>
 8012d5e:	2b16      	cmp	r3, #22
 8012d60:	d101      	bne.n	8012d66 <__sflush_r+0xb6>
 8012d62:	602f      	str	r7, [r5, #0]
 8012d64:	e7b1      	b.n	8012cca <__sflush_r+0x1a>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d6c:	81a3      	strh	r3, [r4, #12]
 8012d6e:	e7ad      	b.n	8012ccc <__sflush_r+0x1c>
 8012d70:	690f      	ldr	r7, [r1, #16]
 8012d72:	2f00      	cmp	r7, #0
 8012d74:	d0a9      	beq.n	8012cca <__sflush_r+0x1a>
 8012d76:	0793      	lsls	r3, r2, #30
 8012d78:	680e      	ldr	r6, [r1, #0]
 8012d7a:	bf08      	it	eq
 8012d7c:	694b      	ldreq	r3, [r1, #20]
 8012d7e:	600f      	str	r7, [r1, #0]
 8012d80:	bf18      	it	ne
 8012d82:	2300      	movne	r3, #0
 8012d84:	eba6 0807 	sub.w	r8, r6, r7
 8012d88:	608b      	str	r3, [r1, #8]
 8012d8a:	f1b8 0f00 	cmp.w	r8, #0
 8012d8e:	dd9c      	ble.n	8012cca <__sflush_r+0x1a>
 8012d90:	4643      	mov	r3, r8
 8012d92:	463a      	mov	r2, r7
 8012d94:	6a21      	ldr	r1, [r4, #32]
 8012d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b0      	blx	r6
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	dc06      	bgt.n	8012dae <__sflush_r+0xfe>
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dac:	e78e      	b.n	8012ccc <__sflush_r+0x1c>
 8012dae:	4407      	add	r7, r0
 8012db0:	eba8 0800 	sub.w	r8, r8, r0
 8012db4:	e7e9      	b.n	8012d8a <__sflush_r+0xda>
 8012db6:	bf00      	nop
 8012db8:	20400001 	.word	0x20400001

08012dbc <_fflush_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	690b      	ldr	r3, [r1, #16]
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	b1db      	cbz	r3, 8012dfe <_fflush_r+0x42>
 8012dc6:	b118      	cbz	r0, 8012dd0 <_fflush_r+0x14>
 8012dc8:	6983      	ldr	r3, [r0, #24]
 8012dca:	b90b      	cbnz	r3, 8012dd0 <_fflush_r+0x14>
 8012dcc:	f000 f860 	bl	8012e90 <__sinit>
 8012dd0:	4b0c      	ldr	r3, [pc, #48]	; (8012e04 <_fflush_r+0x48>)
 8012dd2:	429c      	cmp	r4, r3
 8012dd4:	d109      	bne.n	8012dea <_fflush_r+0x2e>
 8012dd6:	686c      	ldr	r4, [r5, #4]
 8012dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ddc:	b17b      	cbz	r3, 8012dfe <_fflush_r+0x42>
 8012dde:	4621      	mov	r1, r4
 8012de0:	4628      	mov	r0, r5
 8012de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012de6:	f7ff bf63 	b.w	8012cb0 <__sflush_r>
 8012dea:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <_fflush_r+0x4c>)
 8012dec:	429c      	cmp	r4, r3
 8012dee:	d101      	bne.n	8012df4 <_fflush_r+0x38>
 8012df0:	68ac      	ldr	r4, [r5, #8]
 8012df2:	e7f1      	b.n	8012dd8 <_fflush_r+0x1c>
 8012df4:	4b05      	ldr	r3, [pc, #20]	; (8012e0c <_fflush_r+0x50>)
 8012df6:	429c      	cmp	r4, r3
 8012df8:	bf08      	it	eq
 8012dfa:	68ec      	ldreq	r4, [r5, #12]
 8012dfc:	e7ec      	b.n	8012dd8 <_fflush_r+0x1c>
 8012dfe:	2000      	movs	r0, #0
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	bf00      	nop
 8012e04:	08014e28 	.word	0x08014e28
 8012e08:	08014e48 	.word	0x08014e48
 8012e0c:	08014e08 	.word	0x08014e08

08012e10 <std>:
 8012e10:	2300      	movs	r3, #0
 8012e12:	b510      	push	{r4, lr}
 8012e14:	4604      	mov	r4, r0
 8012e16:	e9c0 3300 	strd	r3, r3, [r0]
 8012e1a:	6083      	str	r3, [r0, #8]
 8012e1c:	8181      	strh	r1, [r0, #12]
 8012e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8012e20:	81c2      	strh	r2, [r0, #14]
 8012e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e26:	6183      	str	r3, [r0, #24]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	2208      	movs	r2, #8
 8012e2c:	305c      	adds	r0, #92	; 0x5c
 8012e2e:	f7fd fa5c 	bl	80102ea <memset>
 8012e32:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <std+0x38>)
 8012e34:	6263      	str	r3, [r4, #36]	; 0x24
 8012e36:	4b05      	ldr	r3, [pc, #20]	; (8012e4c <std+0x3c>)
 8012e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e3a:	4b05      	ldr	r3, [pc, #20]	; (8012e50 <std+0x40>)
 8012e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e3e:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <std+0x44>)
 8012e40:	6224      	str	r4, [r4, #32]
 8012e42:	6323      	str	r3, [r4, #48]	; 0x30
 8012e44:	bd10      	pop	{r4, pc}
 8012e46:	bf00      	nop
 8012e48:	0801442d 	.word	0x0801442d
 8012e4c:	0801444f 	.word	0x0801444f
 8012e50:	08014487 	.word	0x08014487
 8012e54:	080144ab 	.word	0x080144ab

08012e58 <_cleanup_r>:
 8012e58:	4901      	ldr	r1, [pc, #4]	; (8012e60 <_cleanup_r+0x8>)
 8012e5a:	f000 b885 	b.w	8012f68 <_fwalk_reent>
 8012e5e:	bf00      	nop
 8012e60:	08012dbd 	.word	0x08012dbd

08012e64 <__sfmoreglue>:
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	1e4a      	subs	r2, r1, #1
 8012e68:	2568      	movs	r5, #104	; 0x68
 8012e6a:	4355      	muls	r5, r2
 8012e6c:	460e      	mov	r6, r1
 8012e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e72:	f7fd fa9f 	bl	80103b4 <_malloc_r>
 8012e76:	4604      	mov	r4, r0
 8012e78:	b140      	cbz	r0, 8012e8c <__sfmoreglue+0x28>
 8012e7a:	2100      	movs	r1, #0
 8012e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8012e80:	300c      	adds	r0, #12
 8012e82:	60a0      	str	r0, [r4, #8]
 8012e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e88:	f7fd fa2f 	bl	80102ea <memset>
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}

08012e90 <__sinit>:
 8012e90:	6983      	ldr	r3, [r0, #24]
 8012e92:	b510      	push	{r4, lr}
 8012e94:	4604      	mov	r4, r0
 8012e96:	bb33      	cbnz	r3, 8012ee6 <__sinit+0x56>
 8012e98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012e9c:	6503      	str	r3, [r0, #80]	; 0x50
 8012e9e:	4b12      	ldr	r3, [pc, #72]	; (8012ee8 <__sinit+0x58>)
 8012ea0:	4a12      	ldr	r2, [pc, #72]	; (8012eec <__sinit+0x5c>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6282      	str	r2, [r0, #40]	; 0x28
 8012ea6:	4298      	cmp	r0, r3
 8012ea8:	bf04      	itt	eq
 8012eaa:	2301      	moveq	r3, #1
 8012eac:	6183      	streq	r3, [r0, #24]
 8012eae:	f000 f81f 	bl	8012ef0 <__sfp>
 8012eb2:	6060      	str	r0, [r4, #4]
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f000 f81b 	bl	8012ef0 <__sfp>
 8012eba:	60a0      	str	r0, [r4, #8]
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f000 f817 	bl	8012ef0 <__sfp>
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	60e0      	str	r0, [r4, #12]
 8012ec6:	2104      	movs	r1, #4
 8012ec8:	6860      	ldr	r0, [r4, #4]
 8012eca:	f7ff ffa1 	bl	8012e10 <std>
 8012ece:	2201      	movs	r2, #1
 8012ed0:	2109      	movs	r1, #9
 8012ed2:	68a0      	ldr	r0, [r4, #8]
 8012ed4:	f7ff ff9c 	bl	8012e10 <std>
 8012ed8:	2202      	movs	r2, #2
 8012eda:	2112      	movs	r1, #18
 8012edc:	68e0      	ldr	r0, [r4, #12]
 8012ede:	f7ff ff97 	bl	8012e10 <std>
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	61a3      	str	r3, [r4, #24]
 8012ee6:	bd10      	pop	{r4, pc}
 8012ee8:	08014d68 	.word	0x08014d68
 8012eec:	08012e59 	.word	0x08012e59

08012ef0 <__sfp>:
 8012ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ef2:	4b1b      	ldr	r3, [pc, #108]	; (8012f60 <__sfp+0x70>)
 8012ef4:	681e      	ldr	r6, [r3, #0]
 8012ef6:	69b3      	ldr	r3, [r6, #24]
 8012ef8:	4607      	mov	r7, r0
 8012efa:	b913      	cbnz	r3, 8012f02 <__sfp+0x12>
 8012efc:	4630      	mov	r0, r6
 8012efe:	f7ff ffc7 	bl	8012e90 <__sinit>
 8012f02:	3648      	adds	r6, #72	; 0x48
 8012f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	d503      	bpl.n	8012f14 <__sfp+0x24>
 8012f0c:	6833      	ldr	r3, [r6, #0]
 8012f0e:	b133      	cbz	r3, 8012f1e <__sfp+0x2e>
 8012f10:	6836      	ldr	r6, [r6, #0]
 8012f12:	e7f7      	b.n	8012f04 <__sfp+0x14>
 8012f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f18:	b16d      	cbz	r5, 8012f36 <__sfp+0x46>
 8012f1a:	3468      	adds	r4, #104	; 0x68
 8012f1c:	e7f4      	b.n	8012f08 <__sfp+0x18>
 8012f1e:	2104      	movs	r1, #4
 8012f20:	4638      	mov	r0, r7
 8012f22:	f7ff ff9f 	bl	8012e64 <__sfmoreglue>
 8012f26:	6030      	str	r0, [r6, #0]
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	d1f1      	bne.n	8012f10 <__sfp+0x20>
 8012f2c:	230c      	movs	r3, #12
 8012f2e:	603b      	str	r3, [r7, #0]
 8012f30:	4604      	mov	r4, r0
 8012f32:	4620      	mov	r0, r4
 8012f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f36:	4b0b      	ldr	r3, [pc, #44]	; (8012f64 <__sfp+0x74>)
 8012f38:	6665      	str	r5, [r4, #100]	; 0x64
 8012f3a:	e9c4 5500 	strd	r5, r5, [r4]
 8012f3e:	60a5      	str	r5, [r4, #8]
 8012f40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012f44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012f48:	2208      	movs	r2, #8
 8012f4a:	4629      	mov	r1, r5
 8012f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f50:	f7fd f9cb 	bl	80102ea <memset>
 8012f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f5c:	e7e9      	b.n	8012f32 <__sfp+0x42>
 8012f5e:	bf00      	nop
 8012f60:	08014d68 	.word	0x08014d68
 8012f64:	ffff0001 	.word	0xffff0001

08012f68 <_fwalk_reent>:
 8012f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f6c:	4680      	mov	r8, r0
 8012f6e:	4689      	mov	r9, r1
 8012f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f74:	2600      	movs	r6, #0
 8012f76:	b914      	cbnz	r4, 8012f7e <_fwalk_reent+0x16>
 8012f78:	4630      	mov	r0, r6
 8012f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012f82:	3f01      	subs	r7, #1
 8012f84:	d501      	bpl.n	8012f8a <_fwalk_reent+0x22>
 8012f86:	6824      	ldr	r4, [r4, #0]
 8012f88:	e7f5      	b.n	8012f76 <_fwalk_reent+0xe>
 8012f8a:	89ab      	ldrh	r3, [r5, #12]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d907      	bls.n	8012fa0 <_fwalk_reent+0x38>
 8012f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f94:	3301      	adds	r3, #1
 8012f96:	d003      	beq.n	8012fa0 <_fwalk_reent+0x38>
 8012f98:	4629      	mov	r1, r5
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	47c8      	blx	r9
 8012f9e:	4306      	orrs	r6, r0
 8012fa0:	3568      	adds	r5, #104	; 0x68
 8012fa2:	e7ee      	b.n	8012f82 <_fwalk_reent+0x1a>

08012fa4 <rshift>:
 8012fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fa6:	6906      	ldr	r6, [r0, #16]
 8012fa8:	114b      	asrs	r3, r1, #5
 8012faa:	429e      	cmp	r6, r3
 8012fac:	f100 0414 	add.w	r4, r0, #20
 8012fb0:	dd30      	ble.n	8013014 <rshift+0x70>
 8012fb2:	f011 011f 	ands.w	r1, r1, #31
 8012fb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012fba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012fbe:	d108      	bne.n	8012fd2 <rshift+0x2e>
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	42b2      	cmp	r2, r6
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	d211      	bcs.n	8012fec <rshift+0x48>
 8012fc8:	f852 3b04 	ldr.w	r3, [r2], #4
 8012fcc:	f841 3b04 	str.w	r3, [r1], #4
 8012fd0:	e7f7      	b.n	8012fc2 <rshift+0x1e>
 8012fd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012fd6:	f1c1 0c20 	rsb	ip, r1, #32
 8012fda:	40cd      	lsrs	r5, r1
 8012fdc:	3204      	adds	r2, #4
 8012fde:	4623      	mov	r3, r4
 8012fe0:	42b2      	cmp	r2, r6
 8012fe2:	4617      	mov	r7, r2
 8012fe4:	d30c      	bcc.n	8013000 <rshift+0x5c>
 8012fe6:	601d      	str	r5, [r3, #0]
 8012fe8:	b105      	cbz	r5, 8012fec <rshift+0x48>
 8012fea:	3304      	adds	r3, #4
 8012fec:	1b1a      	subs	r2, r3, r4
 8012fee:	42a3      	cmp	r3, r4
 8012ff0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012ff4:	bf08      	it	eq
 8012ff6:	2300      	moveq	r3, #0
 8012ff8:	6102      	str	r2, [r0, #16]
 8012ffa:	bf08      	it	eq
 8012ffc:	6143      	streq	r3, [r0, #20]
 8012ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013000:	683f      	ldr	r7, [r7, #0]
 8013002:	fa07 f70c 	lsl.w	r7, r7, ip
 8013006:	433d      	orrs	r5, r7
 8013008:	f843 5b04 	str.w	r5, [r3], #4
 801300c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013010:	40cd      	lsrs	r5, r1
 8013012:	e7e5      	b.n	8012fe0 <rshift+0x3c>
 8013014:	4623      	mov	r3, r4
 8013016:	e7e9      	b.n	8012fec <rshift+0x48>

08013018 <__hexdig_fun>:
 8013018:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801301c:	2b09      	cmp	r3, #9
 801301e:	d802      	bhi.n	8013026 <__hexdig_fun+0xe>
 8013020:	3820      	subs	r0, #32
 8013022:	b2c0      	uxtb	r0, r0
 8013024:	4770      	bx	lr
 8013026:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801302a:	2b05      	cmp	r3, #5
 801302c:	d801      	bhi.n	8013032 <__hexdig_fun+0x1a>
 801302e:	3847      	subs	r0, #71	; 0x47
 8013030:	e7f7      	b.n	8013022 <__hexdig_fun+0xa>
 8013032:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013036:	2b05      	cmp	r3, #5
 8013038:	d801      	bhi.n	801303e <__hexdig_fun+0x26>
 801303a:	3827      	subs	r0, #39	; 0x27
 801303c:	e7f1      	b.n	8013022 <__hexdig_fun+0xa>
 801303e:	2000      	movs	r0, #0
 8013040:	4770      	bx	lr

08013042 <__gethex>:
 8013042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013046:	b08b      	sub	sp, #44	; 0x2c
 8013048:	468a      	mov	sl, r1
 801304a:	9002      	str	r0, [sp, #8]
 801304c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801304e:	9306      	str	r3, [sp, #24]
 8013050:	4690      	mov	r8, r2
 8013052:	f000 fad0 	bl	80135f6 <__localeconv_l>
 8013056:	6803      	ldr	r3, [r0, #0]
 8013058:	9303      	str	r3, [sp, #12]
 801305a:	4618      	mov	r0, r3
 801305c:	f7ed f8f0 	bl	8000240 <strlen>
 8013060:	9b03      	ldr	r3, [sp, #12]
 8013062:	9001      	str	r0, [sp, #4]
 8013064:	4403      	add	r3, r0
 8013066:	f04f 0b00 	mov.w	fp, #0
 801306a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801306e:	9307      	str	r3, [sp, #28]
 8013070:	f8da 3000 	ldr.w	r3, [sl]
 8013074:	3302      	adds	r3, #2
 8013076:	461f      	mov	r7, r3
 8013078:	f813 0b01 	ldrb.w	r0, [r3], #1
 801307c:	2830      	cmp	r0, #48	; 0x30
 801307e:	d06c      	beq.n	801315a <__gethex+0x118>
 8013080:	f7ff ffca 	bl	8013018 <__hexdig_fun>
 8013084:	4604      	mov	r4, r0
 8013086:	2800      	cmp	r0, #0
 8013088:	d16a      	bne.n	8013160 <__gethex+0x11e>
 801308a:	9a01      	ldr	r2, [sp, #4]
 801308c:	9903      	ldr	r1, [sp, #12]
 801308e:	4638      	mov	r0, r7
 8013090:	f001 fa0f 	bl	80144b2 <strncmp>
 8013094:	2800      	cmp	r0, #0
 8013096:	d166      	bne.n	8013166 <__gethex+0x124>
 8013098:	9b01      	ldr	r3, [sp, #4]
 801309a:	5cf8      	ldrb	r0, [r7, r3]
 801309c:	18fe      	adds	r6, r7, r3
 801309e:	f7ff ffbb 	bl	8013018 <__hexdig_fun>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d062      	beq.n	801316c <__gethex+0x12a>
 80130a6:	4633      	mov	r3, r6
 80130a8:	7818      	ldrb	r0, [r3, #0]
 80130aa:	2830      	cmp	r0, #48	; 0x30
 80130ac:	461f      	mov	r7, r3
 80130ae:	f103 0301 	add.w	r3, r3, #1
 80130b2:	d0f9      	beq.n	80130a8 <__gethex+0x66>
 80130b4:	f7ff ffb0 	bl	8013018 <__hexdig_fun>
 80130b8:	fab0 f580 	clz	r5, r0
 80130bc:	096d      	lsrs	r5, r5, #5
 80130be:	4634      	mov	r4, r6
 80130c0:	f04f 0b01 	mov.w	fp, #1
 80130c4:	463a      	mov	r2, r7
 80130c6:	4616      	mov	r6, r2
 80130c8:	3201      	adds	r2, #1
 80130ca:	7830      	ldrb	r0, [r6, #0]
 80130cc:	f7ff ffa4 	bl	8013018 <__hexdig_fun>
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d1f8      	bne.n	80130c6 <__gethex+0x84>
 80130d4:	9a01      	ldr	r2, [sp, #4]
 80130d6:	9903      	ldr	r1, [sp, #12]
 80130d8:	4630      	mov	r0, r6
 80130da:	f001 f9ea 	bl	80144b2 <strncmp>
 80130de:	b950      	cbnz	r0, 80130f6 <__gethex+0xb4>
 80130e0:	b954      	cbnz	r4, 80130f8 <__gethex+0xb6>
 80130e2:	9b01      	ldr	r3, [sp, #4]
 80130e4:	18f4      	adds	r4, r6, r3
 80130e6:	4622      	mov	r2, r4
 80130e8:	4616      	mov	r6, r2
 80130ea:	3201      	adds	r2, #1
 80130ec:	7830      	ldrb	r0, [r6, #0]
 80130ee:	f7ff ff93 	bl	8013018 <__hexdig_fun>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d1f8      	bne.n	80130e8 <__gethex+0xa6>
 80130f6:	b10c      	cbz	r4, 80130fc <__gethex+0xba>
 80130f8:	1ba4      	subs	r4, r4, r6
 80130fa:	00a4      	lsls	r4, r4, #2
 80130fc:	7833      	ldrb	r3, [r6, #0]
 80130fe:	2b50      	cmp	r3, #80	; 0x50
 8013100:	d001      	beq.n	8013106 <__gethex+0xc4>
 8013102:	2b70      	cmp	r3, #112	; 0x70
 8013104:	d140      	bne.n	8013188 <__gethex+0x146>
 8013106:	7873      	ldrb	r3, [r6, #1]
 8013108:	2b2b      	cmp	r3, #43	; 0x2b
 801310a:	d031      	beq.n	8013170 <__gethex+0x12e>
 801310c:	2b2d      	cmp	r3, #45	; 0x2d
 801310e:	d033      	beq.n	8013178 <__gethex+0x136>
 8013110:	1c71      	adds	r1, r6, #1
 8013112:	f04f 0900 	mov.w	r9, #0
 8013116:	7808      	ldrb	r0, [r1, #0]
 8013118:	f7ff ff7e 	bl	8013018 <__hexdig_fun>
 801311c:	1e43      	subs	r3, r0, #1
 801311e:	b2db      	uxtb	r3, r3
 8013120:	2b18      	cmp	r3, #24
 8013122:	d831      	bhi.n	8013188 <__gethex+0x146>
 8013124:	f1a0 0210 	sub.w	r2, r0, #16
 8013128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801312c:	f7ff ff74 	bl	8013018 <__hexdig_fun>
 8013130:	1e43      	subs	r3, r0, #1
 8013132:	b2db      	uxtb	r3, r3
 8013134:	2b18      	cmp	r3, #24
 8013136:	d922      	bls.n	801317e <__gethex+0x13c>
 8013138:	f1b9 0f00 	cmp.w	r9, #0
 801313c:	d000      	beq.n	8013140 <__gethex+0xfe>
 801313e:	4252      	negs	r2, r2
 8013140:	4414      	add	r4, r2
 8013142:	f8ca 1000 	str.w	r1, [sl]
 8013146:	b30d      	cbz	r5, 801318c <__gethex+0x14a>
 8013148:	f1bb 0f00 	cmp.w	fp, #0
 801314c:	bf0c      	ite	eq
 801314e:	2706      	moveq	r7, #6
 8013150:	2700      	movne	r7, #0
 8013152:	4638      	mov	r0, r7
 8013154:	b00b      	add	sp, #44	; 0x2c
 8013156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315a:	f10b 0b01 	add.w	fp, fp, #1
 801315e:	e78a      	b.n	8013076 <__gethex+0x34>
 8013160:	2500      	movs	r5, #0
 8013162:	462c      	mov	r4, r5
 8013164:	e7ae      	b.n	80130c4 <__gethex+0x82>
 8013166:	463e      	mov	r6, r7
 8013168:	2501      	movs	r5, #1
 801316a:	e7c7      	b.n	80130fc <__gethex+0xba>
 801316c:	4604      	mov	r4, r0
 801316e:	e7fb      	b.n	8013168 <__gethex+0x126>
 8013170:	f04f 0900 	mov.w	r9, #0
 8013174:	1cb1      	adds	r1, r6, #2
 8013176:	e7ce      	b.n	8013116 <__gethex+0xd4>
 8013178:	f04f 0901 	mov.w	r9, #1
 801317c:	e7fa      	b.n	8013174 <__gethex+0x132>
 801317e:	230a      	movs	r3, #10
 8013180:	fb03 0202 	mla	r2, r3, r2, r0
 8013184:	3a10      	subs	r2, #16
 8013186:	e7cf      	b.n	8013128 <__gethex+0xe6>
 8013188:	4631      	mov	r1, r6
 801318a:	e7da      	b.n	8013142 <__gethex+0x100>
 801318c:	1bf3      	subs	r3, r6, r7
 801318e:	3b01      	subs	r3, #1
 8013190:	4629      	mov	r1, r5
 8013192:	2b07      	cmp	r3, #7
 8013194:	dc49      	bgt.n	801322a <__gethex+0x1e8>
 8013196:	9802      	ldr	r0, [sp, #8]
 8013198:	f000 fab6 	bl	8013708 <_Balloc>
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	f100 0914 	add.w	r9, r0, #20
 80131a2:	f04f 0b00 	mov.w	fp, #0
 80131a6:	f1c3 0301 	rsb	r3, r3, #1
 80131aa:	4605      	mov	r5, r0
 80131ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80131b0:	46da      	mov	sl, fp
 80131b2:	9308      	str	r3, [sp, #32]
 80131b4:	42b7      	cmp	r7, r6
 80131b6:	d33b      	bcc.n	8013230 <__gethex+0x1ee>
 80131b8:	9804      	ldr	r0, [sp, #16]
 80131ba:	f840 ab04 	str.w	sl, [r0], #4
 80131be:	eba0 0009 	sub.w	r0, r0, r9
 80131c2:	1080      	asrs	r0, r0, #2
 80131c4:	6128      	str	r0, [r5, #16]
 80131c6:	0147      	lsls	r7, r0, #5
 80131c8:	4650      	mov	r0, sl
 80131ca:	f000 fb61 	bl	8013890 <__hi0bits>
 80131ce:	f8d8 6000 	ldr.w	r6, [r8]
 80131d2:	1a3f      	subs	r7, r7, r0
 80131d4:	42b7      	cmp	r7, r6
 80131d6:	dd64      	ble.n	80132a2 <__gethex+0x260>
 80131d8:	1bbf      	subs	r7, r7, r6
 80131da:	4639      	mov	r1, r7
 80131dc:	4628      	mov	r0, r5
 80131de:	f000 fe72 	bl	8013ec6 <__any_on>
 80131e2:	4682      	mov	sl, r0
 80131e4:	b178      	cbz	r0, 8013206 <__gethex+0x1c4>
 80131e6:	1e7b      	subs	r3, r7, #1
 80131e8:	1159      	asrs	r1, r3, #5
 80131ea:	f003 021f 	and.w	r2, r3, #31
 80131ee:	f04f 0a01 	mov.w	sl, #1
 80131f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80131f6:	fa0a f202 	lsl.w	r2, sl, r2
 80131fa:	420a      	tst	r2, r1
 80131fc:	d003      	beq.n	8013206 <__gethex+0x1c4>
 80131fe:	4553      	cmp	r3, sl
 8013200:	dc46      	bgt.n	8013290 <__gethex+0x24e>
 8013202:	f04f 0a02 	mov.w	sl, #2
 8013206:	4639      	mov	r1, r7
 8013208:	4628      	mov	r0, r5
 801320a:	f7ff fecb 	bl	8012fa4 <rshift>
 801320e:	443c      	add	r4, r7
 8013210:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013214:	42a3      	cmp	r3, r4
 8013216:	da52      	bge.n	80132be <__gethex+0x27c>
 8013218:	4629      	mov	r1, r5
 801321a:	9802      	ldr	r0, [sp, #8]
 801321c:	f000 faa8 	bl	8013770 <_Bfree>
 8013220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013222:	2300      	movs	r3, #0
 8013224:	6013      	str	r3, [r2, #0]
 8013226:	27a3      	movs	r7, #163	; 0xa3
 8013228:	e793      	b.n	8013152 <__gethex+0x110>
 801322a:	3101      	adds	r1, #1
 801322c:	105b      	asrs	r3, r3, #1
 801322e:	e7b0      	b.n	8013192 <__gethex+0x150>
 8013230:	1e73      	subs	r3, r6, #1
 8013232:	9305      	str	r3, [sp, #20]
 8013234:	9a07      	ldr	r2, [sp, #28]
 8013236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801323a:	4293      	cmp	r3, r2
 801323c:	d018      	beq.n	8013270 <__gethex+0x22e>
 801323e:	f1bb 0f20 	cmp.w	fp, #32
 8013242:	d107      	bne.n	8013254 <__gethex+0x212>
 8013244:	9b04      	ldr	r3, [sp, #16]
 8013246:	f8c3 a000 	str.w	sl, [r3]
 801324a:	3304      	adds	r3, #4
 801324c:	f04f 0a00 	mov.w	sl, #0
 8013250:	9304      	str	r3, [sp, #16]
 8013252:	46d3      	mov	fp, sl
 8013254:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013258:	f7ff fede 	bl	8013018 <__hexdig_fun>
 801325c:	f000 000f 	and.w	r0, r0, #15
 8013260:	fa00 f00b 	lsl.w	r0, r0, fp
 8013264:	ea4a 0a00 	orr.w	sl, sl, r0
 8013268:	f10b 0b04 	add.w	fp, fp, #4
 801326c:	9b05      	ldr	r3, [sp, #20]
 801326e:	e00d      	b.n	801328c <__gethex+0x24a>
 8013270:	9b05      	ldr	r3, [sp, #20]
 8013272:	9a08      	ldr	r2, [sp, #32]
 8013274:	4413      	add	r3, r2
 8013276:	42bb      	cmp	r3, r7
 8013278:	d3e1      	bcc.n	801323e <__gethex+0x1fc>
 801327a:	4618      	mov	r0, r3
 801327c:	9a01      	ldr	r2, [sp, #4]
 801327e:	9903      	ldr	r1, [sp, #12]
 8013280:	9309      	str	r3, [sp, #36]	; 0x24
 8013282:	f001 f916 	bl	80144b2 <strncmp>
 8013286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013288:	2800      	cmp	r0, #0
 801328a:	d1d8      	bne.n	801323e <__gethex+0x1fc>
 801328c:	461e      	mov	r6, r3
 801328e:	e791      	b.n	80131b4 <__gethex+0x172>
 8013290:	1eb9      	subs	r1, r7, #2
 8013292:	4628      	mov	r0, r5
 8013294:	f000 fe17 	bl	8013ec6 <__any_on>
 8013298:	2800      	cmp	r0, #0
 801329a:	d0b2      	beq.n	8013202 <__gethex+0x1c0>
 801329c:	f04f 0a03 	mov.w	sl, #3
 80132a0:	e7b1      	b.n	8013206 <__gethex+0x1c4>
 80132a2:	da09      	bge.n	80132b8 <__gethex+0x276>
 80132a4:	1bf7      	subs	r7, r6, r7
 80132a6:	4629      	mov	r1, r5
 80132a8:	463a      	mov	r2, r7
 80132aa:	9802      	ldr	r0, [sp, #8]
 80132ac:	f000 fc2c 	bl	8013b08 <__lshift>
 80132b0:	1be4      	subs	r4, r4, r7
 80132b2:	4605      	mov	r5, r0
 80132b4:	f100 0914 	add.w	r9, r0, #20
 80132b8:	f04f 0a00 	mov.w	sl, #0
 80132bc:	e7a8      	b.n	8013210 <__gethex+0x1ce>
 80132be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80132c2:	42a0      	cmp	r0, r4
 80132c4:	dd6a      	ble.n	801339c <__gethex+0x35a>
 80132c6:	1b04      	subs	r4, r0, r4
 80132c8:	42a6      	cmp	r6, r4
 80132ca:	dc2e      	bgt.n	801332a <__gethex+0x2e8>
 80132cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	d022      	beq.n	801331a <__gethex+0x2d8>
 80132d4:	2b03      	cmp	r3, #3
 80132d6:	d024      	beq.n	8013322 <__gethex+0x2e0>
 80132d8:	2b01      	cmp	r3, #1
 80132da:	d115      	bne.n	8013308 <__gethex+0x2c6>
 80132dc:	42a6      	cmp	r6, r4
 80132de:	d113      	bne.n	8013308 <__gethex+0x2c6>
 80132e0:	2e01      	cmp	r6, #1
 80132e2:	dc0b      	bgt.n	80132fc <__gethex+0x2ba>
 80132e4:	9a06      	ldr	r2, [sp, #24]
 80132e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80132ea:	6013      	str	r3, [r2, #0]
 80132ec:	2301      	movs	r3, #1
 80132ee:	612b      	str	r3, [r5, #16]
 80132f0:	f8c9 3000 	str.w	r3, [r9]
 80132f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80132f6:	2762      	movs	r7, #98	; 0x62
 80132f8:	601d      	str	r5, [r3, #0]
 80132fa:	e72a      	b.n	8013152 <__gethex+0x110>
 80132fc:	1e71      	subs	r1, r6, #1
 80132fe:	4628      	mov	r0, r5
 8013300:	f000 fde1 	bl	8013ec6 <__any_on>
 8013304:	2800      	cmp	r0, #0
 8013306:	d1ed      	bne.n	80132e4 <__gethex+0x2a2>
 8013308:	4629      	mov	r1, r5
 801330a:	9802      	ldr	r0, [sp, #8]
 801330c:	f000 fa30 	bl	8013770 <_Bfree>
 8013310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013312:	2300      	movs	r3, #0
 8013314:	6013      	str	r3, [r2, #0]
 8013316:	2750      	movs	r7, #80	; 0x50
 8013318:	e71b      	b.n	8013152 <__gethex+0x110>
 801331a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801331c:	2b00      	cmp	r3, #0
 801331e:	d0e1      	beq.n	80132e4 <__gethex+0x2a2>
 8013320:	e7f2      	b.n	8013308 <__gethex+0x2c6>
 8013322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013324:	2b00      	cmp	r3, #0
 8013326:	d1dd      	bne.n	80132e4 <__gethex+0x2a2>
 8013328:	e7ee      	b.n	8013308 <__gethex+0x2c6>
 801332a:	1e67      	subs	r7, r4, #1
 801332c:	f1ba 0f00 	cmp.w	sl, #0
 8013330:	d131      	bne.n	8013396 <__gethex+0x354>
 8013332:	b127      	cbz	r7, 801333e <__gethex+0x2fc>
 8013334:	4639      	mov	r1, r7
 8013336:	4628      	mov	r0, r5
 8013338:	f000 fdc5 	bl	8013ec6 <__any_on>
 801333c:	4682      	mov	sl, r0
 801333e:	117a      	asrs	r2, r7, #5
 8013340:	2301      	movs	r3, #1
 8013342:	f007 071f 	and.w	r7, r7, #31
 8013346:	fa03 f707 	lsl.w	r7, r3, r7
 801334a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801334e:	4621      	mov	r1, r4
 8013350:	421f      	tst	r7, r3
 8013352:	4628      	mov	r0, r5
 8013354:	bf18      	it	ne
 8013356:	f04a 0a02 	orrne.w	sl, sl, #2
 801335a:	1b36      	subs	r6, r6, r4
 801335c:	f7ff fe22 	bl	8012fa4 <rshift>
 8013360:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013364:	2702      	movs	r7, #2
 8013366:	f1ba 0f00 	cmp.w	sl, #0
 801336a:	d048      	beq.n	80133fe <__gethex+0x3bc>
 801336c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013370:	2b02      	cmp	r3, #2
 8013372:	d015      	beq.n	80133a0 <__gethex+0x35e>
 8013374:	2b03      	cmp	r3, #3
 8013376:	d017      	beq.n	80133a8 <__gethex+0x366>
 8013378:	2b01      	cmp	r3, #1
 801337a:	d109      	bne.n	8013390 <__gethex+0x34e>
 801337c:	f01a 0f02 	tst.w	sl, #2
 8013380:	d006      	beq.n	8013390 <__gethex+0x34e>
 8013382:	f8d9 3000 	ldr.w	r3, [r9]
 8013386:	ea4a 0a03 	orr.w	sl, sl, r3
 801338a:	f01a 0f01 	tst.w	sl, #1
 801338e:	d10e      	bne.n	80133ae <__gethex+0x36c>
 8013390:	f047 0710 	orr.w	r7, r7, #16
 8013394:	e033      	b.n	80133fe <__gethex+0x3bc>
 8013396:	f04f 0a01 	mov.w	sl, #1
 801339a:	e7d0      	b.n	801333e <__gethex+0x2fc>
 801339c:	2701      	movs	r7, #1
 801339e:	e7e2      	b.n	8013366 <__gethex+0x324>
 80133a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133a2:	f1c3 0301 	rsb	r3, r3, #1
 80133a6:	9315      	str	r3, [sp, #84]	; 0x54
 80133a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d0f0      	beq.n	8013390 <__gethex+0x34e>
 80133ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80133b2:	f105 0314 	add.w	r3, r5, #20
 80133b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80133ba:	eb03 010a 	add.w	r1, r3, sl
 80133be:	f04f 0c00 	mov.w	ip, #0
 80133c2:	4618      	mov	r0, r3
 80133c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80133c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80133cc:	d01c      	beq.n	8013408 <__gethex+0x3c6>
 80133ce:	3201      	adds	r2, #1
 80133d0:	6002      	str	r2, [r0, #0]
 80133d2:	2f02      	cmp	r7, #2
 80133d4:	f105 0314 	add.w	r3, r5, #20
 80133d8:	d138      	bne.n	801344c <__gethex+0x40a>
 80133da:	f8d8 2000 	ldr.w	r2, [r8]
 80133de:	3a01      	subs	r2, #1
 80133e0:	42b2      	cmp	r2, r6
 80133e2:	d10a      	bne.n	80133fa <__gethex+0x3b8>
 80133e4:	1171      	asrs	r1, r6, #5
 80133e6:	2201      	movs	r2, #1
 80133e8:	f006 061f 	and.w	r6, r6, #31
 80133ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133f0:	fa02 f606 	lsl.w	r6, r2, r6
 80133f4:	421e      	tst	r6, r3
 80133f6:	bf18      	it	ne
 80133f8:	4617      	movne	r7, r2
 80133fa:	f047 0720 	orr.w	r7, r7, #32
 80133fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013400:	601d      	str	r5, [r3, #0]
 8013402:	9b06      	ldr	r3, [sp, #24]
 8013404:	601c      	str	r4, [r3, #0]
 8013406:	e6a4      	b.n	8013152 <__gethex+0x110>
 8013408:	4299      	cmp	r1, r3
 801340a:	f843 cc04 	str.w	ip, [r3, #-4]
 801340e:	d8d8      	bhi.n	80133c2 <__gethex+0x380>
 8013410:	68ab      	ldr	r3, [r5, #8]
 8013412:	4599      	cmp	r9, r3
 8013414:	db12      	blt.n	801343c <__gethex+0x3fa>
 8013416:	6869      	ldr	r1, [r5, #4]
 8013418:	9802      	ldr	r0, [sp, #8]
 801341a:	3101      	adds	r1, #1
 801341c:	f000 f974 	bl	8013708 <_Balloc>
 8013420:	692a      	ldr	r2, [r5, #16]
 8013422:	3202      	adds	r2, #2
 8013424:	f105 010c 	add.w	r1, r5, #12
 8013428:	4683      	mov	fp, r0
 801342a:	0092      	lsls	r2, r2, #2
 801342c:	300c      	adds	r0, #12
 801342e:	f7fc ff51 	bl	80102d4 <memcpy>
 8013432:	4629      	mov	r1, r5
 8013434:	9802      	ldr	r0, [sp, #8]
 8013436:	f000 f99b 	bl	8013770 <_Bfree>
 801343a:	465d      	mov	r5, fp
 801343c:	692b      	ldr	r3, [r5, #16]
 801343e:	1c5a      	adds	r2, r3, #1
 8013440:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013444:	612a      	str	r2, [r5, #16]
 8013446:	2201      	movs	r2, #1
 8013448:	615a      	str	r2, [r3, #20]
 801344a:	e7c2      	b.n	80133d2 <__gethex+0x390>
 801344c:	692a      	ldr	r2, [r5, #16]
 801344e:	454a      	cmp	r2, r9
 8013450:	dd0b      	ble.n	801346a <__gethex+0x428>
 8013452:	2101      	movs	r1, #1
 8013454:	4628      	mov	r0, r5
 8013456:	f7ff fda5 	bl	8012fa4 <rshift>
 801345a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801345e:	3401      	adds	r4, #1
 8013460:	42a3      	cmp	r3, r4
 8013462:	f6ff aed9 	blt.w	8013218 <__gethex+0x1d6>
 8013466:	2701      	movs	r7, #1
 8013468:	e7c7      	b.n	80133fa <__gethex+0x3b8>
 801346a:	f016 061f 	ands.w	r6, r6, #31
 801346e:	d0fa      	beq.n	8013466 <__gethex+0x424>
 8013470:	449a      	add	sl, r3
 8013472:	f1c6 0620 	rsb	r6, r6, #32
 8013476:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801347a:	f000 fa09 	bl	8013890 <__hi0bits>
 801347e:	42b0      	cmp	r0, r6
 8013480:	dbe7      	blt.n	8013452 <__gethex+0x410>
 8013482:	e7f0      	b.n	8013466 <__gethex+0x424>

08013484 <L_shift>:
 8013484:	f1c2 0208 	rsb	r2, r2, #8
 8013488:	0092      	lsls	r2, r2, #2
 801348a:	b570      	push	{r4, r5, r6, lr}
 801348c:	f1c2 0620 	rsb	r6, r2, #32
 8013490:	6843      	ldr	r3, [r0, #4]
 8013492:	6804      	ldr	r4, [r0, #0]
 8013494:	fa03 f506 	lsl.w	r5, r3, r6
 8013498:	432c      	orrs	r4, r5
 801349a:	40d3      	lsrs	r3, r2
 801349c:	6004      	str	r4, [r0, #0]
 801349e:	f840 3f04 	str.w	r3, [r0, #4]!
 80134a2:	4288      	cmp	r0, r1
 80134a4:	d3f4      	bcc.n	8013490 <L_shift+0xc>
 80134a6:	bd70      	pop	{r4, r5, r6, pc}

080134a8 <__match>:
 80134a8:	b530      	push	{r4, r5, lr}
 80134aa:	6803      	ldr	r3, [r0, #0]
 80134ac:	3301      	adds	r3, #1
 80134ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134b2:	b914      	cbnz	r4, 80134ba <__match+0x12>
 80134b4:	6003      	str	r3, [r0, #0]
 80134b6:	2001      	movs	r0, #1
 80134b8:	bd30      	pop	{r4, r5, pc}
 80134ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80134c2:	2d19      	cmp	r5, #25
 80134c4:	bf98      	it	ls
 80134c6:	3220      	addls	r2, #32
 80134c8:	42a2      	cmp	r2, r4
 80134ca:	d0f0      	beq.n	80134ae <__match+0x6>
 80134cc:	2000      	movs	r0, #0
 80134ce:	e7f3      	b.n	80134b8 <__match+0x10>

080134d0 <__hexnan>:
 80134d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d4:	680b      	ldr	r3, [r1, #0]
 80134d6:	6801      	ldr	r1, [r0, #0]
 80134d8:	115f      	asrs	r7, r3, #5
 80134da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80134de:	f013 031f 	ands.w	r3, r3, #31
 80134e2:	b087      	sub	sp, #28
 80134e4:	bf18      	it	ne
 80134e6:	3704      	addne	r7, #4
 80134e8:	2500      	movs	r5, #0
 80134ea:	1f3e      	subs	r6, r7, #4
 80134ec:	4682      	mov	sl, r0
 80134ee:	4690      	mov	r8, r2
 80134f0:	9301      	str	r3, [sp, #4]
 80134f2:	f847 5c04 	str.w	r5, [r7, #-4]
 80134f6:	46b1      	mov	r9, r6
 80134f8:	4634      	mov	r4, r6
 80134fa:	9502      	str	r5, [sp, #8]
 80134fc:	46ab      	mov	fp, r5
 80134fe:	784a      	ldrb	r2, [r1, #1]
 8013500:	1c4b      	adds	r3, r1, #1
 8013502:	9303      	str	r3, [sp, #12]
 8013504:	b342      	cbz	r2, 8013558 <__hexnan+0x88>
 8013506:	4610      	mov	r0, r2
 8013508:	9105      	str	r1, [sp, #20]
 801350a:	9204      	str	r2, [sp, #16]
 801350c:	f7ff fd84 	bl	8013018 <__hexdig_fun>
 8013510:	2800      	cmp	r0, #0
 8013512:	d143      	bne.n	801359c <__hexnan+0xcc>
 8013514:	9a04      	ldr	r2, [sp, #16]
 8013516:	9905      	ldr	r1, [sp, #20]
 8013518:	2a20      	cmp	r2, #32
 801351a:	d818      	bhi.n	801354e <__hexnan+0x7e>
 801351c:	9b02      	ldr	r3, [sp, #8]
 801351e:	459b      	cmp	fp, r3
 8013520:	dd13      	ble.n	801354a <__hexnan+0x7a>
 8013522:	454c      	cmp	r4, r9
 8013524:	d206      	bcs.n	8013534 <__hexnan+0x64>
 8013526:	2d07      	cmp	r5, #7
 8013528:	dc04      	bgt.n	8013534 <__hexnan+0x64>
 801352a:	462a      	mov	r2, r5
 801352c:	4649      	mov	r1, r9
 801352e:	4620      	mov	r0, r4
 8013530:	f7ff ffa8 	bl	8013484 <L_shift>
 8013534:	4544      	cmp	r4, r8
 8013536:	d944      	bls.n	80135c2 <__hexnan+0xf2>
 8013538:	2300      	movs	r3, #0
 801353a:	f1a4 0904 	sub.w	r9, r4, #4
 801353e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013542:	f8cd b008 	str.w	fp, [sp, #8]
 8013546:	464c      	mov	r4, r9
 8013548:	461d      	mov	r5, r3
 801354a:	9903      	ldr	r1, [sp, #12]
 801354c:	e7d7      	b.n	80134fe <__hexnan+0x2e>
 801354e:	2a29      	cmp	r2, #41	; 0x29
 8013550:	d14a      	bne.n	80135e8 <__hexnan+0x118>
 8013552:	3102      	adds	r1, #2
 8013554:	f8ca 1000 	str.w	r1, [sl]
 8013558:	f1bb 0f00 	cmp.w	fp, #0
 801355c:	d044      	beq.n	80135e8 <__hexnan+0x118>
 801355e:	454c      	cmp	r4, r9
 8013560:	d206      	bcs.n	8013570 <__hexnan+0xa0>
 8013562:	2d07      	cmp	r5, #7
 8013564:	dc04      	bgt.n	8013570 <__hexnan+0xa0>
 8013566:	462a      	mov	r2, r5
 8013568:	4649      	mov	r1, r9
 801356a:	4620      	mov	r0, r4
 801356c:	f7ff ff8a 	bl	8013484 <L_shift>
 8013570:	4544      	cmp	r4, r8
 8013572:	d928      	bls.n	80135c6 <__hexnan+0xf6>
 8013574:	4643      	mov	r3, r8
 8013576:	f854 2b04 	ldr.w	r2, [r4], #4
 801357a:	f843 2b04 	str.w	r2, [r3], #4
 801357e:	42a6      	cmp	r6, r4
 8013580:	d2f9      	bcs.n	8013576 <__hexnan+0xa6>
 8013582:	2200      	movs	r2, #0
 8013584:	f843 2b04 	str.w	r2, [r3], #4
 8013588:	429e      	cmp	r6, r3
 801358a:	d2fb      	bcs.n	8013584 <__hexnan+0xb4>
 801358c:	6833      	ldr	r3, [r6, #0]
 801358e:	b91b      	cbnz	r3, 8013598 <__hexnan+0xc8>
 8013590:	4546      	cmp	r6, r8
 8013592:	d127      	bne.n	80135e4 <__hexnan+0x114>
 8013594:	2301      	movs	r3, #1
 8013596:	6033      	str	r3, [r6, #0]
 8013598:	2005      	movs	r0, #5
 801359a:	e026      	b.n	80135ea <__hexnan+0x11a>
 801359c:	3501      	adds	r5, #1
 801359e:	2d08      	cmp	r5, #8
 80135a0:	f10b 0b01 	add.w	fp, fp, #1
 80135a4:	dd06      	ble.n	80135b4 <__hexnan+0xe4>
 80135a6:	4544      	cmp	r4, r8
 80135a8:	d9cf      	bls.n	801354a <__hexnan+0x7a>
 80135aa:	2300      	movs	r3, #0
 80135ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80135b0:	2501      	movs	r5, #1
 80135b2:	3c04      	subs	r4, #4
 80135b4:	6822      	ldr	r2, [r4, #0]
 80135b6:	f000 000f 	and.w	r0, r0, #15
 80135ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80135be:	6020      	str	r0, [r4, #0]
 80135c0:	e7c3      	b.n	801354a <__hexnan+0x7a>
 80135c2:	2508      	movs	r5, #8
 80135c4:	e7c1      	b.n	801354a <__hexnan+0x7a>
 80135c6:	9b01      	ldr	r3, [sp, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d0df      	beq.n	801358c <__hexnan+0xbc>
 80135cc:	f04f 32ff 	mov.w	r2, #4294967295
 80135d0:	f1c3 0320 	rsb	r3, r3, #32
 80135d4:	fa22 f303 	lsr.w	r3, r2, r3
 80135d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80135dc:	401a      	ands	r2, r3
 80135de:	f847 2c04 	str.w	r2, [r7, #-4]
 80135e2:	e7d3      	b.n	801358c <__hexnan+0xbc>
 80135e4:	3e04      	subs	r6, #4
 80135e6:	e7d1      	b.n	801358c <__hexnan+0xbc>
 80135e8:	2004      	movs	r0, #4
 80135ea:	b007      	add	sp, #28
 80135ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135f0 <__locale_ctype_ptr_l>:
 80135f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80135f4:	4770      	bx	lr

080135f6 <__localeconv_l>:
 80135f6:	30f0      	adds	r0, #240	; 0xf0
 80135f8:	4770      	bx	lr
	...

080135fc <_localeconv_r>:
 80135fc:	4b04      	ldr	r3, [pc, #16]	; (8013610 <_localeconv_r+0x14>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6a18      	ldr	r0, [r3, #32]
 8013602:	4b04      	ldr	r3, [pc, #16]	; (8013614 <_localeconv_r+0x18>)
 8013604:	2800      	cmp	r0, #0
 8013606:	bf08      	it	eq
 8013608:	4618      	moveq	r0, r3
 801360a:	30f0      	adds	r0, #240	; 0xf0
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	20000378 	.word	0x20000378
 8013614:	200003dc 	.word	0x200003dc

08013618 <__swhatbuf_r>:
 8013618:	b570      	push	{r4, r5, r6, lr}
 801361a:	460e      	mov	r6, r1
 801361c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013620:	2900      	cmp	r1, #0
 8013622:	b096      	sub	sp, #88	; 0x58
 8013624:	4614      	mov	r4, r2
 8013626:	461d      	mov	r5, r3
 8013628:	da07      	bge.n	801363a <__swhatbuf_r+0x22>
 801362a:	2300      	movs	r3, #0
 801362c:	602b      	str	r3, [r5, #0]
 801362e:	89b3      	ldrh	r3, [r6, #12]
 8013630:	061a      	lsls	r2, r3, #24
 8013632:	d410      	bmi.n	8013656 <__swhatbuf_r+0x3e>
 8013634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013638:	e00e      	b.n	8013658 <__swhatbuf_r+0x40>
 801363a:	466a      	mov	r2, sp
 801363c:	f000 ff7a 	bl	8014534 <_fstat_r>
 8013640:	2800      	cmp	r0, #0
 8013642:	dbf2      	blt.n	801362a <__swhatbuf_r+0x12>
 8013644:	9a01      	ldr	r2, [sp, #4]
 8013646:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801364a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801364e:	425a      	negs	r2, r3
 8013650:	415a      	adcs	r2, r3
 8013652:	602a      	str	r2, [r5, #0]
 8013654:	e7ee      	b.n	8013634 <__swhatbuf_r+0x1c>
 8013656:	2340      	movs	r3, #64	; 0x40
 8013658:	2000      	movs	r0, #0
 801365a:	6023      	str	r3, [r4, #0]
 801365c:	b016      	add	sp, #88	; 0x58
 801365e:	bd70      	pop	{r4, r5, r6, pc}

08013660 <__smakebuf_r>:
 8013660:	898b      	ldrh	r3, [r1, #12]
 8013662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013664:	079d      	lsls	r5, r3, #30
 8013666:	4606      	mov	r6, r0
 8013668:	460c      	mov	r4, r1
 801366a:	d507      	bpl.n	801367c <__smakebuf_r+0x1c>
 801366c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013670:	6023      	str	r3, [r4, #0]
 8013672:	6123      	str	r3, [r4, #16]
 8013674:	2301      	movs	r3, #1
 8013676:	6163      	str	r3, [r4, #20]
 8013678:	b002      	add	sp, #8
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	ab01      	add	r3, sp, #4
 801367e:	466a      	mov	r2, sp
 8013680:	f7ff ffca 	bl	8013618 <__swhatbuf_r>
 8013684:	9900      	ldr	r1, [sp, #0]
 8013686:	4605      	mov	r5, r0
 8013688:	4630      	mov	r0, r6
 801368a:	f7fc fe93 	bl	80103b4 <_malloc_r>
 801368e:	b948      	cbnz	r0, 80136a4 <__smakebuf_r+0x44>
 8013690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013694:	059a      	lsls	r2, r3, #22
 8013696:	d4ef      	bmi.n	8013678 <__smakebuf_r+0x18>
 8013698:	f023 0303 	bic.w	r3, r3, #3
 801369c:	f043 0302 	orr.w	r3, r3, #2
 80136a0:	81a3      	strh	r3, [r4, #12]
 80136a2:	e7e3      	b.n	801366c <__smakebuf_r+0xc>
 80136a4:	4b0d      	ldr	r3, [pc, #52]	; (80136dc <__smakebuf_r+0x7c>)
 80136a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80136a8:	89a3      	ldrh	r3, [r4, #12]
 80136aa:	6020      	str	r0, [r4, #0]
 80136ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136b0:	81a3      	strh	r3, [r4, #12]
 80136b2:	9b00      	ldr	r3, [sp, #0]
 80136b4:	6163      	str	r3, [r4, #20]
 80136b6:	9b01      	ldr	r3, [sp, #4]
 80136b8:	6120      	str	r0, [r4, #16]
 80136ba:	b15b      	cbz	r3, 80136d4 <__smakebuf_r+0x74>
 80136bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136c0:	4630      	mov	r0, r6
 80136c2:	f000 ff49 	bl	8014558 <_isatty_r>
 80136c6:	b128      	cbz	r0, 80136d4 <__smakebuf_r+0x74>
 80136c8:	89a3      	ldrh	r3, [r4, #12]
 80136ca:	f023 0303 	bic.w	r3, r3, #3
 80136ce:	f043 0301 	orr.w	r3, r3, #1
 80136d2:	81a3      	strh	r3, [r4, #12]
 80136d4:	89a3      	ldrh	r3, [r4, #12]
 80136d6:	431d      	orrs	r5, r3
 80136d8:	81a5      	strh	r5, [r4, #12]
 80136da:	e7cd      	b.n	8013678 <__smakebuf_r+0x18>
 80136dc:	08012e59 	.word	0x08012e59

080136e0 <__ascii_mbtowc>:
 80136e0:	b082      	sub	sp, #8
 80136e2:	b901      	cbnz	r1, 80136e6 <__ascii_mbtowc+0x6>
 80136e4:	a901      	add	r1, sp, #4
 80136e6:	b142      	cbz	r2, 80136fa <__ascii_mbtowc+0x1a>
 80136e8:	b14b      	cbz	r3, 80136fe <__ascii_mbtowc+0x1e>
 80136ea:	7813      	ldrb	r3, [r2, #0]
 80136ec:	600b      	str	r3, [r1, #0]
 80136ee:	7812      	ldrb	r2, [r2, #0]
 80136f0:	1c10      	adds	r0, r2, #0
 80136f2:	bf18      	it	ne
 80136f4:	2001      	movne	r0, #1
 80136f6:	b002      	add	sp, #8
 80136f8:	4770      	bx	lr
 80136fa:	4610      	mov	r0, r2
 80136fc:	e7fb      	b.n	80136f6 <__ascii_mbtowc+0x16>
 80136fe:	f06f 0001 	mvn.w	r0, #1
 8013702:	e7f8      	b.n	80136f6 <__ascii_mbtowc+0x16>

08013704 <__malloc_lock>:
 8013704:	4770      	bx	lr

08013706 <__malloc_unlock>:
 8013706:	4770      	bx	lr

08013708 <_Balloc>:
 8013708:	b570      	push	{r4, r5, r6, lr}
 801370a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801370c:	4604      	mov	r4, r0
 801370e:	460e      	mov	r6, r1
 8013710:	b93d      	cbnz	r5, 8013722 <_Balloc+0x1a>
 8013712:	2010      	movs	r0, #16
 8013714:	f7fc fdd6 	bl	80102c4 <malloc>
 8013718:	6260      	str	r0, [r4, #36]	; 0x24
 801371a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801371e:	6005      	str	r5, [r0, #0]
 8013720:	60c5      	str	r5, [r0, #12]
 8013722:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013724:	68eb      	ldr	r3, [r5, #12]
 8013726:	b183      	cbz	r3, 801374a <_Balloc+0x42>
 8013728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013730:	b9b8      	cbnz	r0, 8013762 <_Balloc+0x5a>
 8013732:	2101      	movs	r1, #1
 8013734:	fa01 f506 	lsl.w	r5, r1, r6
 8013738:	1d6a      	adds	r2, r5, #5
 801373a:	0092      	lsls	r2, r2, #2
 801373c:	4620      	mov	r0, r4
 801373e:	f7fc fddc 	bl	80102fa <_calloc_r>
 8013742:	b160      	cbz	r0, 801375e <_Balloc+0x56>
 8013744:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013748:	e00e      	b.n	8013768 <_Balloc+0x60>
 801374a:	2221      	movs	r2, #33	; 0x21
 801374c:	2104      	movs	r1, #4
 801374e:	4620      	mov	r0, r4
 8013750:	f7fc fdd3 	bl	80102fa <_calloc_r>
 8013754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013756:	60e8      	str	r0, [r5, #12]
 8013758:	68db      	ldr	r3, [r3, #12]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1e4      	bne.n	8013728 <_Balloc+0x20>
 801375e:	2000      	movs	r0, #0
 8013760:	bd70      	pop	{r4, r5, r6, pc}
 8013762:	6802      	ldr	r2, [r0, #0]
 8013764:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013768:	2300      	movs	r3, #0
 801376a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801376e:	e7f7      	b.n	8013760 <_Balloc+0x58>

08013770 <_Bfree>:
 8013770:	b570      	push	{r4, r5, r6, lr}
 8013772:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013774:	4606      	mov	r6, r0
 8013776:	460d      	mov	r5, r1
 8013778:	b93c      	cbnz	r4, 801378a <_Bfree+0x1a>
 801377a:	2010      	movs	r0, #16
 801377c:	f7fc fda2 	bl	80102c4 <malloc>
 8013780:	6270      	str	r0, [r6, #36]	; 0x24
 8013782:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013786:	6004      	str	r4, [r0, #0]
 8013788:	60c4      	str	r4, [r0, #12]
 801378a:	b13d      	cbz	r5, 801379c <_Bfree+0x2c>
 801378c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801378e:	686a      	ldr	r2, [r5, #4]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013796:	6029      	str	r1, [r5, #0]
 8013798:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801379c:	bd70      	pop	{r4, r5, r6, pc}

0801379e <__multadd>:
 801379e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a2:	690d      	ldr	r5, [r1, #16]
 80137a4:	461f      	mov	r7, r3
 80137a6:	4606      	mov	r6, r0
 80137a8:	460c      	mov	r4, r1
 80137aa:	f101 0c14 	add.w	ip, r1, #20
 80137ae:	2300      	movs	r3, #0
 80137b0:	f8dc 0000 	ldr.w	r0, [ip]
 80137b4:	b281      	uxth	r1, r0
 80137b6:	fb02 7101 	mla	r1, r2, r1, r7
 80137ba:	0c0f      	lsrs	r7, r1, #16
 80137bc:	0c00      	lsrs	r0, r0, #16
 80137be:	fb02 7000 	mla	r0, r2, r0, r7
 80137c2:	b289      	uxth	r1, r1
 80137c4:	3301      	adds	r3, #1
 80137c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80137ca:	429d      	cmp	r5, r3
 80137cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80137d0:	f84c 1b04 	str.w	r1, [ip], #4
 80137d4:	dcec      	bgt.n	80137b0 <__multadd+0x12>
 80137d6:	b1d7      	cbz	r7, 801380e <__multadd+0x70>
 80137d8:	68a3      	ldr	r3, [r4, #8]
 80137da:	42ab      	cmp	r3, r5
 80137dc:	dc12      	bgt.n	8013804 <__multadd+0x66>
 80137de:	6861      	ldr	r1, [r4, #4]
 80137e0:	4630      	mov	r0, r6
 80137e2:	3101      	adds	r1, #1
 80137e4:	f7ff ff90 	bl	8013708 <_Balloc>
 80137e8:	6922      	ldr	r2, [r4, #16]
 80137ea:	3202      	adds	r2, #2
 80137ec:	f104 010c 	add.w	r1, r4, #12
 80137f0:	4680      	mov	r8, r0
 80137f2:	0092      	lsls	r2, r2, #2
 80137f4:	300c      	adds	r0, #12
 80137f6:	f7fc fd6d 	bl	80102d4 <memcpy>
 80137fa:	4621      	mov	r1, r4
 80137fc:	4630      	mov	r0, r6
 80137fe:	f7ff ffb7 	bl	8013770 <_Bfree>
 8013802:	4644      	mov	r4, r8
 8013804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013808:	3501      	adds	r5, #1
 801380a:	615f      	str	r7, [r3, #20]
 801380c:	6125      	str	r5, [r4, #16]
 801380e:	4620      	mov	r0, r4
 8013810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013814 <__s2b>:
 8013814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013818:	460c      	mov	r4, r1
 801381a:	4615      	mov	r5, r2
 801381c:	461f      	mov	r7, r3
 801381e:	2209      	movs	r2, #9
 8013820:	3308      	adds	r3, #8
 8013822:	4606      	mov	r6, r0
 8013824:	fb93 f3f2 	sdiv	r3, r3, r2
 8013828:	2100      	movs	r1, #0
 801382a:	2201      	movs	r2, #1
 801382c:	429a      	cmp	r2, r3
 801382e:	db20      	blt.n	8013872 <__s2b+0x5e>
 8013830:	4630      	mov	r0, r6
 8013832:	f7ff ff69 	bl	8013708 <_Balloc>
 8013836:	9b08      	ldr	r3, [sp, #32]
 8013838:	6143      	str	r3, [r0, #20]
 801383a:	2d09      	cmp	r5, #9
 801383c:	f04f 0301 	mov.w	r3, #1
 8013840:	6103      	str	r3, [r0, #16]
 8013842:	dd19      	ble.n	8013878 <__s2b+0x64>
 8013844:	f104 0809 	add.w	r8, r4, #9
 8013848:	46c1      	mov	r9, r8
 801384a:	442c      	add	r4, r5
 801384c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013850:	4601      	mov	r1, r0
 8013852:	3b30      	subs	r3, #48	; 0x30
 8013854:	220a      	movs	r2, #10
 8013856:	4630      	mov	r0, r6
 8013858:	f7ff ffa1 	bl	801379e <__multadd>
 801385c:	45a1      	cmp	r9, r4
 801385e:	d1f5      	bne.n	801384c <__s2b+0x38>
 8013860:	eb08 0405 	add.w	r4, r8, r5
 8013864:	3c08      	subs	r4, #8
 8013866:	1b2d      	subs	r5, r5, r4
 8013868:	1963      	adds	r3, r4, r5
 801386a:	42bb      	cmp	r3, r7
 801386c:	db07      	blt.n	801387e <__s2b+0x6a>
 801386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013872:	0052      	lsls	r2, r2, #1
 8013874:	3101      	adds	r1, #1
 8013876:	e7d9      	b.n	801382c <__s2b+0x18>
 8013878:	340a      	adds	r4, #10
 801387a:	2509      	movs	r5, #9
 801387c:	e7f3      	b.n	8013866 <__s2b+0x52>
 801387e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013882:	4601      	mov	r1, r0
 8013884:	3b30      	subs	r3, #48	; 0x30
 8013886:	220a      	movs	r2, #10
 8013888:	4630      	mov	r0, r6
 801388a:	f7ff ff88 	bl	801379e <__multadd>
 801388e:	e7eb      	b.n	8013868 <__s2b+0x54>

08013890 <__hi0bits>:
 8013890:	0c02      	lsrs	r2, r0, #16
 8013892:	0412      	lsls	r2, r2, #16
 8013894:	4603      	mov	r3, r0
 8013896:	b9b2      	cbnz	r2, 80138c6 <__hi0bits+0x36>
 8013898:	0403      	lsls	r3, r0, #16
 801389a:	2010      	movs	r0, #16
 801389c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80138a0:	bf04      	itt	eq
 80138a2:	021b      	lsleq	r3, r3, #8
 80138a4:	3008      	addeq	r0, #8
 80138a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80138aa:	bf04      	itt	eq
 80138ac:	011b      	lsleq	r3, r3, #4
 80138ae:	3004      	addeq	r0, #4
 80138b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80138b4:	bf04      	itt	eq
 80138b6:	009b      	lsleq	r3, r3, #2
 80138b8:	3002      	addeq	r0, #2
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	db06      	blt.n	80138cc <__hi0bits+0x3c>
 80138be:	005b      	lsls	r3, r3, #1
 80138c0:	d503      	bpl.n	80138ca <__hi0bits+0x3a>
 80138c2:	3001      	adds	r0, #1
 80138c4:	4770      	bx	lr
 80138c6:	2000      	movs	r0, #0
 80138c8:	e7e8      	b.n	801389c <__hi0bits+0xc>
 80138ca:	2020      	movs	r0, #32
 80138cc:	4770      	bx	lr

080138ce <__lo0bits>:
 80138ce:	6803      	ldr	r3, [r0, #0]
 80138d0:	f013 0207 	ands.w	r2, r3, #7
 80138d4:	4601      	mov	r1, r0
 80138d6:	d00b      	beq.n	80138f0 <__lo0bits+0x22>
 80138d8:	07da      	lsls	r2, r3, #31
 80138da:	d423      	bmi.n	8013924 <__lo0bits+0x56>
 80138dc:	0798      	lsls	r0, r3, #30
 80138de:	bf49      	itett	mi
 80138e0:	085b      	lsrmi	r3, r3, #1
 80138e2:	089b      	lsrpl	r3, r3, #2
 80138e4:	2001      	movmi	r0, #1
 80138e6:	600b      	strmi	r3, [r1, #0]
 80138e8:	bf5c      	itt	pl
 80138ea:	600b      	strpl	r3, [r1, #0]
 80138ec:	2002      	movpl	r0, #2
 80138ee:	4770      	bx	lr
 80138f0:	b298      	uxth	r0, r3
 80138f2:	b9a8      	cbnz	r0, 8013920 <__lo0bits+0x52>
 80138f4:	0c1b      	lsrs	r3, r3, #16
 80138f6:	2010      	movs	r0, #16
 80138f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80138fc:	bf04      	itt	eq
 80138fe:	0a1b      	lsreq	r3, r3, #8
 8013900:	3008      	addeq	r0, #8
 8013902:	071a      	lsls	r2, r3, #28
 8013904:	bf04      	itt	eq
 8013906:	091b      	lsreq	r3, r3, #4
 8013908:	3004      	addeq	r0, #4
 801390a:	079a      	lsls	r2, r3, #30
 801390c:	bf04      	itt	eq
 801390e:	089b      	lsreq	r3, r3, #2
 8013910:	3002      	addeq	r0, #2
 8013912:	07da      	lsls	r2, r3, #31
 8013914:	d402      	bmi.n	801391c <__lo0bits+0x4e>
 8013916:	085b      	lsrs	r3, r3, #1
 8013918:	d006      	beq.n	8013928 <__lo0bits+0x5a>
 801391a:	3001      	adds	r0, #1
 801391c:	600b      	str	r3, [r1, #0]
 801391e:	4770      	bx	lr
 8013920:	4610      	mov	r0, r2
 8013922:	e7e9      	b.n	80138f8 <__lo0bits+0x2a>
 8013924:	2000      	movs	r0, #0
 8013926:	4770      	bx	lr
 8013928:	2020      	movs	r0, #32
 801392a:	4770      	bx	lr

0801392c <__i2b>:
 801392c:	b510      	push	{r4, lr}
 801392e:	460c      	mov	r4, r1
 8013930:	2101      	movs	r1, #1
 8013932:	f7ff fee9 	bl	8013708 <_Balloc>
 8013936:	2201      	movs	r2, #1
 8013938:	6144      	str	r4, [r0, #20]
 801393a:	6102      	str	r2, [r0, #16]
 801393c:	bd10      	pop	{r4, pc}

0801393e <__multiply>:
 801393e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013942:	4614      	mov	r4, r2
 8013944:	690a      	ldr	r2, [r1, #16]
 8013946:	6923      	ldr	r3, [r4, #16]
 8013948:	429a      	cmp	r2, r3
 801394a:	bfb8      	it	lt
 801394c:	460b      	movlt	r3, r1
 801394e:	4688      	mov	r8, r1
 8013950:	bfbc      	itt	lt
 8013952:	46a0      	movlt	r8, r4
 8013954:	461c      	movlt	r4, r3
 8013956:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801395a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801395e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013962:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013966:	eb07 0609 	add.w	r6, r7, r9
 801396a:	42b3      	cmp	r3, r6
 801396c:	bfb8      	it	lt
 801396e:	3101      	addlt	r1, #1
 8013970:	f7ff feca 	bl	8013708 <_Balloc>
 8013974:	f100 0514 	add.w	r5, r0, #20
 8013978:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801397c:	462b      	mov	r3, r5
 801397e:	2200      	movs	r2, #0
 8013980:	4573      	cmp	r3, lr
 8013982:	d316      	bcc.n	80139b2 <__multiply+0x74>
 8013984:	f104 0214 	add.w	r2, r4, #20
 8013988:	f108 0114 	add.w	r1, r8, #20
 801398c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013990:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	9b00      	ldr	r3, [sp, #0]
 8013998:	9201      	str	r2, [sp, #4]
 801399a:	4293      	cmp	r3, r2
 801399c:	d80c      	bhi.n	80139b8 <__multiply+0x7a>
 801399e:	2e00      	cmp	r6, #0
 80139a0:	dd03      	ble.n	80139aa <__multiply+0x6c>
 80139a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d05d      	beq.n	8013a66 <__multiply+0x128>
 80139aa:	6106      	str	r6, [r0, #16]
 80139ac:	b003      	add	sp, #12
 80139ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b2:	f843 2b04 	str.w	r2, [r3], #4
 80139b6:	e7e3      	b.n	8013980 <__multiply+0x42>
 80139b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80139bc:	f1bb 0f00 	cmp.w	fp, #0
 80139c0:	d023      	beq.n	8013a0a <__multiply+0xcc>
 80139c2:	4689      	mov	r9, r1
 80139c4:	46ac      	mov	ip, r5
 80139c6:	f04f 0800 	mov.w	r8, #0
 80139ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80139ce:	f8dc a000 	ldr.w	sl, [ip]
 80139d2:	b2a3      	uxth	r3, r4
 80139d4:	fa1f fa8a 	uxth.w	sl, sl
 80139d8:	fb0b a303 	mla	r3, fp, r3, sl
 80139dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80139e0:	f8dc 4000 	ldr.w	r4, [ip]
 80139e4:	4443      	add	r3, r8
 80139e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80139ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80139ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80139f2:	46e2      	mov	sl, ip
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80139fa:	454f      	cmp	r7, r9
 80139fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013a00:	f84a 3b04 	str.w	r3, [sl], #4
 8013a04:	d82b      	bhi.n	8013a5e <__multiply+0x120>
 8013a06:	f8cc 8004 	str.w	r8, [ip, #4]
 8013a0a:	9b01      	ldr	r3, [sp, #4]
 8013a0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013a10:	3204      	adds	r2, #4
 8013a12:	f1ba 0f00 	cmp.w	sl, #0
 8013a16:	d020      	beq.n	8013a5a <__multiply+0x11c>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	4689      	mov	r9, r1
 8013a1c:	46a8      	mov	r8, r5
 8013a1e:	f04f 0b00 	mov.w	fp, #0
 8013a22:	f8b9 c000 	ldrh.w	ip, [r9]
 8013a26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013a2a:	fb0a 440c 	mla	r4, sl, ip, r4
 8013a2e:	445c      	add	r4, fp
 8013a30:	46c4      	mov	ip, r8
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013a38:	f84c 3b04 	str.w	r3, [ip], #4
 8013a3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013a40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013a44:	0c1b      	lsrs	r3, r3, #16
 8013a46:	fb0a b303 	mla	r3, sl, r3, fp
 8013a4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013a4e:	454f      	cmp	r7, r9
 8013a50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013a54:	d805      	bhi.n	8013a62 <__multiply+0x124>
 8013a56:	f8c8 3004 	str.w	r3, [r8, #4]
 8013a5a:	3504      	adds	r5, #4
 8013a5c:	e79b      	b.n	8013996 <__multiply+0x58>
 8013a5e:	46d4      	mov	ip, sl
 8013a60:	e7b3      	b.n	80139ca <__multiply+0x8c>
 8013a62:	46e0      	mov	r8, ip
 8013a64:	e7dd      	b.n	8013a22 <__multiply+0xe4>
 8013a66:	3e01      	subs	r6, #1
 8013a68:	e799      	b.n	801399e <__multiply+0x60>
	...

08013a6c <__pow5mult>:
 8013a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a70:	4615      	mov	r5, r2
 8013a72:	f012 0203 	ands.w	r2, r2, #3
 8013a76:	4606      	mov	r6, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	d007      	beq.n	8013a8c <__pow5mult+0x20>
 8013a7c:	3a01      	subs	r2, #1
 8013a7e:	4c21      	ldr	r4, [pc, #132]	; (8013b04 <__pow5mult+0x98>)
 8013a80:	2300      	movs	r3, #0
 8013a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a86:	f7ff fe8a 	bl	801379e <__multadd>
 8013a8a:	4607      	mov	r7, r0
 8013a8c:	10ad      	asrs	r5, r5, #2
 8013a8e:	d035      	beq.n	8013afc <__pow5mult+0x90>
 8013a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013a92:	b93c      	cbnz	r4, 8013aa4 <__pow5mult+0x38>
 8013a94:	2010      	movs	r0, #16
 8013a96:	f7fc fc15 	bl	80102c4 <malloc>
 8013a9a:	6270      	str	r0, [r6, #36]	; 0x24
 8013a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013aa0:	6004      	str	r4, [r0, #0]
 8013aa2:	60c4      	str	r4, [r0, #12]
 8013aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013aac:	b94c      	cbnz	r4, 8013ac2 <__pow5mult+0x56>
 8013aae:	f240 2171 	movw	r1, #625	; 0x271
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f7ff ff3a 	bl	801392c <__i2b>
 8013ab8:	2300      	movs	r3, #0
 8013aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8013abe:	4604      	mov	r4, r0
 8013ac0:	6003      	str	r3, [r0, #0]
 8013ac2:	f04f 0800 	mov.w	r8, #0
 8013ac6:	07eb      	lsls	r3, r5, #31
 8013ac8:	d50a      	bpl.n	8013ae0 <__pow5mult+0x74>
 8013aca:	4639      	mov	r1, r7
 8013acc:	4622      	mov	r2, r4
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f7ff ff35 	bl	801393e <__multiply>
 8013ad4:	4639      	mov	r1, r7
 8013ad6:	4681      	mov	r9, r0
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f7ff fe49 	bl	8013770 <_Bfree>
 8013ade:	464f      	mov	r7, r9
 8013ae0:	106d      	asrs	r5, r5, #1
 8013ae2:	d00b      	beq.n	8013afc <__pow5mult+0x90>
 8013ae4:	6820      	ldr	r0, [r4, #0]
 8013ae6:	b938      	cbnz	r0, 8013af8 <__pow5mult+0x8c>
 8013ae8:	4622      	mov	r2, r4
 8013aea:	4621      	mov	r1, r4
 8013aec:	4630      	mov	r0, r6
 8013aee:	f7ff ff26 	bl	801393e <__multiply>
 8013af2:	6020      	str	r0, [r4, #0]
 8013af4:	f8c0 8000 	str.w	r8, [r0]
 8013af8:	4604      	mov	r4, r0
 8013afa:	e7e4      	b.n	8013ac6 <__pow5mult+0x5a>
 8013afc:	4638      	mov	r0, r7
 8013afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b02:	bf00      	nop
 8013b04:	08014f68 	.word	0x08014f68

08013b08 <__lshift>:
 8013b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b12:	6923      	ldr	r3, [r4, #16]
 8013b14:	6849      	ldr	r1, [r1, #4]
 8013b16:	eb0a 0903 	add.w	r9, sl, r3
 8013b1a:	68a3      	ldr	r3, [r4, #8]
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	4616      	mov	r6, r2
 8013b20:	f109 0501 	add.w	r5, r9, #1
 8013b24:	42ab      	cmp	r3, r5
 8013b26:	db32      	blt.n	8013b8e <__lshift+0x86>
 8013b28:	4638      	mov	r0, r7
 8013b2a:	f7ff fded 	bl	8013708 <_Balloc>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	4680      	mov	r8, r0
 8013b32:	f100 0114 	add.w	r1, r0, #20
 8013b36:	461a      	mov	r2, r3
 8013b38:	4553      	cmp	r3, sl
 8013b3a:	db2b      	blt.n	8013b94 <__lshift+0x8c>
 8013b3c:	6920      	ldr	r0, [r4, #16]
 8013b3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b42:	f104 0314 	add.w	r3, r4, #20
 8013b46:	f016 021f 	ands.w	r2, r6, #31
 8013b4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b52:	d025      	beq.n	8013ba0 <__lshift+0x98>
 8013b54:	f1c2 0e20 	rsb	lr, r2, #32
 8013b58:	2000      	movs	r0, #0
 8013b5a:	681e      	ldr	r6, [r3, #0]
 8013b5c:	468a      	mov	sl, r1
 8013b5e:	4096      	lsls	r6, r2
 8013b60:	4330      	orrs	r0, r6
 8013b62:	f84a 0b04 	str.w	r0, [sl], #4
 8013b66:	f853 0b04 	ldr.w	r0, [r3], #4
 8013b6a:	459c      	cmp	ip, r3
 8013b6c:	fa20 f00e 	lsr.w	r0, r0, lr
 8013b70:	d814      	bhi.n	8013b9c <__lshift+0x94>
 8013b72:	6048      	str	r0, [r1, #4]
 8013b74:	b108      	cbz	r0, 8013b7a <__lshift+0x72>
 8013b76:	f109 0502 	add.w	r5, r9, #2
 8013b7a:	3d01      	subs	r5, #1
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8013b82:	4621      	mov	r1, r4
 8013b84:	f7ff fdf4 	bl	8013770 <_Bfree>
 8013b88:	4640      	mov	r0, r8
 8013b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b8e:	3101      	adds	r1, #1
 8013b90:	005b      	lsls	r3, r3, #1
 8013b92:	e7c7      	b.n	8013b24 <__lshift+0x1c>
 8013b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	e7cd      	b.n	8013b38 <__lshift+0x30>
 8013b9c:	4651      	mov	r1, sl
 8013b9e:	e7dc      	b.n	8013b5a <__lshift+0x52>
 8013ba0:	3904      	subs	r1, #4
 8013ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ba6:	f841 2f04 	str.w	r2, [r1, #4]!
 8013baa:	459c      	cmp	ip, r3
 8013bac:	d8f9      	bhi.n	8013ba2 <__lshift+0x9a>
 8013bae:	e7e4      	b.n	8013b7a <__lshift+0x72>

08013bb0 <__mcmp>:
 8013bb0:	6903      	ldr	r3, [r0, #16]
 8013bb2:	690a      	ldr	r2, [r1, #16]
 8013bb4:	1a9b      	subs	r3, r3, r2
 8013bb6:	b530      	push	{r4, r5, lr}
 8013bb8:	d10c      	bne.n	8013bd4 <__mcmp+0x24>
 8013bba:	0092      	lsls	r2, r2, #2
 8013bbc:	3014      	adds	r0, #20
 8013bbe:	3114      	adds	r1, #20
 8013bc0:	1884      	adds	r4, r0, r2
 8013bc2:	4411      	add	r1, r2
 8013bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013bcc:	4295      	cmp	r5, r2
 8013bce:	d003      	beq.n	8013bd8 <__mcmp+0x28>
 8013bd0:	d305      	bcc.n	8013bde <__mcmp+0x2e>
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	bd30      	pop	{r4, r5, pc}
 8013bd8:	42a0      	cmp	r0, r4
 8013bda:	d3f3      	bcc.n	8013bc4 <__mcmp+0x14>
 8013bdc:	e7fa      	b.n	8013bd4 <__mcmp+0x24>
 8013bde:	f04f 33ff 	mov.w	r3, #4294967295
 8013be2:	e7f7      	b.n	8013bd4 <__mcmp+0x24>

08013be4 <__mdiff>:
 8013be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013be8:	460d      	mov	r5, r1
 8013bea:	4607      	mov	r7, r0
 8013bec:	4611      	mov	r1, r2
 8013bee:	4628      	mov	r0, r5
 8013bf0:	4614      	mov	r4, r2
 8013bf2:	f7ff ffdd 	bl	8013bb0 <__mcmp>
 8013bf6:	1e06      	subs	r6, r0, #0
 8013bf8:	d108      	bne.n	8013c0c <__mdiff+0x28>
 8013bfa:	4631      	mov	r1, r6
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	f7ff fd83 	bl	8013708 <_Balloc>
 8013c02:	2301      	movs	r3, #1
 8013c04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0c:	bfa4      	itt	ge
 8013c0e:	4623      	movge	r3, r4
 8013c10:	462c      	movge	r4, r5
 8013c12:	4638      	mov	r0, r7
 8013c14:	6861      	ldr	r1, [r4, #4]
 8013c16:	bfa6      	itte	ge
 8013c18:	461d      	movge	r5, r3
 8013c1a:	2600      	movge	r6, #0
 8013c1c:	2601      	movlt	r6, #1
 8013c1e:	f7ff fd73 	bl	8013708 <_Balloc>
 8013c22:	692b      	ldr	r3, [r5, #16]
 8013c24:	60c6      	str	r6, [r0, #12]
 8013c26:	6926      	ldr	r6, [r4, #16]
 8013c28:	f105 0914 	add.w	r9, r5, #20
 8013c2c:	f104 0214 	add.w	r2, r4, #20
 8013c30:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013c34:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013c38:	f100 0514 	add.w	r5, r0, #20
 8013c3c:	f04f 0e00 	mov.w	lr, #0
 8013c40:	f852 ab04 	ldr.w	sl, [r2], #4
 8013c44:	f859 4b04 	ldr.w	r4, [r9], #4
 8013c48:	fa1e f18a 	uxtah	r1, lr, sl
 8013c4c:	b2a3      	uxth	r3, r4
 8013c4e:	1ac9      	subs	r1, r1, r3
 8013c50:	0c23      	lsrs	r3, r4, #16
 8013c52:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013c56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013c5a:	b289      	uxth	r1, r1
 8013c5c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013c60:	45c8      	cmp	r8, r9
 8013c62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013c66:	4694      	mov	ip, r2
 8013c68:	f845 3b04 	str.w	r3, [r5], #4
 8013c6c:	d8e8      	bhi.n	8013c40 <__mdiff+0x5c>
 8013c6e:	45bc      	cmp	ip, r7
 8013c70:	d304      	bcc.n	8013c7c <__mdiff+0x98>
 8013c72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013c76:	b183      	cbz	r3, 8013c9a <__mdiff+0xb6>
 8013c78:	6106      	str	r6, [r0, #16]
 8013c7a:	e7c5      	b.n	8013c08 <__mdiff+0x24>
 8013c7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013c80:	fa1e f381 	uxtah	r3, lr, r1
 8013c84:	141a      	asrs	r2, r3, #16
 8013c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c90:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013c94:	f845 3b04 	str.w	r3, [r5], #4
 8013c98:	e7e9      	b.n	8013c6e <__mdiff+0x8a>
 8013c9a:	3e01      	subs	r6, #1
 8013c9c:	e7e9      	b.n	8013c72 <__mdiff+0x8e>
	...

08013ca0 <__ulp>:
 8013ca0:	4b12      	ldr	r3, [pc, #72]	; (8013cec <__ulp+0x4c>)
 8013ca2:	ee10 2a90 	vmov	r2, s1
 8013ca6:	401a      	ands	r2, r3
 8013ca8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	dd04      	ble.n	8013cba <__ulp+0x1a>
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	ec41 0b10 	vmov	d0, r0, r1
 8013cb8:	4770      	bx	lr
 8013cba:	425b      	negs	r3, r3
 8013cbc:	151b      	asrs	r3, r3, #20
 8013cbe:	2b13      	cmp	r3, #19
 8013cc0:	f04f 0000 	mov.w	r0, #0
 8013cc4:	f04f 0100 	mov.w	r1, #0
 8013cc8:	dc04      	bgt.n	8013cd4 <__ulp+0x34>
 8013cca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013cce:	fa42 f103 	asr.w	r1, r2, r3
 8013cd2:	e7ef      	b.n	8013cb4 <__ulp+0x14>
 8013cd4:	3b14      	subs	r3, #20
 8013cd6:	2b1e      	cmp	r3, #30
 8013cd8:	f04f 0201 	mov.w	r2, #1
 8013cdc:	bfda      	itte	le
 8013cde:	f1c3 031f 	rsble	r3, r3, #31
 8013ce2:	fa02 f303 	lslle.w	r3, r2, r3
 8013ce6:	4613      	movgt	r3, r2
 8013ce8:	4618      	mov	r0, r3
 8013cea:	e7e3      	b.n	8013cb4 <__ulp+0x14>
 8013cec:	7ff00000 	.word	0x7ff00000

08013cf0 <__b2d>:
 8013cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf2:	6905      	ldr	r5, [r0, #16]
 8013cf4:	f100 0714 	add.w	r7, r0, #20
 8013cf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013cfc:	1f2e      	subs	r6, r5, #4
 8013cfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013d02:	4620      	mov	r0, r4
 8013d04:	f7ff fdc4 	bl	8013890 <__hi0bits>
 8013d08:	f1c0 0320 	rsb	r3, r0, #32
 8013d0c:	280a      	cmp	r0, #10
 8013d0e:	600b      	str	r3, [r1, #0]
 8013d10:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013d88 <__b2d+0x98>
 8013d14:	dc14      	bgt.n	8013d40 <__b2d+0x50>
 8013d16:	f1c0 0e0b 	rsb	lr, r0, #11
 8013d1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8013d1e:	42b7      	cmp	r7, r6
 8013d20:	ea41 030c 	orr.w	r3, r1, ip
 8013d24:	bf34      	ite	cc
 8013d26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013d2a:	2100      	movcs	r1, #0
 8013d2c:	3015      	adds	r0, #21
 8013d2e:	fa04 f000 	lsl.w	r0, r4, r0
 8013d32:	fa21 f10e 	lsr.w	r1, r1, lr
 8013d36:	ea40 0201 	orr.w	r2, r0, r1
 8013d3a:	ec43 2b10 	vmov	d0, r2, r3
 8013d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d40:	42b7      	cmp	r7, r6
 8013d42:	bf3a      	itte	cc
 8013d44:	f1a5 0608 	subcc.w	r6, r5, #8
 8013d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013d4c:	2100      	movcs	r1, #0
 8013d4e:	380b      	subs	r0, #11
 8013d50:	d015      	beq.n	8013d7e <__b2d+0x8e>
 8013d52:	4084      	lsls	r4, r0
 8013d54:	f1c0 0520 	rsb	r5, r0, #32
 8013d58:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013d5c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013d60:	42be      	cmp	r6, r7
 8013d62:	fa21 fc05 	lsr.w	ip, r1, r5
 8013d66:	ea44 030c 	orr.w	r3, r4, ip
 8013d6a:	bf8c      	ite	hi
 8013d6c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013d70:	2400      	movls	r4, #0
 8013d72:	fa01 f000 	lsl.w	r0, r1, r0
 8013d76:	40ec      	lsrs	r4, r5
 8013d78:	ea40 0204 	orr.w	r2, r0, r4
 8013d7c:	e7dd      	b.n	8013d3a <__b2d+0x4a>
 8013d7e:	ea44 030c 	orr.w	r3, r4, ip
 8013d82:	460a      	mov	r2, r1
 8013d84:	e7d9      	b.n	8013d3a <__b2d+0x4a>
 8013d86:	bf00      	nop
 8013d88:	3ff00000 	.word	0x3ff00000

08013d8c <__d2b>:
 8013d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013d90:	460e      	mov	r6, r1
 8013d92:	2101      	movs	r1, #1
 8013d94:	ec59 8b10 	vmov	r8, r9, d0
 8013d98:	4615      	mov	r5, r2
 8013d9a:	f7ff fcb5 	bl	8013708 <_Balloc>
 8013d9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013da2:	4607      	mov	r7, r0
 8013da4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013da8:	bb34      	cbnz	r4, 8013df8 <__d2b+0x6c>
 8013daa:	9301      	str	r3, [sp, #4]
 8013dac:	f1b8 0300 	subs.w	r3, r8, #0
 8013db0:	d027      	beq.n	8013e02 <__d2b+0x76>
 8013db2:	a802      	add	r0, sp, #8
 8013db4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013db8:	f7ff fd89 	bl	80138ce <__lo0bits>
 8013dbc:	9900      	ldr	r1, [sp, #0]
 8013dbe:	b1f0      	cbz	r0, 8013dfe <__d2b+0x72>
 8013dc0:	9a01      	ldr	r2, [sp, #4]
 8013dc2:	f1c0 0320 	rsb	r3, r0, #32
 8013dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8013dca:	430b      	orrs	r3, r1
 8013dcc:	40c2      	lsrs	r2, r0
 8013dce:	617b      	str	r3, [r7, #20]
 8013dd0:	9201      	str	r2, [sp, #4]
 8013dd2:	9b01      	ldr	r3, [sp, #4]
 8013dd4:	61bb      	str	r3, [r7, #24]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	bf14      	ite	ne
 8013dda:	2102      	movne	r1, #2
 8013ddc:	2101      	moveq	r1, #1
 8013dde:	6139      	str	r1, [r7, #16]
 8013de0:	b1c4      	cbz	r4, 8013e14 <__d2b+0x88>
 8013de2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013de6:	4404      	add	r4, r0
 8013de8:	6034      	str	r4, [r6, #0]
 8013dea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013dee:	6028      	str	r0, [r5, #0]
 8013df0:	4638      	mov	r0, r7
 8013df2:	b003      	add	sp, #12
 8013df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013dfc:	e7d5      	b.n	8013daa <__d2b+0x1e>
 8013dfe:	6179      	str	r1, [r7, #20]
 8013e00:	e7e7      	b.n	8013dd2 <__d2b+0x46>
 8013e02:	a801      	add	r0, sp, #4
 8013e04:	f7ff fd63 	bl	80138ce <__lo0bits>
 8013e08:	9b01      	ldr	r3, [sp, #4]
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	2101      	movs	r1, #1
 8013e0e:	6139      	str	r1, [r7, #16]
 8013e10:	3020      	adds	r0, #32
 8013e12:	e7e5      	b.n	8013de0 <__d2b+0x54>
 8013e14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013e18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013e1c:	6030      	str	r0, [r6, #0]
 8013e1e:	6918      	ldr	r0, [r3, #16]
 8013e20:	f7ff fd36 	bl	8013890 <__hi0bits>
 8013e24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013e28:	e7e1      	b.n	8013dee <__d2b+0x62>

08013e2a <__ratio>:
 8013e2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2e:	4688      	mov	r8, r1
 8013e30:	4669      	mov	r1, sp
 8013e32:	4681      	mov	r9, r0
 8013e34:	f7ff ff5c 	bl	8013cf0 <__b2d>
 8013e38:	a901      	add	r1, sp, #4
 8013e3a:	4640      	mov	r0, r8
 8013e3c:	ec57 6b10 	vmov	r6, r7, d0
 8013e40:	ee10 4a10 	vmov	r4, s0
 8013e44:	f7ff ff54 	bl	8013cf0 <__b2d>
 8013e48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013e4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013e50:	eba3 0c02 	sub.w	ip, r3, r2
 8013e54:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013e58:	1a9b      	subs	r3, r3, r2
 8013e5a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013e5e:	ec51 0b10 	vmov	r0, r1, d0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	ee10 aa10 	vmov	sl, s0
 8013e68:	bfce      	itee	gt
 8013e6a:	463a      	movgt	r2, r7
 8013e6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013e70:	460a      	movle	r2, r1
 8013e72:	463d      	mov	r5, r7
 8013e74:	468b      	mov	fp, r1
 8013e76:	bfcc      	ite	gt
 8013e78:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013e7c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013e80:	ec45 4b17 	vmov	d7, r4, r5
 8013e84:	ec4b ab16 	vmov	d6, sl, fp
 8013e88:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013e8c:	b003      	add	sp, #12
 8013e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e92 <__copybits>:
 8013e92:	3901      	subs	r1, #1
 8013e94:	b510      	push	{r4, lr}
 8013e96:	1149      	asrs	r1, r1, #5
 8013e98:	6914      	ldr	r4, [r2, #16]
 8013e9a:	3101      	adds	r1, #1
 8013e9c:	f102 0314 	add.w	r3, r2, #20
 8013ea0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ea4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ea8:	42a3      	cmp	r3, r4
 8013eaa:	4602      	mov	r2, r0
 8013eac:	d303      	bcc.n	8013eb6 <__copybits+0x24>
 8013eae:	2300      	movs	r3, #0
 8013eb0:	428a      	cmp	r2, r1
 8013eb2:	d305      	bcc.n	8013ec0 <__copybits+0x2e>
 8013eb4:	bd10      	pop	{r4, pc}
 8013eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eba:	f840 2b04 	str.w	r2, [r0], #4
 8013ebe:	e7f3      	b.n	8013ea8 <__copybits+0x16>
 8013ec0:	f842 3b04 	str.w	r3, [r2], #4
 8013ec4:	e7f4      	b.n	8013eb0 <__copybits+0x1e>

08013ec6 <__any_on>:
 8013ec6:	f100 0214 	add.w	r2, r0, #20
 8013eca:	6900      	ldr	r0, [r0, #16]
 8013ecc:	114b      	asrs	r3, r1, #5
 8013ece:	4298      	cmp	r0, r3
 8013ed0:	b510      	push	{r4, lr}
 8013ed2:	db11      	blt.n	8013ef8 <__any_on+0x32>
 8013ed4:	dd0a      	ble.n	8013eec <__any_on+0x26>
 8013ed6:	f011 011f 	ands.w	r1, r1, #31
 8013eda:	d007      	beq.n	8013eec <__any_on+0x26>
 8013edc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013ee0:	fa24 f001 	lsr.w	r0, r4, r1
 8013ee4:	fa00 f101 	lsl.w	r1, r0, r1
 8013ee8:	428c      	cmp	r4, r1
 8013eea:	d10b      	bne.n	8013f04 <__any_on+0x3e>
 8013eec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d803      	bhi.n	8013efc <__any_on+0x36>
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	bd10      	pop	{r4, pc}
 8013ef8:	4603      	mov	r3, r0
 8013efa:	e7f7      	b.n	8013eec <__any_on+0x26>
 8013efc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f00:	2900      	cmp	r1, #0
 8013f02:	d0f5      	beq.n	8013ef0 <__any_on+0x2a>
 8013f04:	2001      	movs	r0, #1
 8013f06:	e7f6      	b.n	8013ef6 <__any_on+0x30>

08013f08 <__ssputs_r>:
 8013f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f0c:	688e      	ldr	r6, [r1, #8]
 8013f0e:	429e      	cmp	r6, r3
 8013f10:	4682      	mov	sl, r0
 8013f12:	460c      	mov	r4, r1
 8013f14:	4690      	mov	r8, r2
 8013f16:	4699      	mov	r9, r3
 8013f18:	d837      	bhi.n	8013f8a <__ssputs_r+0x82>
 8013f1a:	898a      	ldrh	r2, [r1, #12]
 8013f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f20:	d031      	beq.n	8013f86 <__ssputs_r+0x7e>
 8013f22:	6825      	ldr	r5, [r4, #0]
 8013f24:	6909      	ldr	r1, [r1, #16]
 8013f26:	1a6f      	subs	r7, r5, r1
 8013f28:	6965      	ldr	r5, [r4, #20]
 8013f2a:	2302      	movs	r3, #2
 8013f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f30:	fb95 f5f3 	sdiv	r5, r5, r3
 8013f34:	f109 0301 	add.w	r3, r9, #1
 8013f38:	443b      	add	r3, r7
 8013f3a:	429d      	cmp	r5, r3
 8013f3c:	bf38      	it	cc
 8013f3e:	461d      	movcc	r5, r3
 8013f40:	0553      	lsls	r3, r2, #21
 8013f42:	d530      	bpl.n	8013fa6 <__ssputs_r+0x9e>
 8013f44:	4629      	mov	r1, r5
 8013f46:	f7fc fa35 	bl	80103b4 <_malloc_r>
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	b950      	cbnz	r0, 8013f64 <__ssputs_r+0x5c>
 8013f4e:	230c      	movs	r3, #12
 8013f50:	f8ca 3000 	str.w	r3, [sl]
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f5a:	81a3      	strh	r3, [r4, #12]
 8013f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f64:	463a      	mov	r2, r7
 8013f66:	6921      	ldr	r1, [r4, #16]
 8013f68:	f7fc f9b4 	bl	80102d4 <memcpy>
 8013f6c:	89a3      	ldrh	r3, [r4, #12]
 8013f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f76:	81a3      	strh	r3, [r4, #12]
 8013f78:	6126      	str	r6, [r4, #16]
 8013f7a:	6165      	str	r5, [r4, #20]
 8013f7c:	443e      	add	r6, r7
 8013f7e:	1bed      	subs	r5, r5, r7
 8013f80:	6026      	str	r6, [r4, #0]
 8013f82:	60a5      	str	r5, [r4, #8]
 8013f84:	464e      	mov	r6, r9
 8013f86:	454e      	cmp	r6, r9
 8013f88:	d900      	bls.n	8013f8c <__ssputs_r+0x84>
 8013f8a:	464e      	mov	r6, r9
 8013f8c:	4632      	mov	r2, r6
 8013f8e:	4641      	mov	r1, r8
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	f000 fb03 	bl	801459c <memmove>
 8013f96:	68a3      	ldr	r3, [r4, #8]
 8013f98:	1b9b      	subs	r3, r3, r6
 8013f9a:	60a3      	str	r3, [r4, #8]
 8013f9c:	6823      	ldr	r3, [r4, #0]
 8013f9e:	441e      	add	r6, r3
 8013fa0:	6026      	str	r6, [r4, #0]
 8013fa2:	2000      	movs	r0, #0
 8013fa4:	e7dc      	b.n	8013f60 <__ssputs_r+0x58>
 8013fa6:	462a      	mov	r2, r5
 8013fa8:	f000 fb11 	bl	80145ce <_realloc_r>
 8013fac:	4606      	mov	r6, r0
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d1e2      	bne.n	8013f78 <__ssputs_r+0x70>
 8013fb2:	6921      	ldr	r1, [r4, #16]
 8013fb4:	4650      	mov	r0, sl
 8013fb6:	f7fc f9af 	bl	8010318 <_free_r>
 8013fba:	e7c8      	b.n	8013f4e <__ssputs_r+0x46>

08013fbc <_svfiprintf_r>:
 8013fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc0:	461d      	mov	r5, r3
 8013fc2:	898b      	ldrh	r3, [r1, #12]
 8013fc4:	061f      	lsls	r7, r3, #24
 8013fc6:	b09d      	sub	sp, #116	; 0x74
 8013fc8:	4680      	mov	r8, r0
 8013fca:	460c      	mov	r4, r1
 8013fcc:	4616      	mov	r6, r2
 8013fce:	d50f      	bpl.n	8013ff0 <_svfiprintf_r+0x34>
 8013fd0:	690b      	ldr	r3, [r1, #16]
 8013fd2:	b96b      	cbnz	r3, 8013ff0 <_svfiprintf_r+0x34>
 8013fd4:	2140      	movs	r1, #64	; 0x40
 8013fd6:	f7fc f9ed 	bl	80103b4 <_malloc_r>
 8013fda:	6020      	str	r0, [r4, #0]
 8013fdc:	6120      	str	r0, [r4, #16]
 8013fde:	b928      	cbnz	r0, 8013fec <_svfiprintf_r+0x30>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	f8c8 3000 	str.w	r3, [r8]
 8013fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8013fea:	e0c8      	b.n	801417e <_svfiprintf_r+0x1c2>
 8013fec:	2340      	movs	r3, #64	; 0x40
 8013fee:	6163      	str	r3, [r4, #20]
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff4:	2320      	movs	r3, #32
 8013ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ffa:	2330      	movs	r3, #48	; 0x30
 8013ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014000:	9503      	str	r5, [sp, #12]
 8014002:	f04f 0b01 	mov.w	fp, #1
 8014006:	4637      	mov	r7, r6
 8014008:	463d      	mov	r5, r7
 801400a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801400e:	b10b      	cbz	r3, 8014014 <_svfiprintf_r+0x58>
 8014010:	2b25      	cmp	r3, #37	; 0x25
 8014012:	d13e      	bne.n	8014092 <_svfiprintf_r+0xd6>
 8014014:	ebb7 0a06 	subs.w	sl, r7, r6
 8014018:	d00b      	beq.n	8014032 <_svfiprintf_r+0x76>
 801401a:	4653      	mov	r3, sl
 801401c:	4632      	mov	r2, r6
 801401e:	4621      	mov	r1, r4
 8014020:	4640      	mov	r0, r8
 8014022:	f7ff ff71 	bl	8013f08 <__ssputs_r>
 8014026:	3001      	adds	r0, #1
 8014028:	f000 80a4 	beq.w	8014174 <_svfiprintf_r+0x1b8>
 801402c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801402e:	4453      	add	r3, sl
 8014030:	9309      	str	r3, [sp, #36]	; 0x24
 8014032:	783b      	ldrb	r3, [r7, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	f000 809d 	beq.w	8014174 <_svfiprintf_r+0x1b8>
 801403a:	2300      	movs	r3, #0
 801403c:	f04f 32ff 	mov.w	r2, #4294967295
 8014040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014044:	9304      	str	r3, [sp, #16]
 8014046:	9307      	str	r3, [sp, #28]
 8014048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801404c:	931a      	str	r3, [sp, #104]	; 0x68
 801404e:	462f      	mov	r7, r5
 8014050:	2205      	movs	r2, #5
 8014052:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014056:	4850      	ldr	r0, [pc, #320]	; (8014198 <_svfiprintf_r+0x1dc>)
 8014058:	f7ec f8fa 	bl	8000250 <memchr>
 801405c:	9b04      	ldr	r3, [sp, #16]
 801405e:	b9d0      	cbnz	r0, 8014096 <_svfiprintf_r+0xda>
 8014060:	06d9      	lsls	r1, r3, #27
 8014062:	bf44      	itt	mi
 8014064:	2220      	movmi	r2, #32
 8014066:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801406a:	071a      	lsls	r2, r3, #28
 801406c:	bf44      	itt	mi
 801406e:	222b      	movmi	r2, #43	; 0x2b
 8014070:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014074:	782a      	ldrb	r2, [r5, #0]
 8014076:	2a2a      	cmp	r2, #42	; 0x2a
 8014078:	d015      	beq.n	80140a6 <_svfiprintf_r+0xea>
 801407a:	9a07      	ldr	r2, [sp, #28]
 801407c:	462f      	mov	r7, r5
 801407e:	2000      	movs	r0, #0
 8014080:	250a      	movs	r5, #10
 8014082:	4639      	mov	r1, r7
 8014084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014088:	3b30      	subs	r3, #48	; 0x30
 801408a:	2b09      	cmp	r3, #9
 801408c:	d94d      	bls.n	801412a <_svfiprintf_r+0x16e>
 801408e:	b1b8      	cbz	r0, 80140c0 <_svfiprintf_r+0x104>
 8014090:	e00f      	b.n	80140b2 <_svfiprintf_r+0xf6>
 8014092:	462f      	mov	r7, r5
 8014094:	e7b8      	b.n	8014008 <_svfiprintf_r+0x4c>
 8014096:	4a40      	ldr	r2, [pc, #256]	; (8014198 <_svfiprintf_r+0x1dc>)
 8014098:	1a80      	subs	r0, r0, r2
 801409a:	fa0b f000 	lsl.w	r0, fp, r0
 801409e:	4318      	orrs	r0, r3
 80140a0:	9004      	str	r0, [sp, #16]
 80140a2:	463d      	mov	r5, r7
 80140a4:	e7d3      	b.n	801404e <_svfiprintf_r+0x92>
 80140a6:	9a03      	ldr	r2, [sp, #12]
 80140a8:	1d11      	adds	r1, r2, #4
 80140aa:	6812      	ldr	r2, [r2, #0]
 80140ac:	9103      	str	r1, [sp, #12]
 80140ae:	2a00      	cmp	r2, #0
 80140b0:	db01      	blt.n	80140b6 <_svfiprintf_r+0xfa>
 80140b2:	9207      	str	r2, [sp, #28]
 80140b4:	e004      	b.n	80140c0 <_svfiprintf_r+0x104>
 80140b6:	4252      	negs	r2, r2
 80140b8:	f043 0302 	orr.w	r3, r3, #2
 80140bc:	9207      	str	r2, [sp, #28]
 80140be:	9304      	str	r3, [sp, #16]
 80140c0:	783b      	ldrb	r3, [r7, #0]
 80140c2:	2b2e      	cmp	r3, #46	; 0x2e
 80140c4:	d10c      	bne.n	80140e0 <_svfiprintf_r+0x124>
 80140c6:	787b      	ldrb	r3, [r7, #1]
 80140c8:	2b2a      	cmp	r3, #42	; 0x2a
 80140ca:	d133      	bne.n	8014134 <_svfiprintf_r+0x178>
 80140cc:	9b03      	ldr	r3, [sp, #12]
 80140ce:	1d1a      	adds	r2, r3, #4
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	9203      	str	r2, [sp, #12]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	bfb8      	it	lt
 80140d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80140dc:	3702      	adds	r7, #2
 80140de:	9305      	str	r3, [sp, #20]
 80140e0:	4d2e      	ldr	r5, [pc, #184]	; (801419c <_svfiprintf_r+0x1e0>)
 80140e2:	7839      	ldrb	r1, [r7, #0]
 80140e4:	2203      	movs	r2, #3
 80140e6:	4628      	mov	r0, r5
 80140e8:	f7ec f8b2 	bl	8000250 <memchr>
 80140ec:	b138      	cbz	r0, 80140fe <_svfiprintf_r+0x142>
 80140ee:	2340      	movs	r3, #64	; 0x40
 80140f0:	1b40      	subs	r0, r0, r5
 80140f2:	fa03 f000 	lsl.w	r0, r3, r0
 80140f6:	9b04      	ldr	r3, [sp, #16]
 80140f8:	4303      	orrs	r3, r0
 80140fa:	3701      	adds	r7, #1
 80140fc:	9304      	str	r3, [sp, #16]
 80140fe:	7839      	ldrb	r1, [r7, #0]
 8014100:	4827      	ldr	r0, [pc, #156]	; (80141a0 <_svfiprintf_r+0x1e4>)
 8014102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014106:	2206      	movs	r2, #6
 8014108:	1c7e      	adds	r6, r7, #1
 801410a:	f7ec f8a1 	bl	8000250 <memchr>
 801410e:	2800      	cmp	r0, #0
 8014110:	d038      	beq.n	8014184 <_svfiprintf_r+0x1c8>
 8014112:	4b24      	ldr	r3, [pc, #144]	; (80141a4 <_svfiprintf_r+0x1e8>)
 8014114:	bb13      	cbnz	r3, 801415c <_svfiprintf_r+0x1a0>
 8014116:	9b03      	ldr	r3, [sp, #12]
 8014118:	3307      	adds	r3, #7
 801411a:	f023 0307 	bic.w	r3, r3, #7
 801411e:	3308      	adds	r3, #8
 8014120:	9303      	str	r3, [sp, #12]
 8014122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014124:	444b      	add	r3, r9
 8014126:	9309      	str	r3, [sp, #36]	; 0x24
 8014128:	e76d      	b.n	8014006 <_svfiprintf_r+0x4a>
 801412a:	fb05 3202 	mla	r2, r5, r2, r3
 801412e:	2001      	movs	r0, #1
 8014130:	460f      	mov	r7, r1
 8014132:	e7a6      	b.n	8014082 <_svfiprintf_r+0xc6>
 8014134:	2300      	movs	r3, #0
 8014136:	3701      	adds	r7, #1
 8014138:	9305      	str	r3, [sp, #20]
 801413a:	4619      	mov	r1, r3
 801413c:	250a      	movs	r5, #10
 801413e:	4638      	mov	r0, r7
 8014140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014144:	3a30      	subs	r2, #48	; 0x30
 8014146:	2a09      	cmp	r2, #9
 8014148:	d903      	bls.n	8014152 <_svfiprintf_r+0x196>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0c8      	beq.n	80140e0 <_svfiprintf_r+0x124>
 801414e:	9105      	str	r1, [sp, #20]
 8014150:	e7c6      	b.n	80140e0 <_svfiprintf_r+0x124>
 8014152:	fb05 2101 	mla	r1, r5, r1, r2
 8014156:	2301      	movs	r3, #1
 8014158:	4607      	mov	r7, r0
 801415a:	e7f0      	b.n	801413e <_svfiprintf_r+0x182>
 801415c:	ab03      	add	r3, sp, #12
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	4622      	mov	r2, r4
 8014162:	4b11      	ldr	r3, [pc, #68]	; (80141a8 <_svfiprintf_r+0x1ec>)
 8014164:	a904      	add	r1, sp, #16
 8014166:	4640      	mov	r0, r8
 8014168:	f7fc fa06 	bl	8010578 <_printf_float>
 801416c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014170:	4681      	mov	r9, r0
 8014172:	d1d6      	bne.n	8014122 <_svfiprintf_r+0x166>
 8014174:	89a3      	ldrh	r3, [r4, #12]
 8014176:	065b      	lsls	r3, r3, #25
 8014178:	f53f af35 	bmi.w	8013fe6 <_svfiprintf_r+0x2a>
 801417c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801417e:	b01d      	add	sp, #116	; 0x74
 8014180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014184:	ab03      	add	r3, sp, #12
 8014186:	9300      	str	r3, [sp, #0]
 8014188:	4622      	mov	r2, r4
 801418a:	4b07      	ldr	r3, [pc, #28]	; (80141a8 <_svfiprintf_r+0x1ec>)
 801418c:	a904      	add	r1, sp, #16
 801418e:	4640      	mov	r0, r8
 8014190:	f7fc fc94 	bl	8010abc <_printf_i>
 8014194:	e7ea      	b.n	801416c <_svfiprintf_r+0x1b0>
 8014196:	bf00      	nop
 8014198:	08014f74 	.word	0x08014f74
 801419c:	08014f7a 	.word	0x08014f7a
 80141a0:	08014f7e 	.word	0x08014f7e
 80141a4:	08010579 	.word	0x08010579
 80141a8:	08013f09 	.word	0x08013f09

080141ac <__sfputc_r>:
 80141ac:	6893      	ldr	r3, [r2, #8]
 80141ae:	3b01      	subs	r3, #1
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	b410      	push	{r4}
 80141b4:	6093      	str	r3, [r2, #8]
 80141b6:	da08      	bge.n	80141ca <__sfputc_r+0x1e>
 80141b8:	6994      	ldr	r4, [r2, #24]
 80141ba:	42a3      	cmp	r3, r4
 80141bc:	db01      	blt.n	80141c2 <__sfputc_r+0x16>
 80141be:	290a      	cmp	r1, #10
 80141c0:	d103      	bne.n	80141ca <__sfputc_r+0x1e>
 80141c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141c6:	f7fd bed9 	b.w	8011f7c <__swbuf_r>
 80141ca:	6813      	ldr	r3, [r2, #0]
 80141cc:	1c58      	adds	r0, r3, #1
 80141ce:	6010      	str	r0, [r2, #0]
 80141d0:	7019      	strb	r1, [r3, #0]
 80141d2:	4608      	mov	r0, r1
 80141d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141d8:	4770      	bx	lr

080141da <__sfputs_r>:
 80141da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141dc:	4606      	mov	r6, r0
 80141de:	460f      	mov	r7, r1
 80141e0:	4614      	mov	r4, r2
 80141e2:	18d5      	adds	r5, r2, r3
 80141e4:	42ac      	cmp	r4, r5
 80141e6:	d101      	bne.n	80141ec <__sfputs_r+0x12>
 80141e8:	2000      	movs	r0, #0
 80141ea:	e007      	b.n	80141fc <__sfputs_r+0x22>
 80141ec:	463a      	mov	r2, r7
 80141ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141f2:	4630      	mov	r0, r6
 80141f4:	f7ff ffda 	bl	80141ac <__sfputc_r>
 80141f8:	1c43      	adds	r3, r0, #1
 80141fa:	d1f3      	bne.n	80141e4 <__sfputs_r+0xa>
 80141fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014200 <_vfiprintf_r>:
 8014200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014204:	460c      	mov	r4, r1
 8014206:	b09d      	sub	sp, #116	; 0x74
 8014208:	4617      	mov	r7, r2
 801420a:	461d      	mov	r5, r3
 801420c:	4606      	mov	r6, r0
 801420e:	b118      	cbz	r0, 8014218 <_vfiprintf_r+0x18>
 8014210:	6983      	ldr	r3, [r0, #24]
 8014212:	b90b      	cbnz	r3, 8014218 <_vfiprintf_r+0x18>
 8014214:	f7fe fe3c 	bl	8012e90 <__sinit>
 8014218:	4b7c      	ldr	r3, [pc, #496]	; (801440c <_vfiprintf_r+0x20c>)
 801421a:	429c      	cmp	r4, r3
 801421c:	d158      	bne.n	80142d0 <_vfiprintf_r+0xd0>
 801421e:	6874      	ldr	r4, [r6, #4]
 8014220:	89a3      	ldrh	r3, [r4, #12]
 8014222:	0718      	lsls	r0, r3, #28
 8014224:	d55e      	bpl.n	80142e4 <_vfiprintf_r+0xe4>
 8014226:	6923      	ldr	r3, [r4, #16]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d05b      	beq.n	80142e4 <_vfiprintf_r+0xe4>
 801422c:	2300      	movs	r3, #0
 801422e:	9309      	str	r3, [sp, #36]	; 0x24
 8014230:	2320      	movs	r3, #32
 8014232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014236:	2330      	movs	r3, #48	; 0x30
 8014238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801423c:	9503      	str	r5, [sp, #12]
 801423e:	f04f 0b01 	mov.w	fp, #1
 8014242:	46b8      	mov	r8, r7
 8014244:	4645      	mov	r5, r8
 8014246:	f815 3b01 	ldrb.w	r3, [r5], #1
 801424a:	b10b      	cbz	r3, 8014250 <_vfiprintf_r+0x50>
 801424c:	2b25      	cmp	r3, #37	; 0x25
 801424e:	d154      	bne.n	80142fa <_vfiprintf_r+0xfa>
 8014250:	ebb8 0a07 	subs.w	sl, r8, r7
 8014254:	d00b      	beq.n	801426e <_vfiprintf_r+0x6e>
 8014256:	4653      	mov	r3, sl
 8014258:	463a      	mov	r2, r7
 801425a:	4621      	mov	r1, r4
 801425c:	4630      	mov	r0, r6
 801425e:	f7ff ffbc 	bl	80141da <__sfputs_r>
 8014262:	3001      	adds	r0, #1
 8014264:	f000 80c2 	beq.w	80143ec <_vfiprintf_r+0x1ec>
 8014268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426a:	4453      	add	r3, sl
 801426c:	9309      	str	r3, [sp, #36]	; 0x24
 801426e:	f898 3000 	ldrb.w	r3, [r8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	f000 80ba 	beq.w	80143ec <_vfiprintf_r+0x1ec>
 8014278:	2300      	movs	r3, #0
 801427a:	f04f 32ff 	mov.w	r2, #4294967295
 801427e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014282:	9304      	str	r3, [sp, #16]
 8014284:	9307      	str	r3, [sp, #28]
 8014286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801428a:	931a      	str	r3, [sp, #104]	; 0x68
 801428c:	46a8      	mov	r8, r5
 801428e:	2205      	movs	r2, #5
 8014290:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014294:	485e      	ldr	r0, [pc, #376]	; (8014410 <_vfiprintf_r+0x210>)
 8014296:	f7eb ffdb 	bl	8000250 <memchr>
 801429a:	9b04      	ldr	r3, [sp, #16]
 801429c:	bb78      	cbnz	r0, 80142fe <_vfiprintf_r+0xfe>
 801429e:	06d9      	lsls	r1, r3, #27
 80142a0:	bf44      	itt	mi
 80142a2:	2220      	movmi	r2, #32
 80142a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142a8:	071a      	lsls	r2, r3, #28
 80142aa:	bf44      	itt	mi
 80142ac:	222b      	movmi	r2, #43	; 0x2b
 80142ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142b2:	782a      	ldrb	r2, [r5, #0]
 80142b4:	2a2a      	cmp	r2, #42	; 0x2a
 80142b6:	d02a      	beq.n	801430e <_vfiprintf_r+0x10e>
 80142b8:	9a07      	ldr	r2, [sp, #28]
 80142ba:	46a8      	mov	r8, r5
 80142bc:	2000      	movs	r0, #0
 80142be:	250a      	movs	r5, #10
 80142c0:	4641      	mov	r1, r8
 80142c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142c6:	3b30      	subs	r3, #48	; 0x30
 80142c8:	2b09      	cmp	r3, #9
 80142ca:	d969      	bls.n	80143a0 <_vfiprintf_r+0x1a0>
 80142cc:	b360      	cbz	r0, 8014328 <_vfiprintf_r+0x128>
 80142ce:	e024      	b.n	801431a <_vfiprintf_r+0x11a>
 80142d0:	4b50      	ldr	r3, [pc, #320]	; (8014414 <_vfiprintf_r+0x214>)
 80142d2:	429c      	cmp	r4, r3
 80142d4:	d101      	bne.n	80142da <_vfiprintf_r+0xda>
 80142d6:	68b4      	ldr	r4, [r6, #8]
 80142d8:	e7a2      	b.n	8014220 <_vfiprintf_r+0x20>
 80142da:	4b4f      	ldr	r3, [pc, #316]	; (8014418 <_vfiprintf_r+0x218>)
 80142dc:	429c      	cmp	r4, r3
 80142de:	bf08      	it	eq
 80142e0:	68f4      	ldreq	r4, [r6, #12]
 80142e2:	e79d      	b.n	8014220 <_vfiprintf_r+0x20>
 80142e4:	4621      	mov	r1, r4
 80142e6:	4630      	mov	r0, r6
 80142e8:	f7fd fe9a 	bl	8012020 <__swsetup_r>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d09d      	beq.n	801422c <_vfiprintf_r+0x2c>
 80142f0:	f04f 30ff 	mov.w	r0, #4294967295
 80142f4:	b01d      	add	sp, #116	; 0x74
 80142f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fa:	46a8      	mov	r8, r5
 80142fc:	e7a2      	b.n	8014244 <_vfiprintf_r+0x44>
 80142fe:	4a44      	ldr	r2, [pc, #272]	; (8014410 <_vfiprintf_r+0x210>)
 8014300:	1a80      	subs	r0, r0, r2
 8014302:	fa0b f000 	lsl.w	r0, fp, r0
 8014306:	4318      	orrs	r0, r3
 8014308:	9004      	str	r0, [sp, #16]
 801430a:	4645      	mov	r5, r8
 801430c:	e7be      	b.n	801428c <_vfiprintf_r+0x8c>
 801430e:	9a03      	ldr	r2, [sp, #12]
 8014310:	1d11      	adds	r1, r2, #4
 8014312:	6812      	ldr	r2, [r2, #0]
 8014314:	9103      	str	r1, [sp, #12]
 8014316:	2a00      	cmp	r2, #0
 8014318:	db01      	blt.n	801431e <_vfiprintf_r+0x11e>
 801431a:	9207      	str	r2, [sp, #28]
 801431c:	e004      	b.n	8014328 <_vfiprintf_r+0x128>
 801431e:	4252      	negs	r2, r2
 8014320:	f043 0302 	orr.w	r3, r3, #2
 8014324:	9207      	str	r2, [sp, #28]
 8014326:	9304      	str	r3, [sp, #16]
 8014328:	f898 3000 	ldrb.w	r3, [r8]
 801432c:	2b2e      	cmp	r3, #46	; 0x2e
 801432e:	d10e      	bne.n	801434e <_vfiprintf_r+0x14e>
 8014330:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014334:	2b2a      	cmp	r3, #42	; 0x2a
 8014336:	d138      	bne.n	80143aa <_vfiprintf_r+0x1aa>
 8014338:	9b03      	ldr	r3, [sp, #12]
 801433a:	1d1a      	adds	r2, r3, #4
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	9203      	str	r2, [sp, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	bfb8      	it	lt
 8014344:	f04f 33ff 	movlt.w	r3, #4294967295
 8014348:	f108 0802 	add.w	r8, r8, #2
 801434c:	9305      	str	r3, [sp, #20]
 801434e:	4d33      	ldr	r5, [pc, #204]	; (801441c <_vfiprintf_r+0x21c>)
 8014350:	f898 1000 	ldrb.w	r1, [r8]
 8014354:	2203      	movs	r2, #3
 8014356:	4628      	mov	r0, r5
 8014358:	f7eb ff7a 	bl	8000250 <memchr>
 801435c:	b140      	cbz	r0, 8014370 <_vfiprintf_r+0x170>
 801435e:	2340      	movs	r3, #64	; 0x40
 8014360:	1b40      	subs	r0, r0, r5
 8014362:	fa03 f000 	lsl.w	r0, r3, r0
 8014366:	9b04      	ldr	r3, [sp, #16]
 8014368:	4303      	orrs	r3, r0
 801436a:	f108 0801 	add.w	r8, r8, #1
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	f898 1000 	ldrb.w	r1, [r8]
 8014374:	482a      	ldr	r0, [pc, #168]	; (8014420 <_vfiprintf_r+0x220>)
 8014376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801437a:	2206      	movs	r2, #6
 801437c:	f108 0701 	add.w	r7, r8, #1
 8014380:	f7eb ff66 	bl	8000250 <memchr>
 8014384:	2800      	cmp	r0, #0
 8014386:	d037      	beq.n	80143f8 <_vfiprintf_r+0x1f8>
 8014388:	4b26      	ldr	r3, [pc, #152]	; (8014424 <_vfiprintf_r+0x224>)
 801438a:	bb1b      	cbnz	r3, 80143d4 <_vfiprintf_r+0x1d4>
 801438c:	9b03      	ldr	r3, [sp, #12]
 801438e:	3307      	adds	r3, #7
 8014390:	f023 0307 	bic.w	r3, r3, #7
 8014394:	3308      	adds	r3, #8
 8014396:	9303      	str	r3, [sp, #12]
 8014398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801439a:	444b      	add	r3, r9
 801439c:	9309      	str	r3, [sp, #36]	; 0x24
 801439e:	e750      	b.n	8014242 <_vfiprintf_r+0x42>
 80143a0:	fb05 3202 	mla	r2, r5, r2, r3
 80143a4:	2001      	movs	r0, #1
 80143a6:	4688      	mov	r8, r1
 80143a8:	e78a      	b.n	80142c0 <_vfiprintf_r+0xc0>
 80143aa:	2300      	movs	r3, #0
 80143ac:	f108 0801 	add.w	r8, r8, #1
 80143b0:	9305      	str	r3, [sp, #20]
 80143b2:	4619      	mov	r1, r3
 80143b4:	250a      	movs	r5, #10
 80143b6:	4640      	mov	r0, r8
 80143b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143bc:	3a30      	subs	r2, #48	; 0x30
 80143be:	2a09      	cmp	r2, #9
 80143c0:	d903      	bls.n	80143ca <_vfiprintf_r+0x1ca>
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d0c3      	beq.n	801434e <_vfiprintf_r+0x14e>
 80143c6:	9105      	str	r1, [sp, #20]
 80143c8:	e7c1      	b.n	801434e <_vfiprintf_r+0x14e>
 80143ca:	fb05 2101 	mla	r1, r5, r1, r2
 80143ce:	2301      	movs	r3, #1
 80143d0:	4680      	mov	r8, r0
 80143d2:	e7f0      	b.n	80143b6 <_vfiprintf_r+0x1b6>
 80143d4:	ab03      	add	r3, sp, #12
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	4622      	mov	r2, r4
 80143da:	4b13      	ldr	r3, [pc, #76]	; (8014428 <_vfiprintf_r+0x228>)
 80143dc:	a904      	add	r1, sp, #16
 80143de:	4630      	mov	r0, r6
 80143e0:	f7fc f8ca 	bl	8010578 <_printf_float>
 80143e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80143e8:	4681      	mov	r9, r0
 80143ea:	d1d5      	bne.n	8014398 <_vfiprintf_r+0x198>
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	065b      	lsls	r3, r3, #25
 80143f0:	f53f af7e 	bmi.w	80142f0 <_vfiprintf_r+0xf0>
 80143f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143f6:	e77d      	b.n	80142f4 <_vfiprintf_r+0xf4>
 80143f8:	ab03      	add	r3, sp, #12
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	4622      	mov	r2, r4
 80143fe:	4b0a      	ldr	r3, [pc, #40]	; (8014428 <_vfiprintf_r+0x228>)
 8014400:	a904      	add	r1, sp, #16
 8014402:	4630      	mov	r0, r6
 8014404:	f7fc fb5a 	bl	8010abc <_printf_i>
 8014408:	e7ec      	b.n	80143e4 <_vfiprintf_r+0x1e4>
 801440a:	bf00      	nop
 801440c:	08014e28 	.word	0x08014e28
 8014410:	08014f74 	.word	0x08014f74
 8014414:	08014e48 	.word	0x08014e48
 8014418:	08014e08 	.word	0x08014e08
 801441c:	08014f7a 	.word	0x08014f7a
 8014420:	08014f7e 	.word	0x08014f7e
 8014424:	08010579 	.word	0x08010579
 8014428:	080141db 	.word	0x080141db

0801442c <__sread>:
 801442c:	b510      	push	{r4, lr}
 801442e:	460c      	mov	r4, r1
 8014430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014434:	f000 f8f2 	bl	801461c <_read_r>
 8014438:	2800      	cmp	r0, #0
 801443a:	bfab      	itete	ge
 801443c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801443e:	89a3      	ldrhlt	r3, [r4, #12]
 8014440:	181b      	addge	r3, r3, r0
 8014442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014446:	bfac      	ite	ge
 8014448:	6563      	strge	r3, [r4, #84]	; 0x54
 801444a:	81a3      	strhlt	r3, [r4, #12]
 801444c:	bd10      	pop	{r4, pc}

0801444e <__swrite>:
 801444e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014452:	461f      	mov	r7, r3
 8014454:	898b      	ldrh	r3, [r1, #12]
 8014456:	05db      	lsls	r3, r3, #23
 8014458:	4605      	mov	r5, r0
 801445a:	460c      	mov	r4, r1
 801445c:	4616      	mov	r6, r2
 801445e:	d505      	bpl.n	801446c <__swrite+0x1e>
 8014460:	2302      	movs	r3, #2
 8014462:	2200      	movs	r2, #0
 8014464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014468:	f000 f886 	bl	8014578 <_lseek_r>
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014476:	81a3      	strh	r3, [r4, #12]
 8014478:	4632      	mov	r2, r6
 801447a:	463b      	mov	r3, r7
 801447c:	4628      	mov	r0, r5
 801447e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014482:	f000 b835 	b.w	80144f0 <_write_r>

08014486 <__sseek>:
 8014486:	b510      	push	{r4, lr}
 8014488:	460c      	mov	r4, r1
 801448a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801448e:	f000 f873 	bl	8014578 <_lseek_r>
 8014492:	1c43      	adds	r3, r0, #1
 8014494:	89a3      	ldrh	r3, [r4, #12]
 8014496:	bf15      	itete	ne
 8014498:	6560      	strne	r0, [r4, #84]	; 0x54
 801449a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801449e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80144a2:	81a3      	strheq	r3, [r4, #12]
 80144a4:	bf18      	it	ne
 80144a6:	81a3      	strhne	r3, [r4, #12]
 80144a8:	bd10      	pop	{r4, pc}

080144aa <__sclose>:
 80144aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144ae:	f000 b831 	b.w	8014514 <_close_r>

080144b2 <strncmp>:
 80144b2:	b510      	push	{r4, lr}
 80144b4:	b16a      	cbz	r2, 80144d2 <strncmp+0x20>
 80144b6:	3901      	subs	r1, #1
 80144b8:	1884      	adds	r4, r0, r2
 80144ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80144be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d103      	bne.n	80144ce <strncmp+0x1c>
 80144c6:	42a0      	cmp	r0, r4
 80144c8:	d001      	beq.n	80144ce <strncmp+0x1c>
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d1f5      	bne.n	80144ba <strncmp+0x8>
 80144ce:	1a98      	subs	r0, r3, r2
 80144d0:	bd10      	pop	{r4, pc}
 80144d2:	4610      	mov	r0, r2
 80144d4:	e7fc      	b.n	80144d0 <strncmp+0x1e>

080144d6 <__ascii_wctomb>:
 80144d6:	b149      	cbz	r1, 80144ec <__ascii_wctomb+0x16>
 80144d8:	2aff      	cmp	r2, #255	; 0xff
 80144da:	bf85      	ittet	hi
 80144dc:	238a      	movhi	r3, #138	; 0x8a
 80144de:	6003      	strhi	r3, [r0, #0]
 80144e0:	700a      	strbls	r2, [r1, #0]
 80144e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80144e6:	bf98      	it	ls
 80144e8:	2001      	movls	r0, #1
 80144ea:	4770      	bx	lr
 80144ec:	4608      	mov	r0, r1
 80144ee:	4770      	bx	lr

080144f0 <_write_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	4c07      	ldr	r4, [pc, #28]	; (8014510 <_write_r+0x20>)
 80144f4:	4605      	mov	r5, r0
 80144f6:	4608      	mov	r0, r1
 80144f8:	4611      	mov	r1, r2
 80144fa:	2200      	movs	r2, #0
 80144fc:	6022      	str	r2, [r4, #0]
 80144fe:	461a      	mov	r2, r3
 8014500:	f7f9 f8ce 	bl	800d6a0 <_write>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	d102      	bne.n	801450e <_write_r+0x1e>
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	b103      	cbz	r3, 801450e <_write_r+0x1e>
 801450c:	602b      	str	r3, [r5, #0]
 801450e:	bd38      	pop	{r3, r4, r5, pc}
 8014510:	20015e9c 	.word	0x20015e9c

08014514 <_close_r>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4c06      	ldr	r4, [pc, #24]	; (8014530 <_close_r+0x1c>)
 8014518:	2300      	movs	r3, #0
 801451a:	4605      	mov	r5, r0
 801451c:	4608      	mov	r0, r1
 801451e:	6023      	str	r3, [r4, #0]
 8014520:	f000 f896 	bl	8014650 <_close>
 8014524:	1c43      	adds	r3, r0, #1
 8014526:	d102      	bne.n	801452e <_close_r+0x1a>
 8014528:	6823      	ldr	r3, [r4, #0]
 801452a:	b103      	cbz	r3, 801452e <_close_r+0x1a>
 801452c:	602b      	str	r3, [r5, #0]
 801452e:	bd38      	pop	{r3, r4, r5, pc}
 8014530:	20015e9c 	.word	0x20015e9c

08014534 <_fstat_r>:
 8014534:	b538      	push	{r3, r4, r5, lr}
 8014536:	4c07      	ldr	r4, [pc, #28]	; (8014554 <_fstat_r+0x20>)
 8014538:	2300      	movs	r3, #0
 801453a:	4605      	mov	r5, r0
 801453c:	4608      	mov	r0, r1
 801453e:	4611      	mov	r1, r2
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	f000 f88d 	bl	8014660 <_fstat>
 8014546:	1c43      	adds	r3, r0, #1
 8014548:	d102      	bne.n	8014550 <_fstat_r+0x1c>
 801454a:	6823      	ldr	r3, [r4, #0]
 801454c:	b103      	cbz	r3, 8014550 <_fstat_r+0x1c>
 801454e:	602b      	str	r3, [r5, #0]
 8014550:	bd38      	pop	{r3, r4, r5, pc}
 8014552:	bf00      	nop
 8014554:	20015e9c 	.word	0x20015e9c

08014558 <_isatty_r>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	4c06      	ldr	r4, [pc, #24]	; (8014574 <_isatty_r+0x1c>)
 801455c:	2300      	movs	r3, #0
 801455e:	4605      	mov	r5, r0
 8014560:	4608      	mov	r0, r1
 8014562:	6023      	str	r3, [r4, #0]
 8014564:	f000 f88c 	bl	8014680 <_isatty>
 8014568:	1c43      	adds	r3, r0, #1
 801456a:	d102      	bne.n	8014572 <_isatty_r+0x1a>
 801456c:	6823      	ldr	r3, [r4, #0]
 801456e:	b103      	cbz	r3, 8014572 <_isatty_r+0x1a>
 8014570:	602b      	str	r3, [r5, #0]
 8014572:	bd38      	pop	{r3, r4, r5, pc}
 8014574:	20015e9c 	.word	0x20015e9c

08014578 <_lseek_r>:
 8014578:	b538      	push	{r3, r4, r5, lr}
 801457a:	4c07      	ldr	r4, [pc, #28]	; (8014598 <_lseek_r+0x20>)
 801457c:	4605      	mov	r5, r0
 801457e:	4608      	mov	r0, r1
 8014580:	4611      	mov	r1, r2
 8014582:	2200      	movs	r2, #0
 8014584:	6022      	str	r2, [r4, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	f000 f88a 	bl	80146a0 <_lseek>
 801458c:	1c43      	adds	r3, r0, #1
 801458e:	d102      	bne.n	8014596 <_lseek_r+0x1e>
 8014590:	6823      	ldr	r3, [r4, #0]
 8014592:	b103      	cbz	r3, 8014596 <_lseek_r+0x1e>
 8014594:	602b      	str	r3, [r5, #0]
 8014596:	bd38      	pop	{r3, r4, r5, pc}
 8014598:	20015e9c 	.word	0x20015e9c

0801459c <memmove>:
 801459c:	4288      	cmp	r0, r1
 801459e:	b510      	push	{r4, lr}
 80145a0:	eb01 0302 	add.w	r3, r1, r2
 80145a4:	d807      	bhi.n	80145b6 <memmove+0x1a>
 80145a6:	1e42      	subs	r2, r0, #1
 80145a8:	4299      	cmp	r1, r3
 80145aa:	d00a      	beq.n	80145c2 <memmove+0x26>
 80145ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80145b4:	e7f8      	b.n	80145a8 <memmove+0xc>
 80145b6:	4283      	cmp	r3, r0
 80145b8:	d9f5      	bls.n	80145a6 <memmove+0xa>
 80145ba:	1881      	adds	r1, r0, r2
 80145bc:	1ad2      	subs	r2, r2, r3
 80145be:	42d3      	cmn	r3, r2
 80145c0:	d100      	bne.n	80145c4 <memmove+0x28>
 80145c2:	bd10      	pop	{r4, pc}
 80145c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80145cc:	e7f7      	b.n	80145be <memmove+0x22>

080145ce <_realloc_r>:
 80145ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d0:	4607      	mov	r7, r0
 80145d2:	4614      	mov	r4, r2
 80145d4:	460e      	mov	r6, r1
 80145d6:	b921      	cbnz	r1, 80145e2 <_realloc_r+0x14>
 80145d8:	4611      	mov	r1, r2
 80145da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80145de:	f7fb bee9 	b.w	80103b4 <_malloc_r>
 80145e2:	b922      	cbnz	r2, 80145ee <_realloc_r+0x20>
 80145e4:	f7fb fe98 	bl	8010318 <_free_r>
 80145e8:	4625      	mov	r5, r4
 80145ea:	4628      	mov	r0, r5
 80145ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ee:	f000 f827 	bl	8014640 <_malloc_usable_size_r>
 80145f2:	42a0      	cmp	r0, r4
 80145f4:	d20f      	bcs.n	8014616 <_realloc_r+0x48>
 80145f6:	4621      	mov	r1, r4
 80145f8:	4638      	mov	r0, r7
 80145fa:	f7fb fedb 	bl	80103b4 <_malloc_r>
 80145fe:	4605      	mov	r5, r0
 8014600:	2800      	cmp	r0, #0
 8014602:	d0f2      	beq.n	80145ea <_realloc_r+0x1c>
 8014604:	4631      	mov	r1, r6
 8014606:	4622      	mov	r2, r4
 8014608:	f7fb fe64 	bl	80102d4 <memcpy>
 801460c:	4631      	mov	r1, r6
 801460e:	4638      	mov	r0, r7
 8014610:	f7fb fe82 	bl	8010318 <_free_r>
 8014614:	e7e9      	b.n	80145ea <_realloc_r+0x1c>
 8014616:	4635      	mov	r5, r6
 8014618:	e7e7      	b.n	80145ea <_realloc_r+0x1c>
	...

0801461c <_read_r>:
 801461c:	b538      	push	{r3, r4, r5, lr}
 801461e:	4c07      	ldr	r4, [pc, #28]	; (801463c <_read_r+0x20>)
 8014620:	4605      	mov	r5, r0
 8014622:	4608      	mov	r0, r1
 8014624:	4611      	mov	r1, r2
 8014626:	2200      	movs	r2, #0
 8014628:	6022      	str	r2, [r4, #0]
 801462a:	461a      	mov	r2, r3
 801462c:	f000 f840 	bl	80146b0 <_read>
 8014630:	1c43      	adds	r3, r0, #1
 8014632:	d102      	bne.n	801463a <_read_r+0x1e>
 8014634:	6823      	ldr	r3, [r4, #0]
 8014636:	b103      	cbz	r3, 801463a <_read_r+0x1e>
 8014638:	602b      	str	r3, [r5, #0]
 801463a:	bd38      	pop	{r3, r4, r5, pc}
 801463c:	20015e9c 	.word	0x20015e9c

08014640 <_malloc_usable_size_r>:
 8014640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014644:	1f18      	subs	r0, r3, #4
 8014646:	2b00      	cmp	r3, #0
 8014648:	bfbc      	itt	lt
 801464a:	580b      	ldrlt	r3, [r1, r0]
 801464c:	18c0      	addlt	r0, r0, r3
 801464e:	4770      	bx	lr

08014650 <_close>:
 8014650:	4b02      	ldr	r3, [pc, #8]	; (801465c <_close+0xc>)
 8014652:	2258      	movs	r2, #88	; 0x58
 8014654:	601a      	str	r2, [r3, #0]
 8014656:	f04f 30ff 	mov.w	r0, #4294967295
 801465a:	4770      	bx	lr
 801465c:	20015e9c 	.word	0x20015e9c

08014660 <_fstat>:
 8014660:	4b02      	ldr	r3, [pc, #8]	; (801466c <_fstat+0xc>)
 8014662:	2258      	movs	r2, #88	; 0x58
 8014664:	601a      	str	r2, [r3, #0]
 8014666:	f04f 30ff 	mov.w	r0, #4294967295
 801466a:	4770      	bx	lr
 801466c:	20015e9c 	.word	0x20015e9c

08014670 <_getpid>:
 8014670:	4b02      	ldr	r3, [pc, #8]	; (801467c <_getpid+0xc>)
 8014672:	2258      	movs	r2, #88	; 0x58
 8014674:	601a      	str	r2, [r3, #0]
 8014676:	f04f 30ff 	mov.w	r0, #4294967295
 801467a:	4770      	bx	lr
 801467c:	20015e9c 	.word	0x20015e9c

08014680 <_isatty>:
 8014680:	4b02      	ldr	r3, [pc, #8]	; (801468c <_isatty+0xc>)
 8014682:	2258      	movs	r2, #88	; 0x58
 8014684:	601a      	str	r2, [r3, #0]
 8014686:	2000      	movs	r0, #0
 8014688:	4770      	bx	lr
 801468a:	bf00      	nop
 801468c:	20015e9c 	.word	0x20015e9c

08014690 <_kill>:
 8014690:	4b02      	ldr	r3, [pc, #8]	; (801469c <_kill+0xc>)
 8014692:	2258      	movs	r2, #88	; 0x58
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	f04f 30ff 	mov.w	r0, #4294967295
 801469a:	4770      	bx	lr
 801469c:	20015e9c 	.word	0x20015e9c

080146a0 <_lseek>:
 80146a0:	4b02      	ldr	r3, [pc, #8]	; (80146ac <_lseek+0xc>)
 80146a2:	2258      	movs	r2, #88	; 0x58
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	f04f 30ff 	mov.w	r0, #4294967295
 80146aa:	4770      	bx	lr
 80146ac:	20015e9c 	.word	0x20015e9c

080146b0 <_read>:
 80146b0:	4b02      	ldr	r3, [pc, #8]	; (80146bc <_read+0xc>)
 80146b2:	2258      	movs	r2, #88	; 0x58
 80146b4:	601a      	str	r2, [r3, #0]
 80146b6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ba:	4770      	bx	lr
 80146bc:	20015e9c 	.word	0x20015e9c

080146c0 <_sbrk>:
 80146c0:	4b04      	ldr	r3, [pc, #16]	; (80146d4 <_sbrk+0x14>)
 80146c2:	6819      	ldr	r1, [r3, #0]
 80146c4:	4602      	mov	r2, r0
 80146c6:	b909      	cbnz	r1, 80146cc <_sbrk+0xc>
 80146c8:	4903      	ldr	r1, [pc, #12]	; (80146d8 <_sbrk+0x18>)
 80146ca:	6019      	str	r1, [r3, #0]
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	4402      	add	r2, r0
 80146d0:	601a      	str	r2, [r3, #0]
 80146d2:	4770      	bx	lr
 80146d4:	20001344 	.word	0x20001344
 80146d8:	20015ea0 	.word	0x20015ea0

080146dc <_exit>:
 80146dc:	e7fe      	b.n	80146dc <_exit>
	...

080146e0 <_init>:
 80146e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e2:	bf00      	nop
 80146e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146e6:	bc08      	pop	{r3}
 80146e8:	469e      	mov	lr, r3
 80146ea:	4770      	bx	lr

080146ec <_fini>:
 80146ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ee:	bf00      	nop
 80146f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146f2:	bc08      	pop	{r3}
 80146f4:	469e      	mov	lr, r3
 80146f6:	4770      	bx	lr
