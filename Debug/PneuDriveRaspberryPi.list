
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080125c0  080125c0  000225c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a80  08012a80  00030540  2**0
                  CONTENTS
  4 .ARM          00000008  08012a80  08012a80  00022a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a88  08012a88  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012a88  08012a88  00022a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a90  08012a90  00022a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  08012a94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e5d8  20000540  08012fd4  00030540  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000eb18  08012fd4  0003eb18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e8e9  00000000  00000000  0003056e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008f8d  00000000  00000000  0007ee57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022e0  00000000  00000000  00087de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f18  00000000  00000000  0008a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003467f  00000000  00000000  0008bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b3bd  00000000  00000000  000c065f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f266  00000000  00000000  000eba1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fac82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cec  00000000  00000000  001fad00  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  002049ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00204aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000540 	.word	0x20000540
 800021c:	00000000 	.word	0x00000000
 8000220:	080125a8 	.word	0x080125a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000544 	.word	0x20000544
 800023c:	080125a8 	.word	0x080125a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f001 f926 	bl	800220a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 fb1e 	bl	8009600 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f008 faf4 	bl	80095b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	2000176c 	.word	0x2000176c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000176c 	.word	0x2000176c

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f007 f9a0 	bl	80083b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fa5a 	bl	800155c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Start_DMA+0x1e>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e0c7      	b.n	800128a <HAL_ADC_Start_DMA+0x1ae>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d018      	beq.n	8001142 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001120:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <HAL_ADC_Start_DMA+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <HAL_ADC_Start_DMA+0x1bc>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9a      	lsrs	r2, r3, #18
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001134:	e002      	b.n	800113c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3b01      	subs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	f040 809b 	bne.w	8001288 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_ADC_Start_DMA+0x1c0>)
 8001158:	4013      	ands	r3, r2
 800115a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d106      	bne.n	800119c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f023 0206 	bic.w	r2, r3, #6
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
 800119a:	e002      	b.n	80011a2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <HAL_ADC_Start_DMA+0x1c4>)
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	4a3b      	ldr	r2, [pc, #236]	; (80012a4 <HAL_ADC_Start_DMA+0x1c8>)
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_ADC_Start_DMA+0x1cc>)
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	334c      	adds	r3, #76	; 0x4c
 80011f6:	4619      	mov	r1, r3
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f001 f8e8 	bl	80023d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_ADC_Start_DMA+0x1d0>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10f      	bne.n	800122c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d136      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	e02d      	b.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_ADC_Start_DMA+0x1d4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10e      	bne.n	8001254 <HAL_ADC_Start_DMA+0x178>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_ADC_Start_DMA+0x1d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d113      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_ADC_Start_DMA+0x1d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10e      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001286:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	431bde83 	.word	0x431bde83
 800129c:	fffff8fe 	.word	0xfffff8fe
 80012a0:	08001751 	.word	0x08001751
 80012a4:	0800180b 	.word	0x0800180b
 80012a8:	08001827 	.word	0x08001827
 80012ac:	40012300 	.word	0x40012300
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40012200 	.word	0x40012200

080012b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1c>
 800130c:	2302      	movs	r3, #2
 800130e:	e115      	b.n	800153c <HAL_ADC_ConfigChannel+0x248>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d935      	bls.n	800138c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3b1e      	subs	r3, #30
 8001336:	2207      	movs	r2, #7
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7f      	ldr	r2, [pc, #508]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d10a      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68d9      	ldr	r1, [r3, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	061a      	lsls	r2, r3, #24
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e035      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68d9      	ldr	r1, [r3, #12]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4403      	add	r3, r0
 800137e:	3b1e      	subs	r3, #30
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	e022      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6919      	ldr	r1, [r3, #16]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	2207      	movs	r2, #7
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6919      	ldr	r1, [r3, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4403      	add	r3, r0
 80013c8:	409a      	lsls	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d824      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b05      	subs	r3, #5
 80013ec:	221f      	movs	r2, #31
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b05      	subs	r3, #5
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
 8001422:	e04c      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d824      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b23      	subs	r3, #35	; 0x23
 800143e:	221f      	movs	r2, #31
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b23      	subs	r3, #35	; 0x23
 8001468:	fa00 f203 	lsl.w	r2, r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
 8001474:	e023      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b41      	subs	r3, #65	; 0x41
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b41      	subs	r3, #65	; 0x41
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_ADC_ConfigChannel+0x258>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1e8>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014da:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_ADC_ConfigChannel+0x258>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d125      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0x204>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b11      	cmp	r3, #17
 80014f6:	d11c      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001502:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d111      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_ADC_ConfigChannel+0x260>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_ADC_ConfigChannel+0x264>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	10000012 	.word	0x10000012
 800154c:	40012000 	.word	0x40012000
 8001550:	40012300 	.word	0x40012300
 8001554:	20000008 	.word	0x20000008
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <ADC_Init+0x1ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a77      	ldr	r2, [pc, #476]	; (8001748 <ADC_Init+0x1ec>)
 800156a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800156e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001570:	4b75      	ldr	r3, [pc, #468]	; (8001748 <ADC_Init+0x1ec>)
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4973      	ldr	r1, [pc, #460]	; (8001748 <ADC_Init+0x1ec>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	021a      	lsls	r2, r3, #8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6899      	ldr	r1, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	4a58      	ldr	r2, [pc, #352]	; (800174c <ADC_Init+0x1f0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6899      	ldr	r1, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	e00f      	b.n	8001656 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0202 	bic.w	r2, r2, #2
 8001664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	005a      	lsls	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01b      	beq.n	80016bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6859      	ldr	r1, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	3b01      	subs	r3, #1
 80016b0:	035a      	lsls	r2, r3, #13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	e007      	b.n	80016cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	051a      	lsls	r2, r3, #20
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800170e:	025a      	lsls	r2, r3, #9
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6899      	ldr	r1, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	029a      	lsls	r2, r3, #10
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40012300 	.word	0x40012300
 800174c:	0f000001 	.word	0x0f000001

08001750 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001766:	2b00      	cmp	r3, #0
 8001768:	d13c      	bne.n	80017e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12b      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d127      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d119      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0220 	bic.w	r2, r2, #32
 80017b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fd6b 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017e2:	e00e      	b.n	8001802 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fd75 	bl	80012e0 <HAL_ADC_ErrorCallback>
}
 80017f6:	e004      	b.n	8001802 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff fd57 	bl	80012cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f043 0204 	orr.w	r2, r3, #4
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fd4a 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0ed      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f006 fe7e 	bl	8008574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0202 	bic.w	r2, r2, #2
 8001886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff fbb6 	bl	8000ff8 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	e012      	b.n	80018b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001890:	f7ff fbb2 	bl	8000ff8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d90b      	bls.n	80018b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2205      	movs	r2, #5
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0c5      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e5      	bne.n	8001890 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff fb90 	bl	8000ff8 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018da:	e012      	b.n	8001902 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018dc:	f7ff fb8c 	bl	8000ff8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d90b      	bls.n	8001902 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2205      	movs	r2, #5
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09f      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0e5      	beq.n	80018dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d108      	bne.n	800192a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e007      	b.n	800193a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7e5b      	ldrb	r3, [r3, #25]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e007      	b.n	8001964 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001962:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e9b      	ldrb	r3, [r3, #26]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0220 	bic.w	r2, r2, #32
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7edb      	ldrb	r3, [r3, #27]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0210 	bic.w	r2, r2, #16
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0210 	orr.w	r2, r2, #16
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7f1b      	ldrb	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0208 	bic.w	r2, r2, #8
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7f5b      	ldrb	r3, [r3, #29]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0204 	orr.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	ea42 0103 	orr.w	r1, r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d003      	beq.n	8001a6e <HAL_CAN_GetRxMessage+0x24>
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80f4 	bne.w	8001c56 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10e      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e8      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d9      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	331b      	adds	r3, #27
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0204 	and.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	331b      	adds	r3, #27
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0d5b      	lsrs	r3, r3, #21
 8001ade:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	331b      	adds	r3, #27
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	331b      	adds	r3, #27
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	331b      	adds	r3, #27
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	331b      	adds	r3, #27
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	331b      	adds	r3, #27
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0c1a      	lsrs	r2, r3, #16
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e1a      	lsrs	r2, r3, #24
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0a1a      	lsrs	r2, r3, #8
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0c1a      	lsrs	r2, r3, #16
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3306      	adds	r3, #6
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e1a      	lsrs	r2, r3, #24
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3307      	adds	r3, #7
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d108      	bne.n	8001c42 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	e007      	b.n	8001c52 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d07c      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f97d 	bl	8001fd2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cd8:	e016      	b.n	8001d08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e00c      	b.n	8001d08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	e002      	b.n	8001d08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f983 	bl	800200e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f95d 	bl	8001fe6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d2c:	e016      	b.n	8001d5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e00c      	b.n	8001d5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
 8001d54:	e002      	b.n	8001d5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f963 	bl	8002022 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d024      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f93d 	bl	8001ffa <HAL_CAN_TxMailbox2CompleteCallback>
 8001d80:	e016      	b.n	8001db0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	e00c      	b.n	8001db0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	e002      	b.n	8001db0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f943 	bl	8002036 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f92a 	bl	800204a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f00c f9cc 	bl	800e1ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2210      	movs	r2, #16
 8001e36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2208      	movs	r2, #8
 8001e52:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f902 	bl	800205e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f00c f9c6 	bl	800e204 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2210      	movs	r2, #16
 8001e92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8ec 	bl	8002072 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8e5 	bl	8002086 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d06c      	beq.n	8001faa <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03d      	beq.n	8001faa <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d038      	beq.n	8001faa <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f3e:	2b30      	cmp	r3, #48	; 0x30
 8001f40:	d017      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x302>
 8001f42:	2b30      	cmp	r3, #48	; 0x30
 8001f44:	d804      	bhi.n	8001f50 <HAL_CAN_IRQHandler+0x2e0>
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d009      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x2ee>
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d00c      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f4e:	e024      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f50:	2b50      	cmp	r3, #80	; 0x50
 8001f52:	d018      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x316>
 8001f54:	2b60      	cmp	r3, #96	; 0x60
 8001f56:	d01b      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x320>
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d00f      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f5c:	e01d      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f66:	e018      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f043 0310 	orr.w	r3, r3, #16
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f70:	e013      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7a:	e00e      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f84:	e009      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f8e:	e004      	b.n	8001f9a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fa8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f868 	bl	800209a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	05fa0000 	.word	0x05fa0000

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff4c 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002232:	f7ff ff61 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7ff ffb1 	bl	80021a4 <NVIC_EncodePriority>
 8002242:	4602      	mov	r2, r0
 8002244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff80 	bl	8002150 <__NVIC_SetPriority>
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff54 	bl	8002114 <__NVIC_EnableIRQ>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7fe feba 	bl	8000ff8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e099      	b.n	80023c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b0:	e00f      	b.n	80022d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b2:	f7fe fea1 	bl	8000ff8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d908      	bls.n	80022d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e078      	b.n	80023c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e8      	bne.n	80022b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_DMA_Init+0x158>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2b04      	cmp	r3, #4
 800232a:	d107      	bne.n	800233c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4313      	orrs	r3, r2
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f023 0307 	bic.w	r3, r3, #7
 8002352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b04      	cmp	r3, #4
 8002364:	d117      	bne.n	8002396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00e      	beq.n	8002396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fb09 	bl	8002990 <DMA_CheckFifoParam>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002392:	2301      	movs	r3, #1
 8002394:	e016      	b.n	80023c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fac0 	bl	8002924 <DMA_CalcBaseAndBitshift>
 80023a4:	4603      	mov	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	223f      	movs	r2, #63	; 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	e010803f 	.word	0xe010803f

080023d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Start_IT+0x26>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e048      	b.n	8002488 <HAL_DMA_Start_IT+0xb8>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d137      	bne.n	800247a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fa52 	bl	80028c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	223f      	movs	r2, #63	; 0x3f
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0216 	orr.w	r2, r2, #22
 800243e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800244e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e005      	b.n	8002486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002486:	7dfb      	ldrb	r3, [r7, #23]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800249e:	f7fe fdab 	bl	8000ff8 <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d008      	beq.n	80024c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e052      	b.n	8002568 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0216 	bic.w	r2, r2, #22
 80024d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_DMA_Abort+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002512:	e013      	b.n	800253c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002514:	f7fe fd70 	bl	8000ff8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b05      	cmp	r3, #5
 8002520:	d90c      	bls.n	800253c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e015      	b.n	8002568 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e4      	bne.n	8002514 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	223f      	movs	r2, #63	; 0x3f
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d004      	beq.n	800258e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00c      	b.n	80025a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_DMA_IRQHandler+0x258>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a92      	ldr	r2, [pc, #584]	; (8002810 <HAL_DMA_IRQHandler+0x25c>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2208      	movs	r2, #8
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2208      	movs	r2, #8
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2201      	movs	r2, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2204      	movs	r2, #4
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2210      	movs	r2, #16
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d043      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03c      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2210      	movs	r2, #16
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d024      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
 80026e2:	e01f      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e016      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0208 	bic.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2220      	movs	r2, #32
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808e 	beq.w	8002852 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8086 	beq.w	8002852 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2220      	movs	r2, #32
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b05      	cmp	r3, #5
 800275c:	d136      	bne.n	80027cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0216 	bic.w	r2, r2, #22
 800276c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_DMA_IRQHandler+0x1da>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0208 	bic.w	r2, r2, #8
 800279c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	223f      	movs	r2, #63	; 0x3f
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07d      	beq.n	80028be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
        }
        return;
 80027ca:	e078      	b.n	80028be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d030      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e02b      	b.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d027      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e022      	b.n	8002852 <HAL_DMA_IRQHandler+0x29e>
 800280c:	20000008 	.word	0x20000008
 8002810:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0210 	bic.w	r2, r2, #16
 8002830:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	2b00      	cmp	r3, #0
 8002858:	d032      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d022      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	429a      	cmp	r2, r3
 8002888:	d307      	bcc.n	800289a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f2      	bne.n	800287e <HAL_DMA_IRQHandler+0x2ca>
 8002898:	e000      	b.n	800289c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800289a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028be:	bf00      	nop
    }
  }
}
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop

080028c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d108      	bne.n	8002908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002906:	e007      	b.n	8002918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3b10      	subs	r3, #16
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <DMA_CalcBaseAndBitshift+0x60>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <DMA_CalcBaseAndBitshift+0x64>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d908      	bls.n	8002964 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <DMA_CalcBaseAndBitshift+0x68>)
 800295a:	4013      	ands	r3, r2
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58
 8002962:	e006      	b.n	8002972 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <DMA_CalcBaseAndBitshift+0x68>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	aaaaaaab 	.word	0xaaaaaaab
 8002988:	08012738 	.word	0x08012738
 800298c:	fffffc00 	.word	0xfffffc00

08002990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d855      	bhi.n	8002a5c <DMA_CheckFifoParam+0xcc>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <DMA_CheckFifoParam+0x28>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	08002a5d 	.word	0x08002a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d045      	beq.n	8002a60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e042      	b.n	8002a60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e2:	d13f      	bne.n	8002a64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e03c      	b.n	8002a64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d121      	bne.n	8002a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d836      	bhi.n	8002a68 <DMA_CheckFifoParam+0xd8>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x70>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a17 	.word	0x08002a17
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002a29 	.word	0x08002a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e02f      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e021      	b.n	8002a6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a30:	d11e      	bne.n	8002a70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a36:	e01b      	b.n	8002a70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <DMA_CheckFifoParam+0xb4>
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d003      	beq.n	8002a4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a42:	e018      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e015      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e00b      	b.n	8002a74 <DMA_CheckFifoParam+0xe4>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e00a      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a60:	bf00      	nop
 8002a62:	e008      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a64:	bf00      	nop
 8002a66:	e006      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a68:	bf00      	nop
 8002a6a:	e004      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e002      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a74:	bf00      	nop
    }
  } 
  
  return status; 
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e175      	b.n	8002d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 8164 	bne.w	8002d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x4e>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d123      	bne.n	8002b1a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d00b      	beq.n	8002b6e <HAL_GPIO_Init+0xea>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d130      	bne.n	8002bd0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0201 	and.w	r2, r3, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80be 	beq.w	8002d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a64      	ldr	r2, [pc, #400]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c26:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a57      	ldr	r2, [pc, #348]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d037      	beq.n	8002cc2 <HAL_GPIO_Init+0x23e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a56      	ldr	r2, [pc, #344]	; (8002db0 <HAL_GPIO_Init+0x32c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_GPIO_Init+0x23a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <HAL_GPIO_Init+0x236>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d025      	beq.n	8002cb6 <HAL_GPIO_Init+0x232>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <HAL_GPIO_Init+0x338>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_GPIO_Init+0x33c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x22a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_Init+0x340>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_GPIO_Init+0x344>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_GPIO_Init+0x348>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4e      	ldr	r2, [pc, #312]	; (8002dd0 <HAL_GPIO_Init+0x34c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c9a:	2309      	movs	r3, #9
 8002c9c:	e012      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e010      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00e      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cd4:	4934      	ldr	r1, [pc, #208]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d30:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae86 	bls.w	8002aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3724      	adds	r7, #36	; 0x24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40022400 	.word	0x40022400
 8002dd4:	40013c00 	.word	0x40013c00

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e22:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f005 ffec 	bl	8008e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40013c00 	.word	0x40013c00

08002e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f005 fe0e 	bl	8008a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d104      	bne.n	8002ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_I2C_Init+0x11c>)
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	ea42 0103 	orr.w	r1, r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69d9      	ldr	r1, [r3, #28]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	02008000 	.word	0x02008000

08002f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d138      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e032      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	d139      	bne.n	800307c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003012:	2302      	movs	r3, #2
 8003014:	e033      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	; 0x24
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_PWREx_EnableOverDrive+0x98>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a22      	ldr	r2, [pc, #136]	; (8003124 <HAL_PWREx_EnableOverDrive+0x98>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ba:	f7fd ff9d 	bl	8000ff8 <HAL_GetTick>
 80030be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c0:	e009      	b.n	80030d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c2:	f7fd ff99 	bl	8000ff8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d0:	d901      	bls.n	80030d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e022      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d1ee      	bne.n	80030c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fd ff82 	bl	8000ff8 <HAL_GetTick>
 80030f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f6:	e009      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f8:	f7fd ff7e 	bl	8000ff8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003106:	d901      	bls.n	800310c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e007      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003118:	d1ee      	bne.n	80030f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	40007000 	.word	0x40007000

0800312c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e25e      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8087 	beq.w	800325e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003150:	4b96      	ldr	r3, [pc, #600]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00c      	beq.n	8003176 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315c:	4b93      	ldr	r3, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d112      	bne.n	800318e <HAL_RCC_OscConfig+0x62>
 8003168:	4b90      	ldr	r3, [pc, #576]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003174:	d10b      	bne.n	800318e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d06c      	beq.n	800325c <HAL_RCC_OscConfig+0x130>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d168      	bne.n	800325c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e238      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x7a>
 8003198:	4b84      	ldr	r3, [pc, #528]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a83      	ldr	r2, [pc, #524]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e02e      	b.n	8003204 <HAL_RCC_OscConfig+0xd8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x9c>
 80031ae:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b7c      	ldr	r3, [pc, #496]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7b      	ldr	r2, [pc, #492]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xd8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0xc0>
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a75      	ldr	r2, [pc, #468]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b73      	ldr	r3, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a72      	ldr	r2, [pc, #456]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xd8>
 80031ec:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6e      	ldr	r2, [pc, #440]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6b      	ldr	r2, [pc, #428]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd fef4 	bl	8000ff8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd fef0 	bl	8000ff8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1ec      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xe8>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fd fee0 	bl	8000ff8 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fd fedc 	bl	8000ff8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1d8      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b57      	ldr	r3, [pc, #348]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x110>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d069      	beq.n	800333e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x190>
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1ac      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	493d      	ldr	r1, [pc, #244]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e040      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d023      	beq.n	800330c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd fe92 	bl	8000ff8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fd fe8e 	bl	8000ff8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e18a      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4929      	ldr	r1, [pc, #164]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
 800330a:	e018      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fe6e 	bl	8000ff8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003320:	f7fd fe6a 	bl	8000ff8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e166      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d038      	beq.n	80033bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d019      	beq.n	8003386 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fd fe4b 	bl	8000ff8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fd fe47 	bl	8000ff8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e143      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x23a>
 8003384:	e01a      	b.n	80033bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_RCC_OscConfig+0x280>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fd fe31 	bl	8000ff8 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fd fe2d 	bl	8000ff8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d903      	bls.n	80033b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e129      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
 80033ac:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	4b95      	ldr	r3, [pc, #596]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a4 	beq.w	8003512 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a8b      	ldr	r2, [pc, #556]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b89      	ldr	r3, [pc, #548]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b86      	ldr	r3, [pc, #536]	; (800360c <HAL_RCC_OscConfig+0x4e0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033fe:	4b83      	ldr	r3, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x4e0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a82      	ldr	r2, [pc, #520]	; (800360c <HAL_RCC_OscConfig+0x4e0>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fd fdf5 	bl	8000ff8 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd fdf1 	bl	8000ff8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0ed      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	4b79      	ldr	r3, [pc, #484]	; (800360c <HAL_RCC_OscConfig+0x4e0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x31a>
 8003438:	4b73      	ldr	r3, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a72      	ldr	r2, [pc, #456]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x33c>
 800344e:	4b6e      	ldr	r3, [pc, #440]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a6d      	ldr	r2, [pc, #436]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
 800345a:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6713      	str	r3, [r2, #112]	; 0x70
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x35e>
 8003470:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a64      	ldr	r2, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	; 0x70
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
 800348a:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	4b5c      	ldr	r3, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a5b      	ldr	r2, [pc, #364]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fd fda5 	bl	8000ff8 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd fda1 	bl	8000ff8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e09b      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x386>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fd8f 	bl	8000ff8 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fd8b 	bl	8000ff8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e085      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b44      	ldr	r3, [pc, #272]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d071      	beq.n	80035fe <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351a:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d069      	beq.n	80035fa <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d14b      	bne.n	80035c6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a35      	ldr	r2, [pc, #212]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd fd5d 	bl	8000ff8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd fd59 	bl	8000ff8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e055      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	071b      	lsls	r3, r3, #28
 800358c:	491e      	ldr	r1, [pc, #120]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 8003598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd fd2b 	bl	8000ff8 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fd fd27 	bl	8000ff8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e023      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x47a>
 80035c4:	e01b      	b.n	80035fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80035cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fd11 	bl	8000ff8 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fd0d 	bl	8000ff8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e009      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x4ae>
 80035f8:	e001      	b.n	80035fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ce      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d910      	bls.n	8003658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 020f 	bic.w	r2, r3, #15
 800363e:	4964      	ldr	r1, [pc, #400]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b6      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a57      	ldr	r2, [pc, #348]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a51      	ldr	r2, [pc, #324]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	494c      	ldr	r1, [pc, #304]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d040      	beq.n	8003734 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d115      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07d      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e071      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e069      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4935      	ldr	r1, [pc, #212]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003704:	f7fd fc78 	bl	8000ff8 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	e00a      	b.n	8003722 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7fd fc74 	bl	8000ff8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e051      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d1eb      	bne.n	800370c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d210      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 020f 	bic.w	r2, r3, #15
 800374a:	4921      	ldr	r1, [pc, #132]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e030      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4915      	ldr	r1, [pc, #84]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	490d      	ldr	r1, [pc, #52]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a2:	f000 f81d 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80037a6:	4601      	mov	r1, r0
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	5cd3      	ldrb	r3, [r2, r3]
 80037b6:	fa21 f303 	lsr.w	r3, r1, r3
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80037be:	2000      	movs	r0, #0
 80037c0:	f005 ff1e 	bl	8009600 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08012740 	.word	0x08012740
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d007      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x32>
 8003802:	2b08      	cmp	r3, #8
 8003804:	d008      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x38>
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 808d 	bne.w	8003926 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <HAL_RCC_GetSysClockFreq+0x15c>)
 800380e:	60bb      	str	r3, [r7, #8]
       break;
 8003810:	e08c      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003812:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003814:	60bb      	str	r3, [r7, #8]
      break;
 8003816:	e089      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003818:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003822:	4b45      	ldr	r3, [pc, #276]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d023      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b42      	ldr	r3, [pc, #264]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	ea03 0501 	and.w	r5, r3, r1
 8003844:	ea04 0602 	and.w	r6, r4, r2
 8003848:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 800384a:	fb02 f106 	mul.w	r1, r2, r6
 800384e:	2200      	movs	r2, #0
 8003850:	fb02 f205 	mul.w	r2, r2, r5
 8003854:	440a      	add	r2, r1
 8003856:	493a      	ldr	r1, [pc, #232]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003858:	fba5 0101 	umull	r0, r1, r5, r1
 800385c:	1853      	adds	r3, r2, r1
 800385e:	4619      	mov	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f04f 0400 	mov.w	r4, #0
 8003866:	461a      	mov	r2, r3
 8003868:	4623      	mov	r3, r4
 800386a:	f7fc fd41 	bl	80002f0 <__aeabi_uldivmod>
 800386e:	4603      	mov	r3, r0
 8003870:	460c      	mov	r4, r1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e049      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	f04f 0400 	mov.w	r4, #0
 8003880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	ea03 0501 	and.w	r5, r3, r1
 800388c:	ea04 0602 	and.w	r6, r4, r2
 8003890:	4629      	mov	r1, r5
 8003892:	4632      	mov	r2, r6
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	f04f 0400 	mov.w	r4, #0
 800389c:	0154      	lsls	r4, r2, #5
 800389e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038a2:	014b      	lsls	r3, r1, #5
 80038a4:	4619      	mov	r1, r3
 80038a6:	4622      	mov	r2, r4
 80038a8:	1b49      	subs	r1, r1, r5
 80038aa:	eb62 0206 	sbc.w	r2, r2, r6
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	0194      	lsls	r4, r2, #6
 80038b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038bc:	018b      	lsls	r3, r1, #6
 80038be:	1a5b      	subs	r3, r3, r1
 80038c0:	eb64 0402 	sbc.w	r4, r4, r2
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	00e2      	lsls	r2, r4, #3
 80038ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038d2:	00d9      	lsls	r1, r3, #3
 80038d4:	460b      	mov	r3, r1
 80038d6:	4614      	mov	r4, r2
 80038d8:	195b      	adds	r3, r3, r5
 80038da:	eb44 0406 	adc.w	r4, r4, r6
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	02a2      	lsls	r2, r4, #10
 80038e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ec:	0299      	lsls	r1, r3, #10
 80038ee:	460b      	mov	r3, r1
 80038f0:	4614      	mov	r4, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	4621      	mov	r1, r4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f04f 0400 	mov.w	r4, #0
 80038fc:	461a      	mov	r2, r3
 80038fe:	4623      	mov	r3, r4
 8003900:	f7fc fcf6 	bl	80002f0 <__aeabi_uldivmod>
 8003904:	4603      	mov	r3, r0
 8003906:	460c      	mov	r4, r1
 8003908:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_GetSysClockFreq+0x158>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	3301      	adds	r3, #1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	60bb      	str	r3, [r7, #8]
      break;
 8003924:	e002      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003928:	60bb      	str	r3, [r7, #8]
      break;
 800392a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392c:	68bb      	ldr	r3, [r7, #8]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	00f42400 	.word	0x00f42400
 8003940:	017d7840 	.word	0x017d7840

08003944 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000008 	.word	0x20000008

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4601      	mov	r1, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4a03      	ldr	r2, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5cd3      	ldrb	r3, [r2, r3]
 8003974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08012750 	.word	0x08012750

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffdc 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 800398c:	4601      	mov	r1, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0b5b      	lsrs	r3, r3, #13
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4a03      	ldr	r2, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08012750 	.word	0x08012750

080039ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	220f      	movs	r2, #15
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCC_GetClockConfig+0x60>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40023c00 	.word	0x40023c00

08003a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d012      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	4964      	ldr	r1, [pc, #400]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a6a:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	4959      	ldr	r1, [pc, #356]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a88:	d101      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d017      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	494a      	ldr	r1, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 808b 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6413      	str	r3, [r2, #64]	; 0x40
 8003b00:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b18:	f7fd fa6e 	bl	8000ff8 <HAL_GetTick>
 8003b1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fd fa6a 	bl	8000ff8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e38d      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d035      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d02e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5c:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d114      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fa32 	bl	8000ff8 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd fa2e 	bl	8000ff8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e34f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ee      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc6:	d111      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	4901      	ldr	r1, [pc, #4]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000
 8003be8:	0ffffcff 	.word	0x0ffffcff
 8003bec:	4bb3      	ldr	r3, [pc, #716]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4ab2      	ldr	r2, [pc, #712]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bf6:	6093      	str	r3, [r2, #8]
 8003bf8:	4bb0      	ldr	r3, [pc, #704]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	49ad      	ldr	r1, [pc, #692]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d010      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c16:	4ba9      	ldr	r3, [pc, #676]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	4aa7      	ldr	r2, [pc, #668]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c26:	4ba5      	ldr	r3, [pc, #660]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	49a2      	ldr	r1, [pc, #648]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c44:	4b9d      	ldr	r3, [pc, #628]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c52:	499a      	ldr	r1, [pc, #616]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c66:	4b95      	ldr	r3, [pc, #596]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c74:	4991      	ldr	r1, [pc, #580]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c88:	4b8c      	ldr	r3, [pc, #560]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c96:	4989      	ldr	r1, [pc, #548]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003caa:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4980      	ldr	r1, [pc, #512]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ccc:	4b7b      	ldr	r3, [pc, #492]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4978      	ldr	r1, [pc, #480]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f023 020c 	bic.w	r2, r3, #12
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfc:	496f      	ldr	r1, [pc, #444]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	4967      	ldr	r1, [pc, #412]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d32:	4b62      	ldr	r3, [pc, #392]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d40:	495e      	ldr	r1, [pc, #376]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d54:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	4956      	ldr	r1, [pc, #344]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d76:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	494d      	ldr	r1, [pc, #308]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	4945      	ldr	r1, [pc, #276]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	493c      	ldr	r1, [pc, #240]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ddc:	4b37      	ldr	r3, [pc, #220]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dea:	4934      	ldr	r1, [pc, #208]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	492b      	ldr	r1, [pc, #172]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	491b      	ldr	r1, [pc, #108]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e70:	4912      	ldr	r1, [pc, #72]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	4909      	ldr	r1, [pc, #36]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	4985      	ldr	r1, [pc, #532]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ed4:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	497c      	ldr	r1, [pc, #496]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d005      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003efa:	f040 80d6 	bne.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f875 	bl	8000ff8 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f12:	f7fd f871 	bl	8000ff8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e194      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d021      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11d      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f44:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	019a      	lsls	r2, r3, #6
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	071b      	lsls	r3, r3, #28
 8003f78:	4957      	ldr	r1, [pc, #348]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02e      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d129      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fac:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	0f1b      	lsrs	r3, r3, #28
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	019a      	lsls	r2, r3, #6
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	071b      	lsls	r3, r3, #28
 8003fe0:	493d      	ldr	r1, [pc, #244]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fee:	f023 021f 	bic.w	r2, r3, #31
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	4937      	ldr	r1, [pc, #220]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01d      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004012:	0e1b      	lsrs	r3, r3, #24
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	0f1b      	lsrs	r3, r3, #28
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	019a      	lsls	r2, r3, #6
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	071b      	lsls	r3, r3, #28
 8004040:	4925      	ldr	r1, [pc, #148]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	019a      	lsls	r2, r3, #6
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	071b      	lsls	r3, r3, #28
 8004070:	4919      	ldr	r1, [pc, #100]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004078:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800407e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004084:	f7fc ffb8 	bl	8000ff8 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800408c:	f7fc ffb4 	bl	8000ff8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0d7      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f040 80cd 	bne.w	800424c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fc ff9b 	bl	8000ff8 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c6:	f7fc ff97 	bl	8000ff8 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	; 0x64
 80040d2:	d903      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ba      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80040d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040dc:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d0ed      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02e      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d12a      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	0f1b      	lsrs	r3, r3, #28
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	019a      	lsls	r2, r3, #6
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	4944      	ldr	r1, [pc, #272]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004154:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	493d      	ldr	r1, [pc, #244]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d022      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417c:	d11d      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	0f1b      	lsrs	r3, r3, #28
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	019a      	lsls	r2, r3, #6
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	071b      	lsls	r3, r3, #28
 80041b2:	4929      	ldr	r1, [pc, #164]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	0e1b      	lsrs	r3, r3, #24
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	0c1b      	lsrs	r3, r3, #16
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	019a      	lsls	r2, r3, #6
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	071b      	lsls	r3, r3, #28
 80041fa:	4917      	ldr	r1, [pc, #92]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4911      	ldr	r1, [pc, #68]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fc fee8 	bl	8000ff8 <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800422c:	f7fc fee4 	bl	8000ff8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e007      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424a:	d1ef      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e084      	b.n	8004378 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f004 ff0f 	bl	80090ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ae:	d902      	bls.n	80042b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e002      	b.n	80042bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042c4:	d007      	beq.n	80042d6 <HAL_SPI_Init+0x7a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e6:	d903      	bls.n	80042f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
 80042ee:	e002      	b.n	80042f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	ea42 0103 	orr.w	r1, r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0204 	and.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800438e:	2301      	movs	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0x26>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e1fb      	b.n	800479e <HAL_SPI_TransmitReceive+0x41e>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ae:	f7fc fe23 	bl	8000ff8 <HAL_GetTick>
 80043b2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ca:	7efb      	ldrb	r3, [r7, #27]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d00e      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x6e>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d6:	d106      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x66>
 80043e0:	7efb      	ldrb	r3, [r7, #27]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d003      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043ec:	e1cd      	b.n	800478a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x80>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x80>
 80043fa:	887b      	ldrh	r3, [r7, #2]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004406:	e1c0      	b.n	800478a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b04      	cmp	r3, #4
 8004412:	d003      	beq.n	800441c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2205      	movs	r2, #5
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	887a      	ldrh	r2, [r7, #2]
 8004442:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800445e:	d802      	bhi.n	8004466 <HAL_SPI_TransmitReceive+0xe6>
 8004460:	8a3b      	ldrh	r3, [r7, #16]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d908      	bls.n	8004478 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e007      	b.n	8004488 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004486:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d007      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ae:	d97c      	bls.n	80045aa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_TransmitReceive+0x13e>
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d169      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e2:	e056      	b.n	8004592 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d11b      	bne.n	800452a <HAL_SPI_TransmitReceive+0x1aa>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_SPI_TransmitReceive+0x1aa>
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d113      	bne.n	800452a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	881a      	ldrh	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d11c      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x1f2>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	b292      	uxth	r2, r2
 8004550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	1c9a      	adds	r2, r3, #2
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800456e:	2301      	movs	r3, #1
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004572:	f7fc fd41 	bl	8000ff8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	429a      	cmp	r2, r3
 8004580:	d807      	bhi.n	8004592 <HAL_SPI_TransmitReceive+0x212>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d003      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004590:	e0fb      	b.n	800478a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1a3      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x164>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d19d      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x164>
 80045a8:	e0df      	b.n	800476a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x23a>
 80045b2:	8a7b      	ldrh	r3, [r7, #18]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 80cb 	bne.w	8004750 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d912      	bls.n	80045ea <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b02      	subs	r3, #2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e8:	e0b2      	b.n	8004750 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004610:	e09e      	b.n	8004750 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d134      	bne.n	800468a <HAL_SPI_TransmitReceive+0x30a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d02f      	beq.n	800468a <HAL_SPI_TransmitReceive+0x30a>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b01      	cmp	r3, #1
 800462e:	d12c      	bne.n	800468a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d912      	bls.n	8004660 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b02      	subs	r3, #2
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800465e:	e012      	b.n	8004686 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	7812      	ldrb	r2, [r2, #0]
 800466c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d148      	bne.n	800472a <HAL_SPI_TransmitReceive+0x3aa>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d042      	beq.n	800472a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d923      	bls.n	80046f8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	b292      	uxth	r2, r2
 80046bc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b02      	subs	r3, #2
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d81f      	bhi.n	8004726 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	e016      	b.n	8004726 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f103 020c 	add.w	r2, r3, #12
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004726:	2301      	movs	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800472a:	f7fc fc65 	bl	8000ff8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_TransmitReceive+0x3c2>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x3c8>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800474e:	e01c      	b.n	800478a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	f47f af5b 	bne.w	8004612 <HAL_SPI_TransmitReceive+0x292>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af54 	bne.w	8004612 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fcda 	bl	8005128 <SPI_EndRxTxTransaction>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	661a      	str	r2, [r3, #96]	; 0x60
 8004786:	e000      	b.n	800478a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004788:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800479a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e16c      	b.n	8004aa2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047d6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80047de:	7dbb      	ldrb	r3, [r7, #22]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d00d      	beq.n	8004800 <HAL_SPI_TransmitReceive_DMA+0x58>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d106      	bne.n	80047fa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_TransmitReceive_DMA+0x52>
 80047f4:	7dbb      	ldrb	r3, [r7, #22]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d002      	beq.n	8004800 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
 80047fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047fe:	e14b      	b.n	8004a98 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004816:	e13f      	b.n	8004a98 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b04      	cmp	r3, #4
 8004822:	d003      	beq.n	800482c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2205      	movs	r2, #5
 8004828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	887a      	ldrh	r2, [r7, #2]
 800484e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	887a      	ldrh	r2, [r7, #2]
 8004856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004874:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800487e:	d908      	bls.n	8004892 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	e06f      	b.n	8004972 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048a0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ac:	d126      	bne.n	80048fc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d8:	e010      	b.n	80048fc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004906:	d134      	bne.n	8004972 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004916:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800491e:	b29b      	uxth	r3, r3
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d111      	bne.n	800494c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004936:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493e:	b29b      	uxth	r3, r3
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800494a:	e012      	b.n	8004972 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004962:	b29b      	uxth	r3, r3
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b04      	cmp	r3, #4
 800497c:	d108      	bne.n	8004990 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c
 800498e:	e007      	b.n	80049a0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4a47      	ldr	r2, [pc, #284]	; (8004ab4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	4a45      	ldr	r2, [pc, #276]	; (8004abc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80049a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	2200      	movs	r2, #0
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	4619      	mov	r1, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	461a      	mov	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f7fd fd01 	bl	80023d0 <HAL_DMA_Start_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	f043 0210 	orr.w	r2, r3, #16
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80049ec:	e054      	b.n	8004a98 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	2200      	movs	r2, #0
 8004a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	4619      	mov	r1, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f7fd fccb 	bl	80023d0 <HAL_DMA_Start_IT>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004a58:	e01e      	b.n	8004a98 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d007      	beq.n	8004a78 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a76:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0220 	orr.w	r2, r2, #32
 8004a86:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0202 	orr.w	r2, r2, #2
 8004a96:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	08004e29 	.word	0x08004e29
 8004ab0:	08004d11 	.word	0x08004d11
 8004ab4:	08004e45 	.word	0x08004e45
 8004ab8:	08004d97 	.word	0x08004d97
 8004abc:	08004e61 	.word	0x08004e61

08004ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
    return;
 8004b02:	e0d8      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_SPI_IRQHandler+0x66>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
    return;
 8004b24:	e0c7      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10c      	bne.n	8004b4c <HAL_SPI_IRQHandler+0x8c>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_SPI_IRQHandler+0x8c>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80b5 	beq.w	8004cb6 <HAL_SPI_IRQHandler+0x1f6>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80ae 	beq.w	8004cb6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d023      	beq.n	8004bae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d011      	beq.n	8004b96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	e00b      	b.n	8004bae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
        return;
 8004bac:	e083      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbe:	f043 0201 	orr.w	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf4:	f043 0208 	orr.w	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d050      	beq.n	8004cb4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_SPI_IRQHandler+0x17e>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d034      	beq.n	8004ca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0203 	bic.w	r2, r2, #3
 8004c4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d011      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_SPI_IRQHandler+0x1fc>)
 8004c5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd fc84 	bl	8002570 <HAL_DMA_Abort_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <HAL_SPI_IRQHandler+0x1fc>)
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd fc6e 	bl	8002570 <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004ca6:	e003      	b.n	8004cb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f827 	bl	8004cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cae:	e000      	b.n	8004cb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004cb0:	bf00      	nop
    return;
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
  }
}
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08004ea1 	.word	0x08004ea1

08004cc0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d1e:	f7fc f96b 	bl	8000ff8 <HAL_GetTick>
 8004d22:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d02a      	beq.n	8004d8a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0220 	bic.w	r2, r2, #32
 8004d42:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0203 	bic.w	r2, r2, #3
 8004d52:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	2164      	movs	r1, #100	; 0x64
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f98d 	bl	8005078 <SPI_EndRxTransaction>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff ffba 	bl	8004cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d88:	e002      	b.n	8004d90 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff ff98 	bl	8004cc0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da4:	f7fc f928 	bl	8000ff8 <HAL_GetTick>
 8004da8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d030      	beq.n	8004e1c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0220 	bic.w	r2, r2, #32
 8004dc8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	2164      	movs	r1, #100	; 0x64
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f9aa 	bl	8005128 <SPI_EndRxTxTransaction>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0203 	bic.w	r2, r2, #3
 8004df4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff71 	bl	8004cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e1a:	e002      	b.n	8004e22 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f003 ffe5 	bl	8008dec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff4c 	bl	8004cd4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff48 	bl	8004ce8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0203 	bic.w	r2, r2, #3
 8004e7c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff ff32 	bl	8004cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ff1d 	bl	8004cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	e04c      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d048      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ee4:	f7fc f888 	bl	8000ff8 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d902      	bls.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f12:	d111      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	d004      	beq.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	d107      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f40:	d10f      	bne.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e00f      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1a3      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fac:	e057      	b.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fb4:	d106      	bne.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d103      	bne.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d048      	beq.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fcc:	f7fc f814 	bl	8000ff8 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d902      	bls.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d13d      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffa:	d111      	bne.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005004:	d004      	beq.n	8005010 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d107      	bne.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005028:	d10f      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e008      	b.n	8005070 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d19f      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508c:	d111      	bne.n	80050b2 <SPI_EndRxTransaction+0x3a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005096:	d004      	beq.n	80050a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a0:	d107      	bne.n	80050b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff04 	bl	8004eca <SPI_WaitFlagStateUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e023      	b.n	8005120 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e0:	d11d      	bne.n	800511e <SPI_EndRxTransaction+0xa6>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ea:	d004      	beq.n	80050f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f4:	d113      	bne.n	800511e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff ff4b 	bl	8004f9e <SPI_WaitFifoStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e000      	b.n	8005120 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff2c 	bl	8004f9e <SPI_WaitFifoStateUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e027      	b.n	80051ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff feaf 	bl	8004eca <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e014      	b.n	80051ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ff05 	bl	8004f9e <SPI_WaitFifoStateUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e000      	b.n	80051ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e01d      	b.n	8005202 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f005 f824 	bl	800a228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fc16 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <HAL_TIM_Base_Start_IT+0x50>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d00b      	beq.n	800524e <HAL_TIM_Base_Start_IT+0x42>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d007      	beq.n	800524e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	00010007 	.word	0x00010007

08005260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e01d      	b.n	80052ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f005 f886 	bl	800a398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f000 fbc0 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 ff42 	bl	8006154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a17      	ldr	r2, [pc, #92]	; (8005334 <HAL_TIM_PWM_Start+0x7c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_TIM_PWM_Start+0x2c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_TIM_PWM_Start+0x80>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x30>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_TIM_PWM_Start+0x32>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_TIM_PWM_Start+0x84>)
 8005306:	4013      	ands	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d00b      	beq.n	8005328 <HAL_TIM_PWM_Start+0x70>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d007      	beq.n	8005328 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fefe 	bl	8006154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_TIM_PWM_Stop+0xa8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIM_PWM_Stop+0x2c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a21      	ldr	r2, [pc, #132]	; (80053ec <HAL_TIM_PWM_Stop+0xac>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_TIM_PWM_Stop+0x30>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_Stop+0x32>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_TIM_PWM_Stop+0x66>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	f240 4344 	movw	r3, #1092	; 0x444
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_PWM_Stop+0x66>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_TIM_PWM_Stop+0x96>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	f240 4344 	movw	r3, #1092	; 0x444
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_PWM_Stop+0x96>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fad8 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 faca 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fadb 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 faae 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 faa0 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fab1 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa84 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa76 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa87 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa5a 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa4c 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa5d 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f003 fc90 	bl	8008e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fee4 	bl	8006368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d10e      	bne.n	80055ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d107      	bne.n	80055ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fed7 	bl	800637c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d10e      	bne.n	80055fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d107      	bne.n	80055fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa0b 	bl	8005a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b20      	cmp	r3, #32
 8005606:	d10e      	bne.n	8005626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d107      	bne.n	8005626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f06f 0220 	mvn.w	r2, #32
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fe97 	bl	8006354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005646:	2302      	movs	r3, #2
 8005648:	e105      	b.n	8005856 <HAL_TIM_PWM_ConfigChannel+0x226>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b14      	cmp	r3, #20
 800565e:	f200 80f0 	bhi.w	8005842 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005843 	.word	0x08005843
 8005670:	08005843 	.word	0x08005843
 8005674:	08005843 	.word	0x08005843
 8005678:	080056fd 	.word	0x080056fd
 800567c:	08005843 	.word	0x08005843
 8005680:	08005843 	.word	0x08005843
 8005684:	08005843 	.word	0x08005843
 8005688:	0800573f 	.word	0x0800573f
 800568c:	08005843 	.word	0x08005843
 8005690:	08005843 	.word	0x08005843
 8005694:	08005843 	.word	0x08005843
 8005698:	0800577f 	.word	0x0800577f
 800569c:	08005843 	.word	0x08005843
 80056a0:	08005843 	.word	0x08005843
 80056a4:	08005843 	.word	0x08005843
 80056a8:	080057c1 	.word	0x080057c1
 80056ac:	08005843 	.word	0x08005843
 80056b0:	08005843 	.word	0x08005843
 80056b4:	08005843 	.word	0x08005843
 80056b8:	08005801 	.word	0x08005801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fa4e 	bl	8005b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0208 	orr.w	r2, r2, #8
 80056d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0204 	bic.w	r2, r2, #4
 80056e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	619a      	str	r2, [r3, #24]
      break;
 80056fa:	e0a3      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 faa0 	bl	8005c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6999      	ldr	r1, [r3, #24]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	619a      	str	r2, [r3, #24]
      break;
 800573c:	e082      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 faf7 	bl	8005d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0208 	orr.w	r2, r2, #8
 8005758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0204 	bic.w	r2, r2, #4
 8005768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
      break;
 800577c:	e062      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fb4d 	bl	8005e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	021a      	lsls	r2, r3, #8
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	61da      	str	r2, [r3, #28]
      break;
 80057be:	e041      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fb84 	bl	8005ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057fe:	e021      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fbb6 	bl	8005f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005840:	e000      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005842:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop

08005860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e0a6      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x166>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4b4f      	ldr	r3, [pc, #316]	; (80059d0 <HAL_TIM_ConfigClockSource+0x170>)
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d067      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x120>
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d80b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x6c>
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d073      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x140>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d802      	bhi.n	80058c2 <HAL_TIM_ConfigClockSource+0x62>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d06f      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80058c0:	e078      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d06c      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x140>
 80058c6:	2b30      	cmp	r3, #48	; 0x30
 80058c8:	d06a      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058ca:	e073      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058cc:	2b70      	cmp	r3, #112	; 0x70
 80058ce:	d00d      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x8c>
 80058d0:	2b70      	cmp	r3, #112	; 0x70
 80058d2:	d804      	bhi.n	80058de <HAL_TIM_ConfigClockSource+0x7e>
 80058d4:	2b50      	cmp	r3, #80	; 0x50
 80058d6:	d033      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0xe0>
 80058d8:	2b60      	cmp	r3, #96	; 0x60
 80058da:	d041      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058dc:	e06a      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	d066      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x152>
 80058e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e8:	d017      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058ea:	e063      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f000 fc0a 	bl	8006114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800590e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e04c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f000 fbf3 	bl	8006114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593c:	609a      	str	r2, [r3, #8]
      break;
 800593e:	e039      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	461a      	mov	r2, r3
 800594e:	f000 fb67 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2150      	movs	r1, #80	; 0x50
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fbc0 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 800595e:	e029      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	461a      	mov	r2, r3
 800596e:	f000 fb86 	bl	800607e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2160      	movs	r1, #96	; 0x60
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fbb0 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 800597e:	e019      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	461a      	mov	r2, r3
 800598e:	f000 fb47 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2140      	movs	r1, #64	; 0x40
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fba0 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 800599e:	e009      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fb97 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80059b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	fffeff88 	.word	0xfffeff88

080059d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d027      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d023      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d017      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <TIM_Base_SetConfig+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <TIM_Base_SetConfig+0x130>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <TIM_Base_SetConfig+0x134>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a24      	ldr	r2, [pc, #144]	; (8005b5c <TIM_Base_SetConfig+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	615a      	str	r2, [r3, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40001800 	.word	0x40001800
 8005b5c:	40001c00 	.word	0x40001c00
 8005b60:	40002000 	.word	0x40002000

08005b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <TIM_OC1_SetConfig+0xd8>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0302 	bic.w	r3, r3, #2
 8005bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC1_SetConfig+0x64>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <TIM_OC1_SetConfig+0xe0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10c      	bne.n	8005be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0308 	bic.w	r3, r3, #8
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_OC1_SetConfig+0x8e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <TIM_OC1_SetConfig+0xe0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	fffeff8f 	.word	0xfffeff8f
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0210 	bic.w	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <TIM_OC2_SetConfig+0xe4>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0320 	bic.w	r3, r3, #32
 8005c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <TIM_OC2_SetConfig+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC2_SetConfig+0x68>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <TIM_OC2_SetConfig+0xec>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10d      	bne.n	8005ccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <TIM_OC2_SetConfig+0xe8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC2_SetConfig+0x94>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC2_SetConfig+0xec>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	feff8fff 	.word	0xfeff8fff
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <TIM_OC3_SetConfig+0xe0>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x66>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_OC3_SetConfig+0xe8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10d      	bne.n	8005dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC3_SetConfig+0x92>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC3_SetConfig+0xe8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d113      	bne.n	8005df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	fffeff8f 	.word	0xfffeff8f
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <TIM_OC4_SetConfig+0xa4>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <TIM_OC4_SetConfig+0xa8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <TIM_OC4_SetConfig+0xac>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	feff8fff 	.word	0xfeff8fff
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <TIM_OC5_SetConfig+0x98>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <TIM_OC5_SetConfig+0x9c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC5_SetConfig+0x5e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <TIM_OC5_SetConfig+0xa0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d109      	bne.n	8005f46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	fffeff8f 	.word	0xfffeff8f
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40010400 	.word	0x40010400

08005f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <TIM_OC6_SetConfig+0x9c>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <TIM_OC6_SetConfig+0xa0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC6_SetConfig+0x60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <TIM_OC6_SetConfig+0xa4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d109      	bne.n	8005fec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	feff8fff 	.word	0xfeff8fff
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2201      	movs	r2, #1
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	43db      	mvns	r3, r3
 8006176:	401a      	ands	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e045      	b.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400

08006258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e065      	b.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d115      	bne.n	800632e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	051b      	lsls	r3, r3, #20
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e040      	b.n	8006424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f004 fa56 	bl	800a864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2224      	movs	r2, #36	; 0x24
 80063bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa66 	bl	80068a0 <UART_SetConfig>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e022      	b.n	8006424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fcfe 	bl	8006de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fd85 	bl	8006f2c <UART_CheckIdleState>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643e:	2b20      	cmp	r3, #32
 8006440:	d164      	bne.n	800650c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_UART_Transmit_DMA+0x22>
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e05d      	b.n	800650e <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_UART_Transmit_DMA+0x34>
 800645c:	2302      	movs	r3, #2
 800645e:	e056      	b.n	800650e <HAL_UART_Transmit_DMA+0xe2>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	88fa      	ldrh	r2, [r7, #6]
 800647a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2221      	movs	r2, #33	; 0x21
 8006488:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648e:	2b00      	cmp	r3, #0
 8006490:	d02a      	beq.n	80064e8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006496:	4a20      	ldr	r2, [pc, #128]	; (8006518 <HAL_UART_Transmit_DMA+0xec>)
 8006498:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800649e:	4a1f      	ldr	r2, [pc, #124]	; (800651c <HAL_UART_Transmit_DMA+0xf0>)
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a6:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <HAL_UART_Transmit_DMA+0xf4>)
 80064a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ae:	2200      	movs	r2, #0
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ba:	4619      	mov	r1, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3328      	adds	r3, #40	; 0x28
 80064c2:	461a      	mov	r2, r3
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	f7fb ff83 	bl	80023d0 <HAL_DMA_Start_IT>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2210      	movs	r2, #16
 80064d4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e012      	b.n	800650e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2240      	movs	r2, #64	; 0x40
 80064ee:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006506:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	08007085 	.word	0x08007085
 800651c:	080070d5 	.word	0x080070d5
 8006520:	08007171 	.word	0x08007171

08006524 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006536:	2b20      	cmp	r3, #32
 8006538:	d16c      	bne.n	8006614 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_UART_Receive_DMA+0x22>
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e065      	b.n	8006616 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_UART_Receive_DMA+0x34>
 8006554:	2302      	movs	r3, #2
 8006556:	e05e      	b.n	8006616 <HAL_UART_Receive_DMA+0xf2>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2222      	movs	r2, #34	; 0x22
 8006578:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d02a      	beq.n	80065d8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_UART_Receive_DMA+0xfc>)
 8006588:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658e:	4a25      	ldr	r2, [pc, #148]	; (8006624 <HAL_UART_Receive_DMA+0x100>)
 8006590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006596:	4a24      	ldr	r2, [pc, #144]	; (8006628 <HAL_UART_Receive_DMA+0x104>)
 8006598:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800659e:	2200      	movs	r2, #0
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3324      	adds	r3, #36	; 0x24
 80065ac:	4619      	mov	r1, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	461a      	mov	r2, r3
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	f7fb ff0b 	bl	80023d0 <HAL_DMA_Start_IT>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2210      	movs	r2, #16
 80065c4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01e      	b.n	8006616 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ee:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800660e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	080070f1 	.word	0x080070f1
 8006624:	08007155 	.word	0x08007155
 8006628:	08007171 	.word	0x08007171

0800662c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d113      	bne.n	8006682 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00e      	beq.n	8006682 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80eb 	beq.w	800684e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
      }
      return;
 8006680:	e0e5      	b.n	800684e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80c0 	beq.w	800680a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80b5 	beq.w	800680a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <HAL_UART_IRQHandler+0x9c>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00e      	beq.n	80066f0 <HAL_UART_IRQHandler+0xc4>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2202      	movs	r2, #2
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e8:	f043 0204 	orr.w	r2, r3, #4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00e      	beq.n	8006718 <HAL_UART_IRQHandler+0xec>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2204      	movs	r2, #4
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006710:	f043 0202 	orr.w	r2, r3, #2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d013      	beq.n	800674a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2208      	movs	r2, #8
 800673c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d07f      	beq.n	8006852 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d007      	beq.n	8006776 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800677a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d004      	beq.n	8006794 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006790:	2b00      	cmp	r3, #0
 8006792:	d031      	beq.n	80067f8 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc55 	bl	8007044 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d123      	bne.n	80067f0 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c4:	4a26      	ldr	r2, [pc, #152]	; (8006860 <HAL_UART_IRQHandler+0x234>)
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fb fecf 	bl	8002570 <HAL_DMA_Abort_IT>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d016      	beq.n	8006806 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e6:	e00e      	b.n	8006806 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f84f 	bl	800688c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	e00a      	b.n	8006806 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f84b 	bl	800688c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f6:	e006      	b.n	8006806 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f847 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006804:	e025      	b.n	8006852 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006806:	bf00      	nop
    return;
 8006808:	e023      	b.n	8006852 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	2b00      	cmp	r3, #0
 8006824:	d017      	beq.n	8006856 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
    }
    return;
 800682e:	e012      	b.n	8006856 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <HAL_UART_IRQHandler+0x22c>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fce5 	bl	8007214 <UART_EndTransmit_IT>
    return;
 800684a:	bf00      	nop
 800684c:	e004      	b.n	8006858 <HAL_UART_IRQHandler+0x22c>
      return;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <HAL_UART_IRQHandler+0x22c>
    return;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <HAL_UART_IRQHandler+0x22c>
    return;
 8006856:	bf00      	nop
  }

}
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	080071e9 	.word	0x080071e9

08006864 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4bb1      	ldr	r3, [pc, #708]	; (8006b94 <UART_SetConfig+0x2f4>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6939      	ldr	r1, [r7, #16]
 80068d8:	430b      	orrs	r3, r1
 80068da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a9f      	ldr	r2, [pc, #636]	; (8006b98 <UART_SetConfig+0x2f8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d121      	bne.n	8006964 <UART_SetConfig+0xc4>
 8006920:	4b9e      	ldr	r3, [pc, #632]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d816      	bhi.n	800695c <UART_SetConfig+0xbc>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x94>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006945 	.word	0x08006945
 8006938:	08006951 	.word	0x08006951
 800693c:	0800694b 	.word	0x0800694b
 8006940:	08006957 	.word	0x08006957
 8006944:	2301      	movs	r3, #1
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e151      	b.n	8006bee <UART_SetConfig+0x34e>
 800694a:	2302      	movs	r3, #2
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e14e      	b.n	8006bee <UART_SetConfig+0x34e>
 8006950:	2304      	movs	r3, #4
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e14b      	b.n	8006bee <UART_SetConfig+0x34e>
 8006956:	2308      	movs	r3, #8
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e148      	b.n	8006bee <UART_SetConfig+0x34e>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	bf00      	nop
 8006962:	e144      	b.n	8006bee <UART_SetConfig+0x34e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a8d      	ldr	r2, [pc, #564]	; (8006ba0 <UART_SetConfig+0x300>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d134      	bne.n	80069d8 <UART_SetConfig+0x138>
 800696e:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	f003 030c 	and.w	r3, r3, #12
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d829      	bhi.n	80069d0 <UART_SetConfig+0x130>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <UART_SetConfig+0xe4>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069d1 	.word	0x080069d1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069d1 	.word	0x080069d1
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069d1 	.word	0x080069d1
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069d1 	.word	0x080069d1
 80069a4:	080069bf 	.word	0x080069bf
 80069a8:	080069d1 	.word	0x080069d1
 80069ac:	080069d1 	.word	0x080069d1
 80069b0:	080069d1 	.word	0x080069d1
 80069b4:	080069cb 	.word	0x080069cb
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e117      	b.n	8006bee <UART_SetConfig+0x34e>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e114      	b.n	8006bee <UART_SetConfig+0x34e>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e111      	b.n	8006bee <UART_SetConfig+0x34e>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e10e      	b.n	8006bee <UART_SetConfig+0x34e>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	bf00      	nop
 80069d6:	e10a      	b.n	8006bee <UART_SetConfig+0x34e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <UART_SetConfig+0x304>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d120      	bne.n	8006a24 <UART_SetConfig+0x184>
 80069e2:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <UART_SetConfig+0x2fc>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d00f      	beq.n	8006a10 <UART_SetConfig+0x170>
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d802      	bhi.n	80069fa <UART_SetConfig+0x15a>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <UART_SetConfig+0x164>
 80069f8:	e010      	b.n	8006a1c <UART_SetConfig+0x17c>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d005      	beq.n	8006a0a <UART_SetConfig+0x16a>
 80069fe:	2b30      	cmp	r3, #48	; 0x30
 8006a00:	d009      	beq.n	8006a16 <UART_SetConfig+0x176>
 8006a02:	e00b      	b.n	8006a1c <UART_SetConfig+0x17c>
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0f1      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0ee      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a10:	2304      	movs	r3, #4
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e0eb      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a16:	2308      	movs	r3, #8
 8006a18:	77fb      	strb	r3, [r7, #31]
 8006a1a:	e0e8      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	bf00      	nop
 8006a22:	e0e4      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5f      	ldr	r2, [pc, #380]	; (8006ba8 <UART_SetConfig+0x308>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d120      	bne.n	8006a70 <UART_SetConfig+0x1d0>
 8006a2e:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d00f      	beq.n	8006a5c <UART_SetConfig+0x1bc>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d802      	bhi.n	8006a46 <UART_SetConfig+0x1a6>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <UART_SetConfig+0x1b0>
 8006a44:	e010      	b.n	8006a68 <UART_SetConfig+0x1c8>
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	d005      	beq.n	8006a56 <UART_SetConfig+0x1b6>
 8006a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a4c:	d009      	beq.n	8006a62 <UART_SetConfig+0x1c2>
 8006a4e:	e00b      	b.n	8006a68 <UART_SetConfig+0x1c8>
 8006a50:	2300      	movs	r3, #0
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e0cb      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e0c8      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e0c5      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a62:	2308      	movs	r3, #8
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e0c2      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	bf00      	nop
 8006a6e:	e0be      	b.n	8006bee <UART_SetConfig+0x34e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a4d      	ldr	r2, [pc, #308]	; (8006bac <UART_SetConfig+0x30c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d124      	bne.n	8006ac4 <UART_SetConfig+0x224>
 8006a7a:	4b48      	ldr	r3, [pc, #288]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	d012      	beq.n	8006ab0 <UART_SetConfig+0x210>
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	d802      	bhi.n	8006a96 <UART_SetConfig+0x1f6>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <UART_SetConfig+0x204>
 8006a94:	e012      	b.n	8006abc <UART_SetConfig+0x21c>
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9a:	d006      	beq.n	8006aaa <UART_SetConfig+0x20a>
 8006a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa0:	d009      	beq.n	8006ab6 <UART_SetConfig+0x216>
 8006aa2:	e00b      	b.n	8006abc <UART_SetConfig+0x21c>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e0a1      	b.n	8006bee <UART_SetConfig+0x34e>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e09e      	b.n	8006bee <UART_SetConfig+0x34e>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e09b      	b.n	8006bee <UART_SetConfig+0x34e>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e098      	b.n	8006bee <UART_SetConfig+0x34e>
 8006abc:	2310      	movs	r3, #16
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	bf00      	nop
 8006ac2:	e094      	b.n	8006bee <UART_SetConfig+0x34e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <UART_SetConfig+0x310>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d124      	bne.n	8006b18 <UART_SetConfig+0x278>
 8006ace:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d012      	beq.n	8006b04 <UART_SetConfig+0x264>
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d802      	bhi.n	8006aea <UART_SetConfig+0x24a>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <UART_SetConfig+0x258>
 8006ae8:	e012      	b.n	8006b10 <UART_SetConfig+0x270>
 8006aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aee:	d006      	beq.n	8006afe <UART_SetConfig+0x25e>
 8006af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af4:	d009      	beq.n	8006b0a <UART_SetConfig+0x26a>
 8006af6:	e00b      	b.n	8006b10 <UART_SetConfig+0x270>
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e077      	b.n	8006bee <UART_SetConfig+0x34e>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e074      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e071      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e06e      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	bf00      	nop
 8006b16:	e06a      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <UART_SetConfig+0x314>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d124      	bne.n	8006b6c <UART_SetConfig+0x2cc>
 8006b22:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b30:	d012      	beq.n	8006b58 <UART_SetConfig+0x2b8>
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d802      	bhi.n	8006b3e <UART_SetConfig+0x29e>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <UART_SetConfig+0x2ac>
 8006b3c:	e012      	b.n	8006b64 <UART_SetConfig+0x2c4>
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b42:	d006      	beq.n	8006b52 <UART_SetConfig+0x2b2>
 8006b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b48:	d009      	beq.n	8006b5e <UART_SetConfig+0x2be>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x2c4>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e04d      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b52:	2302      	movs	r3, #2
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e04a      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e047      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e044      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	bf00      	nop
 8006b6a:	e040      	b.n	8006bee <UART_SetConfig+0x34e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <UART_SetConfig+0x318>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d139      	bne.n	8006bea <UART_SetConfig+0x34a>
 8006b76:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <UART_SetConfig+0x2fc>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b84:	d027      	beq.n	8006bd6 <UART_SetConfig+0x336>
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8a:	d817      	bhi.n	8006bbc <UART_SetConfig+0x31c>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01c      	beq.n	8006bca <UART_SetConfig+0x32a>
 8006b90:	e027      	b.n	8006be2 <UART_SetConfig+0x342>
 8006b92:	bf00      	nop
 8006b94:	efff69f3 	.word	0xefff69f3
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	40005000 	.word	0x40005000
 8006bb0:	40011400 	.word	0x40011400
 8006bb4:	40007800 	.word	0x40007800
 8006bb8:	40007c00 	.word	0x40007c00
 8006bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc0:	d006      	beq.n	8006bd0 <UART_SetConfig+0x330>
 8006bc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bc6:	d009      	beq.n	8006bdc <UART_SetConfig+0x33c>
 8006bc8:	e00b      	b.n	8006be2 <UART_SetConfig+0x342>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e00e      	b.n	8006bee <UART_SetConfig+0x34e>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e00b      	b.n	8006bee <UART_SetConfig+0x34e>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e008      	b.n	8006bee <UART_SetConfig+0x34e>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e005      	b.n	8006bee <UART_SetConfig+0x34e>
 8006be2:	2310      	movs	r3, #16
 8006be4:	77fb      	strb	r3, [r7, #31]
 8006be6:	bf00      	nop
 8006be8:	e001      	b.n	8006bee <UART_SetConfig+0x34e>
 8006bea:	2310      	movs	r3, #16
 8006bec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf6:	d17c      	bne.n	8006cf2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006bf8:	7ffb      	ldrb	r3, [r7, #31]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d859      	bhi.n	8006cb2 <UART_SetConfig+0x412>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x364>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006cb3 	.word	0x08006cb3
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006cb3 	.word	0x08006cb3
 8006c1c:	08006cb3 	.word	0x08006cb3
 8006c20:	08006cb3 	.word	0x08006cb3
 8006c24:	08006c9b 	.word	0x08006c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c28:	f7fc fe98 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	005a      	lsls	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	61bb      	str	r3, [r7, #24]
        break;
 8006c44:	e038      	b.n	8006cb8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c46:	f7fc fe9d 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	005a      	lsls	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	61bb      	str	r3, [r7, #24]
        break;
 8006c62:	e029      	b.n	8006cb8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	085a      	lsrs	r2, r3, #1
 8006c6a:	4b5d      	ldr	r3, [pc, #372]	; (8006de0 <UART_SetConfig+0x540>)
 8006c6c:	4413      	add	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	61bb      	str	r3, [r7, #24]
        break;
 8006c7a:	e01d      	b.n	8006cb8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c7c:	f7fc fdb0 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8006c80:	4603      	mov	r3, r0
 8006c82:	005a      	lsls	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	441a      	add	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	61bb      	str	r3, [r7, #24]
        break;
 8006c98:	e00e      	b.n	8006cb8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	61bb      	str	r3, [r7, #24]
        break;
 8006cb0:	e002      	b.n	8006cb8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
        break;
 8006cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b0f      	cmp	r3, #15
 8006cbc:	d916      	bls.n	8006cec <UART_SetConfig+0x44c>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc4:	d212      	bcs.n	8006cec <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f023 030f 	bic.w	r3, r3, #15
 8006cce:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	89fb      	ldrh	r3, [r7, #14]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	89fa      	ldrh	r2, [r7, #14]
 8006ce8:	60da      	str	r2, [r3, #12]
 8006cea:	e06e      	b.n	8006dca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
 8006cf0:	e06b      	b.n	8006dca <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006cf2:	7ffb      	ldrb	r3, [r7, #31]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d857      	bhi.n	8006da8 <UART_SetConfig+0x508>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x460>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006da9 	.word	0x08006da9
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006da9 	.word	0x08006da9
 8006d18:	08006da9 	.word	0x08006da9
 8006d1c:	08006da9 	.word	0x08006da9
 8006d20:	08006d91 	.word	0x08006d91
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006d24:	f7fc fe1a 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	61bb      	str	r3, [r7, #24]
        break;
 8006d3e:	e036      	b.n	8006dae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006d40:	f7fc fe20 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	61bb      	str	r3, [r7, #24]
        break;
 8006d5a:	e028      	b.n	8006dae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	085a      	lsrs	r2, r3, #1
 8006d62:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <UART_SetConfig+0x544>)
 8006d64:	4413      	add	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	61bb      	str	r3, [r7, #24]
        break;
 8006d72:	e01c      	b.n	8006dae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d74:	f7fc fd34 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	441a      	add	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	61bb      	str	r3, [r7, #24]
        break;
 8006d8e:	e00e      	b.n	8006dae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	61bb      	str	r3, [r7, #24]
        break;
 8006da6:	e002      	b.n	8006dae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
        break;
 8006dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d908      	bls.n	8006dc6 <UART_SetConfig+0x526>
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d204      	bcs.n	8006dc6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	e001      	b.n	8006dca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3720      	adds	r7, #32
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	01e84800 	.word	0x01e84800
 8006de4:	00f42400 	.word	0x00f42400

08006de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01a      	beq.n	8006efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee6:	d10a      	bne.n	8006efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f3a:	f7fa f85d 	bl	8000ff8 <HAL_GetTick>
 8006f3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d10e      	bne.n	8006f6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f814 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e00a      	b.n	8006f82 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9a:	e02a      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	d026      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa4:	f7fa f828 	bl	8000ff8 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d302      	bcc.n	8006fba <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11b      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d0c5      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007030:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800705a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800709a:	d014      	beq.n	80070c6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070c2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070c4:	e002      	b.n	80070cc <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f006 fcf6 	bl	800dab8 <HAL_UART_TxCpltCallback>
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fbbe 	bl	8006864 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007106:	d01e      	beq.n	8007146 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f006 fcac 	bl	800daa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fb88 	bl	8006878 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d109      	bne.n	80071ac <UART_DMAError+0x3c>
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b21      	cmp	r3, #33	; 0x21
 800719c:	d106      	bne.n	80071ac <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff ff37 	bl	800701a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d109      	bne.n	80071ce <UART_DMAError+0x5e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b22      	cmp	r3, #34	; 0x22
 80071be:	d106      	bne.n	80071ce <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80071c8:	6978      	ldr	r0, [r7, #20]
 80071ca:	f7ff ff3b 	bl	8007044 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d2:	f043 0210 	orr.w	r2, r3, #16
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071da:	6978      	ldr	r0, [r7, #20]
 80071dc:	f7ff fb56 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fb40 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800722a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f006 fc3d 	bl	800dab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	4603      	mov	r3, r0
 800724e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007258:	2b84      	cmp	r3, #132	; 0x84
 800725a:	d005      	beq.n	8007268 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800725c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	3303      	adds	r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800727a:	f000 faad 	bl	80077d8 <vTaskStartScheduler>
  
  return osOK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}

08007284 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007286:	b089      	sub	sp, #36	; 0x24
 8007288:	af04      	add	r7, sp, #16
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685c      	ldr	r4, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681d      	ldr	r5, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691e      	ldr	r6, [r3, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff ffd0 	bl	8007246 <makeFreeRtosPriority>
 80072a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072b0:	9202      	str	r2, [sp, #8]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	9100      	str	r1, [sp, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	4632      	mov	r2, r6
 80072ba:	4629      	mov	r1, r5
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 f8c5 	bl	800744c <xTaskCreateStatic>
 80072c2:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072c4:	68fb      	ldr	r3, [r7, #12]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072ce <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80072d2:	f000 fd6d 	bl	8007db0 <xTaskGetSchedulerState>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d001      	beq.n	80072e0 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80072dc:	f000 ff84 	bl	80081e8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 0208 	add.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f04f 32ff 	mov.w	r2, #4294967295
 80072fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f103 0208 	add.w	r2, r3, #8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f103 0208 	add.w	r2, r3, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d103      	bne.n	80073a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e00c      	b.n	80073c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3308      	adds	r3, #8
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e002      	b.n	80073b4 <vListInsert+0x2e>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d2f6      	bcs.n	80073ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
}
 80073ec:	bf00      	nop
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6852      	ldr	r2, [r2, #4]
 8007418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d103      	bne.n	800742c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08e      	sub	sp, #56	; 0x38
 8007450:	af04      	add	r7, sp, #16
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	e7fe      	b.n	8007476 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xTaskCreateStatic+0x4a>
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	b672      	cpsid	i
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	b662      	cpsie	i
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e7fe      	b.n	8007494 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007496:	2354      	movs	r3, #84	; 0x54
 8007498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b54      	cmp	r3, #84	; 0x54
 800749e:	d00b      	beq.n	80074b8 <xTaskCreateStatic+0x6c>
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e7fe      	b.n	80074b6 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01a      	beq.n	80074f4 <xTaskCreateStatic+0xa8>
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d017      	beq.n	80074f4 <xTaskCreateStatic+0xa8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ce:	2300      	movs	r3, #0
 80074d0:	9303      	str	r3, [sp, #12]
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	9302      	str	r3, [sp, #8]
 80074d6:	f107 0314 	add.w	r3, r7, #20
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f80b 	bl	8007502 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ee:	f000 f889 	bl	8007604 <prvAddNewTaskToReadyList>
 80074f2:	e001      	b.n	80074f8 <xTaskCreateStatic+0xac>
		}
		else
		{
			xReturn = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074f8:	697b      	ldr	r3, [r7, #20]
	}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b088      	sub	sp, #32
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800751a:	440b      	add	r3, r1
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	f023 0307 	bic.w	r3, r3, #7
 8007528:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <prvInitialiseNewTask+0x4a>
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	b672      	cpsid	i
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	b662      	cpsie	i
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e7fe      	b.n	800754a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e012      	b.n	8007578 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	7819      	ldrb	r1, [r3, #0]
 800755a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	3334      	adds	r3, #52	; 0x34
 8007562:	460a      	mov	r2, r1
 8007564:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3301      	adds	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d9e9      	bls.n	8007552 <prvInitialiseNewTask+0x50>
 800757e:	e000      	b.n	8007582 <prvInitialiseNewTask+0x80>
		{
			break;
 8007580:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	2b06      	cmp	r3, #6
 800758e:	d901      	bls.n	8007594 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007590:	2306      	movs	r3, #6
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007598:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	2200      	movs	r2, #0
 80075a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	3304      	adds	r3, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff feba 	bl	8007324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	3318      	adds	r3, #24
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff feb5 	bl	8007324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f1c3 0207 	rsb	r2, r3, #7
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	2200      	movs	r2, #0
 80075d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	68f9      	ldr	r1, [r7, #12]
 80075e2:	69b8      	ldr	r0, [r7, #24]
 80075e4:	f000 fc68 	bl	8007eb8 <pxPortInitialiseStack>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075fa:	bf00      	nop
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800760c:	f000 fd5c 	bl	80080c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007610:	4b2a      	ldr	r3, [pc, #168]	; (80076bc <prvAddNewTaskToReadyList+0xb8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3301      	adds	r3, #1
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <prvAddNewTaskToReadyList+0xb8>)
 8007618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800761a:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <prvAddNewTaskToReadyList+0xbc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007622:	4a27      	ldr	r2, [pc, #156]	; (80076c0 <prvAddNewTaskToReadyList+0xbc>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007628:	4b24      	ldr	r3, [pc, #144]	; (80076bc <prvAddNewTaskToReadyList+0xb8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d110      	bne.n	8007652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007630:	f000 fb22 	bl	8007c78 <prvInitialiseTaskLists>
 8007634:	e00d      	b.n	8007652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007636:	4b23      	ldr	r3, [pc, #140]	; (80076c4 <prvAddNewTaskToReadyList+0xc0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <prvAddNewTaskToReadyList+0xbc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	429a      	cmp	r2, r3
 800764a:	d802      	bhi.n	8007652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800764c:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <prvAddNewTaskToReadyList+0xbc>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007652:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <prvAddNewTaskToReadyList+0xc4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <prvAddNewTaskToReadyList+0xc4>)
 800765a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	2201      	movs	r2, #1
 8007662:	409a      	lsls	r2, r3
 8007664:	4b19      	ldr	r3, [pc, #100]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4313      	orrs	r3, r2
 800766a:	4a18      	ldr	r2, [pc, #96]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <prvAddNewTaskToReadyList+0xcc>)
 800767c:	441a      	add	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7ff fe5a 	bl	800733e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800768a:	f000 fd4f 	bl	800812c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800768e:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <prvAddNewTaskToReadyList+0xc0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddNewTaskToReadyList+0xbc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d207      	bcs.n	80076b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <prvAddNewTaskToReadyList+0xd0>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	2000065c 	.word	0x2000065c
 80076c0:	2000055c 	.word	0x2000055c
 80076c4:	20000668 	.word	0x20000668
 80076c8:	20000678 	.word	0x20000678
 80076cc:	20000664 	.word	0x20000664
 80076d0:	20000560 	.word	0x20000560
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <vTaskDelayUntil+0x2c>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	b672      	cpsid	i
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	b662      	cpsie	i
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e7fe      	b.n	8007702 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <vTaskDelayUntil+0x4a>
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	b672      	cpsid	i
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	b662      	cpsie	i
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	e7fe      	b.n	8007720 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007722:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <vTaskDelayUntil+0xf4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <vTaskDelayUntil+0x6a>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e7fe      	b.n	8007740 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8007742:	f000 f8ab 	bl	800789c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007746:	4b22      	ldr	r3, [pc, #136]	; (80077d0 <vTaskDelayUntil+0xf8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	4413      	add	r3, r2
 8007754:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a3a      	ldr	r2, [r7, #32]
 800775c:	429a      	cmp	r2, r3
 800775e:	d20b      	bcs.n	8007778 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	429a      	cmp	r2, r3
 8007768:	d211      	bcs.n	800778e <vTaskDelayUntil+0xb6>
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	429a      	cmp	r2, r3
 8007770:	d90d      	bls.n	800778e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
 8007776:	e00a      	b.n	800778e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	429a      	cmp	r2, r3
 8007780:	d303      	bcc.n	800778a <vTaskDelayUntil+0xb2>
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	429a      	cmp	r2, r3
 8007788:	d901      	bls.n	800778e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d006      	beq.n	80077a8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb22 	bl	8007dec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077a8:	f000 f886 	bl	80078b8 <xTaskResumeAll>
 80077ac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80077b4:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <vTaskDelayUntil+0xfc>)
 80077b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077c4:	bf00      	nop
 80077c6:	3728      	adds	r7, #40	; 0x28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000684 	.word	0x20000684
 80077d0:	20000660 	.word	0x20000660
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077e6:	463a      	mov	r2, r7
 80077e8:	1d39      	adds	r1, r7, #4
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 ff86 	bl	8008700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2300      	movs	r3, #0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	460a      	mov	r2, r1
 8007806:	491f      	ldr	r1, [pc, #124]	; (8007884 <vTaskStartScheduler+0xac>)
 8007808:	481f      	ldr	r0, [pc, #124]	; (8007888 <vTaskStartScheduler+0xb0>)
 800780a:	f7ff fe1f 	bl	800744c <xTaskCreateStatic>
 800780e:	4602      	mov	r2, r0
 8007810:	4b1e      	ldr	r3, [pc, #120]	; (800788c <vTaskStartScheduler+0xb4>)
 8007812:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007814:	4b1d      	ldr	r3, [pc, #116]	; (800788c <vTaskStartScheduler+0xb4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800781c:	2301      	movs	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e001      	b.n	8007826 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d117      	bne.n	800785c <vTaskStartScheduler+0x84>
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	b672      	cpsid	i
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	b662      	cpsie	i
 8007840:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <vTaskStartScheduler+0xb8>)
 8007844:	f04f 32ff 	mov.w	r2, #4294967295
 8007848:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vTaskStartScheduler+0xbc>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <vTaskStartScheduler+0xc0>)
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007856:	f000 fbbb 	bl	8007fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800785a:	e00f      	b.n	800787c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d10b      	bne.n	800787c <vTaskStartScheduler+0xa4>
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e7fe      	b.n	800787a <vTaskStartScheduler+0xa2>
}
 800787c:	bf00      	nop
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	080125c0 	.word	0x080125c0
 8007888:	08007c49 	.word	0x08007c49
 800788c:	20000680 	.word	0x20000680
 8007890:	2000067c 	.word	0x2000067c
 8007894:	20000668 	.word	0x20000668
 8007898:	20000660 	.word	0x20000660

0800789c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <vTaskSuspendAll+0x18>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	4a03      	ldr	r2, [pc, #12]	; (80078b4 <vTaskSuspendAll+0x18>)
 80078a8:	6013      	str	r3, [r2, #0]
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	20000684 	.word	0x20000684

080078b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078c6:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <xTaskResumeAll+0x118>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <xTaskResumeAll+0x2e>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	b672      	cpsid	i
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	b662      	cpsie	i
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	e7fe      	b.n	80078e4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078e6:	f000 fbef 	bl	80080c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078ea:	4b39      	ldr	r3, [pc, #228]	; (80079d0 <xTaskResumeAll+0x118>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	4a37      	ldr	r2, [pc, #220]	; (80079d0 <xTaskResumeAll+0x118>)
 80078f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f4:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <xTaskResumeAll+0x118>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d161      	bne.n	80079c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078fc:	4b35      	ldr	r3, [pc, #212]	; (80079d4 <xTaskResumeAll+0x11c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d05d      	beq.n	80079c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007904:	e02e      	b.n	8007964 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007906:	4b34      	ldr	r3, [pc, #208]	; (80079d8 <xTaskResumeAll+0x120>)
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3318      	adds	r3, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fd70 	bl	80073f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff fd6b 	bl	80073f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	2201      	movs	r2, #1
 8007928:	409a      	lsls	r2, r3
 800792a:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <xTaskResumeAll+0x124>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4313      	orrs	r3, r2
 8007930:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <xTaskResumeAll+0x124>)
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4a27      	ldr	r2, [pc, #156]	; (80079e0 <xTaskResumeAll+0x128>)
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7ff fcf7 	bl	800733e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4b23      	ldr	r3, [pc, #140]	; (80079e4 <xTaskResumeAll+0x12c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800795e:	4b22      	ldr	r3, [pc, #136]	; (80079e8 <xTaskResumeAll+0x130>)
 8007960:	2201      	movs	r2, #1
 8007962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007964:	4b1c      	ldr	r3, [pc, #112]	; (80079d8 <xTaskResumeAll+0x120>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1cc      	bne.n	8007906 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007972:	f000 f9f7 	bl	8007d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007976:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <xTaskResumeAll+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007982:	f000 f847 	bl	8007a14 <xTaskIncrementTick>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800798c:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <xTaskResumeAll+0x130>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3b01      	subs	r3, #1
 8007996:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f1      	bne.n	8007982 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <xTaskResumeAll+0x134>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079a4:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <xTaskResumeAll+0x130>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079b0:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <xTaskResumeAll+0x138>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c0:	f000 fbb4 	bl	800812c <vPortExitCritical>

	return xAlreadyYielded;
 80079c4:	68bb      	ldr	r3, [r7, #8]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000684 	.word	0x20000684
 80079d4:	2000065c 	.word	0x2000065c
 80079d8:	2000061c 	.word	0x2000061c
 80079dc:	20000664 	.word	0x20000664
 80079e0:	20000560 	.word	0x20000560
 80079e4:	2000055c 	.word	0x2000055c
 80079e8:	20000670 	.word	0x20000670
 80079ec:	2000066c 	.word	0x2000066c
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <xTaskGetTickCount+0x1c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a00:	687b      	ldr	r3, [r7, #4]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000660 	.word	0x20000660

08007a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1e:	4b51      	ldr	r3, [pc, #324]	; (8007b64 <xTaskIncrementTick+0x150>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f040 808e 	bne.w	8007b44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a28:	4b4f      	ldr	r3, [pc, #316]	; (8007b68 <xTaskIncrementTick+0x154>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a30:	4a4d      	ldr	r2, [pc, #308]	; (8007b68 <xTaskIncrementTick+0x154>)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d121      	bne.n	8007a80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a3c:	4b4b      	ldr	r3, [pc, #300]	; (8007b6c <xTaskIncrementTick+0x158>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <xTaskIncrementTick+0x4a>
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	b672      	cpsid	i
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	b662      	cpsie	i
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	e7fe      	b.n	8007a5c <xTaskIncrementTick+0x48>
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <xTaskIncrementTick+0x158>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <xTaskIncrementTick+0x15c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a40      	ldr	r2, [pc, #256]	; (8007b6c <xTaskIncrementTick+0x158>)
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <xTaskIncrementTick+0x15c>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <xTaskIncrementTick+0x160>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a3e      	ldr	r2, [pc, #248]	; (8007b74 <xTaskIncrementTick+0x160>)
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	f000 f972 	bl	8007d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a80:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <xTaskIncrementTick+0x164>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d34d      	bcc.n	8007b26 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a8a:	4b38      	ldr	r3, [pc, #224]	; (8007b6c <xTaskIncrementTick+0x158>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <xTaskIncrementTick+0x84>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <xTaskIncrementTick+0x86>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a9e:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <xTaskIncrementTick+0x164>)
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	601a      	str	r2, [r3, #0]
					break;
 8007aa6:	e03e      	b.n	8007b26 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007aa8:	4b30      	ldr	r3, [pc, #192]	; (8007b6c <xTaskIncrementTick+0x158>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d203      	bcs.n	8007ac8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ac0:	4a2d      	ldr	r2, [pc, #180]	; (8007b78 <xTaskIncrementTick+0x164>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6013      	str	r3, [r2, #0]
						break;
 8007ac6:	e02e      	b.n	8007b26 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff fc93 	bl	80073f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3318      	adds	r3, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fc8a 	bl	80073f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	2201      	movs	r2, #1
 8007aea:	409a      	lsls	r2, r3
 8007aec:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <xTaskIncrementTick+0x168>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <xTaskIncrementTick+0x168>)
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <xTaskIncrementTick+0x16c>)
 8007b04:	441a      	add	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f7ff fc16 	bl	800733e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <xTaskIncrementTick+0x170>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3b4      	bcc.n	8007a8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b24:	e7b1      	b.n	8007a8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b26:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <xTaskIncrementTick+0x170>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4914      	ldr	r1, [pc, #80]	; (8007b80 <xTaskIncrementTick+0x16c>)
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d907      	bls.n	8007b4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e004      	b.n	8007b4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <xTaskIncrementTick+0x174>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	4a0f      	ldr	r2, [pc, #60]	; (8007b88 <xTaskIncrementTick+0x174>)
 8007b4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <xTaskIncrementTick+0x178>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b5a:	697b      	ldr	r3, [r7, #20]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000684 	.word	0x20000684
 8007b68:	20000660 	.word	0x20000660
 8007b6c:	20000614 	.word	0x20000614
 8007b70:	20000618 	.word	0x20000618
 8007b74:	20000674 	.word	0x20000674
 8007b78:	2000067c 	.word	0x2000067c
 8007b7c:	20000664 	.word	0x20000664
 8007b80:	20000560 	.word	0x20000560
 8007b84:	2000055c 	.word	0x2000055c
 8007b88:	2000066c 	.word	0x2000066c
 8007b8c:	20000670 	.word	0x20000670

08007b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <vTaskSwitchContext+0xa4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b9e:	4b26      	ldr	r3, [pc, #152]	; (8007c38 <vTaskSwitchContext+0xa8>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ba4:	e040      	b.n	8007c28 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <vTaskSwitchContext+0xa8>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bac:	4b23      	ldr	r3, [pc, #140]	; (8007c3c <vTaskSwitchContext+0xac>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	fab3 f383 	clz	r3, r3
 8007bb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	f1c3 031f 	rsb	r3, r3, #31
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	491f      	ldr	r1, [pc, #124]	; (8007c40 <vTaskSwitchContext+0xb0>)
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <vTaskSwitchContext+0x5e>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	b672      	cpsid	i
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	b662      	cpsie	i
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	e7fe      	b.n	8007bec <vTaskSwitchContext+0x5c>
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <vTaskSwitchContext+0xb0>)
 8007bfa:	4413      	add	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d104      	bne.n	8007c1e <vTaskSwitchContext+0x8e>
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4a07      	ldr	r2, [pc, #28]	; (8007c44 <vTaskSwitchContext+0xb4>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20000684 	.word	0x20000684
 8007c38:	20000670 	.word	0x20000670
 8007c3c:	20000664 	.word	0x20000664
 8007c40:	20000560 	.word	0x20000560
 8007c44:	2000055c 	.word	0x2000055c

08007c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c50:	f000 f852 	bl	8007cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <prvIdleTask+0x28>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d9f9      	bls.n	8007c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <prvIdleTask+0x2c>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c6c:	e7f0      	b.n	8007c50 <prvIdleTask+0x8>
 8007c6e:	bf00      	nop
 8007c70:	20000560 	.word	0x20000560
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c7e:	2300      	movs	r3, #0
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	e00c      	b.n	8007c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a12      	ldr	r2, [pc, #72]	; (8007cd8 <prvInitialiseTaskLists+0x60>)
 8007c90:	4413      	add	r3, r2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fb26 	bl	80072e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	607b      	str	r3, [r7, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b06      	cmp	r3, #6
 8007ca2:	d9ef      	bls.n	8007c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ca4:	480d      	ldr	r0, [pc, #52]	; (8007cdc <prvInitialiseTaskLists+0x64>)
 8007ca6:	f7ff fb1d 	bl	80072e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007caa:	480d      	ldr	r0, [pc, #52]	; (8007ce0 <prvInitialiseTaskLists+0x68>)
 8007cac:	f7ff fb1a 	bl	80072e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cb0:	480c      	ldr	r0, [pc, #48]	; (8007ce4 <prvInitialiseTaskLists+0x6c>)
 8007cb2:	f7ff fb17 	bl	80072e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cb6:	480c      	ldr	r0, [pc, #48]	; (8007ce8 <prvInitialiseTaskLists+0x70>)
 8007cb8:	f7ff fb14 	bl	80072e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cbc:	480b      	ldr	r0, [pc, #44]	; (8007cec <prvInitialiseTaskLists+0x74>)
 8007cbe:	f7ff fb11 	bl	80072e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <prvInitialiseTaskLists+0x78>)
 8007cc4:	4a05      	ldr	r2, [pc, #20]	; (8007cdc <prvInitialiseTaskLists+0x64>)
 8007cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <prvInitialiseTaskLists+0x7c>)
 8007cca:	4a05      	ldr	r2, [pc, #20]	; (8007ce0 <prvInitialiseTaskLists+0x68>)
 8007ccc:	601a      	str	r2, [r3, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000560 	.word	0x20000560
 8007cdc:	200005ec 	.word	0x200005ec
 8007ce0:	20000600 	.word	0x20000600
 8007ce4:	2000061c 	.word	0x2000061c
 8007ce8:	20000630 	.word	0x20000630
 8007cec:	20000648 	.word	0x20000648
 8007cf0:	20000614 	.word	0x20000614
 8007cf4:	20000618 	.word	0x20000618

08007cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cfe:	e019      	b.n	8007d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d00:	f000 f9e2 	bl	80080c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d04:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <prvCheckTasksWaitingTermination+0x4c>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fb71 	bl	80073f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <prvCheckTasksWaitingTermination+0x50>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <prvCheckTasksWaitingTermination+0x50>)
 8007d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <prvCheckTasksWaitingTermination+0x54>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <prvCheckTasksWaitingTermination+0x54>)
 8007d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d2a:	f000 f9ff 	bl	800812c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f80e 	bl	8007d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <prvCheckTasksWaitingTermination+0x54>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e1      	bne.n	8007d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000630 	.word	0x20000630
 8007d48:	2000065c 	.word	0x2000065c
 8007d4c:	20000644 	.word	0x20000644

08007d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <prvResetNextTaskUnblockTime+0x44>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <prvResetNextTaskUnblockTime+0x14>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <prvResetNextTaskUnblockTime+0x16>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <prvResetNextTaskUnblockTime+0x48>)
 8007d80:	f04f 32ff 	mov.w	r2, #4294967295
 8007d84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d86:	e008      	b.n	8007d9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <prvResetNextTaskUnblockTime+0x44>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	4a05      	ldr	r2, [pc, #20]	; (8007dac <prvResetNextTaskUnblockTime+0x48>)
 8007d98:	6013      	str	r3, [r2, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000614 	.word	0x20000614
 8007dac:	2000067c 	.word	0x2000067c

08007db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <xTaskGetSchedulerState+0x34>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	607b      	str	r3, [r7, #4]
 8007dc2:	e008      	b.n	8007dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dc4:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <xTaskGetSchedulerState+0x38>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	e001      	b.n	8007dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dd6:	687b      	ldr	r3, [r7, #4]
	}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	20000668 	.word	0x20000668
 8007de8:	20000684 	.word	0x20000684

08007dec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff faf8 	bl	80073f8 <uxListRemove>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007e0e:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	2201      	movs	r2, #1
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43da      	mvns	r2, r3
 8007e1c:	4b21      	ldr	r3, [pc, #132]	; (8007ea4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4013      	ands	r3, r2
 8007e22:	4a20      	ldr	r2, [pc, #128]	; (8007ea4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d10a      	bne.n	8007e44 <prvAddCurrentTaskToDelayedList+0x58>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d007      	beq.n	8007e44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e34:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	481a      	ldr	r0, [pc, #104]	; (8007ea8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e3e:	f7ff fa7e 	bl	800733e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e42:	e026      	b.n	8007e92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e4c:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d209      	bcs.n	8007e70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5c:	4b13      	ldr	r3, [pc, #76]	; (8007eac <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7ff fa8c 	bl	8007386 <vListInsert>
}
 8007e6e:	e010      	b.n	8007e92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f7ff fa82 	bl	8007386 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d202      	bcs.n	8007e92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e8c:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6013      	str	r3, [r2, #0]
}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000660 	.word	0x20000660
 8007ea0:	2000055c 	.word	0x2000055c
 8007ea4:	20000664 	.word	0x20000664
 8007ea8:	20000648 	.word	0x20000648
 8007eac:	20000618 	.word	0x20000618
 8007eb0:	20000614 	.word	0x20000614
 8007eb4:	2000067c 	.word	0x2000067c

08007eb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3b04      	subs	r3, #4
 8007ec8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ee8:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <pxPortInitialiseStack+0x64>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b14      	subs	r3, #20
 8007ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f06f 0202 	mvn.w	r2, #2
 8007f06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3b20      	subs	r3, #32
 8007f0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	08007f21 	.word	0x08007f21

08007f20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f2a:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <prvTaskExitError+0x58>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d00b      	beq.n	8007f4c <prvTaskExitError+0x2c>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	b672      	cpsid	i
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	b662      	cpsie	i
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e7fe      	b.n	8007f4a <prvTaskExitError+0x2a>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	b672      	cpsid	i
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	b662      	cpsie	i
 8007f60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f62:	bf00      	nop
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0fc      	beq.n	8007f64 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000004 	.word	0x20000004
 8007f7c:	00000000 	.word	0x00000000

08007f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <pxCurrentTCBConst2>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f380 8809 	msr	PSP, r0
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	4770      	bx	lr
 8007f9c:	f3af 8000 	nop.w

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	2000055c 	.word	0x2000055c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fa8:	4808      	ldr	r0, [pc, #32]	; (8007fcc <prvPortStartFirstTask+0x24>)
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	6800      	ldr	r0, [r0, #0]
 8007fae:	f380 8808 	msr	MSP, r0
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8814 	msr	CONTROL, r0
 8007fba:	b662      	cpsie	i
 8007fbc:	b661      	cpsie	f
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	df00      	svc	0
 8007fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fca:	bf00      	nop
 8007fcc:	e000ed08 	.word	0xe000ed08

08007fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fd6:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <xPortStartScheduler+0xe0>)
 8007fd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4b2e      	ldr	r3, [pc, #184]	; (80080b4 <xPortStartScheduler+0xe4>)
 8007ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ffe:	4b2e      	ldr	r3, [pc, #184]	; (80080b8 <xPortStartScheduler+0xe8>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008004:	e009      	b.n	800801a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008006:	4b2c      	ldr	r3, [pc, #176]	; (80080b8 <xPortStartScheduler+0xe8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	4a2a      	ldr	r2, [pc, #168]	; (80080b8 <xPortStartScheduler+0xe8>)
 800800e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d0ef      	beq.n	8008006 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008026:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <xPortStartScheduler+0xe8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1c3 0307 	rsb	r3, r3, #7
 800802e:	2b04      	cmp	r3, #4
 8008030:	d00b      	beq.n	800804a <xPortStartScheduler+0x7a>
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	e7fe      	b.n	8008048 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800804a:	4b1b      	ldr	r3, [pc, #108]	; (80080b8 <xPortStartScheduler+0xe8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <xPortStartScheduler+0xe8>)
 8008052:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008054:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <xPortStartScheduler+0xe8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800805c:	4a16      	ldr	r2, [pc, #88]	; (80080b8 <xPortStartScheduler+0xe8>)
 800805e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008068:	4b14      	ldr	r3, [pc, #80]	; (80080bc <xPortStartScheduler+0xec>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a13      	ldr	r2, [pc, #76]	; (80080bc <xPortStartScheduler+0xec>)
 800806e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008072:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008074:	4b11      	ldr	r3, [pc, #68]	; (80080bc <xPortStartScheduler+0xec>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a10      	ldr	r2, [pc, #64]	; (80080bc <xPortStartScheduler+0xec>)
 800807a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800807e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008080:	f000 f8d4 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <xPortStartScheduler+0xf0>)
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800808a:	f000 f8f3 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <xPortStartScheduler+0xf4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a0c      	ldr	r2, [pc, #48]	; (80080c4 <xPortStartScheduler+0xf4>)
 8008094:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008098:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800809a:	f7ff ff85 	bl	8007fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800809e:	f7ff fd77 	bl	8007b90 <vTaskSwitchContext>
	prvTaskExitError();
 80080a2:	f7ff ff3d 	bl	8007f20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	e000e400 	.word	0xe000e400
 80080b4:	20000688 	.word	0x20000688
 80080b8:	2000068c 	.word	0x2000068c
 80080bc:	e000ed20 	.word	0xe000ed20
 80080c0:	20000004 	.word	0x20000004
 80080c4:	e000ef34 	.word	0xe000ef34

080080c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <vPortEnterCritical+0x5c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a0e      	ldr	r2, [pc, #56]	; (8008124 <vPortEnterCritical+0x5c>)
 80080ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080ee:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <vPortEnterCritical+0x5c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d110      	bne.n	8008118 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <vPortEnterCritical+0x60>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <vPortEnterCritical+0x50>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	603b      	str	r3, [r7, #0]
 8008116:	e7fe      	b.n	8008116 <vPortEnterCritical+0x4e>
	}
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000004 	.word	0x20000004
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <vPortExitCritical+0x26>
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	e7fe      	b.n	8008150 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <vPortExitCritical+0x50>)
 800815a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <vPortExitCritical+0x50>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <vPortExitCritical+0x42>
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000004 	.word	0x20000004

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081a4:	b672      	cpsid	i
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	b662      	cpsie	i
 80081b4:	f7ff fcec 	bl	8007b90 <vTaskSwitchContext>
 80081b8:	f04f 0000 	mov.w	r0, #0
 80081bc:	f380 8811 	msr	BASEPRI, r0
 80081c0:	bc09      	pop	{r0, r3}
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f01e 0f10 	tst.w	lr, #16
 80081ce:	bf08      	it	eq
 80081d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d4:	f380 8809 	msr	PSP, r0
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <pxCurrentTCBConst>:
 80081e0:	2000055c 	.word	0x2000055c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	b672      	cpsid	i
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	b662      	cpsie	i
 8008202:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008204:	f7ff fc06 	bl	8007a14 <xTaskIncrementTick>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <xPortSysTickHandler+0x40>)
 8008210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	603b      	str	r3, [r7, #0]
	__asm volatile
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	; (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	20000008 	.word	0x20000008
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800828e:	463b      	mov	r3, r7
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800829a:	4b44      	ldr	r3, [pc, #272]	; (80083ac <MX_ADC1_Init+0x124>)
 800829c:	4a44      	ldr	r2, [pc, #272]	; (80083b0 <MX_ADC1_Init+0x128>)
 800829e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80082a0:	4b42      	ldr	r3, [pc, #264]	; (80083ac <MX_ADC1_Init+0x124>)
 80082a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80082a8:	4b40      	ldr	r3, [pc, #256]	; (80083ac <MX_ADC1_Init+0x124>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80082ae:	4b3f      	ldr	r3, [pc, #252]	; (80083ac <MX_ADC1_Init+0x124>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80082b4:	4b3d      	ldr	r3, [pc, #244]	; (80083ac <MX_ADC1_Init+0x124>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80082ba:	4b3c      	ldr	r3, [pc, #240]	; (80083ac <MX_ADC1_Init+0x124>)
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80082c2:	4b3a      	ldr	r3, [pc, #232]	; (80083ac <MX_ADC1_Init+0x124>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80082c8:	4b38      	ldr	r3, [pc, #224]	; (80083ac <MX_ADC1_Init+0x124>)
 80082ca:	4a3a      	ldr	r2, [pc, #232]	; (80083b4 <MX_ADC1_Init+0x12c>)
 80082cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80082ce:	4b37      	ldr	r3, [pc, #220]	; (80083ac <MX_ADC1_Init+0x124>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80082d4:	4b35      	ldr	r3, [pc, #212]	; (80083ac <MX_ADC1_Init+0x124>)
 80082d6:	2206      	movs	r2, #6
 80082d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80082da:	4b34      	ldr	r3, [pc, #208]	; (80083ac <MX_ADC1_Init+0x124>)
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80082e2:	4b32      	ldr	r3, [pc, #200]	; (80083ac <MX_ADC1_Init+0x124>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80082e8:	4830      	ldr	r0, [pc, #192]	; (80083ac <MX_ADC1_Init+0x124>)
 80082ea:	f7f8 feb3 	bl	8001054 <HAL_ADC_Init>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80082f4:	f000 fde0 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80082f8:	2303      	movs	r3, #3
 80082fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80082fc:	2301      	movs	r3, #1
 80082fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008300:	2307      	movs	r3, #7
 8008302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008304:	463b      	mov	r3, r7
 8008306:	4619      	mov	r1, r3
 8008308:	4828      	ldr	r0, [pc, #160]	; (80083ac <MX_ADC1_Init+0x124>)
 800830a:	f7f8 fff3 	bl	80012f4 <HAL_ADC_ConfigChannel>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008314:	f000 fdd0 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008318:	2304      	movs	r3, #4
 800831a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800831c:	2302      	movs	r3, #2
 800831e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008320:	463b      	mov	r3, r7
 8008322:	4619      	mov	r1, r3
 8008324:	4821      	ldr	r0, [pc, #132]	; (80083ac <MX_ADC1_Init+0x124>)
 8008326:	f7f8 ffe5 	bl	80012f4 <HAL_ADC_ConfigChannel>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008330:	f000 fdc2 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008334:	2309      	movs	r3, #9
 8008336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008338:	2303      	movs	r3, #3
 800833a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800833c:	463b      	mov	r3, r7
 800833e:	4619      	mov	r1, r3
 8008340:	481a      	ldr	r0, [pc, #104]	; (80083ac <MX_ADC1_Init+0x124>)
 8008342:	f7f8 ffd7 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800834c:	f000 fdb4 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008350:	230a      	movs	r3, #10
 8008352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008354:	2304      	movs	r3, #4
 8008356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008358:	463b      	mov	r3, r7
 800835a:	4619      	mov	r1, r3
 800835c:	4813      	ldr	r0, [pc, #76]	; (80083ac <MX_ADC1_Init+0x124>)
 800835e:	f7f8 ffc9 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8008368:	f000 fda6 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800836c:	230c      	movs	r3, #12
 800836e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008370:	2305      	movs	r3, #5
 8008372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008374:	463b      	mov	r3, r7
 8008376:	4619      	mov	r1, r3
 8008378:	480c      	ldr	r0, [pc, #48]	; (80083ac <MX_ADC1_Init+0x124>)
 800837a:	f7f8 ffbb 	bl	80012f4 <HAL_ADC_ConfigChannel>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8008384:	f000 fd98 	bl	8008eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008388:	230d      	movs	r3, #13
 800838a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800838c:	2306      	movs	r3, #6
 800838e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008390:	463b      	mov	r3, r7
 8008392:	4619      	mov	r1, r3
 8008394:	4805      	ldr	r0, [pc, #20]	; (80083ac <MX_ADC1_Init+0x124>)
 8008396:	f7f8 ffad 	bl	80012f4 <HAL_ADC_ConfigChannel>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80083a0:	f000 fd8a 	bl	8008eb8 <Error_Handler>
  }

}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20001770 	.word	0x20001770
 80083b0:	40012000 	.word	0x40012000
 80083b4:	0f000001 	.word	0x0f000001

080083b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	; 0x30
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c0:	f107 031c 	add.w	r3, r7, #28
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a45      	ldr	r2, [pc, #276]	; (80084ec <HAL_ADC_MspInit+0x134>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	f040 8084 	bne.w	80084e4 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80083dc:	4b44      	ldr	r3, [pc, #272]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	4a43      	ldr	r2, [pc, #268]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 80083e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e6:	6453      	str	r3, [r2, #68]	; 0x44
 80083e8:	4b41      	ldr	r3, [pc, #260]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 80083ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083f4:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	4a3d      	ldr	r2, [pc, #244]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 80083fa:	f043 0304 	orr.w	r3, r3, #4
 80083fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008400:	4b3b      	ldr	r3, [pc, #236]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800840c:	4b38      	ldr	r3, [pc, #224]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	4a37      	ldr	r2, [pc, #220]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	6313      	str	r3, [r2, #48]	; 0x30
 8008418:	4b35      	ldr	r3, [pc, #212]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008424:	4b32      	ldr	r3, [pc, #200]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	4a31      	ldr	r2, [pc, #196]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	6313      	str	r3, [r2, #48]	; 0x30
 8008430:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <HAL_ADC_MspInit+0x138>)
 8008432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 800843c:	230d      	movs	r3, #13
 800843e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008440:	2303      	movs	r3, #3
 8008442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	2300      	movs	r3, #0
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008448:	f107 031c 	add.w	r3, r7, #28
 800844c:	4619      	mov	r1, r3
 800844e:	4829      	ldr	r0, [pc, #164]	; (80084f4 <HAL_ADC_MspInit+0x13c>)
 8008450:	f7fa fb18 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8008454:	2318      	movs	r3, #24
 8008456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008458:	2303      	movs	r3, #3
 800845a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845c:	2300      	movs	r3, #0
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008460:	f107 031c 	add.w	r3, r7, #28
 8008464:	4619      	mov	r1, r3
 8008466:	4824      	ldr	r0, [pc, #144]	; (80084f8 <HAL_ADC_MspInit+0x140>)
 8008468:	f7fa fb0c 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 800846c:	2302      	movs	r3, #2
 800846e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008470:	2303      	movs	r3, #3
 8008472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008474:	2300      	movs	r3, #0
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8008478:	f107 031c 	add.w	r3, r7, #28
 800847c:	4619      	mov	r1, r3
 800847e:	481f      	ldr	r0, [pc, #124]	; (80084fc <HAL_ADC_MspInit+0x144>)
 8008480:	f7fa fb00 	bl	8002a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <HAL_ADC_MspInit+0x148>)
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <HAL_ADC_MspInit+0x14c>)
 8008488:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800848a:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <HAL_ADC_MspInit+0x148>)
 800848c:	2200      	movs	r2, #0
 800848e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <HAL_ADC_MspInit+0x148>)
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <HAL_ADC_MspInit+0x148>)
 8008498:	2200      	movs	r2, #0
 800849a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800849c:	4b18      	ldr	r3, [pc, #96]	; (8008500 <HAL_ADC_MspInit+0x148>)
 800849e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80084a4:	4b16      	ldr	r3, [pc, #88]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80084b4:	4b12      	ldr	r3, [pc, #72]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80084bc:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084be:	2200      	movs	r2, #0
 80084c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084c8:	480d      	ldr	r0, [pc, #52]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084ca:	f7f9 fed3 	bl	8002274 <HAL_DMA_Init>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80084d4:	f000 fcf0 	bl	8008eb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a09      	ldr	r2, [pc, #36]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
 80084de:	4a08      	ldr	r2, [pc, #32]	; (8008500 <HAL_ADC_MspInit+0x148>)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80084e4:	bf00      	nop
 80084e6:	3730      	adds	r7, #48	; 0x30
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40012000 	.word	0x40012000
 80084f0:	40023800 	.word	0x40023800
 80084f4:	40020800 	.word	0x40020800
 80084f8:	40020000 	.word	0x40020000
 80084fc:	40020400 	.word	0x40020400
 8008500:	200017b8 	.word	0x200017b8
 8008504:	40026470 	.word	0x40026470

08008508 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800850c:	4b17      	ldr	r3, [pc, #92]	; (800856c <MX_CAN1_Init+0x64>)
 800850e:	4a18      	ldr	r2, [pc, #96]	; (8008570 <MX_CAN1_Init+0x68>)
 8008510:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8008512:	4b16      	ldr	r3, [pc, #88]	; (800856c <MX_CAN1_Init+0x64>)
 8008514:	2206      	movs	r2, #6
 8008516:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008518:	4b14      	ldr	r3, [pc, #80]	; (800856c <MX_CAN1_Init+0x64>)
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <MX_CAN1_Init+0x64>)
 8008520:	2200      	movs	r2, #0
 8008522:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8008524:	4b11      	ldr	r3, [pc, #68]	; (800856c <MX_CAN1_Init+0x64>)
 8008526:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800852a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <MX_CAN1_Init+0x64>)
 800852e:	2200      	movs	r2, #0
 8008530:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008532:	4b0e      	ldr	r3, [pc, #56]	; (800856c <MX_CAN1_Init+0x64>)
 8008534:	2200      	movs	r2, #0
 8008536:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <MX_CAN1_Init+0x64>)
 800853a:	2200      	movs	r2, #0
 800853c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <MX_CAN1_Init+0x64>)
 8008540:	2200      	movs	r2, #0
 8008542:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <MX_CAN1_Init+0x64>)
 8008546:	2201      	movs	r2, #1
 8008548:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800854a:	4b08      	ldr	r3, [pc, #32]	; (800856c <MX_CAN1_Init+0x64>)
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <MX_CAN1_Init+0x64>)
 8008552:	2200      	movs	r2, #0
 8008554:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008556:	4805      	ldr	r0, [pc, #20]	; (800856c <MX_CAN1_Init+0x64>)
 8008558:	f7f9 f97c 	bl	8001854 <HAL_CAN_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8008562:	f000 fca9 	bl	8008eb8 <Error_Handler>
  }

}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20001818 	.word	0x20001818
 8008570:	40006400 	.word	0x40006400

08008574 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800857c:	f107 0314 	add.w	r3, r7, #20
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_CAN_MspInit+0x9c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d137      	bne.n	8008606 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008596:	4b1f      	ldr	r3, [pc, #124]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 800859c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085a0:	6413      	str	r3, [r2, #64]	; 0x40
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	4a18      	ldr	r2, [pc, #96]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 80085b4:	f043 0308 	orr.w	r3, r3, #8
 80085b8:	6313      	str	r3, [r2, #48]	; 0x30
 80085ba:	4b16      	ldr	r3, [pc, #88]	; (8008614 <HAL_CAN_MspInit+0xa0>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80085c6:	2303      	movs	r3, #3
 80085c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ca:	2302      	movs	r3, #2
 80085cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085d2:	2303      	movs	r3, #3
 80085d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80085d6:	2309      	movs	r3, #9
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085da:	f107 0314 	add.w	r3, r7, #20
 80085de:	4619      	mov	r1, r3
 80085e0:	480d      	ldr	r0, [pc, #52]	; (8008618 <HAL_CAN_MspInit+0xa4>)
 80085e2:	f7fa fa4f 	bl	8002a84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2105      	movs	r1, #5
 80085ea:	2014      	movs	r0, #20
 80085ec:	f7f9 fe18 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80085f0:	2014      	movs	r0, #20
 80085f2:	f7f9 fe31 	bl	8002258 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80085f6:	2200      	movs	r2, #0
 80085f8:	2105      	movs	r1, #5
 80085fa:	2015      	movs	r0, #21
 80085fc:	f7f9 fe10 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008600:	2015      	movs	r0, #21
 8008602:	f7f9 fe29 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008606:	bf00      	nop
 8008608:	3728      	adds	r7, #40	; 0x28
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40006400 	.word	0x40006400
 8008614:	40023800 	.word	0x40023800
 8008618:	40020c00 	.word	0x40020c00

0800861c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008622:	4b36      	ldr	r3, [pc, #216]	; (80086fc <MX_DMA_Init+0xe0>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	4a35      	ldr	r2, [pc, #212]	; (80086fc <MX_DMA_Init+0xe0>)
 8008628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800862c:	6313      	str	r3, [r2, #48]	; 0x30
 800862e:	4b33      	ldr	r3, [pc, #204]	; (80086fc <MX_DMA_Init+0xe0>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008636:	607b      	str	r3, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800863a:	4b30      	ldr	r3, [pc, #192]	; (80086fc <MX_DMA_Init+0xe0>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a2f      	ldr	r2, [pc, #188]	; (80086fc <MX_DMA_Init+0xe0>)
 8008640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <MX_DMA_Init+0xe0>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2105      	movs	r1, #5
 8008656:	200b      	movs	r0, #11
 8008658:	f7f9 fde2 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800865c:	200b      	movs	r0, #11
 800865e:	f7f9 fdfb 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8008662:	2200      	movs	r2, #0
 8008664:	2105      	movs	r1, #5
 8008666:	200c      	movs	r0, #12
 8008668:	f7f9 fdda 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800866c:	200c      	movs	r0, #12
 800866e:	f7f9 fdf3 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8008672:	2200      	movs	r2, #0
 8008674:	2105      	movs	r1, #5
 8008676:	200f      	movs	r0, #15
 8008678:	f7f9 fdd2 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800867c:	200f      	movs	r0, #15
 800867e:	f7f9 fdeb 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2105      	movs	r1, #5
 8008686:	2010      	movs	r0, #16
 8008688:	f7f9 fdca 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800868c:	2010      	movs	r0, #16
 800868e:	f7f9 fde3 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008692:	2200      	movs	r2, #0
 8008694:	2105      	movs	r1, #5
 8008696:	2011      	movs	r0, #17
 8008698:	f7f9 fdc2 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800869c:	2011      	movs	r0, #17
 800869e:	f7f9 fddb 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2105      	movs	r1, #5
 80086a6:	2038      	movs	r0, #56	; 0x38
 80086a8:	f7f9 fdba 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80086ac:	2038      	movs	r0, #56	; 0x38
 80086ae:	f7f9 fdd3 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2105      	movs	r1, #5
 80086b6:	2039      	movs	r0, #57	; 0x39
 80086b8:	f7f9 fdb2 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80086bc:	2039      	movs	r0, #57	; 0x39
 80086be:	f7f9 fdcb 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80086c2:	2200      	movs	r2, #0
 80086c4:	2105      	movs	r1, #5
 80086c6:	203a      	movs	r0, #58	; 0x3a
 80086c8:	f7f9 fdaa 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80086cc:	203a      	movs	r0, #58	; 0x3a
 80086ce:	f7f9 fdc3 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2105      	movs	r1, #5
 80086d6:	203b      	movs	r0, #59	; 0x3b
 80086d8:	f7f9 fda2 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80086dc:	203b      	movs	r0, #59	; 0x3b
 80086de:	f7f9 fdbb 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80086e2:	2200      	movs	r2, #0
 80086e4:	2105      	movs	r1, #5
 80086e6:	203c      	movs	r0, #60	; 0x3c
 80086e8:	f7f9 fd9a 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80086ec:	203c      	movs	r0, #60	; 0x3c
 80086ee:	f7f9 fdb3 	bl	8002258 <HAL_NVIC_EnableIRQ>

}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	40023800 	.word	0x40023800

08008700 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a07      	ldr	r2, [pc, #28]	; (800872c <vApplicationGetIdleTaskMemory+0x2c>)
 8008710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <vApplicationGetIdleTaskMemory+0x30>)
 8008716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2280      	movs	r2, #128	; 0x80
 800871c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20000690 	.word	0x20000690
 8008730:	200006e4 	.word	0x200006e4

08008734 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008734:	b5b0      	push	{r4, r5, r7, lr}
 8008736:	b08e      	sub	sp, #56	; 0x38
 8008738:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 800873a:	4b14      	ldr	r3, [pc, #80]	; (800878c <MX_FREERTOS_Init+0x58>)
 800873c:	f107 041c 	add.w	r4, r7, #28
 8008740:	461d      	mov	r5, r3
 8008742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800874a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 800874e:	f107 031c 	add.w	r3, r7, #28
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fd95 	bl	8007284 <osThreadCreate>
 800875a:	4602      	mov	r2, r0
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <MX_FREERTOS_Init+0x5c>)
 800875e:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <MX_FREERTOS_Init+0x60>)
 8008762:	463c      	mov	r4, r7
 8008764:	461d      	mov	r5, r3
 8008766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800876a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800876e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8008772:	463b      	mov	r3, r7
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fd84 	bl	8007284 <osThreadCreate>
 800877c:	4602      	mov	r2, r0
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <MX_FREERTOS_Init+0x64>)
 8008780:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008782:	bf00      	nop
 8008784:	3738      	adds	r7, #56	; 0x38
 8008786:	46bd      	mov	sp, r7
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	bf00      	nop
 800878c:	080125d4 	.word	0x080125d4
 8008790:	20005840 	.word	0x20005840
 8008794:	080125fc 	.word	0x080125fc
 8008798:	20005898 	.word	0x20005898

0800879c <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80087a4:	f7ff f926 	bl	80079f4 <xTaskGetTickCount>
 80087a8:	4603      	mov	r3, r0
 80087aa:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 80087ac:	2301      	movs	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 80087b0:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <sendTaskFunc+0x44>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3301      	adds	r3, #1
 80087b6:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <sendTaskFunc+0x44>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <sendTaskFunc+0x44>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <sendTaskFunc+0x48>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	db04      	blt.n	80087d0 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 80087c6:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <sendTaskFunc+0x44>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 80087cc:	f005 fba2 	bl	800df14 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	68f9      	ldr	r1, [r7, #12]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe ff7e 	bl	80076d8 <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 80087dc:	e7e8      	b.n	80087b0 <sendTaskFunc+0x14>
 80087de:	bf00      	nop
 80087e0:	200008e4 	.word	0x200008e4
 80087e4:	20000218 	.word	0x20000218

080087e8 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80087f0:	f7ff f900 	bl	80079f4 <xTaskGetTickCount>
 80087f4:	4603      	mov	r3, r0
 80087f6:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 80087fc:	f002 fac4 	bl	800ad88 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_TerminalHandler();
 8008800:	f005 fadc 	bl	800ddbc <Usart_TerminalHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <controlTaskFunc+0x50>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <controlTaskFunc+0x50>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <controlTaskFunc+0x50>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b0a      	ldr	r3, [pc, #40]	; (800883c <controlTaskFunc+0x54>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	db04      	blt.n	8008824 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <controlTaskFunc+0x50>)
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
		loop();
 8008820:	f005 fb6e 	bl	800df00 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 8008824:	f003 fa3c 	bl	800bca0 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	68f9      	ldr	r1, [r7, #12]
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ff52 	bl	80076d8 <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8008834:	e7e2      	b.n	80087fc <controlTaskFunc+0x14>
 8008836:	bf00      	nop
 8008838:	200008e8 	.word	0x200008e8
 800883c:	20000214 	.word	0x20000214

08008840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	; 0x30
 8008844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008846:	f107 031c 	add.w	r3, r7, #28
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	60da      	str	r2, [r3, #12]
 8008854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008856:	4b65      	ldr	r3, [pc, #404]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a64      	ldr	r2, [pc, #400]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800885c:	f043 0310 	orr.w	r3, r3, #16
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b62      	ldr	r3, [pc, #392]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	61bb      	str	r3, [r7, #24]
 800886c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800886e:	4b5f      	ldr	r3, [pc, #380]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	4a5e      	ldr	r2, [pc, #376]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008874:	f043 0320 	orr.w	r3, r3, #32
 8008878:	6313      	str	r3, [r2, #48]	; 0x30
 800887a:	4b5c      	ldr	r3, [pc, #368]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008886:	4b59      	ldr	r3, [pc, #356]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a58      	ldr	r2, [pc, #352]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800888c:	f043 0304 	orr.w	r3, r3, #4
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b56      	ldr	r3, [pc, #344]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800889e:	4b53      	ldr	r3, [pc, #332]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a52      	ldr	r2, [pc, #328]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b50      	ldr	r3, [pc, #320]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088b6:	4b4d      	ldr	r3, [pc, #308]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	4a4c      	ldr	r2, [pc, #304]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088bc:	f043 0302 	orr.w	r3, r3, #2
 80088c0:	6313      	str	r3, [r2, #48]	; 0x30
 80088c2:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80088ce:	4b47      	ldr	r3, [pc, #284]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a46      	ldr	r2, [pc, #280]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b44      	ldr	r3, [pc, #272]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80088e6:	4b41      	ldr	r3, [pc, #260]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	4a40      	ldr	r2, [pc, #256]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088ec:	f043 0308 	orr.w	r3, r3, #8
 80088f0:	6313      	str	r3, [r2, #48]	; 0x30
 80088f2:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 80088fe:	2200      	movs	r2, #0
 8008900:	f240 119b 	movw	r1, #411	; 0x19b
 8008904:	483a      	ldr	r0, [pc, #232]	; (80089f0 <MX_GPIO_Init+0x1b0>)
 8008906:	f7fa fa67 	bl	8002dd8 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 800890a:	2200      	movs	r2, #0
 800890c:	f64f 5138 	movw	r1, #64824	; 0xfd38
 8008910:	4838      	ldr	r0, [pc, #224]	; (80089f4 <MX_GPIO_Init+0x1b4>)
 8008912:	f7fa fa61 	bl	8002dd8 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8008916:	f240 139b 	movw	r3, #411	; 0x19b
 800891a:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800891c:	2301      	movs	r3, #1
 800891e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008920:	2302      	movs	r3, #2
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008924:	2300      	movs	r3, #0
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008928:	f107 031c 	add.w	r3, r7, #28
 800892c:	4619      	mov	r1, r3
 800892e:	4830      	ldr	r0, [pc, #192]	; (80089f0 <MX_GPIO_Init+0x1b0>)
 8008930:	f7fa f8a8 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8008934:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8008938:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800893a:	2301      	movs	r3, #1
 800893c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800893e:	2302      	movs	r3, #2
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008942:	2300      	movs	r3, #0
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008946:	f107 031c 	add.w	r3, r7, #28
 800894a:	4619      	mov	r1, r3
 800894c:	4829      	ldr	r0, [pc, #164]	; (80089f4 <MX_GPIO_Init+0x1b4>)
 800894e:	f7fa f899 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 8008952:	233f      	movs	r3, #63	; 0x3f
 8008954:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008956:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <MX_GPIO_Init+0x1b8>)
 8008958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800895a:	2302      	movs	r3, #2
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800895e:	f107 031c 	add.w	r3, r7, #28
 8008962:	4619      	mov	r1, r3
 8008964:	4825      	ldr	r0, [pc, #148]	; (80089fc <MX_GPIO_Init+0x1bc>)
 8008966:	f7fa f88d 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800896a:	239c      	movs	r3, #156	; 0x9c
 800896c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800896e:	2300      	movs	r3, #0
 8008970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008972:	2300      	movs	r3, #0
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008976:	f107 031c 	add.w	r3, r7, #28
 800897a:	4619      	mov	r1, r3
 800897c:	4820      	ldr	r0, [pc, #128]	; (8008a00 <MX_GPIO_Init+0x1c0>)
 800897e:	f7fa f881 	bl	8002a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008982:	2200      	movs	r2, #0
 8008984:	2105      	movs	r1, #5
 8008986:	2006      	movs	r0, #6
 8008988:	f7f9 fc4a 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800898c:	2006      	movs	r0, #6
 800898e:	f7f9 fc63 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8008992:	2200      	movs	r2, #0
 8008994:	2105      	movs	r1, #5
 8008996:	2007      	movs	r0, #7
 8008998:	f7f9 fc42 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800899c:	2007      	movs	r0, #7
 800899e:	f7f9 fc5b 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2105      	movs	r1, #5
 80089a6:	2008      	movs	r0, #8
 80089a8:	f7f9 fc3a 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80089ac:	2008      	movs	r0, #8
 80089ae:	f7f9 fc53 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2105      	movs	r1, #5
 80089b6:	2009      	movs	r0, #9
 80089b8:	f7f9 fc32 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80089bc:	2009      	movs	r0, #9
 80089be:	f7f9 fc4b 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2105      	movs	r1, #5
 80089c6:	200a      	movs	r0, #10
 80089c8:	f7f9 fc2a 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80089cc:	200a      	movs	r0, #10
 80089ce:	f7f9 fc43 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	2105      	movs	r1, #5
 80089d6:	2017      	movs	r0, #23
 80089d8:	f7f9 fc22 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80089dc:	2017      	movs	r0, #23
 80089de:	f7f9 fc3b 	bl	8002258 <HAL_NVIC_EnableIRQ>

}
 80089e2:	bf00      	nop
 80089e4:	3730      	adds	r7, #48	; 0x30
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	40023800 	.word	0x40023800
 80089f0:	40021000 	.word	0x40021000
 80089f4:	40021400 	.word	0x40021400
 80089f8:	10210000 	.word	0x10210000
 80089fc:	40021800 	.word	0x40021800
 8008a00:	40020c00 	.word	0x40020c00

08008a04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <MX_I2C1_Init+0x78>)
 8008a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8008a0e:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a10:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <MX_I2C1_Init+0x7c>)
 8008a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a2c:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a3e:	480e      	ldr	r0, [pc, #56]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a40:	f7fa f9fc 	bl	8002e3c <HAL_I2C_Init>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a4a:	f000 fa35 	bl	8008eb8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4809      	ldr	r0, [pc, #36]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a52:	f7fa fa83 	bl	8002f5c <HAL_I2CEx_ConfigAnalogFilter>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008a5c:	f000 fa2c 	bl	8008eb8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008a60:	2100      	movs	r1, #0
 8008a62:	4805      	ldr	r0, [pc, #20]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a64:	f7fa fac5 	bl	8002ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008a6e:	f000 fa23 	bl	8008eb8 <Error_Handler>
  }

}
 8008a72:	bf00      	nop
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20009950 	.word	0x20009950
 8008a7c:	40005400 	.word	0x40005400
 8008a80:	6000030d 	.word	0x6000030d

08008a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	; 0x28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a8c:	f107 0314 	add.w	r3, r7, #20
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	605a      	str	r2, [r3, #4]
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	60da      	str	r2, [r3, #12]
 8008a9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <HAL_I2C_MspInit+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d156      	bne.n	8008b54 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aa6:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aac:	f043 0302 	orr.w	r3, r3, #2
 8008ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ac4:	2312      	movs	r3, #18
 8008ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008acc:	2303      	movs	r3, #3
 8008ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4822      	ldr	r0, [pc, #136]	; (8008b64 <HAL_I2C_MspInit+0xe0>)
 8008adc:	f7f9 ffd2 	bl	8002a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ae0:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aea:	6413      	str	r3, [r2, #64]	; 0x40
 8008aec:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008afa:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <HAL_I2C_MspInit+0xe8>)
 8008afc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b04:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b08:	2240      	movs	r2, #64	; 0x40
 8008b0a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b0c:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b18:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b20:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b2c:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008b38:	480b      	ldr	r0, [pc, #44]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b3a:	f7f9 fb9b 	bl	8002274 <HAL_DMA_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008b44:	f000 f9b8 	bl	8008eb8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4e:	4a06      	ldr	r2, [pc, #24]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008b54:	bf00      	nop
 8008b56:	3728      	adds	r7, #40	; 0x28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40005400 	.word	0x40005400
 8008b60:	40023800 	.word	0x40023800
 8008b64:	40020400 	.word	0x40020400
 8008b68:	200098f0 	.word	0x200098f0
 8008b6c:	400260a0 	.word	0x400260a0

08008b70 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b78:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008b8c:	4b07      	ldr	r3, [pc, #28]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008ba0:	bf00      	nop
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008bbe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008bc2:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0b5b      	lsrs	r3, r3, #13
 8008bce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008bd2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	08db      	lsrs	r3, r3, #3
 8008bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bdc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008be6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008bec:	490f      	ldr	r1, [pc, #60]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	1e5a      	subs	r2, r3, #1
 8008bf8:	60ba      	str	r2, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1ef      	bne.n	8008bde <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	60fa      	str	r2, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e5      	bne.n	8008bd4 <SCB_EnableDCache+0x24>
 8008c08:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	4a06      	ldr	r2, [pc, #24]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c16:	6153      	str	r3, [r2, #20]
 8008c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c1c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	e000ed00 	.word	0xe000ed00

08008c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008c34:	f7ff ff9c 	bl	8008b70 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008c38:	f7ff ffba 	bl	8008bb0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c3c:	f7f8 f9ba 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c40:	f000 f83e 	bl	8008cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c44:	f7ff fdfc 	bl	8008840 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c48:	f7ff fce8 	bl	800861c <MX_DMA_Init>
  MX_ADC1_Init();
 8008c4c:	f7ff fb1c 	bl	8008288 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008c50:	f000 fe62 	bl	8009918 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008c54:	f000 ff1a 	bl	8009a8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8008c58:	f000 ffa6 	bl	8009ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008c5c:	f001 f820 	bl	8009ca0 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008c60:	f001 f89a 	bl	8009d98 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008c64:	f001 f8ce 	bl	8009e04 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008c68:	f001 f986 	bl	8009f78 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008c6c:	f001 f9f2 	bl	800a054 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008c70:	f001 fa3e 	bl	800a0f0 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008c74:	f001 fa8a 	bl	800a18c <MX_TIM14_Init>
  MX_SPI1_Init();
 8008c78:	f000 f926 	bl	8008ec8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8008c7c:	f000 f95c 	bl	8008f38 <MX_SPI3_Init>
  MX_SPI4_Init();
 8008c80:	f000 f998 	bl	8008fb4 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008c84:	f000 f9d4 	bl	8009030 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008c88:	f001 fd5c 	bl	800a744 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008c8c:	f001 fdba 	bl	800a804 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8008c90:	f7ff feb8 	bl	8008a04 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008c94:	f001 fd86 	bl	800a7a4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008c98:	f7ff fc36 	bl	8008508 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008c9c:	f004 fd7e 	bl	800d79c <my_UsartInit>

	/*******************************Analog init***************************/
	AnaBuiltInStart();
 8008ca0:	f003 fa8a 	bl	800c1b8 <AnaBuiltInStart>

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008ca4:	f002 f896 	bl	800add4 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008ca8:	f003 fdf0 	bl	800c88c <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 8008cac:	f003 f81a 	bl	800bce4 <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008cb0:	f005 f916 	bl	800dee0 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008cb4:	f7ff fd3e 	bl	8008734 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008cb8:	f7fe fadd 	bl	8007276 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008cbc:	e7fe      	b.n	8008cbc <main+0x8c>
	...

08008cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b0b8      	sub	sp, #224	; 0xe0
 8008cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008cca:	2234      	movs	r2, #52	; 0x34
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f005 fbc7 	bl	800e462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	2290      	movs	r2, #144	; 0x90
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f005 fbb8 	bl	800e462 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cf2:	4b3c      	ldr	r3, [pc, #240]	; (8008de4 <SystemClock_Config+0x124>)
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	4a3b      	ldr	r2, [pc, #236]	; (8008de4 <SystemClock_Config+0x124>)
 8008cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8008cfe:	4b39      	ldr	r3, [pc, #228]	; (8008de4 <SystemClock_Config+0x124>)
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d0a:	4b37      	ldr	r3, [pc, #220]	; (8008de8 <SystemClock_Config+0x128>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a36      	ldr	r2, [pc, #216]	; (8008de8 <SystemClock_Config+0x128>)
 8008d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4b34      	ldr	r3, [pc, #208]	; (8008de8 <SystemClock_Config+0x128>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d22:	2302      	movs	r3, #2
 8008d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d2e:	2310      	movs	r3, #16
 8008d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d34:	2302      	movs	r3, #2
 8008d36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d40:	2308      	movs	r3, #8
 8008d42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008d46:	23d8      	movs	r3, #216	; 0xd8
 8008d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008d52:	2302      	movs	r3, #2
 8008d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fa f9e5 	bl	800312c <HAL_RCC_OscConfig>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008d68:	f000 f8a6 	bl	8008eb8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d6c:	f7fa f98e 	bl	800308c <HAL_PWREx_EnableOverDrive>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008d76:	f000 f89f 	bl	8008eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d7a:	230f      	movs	r3, #15
 8008d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d80:	2302      	movs	r3, #2
 8008d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008d9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008da0:	2107      	movs	r1, #7
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fa fc34 	bl	8003610 <HAL_RCC_ClockConfig>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008dae:	f000 f883 	bl	8008eb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008db2:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8008db6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008db8:	2300      	movs	r3, #0
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dc8:	f107 0308 	add.w	r3, r7, #8
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fa fe1f 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008dd8:	f000 f86e 	bl	8008eb8 <Error_Handler>
  }
}
 8008ddc:	bf00      	nop
 8008dde:	37e0      	adds	r7, #224	; 0xe0
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40023800 	.word	0x40023800
 8008de8:	40007000 	.word	0x40007000

08008dec <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8008df4:	2301      	movs	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret=ADBoard_SPICallback(hspi);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 ff11 	bl	800ac20 <ADBoard_SPICallback>
 8008dfe:	60f8      	str	r0, [r7, #12]
#endif

}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008e12:	2301      	movs	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]
	static INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d103      	bne.n	8008e24 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008e1c:	4b1c      	ldr	r3, [pc, #112]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e021      	b.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008e24:	88fb      	ldrh	r3, [r7, #6]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008e2a:	4b19      	ldr	r3, [pc, #100]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e01a      	b.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 8008e32:	88fb      	ldrh	r3, [r7, #6]
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d103      	bne.n	8008e40 <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e013      	b.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d103      	bne.n	8008e4e <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008e46:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e48:	2203      	movs	r2, #3
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e00c      	b.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d103      	bne.n	8008e5c <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008e54:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e56:	2204      	movs	r2, #4
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e005      	b.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008e5c:	88fb      	ldrh	r3, [r7, #6]
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d102      	bne.n	8008e68 <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e64:	2205      	movs	r2, #5
 8008e66:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008e68:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fe9a 	bl	800aba8 <ADBoard_BUSYCallback>
 8008e74:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f003 f847 	bl	800bf14 <interruptCallback>
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200008ec 	.word	0x200008ec

08008e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d101      	bne.n	8008eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008ea6:	f7f8 f893 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	40000c00 	.word	0x40000c00

08008eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ebc:	bf00      	nop
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
	...

08008ec8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008ecc:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008ece:	4a19      	ldr	r2, [pc, #100]	; (8008f34 <MX_SPI1_Init+0x6c>)
 8008ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008ed2:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008ed8:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8008ede:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008ee0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f0c:	2207      	movs	r2, #7
 8008f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f1c:	4804      	ldr	r0, [pc, #16]	; (8008f30 <MX_SPI1_Init+0x68>)
 8008f1e:	f7fb f99d 	bl	800425c <HAL_SPI_Init>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008f28:	f7ff ffc6 	bl	8008eb8 <Error_Handler>
  }

}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20009be8 	.word	0x20009be8
 8008f34:	40013000 	.word	0x40013000

08008f38 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <MX_SPI3_Init+0x78>)
 8008f40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008f42:	4b1a      	ldr	r3, [pc, #104]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008f4a:	4b18      	ldr	r3, [pc, #96]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f50:	4b16      	ldr	r3, [pc, #88]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008f56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f58:	4b14      	ldr	r3, [pc, #80]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f6c:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008f84:	4b09      	ldr	r3, [pc, #36]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f86:	2207      	movs	r2, #7
 8008f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f8a:	4b08      	ldr	r3, [pc, #32]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f92:	2208      	movs	r2, #8
 8008f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008f96:	4805      	ldr	r0, [pc, #20]	; (8008fac <MX_SPI3_Init+0x74>)
 8008f98:	f7fb f960 	bl	800425c <HAL_SPI_Init>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008fa2:	f7ff ff89 	bl	8008eb8 <Error_Handler>
  }

}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20009a60 	.word	0x20009a60
 8008fb0:	40003c00 	.word	0x40003c00

08008fb4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fba:	4a1c      	ldr	r2, [pc, #112]	; (800902c <MX_SPI4_Init+0x78>)
 8008fbc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008fbe:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fc4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008fc6:	4b18      	ldr	r3, [pc, #96]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008fcc:	4b16      	ldr	r3, [pc, #88]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fce:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008fd2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008fd4:	4b14      	ldr	r3, [pc, #80]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fda:	4b13      	ldr	r3, [pc, #76]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fe6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <MX_SPI4_Init+0x74>)
 8008fea:	2210      	movs	r2, #16
 8008fec:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <MX_SPI4_Init+0x74>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <MX_SPI4_Init+0x74>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <MX_SPI4_Init+0x74>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <MX_SPI4_Init+0x74>)
 8009002:	2207      	movs	r2, #7
 8009004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <MX_SPI4_Init+0x74>)
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <MX_SPI4_Init+0x74>)
 800900e:	2208      	movs	r2, #8
 8009010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8009012:	4805      	ldr	r0, [pc, #20]	; (8009028 <MX_SPI4_Init+0x74>)
 8009014:	f7fb f922 	bl	800425c <HAL_SPI_Init>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800901e:	f7ff ff4b 	bl	8008eb8 <Error_Handler>
  }

}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20009b84 	.word	0x20009b84
 800902c:	40013400 	.word	0x40013400

08009030 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8009034:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009036:	4a1c      	ldr	r2, [pc, #112]	; (80090a8 <MX_SPI6_Init+0x78>)
 8009038:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800903a:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <MX_SPI6_Init+0x74>)
 800903c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009040:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8009042:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009044:	2200      	movs	r2, #0
 8009046:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8009048:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <MX_SPI6_Init+0x74>)
 800904a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800904e:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009050:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009052:	2200      	movs	r2, #0
 8009054:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009056:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009058:	2200      	movs	r2, #0
 800905a:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <MX_SPI6_Init+0x74>)
 800905e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009062:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8009064:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009066:	2230      	movs	r2, #48	; 0x30
 8009068:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800906a:	4b0e      	ldr	r3, [pc, #56]	; (80090a4 <MX_SPI6_Init+0x74>)
 800906c:	2200      	movs	r2, #0
 800906e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009072:	2200      	movs	r2, #0
 8009074:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009076:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009078:	2200      	movs	r2, #0
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <MX_SPI6_Init+0x74>)
 800907e:	2207      	movs	r2, #7
 8009080:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009084:	2200      	movs	r2, #0
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <MX_SPI6_Init+0x74>)
 800908a:	2208      	movs	r2, #8
 800908c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800908e:	4805      	ldr	r0, [pc, #20]	; (80090a4 <MX_SPI6_Init+0x74>)
 8009090:	f7fb f8e4 	bl	800425c <HAL_SPI_Init>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 800909a:	f7ff ff0d 	bl	8008eb8 <Error_Handler>
  }

}
 800909e:	bf00      	nop
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	200099fc 	.word	0x200099fc
 80090a8:	40015400 	.word	0x40015400

080090ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b092      	sub	sp, #72	; 0x48
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a55      	ldr	r2, [pc, #340]	; (8009220 <HAL_SPI_MspInit+0x174>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f040 80b8 	bne.w	8009240 <HAL_SPI_MspInit+0x194>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80090d0:	4b54      	ldr	r3, [pc, #336]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d4:	4a53      	ldr	r2, [pc, #332]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090da:	6453      	str	r3, [r2, #68]	; 0x44
 80090dc:	4b51      	ldr	r3, [pc, #324]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090e8:	4b4e      	ldr	r3, [pc, #312]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	4a4d      	ldr	r2, [pc, #308]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	6313      	str	r3, [r2, #48]	; 0x30
 80090f4:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <HAL_SPI_MspInit+0x178>)
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009100:	4b48      	ldr	r3, [pc, #288]	; (8009224 <HAL_SPI_MspInit+0x178>)
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	4a47      	ldr	r2, [pc, #284]	; (8009224 <HAL_SPI_MspInit+0x178>)
 8009106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910a:	6313      	str	r3, [r2, #48]	; 0x30
 800910c:	4b45      	ldr	r3, [pc, #276]	; (8009224 <HAL_SPI_MspInit+0x178>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	62bb      	str	r3, [r7, #40]	; 0x28
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009118:	23e0      	movs	r3, #224	; 0xe0
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800911c:	2302      	movs	r3, #2
 800911e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009120:	2300      	movs	r3, #0
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009124:	2303      	movs	r3, #3
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009128:	2305      	movs	r3, #5
 800912a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800912c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009130:	4619      	mov	r1, r3
 8009132:	483d      	ldr	r0, [pc, #244]	; (8009228 <HAL_SPI_MspInit+0x17c>)
 8009134:	f7f9 fca6 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913e:	2302      	movs	r3, #2
 8009140:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009146:	2303      	movs	r3, #3
 8009148:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800914a:	2305      	movs	r3, #5
 800914c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800914e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009152:	4619      	mov	r1, r3
 8009154:	4835      	ldr	r0, [pc, #212]	; (800922c <HAL_SPI_MspInit+0x180>)
 8009156:	f7f9 fc95 	bl	8002a84 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800915a:	4b35      	ldr	r3, [pc, #212]	; (8009230 <HAL_SPI_MspInit+0x184>)
 800915c:	4a35      	ldr	r2, [pc, #212]	; (8009234 <HAL_SPI_MspInit+0x188>)
 800915e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8009160:	4b33      	ldr	r3, [pc, #204]	; (8009230 <HAL_SPI_MspInit+0x184>)
 8009162:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009166:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009168:	4b31      	ldr	r3, [pc, #196]	; (8009230 <HAL_SPI_MspInit+0x184>)
 800916a:	2200      	movs	r2, #0
 800916c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800916e:	4b30      	ldr	r3, [pc, #192]	; (8009230 <HAL_SPI_MspInit+0x184>)
 8009170:	2200      	movs	r2, #0
 8009172:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009174:	4b2e      	ldr	r3, [pc, #184]	; (8009230 <HAL_SPI_MspInit+0x184>)
 8009176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800917a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <HAL_SPI_MspInit+0x184>)
 800917e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009182:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009184:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <HAL_SPI_MspInit+0x184>)
 8009186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800918a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800918c:	4b28      	ldr	r3, [pc, #160]	; (8009230 <HAL_SPI_MspInit+0x184>)
 800918e:	2200      	movs	r2, #0
 8009190:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009192:	4b27      	ldr	r3, [pc, #156]	; (8009230 <HAL_SPI_MspInit+0x184>)
 8009194:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009198:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800919a:	4b25      	ldr	r3, [pc, #148]	; (8009230 <HAL_SPI_MspInit+0x184>)
 800919c:	2200      	movs	r2, #0
 800919e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80091a0:	4823      	ldr	r0, [pc, #140]	; (8009230 <HAL_SPI_MspInit+0x184>)
 80091a2:	f7f9 f867 	bl	8002274 <HAL_DMA_Init>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <HAL_SPI_MspInit+0x104>
    {
      Error_Handler();
 80091ac:	f7ff fe84 	bl	8008eb8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <HAL_SPI_MspInit+0x184>)
 80091b4:	659a      	str	r2, [r3, #88]	; 0x58
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <HAL_SPI_MspInit+0x184>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091be:	4a1f      	ldr	r2, [pc, #124]	; (800923c <HAL_SPI_MspInit+0x190>)
 80091c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80091c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091cc:	2240      	movs	r2, #64	; 0x40
 80091ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80091d0:	4b19      	ldr	r3, [pc, #100]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80091de:	4b16      	ldr	r3, [pc, #88]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80091f4:	4b10      	ldr	r3, [pc, #64]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091fa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 80091fe:	2200      	movs	r2, #0
 8009200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8009202:	480d      	ldr	r0, [pc, #52]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 8009204:	f7f9 f836 	bl	8002274 <HAL_DMA_Init>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 800920e:	f7ff fe53 	bl	8008eb8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a08      	ldr	r2, [pc, #32]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 8009216:	655a      	str	r2, [r3, #84]	; 0x54
 8009218:	4a07      	ldr	r2, [pc, #28]	; (8009238 <HAL_SPI_MspInit+0x18c>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800921e:	e1bb      	b.n	8009598 <HAL_SPI_MspInit+0x4ec>
 8009220:	40013000 	.word	0x40013000
 8009224:	40023800 	.word	0x40023800
 8009228:	40020000 	.word	0x40020000
 800922c:	40021800 	.word	0x40021800
 8009230:	20009c4c 	.word	0x20009c4c
 8009234:	40026440 	.word	0x40026440
 8009238:	20009cac 	.word	0x20009cac
 800923c:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a9d      	ldr	r2, [pc, #628]	; (80094bc <HAL_SPI_MspInit+0x410>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f040 80a6 	bne.w	8009398 <HAL_SPI_MspInit+0x2ec>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800924c:	4b9c      	ldr	r3, [pc, #624]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	4a9b      	ldr	r2, [pc, #620]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 8009252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009256:	6413      	str	r3, [r2, #64]	; 0x40
 8009258:	4b99      	ldr	r3, [pc, #612]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009264:	4b96      	ldr	r3, [pc, #600]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	4a95      	ldr	r2, [pc, #596]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 800926a:	f043 0302 	orr.w	r3, r3, #2
 800926e:	6313      	str	r3, [r2, #48]	; 0x30
 8009270:	4b93      	ldr	r3, [pc, #588]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800927c:	4b90      	ldr	r3, [pc, #576]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	4a8f      	ldr	r2, [pc, #572]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 8009282:	f043 0304 	orr.w	r3, r3, #4
 8009286:	6313      	str	r3, [r2, #48]	; 0x30
 8009288:	4b8d      	ldr	r3, [pc, #564]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	61fb      	str	r3, [r7, #28]
 8009292:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009294:	2304      	movs	r3, #4
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009298:	2302      	movs	r3, #2
 800929a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a0:	2303      	movs	r3, #3
 80092a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80092a4:	2307      	movs	r3, #7
 80092a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092ac:	4619      	mov	r1, r3
 80092ae:	4885      	ldr	r0, [pc, #532]	; (80094c4 <HAL_SPI_MspInit+0x418>)
 80092b0:	f7f9 fbe8 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80092b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80092b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ba:	2302      	movs	r3, #2
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c2:	2303      	movs	r3, #3
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80092c6:	2306      	movs	r3, #6
 80092c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092ce:	4619      	mov	r1, r3
 80092d0:	487d      	ldr	r0, [pc, #500]	; (80094c8 <HAL_SPI_MspInit+0x41c>)
 80092d2:	f7f9 fbd7 	bl	8002a84 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80092d6:	4b7d      	ldr	r3, [pc, #500]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092d8:	4a7d      	ldr	r2, [pc, #500]	; (80094d0 <HAL_SPI_MspInit+0x424>)
 80092da:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80092dc:	4b7b      	ldr	r3, [pc, #492]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092de:	2200      	movs	r2, #0
 80092e0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092e2:	4b7a      	ldr	r3, [pc, #488]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092e8:	4b78      	ldr	r3, [pc, #480]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80092ee:	4b77      	ldr	r3, [pc, #476]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092f4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80092f6:	4b75      	ldr	r3, [pc, #468]	; (80094cc <HAL_SPI_MspInit+0x420>)
 80092f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092fc:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80092fe:	4b73      	ldr	r3, [pc, #460]	; (80094cc <HAL_SPI_MspInit+0x420>)
 8009300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009304:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8009306:	4b71      	ldr	r3, [pc, #452]	; (80094cc <HAL_SPI_MspInit+0x420>)
 8009308:	2200      	movs	r2, #0
 800930a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800930c:	4b6f      	ldr	r3, [pc, #444]	; (80094cc <HAL_SPI_MspInit+0x420>)
 800930e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009312:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009314:	4b6d      	ldr	r3, [pc, #436]	; (80094cc <HAL_SPI_MspInit+0x420>)
 8009316:	2200      	movs	r2, #0
 8009318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800931a:	486c      	ldr	r0, [pc, #432]	; (80094cc <HAL_SPI_MspInit+0x420>)
 800931c:	f7f8 ffaa 	bl	8002274 <HAL_DMA_Init>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8009326:	f7ff fdc7 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a67      	ldr	r2, [pc, #412]	; (80094cc <HAL_SPI_MspInit+0x420>)
 800932e:	659a      	str	r2, [r3, #88]	; 0x58
 8009330:	4a66      	ldr	r2, [pc, #408]	; (80094cc <HAL_SPI_MspInit+0x420>)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8009336:	4b67      	ldr	r3, [pc, #412]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009338:	4a67      	ldr	r2, [pc, #412]	; (80094d8 <HAL_SPI_MspInit+0x42c>)
 800933a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800933c:	4b65      	ldr	r3, [pc, #404]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 800933e:	2200      	movs	r2, #0
 8009340:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009342:	4b64      	ldr	r3, [pc, #400]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009344:	2240      	movs	r2, #64	; 0x40
 8009346:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 800934a:	2200      	movs	r2, #0
 800934c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800934e:	4b61      	ldr	r3, [pc, #388]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009354:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009356:	4b5f      	ldr	r3, [pc, #380]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800935c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800935e:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009360:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009364:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8009366:	4b5b      	ldr	r3, [pc, #364]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009368:	2200      	movs	r2, #0
 800936a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800936c:	4b59      	ldr	r3, [pc, #356]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 800936e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009372:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009374:	4b57      	ldr	r3, [pc, #348]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009376:	2200      	movs	r2, #0
 8009378:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800937a:	4856      	ldr	r0, [pc, #344]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 800937c:	f7f8 ff7a 	bl	8002274 <HAL_DMA_Init>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <HAL_SPI_MspInit+0x2de>
      Error_Handler();
 8009386:	f7ff fd97 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a51      	ldr	r2, [pc, #324]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 800938e:	655a      	str	r2, [r3, #84]	; 0x54
 8009390:	4a50      	ldr	r2, [pc, #320]	; (80094d4 <HAL_SPI_MspInit+0x428>)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009396:	e0ff      	b.n	8009598 <HAL_SPI_MspInit+0x4ec>
  else if(spiHandle->Instance==SPI4)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a4f      	ldr	r2, [pc, #316]	; (80094dc <HAL_SPI_MspInit+0x430>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	f040 80a8 	bne.w	80094f4 <HAL_SPI_MspInit+0x448>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80093a4:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a8:	4a45      	ldr	r2, [pc, #276]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093ae:	6453      	str	r3, [r2, #68]	; 0x44
 80093b0:	4b43      	ldr	r3, [pc, #268]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80093bc:	4b40      	ldr	r3, [pc, #256]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	4a3f      	ldr	r2, [pc, #252]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093c2:	f043 0310 	orr.w	r3, r3, #16
 80093c6:	6313      	str	r3, [r2, #48]	; 0x30
 80093c8:	4b3d      	ldr	r3, [pc, #244]	; (80094c0 <HAL_SPI_MspInit+0x414>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 80093d4:	f246 0304 	movw	r3, #24580	; 0x6004
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093da:	2302      	movs	r3, #2
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e2:	2303      	movs	r3, #3
 80093e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80093e6:	2305      	movs	r3, #5
 80093e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093ee:	4619      	mov	r1, r3
 80093f0:	483b      	ldr	r0, [pc, #236]	; (80094e0 <HAL_SPI_MspInit+0x434>)
 80093f2:	f7f9 fb47 	bl	8002a84 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80093f6:	4b3b      	ldr	r3, [pc, #236]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 80093f8:	4a3b      	ldr	r2, [pc, #236]	; (80094e8 <HAL_SPI_MspInit+0x43c>)
 80093fa:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80093fc:	4b39      	ldr	r3, [pc, #228]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 80093fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009402:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009404:	4b37      	ldr	r3, [pc, #220]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800940a:	4b36      	ldr	r3, [pc, #216]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 800940c:	2200      	movs	r2, #0
 800940e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009410:	4b34      	ldr	r3, [pc, #208]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009416:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009418:	4b32      	ldr	r3, [pc, #200]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 800941a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800941e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009420:	4b30      	ldr	r3, [pc, #192]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009426:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8009428:	4b2e      	ldr	r3, [pc, #184]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 800942a:	2200      	movs	r2, #0
 800942c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800942e:	4b2d      	ldr	r3, [pc, #180]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009430:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009434:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009436:	4b2b      	ldr	r3, [pc, #172]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009438:	2200      	movs	r2, #0
 800943a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800943c:	4829      	ldr	r0, [pc, #164]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 800943e:	f7f8 ff19 	bl	8002274 <HAL_DMA_Init>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_SPI_MspInit+0x3a0>
      Error_Handler();
 8009448:	f7ff fd36 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a25      	ldr	r2, [pc, #148]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009450:	659a      	str	r2, [r3, #88]	; 0x58
 8009452:	4a24      	ldr	r2, [pc, #144]	; (80094e4 <HAL_SPI_MspInit+0x438>)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8009458:	4b24      	ldr	r3, [pc, #144]	; (80094ec <HAL_SPI_MspInit+0x440>)
 800945a:	4a25      	ldr	r2, [pc, #148]	; (80094f0 <HAL_SPI_MspInit+0x444>)
 800945c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800945e:	4b23      	ldr	r3, [pc, #140]	; (80094ec <HAL_SPI_MspInit+0x440>)
 8009460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009464:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009466:	4b21      	ldr	r3, [pc, #132]	; (80094ec <HAL_SPI_MspInit+0x440>)
 8009468:	2240      	movs	r2, #64	; 0x40
 800946a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800946c:	4b1f      	ldr	r3, [pc, #124]	; (80094ec <HAL_SPI_MspInit+0x440>)
 800946e:	2200      	movs	r2, #0
 8009470:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009472:	4b1e      	ldr	r3, [pc, #120]	; (80094ec <HAL_SPI_MspInit+0x440>)
 8009474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009478:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800947a:	4b1c      	ldr	r3, [pc, #112]	; (80094ec <HAL_SPI_MspInit+0x440>)
 800947c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009480:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <HAL_SPI_MspInit+0x440>)
 8009484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009488:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800948a:	4b18      	ldr	r3, [pc, #96]	; (80094ec <HAL_SPI_MspInit+0x440>)
 800948c:	2200      	movs	r2, #0
 800948e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <HAL_SPI_MspInit+0x440>)
 8009492:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009496:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <HAL_SPI_MspInit+0x440>)
 800949a:	2200      	movs	r2, #0
 800949c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800949e:	4813      	ldr	r0, [pc, #76]	; (80094ec <HAL_SPI_MspInit+0x440>)
 80094a0:	f7f8 fee8 	bl	8002274 <HAL_DMA_Init>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_SPI_MspInit+0x402>
      Error_Handler();
 80094aa:	f7ff fd05 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a0e      	ldr	r2, [pc, #56]	; (80094ec <HAL_SPI_MspInit+0x440>)
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54
 80094b4:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <HAL_SPI_MspInit+0x440>)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80094ba:	e06d      	b.n	8009598 <HAL_SPI_MspInit+0x4ec>
 80094bc:	40003c00 	.word	0x40003c00
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40020400 	.word	0x40020400
 80094c8:	40020800 	.word	0x40020800
 80094cc:	20009d0c 	.word	0x20009d0c
 80094d0:	40026010 	.word	0x40026010
 80094d4:	20009ac4 	.word	0x20009ac4
 80094d8:	40026088 	.word	0x40026088
 80094dc:	40013400 	.word	0x40013400
 80094e0:	40021000 	.word	0x40021000
 80094e4:	2000999c 	.word	0x2000999c
 80094e8:	40026410 	.word	0x40026410
 80094ec:	20009b24 	.word	0x20009b24
 80094f0:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a29      	ldr	r2, [pc, #164]	; (80095a0 <HAL_SPI_MspInit+0x4f4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d14c      	bne.n	8009598 <HAL_SPI_MspInit+0x4ec>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80094fe:	4b29      	ldr	r3, [pc, #164]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009502:	4a28      	ldr	r2, [pc, #160]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009508:	6453      	str	r3, [r2, #68]	; 0x44
 800950a:	4b26      	ldr	r3, [pc, #152]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009516:	4b23      	ldr	r3, [pc, #140]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	4a22      	ldr	r2, [pc, #136]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 800951c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009520:	6313      	str	r3, [r2, #48]	; 0x30
 8009522:	4b20      	ldr	r3, [pc, #128]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800952e:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	6313      	str	r3, [r2, #48]	; 0x30
 800953a:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <HAL_SPI_MspInit+0x4f8>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8009546:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800954c:	2302      	movs	r3, #2
 800954e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009554:	2303      	movs	r3, #3
 8009556:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009558:	2305      	movs	r3, #5
 800955a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800955c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009560:	4619      	mov	r1, r3
 8009562:	4811      	ldr	r0, [pc, #68]	; (80095a8 <HAL_SPI_MspInit+0x4fc>)
 8009564:	f7f9 fa8e 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009568:	2308      	movs	r3, #8
 800956a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800956c:	2302      	movs	r3, #2
 800956e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009570:	2300      	movs	r3, #0
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009574:	2303      	movs	r3, #3
 8009576:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8009578:	2308      	movs	r3, #8
 800957a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800957c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009580:	4619      	mov	r1, r3
 8009582:	480a      	ldr	r0, [pc, #40]	; (80095ac <HAL_SPI_MspInit+0x500>)
 8009584:	f7f9 fa7e 	bl	8002a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8009588:	2200      	movs	r2, #0
 800958a:	2105      	movs	r1, #5
 800958c:	2056      	movs	r0, #86	; 0x56
 800958e:	f7f8 fe47 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8009592:	2056      	movs	r0, #86	; 0x56
 8009594:	f7f8 fe60 	bl	8002258 <HAL_NVIC_EnableIRQ>
}
 8009598:	bf00      	nop
 800959a:	3748      	adds	r7, #72	; 0x48
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40015400 	.word	0x40015400
 80095a4:	40023800 	.word	0x40023800
 80095a8:	40021800 	.word	0x40021800
 80095ac:	40020400 	.word	0x40020400

080095b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80095b6:	4b11      	ldr	r3, [pc, #68]	; (80095fc <HAL_MspInit+0x4c>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	4a10      	ldr	r2, [pc, #64]	; (80095fc <HAL_MspInit+0x4c>)
 80095bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c0:	6413      	str	r3, [r2, #64]	; 0x40
 80095c2:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <HAL_MspInit+0x4c>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ca:	607b      	str	r3, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ce:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <HAL_MspInit+0x4c>)
 80095d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d2:	4a0a      	ldr	r2, [pc, #40]	; (80095fc <HAL_MspInit+0x4c>)
 80095d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095d8:	6453      	str	r3, [r2, #68]	; 0x44
 80095da:	4b08      	ldr	r3, [pc, #32]	; (80095fc <HAL_MspInit+0x4c>)
 80095dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80095e6:	2200      	movs	r2, #0
 80095e8:	210f      	movs	r1, #15
 80095ea:	f06f 0001 	mvn.w	r0, #1
 80095ee:	f7f8 fe17 	bl	8002220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	40023800 	.word	0x40023800

08009600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08c      	sub	sp, #48	; 0x30
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8009610:	2200      	movs	r2, #0
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	2032      	movs	r0, #50	; 0x32
 8009616:	f7f8 fe03 	bl	8002220 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800961a:	2032      	movs	r0, #50	; 0x32
 800961c:	f7f8 fe1c 	bl	8002258 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <HAL_InitTick+0xa0>)
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	4a1e      	ldr	r2, [pc, #120]	; (80096a0 <HAL_InitTick+0xa0>)
 8009626:	f043 0308 	orr.w	r3, r3, #8
 800962a:	6413      	str	r3, [r2, #64]	; 0x40
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <HAL_InitTick+0xa0>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009638:	f107 0210 	add.w	r2, r7, #16
 800963c:	f107 0314 	add.w	r3, r7, #20
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7fa f9b2 	bl	80039ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009648:	f7fa f988 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 800964c:	4603      	mov	r3, r0
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	4a13      	ldr	r2, [pc, #76]	; (80096a4 <HAL_InitTick+0xa4>)
 8009656:	fba2 2303 	umull	r2, r3, r2, r3
 800965a:	0c9b      	lsrs	r3, r3, #18
 800965c:	3b01      	subs	r3, #1
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8009660:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <HAL_InitTick+0xa8>)
 8009662:	4a12      	ldr	r2, [pc, #72]	; (80096ac <HAL_InitTick+0xac>)
 8009664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_InitTick+0xa8>)
 8009668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800966c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800966e:	4a0e      	ldr	r2, [pc, #56]	; (80096a8 <HAL_InitTick+0xa8>)
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8009674:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <HAL_InitTick+0xa8>)
 8009676:	2200      	movs	r2, #0
 8009678:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <HAL_InitTick+0xa8>)
 800967c:	2200      	movs	r2, #0
 800967e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8009680:	4809      	ldr	r0, [pc, #36]	; (80096a8 <HAL_InitTick+0xa8>)
 8009682:	f7fb fd97 	bl	80051b4 <HAL_TIM_Base_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800968c:	4806      	ldr	r0, [pc, #24]	; (80096a8 <HAL_InitTick+0xa8>)
 800968e:	f7fb fdbd 	bl	800520c <HAL_TIM_Base_Start_IT>
 8009692:	4603      	mov	r3, r0
 8009694:	e000      	b.n	8009698 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
}
 8009698:	4618      	mov	r0, r3
 800969a:	3730      	adds	r7, #48	; 0x30
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	40023800 	.word	0x40023800
 80096a4:	431bde83 	.word	0x431bde83
 80096a8:	20009d6c 	.word	0x20009d6c
 80096ac:	40000c00 	.word	0x40000c00

080096b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096be:	b480      	push	{r7}
 80096c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096c2:	e7fe      	b.n	80096c2 <HardFault_Handler+0x4>

080096c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096c8:	e7fe      	b.n	80096c8 <MemManage_Handler+0x4>

080096ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096ca:	b480      	push	{r7}
 80096cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096ce:	e7fe      	b.n	80096ce <BusFault_Handler+0x4>

080096d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096d4:	e7fe      	b.n	80096d4 <UsageFault_Handler+0x4>

080096d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096d6:	b480      	push	{r7}
 80096d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80096da:	bf00      	nop
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80096e8:	2001      	movs	r0, #1
 80096ea:	f7f9 fb8f 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80096ee:	bf00      	nop
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80096f6:	2002      	movs	r0, #2
 80096f8:	f7f9 fb88 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}

08009700 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009704:	2004      	movs	r0, #4
 8009706:	f7f9 fb81 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}

0800970e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8009712:	2008      	movs	r0, #8
 8009714:	f7f9 fb7a 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009718:	bf00      	nop
 800971a:	bd80      	pop	{r7, pc}

0800971c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009720:	2010      	movs	r0, #16
 8009722:	f7f9 fb73 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009726:	bf00      	nop
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8009730:	4802      	ldr	r0, [pc, #8]	; (800973c <DMA1_Stream0_IRQHandler+0x10>)
 8009732:	f7f8 ff3f 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009736:	bf00      	nop
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20009d0c 	.word	0x20009d0c

08009740 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009744:	4802      	ldr	r0, [pc, #8]	; (8009750 <DMA1_Stream1_IRQHandler+0x10>)
 8009746:	f7f8 ff35 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800974a:	bf00      	nop
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2000a02c 	.word	0x2000a02c

08009754 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009758:	4802      	ldr	r0, [pc, #8]	; (8009764 <DMA1_Stream4_IRQHandler+0x10>)
 800975a:	f7f8 ff2b 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800975e:	bf00      	nop
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	2000a10c 	.word	0x2000a10c

08009768 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800976c:	4802      	ldr	r0, [pc, #8]	; (8009778 <DMA1_Stream5_IRQHandler+0x10>)
 800976e:	f7f8 ff21 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009772:	bf00      	nop
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20009ac4 	.word	0x20009ac4

0800977c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009780:	4802      	ldr	r0, [pc, #8]	; (800978c <DMA1_Stream6_IRQHandler+0x10>)
 8009782:	f7f8 ff17 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009786:	bf00      	nop
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200098f0 	.word	0x200098f0

08009790 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009794:	4802      	ldr	r0, [pc, #8]	; (80097a0 <CAN1_RX0_IRQHandler+0x10>)
 8009796:	f7f8 fa6b 	bl	8001c70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800979a:	bf00      	nop
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20001818 	.word	0x20001818

080097a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80097a8:	4802      	ldr	r0, [pc, #8]	; (80097b4 <CAN1_RX1_IRQHandler+0x10>)
 80097aa:	f7f8 fa61 	bl	8001c70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80097ae:	bf00      	nop
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20001818 	.word	0x20001818

080097b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80097bc:	2020      	movs	r0, #32
 80097be:	f7f9 fb25 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80097c2:	bf00      	nop
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80097ce:	f7fb fe0f 	bl	80053f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80097d2:	4803      	ldr	r0, [pc, #12]	; (80097e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80097d4:	f7fb fe0c 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80097d8:	bf00      	nop
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20009eec 	.word	0x20009eec
 80097e0:	20009e2c 	.word	0x20009e2c

080097e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  myUsart1IRQ();
 80097e8:	f004 f9e8 	bl	800dbbc <myUsart1IRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80097ec:	4802      	ldr	r0, [pc, #8]	; (80097f8 <USART1_IRQHandler+0x14>)
 80097ee:	f7fc ff1d 	bl	800662c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80097f2:	bf00      	nop
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	2000a16c 	.word	0x2000a16c

080097fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart3);
 8009800:	4803      	ldr	r0, [pc, #12]	; (8009810 <USART3_IRQHandler+0x14>)
 8009802:	f004 f87d 	bl	800d900 <HAL_UART_RxIdleCallback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009806:	4802      	ldr	r0, [pc, #8]	; (8009810 <USART3_IRQHandler+0x14>)
 8009808:	f7fc ff10 	bl	800662c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2000a08c 	.word	0x2000a08c

08009814 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009818:	4802      	ldr	r0, [pc, #8]	; (8009824 <TIM5_IRQHandler+0x10>)
 800981a:	f7fb fde9 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800981e:	bf00      	nop
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20009d6c 	.word	0x20009d6c

08009828 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800982c:	4802      	ldr	r0, [pc, #8]	; (8009838 <DMA2_Stream0_IRQHandler+0x10>)
 800982e:	f7f8 fec1 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009832:	bf00      	nop
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	2000999c 	.word	0x2000999c

0800983c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009840:	4802      	ldr	r0, [pc, #8]	; (800984c <DMA2_Stream1_IRQHandler+0x10>)
 8009842:	f7f8 feb7 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009846:	bf00      	nop
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20009b24 	.word	0x20009b24

08009850 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009854:	4802      	ldr	r0, [pc, #8]	; (8009860 <DMA2_Stream2_IRQHandler+0x10>)
 8009856:	f7f8 fead 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800985a:	bf00      	nop
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20009c4c 	.word	0x20009c4c

08009864 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009868:	4802      	ldr	r0, [pc, #8]	; (8009874 <DMA2_Stream3_IRQHandler+0x10>)
 800986a:	f7f8 fea3 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800986e:	bf00      	nop
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20009cac 	.word	0x20009cac

08009878 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800987c:	4802      	ldr	r0, [pc, #8]	; (8009888 <DMA2_Stream4_IRQHandler+0x10>)
 800987e:	f7f8 fe99 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	200017b8 	.word	0x200017b8

0800988c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8009890:	4802      	ldr	r0, [pc, #8]	; (800989c <SPI6_IRQHandler+0x10>)
 8009892:	f7fb f915 	bl	8004ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	200099fc 	.word	0x200099fc

080098a0 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80098a4:	f7fd fd13 	bl	80072ce <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80098b0:	4b15      	ldr	r3, [pc, #84]	; (8009908 <SystemInit+0x5c>)
 80098b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b6:	4a14      	ldr	r2, [pc, #80]	; (8009908 <SystemInit+0x5c>)
 80098b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80098c0:	4b12      	ldr	r3, [pc, #72]	; (800990c <SystemInit+0x60>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a11      	ldr	r2, [pc, #68]	; (800990c <SystemInit+0x60>)
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80098cc:	4b0f      	ldr	r3, [pc, #60]	; (800990c <SystemInit+0x60>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80098d2:	4b0e      	ldr	r3, [pc, #56]	; (800990c <SystemInit+0x60>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	490d      	ldr	r1, [pc, #52]	; (800990c <SystemInit+0x60>)
 80098d8:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <SystemInit+0x64>)
 80098da:	4013      	ands	r3, r2
 80098dc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80098de:	4b0b      	ldr	r3, [pc, #44]	; (800990c <SystemInit+0x60>)
 80098e0:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <SystemInit+0x68>)
 80098e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <SystemInit+0x60>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a08      	ldr	r2, [pc, #32]	; (800990c <SystemInit+0x60>)
 80098ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <SystemInit+0x60>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80098f6:	4b04      	ldr	r3, [pc, #16]	; (8009908 <SystemInit+0x5c>)
 80098f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098fc:	609a      	str	r2, [r3, #8]
#endif
}
 80098fe:	bf00      	nop
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	e000ed00 	.word	0xe000ed00
 800990c:	40023800 	.word	0x40023800
 8009910:	fef6ffff 	.word	0xfef6ffff
 8009914:	24003010 	.word	0x24003010

08009918 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b09a      	sub	sp, #104	; 0x68
 800991c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800991e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	605a      	str	r2, [r3, #4]
 8009928:	609a      	str	r2, [r3, #8]
 800992a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800992c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	605a      	str	r2, [r3, #4]
 8009936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	60da      	str	r2, [r3, #12]
 8009946:	611a      	str	r2, [r3, #16]
 8009948:	615a      	str	r2, [r3, #20]
 800994a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	222c      	movs	r2, #44	; 0x2c
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f004 fd85 	bl	800e462 <memset>

  htim1.Instance = TIM1;
 8009958:	4b4a      	ldr	r3, [pc, #296]	; (8009a84 <MX_TIM1_Init+0x16c>)
 800995a:	4a4b      	ldr	r2, [pc, #300]	; (8009a88 <MX_TIM1_Init+0x170>)
 800995c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 800995e:	4b49      	ldr	r3, [pc, #292]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009960:	f245 425f 	movw	r2, #21599	; 0x545f
 8009964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009966:	4b47      	ldr	r3, [pc, #284]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009968:	2200      	movs	r2, #0
 800996a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800996c:	4b45      	ldr	r3, [pc, #276]	; (8009a84 <MX_TIM1_Init+0x16c>)
 800996e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009974:	4b43      	ldr	r3, [pc, #268]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009976:	2200      	movs	r2, #0
 8009978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800997a:	4b42      	ldr	r3, [pc, #264]	; (8009a84 <MX_TIM1_Init+0x16c>)
 800997c:	2200      	movs	r2, #0
 800997e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009980:	4b40      	ldr	r3, [pc, #256]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009982:	2200      	movs	r2, #0
 8009984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009986:	483f      	ldr	r0, [pc, #252]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009988:	f7fb fc14 	bl	80051b4 <HAL_TIM_Base_Init>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8009992:	f7ff fa91 	bl	8008eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800999a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800999c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099a0:	4619      	mov	r1, r3
 80099a2:	4838      	ldr	r0, [pc, #224]	; (8009a84 <MX_TIM1_Init+0x16c>)
 80099a4:	f7fb ff5c 	bl	8005860 <HAL_TIM_ConfigClockSource>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80099ae:	f7ff fa83 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80099b2:	4834      	ldr	r0, [pc, #208]	; (8009a84 <MX_TIM1_Init+0x16c>)
 80099b4:	f7fb fc54 	bl	8005260 <HAL_TIM_PWM_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80099be:	f7ff fa7b 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099c2:	2300      	movs	r3, #0
 80099c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80099c6:	2300      	movs	r3, #0
 80099c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80099ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80099d2:	4619      	mov	r1, r3
 80099d4:	482b      	ldr	r0, [pc, #172]	; (8009a84 <MX_TIM1_Init+0x16c>)
 80099d6:	f7fc fbe3 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80099e0:	f7ff fa6a 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80099e4:	2360      	movs	r3, #96	; 0x60
 80099e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80099f0:	2300      	movs	r3, #0
 80099f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80099f8:	2300      	movs	r3, #0
 80099fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80099fc:	2300      	movs	r3, #0
 80099fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a04:	2200      	movs	r2, #0
 8009a06:	4619      	mov	r1, r3
 8009a08:	481e      	ldr	r0, [pc, #120]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009a0a:	f7fb fe11 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009a14:	f7ff fa50 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4818      	ldr	r0, [pc, #96]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009a22:	f7fb fe05 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009a2c:	f7ff fa44 	bl	8008eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009a30:	2300      	movs	r3, #0
 8009a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009a60:	1d3b      	adds	r3, r7, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	4807      	ldr	r0, [pc, #28]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009a66:	f7fc fbf7 	bl	8006258 <HAL_TIMEx_ConfigBreakDeadTime>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009a70:	f7ff fa22 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009a74:	4803      	ldr	r0, [pc, #12]	; (8009a84 <MX_TIM1_Init+0x16c>)
 8009a76:	f000 fcc3 	bl	800a400 <HAL_TIM_MspPostInit>

}
 8009a7a:	bf00      	nop
 8009a7c:	3768      	adds	r7, #104	; 0x68
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20009eec 	.word	0x20009eec
 8009a88:	40010000 	.word	0x40010000

08009a8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08e      	sub	sp, #56	; 0x38
 8009a90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	605a      	str	r2, [r3, #4]
 8009a9c:	609a      	str	r2, [r3, #8]
 8009a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009aa0:	f107 031c 	add.w	r3, r7, #28
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009aac:	463b      	mov	r3, r7
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	609a      	str	r2, [r3, #8]
 8009ab6:	60da      	str	r2, [r3, #12]
 8009ab8:	611a      	str	r2, [r3, #16]
 8009aba:	615a      	str	r2, [r3, #20]
 8009abc:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8009abe:	4b39      	ldr	r3, [pc, #228]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8009ac6:	4b37      	ldr	r3, [pc, #220]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ac8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ace:	4b35      	ldr	r3, [pc, #212]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009ad4:	4b33      	ldr	r3, [pc, #204]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ada:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009adc:	4b31      	ldr	r3, [pc, #196]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ae2:	4b30      	ldr	r3, [pc, #192]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009ae8:	482e      	ldr	r0, [pc, #184]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009aea:	f7fb fb63 	bl	80051b4 <HAL_TIM_Base_Init>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009af4:	f7ff f9e0 	bl	8008eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b02:	4619      	mov	r1, r3
 8009b04:	4827      	ldr	r0, [pc, #156]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b06:	f7fb feab 	bl	8005860 <HAL_TIM_ConfigClockSource>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009b10:	f7ff f9d2 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009b14:	4823      	ldr	r0, [pc, #140]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b16:	f7fb fba3 	bl	8005260 <HAL_TIM_PWM_Init>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009b20:	f7ff f9ca 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009b2c:	f107 031c 	add.w	r3, r7, #28
 8009b30:	4619      	mov	r1, r3
 8009b32:	481c      	ldr	r0, [pc, #112]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b34:	f7fc fb34 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009b3e:	f7ff f9bb 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b42:	2360      	movs	r3, #96	; 0x60
 8009b44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b52:	463b      	mov	r3, r7
 8009b54:	2200      	movs	r2, #0
 8009b56:	4619      	mov	r1, r3
 8009b58:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b5a:	f7fb fd69 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009b64:	f7ff f9a8 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009b68:	463b      	mov	r3, r7
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	480d      	ldr	r0, [pc, #52]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b70:	f7fb fd5e 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009b7a:	f7ff f99d 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009b7e:	463b      	mov	r3, r7
 8009b80:	220c      	movs	r2, #12
 8009b82:	4619      	mov	r1, r3
 8009b84:	4807      	ldr	r0, [pc, #28]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b86:	f7fb fd53 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009b90:	f7ff f992 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009b94:	4803      	ldr	r0, [pc, #12]	; (8009ba4 <MX_TIM2_Init+0x118>)
 8009b96:	f000 fc33 	bl	800a400 <HAL_TIM_MspPostInit>

}
 8009b9a:	bf00      	nop
 8009b9c:	3738      	adds	r7, #56	; 0x38
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20009f6c 	.word	0x20009f6c

08009ba8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bae:	f107 031c 	add.w	r3, r7, #28
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	605a      	str	r2, [r3, #4]
 8009bb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009bba:	463b      	mov	r3, r7
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	605a      	str	r2, [r3, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
 8009bc4:	60da      	str	r2, [r3, #12]
 8009bc6:	611a      	str	r2, [r3, #16]
 8009bc8:	615a      	str	r2, [r3, #20]
 8009bca:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009bcc:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bce:	4a33      	ldr	r2, [pc, #204]	; (8009c9c <MX_TIM3_Init+0xf4>)
 8009bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8009bd2:	4b31      	ldr	r3, [pc, #196]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bd4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009bd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009be0:	4b2d      	ldr	r3, [pc, #180]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009be6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009be8:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bee:	4b2a      	ldr	r3, [pc, #168]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009bf4:	4828      	ldr	r0, [pc, #160]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009bf6:	f7fb fb33 	bl	8005260 <HAL_TIM_PWM_Init>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009c00:	f7ff f95a 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009c0c:	f107 031c 	add.w	r3, r7, #28
 8009c10:	4619      	mov	r1, r3
 8009c12:	4821      	ldr	r0, [pc, #132]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c14:	f7fc fac4 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009c1e:	f7ff f94b 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c22:	2360      	movs	r3, #96	; 0x60
 8009c24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c32:	463b      	mov	r3, r7
 8009c34:	2200      	movs	r2, #0
 8009c36:	4619      	mov	r1, r3
 8009c38:	4817      	ldr	r0, [pc, #92]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c3a:	f7fb fcf9 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009c44:	f7ff f938 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009c48:	463b      	mov	r3, r7
 8009c4a:	2204      	movs	r2, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4812      	ldr	r0, [pc, #72]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c50:	f7fb fcee 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009c5a:	f7ff f92d 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009c5e:	463b      	mov	r3, r7
 8009c60:	2208      	movs	r2, #8
 8009c62:	4619      	mov	r1, r3
 8009c64:	480c      	ldr	r0, [pc, #48]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c66:	f7fb fce3 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009c70:	f7ff f922 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009c74:	463b      	mov	r3, r7
 8009c76:	220c      	movs	r2, #12
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4807      	ldr	r0, [pc, #28]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c7c:	f7fb fcd8 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009c86:	f7ff f917 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009c8a:	4803      	ldr	r0, [pc, #12]	; (8009c98 <MX_TIM3_Init+0xf0>)
 8009c8c:	f000 fbb8 	bl	800a400 <HAL_TIM_MspPostInit>

}
 8009c90:	bf00      	nop
 8009c92:	3728      	adds	r7, #40	; 0x28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20009e6c 	.word	0x20009e6c
 8009c9c:	40000400 	.word	0x40000400

08009ca0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ca6:	f107 031c 	add.w	r3, r7, #28
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	605a      	str	r2, [r3, #4]
 8009cb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	609a      	str	r2, [r3, #8]
 8009cbc:	60da      	str	r2, [r3, #12]
 8009cbe:	611a      	str	r2, [r3, #16]
 8009cc0:	615a      	str	r2, [r3, #20]
 8009cc2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009cc4:	4b32      	ldr	r3, [pc, #200]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009cc6:	4a33      	ldr	r2, [pc, #204]	; (8009d94 <MX_TIM4_Init+0xf4>)
 8009cc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009cca:	4b31      	ldr	r3, [pc, #196]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009ccc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009cd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd2:	4b2f      	ldr	r3, [pc, #188]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009cd8:	4b2d      	ldr	r3, [pc, #180]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009cde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ce0:	4b2b      	ldr	r3, [pc, #172]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009cec:	4828      	ldr	r0, [pc, #160]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009cee:	f7fb fab7 	bl	8005260 <HAL_TIM_PWM_Init>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009cf8:	f7ff f8de 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d04:	f107 031c 	add.w	r3, r7, #28
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4821      	ldr	r0, [pc, #132]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d0c:	f7fc fa48 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009d16:	f7ff f8cf 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d1a:	2360      	movs	r3, #96	; 0x60
 8009d1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4817      	ldr	r0, [pc, #92]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d32:	f7fb fc7d 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009d3c:	f7ff f8bc 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d40:	463b      	mov	r3, r7
 8009d42:	2204      	movs	r2, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4812      	ldr	r0, [pc, #72]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d48:	f7fb fc72 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009d52:	f7ff f8b1 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009d56:	463b      	mov	r3, r7
 8009d58:	2208      	movs	r2, #8
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	480c      	ldr	r0, [pc, #48]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d5e:	f7fb fc67 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009d68:	f7ff f8a6 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009d6c:	463b      	mov	r3, r7
 8009d6e:	220c      	movs	r2, #12
 8009d70:	4619      	mov	r1, r3
 8009d72:	4807      	ldr	r0, [pc, #28]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d74:	f7fb fc5c 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009d7e:	f7ff f89b 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009d82:	4803      	ldr	r0, [pc, #12]	; (8009d90 <MX_TIM4_Init+0xf0>)
 8009d84:	f000 fb3c 	bl	800a400 <HAL_TIM_MspPostInit>

}
 8009d88:	bf00      	nop
 8009d8a:	3728      	adds	r7, #40	; 0x28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20009dec 	.word	0x20009dec
 8009d94:	40000800 	.word	0x40000800

08009d98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009daa:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <MX_TIM7_Init+0x68>)
 8009dac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009db4:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009dba:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dc2:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009dc8:	480c      	ldr	r0, [pc, #48]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009dca:	f7fb f9f3 	bl	80051b4 <HAL_TIM_Base_Init>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009dd4:	f7ff f870 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009de0:	1d3b      	adds	r3, r7, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	4805      	ldr	r0, [pc, #20]	; (8009dfc <MX_TIM7_Init+0x64>)
 8009de6:	f7fc f9db 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009df0:	f7ff f862 	bl	8008eb8 <Error_Handler>
  }

}
 8009df4:	bf00      	nop
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20009fec 	.word	0x20009fec
 8009e00:	40001400 	.word	0x40001400

08009e04 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b09a      	sub	sp, #104	; 0x68
 8009e08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	605a      	str	r2, [r3, #4]
 8009e14:	609a      	str	r2, [r3, #8]
 8009e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	605a      	str	r2, [r3, #4]
 8009e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	605a      	str	r2, [r3, #4]
 8009e2e:	609a      	str	r2, [r3, #8]
 8009e30:	60da      	str	r2, [r3, #12]
 8009e32:	611a      	str	r2, [r3, #16]
 8009e34:	615a      	str	r2, [r3, #20]
 8009e36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e38:	1d3b      	adds	r3, r7, #4
 8009e3a:	222c      	movs	r2, #44	; 0x2c
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f004 fb0f 	bl	800e462 <memset>

  htim8.Instance = TIM8;
 8009e44:	4b4a      	ldr	r3, [pc, #296]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e46:	4a4b      	ldr	r2, [pc, #300]	; (8009f74 <MX_TIM8_Init+0x170>)
 8009e48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009e4a:	4b49      	ldr	r3, [pc, #292]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e4c:	f245 425f 	movw	r2, #21599	; 0x545f
 8009e50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e52:	4b47      	ldr	r3, [pc, #284]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009e58:	4b45      	ldr	r3, [pc, #276]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009e5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e60:	4b43      	ldr	r3, [pc, #268]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009e66:	4b42      	ldr	r3, [pc, #264]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e6c:	4b40      	ldr	r3, [pc, #256]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009e72:	483f      	ldr	r0, [pc, #252]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e74:	f7fb f99e 	bl	80051b4 <HAL_TIM_Base_Init>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009e7e:	f7ff f81b 	bl	8008eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e86:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4838      	ldr	r0, [pc, #224]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009e90:	f7fb fce6 	bl	8005860 <HAL_TIM_ConfigClockSource>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009e9a:	f7ff f80d 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009e9e:	4834      	ldr	r0, [pc, #208]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009ea0:	f7fb f9de 	bl	8005260 <HAL_TIM_PWM_Init>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009eaa:	f7ff f805 	bl	8008eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009eba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	482b      	ldr	r0, [pc, #172]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009ec2:	f7fc f96d 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009ecc:	f7fe fff4 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ed0:	2360      	movs	r3, #96	; 0x60
 8009ed2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009edc:	2300      	movs	r3, #0
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	481e      	ldr	r0, [pc, #120]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009ef6:	f7fb fb9b 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009f00:	f7fe ffda 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f08:	2204      	movs	r2, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4818      	ldr	r0, [pc, #96]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009f0e:	f7fb fb8f 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009f18:	f7fe ffce 	bl	8008eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009f4c:	1d3b      	adds	r3, r7, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4807      	ldr	r0, [pc, #28]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009f52:	f7fc f981 	bl	8006258 <HAL_TIMEx_ConfigBreakDeadTime>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009f5c:	f7fe ffac 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009f60:	4803      	ldr	r0, [pc, #12]	; (8009f70 <MX_TIM8_Init+0x16c>)
 8009f62:	f000 fa4d 	bl	800a400 <HAL_TIM_MspPostInit>

}
 8009f66:	bf00      	nop
 8009f68:	3768      	adds	r7, #104	; 0x68
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20009dac 	.word	0x20009dac
 8009f74:	40010400 	.word	0x40010400

08009f78 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08c      	sub	sp, #48	; 0x30
 8009f7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f7e:	f107 0320 	add.w	r3, r7, #32
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	605a      	str	r2, [r3, #4]
 8009f88:	609a      	str	r2, [r3, #8]
 8009f8a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f8c:	1d3b      	adds	r3, r7, #4
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	605a      	str	r2, [r3, #4]
 8009f94:	609a      	str	r2, [r3, #8]
 8009f96:	60da      	str	r2, [r3, #12]
 8009f98:	611a      	str	r2, [r3, #16]
 8009f9a:	615a      	str	r2, [r3, #20]
 8009f9c:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009f9e:	4b2b      	ldr	r3, [pc, #172]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fa0:	4a2b      	ldr	r2, [pc, #172]	; (800a050 <MX_TIM9_Init+0xd8>)
 8009fa2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 8009fa4:	4b29      	ldr	r3, [pc, #164]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fa6:	f245 425f 	movw	r2, #21599	; 0x545f
 8009faa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fac:	4b27      	ldr	r3, [pc, #156]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8009fb2:	4b26      	ldr	r3, [pc, #152]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009fb8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fba:	4b24      	ldr	r3, [pc, #144]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fc0:	4b22      	ldr	r3, [pc, #136]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009fc6:	4821      	ldr	r0, [pc, #132]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fc8:	f7fb f8f4 	bl	80051b4 <HAL_TIM_Base_Init>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009fd2:	f7fe ff71 	bl	8008eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fda:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009fdc:	f107 0320 	add.w	r3, r7, #32
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	481a      	ldr	r0, [pc, #104]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009fe4:	f7fb fc3c 	bl	8005860 <HAL_TIM_ConfigClockSource>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009fee:	f7fe ff63 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009ff2:	4816      	ldr	r0, [pc, #88]	; (800a04c <MX_TIM9_Init+0xd4>)
 8009ff4:	f7fb f934 	bl	8005260 <HAL_TIM_PWM_Init>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009ffe:	f7fe ff5b 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a002:	2360      	movs	r3, #96	; 0x60
 800a004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	2200      	movs	r2, #0
 800a016:	4619      	mov	r1, r3
 800a018:	480c      	ldr	r0, [pc, #48]	; (800a04c <MX_TIM9_Init+0xd4>)
 800a01a:	f7fb fb09 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800a024:	f7fe ff48 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a028:	1d3b      	adds	r3, r7, #4
 800a02a:	2204      	movs	r2, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4807      	ldr	r0, [pc, #28]	; (800a04c <MX_TIM9_Init+0xd4>)
 800a030:	f7fb fafe 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800a03a:	f7fe ff3d 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800a03e:	4803      	ldr	r0, [pc, #12]	; (800a04c <MX_TIM9_Init+0xd4>)
 800a040:	f000 f9de 	bl	800a400 <HAL_TIM_MspPostInit>

}
 800a044:	bf00      	nop
 800a046:	3730      	adds	r7, #48	; 0x30
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20009f2c 	.word	0x20009f2c
 800a050:	40014000 	.word	0x40014000

0800a054 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a05a:	1d3b      	adds	r3, r7, #4
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	609a      	str	r2, [r3, #8]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	611a      	str	r2, [r3, #16]
 800a068:	615a      	str	r2, [r3, #20]
 800a06a:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800a06c:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a06e:	4a1f      	ldr	r2, [pc, #124]	; (800a0ec <MX_TIM10_Init+0x98>)
 800a070:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800a072:	4b1d      	ldr	r3, [pc, #116]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a074:	f245 425f 	movw	r2, #21599	; 0x545f
 800a078:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a07a:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800a080:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a082:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a086:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a088:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a08e:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a090:	2200      	movs	r2, #0
 800a092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a094:	4814      	ldr	r0, [pc, #80]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a096:	f7fb f88d 	bl	80051b4 <HAL_TIM_Base_Init>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800a0a0:	f7fe ff0a 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800a0a4:	4810      	ldr	r0, [pc, #64]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a0a6:	f7fb f8db 	bl	8005260 <HAL_TIM_PWM_Init>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800a0b0:	f7fe ff02 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a0b4:	2360      	movs	r3, #96	; 0x60
 800a0b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a0c4:	1d3b      	adds	r3, r7, #4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4807      	ldr	r0, [pc, #28]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a0cc:	f7fb fab0 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800a0d6:	f7fe feef 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800a0da:	4803      	ldr	r0, [pc, #12]	; (800a0e8 <MX_TIM10_Init+0x94>)
 800a0dc:	f000 f990 	bl	800a400 <HAL_TIM_MspPostInit>

}
 800a0e0:	bf00      	nop
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20009e2c 	.word	0x20009e2c
 800a0ec:	40014400 	.word	0x40014400

0800a0f0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	605a      	str	r2, [r3, #4]
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	611a      	str	r2, [r3, #16]
 800a104:	615a      	str	r2, [r3, #20]
 800a106:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 800a108:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <MX_TIM11_Init+0x94>)
 800a10a:	4a1f      	ldr	r2, [pc, #124]	; (800a188 <MX_TIM11_Init+0x98>)
 800a10c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 800a10e:	4b1d      	ldr	r3, [pc, #116]	; (800a184 <MX_TIM11_Init+0x94>)
 800a110:	f245 425f 	movw	r2, #21599	; 0x545f
 800a114:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a116:	4b1b      	ldr	r3, [pc, #108]	; (800a184 <MX_TIM11_Init+0x94>)
 800a118:	2200      	movs	r2, #0
 800a11a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800a11c:	4b19      	ldr	r3, [pc, #100]	; (800a184 <MX_TIM11_Init+0x94>)
 800a11e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a122:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a124:	4b17      	ldr	r3, [pc, #92]	; (800a184 <MX_TIM11_Init+0x94>)
 800a126:	2200      	movs	r2, #0
 800a128:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a12a:	4b16      	ldr	r3, [pc, #88]	; (800a184 <MX_TIM11_Init+0x94>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a130:	4814      	ldr	r0, [pc, #80]	; (800a184 <MX_TIM11_Init+0x94>)
 800a132:	f7fb f83f 	bl	80051b4 <HAL_TIM_Base_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 800a13c:	f7fe febc 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800a140:	4810      	ldr	r0, [pc, #64]	; (800a184 <MX_TIM11_Init+0x94>)
 800a142:	f7fb f88d 	bl	8005260 <HAL_TIM_PWM_Init>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800a14c:	f7fe feb4 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a150:	2360      	movs	r3, #96	; 0x60
 800a152:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a160:	1d3b      	adds	r3, r7, #4
 800a162:	2200      	movs	r2, #0
 800a164:	4619      	mov	r1, r3
 800a166:	4807      	ldr	r0, [pc, #28]	; (800a184 <MX_TIM11_Init+0x94>)
 800a168:	f7fb fa62 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800a172:	f7fe fea1 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800a176:	4803      	ldr	r0, [pc, #12]	; (800a184 <MX_TIM11_Init+0x94>)
 800a178:	f000 f942 	bl	800a400 <HAL_TIM_MspPostInit>

}
 800a17c:	bf00      	nop
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20009eac 	.word	0x20009eac
 800a188:	40014800 	.word	0x40014800

0800a18c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a192:	1d3b      	adds	r3, r7, #4
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	611a      	str	r2, [r3, #16]
 800a1a0:	615a      	str	r2, [r3, #20]
 800a1a2:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1a6:	4a1f      	ldr	r2, [pc, #124]	; (800a224 <MX_TIM14_Init+0x98>)
 800a1a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1ac:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a1b0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800a1b8:	4b19      	ldr	r3, [pc, #100]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a1be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1c0:	4b17      	ldr	r3, [pc, #92]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1c6:	4b16      	ldr	r3, [pc, #88]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a1cc:	4814      	ldr	r0, [pc, #80]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1ce:	f7fa fff1 	bl	80051b4 <HAL_TIM_Base_Init>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800a1d8:	f7fe fe6e 	bl	8008eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800a1dc:	4810      	ldr	r0, [pc, #64]	; (800a220 <MX_TIM14_Init+0x94>)
 800a1de:	f7fb f83f 	bl	8005260 <HAL_TIM_PWM_Init>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800a1e8:	f7fe fe66 	bl	8008eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1ec:	2360      	movs	r3, #96	; 0x60
 800a1ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1fc:	1d3b      	adds	r3, r7, #4
 800a1fe:	2200      	movs	r2, #0
 800a200:	4619      	mov	r1, r3
 800a202:	4807      	ldr	r0, [pc, #28]	; (800a220 <MX_TIM14_Init+0x94>)
 800a204:	f7fb fa14 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800a20e:	f7fe fe53 	bl	8008eb8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800a212:	4803      	ldr	r0, [pc, #12]	; (800a220 <MX_TIM14_Init+0x94>)
 800a214:	f000 f8f4 	bl	800a400 <HAL_TIM_MspPostInit>

}
 800a218:	bf00      	nop
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20009fac 	.word	0x20009fac
 800a224:	40002000 	.word	0x40002000

0800a228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a50      	ldr	r2, [pc, #320]	; (800a378 <HAL_TIM_Base_MspInit+0x150>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d114      	bne.n	800a264 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a23a:	4b50      	ldr	r3, [pc, #320]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23e:	4a4f      	ldr	r2, [pc, #316]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a240:	f043 0301 	orr.w	r3, r3, #1
 800a244:	6453      	str	r3, [r2, #68]	; 0x44
 800a246:	4b4d      	ldr	r3, [pc, #308]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a252:	2200      	movs	r2, #0
 800a254:	2105      	movs	r1, #5
 800a256:	2019      	movs	r0, #25
 800a258:	f7f7 ffe2 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a25c:	2019      	movs	r0, #25
 800a25e:	f7f7 fffb 	bl	8002258 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800a262:	e084      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26c:	d10c      	bne.n	800a288 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a26e:	4b43      	ldr	r3, [pc, #268]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	4a42      	ldr	r2, [pc, #264]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	6413      	str	r3, [r2, #64]	; 0x40
 800a27a:	4b40      	ldr	r3, [pc, #256]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	623b      	str	r3, [r7, #32]
 800a284:	6a3b      	ldr	r3, [r7, #32]
}
 800a286:	e072      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a3c      	ldr	r2, [pc, #240]	; (800a380 <HAL_TIM_Base_MspInit+0x158>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d10c      	bne.n	800a2ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a292:	4b3a      	ldr	r3, [pc, #232]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	4a39      	ldr	r2, [pc, #228]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a298:	f043 0320 	orr.w	r3, r3, #32
 800a29c:	6413      	str	r3, [r2, #64]	; 0x40
 800a29e:	4b37      	ldr	r3, [pc, #220]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	61fb      	str	r3, [r7, #28]
 800a2a8:	69fb      	ldr	r3, [r7, #28]
}
 800a2aa:	e060      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a34      	ldr	r2, [pc, #208]	; (800a384 <HAL_TIM_Base_MspInit+0x15c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d10c      	bne.n	800a2d0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a2b6:	4b31      	ldr	r3, [pc, #196]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ba:	4a30      	ldr	r2, [pc, #192]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	6453      	str	r3, [r2, #68]	; 0x44
 800a2c2:	4b2e      	ldr	r3, [pc, #184]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	61bb      	str	r3, [r7, #24]
 800a2cc:	69bb      	ldr	r3, [r7, #24]
}
 800a2ce:	e04e      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2c      	ldr	r2, [pc, #176]	; (800a388 <HAL_TIM_Base_MspInit+0x160>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d10c      	bne.n	800a2f4 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a2da:	4b28      	ldr	r3, [pc, #160]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2de:	4a27      	ldr	r2, [pc, #156]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a2e6:	4b25      	ldr	r3, [pc, #148]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	697b      	ldr	r3, [r7, #20]
}
 800a2f2:	e03c      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a24      	ldr	r2, [pc, #144]	; (800a38c <HAL_TIM_Base_MspInit+0x164>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d114      	bne.n	800a328 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a2fe:	4b1f      	ldr	r3, [pc, #124]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a302:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a308:	6453      	str	r3, [r2, #68]	; 0x44
 800a30a:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a316:	2200      	movs	r2, #0
 800a318:	2105      	movs	r1, #5
 800a31a:	2019      	movs	r0, #25
 800a31c:	f7f7 ff80 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a320:	2019      	movs	r0, #25
 800a322:	f7f7 ff99 	bl	8002258 <HAL_NVIC_EnableIRQ>
}
 800a326:	e022      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a18      	ldr	r2, [pc, #96]	; (800a390 <HAL_TIM_Base_MspInit+0x168>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10c      	bne.n	800a34c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a332:	4b12      	ldr	r3, [pc, #72]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a336:	4a11      	ldr	r2, [pc, #68]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a33c:	6453      	str	r3, [r2, #68]	; 0x44
 800a33e:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
}
 800a34a:	e010      	b.n	800a36e <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a10      	ldr	r2, [pc, #64]	; (800a394 <HAL_TIM_Base_MspInit+0x16c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d10b      	bne.n	800a36e <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	4a08      	ldr	r2, [pc, #32]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a360:	6413      	str	r3, [r2, #64]	; 0x40
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <HAL_TIM_Base_MspInit+0x154>)
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	60bb      	str	r3, [r7, #8]
 800a36c:	68bb      	ldr	r3, [r7, #8]
}
 800a36e:	bf00      	nop
 800a370:	3728      	adds	r7, #40	; 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40010000 	.word	0x40010000
 800a37c:	40023800 	.word	0x40023800
 800a380:	40001400 	.word	0x40001400
 800a384:	40010400 	.word	0x40010400
 800a388:	40014000 	.word	0x40014000
 800a38c:	40014400 	.word	0x40014400
 800a390:	40014800 	.word	0x40014800
 800a394:	40002000 	.word	0x40002000

0800a398 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a13      	ldr	r2, [pc, #76]	; (800a3f4 <HAL_TIM_PWM_MspInit+0x5c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d10c      	bne.n	800a3c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a3aa:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	4a12      	ldr	r2, [pc, #72]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3b0:	f043 0302 	orr.w	r3, r3, #2
 800a3b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a3b6:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a3c2:	e010      	b.n	800a3e6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a0c      	ldr	r2, [pc, #48]	; (800a3fc <HAL_TIM_PWM_MspInit+0x64>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d10b      	bne.n	800a3e6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	4a09      	ldr	r2, [pc, #36]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3d4:	f043 0304 	orr.w	r3, r3, #4
 800a3d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3da:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <HAL_TIM_PWM_MspInit+0x60>)
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	60bb      	str	r3, [r7, #8]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	bf00      	nop
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40023800 	.word	0x40023800
 800a3fc:	40000800 	.word	0x40000800

0800a400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b092      	sub	sp, #72	; 0x48
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	609a      	str	r2, [r3, #8]
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4aa5      	ldr	r2, [pc, #660]	; (800a6b4 <HAL_TIM_MspPostInit+0x2b4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d11d      	bne.n	800a45e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a422:	4ba5      	ldr	r3, [pc, #660]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	4aa4      	ldr	r2, [pc, #656]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a428:	f043 0310 	orr.w	r3, r3, #16
 800a42c:	6313      	str	r3, [r2, #48]	; 0x30
 800a42e:	4ba2      	ldr	r3, [pc, #648]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	f003 0310 	and.w	r3, r3, #16
 800a436:	633b      	str	r3, [r7, #48]	; 0x30
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a43a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a43e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a440:	2302      	movs	r3, #2
 800a442:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a448:	2300      	movs	r3, #0
 800a44a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a44c:	2301      	movs	r3, #1
 800a44e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a454:	4619      	mov	r1, r3
 800a456:	4899      	ldr	r0, [pc, #612]	; (800a6bc <HAL_TIM_MspPostInit+0x2bc>)
 800a458:	f7f8 fb14 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a45c:	e168      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a466:	d13a      	bne.n	800a4de <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a468:	4b93      	ldr	r3, [pc, #588]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	4a92      	ldr	r2, [pc, #584]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a46e:	f043 0302 	orr.w	r3, r3, #2
 800a472:	6313      	str	r3, [r2, #48]	; 0x30
 800a474:	4b90      	ldr	r3, [pc, #576]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a480:	4b8d      	ldr	r3, [pc, #564]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	4a8c      	ldr	r2, [pc, #560]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6313      	str	r3, [r2, #48]	; 0x30
 800a48c:	4b8a      	ldr	r3, [pc, #552]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 800a498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4882      	ldr	r0, [pc, #520]	; (800a6c0 <HAL_TIM_MspPostInit+0x2c0>)
 800a4b6:	f7f8 fae5 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 800a4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800a4d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	487b      	ldr	r0, [pc, #492]	; (800a6c4 <HAL_TIM_MspPostInit+0x2c4>)
 800a4d8:	f7f8 fad4 	bl	8002a84 <HAL_GPIO_Init>
}
 800a4dc:	e128      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a79      	ldr	r2, [pc, #484]	; (800a6c8 <HAL_TIM_MspPostInit+0x2c8>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d139      	bne.n	800a55c <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4e8:	4b73      	ldr	r3, [pc, #460]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	4a72      	ldr	r2, [pc, #456]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a4ee:	f043 0304 	orr.w	r3, r3, #4
 800a4f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f4:	4b70      	ldr	r3, [pc, #448]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a500:	4b6d      	ldr	r3, [pc, #436]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	4a6c      	ldr	r2, [pc, #432]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a506:	f043 0302 	orr.w	r3, r3, #2
 800a50a:	6313      	str	r3, [r2, #48]	; 0x30
 800a50c:	4b6a      	ldr	r3, [pc, #424]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	623b      	str	r3, [r7, #32]
 800a516:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 800a518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a51c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a51e:	2302      	movs	r3, #2
 800a520:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a522:	2300      	movs	r3, #0
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a526:	2300      	movs	r3, #0
 800a528:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a52a:	2302      	movs	r3, #2
 800a52c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a52e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a532:	4619      	mov	r1, r3
 800a534:	4865      	ldr	r0, [pc, #404]	; (800a6cc <HAL_TIM_MspPostInit+0x2cc>)
 800a536:	f7f8 faa5 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 800a53a:	2330      	movs	r3, #48	; 0x30
 800a53c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a53e:	2302      	movs	r3, #2
 800a540:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a546:	2300      	movs	r3, #0
 800a548:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a54a:	2302      	movs	r3, #2
 800a54c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a54e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a552:	4619      	mov	r1, r3
 800a554:	485a      	ldr	r0, [pc, #360]	; (800a6c0 <HAL_TIM_MspPostInit+0x2c0>)
 800a556:	f7f8 fa95 	bl	8002a84 <HAL_GPIO_Init>
}
 800a55a:	e0e9      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a5b      	ldr	r2, [pc, #364]	; (800a6d0 <HAL_TIM_MspPostInit+0x2d0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d11d      	bne.n	800a5a2 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a566:	4b54      	ldr	r3, [pc, #336]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	4a53      	ldr	r2, [pc, #332]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a56c:	f043 0308 	orr.w	r3, r3, #8
 800a570:	6313      	str	r3, [r2, #48]	; 0x30
 800a572:	4b51      	ldr	r3, [pc, #324]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	61fb      	str	r3, [r7, #28]
 800a57c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 800a57e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a584:	2302      	movs	r3, #2
 800a586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a58c:	2300      	movs	r3, #0
 800a58e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a590:	2302      	movs	r3, #2
 800a592:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a598:	4619      	mov	r1, r3
 800a59a:	484e      	ldr	r0, [pc, #312]	; (800a6d4 <HAL_TIM_MspPostInit+0x2d4>)
 800a59c:	f7f8 fa72 	bl	8002a84 <HAL_GPIO_Init>
}
 800a5a0:	e0c6      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a4c      	ldr	r2, [pc, #304]	; (800a6d8 <HAL_TIM_MspPostInit+0x2d8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d11c      	bne.n	800a5e6 <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5ac:	4b42      	ldr	r3, [pc, #264]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b0:	4a41      	ldr	r2, [pc, #260]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5b2:	f043 0304 	orr.w	r3, r3, #4
 800a5b6:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b8:	4b3f      	ldr	r3, [pc, #252]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800a5c4:	23c0      	movs	r3, #192	; 0xc0
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5dc:	4619      	mov	r1, r3
 800a5de:	483b      	ldr	r0, [pc, #236]	; (800a6cc <HAL_TIM_MspPostInit+0x2cc>)
 800a5e0:	f7f8 fa50 	bl	8002a84 <HAL_GPIO_Init>
}
 800a5e4:	e0a4      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a3c      	ldr	r2, [pc, #240]	; (800a6dc <HAL_TIM_MspPostInit+0x2dc>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d11c      	bne.n	800a62a <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a5f0:	4b31      	ldr	r3, [pc, #196]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f4:	4a30      	ldr	r2, [pc, #192]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5f6:	f043 0310 	orr.w	r3, r3, #16
 800a5fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a5fc:	4b2e      	ldr	r3, [pc, #184]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 800a608:	2360      	movs	r3, #96	; 0x60
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a60c:	2302      	movs	r3, #2
 800a60e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a610:	2300      	movs	r3, #0
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a614:	2300      	movs	r3, #0
 800a616:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a618:	2303      	movs	r3, #3
 800a61a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a61c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a620:	4619      	mov	r1, r3
 800a622:	4826      	ldr	r0, [pc, #152]	; (800a6bc <HAL_TIM_MspPostInit+0x2bc>)
 800a624:	f7f8 fa2e 	bl	8002a84 <HAL_GPIO_Init>
}
 800a628:	e082      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a2c      	ldr	r2, [pc, #176]	; (800a6e0 <HAL_TIM_MspPostInit+0x2e0>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d11c      	bne.n	800a66e <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a634:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a638:	4a1f      	ldr	r2, [pc, #124]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a63a:	f043 0320 	orr.w	r3, r3, #32
 800a63e:	6313      	str	r3, [r2, #48]	; 0x30
 800a640:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	f003 0320 	and.w	r3, r3, #32
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a650:	2302      	movs	r3, #2
 800a652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a658:	2300      	movs	r3, #0
 800a65a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a65c:	2303      	movs	r3, #3
 800a65e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 800a660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a664:	4619      	mov	r1, r3
 800a666:	481f      	ldr	r0, [pc, #124]	; (800a6e4 <HAL_TIM_MspPostInit+0x2e4>)
 800a668:	f7f8 fa0c 	bl	8002a84 <HAL_GPIO_Init>
}
 800a66c:	e060      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a1d      	ldr	r2, [pc, #116]	; (800a6e8 <HAL_TIM_MspPostInit+0x2e8>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d139      	bne.n	800a6ec <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a678:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	4a0e      	ldr	r2, [pc, #56]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a67e:	f043 0320 	orr.w	r3, r3, #32
 800a682:	6313      	str	r3, [r2, #48]	; 0x30
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <HAL_TIM_MspPostInit+0x2b8>)
 800a686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a694:	2302      	movs	r3, #2
 800a696:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a69c:	2300      	movs	r3, #0
 800a69e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 800a6a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	480e      	ldr	r0, [pc, #56]	; (800a6e4 <HAL_TIM_MspPostInit+0x2e4>)
 800a6ac:	f7f8 f9ea 	bl	8002a84 <HAL_GPIO_Init>
}
 800a6b0:	e03e      	b.n	800a730 <HAL_TIM_MspPostInit+0x330>
 800a6b2:	bf00      	nop
 800a6b4:	40010000 	.word	0x40010000
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	40021000 	.word	0x40021000
 800a6c0:	40020400 	.word	0x40020400
 800a6c4:	40020000 	.word	0x40020000
 800a6c8:	40000400 	.word	0x40000400
 800a6cc:	40020800 	.word	0x40020800
 800a6d0:	40000800 	.word	0x40000800
 800a6d4:	40020c00 	.word	0x40020c00
 800a6d8:	40010400 	.word	0x40010400
 800a6dc:	40014000 	.word	0x40014000
 800a6e0:	40014400 	.word	0x40014400
 800a6e4:	40021400 	.word	0x40021400
 800a6e8:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a11      	ldr	r2, [pc, #68]	; (800a738 <HAL_TIM_MspPostInit+0x338>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d11c      	bne.n	800a730 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <HAL_TIM_MspPostInit+0x33c>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	4a10      	ldr	r2, [pc, #64]	; (800a73c <HAL_TIM_MspPostInit+0x33c>)
 800a6fc:	f043 0320 	orr.w	r3, r3, #32
 800a700:	6313      	str	r3, [r2, #48]	; 0x30
 800a702:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <HAL_TIM_MspPostInit+0x33c>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 800a70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a714:	2302      	movs	r3, #2
 800a716:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a71c:	2300      	movs	r3, #0
 800a71e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a720:	2309      	movs	r3, #9
 800a722:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 800a724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a728:	4619      	mov	r1, r3
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <HAL_TIM_MspPostInit+0x340>)
 800a72c:	f7f8 f9aa 	bl	8002a84 <HAL_GPIO_Init>
}
 800a730:	bf00      	nop
 800a732:	3748      	adds	r7, #72	; 0x48
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	40002000 	.word	0x40002000
 800a73c:	40023800 	.word	0x40023800
 800a740:	40021400 	.word	0x40021400

0800a744 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a748:	4b14      	ldr	r3, [pc, #80]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a74a:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <MX_USART1_UART_Init+0x5c>)
 800a74c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a74e:	4b13      	ldr	r3, [pc, #76]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a756:	4b11      	ldr	r3, [pc, #68]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a758:	2200      	movs	r2, #0
 800a75a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a75c:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a75e:	2200      	movs	r2, #0
 800a760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a762:	4b0e      	ldr	r3, [pc, #56]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a764:	2200      	movs	r2, #0
 800a766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a76a:	220c      	movs	r2, #12
 800a76c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a76e:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a770:	2200      	movs	r2, #0
 800a772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a774:	4b09      	ldr	r3, [pc, #36]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a776:	2200      	movs	r2, #0
 800a778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a77a:	4b08      	ldr	r3, [pc, #32]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a782:	2200      	movs	r2, #0
 800a784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a786:	4805      	ldr	r0, [pc, #20]	; (800a79c <MX_USART1_UART_Init+0x58>)
 800a788:	f7fb fe02 	bl	8006390 <HAL_UART_Init>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a792:	f7fe fb91 	bl	8008eb8 <Error_Handler>
  }

}
 800a796:	bf00      	nop
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	2000a16c 	.word	0x2000a16c
 800a7a0:	40011000 	.word	0x40011000

0800a7a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a7a8:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7aa:	4a15      	ldr	r2, [pc, #84]	; (800a800 <MX_USART2_UART_Init+0x5c>)
 800a7ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a7b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a7b6:	4b11      	ldr	r3, [pc, #68]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a7c2:	4b0e      	ldr	r3, [pc, #56]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7ca:	220c      	movs	r2, #12
 800a7cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7d4:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7e0:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a7e6:	4805      	ldr	r0, [pc, #20]	; (800a7fc <MX_USART2_UART_Init+0x58>)
 800a7e8:	f7fb fdd2 	bl	8006390 <HAL_UART_Init>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a7f2:	f7fe fb61 	bl	8008eb8 <Error_Handler>
  }

}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000a1ec 	.word	0x2000a1ec
 800a800:	40004400 	.word	0x40004400

0800a804 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a808:	4b14      	ldr	r3, [pc, #80]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a80a:	4a15      	ldr	r2, [pc, #84]	; (800a860 <MX_USART3_UART_Init+0x5c>)
 800a80c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a810:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a818:	2200      	movs	r2, #0
 800a81a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a81c:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a81e:	2200      	movs	r2, #0
 800a820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a822:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a824:	2200      	movs	r2, #0
 800a826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a828:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a82a:	220c      	movs	r2, #12
 800a82c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a82e:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a830:	2200      	movs	r2, #0
 800a832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a834:	4b09      	ldr	r3, [pc, #36]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a836:	2200      	movs	r2, #0
 800a838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a83a:	4b08      	ldr	r3, [pc, #32]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a842:	2200      	movs	r2, #0
 800a844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a846:	4805      	ldr	r0, [pc, #20]	; (800a85c <MX_USART3_UART_Init+0x58>)
 800a848:	f7fb fda2 	bl	8006390 <HAL_UART_Init>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a852:	f7fe fb31 	bl	8008eb8 <Error_Handler>
  }

}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	2000a08c 	.word	0x2000a08c
 800a860:	40004800 	.word	0x40004800

0800a864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08e      	sub	sp, #56	; 0x38
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	605a      	str	r2, [r3, #4]
 800a876:	609a      	str	r2, [r3, #8]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a85      	ldr	r2, [pc, #532]	; (800aa98 <HAL_UART_MspInit+0x234>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d141      	bne.n	800a90a <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a886:	4b85      	ldr	r3, [pc, #532]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88a:	4a84      	ldr	r2, [pc, #528]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a88c:	f043 0310 	orr.w	r3, r3, #16
 800a890:	6453      	str	r3, [r2, #68]	; 0x44
 800a892:	4b82      	ldr	r3, [pc, #520]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	623b      	str	r3, [r7, #32]
 800a89c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a89e:	4b7f      	ldr	r3, [pc, #508]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	4a7e      	ldr	r2, [pc, #504]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8aa:	4b7c      	ldr	r3, [pc, #496]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	61fb      	str	r3, [r7, #28]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a8c8:	2304      	movs	r3, #4
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4873      	ldr	r0, [pc, #460]	; (800aaa0 <HAL_UART_MspInit+0x23c>)
 800a8d4:	f7f8 f8d6 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a8d8:	2340      	movs	r3, #64	; 0x40
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a8e8:	2307      	movs	r3, #7
 800a8ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	486b      	ldr	r0, [pc, #428]	; (800aaa0 <HAL_UART_MspInit+0x23c>)
 800a8f4:	f7f8 f8c6 	bl	8002a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2105      	movs	r1, #5
 800a8fc:	2025      	movs	r0, #37	; 0x25
 800a8fe:	f7f7 fc8f 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a902:	2025      	movs	r0, #37	; 0x25
 800a904:	f7f7 fca8 	bl	8002258 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a908:	e0c2      	b.n	800aa90 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART2)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a65      	ldr	r2, [pc, #404]	; (800aaa4 <HAL_UART_MspInit+0x240>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d128      	bne.n	800a966 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a914:	4b61      	ldr	r3, [pc, #388]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	4a60      	ldr	r2, [pc, #384]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a91a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a91e:	6413      	str	r3, [r2, #64]	; 0x40
 800a920:	4b5e      	ldr	r3, [pc, #376]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a92c:	4b5b      	ldr	r3, [pc, #364]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	4a5a      	ldr	r2, [pc, #360]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a932:	f043 0308 	orr.w	r3, r3, #8
 800a936:	6313      	str	r3, [r2, #48]	; 0x30
 800a938:	4b58      	ldr	r3, [pc, #352]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a944:	2360      	movs	r3, #96	; 0x60
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a948:	2302      	movs	r3, #2
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a94c:	2302      	movs	r3, #2
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a950:	2303      	movs	r3, #3
 800a952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a954:	2307      	movs	r3, #7
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95c:	4619      	mov	r1, r3
 800a95e:	4852      	ldr	r0, [pc, #328]	; (800aaa8 <HAL_UART_MspInit+0x244>)
 800a960:	f7f8 f890 	bl	8002a84 <HAL_GPIO_Init>
}
 800a964:	e094      	b.n	800aa90 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART3)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a50      	ldr	r2, [pc, #320]	; (800aaac <HAL_UART_MspInit+0x248>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	f040 808f 	bne.w	800aa90 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a972:	4b4a      	ldr	r3, [pc, #296]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	4a49      	ldr	r2, [pc, #292]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a97c:	6413      	str	r3, [r2, #64]	; 0x40
 800a97e:	4b47      	ldr	r3, [pc, #284]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a98a:	4b44      	ldr	r3, [pc, #272]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98e:	4a43      	ldr	r2, [pc, #268]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a990:	f043 0308 	orr.w	r3, r3, #8
 800a994:	6313      	str	r3, [r2, #48]	; 0x30
 800a996:	4b41      	ldr	r3, [pc, #260]	; (800aa9c <HAL_UART_MspInit+0x238>)
 800a998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a9a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a9b4:	2307      	movs	r3, #7
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a9b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9bc:	4619      	mov	r1, r3
 800a9be:	483a      	ldr	r0, [pc, #232]	; (800aaa8 <HAL_UART_MspInit+0x244>)
 800a9c0:	f7f8 f860 	bl	8002a84 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a9c4:	4b3a      	ldr	r3, [pc, #232]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9c6:	4a3b      	ldr	r2, [pc, #236]	; (800aab4 <HAL_UART_MspInit+0x250>)
 800a9c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a9ca:	4b39      	ldr	r3, [pc, #228]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9d2:	4b37      	ldr	r3, [pc, #220]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9d8:	4b35      	ldr	r3, [pc, #212]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a9de:	4b34      	ldr	r3, [pc, #208]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9e6:	4b32      	ldr	r3, [pc, #200]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9ec:	4b30      	ldr	r3, [pc, #192]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a9f2:	4b2f      	ldr	r3, [pc, #188]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a9f8:	4b2d      	ldr	r3, [pc, #180]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800a9fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a9fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa00:	4b2b      	ldr	r3, [pc, #172]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800aa06:	482a      	ldr	r0, [pc, #168]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800aa08:	f7f7 fc34 	bl	8002274 <HAL_DMA_Init>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 800aa12:	f7fe fa51 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a25      	ldr	r2, [pc, #148]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800aa1a:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa1c:	4a24      	ldr	r2, [pc, #144]	; (800aab0 <HAL_UART_MspInit+0x24c>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800aa22:	4b25      	ldr	r3, [pc, #148]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa24:	4a25      	ldr	r2, [pc, #148]	; (800aabc <HAL_UART_MspInit+0x258>)
 800aa26:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800aa28:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa2a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800aa2e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa30:	4b21      	ldr	r3, [pc, #132]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa32:	2240      	movs	r2, #64	; 0x40
 800aa34:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa36:	4b20      	ldr	r3, [pc, #128]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aa3c:	4b1e      	ldr	r3, [pc, #120]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa42:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa44:	4b1c      	ldr	r3, [pc, #112]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa4a:	4b1b      	ldr	r3, [pc, #108]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800aa50:	4b19      	ldr	r3, [pc, #100]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aa56:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa5c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800aa64:	4814      	ldr	r0, [pc, #80]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa66:	f7f7 fc05 	bl	8002274 <HAL_DMA_Init>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <HAL_UART_MspInit+0x210>
      Error_Handler();
 800aa70:	f7fe fa22 	bl	8008eb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa78:	669a      	str	r2, [r3, #104]	; 0x68
 800aa7a:	4a0f      	ldr	r2, [pc, #60]	; (800aab8 <HAL_UART_MspInit+0x254>)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800aa80:	2200      	movs	r2, #0
 800aa82:	2105      	movs	r1, #5
 800aa84:	2027      	movs	r0, #39	; 0x27
 800aa86:	f7f7 fbcb 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800aa8a:	2027      	movs	r0, #39	; 0x27
 800aa8c:	f7f7 fbe4 	bl	8002258 <HAL_NVIC_EnableIRQ>
}
 800aa90:	bf00      	nop
 800aa92:	3738      	adds	r7, #56	; 0x38
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	40011000 	.word	0x40011000
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	40020400 	.word	0x40020400
 800aaa4:	40004400 	.word	0x40004400
 800aaa8:	40020c00 	.word	0x40020c00
 800aaac:	40004800 	.word	0x40004800
 800aab0:	2000a02c 	.word	0x2000a02c
 800aab4:	40026028 	.word	0x40026028
 800aab8:	2000a10c 	.word	0x2000a10c
 800aabc:	40026070 	.word	0x40026070

0800aac0 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 f9db 	bl	800be8c <DigitalWrite>
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaec:	2101      	movs	r1, #1
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 f9cc 	bl	800be8c <DigitalWrite>
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 f9bd 	bl	800be8c <DigitalWrite>
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab28:	2101      	movs	r1, #1
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 f9ae 	bl	800be8c <DigitalWrite>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 f99f 	bl	800be8c <DigitalWrite>
}
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab64:	2101      	movs	r1, #1
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f990 	bl	800be8c <DigitalWrite>
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff ffb9 	bl	800aafc <AD_CONV_LOW>
	delay_ns(200);
 800ab8a:	20c8      	movs	r0, #200	; 0xc8
 800ab8c:	f001 fa1c 	bl	800bfc8 <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff ffc2 	bl	800ab1a <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800abb2:	2301      	movs	r3, #1
 800abb4:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800abb6:	2300      	movs	r3, #0
 800abb8:	613b      	str	r3, [r7, #16]
 800abba:	e024      	b.n	800ac06 <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800abbc:	4b16      	ldr	r3, [pc, #88]	; (800ac18 <ADBoard_BUSYCallback+0x70>)
 800abbe:	6819      	ldr	r1, [r3, #0]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	440b      	add	r3, r1
 800abcc:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abd4:	88fa      	ldrh	r2, [r7, #6]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d112      	bne.n	800ac00 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <ADBoard_BUSYCallback+0x70>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	b292      	uxth	r2, r2
 800abe2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7ff ff6a 	bl	800aac0 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	2308      	movs	r3, #8
 800abf4:	4909      	ldr	r1, [pc, #36]	; (800ac1c <ADBoard_BUSYCallback+0x74>)
 800abf6:	f7f9 fdd7 	bl	80047a8 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
				break;
 800abfe:	e005      	b.n	800ac0c <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	3301      	adds	r3, #1
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	ddd7      	ble.n	800abbc <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800ac0c:	697b      	ldr	r3, [r7, #20]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	2000000c 	.word	0x2000000c
 800ac1c:	20000010 	.word	0x20000010

0800ac20 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	int ret=1;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	e081      	b.n	800ad36 <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ac32:	4b45      	ldr	r3, [pc, #276]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	440b      	add	r3, r1
 800ac42:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d170      	bne.n	800ad30 <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
 800ac4e:	4b3e      	ldr	r3, [pc, #248]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	b292      	uxth	r2, r2
 800ac56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800ac5a:	68b8      	ldr	r0, [r7, #8]
 800ac5c:	f7ff ff3f 	bl	800aade <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e01a      	b.n	800acac <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac86:	eddf 6a31 	vldr	s13, [pc, #196]	; 800ad4c <ADBoard_SPICallback+0x12c>
 800ac8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ac94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b07      	cmp	r3, #7
 800acb0:	dde1      	ble.n	800ac76 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800acb2:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acba:	3301      	adds	r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dc19      	bgt.n	800acf4 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800acc0:	4b21      	ldr	r3, [pc, #132]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800acc8:	4b1f      	ldr	r3, [pc, #124]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3201      	adds	r2, #1
 800acce:	b292      	uxth	r2, r2
 800acd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800acd4:	4b1c      	ldr	r3, [pc, #112]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ace0:	4619      	mov	r1, r3
 800ace2:	460b      	mov	r3, r1
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	4413      	add	r3, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff ff41 	bl	800ab74 <AD7616_getVoltage>
 800acf2:	e01a      	b.n	800ad2a <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800acf4:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800ad0a:	f001 f92d 	bl	800bf68 <micros>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b0d      	ldr	r3, [pc, #52]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <ADBoard_SPICallback+0x128>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	1a8a      	subs	r2, r1, r2
 800ad28:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
					break;
 800ad2e:	e006      	b.n	800ad3e <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3301      	adds	r3, #1
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f77f af7a 	ble.w	800ac32 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800ad3e:	697b      	ldr	r3, [r7, #20]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	2000000c 	.word	0x2000000c
 800ad4c:	47800000 	.word	0x47800000

0800ad50 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800ad56:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <ADBoard_Reset+0x34>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff feeb 	bl	800ab38 <AD_RESET_LOW>
	delay_us(5);
 800ad62:	2005      	movs	r0, #5
 800ad64:	f001 f916 	bl	800bf94 <delay_us>
	AD_RESET_HIGH(ptADDev);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff fef4 	bl	800ab56 <AD_RESET_HIGH>
	delay_us(5);
 800ad6e:	2005      	movs	r0, #5
 800ad70:	f001 f910 	bl	800bf94 <delay_us>
	AD_RESET_LOW(ptADDev);}
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fedf 	bl	800ab38 <AD_RESET_LOW>

}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2000000c 	.word	0x2000000c

0800ad88 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <ADBoard_updateVoltage+0x48>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800ad96:	4b0e      	ldr	r3, [pc, #56]	; (800add0 <ADBoard_updateVoltage+0x48>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800ada0:	f001 f8e2 	bl	800bf68 <micros>
 800ada4:	4602      	mov	r2, r0
 800ada6:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <ADBoard_updateVoltage+0x48>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800adac:	4b08      	ldr	r3, [pc, #32]	; (800add0 <ADBoard_updateVoltage+0x48>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <ADBoard_updateVoltage+0x48>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb8:	4619      	mov	r1, r3
 800adba:	460b      	mov	r3, r1
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	440b      	add	r3, r1
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	4413      	add	r3, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fed5 	bl	800ab74 <AD7616_getVoltage>
}
 800adca:	bf00      	nop
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	2000000c 	.word	0x2000000c

0800add4 <ADBoard_Init>:
	else
		return 0;
}

void ADBoard_Init()
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800adda:	230b      	movs	r3, #11
 800addc:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800adde:	230c      	movs	r3, #12
 800ade0:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800ade2:	230d      	movs	r3, #13
 800ade4:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800ade6:	2303      	movs	r3, #3
 800ade8:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800adea:	4b28      	ldr	r3, [pc, #160]	; (800ae8c <ADBoard_Init+0xb8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800adf6:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <ADBoard_Init+0xb8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800ae00:	4b22      	ldr	r3, [pc, #136]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2200      	movs	r2, #0
 800ae06:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800ae08:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800ae10:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2200      	movs	r2, #0
 800ae16:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800ae18:	4b1c      	ldr	r3, [pc, #112]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a1c      	ldr	r2, [pc, #112]	; (800ae90 <ADBoard_Init+0xbc>)
 800ae1e:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800ae20:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1b      	ldr	r2, [pc, #108]	; (800ae94 <ADBoard_Init+0xc0>)
 800ae26:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800ae28:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ae30:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ae38:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae40:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800ae44:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a13      	ldr	r2, [pc, #76]	; (800ae98 <ADBoard_Init+0xc4>)
 800ae4a:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	79fa      	ldrb	r2, [r7, #7]
 800ae52:	b292      	uxth	r2, r2
 800ae54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800ae58:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	797a      	ldrb	r2, [r7, #5]
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800ae64:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	79ba      	ldrb	r2, [r7, #6]
 800ae6a:	b292      	uxth	r2, r2
 800ae6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800ae70:	4b06      	ldr	r3, [pc, #24]	; (800ae8c <ADBoard_Init+0xb8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	793a      	ldrb	r2, [r7, #4]
 800ae76:	b292      	uxth	r2, r2
 800ae78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800ae7c:	f7ff ff68 	bl	800ad50 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800ae80:	f7ff ff82 	bl	800ad88 <ADBoard_updateVoltage>
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	2000000c 	.word	0x2000000c
 800ae90:	c1200000 	.word	0xc1200000
 800ae94:	41200000 	.word	0x41200000
 800ae98:	20009b84 	.word	0x20009b84

0800ae9c <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800ae9c:	b5b0      	push	{r4, r5, r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f001 f8f1 	bl	800c098 <_ZN14SOLENOID_VALVEC1Ei>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	331c      	adds	r3, #28
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 f8eb 	bl	800c098 <_ZN14SOLENOID_VALVEC1Ei>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3334      	adds	r3, #52	; 0x34
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fb91 	bl	800b5f0 <_ZN15PRESSURE_SENSORC1Ei>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3350      	adds	r3, #80	; 0x50
 800aed2:	4618      	mov	r0, r3
 800aed4:	f002 ffa0 	bl	800de18 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	f241 0364 	movw	r3, #4196	; 0x1064
 800aede:	4413      	add	r3, r2
 800aee0:	4a65      	ldr	r2, [pc, #404]	; (800b078 <_ZN7CHAMBERC1Eiii+0x1dc>)
 800aee2:	461c      	mov	r4, r3
 800aee4:	4615      	mov	r5, r2
 800aee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aeea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aeec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aeee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	f241 0398 	movw	r3, #4248	; 0x1098
 800aefc:	4413      	add	r3, r2
 800aefe:	4a5f      	ldr	r2, [pc, #380]	; (800b07c <_ZN7CHAMBERC1Eiii+0x1e0>)
 800af00:	461c      	mov	r4, r3
 800af02:	4615      	mov	r5, r2
 800af04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800af1a:	4413      	add	r3, r2
 800af1c:	4a58      	ldr	r2, [pc, #352]	; (800b080 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800af1e:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800af26:	4413      	add	r3, r2
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800af30:	440b      	add	r3, r1
 800af32:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4a53      	ldr	r2, [pc, #332]	; (800b084 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800af38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=0;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f04f 0200 	mov.w	r2, #0
 800af4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pressureDeadZone = 2000;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4a47      	ldr	r2, [pc, #284]	; (800b088 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800af6a:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a47      	ldr	r2, [pc, #284]	; (800b08c <_ZN7CHAMBERC1Eiii+0x1f0>)
 800af70:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4a46      	ldr	r2, [pc, #280]	; (800b090 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800af76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	f241 0354 	movw	r3, #4180	; 0x1054
 800af80:	4413      	add	r3, r2
 800af82:	2201      	movs	r2, #1
 800af84:	601a      	str	r2, [r3, #0]
	opening = 0;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f04f 0200 	mov.w	r2, #0
 800af8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2201      	movs	r2, #1
 800af94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da00      	bge.n	800afa0 <_ZN7CHAMBERC1Eiii+0x104>
 800af9e:	3301      	adds	r3, #1
 800afa0:	105b      	asrs	r3, r3, #1
 800afa2:	4a3c      	ldr	r2, [pc, #240]	; (800b094 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	4413      	add	r3, r2
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	da00      	bge.n	800afb8 <_ZN7CHAMBERC1Eiii+0x11c>
 800afb6:	3301      	adds	r3, #1
 800afb8:	105b      	asrs	r3, r3, #1
 800afba:	4a36      	ldr	r2, [pc, #216]	; (800b094 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	4413      	add	r3, r2
 800afc0:	3304      	adds	r3, #4
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da00      	bge.n	800afd2 <_ZN7CHAMBERC1Eiii+0x136>
 800afd0:	3301      	adds	r3, #1
 800afd2:	105b      	asrs	r3, r3, #1
 800afd4:	4a2f      	ldr	r2, [pc, #188]	; (800b094 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800afd6:	011b      	lsls	r3, r3, #4
 800afd8:	4413      	add	r3, r2
 800afda:	3308      	adds	r3, #8
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da00      	bge.n	800afec <_ZN7CHAMBERC1Eiii+0x150>
 800afea:	3301      	adds	r3, #1
 800afec:	105b      	asrs	r3, r3, #1
 800afee:	4a29      	ldr	r2, [pc, #164]	; (800b094 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800aff0:	011b      	lsls	r3, r3, #4
 800aff2:	4413      	add	r3, r2
 800aff4:	330c      	adds	r3, #12
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b004:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800b008:	eddf 4a23 	vldr	s9, [pc, #140]	; 800b098 <_ZN7CHAMBERC1Eiii+0x1fc>
 800b00c:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800b09c <_ZN7CHAMBERC1Eiii+0x200>
 800b010:	eddf 3a23 	vldr	s7, [pc, #140]	; 800b0a0 <_ZN7CHAMBERC1Eiii+0x204>
 800b014:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800b0a0 <_ZN7CHAMBERC1Eiii+0x204>
 800b018:	eddf 2a22 	vldr	s5, [pc, #136]	; 800b0a4 <_ZN7CHAMBERC1Eiii+0x208>
 800b01c:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800b0a8 <_ZN7CHAMBERC1Eiii+0x20c>
 800b020:	eddf 1a22 	vldr	s3, [pc, #136]	; 800b0ac <_ZN7CHAMBERC1Eiii+0x210>
 800b024:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800b0b0 <_ZN7CHAMBERC1Eiii+0x214>
 800b028:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b0a0 <_ZN7CHAMBERC1Eiii+0x204>
 800b02c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b0b4 <_ZN7CHAMBERC1Eiii+0x218>
 800b030:	f000 fa7c 	bl	800b52c <NewPressureController>
 800b034:	4602      	mov	r2, r0
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	f241 035c 	movw	r3, #4188	; 0x105c
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	f241 0358 	movw	r3, #4184	; 0x1058
 800b04c:	4413      	add	r3, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	33b4      	adds	r3, #180	; 0xb4
 800b060:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b064:	2100      	movs	r1, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f003 f9fb 	bl	800e462 <memset>

}
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bdb0      	pop	{r4, r5, r7, pc}
 800b076:	bf00      	nop
 800b078:	08012618 	.word	0x08012618
 800b07c:	0801264c 	.word	0x0801264c
 800b080:	3e99999a 	.word	0x3e99999a
 800b084:	3c23d70a 	.word	0x3c23d70a
 800b088:	44fa0000 	.word	0x44fa0000
 800b08c:	46ea6000 	.word	0x46ea6000
 800b090:	c6ea6000 	.word	0xc6ea6000
 800b094:	20000030 	.word	0x20000030
 800b098:	3e99999a 	.word	0x3e99999a
 800b09c:	387ba882 	.word	0x387ba882
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	37a7c5ac 	.word	0x37a7c5ac
 800b0a8:	471c4000 	.word	0x471c4000
 800b0ac:	501502f9 	.word	0x501502f9
 800b0b0:	3a83126f 	.word	0x3a83126f
 800b0b4:	48435000 	.word	0x48435000

0800b0b8 <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f80d 	bl	800c0ec <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	331c      	adds	r3, #28
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 f807 	bl	800c0ec <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3334      	adds	r3, #52	; 0x34
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 faa9 	bl	800b63c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800b100:	edd7 7a00 	vldr	s15, [r7]
 800b104:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b2e8 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800b108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	d501      	bpl.n	800b116 <_ZN7CHAMBER13writePressureEf+0x22>
 800b112:	4b76      	ldr	r3, [pc, #472]	; (800b2ec <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800b114:	e00b      	b.n	800b12e <_ZN7CHAMBER13writePressureEf+0x3a>
 800b116:	edd7 7a00 	vldr	s15, [r7]
 800b11a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b2f0 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800b11e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b126:	dd01      	ble.n	800b12c <_ZN7CHAMBER13writePressureEf+0x38>
 800b128:	4b72      	ldr	r3, [pc, #456]	; (800b2f4 <_ZN7CHAMBER13writePressureEf+0x200>)
 800b12a:	e000      	b.n	800b12e <_ZN7CHAMBER13writePressureEf+0x3a>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	float pErr = pressureCommand-pressure;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b140:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b144:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b14e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15a:	d54e      	bpl.n	800b1fa <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b168:	edd7 7a03 	vldr	s15, [r7, #12]
 800b16c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	dd03      	ble.n	800b17e <_ZN7CHAMBER13writePressureEf+0x8a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b17c:	e019      	b.n	800b1b2 <_ZN7CHAMBER13writePressureEf+0xbe>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b18a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b18e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b192:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19a:	d508      	bpl.n	800b1ae <_ZN7CHAMBER13writePressureEf+0xba>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b1a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1ac:	e001      	b.n	800b1b2 <_ZN7CHAMBER13writePressureEf+0xbe>
 800b1ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b1b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b1c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b1cc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b1dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b1e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b1ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b1ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b1f8:	e06a      	b.n	800b2d0 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b200:	eeb1 7a67 	vneg.f32	s14, s15
 800b204:	edd7 7a03 	vldr	s15, [r7, #12]
 800b208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b210:	dd59      	ble.n	800b2c6 <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b228:	edd7 7a03 	vldr	s15, [r7, #12]
 800b22c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	dd08      	ble.n	800b248 <_ZN7CHAMBER13writePressureEf+0x154>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b246:	e013      	b.n	800b270 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b24e:	eef1 6a67 	vneg.f32	s13, s15
 800b252:	edd7 7a03 	vldr	s15, [r7, #12]
 800b256:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25e:	d505      	bpl.n	800b26c <_ZN7CHAMBER13writePressureEf+0x178>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b266:	eef1 7a67 	vneg.f32	s15, s15
 800b26a:	e001      	b.n	800b270 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b26c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b27c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b280:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b290:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b294:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b29e:	eef1 6a67 	vneg.f32	s13, s15
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b2ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b2b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b2b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b2c4:	e004      	b.n	800b2d0 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b2d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f80c 	bl	800b2f8 <_ZN7CHAMBER12writeOpeningEf>
}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	c7c35000 	.word	0xc7c35000
 800b2ec:	c7c35000 	.word	0xc7c35000
 800b2f0:	482fc800 	.word	0x482fc800
 800b2f4:	482fc800 	.word	0x482fc800

0800b2f8 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b304:	edd7 7a00 	vldr	s15, [r7]
 800b308:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b310:	dd2b      	ble.n	800b36a <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b312:	edd7 7a00 	vldr	s15, [r7]
 800b316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31e:	d502      	bpl.n	800b326 <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	e00c      	b.n	800b340 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b326:	edd7 7a00 	vldr	s15, [r7]
 800b32a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b32e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b336:	dd02      	ble.n	800b33e <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b338:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b33c:	e000      	b.n	800b340 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	1d1a      	adds	r2, r3, #4
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b350:	eeb0 0a67 	vmov.f32	s0, s15
 800b354:	4610      	mov	r0, r2
 800b356:	f000 fed7 	bl	800c108 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	331c      	adds	r3, #28
 800b35e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b3cc <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fed0 	bl	800c108 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b368:	e02c      	b.n	800b3c4 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b36a:	edd7 7a00 	vldr	s15, [r7]
 800b36e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b372:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	d501      	bpl.n	800b380 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b37c:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b37e:	e00a      	b.n	800b396 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b380:	edd7 7a00 	vldr	s15, [r7]
 800b384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38c:	dd02      	ble.n	800b394 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	e000      	b.n	800b396 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b3cc <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 feaf 	bl	800c108 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f103 021c 	add.w	r2, r3, #28
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b3b6:	eef1 7a67 	vneg.f32	s15, s15
 800b3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f000 fea2 	bl	800c108 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	00000000 	.word	0x00000000
 800b3d0:	bf800000 	.word	0xbf800000
 800b3d4:	00000000 	.word	0x00000000

0800b3d8 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b3e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3e6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b3ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3ee:	eef0 7ae7 	vabs.f32	s15, s15
 800b3f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b3f6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b418 <mySAT+0x40>
 800b3fa:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b3fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b402:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b406:	eeb0 0a67 	vmov.f32	s0, s15
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	f3af 8000 	nop.w
 800b418:	47ae147b 	.word	0x47ae147b
 800b41c:	3f847ae1 	.word	0x3f847ae1

0800b420 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	ed87 0a02 	vstr	s0, [r7, #8]
 800b42c:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	ed93 7a08 	vldr	s14, [r3, #32]
 800b442:	edd7 7a01 	vldr	s15, [r7, #4]
 800b446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	edd3 6a07 	vldr	s13, [r3, #28]
 800b450:	edd7 7a02 	vldr	s15, [r7, #8]
 800b454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b45c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b4f4 <superTwisting2rdSMCUpdate+0xd4>
 800b460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b470:	eeb0 0a67 	vmov.f32	s0, s15
 800b474:	f7ff ffb0 	bl	800b3d8 <mySAT>
 800b478:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b482:	eeb0 7ae7 	vabs.f32	s14, s15
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	edd3 7a04 	vldr	s15, [r3, #16]
 800b48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b490:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b494:	f04f 0300 	mov.w	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	f107 0314 	add.w	r3, r7, #20
 800b4a2:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b4a4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b0:	db09      	blt.n	800b4c6 <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b4b2:	ed97 0a07 	vldr	s0, [r7, #28]
 800b4b6:	f002 ff33 	bl	800e320 <sqrtf>
 800b4ba:	eef0 7a40 	vmov.f32	s15, s0
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	edc3 7a00 	vstr	s15, [r3]
 800b4c4:	e003      	b.n	800b4ce <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b4ce:	ed97 7a05 	vldr	s14, [r7, #20]
 800b4d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	ee07 3a90 	vmov	s15, r3
}
 800b4e8:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ec:	3728      	adds	r7, #40	; 0x28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	447a0000 	.word	0x447a0000

0800b4f8 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	ed87 0a02 	vstr	s0, [r7, #8]
 800b504:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3324      	adds	r3, #36	; 0x24
 800b50c:	edd7 0a01 	vldr	s1, [r7, #4]
 800b510:	ed97 0a02 	vldr	s0, [r7, #8]
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff ff83 	bl	800b420 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	ee07 3a90 	vmov	s15, r3
}
 800b522:	eeb0 0a67 	vmov.f32	s0, s15
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08c      	sub	sp, #48	; 0x30
 800b530:	af00      	add	r7, sp, #0
 800b532:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b536:	edc7 0a08 	vstr	s1, [r7, #32]
 800b53a:	ed87 1a07 	vstr	s2, [r7, #28]
 800b53e:	edc7 1a06 	vstr	s3, [r7, #24]
 800b542:	ed87 2a05 	vstr	s4, [r7, #20]
 800b546:	edc7 2a04 	vstr	s5, [r7, #16]
 800b54a:	ed87 3a03 	vstr	s6, [r7, #12]
 800b54e:	edc7 3a02 	vstr	s7, [r7, #8]
 800b552:	ed87 4a01 	vstr	s8, [r7, #4]
 800b556:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b55a:	204c      	movs	r0, #76	; 0x4c
 800b55c:	f002 ff6e 	bl	800e43c <malloc>
 800b560:	4603      	mov	r3, r0
 800b562:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b564:	224c      	movs	r2, #76	; 0x4c
 800b566:	2100      	movs	r1, #0
 800b568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b56a:	f002 ff7a 	bl	800e462 <memset>
	pController->psource = psource;
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	69fa      	ldr	r2, [r7, #28]
 800b57e:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b580:	ed97 1a07 	vldr	s2, [r7, #28]
 800b584:	edd7 0a05 	vldr	s1, [r7, #20]
 800b588:	ed97 0a06 	vldr	s0, [r7, #24]
 800b58c:	f001 fbe6 	bl	800cd5c <newSimpleKalmanFilter>
 800b590:	4602      	mov	r2, r0
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b596:	edd7 2a00 	vldr	s5, [r7]
 800b59a:	ed97 2a01 	vldr	s4, [r7, #4]
 800b59e:	edd7 1a07 	vldr	s3, [r7, #28]
 800b5a2:	ed97 1a02 	vldr	s2, [r7, #8]
 800b5a6:	edd7 0a03 	vldr	s1, [r7, #12]
 800b5aa:	ed97 0a04 	vldr	s0, [r7, #16]
 800b5ae:	f002 f815 	bl	800d5dc <newPID>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <NewPressureController+0xb8>)
 800b5c2:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b5ca:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <NewPressureController+0xbc>)
 800b5d0:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	4a05      	ldr	r2, [pc, #20]	; (800b5ec <NewPressureController+0xc0>)
 800b5d6:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3730      	adds	r7, #48	; 0x30
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	3627c5ac 	.word	0x3627c5ac
 800b5e8:	41a00000 	.word	0x41a00000
 800b5ec:	0800b4f9 	.word	0x0800b4f9

0800b5f0 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f04f 0200 	mov.w	r2, #0
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f815 	bl	800b63c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b612:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b634 <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b616:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b638 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b61a:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b61e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f818 	bl	800b658 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	48927c00 	.word	0x48927c00
 800b638:	00000000 	.word	0x00000000

0800b63c <_ZN15PRESSURE_SENSOR6attachEi>:
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
	return pressure;
}

void PRESSURE_SENSOR::attach(int num)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	601a      	str	r2, [r3, #0]

}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6178      	str	r0, [r7, #20]
 800b660:	ed87 0a04 	vstr	s0, [r7, #16]
 800b664:	edc7 0a03 	vstr	s1, [r7, #12]
 800b668:	ed87 1a02 	vstr	s2, [r7, #8]
 800b66c:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	619a      	str	r2, [r3, #24]
}
 800b688:	bf00      	nop
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f852 	bl	800b750 <_ZN4PUMPC1Ei>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	330c      	adds	r3, #12
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff ff9c 	bl	800b5f0 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68b9      	ldr	r1, [r7, #8]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f817 	bl	800b6f0 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
	direction=0;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f04f 0200 	mov.w	r2, #0
 800b6d4:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f04f 0200 	mov.w	r2, #0
 800b6dc:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f04f 0200 	mov.w	r2, #0
 800b6e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f808 	bl	800b714 <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f813 	bl	800b732 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3304      	adds	r3, #4
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f824 	bl	800b772 <_ZN4PUMP6attachEi>
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	330c      	adds	r3, #12
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	4618      	mov	r0, r3
 800b744:	f7ff ff7a 	bl	800b63c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	status=0;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	605a      	str	r2, [r3, #4]
	attach(num);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f805 	bl	800b772 <_ZN4PUMP6attachEi>
}
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	601a      	str	r2, [r3, #0]
}
 800b782:	bf00      	nop
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
	...

0800b790 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
 800b790:	b480      	push	{r7}
 800b792:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800b794:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <PWM_CS_LOW+0x24>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <PWM_CS_LOW+0x24>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b7a6:	0412      	lsls	r2, r2, #16
 800b7a8:	619a      	str	r2, [r3, #24]
}
 800b7aa:	bf00      	nop
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	20000210 	.word	0x20000210

0800b7b8 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800b7bc:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <PWM_CS_HIGH+0x20>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <PWM_CS_HIGH+0x20>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b7cc:	619a      	str	r2, [r3, #24]
}
 800b7ce:	bf00      	nop
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20000210 	.word	0x20000210

0800b7dc <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
 800b7e0:	f7ff ffea 	bl	800b7b8 <PWM_CS_HIGH>
	delay_us(2);
 800b7e4:	2002      	movs	r0, #2
 800b7e6:	f000 fbd5 	bl	800bf94 <delay_us>
	PWM_CS_LOW();
 800b7ea:	f7ff ffd1 	bl	800b790 <PWM_CS_LOW>
}
 800b7ee:	bf00      	nop
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
 800b7fa:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <PWMBoardSPI_sendFrame+0x30>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 800b802:	4b08      	ldr	r3, [pc, #32]	; (800b824 <PWMBoardSPI_sendFrame+0x30>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4619      	mov	r1, r3
 800b808:	4b06      	ldr	r3, [pc, #24]	; (800b824 <PWMBoardSPI_sendFrame+0x30>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800b810:	2302      	movs	r3, #2
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	23db      	movs	r3, #219	; 0xdb
 800b816:	f7f8 fdb3 	bl	8004380 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800b81a:	f7ff ffdf 	bl	800b7dc <PWMBoardSPI_Callback>
}
 800b81e:	bf00      	nop
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20000210 	.word	0x20000210

0800b828 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b832:	2300      	movs	r3, #0
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	e00e      	b.n	800b856 <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800b838:	4b0b      	ldr	r3, [pc, #44]	; (800b868 <PWMBoardSPI_bufferCMD+0x40>)
 800b83a:	6819      	ldr	r1, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4613      	mov	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	4413      	add	r3, r2
 800b848:	440b      	add	r3, r1
 800b84a:	3348      	adds	r3, #72	; 0x48
 800b84c:	79fa      	ldrb	r2, [r7, #7]
 800b84e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	dded      	ble.n	800b838 <PWMBoardSPI_bufferCMD+0x10>
}
 800b85c:	bf00      	nop
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	20000210 	.word	0x20000210

0800b86c <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	ed87 0a00 	vstr	s0, [r7]
 800b878:	80fb      	strh	r3, [r7, #6]

	uint16_t on;
	on = round(4096 * fduty);
 800b87a:	edd7 7a00 	vldr	s15, [r7]
 800b87e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b9a8 <PWMBoardSPI_bufferDutyChannel+0x13c>
 800b882:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b88a:	eeb0 0b47 	vmov.f64	d0, d7
 800b88e:	f002 fcff 	bl	800e290 <round>
 800b892:	eeb0 7b40 	vmov.f64	d7, d0
 800b896:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b89a:	ee17 3a90 	vmov	r3, s15
 800b89e:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800b8a0:	8bfb      	ldrh	r3, [r7, #30]
 800b8a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bf28      	it	cs
 800b8aa:	4613      	movcs	r3, r2
 800b8ac:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	2b8f      	cmp	r3, #143	; 0x8f
 800b8b2:	bf28      	it	cs
 800b8b4:	238f      	movcs	r3, #143	; 0x8f
 800b8b6:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b8b8:	88fb      	ldrh	r3, [r7, #6]
 800b8ba:	4a3c      	ldr	r2, [pc, #240]	; (800b9ac <PWMBoardSPI_bufferDutyChannel+0x140>)
 800b8bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c0:	095b      	lsrs	r3, r3, #5
 800b8c2:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b8c4:	88fa      	ldrh	r2, [r7, #6]
 800b8c6:	4b39      	ldr	r3, [pc, #228]	; (800b9ac <PWMBoardSPI_bufferDutyChannel+0x140>)
 800b8c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b8cc:	0959      	lsrs	r1, r3, #5
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	440b      	add	r3, r1
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	837b      	strh	r3, [r7, #26]
	uint16_t quo=(boardNum/2);
 800b8da:	8b7b      	ldrh	r3, [r7, #26]
 800b8dc:	085b      	lsrs	r3, r3, #1
 800b8de:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800b8e0:	8b7b      	ldrh	r3, [r7, #26]
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800b8e8:	8b3b      	ldrh	r3, [r7, #24]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	0052      	lsls	r2, r2, #1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b8f2:	4b2f      	ldr	r3, [pc, #188]	; (800b9b0 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b8f4:	6819      	ldr	r1, [r3, #0]
 800b8f6:	8bba      	ldrh	r2, [r7, #28]
 800b8f8:	8ab8      	ldrh	r0, [r7, #20]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	4413      	add	r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	4413      	add	r3, r2
 800b904:	4403      	add	r3, r0
 800b906:	440b      	add	r3, r1
 800b908:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800b90a:	8afb      	ldrh	r3, [r7, #22]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d11c      	bne.n	800b94a <PWMBoardSPI_bufferDutyChannel+0xde>
			*pt++=(uint8_t)(on>>4);
 800b910:	8bfb      	ldrh	r3, [r7, #30]
 800b912:	091b      	lsrs	r3, r3, #4
 800b914:	b299      	uxth	r1, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	613a      	str	r2, [r7, #16]
 800b91c:	b2ca      	uxtb	r2, r1
 800b91e:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	f003 030f 	and.w	r3, r3, #15
 800b92c:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800b92e:	8bfb      	ldrh	r3, [r7, #30]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	b2db      	uxtb	r3, r3
 800b936:	b25a      	sxtb	r2, r3
 800b938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b25b      	sxtb	r3, r3
 800b940:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	7bba      	ldrb	r2, [r7, #14]
 800b946:	701a      	strb	r2, [r3, #0]
 800b948:	e01e      	b.n	800b988 <PWMBoardSPI_bufferDutyChannel+0x11c>
	}
	else
	{
		pt++;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	3301      	adds	r3, #1
 800b94e:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	f023 030f 	bic.w	r3, r3, #15
 800b95c:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800b95e:	8bfb      	ldrh	r3, [r7, #30]
 800b960:	0a1b      	lsrs	r3, r3, #8
 800b962:	b29b      	uxth	r3, r3
 800b964:	b25b      	sxtb	r3, r3
 800b966:	f003 030f 	and.w	r3, r3, #15
 800b96a:	b25a      	sxtb	r2, r3
 800b96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b970:	4313      	orrs	r3, r2
 800b972:	b25b      	sxtb	r3, r3
 800b974:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	613a      	str	r2, [r7, #16]
 800b97c:	7bfa      	ldrb	r2, [r7, #15]
 800b97e:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800b980:	8bfb      	ldrh	r3, [r7, #30]
 800b982:	b2da      	uxtb	r2, r3
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyDuty=1;
 800b988:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800b992:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff ff44 	bl	800b828 <PWMBoardSPI_bufferCMD>
}
 800b9a0:	bf00      	nop
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	45800000 	.word	0x45800000
 800b9ac:	aaaaaaab 	.word	0xaaaaaaab
 800b9b0:	20000210 	.word	0x20000210

0800b9b4 <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	460a      	mov	r2, r1
 800b9be:	80fb      	strh	r3, [r7, #6]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	2b8f      	cmp	r3, #143	; 0x8f
 800b9c8:	bf28      	it	cs
 800b9ca:	238f      	movcs	r3, #143	; 0x8f
 800b9cc:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	4a25      	ldr	r2, [pc, #148]	; (800ba68 <PWMBoardSPI_bufferCorrection+0xb4>)
 800b9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	4b22      	ldr	r3, [pc, #136]	; (800ba68 <PWMBoardSPI_bufferCorrection+0xb4>)
 800b9de:	fba3 1302 	umull	r1, r3, r3, r2
 800b9e2:	0959      	lsrs	r1, r3, #5
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	440b      	add	r3, r1
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800b9f0:	8abb      	ldrh	r3, [r7, #20]
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800b9f6:	8abb      	ldrh	r3, [r7, #20]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	823b      	strh	r3, [r7, #16]
	uint16_t startingBytesNum=quo*3;
 800b9fe:	8a7b      	ldrh	r3, [r7, #18]
 800ba00:	461a      	mov	r2, r3
 800ba02:	0052      	lsls	r2, r2, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800ba08:	4b18      	ldr	r3, [pc, #96]	; (800ba6c <PWMBoardSPI_bufferCorrection+0xb8>)
 800ba0a:	6819      	ldr	r1, [r3, #0]
 800ba0c:	8afa      	ldrh	r2, [r7, #22]
 800ba0e:	89f8      	ldrh	r0, [r7, #14]
 800ba10:	4613      	mov	r3, r2
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	4413      	add	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	4413      	add	r3, r2
 800ba1a:	4403      	add	r3, r0
 800ba1c:	440b      	add	r3, r1
 800ba1e:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800ba20:	8a3b      	ldrh	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d105      	bne.n	800ba32 <PWMBoardSPI_bufferCorrection+0x7e>
		*pt=(uint8_t)(value<<2);
 800ba26:	797b      	ldrb	r3, [r7, #5]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e00e      	b.n	800ba50 <PWMBoardSPI_bufferCorrection+0x9c>
	}
	else
	{
		pt++;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	3301      	adds	r3, #1
 800ba36:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	60ba      	str	r2, [r7, #8]
 800ba3e:	797a      	ldrb	r2, [r7, #5]
 800ba40:	0892      	lsrs	r2, r2, #2
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800ba46:	797b      	ldrb	r3, [r7, #5]
 800ba48:	019b      	lsls	r3, r3, #6
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <PWMBoardSPI_bufferCorrection+0xb8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800ba5a:	2020      	movs	r0, #32
 800ba5c:	f7ff fee4 	bl	800b828 <PWMBoardSPI_bufferCMD>
}
 800ba60:	bf00      	nop
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	aaaaaaab 	.word	0xaaaaaaab
 800ba6c:	20000210 	.word	0x20000210

0800ba70 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <PWMBoardSPI_setOutputEnable+0x14>
 800ba80:	2330      	movs	r3, #48	; 0x30
 800ba82:	e000      	b.n	800ba86 <PWMBoardSPI_setOutputEnable+0x16>
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fece 	bl	800b828 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800ba8c:	f7ff feb2 	bl	800b7f4 <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800ba90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ba94:	f7f5 fabc 	bl	8001010 <HAL_Delay>
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <PWMBoardSPI_setCorrectionEnable+0x34>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800bab2:	f003 0201 	and.w	r2, r3, #1
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	f1c3 0301 	rsb	r3, r3, #1
 800babc:	429a      	cmp	r2, r3
 800babe:	d004      	beq.n	800baca <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800bac0:	2070      	movs	r0, #112	; 0x70
 800bac2:	f7ff feb1 	bl	800b828 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
 800bac6:	f7ff fe95 	bl	800b7f4 <PWMBoardSPI_sendFrame>
		}
}
 800baca:	bf00      	nop
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000210 	.word	0x20000210

0800bad8 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800bae2:	4b0c      	ldr	r3, [pc, #48]	; (800bb14 <PWMBoardSPI_startPWMCK+0x3c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800baea:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fc0c 	bl	800c30c <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800baf4:	ed97 0a01 	vldr	s0, [r7, #4]
 800baf8:	f000 f80e 	bl	800bb18 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bafc:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <PWMBoardSPI_startPWMCK+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 fe7d 	bl	800c804 <PWMBuiltInStartChannel>
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000210 	.word	0x20000210

0800bb18 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800bb22:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb2a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800bc10 <PWMBoardSPI_writeFrequency+0xf8>
 800bb2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb36:	d501      	bpl.n	800bb3c <PWMBoardSPI_writeFrequency+0x24>
 800bb38:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <PWMBoardSPI_writeFrequency+0x110>)
 800bb3a:	e00b      	b.n	800bb54 <PWMBoardSPI_writeFrequency+0x3c>
 800bb3c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb40:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800bc2c <PWMBoardSPI_writeFrequency+0x114>
 800bb44:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4c:	dd01      	ble.n	800bb52 <PWMBoardSPI_writeFrequency+0x3a>
 800bb4e:	4b38      	ldr	r3, [pc, #224]	; (800bc30 <PWMBoardSPI_writeFrequency+0x118>)
 800bb50:	e000      	b.n	800bb54 <PWMBoardSPI_writeFrequency+0x3c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800bb56:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb5a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bc34 <PWMBoardSPI_writeFrequency+0x11c>
 800bb5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb62:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800bb66:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bb6e:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb76:	eef0 7ae7 	vabs.f32	s15, s15
 800bb7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb7e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800bc18 <PWMBoardSPI_writeFrequency+0x100>
 800bb82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8a:	dc00      	bgt.n	800bb8e <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800bb8c:	e03a      	b.n	800bc04 <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800bb8e:	4b2a      	ldr	r3, [pc, #168]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800bb98:	4b27      	ldr	r3, [pc, #156]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800bba2:	4b25      	ldr	r3, [pc, #148]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bbaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bbae:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800bc20 <PWMBoardSPI_writeFrequency+0x108>
 800bbb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	d501      	bpl.n	800bbc0 <PWMBoardSPI_writeFrequency+0xa8>
 800bbbc:	4b1f      	ldr	r3, [pc, #124]	; (800bc3c <PWMBoardSPI_writeFrequency+0x124>)
 800bbbe:	e010      	b.n	800bbe2 <PWMBoardSPI_writeFrequency+0xca>
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bbc8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bc40 <PWMBoardSPI_writeFrequency+0x128>
 800bbcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	dd01      	ble.n	800bbda <PWMBoardSPI_writeFrequency+0xc2>
 800bbd6:	4b1b      	ldr	r3, [pc, #108]	; (800bc44 <PWMBoardSPI_writeFrequency+0x12c>)
 800bbd8:	e003      	b.n	800bbe2 <PWMBoardSPI_writeFrequency+0xca>
 800bbda:	4b17      	ldr	r3, [pc, #92]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bbe2:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800bbea:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 800bbf2:	4b11      	ldr	r3, [pc, #68]	; (800bc38 <PWMBoardSPI_writeFrequency+0x120>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f000 fc22 	bl	800c448 <PWMBuiltIn_writeFrequency>
}
 800bc04:	bf00      	nop
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	f3af 8000 	nop.w
 800bc10:	88e368f1 	.word	0x88e368f1
 800bc14:	3ee4f8b5 	.word	0x3ee4f8b5
 800bc18:	a0b5ed8d 	.word	0xa0b5ed8d
 800bc1c:	3eb0c6f7 	.word	0x3eb0c6f7
 800bc20:	eb851eb8 	.word	0xeb851eb8
 800bc24:	3f9eb851 	.word	0x3f9eb851
 800bc28:	3727c5ac 	.word	0x3727c5ac
 800bc2c:	459c4000 	.word	0x459c4000
 800bc30:	459c4000 	.word	0x459c4000
 800bc34:	45800000 	.word	0x45800000
 800bc38:	20000210 	.word	0x20000210
 800bc3c:	3cf5c28f 	.word	0x3cf5c28f
 800bc40:	4bcdfe60 	.word	0x4bcdfe60
 800bc44:	4bcdfe60 	.word	0x4bcdfe60

0800bc48 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	ed87 0a00 	vstr	s0, [r7]
 800bc54:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	ed97 0a00 	vldr	s0, [r7]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fe05 	bl	800b86c <PWMBoardSPI_bufferDutyChannel>
}
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	4603      	mov	r3, r0
 800bc72:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e009      	b.n	800bc8e <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	79fa      	ldrb	r2, [r7, #7]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fe96 	bl	800b9b4 <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b8f      	cmp	r3, #143	; 0x8f
 800bc92:	ddf2      	ble.n	800bc7a <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800bc94:	f7ff fdae 	bl	800b7f4 <PWMBoardSPI_sendFrame>
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800bca6:	f000 f95f 	bl	800bf68 <micros>
 800bcaa:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800bcac:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d106      	bne.n	800bcc6 <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800bcb8:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
 800bcc2:	f7ff fd97 	bl	800b7f4 <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800bcc6:	f000 f94f 	bl	800bf68 <micros>
 800bcca:	4601      	mov	r1, r0
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <PWMBoardSPI_flushDutyAll+0x40>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	1a8a      	subs	r2, r1, r2
 800bcd4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000210 	.word	0x20000210

0800bce4 <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800bcea:	4b36      	ldr	r3, [pc, #216]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f002 fbb4 	bl	800e462 <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800bcfa:	4b32      	ldr	r3, [pc, #200]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a32      	ldr	r2, [pc, #200]	; (800bdc8 <PWMBoardSPI_init+0xe4>)
 800bd00:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
 800bd04:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a30      	ldr	r2, [pc, #192]	; (800bdcc <PWMBoardSPI_init+0xe8>)
 800bd0a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
 800bd0e:	4b2d      	ldr	r3, [pc, #180]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd16:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800bd1a:	4b2a      	ldr	r3, [pc, #168]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2213      	movs	r2, #19
 800bd20:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800bd24:	4b27      	ldr	r3, [pc, #156]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2210      	movs	r2, #16
 800bd2a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
 800bd2e:	4b25      	ldr	r3, [pc, #148]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
 800bd38:	4b22      	ldr	r3, [pc, #136]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
 800bd42:	4b20      	ldr	r3, [pc, #128]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
 800bd4c:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
 800bd56:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
 800bd60:	4b18      	ldr	r3, [pc, #96]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bd6a:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <PWMBoardSPI_init+0xe0>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fd5e 	bl	800c834 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800bd78:	f7ff fd0a 	bl	800b790 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800bd7c:	203f      	movs	r0, #63	; 0x3f
 800bd7e:	f7ff ff74 	bl	800bc6a <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bd82:	2300      	movs	r3, #0
 800bd84:	607b      	str	r3, [r7, #4]
 800bd86:	e009      	b.n	800bd9c <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bdd0 <PWMBoardSPI_init+0xec>
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fd6b 	bl	800b86c <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	607b      	str	r3, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b8f      	cmp	r3, #143	; 0x8f
 800bda0:	ddf2      	ble.n	800bd88 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
 800bda2:	f7ff fd27 	bl	800b7f4 <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
 800bda6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800bdd4 <PWMBoardSPI_init+0xf0>
 800bdaa:	f7ff fe95 	bl	800bad8 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f7ff fe76 	bl	800baa0 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	f7ff fe5b 	bl	800ba70 <PWMBoardSPI_setOutputEnable>

}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000210 	.word	0x20000210
 800bdc8:	20009a60 	.word	0x20009a60
 800bdcc:	40021000 	.word	0x40021000
 800bdd0:	00000000 	.word	0x00000000
 800bdd4:	42200000 	.word	0x42200000

0800bdd8 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	330c      	adds	r3, #12
 800bde6:	2200      	movs	r2, #0
 800bde8:	2100      	movs	r1, #0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff fc52 	bl	800b694 <_ZN15PRESSURE_SOURCEC1Eii>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3344      	adds	r3, #68	; 0x44
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fc4b 	bl	800b694 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	b29a      	uxth	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2104      	movs	r1, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f002 fae4 	bl	800e3d8 <calloc>
 800be10:	4603      	mov	r3, r0
 800be12:	461a      	mov	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2104      	movs	r1, #4
 800be1c:	4618      	mov	r0, r3
 800be1e:	f002 fadb 	bl	800e3d8 <calloc>
 800be22:	4603      	mov	r3, r0
 800be24:	461a      	mov	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	889b      	ldrh	r3, [r3, #4]
 800be32:	461a      	mov	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4293      	cmp	r3, r2
 800be38:	da18      	bge.n	800be6c <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800be3a:	f241 00d4 	movw	r0, #4308	; 0x10d4
 800be3e:	f002 fa0d 	bl	800e25c <_Znwj>
 800be42:	4603      	mov	r3, r0
 800be44:	461c      	mov	r4, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	0059      	lsls	r1, r3, #1
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4620      	mov	r0, r4
 800be54:	f7ff f822 	bl	800ae9c <_ZN7CHAMBERC1Eiii>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689a      	ldr	r2, [r3, #8]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	e7e0      	b.n	800be2e <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a05      	ldr	r2, [pc, #20]	; (800be84 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800be70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 10;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800be78:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	bd90      	pop	{r4, r7, pc}
 800be84:	44fa0000 	.word	0x44fa0000
 800be88:	41200000 	.word	0x41200000

0800be8c <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	460a      	mov	r2, r1
 800be96:	80fb      	strh	r3, [r7, #6]
 800be98:	4613      	mov	r3, r2
 800be9a:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800be9c:	88ba      	ldrh	r2, [r7, #4]
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f996 	bl	800c1d4 <DigitalBuiltIn_Write>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	ed87 0a00 	vstr	s0, [r7]
 800bebc:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800bebe:	88fb      	ldrh	r3, [r7, #6]
 800bec0:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800bec2:	88fb      	ldrh	r3, [r7, #6]
 800bec4:	2b13      	cmp	r3, #19
 800bec6:	d806      	bhi.n	800bed6 <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	ed97 0a00 	vldr	s0, [r7]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fa1c 	bl	800c30c <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800bed4:	e00b      	b.n	800beee <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800bed6:	89fb      	ldrh	r3, [r7, #14]
 800bed8:	3b14      	subs	r3, #20
 800beda:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800bedc:	88fb      	ldrh	r3, [r7, #6]
 800bede:	2b8f      	cmp	r3, #143	; 0x8f
 800bee0:	d805      	bhi.n	800beee <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800bee2:	88fb      	ldrh	r3, [r7, #6]
 800bee4:	ed97 0a00 	vldr	s0, [r7]
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fead 	bl	800bc48 <PWMBoardSPI_writeDuty>
}
 800beee:	bf00      	nop
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <serialReceiveCallback>:
  * @note   This function is called  when serialPort3 receives strings ended with '\r\n' from PC serial communication.
  * Users could use scanf() to read the ASCII string, or use structure to decode the BIN information.
  * @param  pSerialReceiveBuffer : Pointer to the received string ended with '\r\n'.
  * @retval None
  */
__weak  void serialReceiveCallback(char *pSerialReceiveBuffer) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	printf("Running default serialCommandCallback()\r\n");
 800bf00:	4803      	ldr	r0, [pc, #12]	; (800bf10 <serialReceiveCallback+0x18>)
 800bf02:	f003 f9dd 	bl	800f2c0 <puts>
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	080126d8 	.word	0x080126d8

0800bf14 <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
};
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <serialPort1Callback>:

__weak void serialPort1Callback(char *pWirelessReceiveBuffer) {
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	printf("Running default WirelessCommandCallbackFunction()\r\n");
 800bf30:	4803      	ldr	r0, [pc, #12]	; (800bf40 <serialPort1Callback+0x18>)
 800bf32:	f003 f9c5 	bl	800f2c0 <puts>
}
 800bf36:	bf00      	nop
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	08012704 	.word	0x08012704

0800bf44 <serialPort2Callback>:
;

__weak  void serialPort2Callback(char *pSerialPort4Buffer)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]

};
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800bf5c:	f7f5 f84c 	bl	8000ff8 <HAL_GetTick>
 800bf60:	4603      	mov	r3, r0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <micros>:

uint32_t micros()
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800bf6e:	f7ff fff3 	bl	800bf58 <millis>
 800bf72:	4602      	mov	r2, r0
 800bf74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf78:	fb03 f202 	mul.w	r2, r3, r2
 800bf7c:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <micros+0x28>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	4413      	add	r3, r2
 800bf84:	607b      	str	r3, [r7, #4]
	return t;
 800bf86:	687b      	ldr	r3, [r7, #4]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20009d6c 	.word	0x20009d6c

0800bf94 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800bf9c:	f7ff ffe4 	bl	800bf68 <micros>
 800bfa0:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800bfa2:	f7ff ffe1 	bl	800bf68 <micros>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	461a      	mov	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	bfcc      	ite	gt
 800bfb4:	2301      	movgt	r3, #1
 800bfb6:	2300      	movle	r3, #0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d000      	beq.n	800bfc0 <delay_us+0x2c>
 800bfbe:	e7f0      	b.n	800bfa2 <delay_us+0xe>
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800bfd0:	4b20      	ldr	r3, [pc, #128]	; (800c054 <delay_ns+0x8c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	4b1f      	ldr	r3, [pc, #124]	; (800c054 <delay_ns+0x8c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0201 	orr.w	r2, r2, #1
 800bfde:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800bfe0:	4b1c      	ldr	r3, [pc, #112]	; (800c054 <delay_ns+0x8c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4293      	cmp	r3, r2
 800bfec:	bfcc      	ite	gt
 800bfee:	2301      	movgt	r3, #1
 800bff0:	2300      	movle	r3, #0
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d000      	beq.n	800bffa <delay_ns+0x32>
 800bff8:	e7f2      	b.n	800bfe0 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800bffa:	4b16      	ldr	r3, [pc, #88]	; (800c054 <delay_ns+0x8c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6a1a      	ldr	r2, [r3, #32]
 800c000:	f241 1311 	movw	r3, #4369	; 0x1111
 800c004:	4013      	ands	r3, r2
 800c006:	2b00      	cmp	r3, #0
 800c008:	bf0c      	ite	eq
 800c00a:	2301      	moveq	r3, #1
 800c00c:	2300      	movne	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	d014      	beq.n	800c03e <delay_ns+0x76>
 800c014:	4b0f      	ldr	r3, [pc, #60]	; (800c054 <delay_ns+0x8c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6a1a      	ldr	r2, [r3, #32]
 800c01a:	f240 4344 	movw	r3, #1092	; 0x444
 800c01e:	4013      	ands	r3, r2
 800c020:	2b00      	cmp	r3, #0
 800c022:	bf0c      	ite	eq
 800c024:	2301      	moveq	r3, #1
 800c026:	2300      	movne	r3, #0
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d007      	beq.n	800c03e <delay_ns+0x76>
 800c02e:	4b09      	ldr	r3, [pc, #36]	; (800c054 <delay_ns+0x8c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	4b07      	ldr	r3, [pc, #28]	; (800c054 <delay_ns+0x8c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f022 0201 	bic.w	r2, r2, #1
 800c03c:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <delay_ns+0x8c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c046:	bf00      	nop
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20009fec 	.word	0x20009fec

0800c058 <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800c060:	4a04      	ldr	r2, [pc, #16]	; (800c074 <setPeriodControlLoop+0x1c>)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6013      	str	r3, [r2, #0]
}
 800c066:	bf00      	nop
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000214 	.word	0x20000214

0800c078 <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800c080:	4a04      	ldr	r2, [pc, #16]	; (800c094 <setPeriodSendLoop+0x1c>)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6013      	str	r3, [r2, #0]
}
 800c086:	bf00      	nop
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20000218 	.word	0x20000218

0800c098 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]

	_duty=0;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f04f 0200 	mov.w	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800c0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a09      	ldr	r2, [pc, #36]	; (800c0e8 <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800c0c2:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c0d2:	615a      	str	r2, [r3, #20]
	attach(num);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f808 	bl	800c0ec <_ZN14SOLENOID_VALVE6attachEi>
}
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	41200000 	.word	0x41200000

0800c0ec <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	601a      	str	r2, [r3, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	ed93 7a04 	vldr	s14, [r3, #16]
 800c11a:	edd7 7a00 	vldr	s15, [r7]
 800c11e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c126:	dd02      	ble.n	800c12e <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	e00d      	b.n	800c14a <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	ed93 7a05 	vldr	s14, [r3, #20]
 800c134:	edd7 7a00 	vldr	s15, [r7]
 800c138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c140:	d502      	bpl.n	800c148 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	e000      	b.n	800c14a <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800c14c:	ed97 7a00 	vldr	s14, [r7]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	edd3 7a01 	vldr	s15, [r3, #4]
 800c156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c15a:	eef0 7ae7 	vabs.f32	s15, s15
 800c15e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c162:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800c1b0 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800c166:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16e:	dc00      	bgt.n	800c172 <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800c170:	e017      	b.n	800c1a2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c17e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	b29a      	uxth	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	edd3 7a02 	vldr	s15, [r3, #8]
 800c198:	eeb0 0a67 	vmov.f32	s0, s15
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7ff fe87 	bl	800beb0 <PWMWriteDuty>
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	f3af 8000 	nop.w
 800c1b0:	a0b5ed8d 	.word	0xa0b5ed8d
 800c1b4:	3eb0c6f7 	.word	0x3eb0c6f7

0800c1b8 <AnaBuiltInStart>:

uint16_t ADDataBuiltIn[BUILTIN_ANA_IN_NUM];
float fADDataBuiltIn[BUILTIN_ANA_IN_NUM];

void AnaBuiltInStart()
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)(&ADDataBuiltIn[0]),BUILTIN_ANA_IN_NUM);
 800c1bc:	2206      	movs	r2, #6
 800c1be:	4903      	ldr	r1, [pc, #12]	; (800c1cc <AnaBuiltInStart+0x14>)
 800c1c0:	4803      	ldr	r0, [pc, #12]	; (800c1d0 <AnaBuiltInStart+0x18>)
 800c1c2:	f7f4 ff8b 	bl	80010dc <HAL_ADC_Start_DMA>
}
 800c1c6:	bf00      	nop
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	2000a4c4 	.word	0x2000a4c4
 800c1d0:	20001770 	.word	0x20001770

0800c1d4 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	460a      	mov	r2, r1
 800c1de:	80fb      	strh	r3, [r7, #6]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c1e4:	88bb      	ldrh	r3, [r7, #4]
 800c1e6:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c1e8:	88fb      	ldrh	r3, [r7, #6]
 800c1ea:	2b0f      	cmp	r3, #15
 800c1ec:	d80b      	bhi.n	800c206 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c1ee:	88fb      	ldrh	r3, [r7, #6]
 800c1f0:	4a07      	ldr	r2, [pc, #28]	; (800c210 <DigitalBuiltIn_Write+0x3c>)
 800c1f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	4a06      	ldr	r2, [pc, #24]	; (800c214 <DigitalBuiltIn_Write+0x40>)
 800c1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1fe:	7bfa      	ldrb	r2, [r7, #15]
 800c200:	4619      	mov	r1, r3
 800c202:	f7f6 fde9 	bl	8002dd8 <HAL_GPIO_WritePin>
	}
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000021c 	.word	0x2000021c
 800c214:	2000025c 	.word	0x2000025c

0800c218 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3301      	adds	r3, #1
 800c228:	ee07 3a90 	vmov	s15, r3
 800c22c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c230:	edd7 7a00 	vldr	s15, [r7]
 800c234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c23c:	eeb0 0b47 	vmov.f64	d0, d7
 800c240:	f002 f826 	bl	800e290 <round>
 800c244:	eeb0 7b40 	vmov.f64	d7, d0
 800c248:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c24c:	ee17 3a90 	vmov	r3, s15
 800c250:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c258:	4293      	cmp	r3, r2
 800c25a:	bf28      	it	cs
 800c25c:	4613      	movcs	r3, r2
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c266:	b480      	push	{r7}
 800c268:	b085      	sub	sp, #20
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	ee07 3a90 	vmov	s15, r3
 800c276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	3301      	adds	r3, #1
 800c282:	ee07 3a90 	vmov	s15, r3
 800c286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c28e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c292:	eef0 7a66 	vmov.f32	s15, s13
}
 800c296:	eeb0 0a67 	vmov.f32	s0, s15
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0f      	ldr	r2, [pc, #60]	; (800c2f0 <getTIM_SOURCECLK+0x4c>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d013      	beq.n	800c2de <getTIM_SOURCECLK+0x3a>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <getTIM_SOURCECLK+0x50>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00e      	beq.n	800c2de <getTIM_SOURCECLK+0x3a>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a0c      	ldr	r2, [pc, #48]	; (800c2f8 <getTIM_SOURCECLK+0x54>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d009      	beq.n	800c2de <getTIM_SOURCECLK+0x3a>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a0b      	ldr	r2, [pc, #44]	; (800c2fc <getTIM_SOURCECLK+0x58>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d004      	beq.n	800c2de <getTIM_SOURCECLK+0x3a>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a09      	ldr	r2, [pc, #36]	; (800c300 <getTIM_SOURCECLK+0x5c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d101      	bne.n	800c2e2 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c2de:	4b09      	ldr	r3, [pc, #36]	; (800c304 <getTIM_SOURCECLK+0x60>)
 800c2e0:	e000      	b.n	800c2e4 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <getTIM_SOURCECLK+0x64>)
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400
 800c2f8:	40014000 	.word	0x40014000
 800c2fc:	40014400 	.word	0x40014400
 800c300:	40014800 	.word	0x40014800
 800c304:	0cdfe600 	.word	0x0cdfe600
 800c308:	066ff300 	.word	0x066ff300

0800c30c <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c30c:	b590      	push	{r4, r7, lr}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	ed87 0a00 	vstr	s0, [r7]
 800c318:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	4a48      	ldr	r2, [pc, #288]	; (800c440 <PWMBuiltIn_writeDuty+0x134>)
 800c31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d112      	bne.n	800c34c <PWMBuiltIn_writeDuty+0x40>
 800c326:	88fb      	ldrh	r3, [r7, #6]
 800c328:	4a46      	ldr	r2, [pc, #280]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c332:	88fb      	ldrh	r3, [r7, #6]
 800c334:	4a43      	ldr	r2, [pc, #268]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c33a:	681c      	ldr	r4, [r3, #0]
 800c33c:	ed97 0a00 	vldr	s0, [r7]
 800c340:	4608      	mov	r0, r1
 800c342:	f7ff ff69 	bl	800c218 <duty2CCR>
 800c346:	4603      	mov	r3, r0
 800c348:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c34a:	e075      	b.n	800c438 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c34c:	88fb      	ldrh	r3, [r7, #6]
 800c34e:	4a3c      	ldr	r2, [pc, #240]	; (800c440 <PWMBuiltIn_writeDuty+0x134>)
 800c350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c354:	2b04      	cmp	r3, #4
 800c356:	d112      	bne.n	800c37e <PWMBuiltIn_writeDuty+0x72>
 800c358:	88fb      	ldrh	r3, [r7, #6]
 800c35a:	4a3a      	ldr	r2, [pc, #232]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c364:	88fb      	ldrh	r3, [r7, #6]
 800c366:	4a37      	ldr	r2, [pc, #220]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c36c:	681c      	ldr	r4, [r3, #0]
 800c36e:	ed97 0a00 	vldr	s0, [r7]
 800c372:	4608      	mov	r0, r1
 800c374:	f7ff ff50 	bl	800c218 <duty2CCR>
 800c378:	4603      	mov	r3, r0
 800c37a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c37c:	e05c      	b.n	800c438 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	4a2f      	ldr	r2, [pc, #188]	; (800c440 <PWMBuiltIn_writeDuty+0x134>)
 800c382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c386:	2b08      	cmp	r3, #8
 800c388:	d112      	bne.n	800c3b0 <PWMBuiltIn_writeDuty+0xa4>
 800c38a:	88fb      	ldrh	r3, [r7, #6]
 800c38c:	4a2d      	ldr	r2, [pc, #180]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	4a2a      	ldr	r2, [pc, #168]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c39e:	681c      	ldr	r4, [r3, #0]
 800c3a0:	ed97 0a00 	vldr	s0, [r7]
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	f7ff ff37 	bl	800c218 <duty2CCR>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c3ae:	e043      	b.n	800c438 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c3b0:	88fb      	ldrh	r3, [r7, #6]
 800c3b2:	4a23      	ldr	r2, [pc, #140]	; (800c440 <PWMBuiltIn_writeDuty+0x134>)
 800c3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b8:	2b0c      	cmp	r3, #12
 800c3ba:	d112      	bne.n	800c3e2 <PWMBuiltIn_writeDuty+0xd6>
 800c3bc:	88fb      	ldrh	r3, [r7, #6]
 800c3be:	4a21      	ldr	r2, [pc, #132]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	4a1e      	ldr	r2, [pc, #120]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d0:	681c      	ldr	r4, [r3, #0]
 800c3d2:	ed97 0a00 	vldr	s0, [r7]
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	f7ff ff1e 	bl	800c218 <duty2CCR>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c3e0:	e02a      	b.n	800c438 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	4a16      	ldr	r2, [pc, #88]	; (800c440 <PWMBuiltIn_writeDuty+0x134>)
 800c3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ea:	2b10      	cmp	r3, #16
 800c3ec:	d112      	bne.n	800c414 <PWMBuiltIn_writeDuty+0x108>
 800c3ee:	88fb      	ldrh	r3, [r7, #6]
 800c3f0:	4a14      	ldr	r2, [pc, #80]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c3fa:	88fb      	ldrh	r3, [r7, #6]
 800c3fc:	4a11      	ldr	r2, [pc, #68]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c402:	681c      	ldr	r4, [r3, #0]
 800c404:	ed97 0a00 	vldr	s0, [r7]
 800c408:	4608      	mov	r0, r1
 800c40a:	f7ff ff05 	bl	800c218 <duty2CCR>
 800c40e:	4603      	mov	r3, r0
 800c410:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c412:	e011      	b.n	800c438 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	4a0b      	ldr	r2, [pc, #44]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	4a08      	ldr	r2, [pc, #32]	; (800c444 <PWMBuiltIn_writeDuty+0x138>)
 800c424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c428:	681c      	ldr	r4, [r3, #0]
 800c42a:	ed97 0a00 	vldr	s0, [r7]
 800c42e:	4608      	mov	r0, r1
 800c430:	f7ff fef2 	bl	800c218 <duty2CCR>
 800c434:	4603      	mov	r3, r0
 800c436:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd90      	pop	{r4, r7, pc}
 800c440:	200002cc 	.word	0x200002cc
 800c444:	2000027c 	.word	0x2000027c

0800c448 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	ed87 0a00 	vstr	s0, [r7]
 800c454:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c456:	edd7 7a00 	vldr	s15, [r7]
 800c45a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c45e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c718 <PWMBuiltIn_writeFrequency+0x2d0>
 800c462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46a:	d501      	bpl.n	800c470 <PWMBuiltIn_writeFrequency+0x28>
 800c46c:	4bac      	ldr	r3, [pc, #688]	; (800c720 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c46e:	e00b      	b.n	800c488 <PWMBuiltIn_writeFrequency+0x40>
 800c470:	edd7 7a00 	vldr	s15, [r7]
 800c474:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c724 <PWMBuiltIn_writeFrequency+0x2dc>
 800c478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c480:	dd01      	ble.n	800c486 <PWMBuiltIn_writeFrequency+0x3e>
 800c482:	4ba9      	ldr	r3, [pc, #676]	; (800c728 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c484:	e000      	b.n	800c488 <PWMBuiltIn_writeFrequency+0x40>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c48e:	2301      	movs	r3, #1
 800c490:	613b      	str	r3, [r7, #16]
 800c492:	e06f      	b.n	800c574 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c494:	88fa      	ldrh	r2, [r7, #6]
 800c496:	49a5      	ldr	r1, [pc, #660]	; (800c72c <PWMBuiltIn_writeFrequency+0x2e4>)
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	edd3 7a00 	vldr	s15, [r3]
 800c4ac:	ed97 7a00 	vldr	s14, [r7]
 800c4b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b8:	d859      	bhi.n	800c56e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c4ba:	4a9d      	ldr	r2, [pc, #628]	; (800c730 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	499a      	ldr	r1, [pc, #616]	; (800c730 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c4c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d124      	bne.n	800c51a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c4d0:	4a97      	ldr	r2, [pc, #604]	; (800c730 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d8:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c4da:	88fb      	ldrh	r3, [r7, #6]
 800c4dc:	4a95      	ldr	r2, [pc, #596]	; (800c734 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4ea:	edd7 7a00 	vldr	s15, [r7]
 800c4ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c506:	ee17 1a90 	vmov	r1, s15
 800c50a:	88fb      	ldrh	r3, [r7, #6]
 800c50c:	4a8a      	ldr	r2, [pc, #552]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	1e4a      	subs	r2, r1, #1
 800c516:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c518:	e02f      	b.n	800c57a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c51a:	88fb      	ldrh	r3, [r7, #6]
 800c51c:	4a86      	ldr	r2, [pc, #536]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4985      	ldr	r1, [pc, #532]	; (800c73c <PWMBuiltIn_writeFrequency+0x2f4>)
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c52c:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c52e:	88fb      	ldrh	r3, [r7, #6]
 800c530:	4a80      	ldr	r2, [pc, #512]	; (800c734 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c53e:	edd7 7a00 	vldr	s15, [r7]
 800c542:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c546:	88fb      	ldrh	r3, [r7, #6]
 800c548:	4a7b      	ldr	r2, [pc, #492]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c552:	3301      	adds	r3, #1
 800c554:	ee07 3a90 	vmov	s15, r3
 800c558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c564:	ee17 3a90 	vmov	r3, s15
 800c568:	3b01      	subs	r3, #1
 800c56a:	617b      	str	r3, [r7, #20]
			break;
 800c56c:	e005      	b.n	800c57a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	3301      	adds	r3, #1
 800c572:	613b      	str	r3, [r7, #16]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b09      	cmp	r3, #9
 800c578:	dd8c      	ble.n	800c494 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	4a6e      	ldr	r2, [pc, #440]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	429a      	cmp	r2, r3
 800c58a:	f000 80be 	beq.w	800c70a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	e0a9      	b.n	800c6e8 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800c594:	4a68      	ldr	r2, [pc, #416]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c59c:	88fb      	ldrh	r3, [r7, #6]
 800c59e:	4966      	ldr	r1, [pc, #408]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	f040 809c 	bne.w	800c6e2 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800c5aa:	4a65      	ldr	r2, [pc, #404]	; (800c740 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d113      	bne.n	800c5de <PWMBuiltIn_writeFrequency+0x196>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f8c2 	bl	800c744 <PWMBuiltIn_readDuty>
 800c5c0:	eef0 7a40 	vmov.f32	s15, s0
 800c5c4:	4a5c      	ldr	r2, [pc, #368]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5cc:	681c      	ldr	r4, [r3, #0]
 800c5ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c5d2:	6978      	ldr	r0, [r7, #20]
 800c5d4:	f7ff fe20 	bl	800c218 <duty2CCR>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	6363      	str	r3, [r4, #52]	; 0x34
 800c5dc:	e07a      	b.n	800c6d4 <PWMBuiltIn_writeFrequency+0x28c>
 800c5de:	4a58      	ldr	r2, [pc, #352]	; (800c740 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e6:	2b04      	cmp	r3, #4
 800c5e8:	d113      	bne.n	800c612 <PWMBuiltIn_writeFrequency+0x1ca>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 f8a8 	bl	800c744 <PWMBuiltIn_readDuty>
 800c5f4:	eef0 7a40 	vmov.f32	s15, s0
 800c5f8:	4a4f      	ldr	r2, [pc, #316]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c600:	681c      	ldr	r4, [r3, #0]
 800c602:	eeb0 0a67 	vmov.f32	s0, s15
 800c606:	6978      	ldr	r0, [r7, #20]
 800c608:	f7ff fe06 	bl	800c218 <duty2CCR>
 800c60c:	4603      	mov	r3, r0
 800c60e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c610:	e060      	b.n	800c6d4 <PWMBuiltIn_writeFrequency+0x28c>
 800c612:	4a4b      	ldr	r2, [pc, #300]	; (800c740 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c61a:	2b08      	cmp	r3, #8
 800c61c:	d113      	bne.n	800c646 <PWMBuiltIn_writeFrequency+0x1fe>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	b29b      	uxth	r3, r3
 800c622:	4618      	mov	r0, r3
 800c624:	f000 f88e 	bl	800c744 <PWMBuiltIn_readDuty>
 800c628:	eef0 7a40 	vmov.f32	s15, s0
 800c62c:	4a42      	ldr	r2, [pc, #264]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c634:	681c      	ldr	r4, [r3, #0]
 800c636:	eeb0 0a67 	vmov.f32	s0, s15
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	f7ff fdec 	bl	800c218 <duty2CCR>
 800c640:	4603      	mov	r3, r0
 800c642:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c644:	e046      	b.n	800c6d4 <PWMBuiltIn_writeFrequency+0x28c>
 800c646:	4a3e      	ldr	r2, [pc, #248]	; (800c740 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c64e:	2b0c      	cmp	r3, #12
 800c650:	d113      	bne.n	800c67a <PWMBuiltIn_writeFrequency+0x232>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	b29b      	uxth	r3, r3
 800c656:	4618      	mov	r0, r3
 800c658:	f000 f874 	bl	800c744 <PWMBuiltIn_readDuty>
 800c65c:	eef0 7a40 	vmov.f32	s15, s0
 800c660:	4a35      	ldr	r2, [pc, #212]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c668:	681c      	ldr	r4, [r3, #0]
 800c66a:	eeb0 0a67 	vmov.f32	s0, s15
 800c66e:	6978      	ldr	r0, [r7, #20]
 800c670:	f7ff fdd2 	bl	800c218 <duty2CCR>
 800c674:	4603      	mov	r3, r0
 800c676:	6423      	str	r3, [r4, #64]	; 0x40
 800c678:	e02c      	b.n	800c6d4 <PWMBuiltIn_writeFrequency+0x28c>
 800c67a:	4a31      	ldr	r2, [pc, #196]	; (800c740 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c682:	2b10      	cmp	r3, #16
 800c684:	d113      	bne.n	800c6ae <PWMBuiltIn_writeFrequency+0x266>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f85a 	bl	800c744 <PWMBuiltIn_readDuty>
 800c690:	eef0 7a40 	vmov.f32	s15, s0
 800c694:	4a28      	ldr	r2, [pc, #160]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69c:	681c      	ldr	r4, [r3, #0]
 800c69e:	eeb0 0a67 	vmov.f32	s0, s15
 800c6a2:	6978      	ldr	r0, [r7, #20]
 800c6a4:	f7ff fdb8 	bl	800c218 <duty2CCR>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800c6ac:	e012      	b.n	800c6d4 <PWMBuiltIn_writeFrequency+0x28c>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f846 	bl	800c744 <PWMBuiltIn_readDuty>
 800c6b8:	eef0 7a40 	vmov.f32	s15, s0
 800c6bc:	4a1e      	ldr	r2, [pc, #120]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6c4:	681c      	ldr	r4, [r3, #0]
 800c6c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	f7ff fda4 	bl	800c218 <duty2CCR>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800c6d4:	4a18      	ldr	r2, [pc, #96]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b13      	cmp	r3, #19
 800c6ec:	f77f af52 	ble.w	800c594 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c6f0:	88fb      	ldrh	r3, [r7, #6]
 800c6f2:	4a11      	ldr	r2, [pc, #68]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800c6fe:	88fb      	ldrh	r3, [r7, #6]
 800c700:	4a0d      	ldr	r2, [pc, #52]	; (800c738 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	60da      	str	r2, [r3, #12]
	}
}
 800c70a:	bf00      	nop
 800c70c:	371c      	adds	r7, #28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd90      	pop	{r4, r7, pc}
 800c712:	bf00      	nop
 800c714:	f3af 8000 	nop.w
 800c718:	eb851eb8 	.word	0xeb851eb8
 800c71c:	3f9eb851 	.word	0x3f9eb851
 800c720:	3cf5c28f 	.word	0x3cf5c28f
 800c724:	4bcdfe60 	.word	0x4bcdfe60
 800c728:	4bcdfe60 	.word	0x4bcdfe60
 800c72c:	20000990 	.word	0x20000990
 800c730:	20000940 	.word	0x20000940
 800c734:	200008f0 	.word	0x200008f0
 800c738:	2000027c 	.word	0x2000027c
 800c73c:	20000968 	.word	0x20000968
 800c740:	200002cc 	.word	0x200002cc

0800c744 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c74e:	88fb      	ldrh	r3, [r7, #6]
 800c750:	4a2a      	ldr	r2, [pc, #168]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c75a:	88fb      	ldrh	r3, [r7, #6]
 800c75c:	4a28      	ldr	r2, [pc, #160]	; (800c800 <PWMBuiltIn_readDuty+0xbc>)
 800c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <PWMBuiltIn_readDuty+0x30>
 800c766:	88fb      	ldrh	r3, [r7, #6]
 800c768:	4a24      	ldr	r2, [pc, #144]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c772:	e039      	b.n	800c7e8 <PWMBuiltIn_readDuty+0xa4>
 800c774:	88fb      	ldrh	r3, [r7, #6]
 800c776:	4a22      	ldr	r2, [pc, #136]	; (800c800 <PWMBuiltIn_readDuty+0xbc>)
 800c778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d106      	bne.n	800c78e <PWMBuiltIn_readDuty+0x4a>
 800c780:	88fb      	ldrh	r3, [r7, #6]
 800c782:	4a1e      	ldr	r2, [pc, #120]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78c:	e02c      	b.n	800c7e8 <PWMBuiltIn_readDuty+0xa4>
 800c78e:	88fb      	ldrh	r3, [r7, #6]
 800c790:	4a1b      	ldr	r2, [pc, #108]	; (800c800 <PWMBuiltIn_readDuty+0xbc>)
 800c792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c796:	2b08      	cmp	r3, #8
 800c798:	d106      	bne.n	800c7a8 <PWMBuiltIn_readDuty+0x64>
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	4a17      	ldr	r2, [pc, #92]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	e01f      	b.n	800c7e8 <PWMBuiltIn_readDuty+0xa4>
 800c7a8:	88fb      	ldrh	r3, [r7, #6]
 800c7aa:	4a15      	ldr	r2, [pc, #84]	; (800c800 <PWMBuiltIn_readDuty+0xbc>)
 800c7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b0:	2b0c      	cmp	r3, #12
 800c7b2:	d106      	bne.n	800c7c2 <PWMBuiltIn_readDuty+0x7e>
 800c7b4:	88fb      	ldrh	r3, [r7, #6]
 800c7b6:	4a11      	ldr	r2, [pc, #68]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c0:	e012      	b.n	800c7e8 <PWMBuiltIn_readDuty+0xa4>
 800c7c2:	88fb      	ldrh	r3, [r7, #6]
 800c7c4:	4a0e      	ldr	r2, [pc, #56]	; (800c800 <PWMBuiltIn_readDuty+0xbc>)
 800c7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ca:	2b10      	cmp	r3, #16
 800c7cc:	d106      	bne.n	800c7dc <PWMBuiltIn_readDuty+0x98>
 800c7ce:	88fb      	ldrh	r3, [r7, #6]
 800c7d0:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7da:	e005      	b.n	800c7e8 <PWMBuiltIn_readDuty+0xa4>
 800c7dc:	88fb      	ldrh	r3, [r7, #6]
 800c7de:	4a07      	ldr	r2, [pc, #28]	; (800c7fc <PWMBuiltIn_readDuty+0xb8>)
 800c7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f7ff fd3c 	bl	800c266 <CCR2duty>
 800c7ee:	eef0 7a40 	vmov.f32	s15, s0
}
 800c7f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	2000027c 	.word	0x2000027c
 800c800:	200002cc 	.word	0x200002cc

0800c804 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c80c:	4a07      	ldr	r2, [pc, #28]	; (800c82c <PWMBuiltInStartChannel+0x28>)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c814:	4a06      	ldr	r2, [pc, #24]	; (800c830 <PWMBuiltInStartChannel+0x2c>)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c81c:	4619      	mov	r1, r3
 800c81e:	f7f8 fd4b 	bl	80052b8 <HAL_TIM_PWM_Start>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	2000027c 	.word	0x2000027c
 800c830:	200002cc 	.word	0x200002cc

0800c834 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c83c:	4a07      	ldr	r2, [pc, #28]	; (800c85c <PWMBuiltInStopChannel+0x28>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c844:	4a06      	ldr	r2, [pc, #24]	; (800c860 <PWMBuiltInStopChannel+0x2c>)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84c:	4619      	mov	r1, r3
 800c84e:	f7f8 fd77 	bl	8005340 <HAL_TIM_PWM_Stop>
}
 800c852:	bf00      	nop
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	2000027c 	.word	0x2000027c
 800c860:	200002cc 	.word	0x200002cc

0800c864 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c86a:	2300      	movs	r3, #0
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	e005      	b.n	800c87c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff ffc7 	bl	800c804 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3301      	adds	r3, #1
 800c87a:	607b      	str	r3, [r7, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b13      	cmp	r3, #19
 800c880:	ddf6      	ble.n	800c870 <PWMBuiltInStart+0xc>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c892:	2300      	movs	r3, #0
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e06f      	b.n	800c978 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800c898:	4a3c      	ldr	r2, [pc, #240]	; (800c98c <PWMBuiltIn_init+0x100>)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff fcff 	bl	800c2a4 <getTIM_SOURCECLK>
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	4a39      	ldr	r2, [pc, #228]	; (800c990 <PWMBuiltIn_init+0x104>)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	60bb      	str	r3, [r7, #8]
 800c8b4:	e04c      	b.n	800c950 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800c8b6:	4a37      	ldr	r2, [pc, #220]	; (800c994 <PWMBuiltIn_init+0x108>)
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	4934      	ldr	r1, [pc, #208]	; (800c998 <PWMBuiltIn_init+0x10c>)
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800c8ce:	4a33      	ldr	r2, [pc, #204]	; (800c99c <PWMBuiltIn_init+0x110>)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	4930      	ldr	r1, [pc, #192]	; (800c9a0 <PWMBuiltIn_init+0x114>)
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800c8e6:	4a2c      	ldr	r2, [pc, #176]	; (800c998 <PWMBuiltIn_init+0x10c>)
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	ee07 3a90 	vmov	s15, r3
 800c8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f8:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800c8fc:	4a28      	ldr	r2, [pc, #160]	; (800c9a0 <PWMBuiltIn_init+0x114>)
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c904:	3301      	adds	r3, #1
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800c912:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <PWMBuiltIn_init+0x104>)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c922:	edd7 7a01 	vldr	s15, [r7, #4]
 800c926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c92a:	ed97 7a00 	vldr	s14, [r7]
 800c92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c932:	491c      	ldr	r1, [pc, #112]	; (800c9a4 <PWMBuiltIn_init+0x118>)
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	4613      	mov	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	440b      	add	r3, r1
 800c946:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60bb      	str	r3, [r7, #8]
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2b09      	cmp	r3, #9
 800c954:	ddaf      	ble.n	800c8b6 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c9a8 <PWMBuiltIn_init+0x11c>
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff fcd4 	bl	800c30c <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	b29b      	uxth	r3, r3
 800c968:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c9ac <PWMBuiltIn_init+0x120>
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff fd6b 	bl	800c448 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b13      	cmp	r3, #19
 800c97c:	dd8c      	ble.n	800c898 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800c97e:	f7ff ff71 	bl	800c864 <PWMBuiltInStart>
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	2000027c 	.word	0x2000027c
 800c990:	200008f0 	.word	0x200008f0
 800c994:	2000031c 	.word	0x2000031c
 800c998:	20000940 	.word	0x20000940
 800c99c:	20000344 	.word	0x20000344
 800c9a0:	20000968 	.word	0x20000968
 800c9a4:	20000990 	.word	0x20000990
 800c9a8:	00000000 	.word	0x00000000
 800c9ac:	42200000 	.word	0x42200000

0800c9b0 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9be:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
	...

0800c9dc <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9ec:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d15b      	bne.n	800cab0 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	ed93 7a00 	vldr	s14, [r3]
 800c9fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca06:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca12:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca16:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca22:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ca26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca2a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	ed93 7a00 	vldr	s14, [r3]
 800ca34:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca3c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca44:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca50:	3304      	adds	r3, #4
 800ca52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca5a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	ed93 7a00 	vldr	s14, [r3]
 800ca64:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca74:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca80:	3308      	adds	r3, #8
 800ca82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca8a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	ed93 7a00 	vldr	s14, [r3]
 800ca94:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa0:	330c      	adds	r3, #12
 800caa2:	edd7 7a03 	vldr	s15, [r7, #12]
 800caa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caaa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800caae:	e0fc      	b.n	800ccaa <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	f040 80f7 	bne.w	800ccaa <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	ed93 7a00 	vldr	s14, [r3]
 800cac2:	edd7 7a03 	vldr	s15, [r7, #12]
 800cac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caca:	edd7 7a03 	vldr	s15, [r7, #12]
 800cace:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad2:	edd7 7a03 	vldr	s15, [r7, #12]
 800cad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cada:	edd7 7a03 	vldr	s15, [r7, #12]
 800cade:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cae2:	edd7 7a03 	vldr	s15, [r7, #12]
 800cae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caea:	edd7 7a03 	vldr	s15, [r7, #12]
 800caee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ccb8 <kalman_setQ+0x2dc>
 800cafa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cafe:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	ed93 7a00 	vldr	s14, [r3]
 800cb08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb10:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb18:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb20:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb28:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb34:	3304      	adds	r3, #4
 800cb36:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800cb3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb3e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	ed93 7a00 	vldr	s14, [r3]
 800cb48:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb50:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb58:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb60:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cb72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb76:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	ed93 7a00 	vldr	s14, [r3]
 800cb80:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb88:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb90:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb98:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cba0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbac:	330c      	adds	r3, #12
 800cbae:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800cbb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbb6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	ed93 7a00 	vldr	s14, [r3]
 800cbc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cbea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbee:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	ed93 7a00 	vldr	s14, [r3]
 800cbf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc00:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc14:	3314      	adds	r3, #20
 800cc16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc1e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	ed93 7a00 	vldr	s14, [r3]
 800cc28:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc30:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc38:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc40:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4c:	3318      	adds	r3, #24
 800cc4e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cc52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc56:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	ed93 7a00 	vldr	s14, [r3]
 800cc60:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc68:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc70:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7c:	331c      	adds	r3, #28
 800cc7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc86:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	ed93 7a00 	vldr	s14, [r3]
 800cc90:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	3320      	adds	r3, #32
 800cc9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca6:	edc3 7a00 	vstr	s15, [r3]
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	42100000 	.word	0x42100000

0800ccbc <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d105      	bne.n	800ccdc <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd4:	683a      	ldr	r2, [r7, #0]
 800ccd6:	6812      	ldr	r2, [r2, #0]
 800ccd8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800ccda:	e039      	b.n	800cd50 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d134      	bne.n	800cd50 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	6812      	ldr	r2, [r2, #0]
 800ccee:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd00:	3308      	adds	r3, #8
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd0c:	330c      	adds	r3, #12
 800cd0e:	f04f 0200 	mov.w	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd18:	3310      	adds	r3, #16
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	6852      	ldr	r2, [r2, #4]
 800cd1e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd24:	3314      	adds	r3, #20
 800cd26:	f04f 0200 	mov.w	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd30:	3318      	adds	r3, #24
 800cd32:	f04f 0200 	mov.w	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd3c:	331c      	adds	r3, #28
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd48:	3320      	adds	r3, #32
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	6892      	ldr	r2, [r2, #8]
 800cd4e:	601a      	str	r2, [r3, #0]
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	ed87 0a03 	vstr	s0, [r7, #12]
 800cd66:	edc7 0a02 	vstr	s1, [r7, #8]
 800cd6a:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800cd6e:	f107 0108 	add.w	r1, r7, #8
 800cd72:	f107 030c 	add.w	r3, r7, #12
 800cd76:	2200      	movs	r2, #0
 800cd78:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f807 	bl	800cd90 <KALMANFILTER>
 800cd82:	6178      	str	r0, [r7, #20]
	return pk;
 800cd84:	697b      	ldr	r3, [r7, #20]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
	...

0800cd90 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800cda2:	20c4      	movs	r0, #196	; 0xc4
 800cda4:	f001 fb4a 	bl	800e43c <malloc>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <KALMANFILTER+0x26>
		return NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e10e      	b.n	800cfd4 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800cdb6:	22c4      	movs	r2, #196	; 0xc4
 800cdb8:	2100      	movs	r1, #0
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f001 fb51 	bl	800e462 <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	887a      	ldrh	r2, [r7, #2]
 800cdc4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800cdc8:	6978      	ldr	r0, [r7, #20]
 800cdca:	f000 f90f 	bl	800cfec <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	4a82      	ldr	r2, [pc, #520]	; (800cfdc <KALMANFILTER+0x24c>)
 800cdd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	4a81      	ldr	r2, [pc, #516]	; (800cfe0 <KALMANFILTER+0x250>)
 800cdda:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	4a80      	ldr	r2, [pc, #512]	; (800cfe4 <KALMANFILTER+0x254>)
 800cde2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	4a7f      	ldr	r2, [pc, #508]	; (800cfe8 <KALMANFILTER+0x258>)
 800cdea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800cdf6:	887b      	ldrh	r3, [r7, #2]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	f040 8095 	bne.w	800cf28 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce06:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800ce12:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce16:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	3308      	adds	r3, #8
 800ce24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ce28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce2c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	695b      	ldr	r3, [r3, #20]
 800ce34:	330c      	adds	r3, #12
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	3310      	adds	r3, #16
 800ce42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce46:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	3314      	adds	r3, #20
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	3318      	adds	r3, #24
 800ce58:	f04f 0200 	mov.w	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	331c      	adds	r3, #28
 800ce64:	f04f 0200 	mov.w	r2, #0
 800ce68:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	3320      	adds	r3, #32
 800ce70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce74:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	f04f 0200 	mov.w	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	69db      	ldr	r3, [r3, #28]
 800ce84:	3304      	adds	r3, #4
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	3308      	adds	r3, #8
 800ce92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ce96:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cea0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	3304      	adds	r3, #4
 800cea8:	f04f 0200 	mov.w	r2, #0
 800ceac:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	f04f 0200 	mov.w	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebe:	330c      	adds	r3, #12
 800cec0:	f04f 0200 	mov.w	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	3310      	adds	r3, #16
 800cecc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ced0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	3314      	adds	r3, #20
 800ced8:	f04f 0200 	mov.w	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee2:	3318      	adds	r3, #24
 800cee4:	f04f 0200 	mov.w	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	331c      	adds	r3, #28
 800cef0:	f04f 0200 	mov.w	r2, #0
 800cef4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefa:	3320      	adds	r3, #32
 800cefc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf00:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f103 0210 	add.w	r2, r3, #16
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	3350      	adds	r3, #80	; 0x50
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	f7f3 ffd7 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f103 0220 	add.w	r2, r3, #32
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	3358      	adds	r3, #88	; 0x58
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7f3 ffce 	bl	8000ec2 <arm_mat_trans_f32>
 800cf26:	e048      	b.n	800cfba <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800cf28:	887b      	ldrh	r3, [r7, #2]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d145      	bne.n	800cfba <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf36:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	3308      	adds	r3, #8
 800cf48:	f04f 0200 	mov.w	r2, #0
 800cf4c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	330c      	adds	r3, #12
 800cf54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf58:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800cf5a:	ed97 7a01 	vldr	s14, [r7, #4]
 800cf5e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cf6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf72:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf88:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	3304      	adds	r3, #4
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f103 0210 	add.w	r2, r3, #16
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3350      	adds	r3, #80	; 0x50
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	f7f3 ff8d 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	f103 0220 	add.w	r2, r3, #32
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	3358      	adds	r3, #88	; 0x58
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	f7f3 ff84 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cfc0:	68f9      	ldr	r1, [r7, #12]
 800cfc2:	6978      	ldr	r0, [r7, #20]
 800cfc4:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cfcc:	68b9      	ldr	r1, [r7, #8]
 800cfce:	6978      	ldr	r0, [r7, #20]
 800cfd0:	4798      	blx	r3

	return ptKalmanFilter;
 800cfd2:	697b      	ldr	r3, [r7, #20]
	
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	0800d35d 	.word	0x0800d35d
 800cfe0:	0800c9dd 	.word	0x0800c9dd
 800cfe4:	0800ccbd 	.word	0x0800ccbd
 800cfe8:	0800c9b1 	.word	0x0800c9b1

0800cfec <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	f040 80d9 	bne.w	800d1b2 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800d000:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d004:	f001 fa1a 	bl	800e43c <malloc>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d018:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800d01a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d01e:	2100      	movs	r1, #0
 800d020:	68b8      	ldr	r0, [r7, #8]
 800d022:	f001 fa1e 	bl	800e462 <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2201      	movs	r2, #1
 800d02c:	2103      	movs	r1, #3
 800d02e:	f7f3 fb77 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f103 0010 	add.w	r0, r3, #16
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	330c      	adds	r3, #12
 800d03c:	2203      	movs	r2, #3
 800d03e:	2103      	movs	r1, #3
 800d040:	f7f3 fb6e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f103 0018 	add.w	r0, r3, #24
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3330      	adds	r3, #48	; 0x30
 800d04e:	2201      	movs	r2, #1
 800d050:	2103      	movs	r1, #3
 800d052:	f7f3 fb65 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f103 0008 	add.w	r0, r3, #8
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	333c      	adds	r3, #60	; 0x3c
 800d060:	2201      	movs	r2, #1
 800d062:	2101      	movs	r1, #1
 800d064:	f7f3 fb5c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f103 0020 	add.w	r0, r3, #32
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	3340      	adds	r3, #64	; 0x40
 800d072:	2203      	movs	r2, #3
 800d074:	2103      	movs	r1, #3
 800d076:	f7f3 fb53 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	33f4      	adds	r3, #244	; 0xf4
 800d084:	2201      	movs	r2, #1
 800d086:	2103      	movs	r1, #3
 800d088:	f7f3 fb4a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	3364      	adds	r3, #100	; 0x64
 800d096:	2203      	movs	r2, #3
 800d098:	2103      	movs	r1, #3
 800d09a:	f7f3 fb41 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	3388      	adds	r3, #136	; 0x88
 800d0a8:	2203      	movs	r2, #3
 800d0aa:	2103      	movs	r1, #3
 800d0ac:	f7f3 fb38 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	33ac      	adds	r3, #172	; 0xac
 800d0ba:	2203      	movs	r2, #3
 800d0bc:	2103      	movs	r1, #3
 800d0be:	f7f3 fb2f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	33d0      	adds	r3, #208	; 0xd0
 800d0cc:	2203      	movs	r2, #3
 800d0ce:	2103      	movs	r1, #3
 800d0d0:	f7f3 fb26 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	2103      	movs	r1, #3
 800d0e4:	f7f3 fb1c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d0f4:	2203      	movs	r2, #3
 800d0f6:	2103      	movs	r1, #3
 800d0f8:	f7f3 fb12 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d108:	2203      	movs	r2, #3
 800d10a:	2103      	movs	r1, #3
 800d10c:	f7f3 fb08 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800d11c:	2203      	movs	r2, #3
 800d11e:	2103      	movs	r1, #3
 800d120:	f7f3 fafe 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d130:	2203      	movs	r2, #3
 800d132:	2103      	movs	r1, #3
 800d134:	f7f3 faf4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d144:	2203      	movs	r2, #3
 800d146:	2103      	movs	r1, #3
 800d148:	f7f3 faea 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d158:	2203      	movs	r2, #3
 800d15a:	2103      	movs	r1, #3
 800d15c:	f7f3 fae0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d16c:	2201      	movs	r2, #1
 800d16e:	2103      	movs	r1, #3
 800d170:	f7f3 fad6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d180:	2201      	movs	r2, #1
 800d182:	2103      	movs	r1, #3
 800d184:	f7f3 facc 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d194:	2201      	movs	r2, #1
 800d196:	2103      	movs	r1, #3
 800d198:	f7f3 fac2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	2103      	movs	r1, #3
 800d1ac:	f7f3 fab8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d1b0:	e0d0      	b.n	800d354 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f040 80cb 	bne.w	800d354 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d1be:	20bc      	movs	r0, #188	; 0xbc
 800d1c0:	f001 f93c 	bl	800e43c <malloc>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d1d4:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d1d6:	22bc      	movs	r2, #188	; 0xbc
 800d1d8:	2100      	movs	r1, #0
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f001 f941 	bl	800e462 <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	2102      	movs	r1, #2
 800d1e8:	f7f3 fa9a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0010 	add.w	r0, r3, #16
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3308      	adds	r3, #8
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	2102      	movs	r1, #2
 800d1fa:	f7f3 fa91 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f103 0018 	add.w	r0, r3, #24
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	3318      	adds	r3, #24
 800d208:	2201      	movs	r2, #1
 800d20a:	2102      	movs	r1, #2
 800d20c:	f7f3 fa88 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f103 0008 	add.w	r0, r3, #8
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	3320      	adds	r3, #32
 800d21a:	2201      	movs	r2, #1
 800d21c:	2101      	movs	r1, #1
 800d21e:	f7f3 fa7f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f103 0020 	add.w	r0, r3, #32
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3324      	adds	r3, #36	; 0x24
 800d22c:	2202      	movs	r2, #2
 800d22e:	2101      	movs	r1, #1
 800d230:	f7f3 fa76 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	3358      	adds	r3, #88	; 0x58
 800d23e:	2201      	movs	r2, #1
 800d240:	2101      	movs	r1, #1
 800d242:	f7f3 fa6d 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	332c      	adds	r3, #44	; 0x2c
 800d250:	2202      	movs	r2, #2
 800d252:	2102      	movs	r1, #2
 800d254:	f7f3 fa64 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	333c      	adds	r3, #60	; 0x3c
 800d262:	2202      	movs	r2, #2
 800d264:	2102      	movs	r1, #2
 800d266:	f7f3 fa5b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	334c      	adds	r3, #76	; 0x4c
 800d274:	2201      	movs	r2, #1
 800d276:	2101      	movs	r1, #1
 800d278:	f7f3 fa52 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3350      	adds	r3, #80	; 0x50
 800d286:	2201      	movs	r2, #1
 800d288:	2102      	movs	r1, #2
 800d28a:	f7f3 fa49 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	335c      	adds	r3, #92	; 0x5c
 800d298:	2202      	movs	r2, #2
 800d29a:	2102      	movs	r1, #2
 800d29c:	f7f3 fa40 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	336c      	adds	r3, #108	; 0x6c
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2102      	movs	r1, #2
 800d2ae:	f7f3 fa37 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3374      	adds	r3, #116	; 0x74
 800d2bc:	2201      	movs	r2, #1
 800d2be:	2102      	movs	r1, #2
 800d2c0:	f7f3 fa2e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	337c      	adds	r3, #124	; 0x7c
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	2102      	movs	r1, #2
 800d2d2:	f7f3 fa25 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	338c      	adds	r3, #140	; 0x8c
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	f7f3 fa1c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	339c      	adds	r3, #156	; 0x9c
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	2101      	movs	r1, #1
 800d2f6:	f7f3 fa13 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	33a0      	adds	r3, #160	; 0xa0
 800d304:	2201      	movs	r2, #1
 800d306:	2101      	movs	r1, #1
 800d308:	f7f3 fa0a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	33a4      	adds	r3, #164	; 0xa4
 800d316:	2201      	movs	r2, #1
 800d318:	2101      	movs	r1, #1
 800d31a:	f7f3 fa01 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	33a8      	adds	r3, #168	; 0xa8
 800d328:	2201      	movs	r2, #1
 800d32a:	2101      	movs	r1, #1
 800d32c:	f7f3 f9f8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	33ac      	adds	r3, #172	; 0xac
 800d33a:	2201      	movs	r2, #1
 800d33c:	2102      	movs	r1, #2
 800d33e:	f7f3 f9ef 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	33b4      	adds	r3, #180	; 0xb4
 800d34c:	2201      	movs	r2, #1
 800d34e:	2102      	movs	r1, #2
 800d350:	f7f3 f9e6 	bl	8000720 <arm_mat_init_f32>
}
 800d354:	bf00      	nop
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f103 0010 	add.w	r0, r3, #16
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3398      	adds	r3, #152	; 0x98
 800d370:	461a      	mov	r2, r3
 800d372:	f7f3 fc25 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f103 0010 	add.w	r0, r3, #16
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3368      	adds	r3, #104	; 0x68
 800d386:	461a      	mov	r2, r3
 800d388:	f7f3 fc1a 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	3370      	adds	r3, #112	; 0x70
 800d39c:	461a      	mov	r2, r3
 800d39e:	f7f3 fc0f 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3368      	adds	r3, #104	; 0x68
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	f7f3 f91c 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3360      	adds	r3, #96	; 0x60
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	f7f3 fbf9 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f103 0020 	add.w	r0, r3, #32
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3378      	adds	r3, #120	; 0x78
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f7f3 fbee 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	3380      	adds	r3, #128	; 0x80
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	f7f3 f8fb 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3378      	adds	r3, #120	; 0x78
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7f3 f9a2 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3348      	adds	r3, #72	; 0x48
 800d41c:	461a      	mov	r2, r3
 800d41e:	f7f3 fbcf 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f103 0020 	add.w	r0, r3, #32
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3388      	adds	r3, #136	; 0x88
 800d432:	461a      	mov	r2, r3
 800d434:	f7f3 fbc4 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3390      	adds	r3, #144	; 0x90
 800d448:	461a      	mov	r2, r3
 800d44a:	f7f3 fca2 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	33a0      	adds	r3, #160	; 0xa0
 800d45e:	461a      	mov	r2, r3
 800d460:	f7f3 fbae 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	33a0      	adds	r3, #160	; 0xa0
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	4619      	mov	r1, r3
 800d472:	f7f3 f8bd 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f103 0120 	add.w	r1, r3, #32
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3330      	adds	r3, #48	; 0x30
 800d486:	461a      	mov	r2, r3
 800d488:	f7f3 fb9a 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	3370      	adds	r3, #112	; 0x70
 800d49c:	461a      	mov	r2, r3
 800d49e:	f7f3 fb8f 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	3330      	adds	r3, #48	; 0x30
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	f7f3 fc6d 	bl	8000d92 <arm_mat_sub_f32>

}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b089      	sub	sp, #36	; 0x24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	61f8      	str	r0, [r7, #28]
 800d4c8:	ed87 0a06 	vstr	s0, [r7, #24]
 800d4cc:	edc7 0a05 	vstr	s1, [r7, #20]
 800d4d0:	ed87 1a04 	vstr	s2, [r7, #16]
 800d4d4:	edc7 1a03 	vstr	s3, [r7, #12]
 800d4d8:	ed87 2a02 	vstr	s4, [r7, #8]
 800d4dc:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d4f8:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	f04f 0200 	mov.w	r2, #0
 800d500:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d50e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	f04f 0200 	mov.w	r2, #0
 800d516:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	4a2f      	ldr	r2, [pc, #188]	; (800d5d8 <initPID+0x118>)
 800d51c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	edd3 6a02 	vldr	s13, [r3, #8]
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	ed93 7a00 	vldr	s14, [r3]
 800d52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	edd3 6a08 	vldr	s13, [r3, #32]
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	ed93 7a08 	vldr	s14, [r3, #32]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	ed93 6a07 	vldr	s12, [r3, #28]
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	edd3 7a05 	vldr	s15, [r3, #20]
 800d54c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d550:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	edd3 7a00 	vldr	s15, [r3]
 800d564:	eeb1 7a67 	vneg.f32	s14, s15
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d56e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	f04f 0200 	mov.w	r2, #0
 800d588:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	f04f 0200 	mov.w	r2, #0
 800d590:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	f04f 0200 	mov.w	r2, #0
 800d598:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	f04f 0200 	mov.w	r2, #0
 800d5a0:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800d5a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5ac:	eef1 7a67 	vneg.f32	s15, s15
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800d5bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d5c0:	eef1 7a67 	vneg.f32	s15, s15
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800d5ca:	bf00      	nop
 800d5cc:	3724      	adds	r7, #36	; 0x24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	41700000 	.word	0x41700000

0800d5dc <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	ed87 0a05 	vstr	s0, [r7, #20]
 800d5e6:	edc7 0a04 	vstr	s1, [r7, #16]
 800d5ea:	ed87 1a03 	vstr	s2, [r7, #12]
 800d5ee:	edc7 1a02 	vstr	s3, [r7, #8]
 800d5f2:	ed87 2a01 	vstr	s4, [r7, #4]
 800d5f6:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800d5fa:	2054      	movs	r0, #84	; 0x54
 800d5fc:	f000 ff1e 	bl	800e43c <malloc>
 800d600:	4603      	mov	r3, r0
 800d602:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <newPID+0x32>
		return NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	e014      	b.n	800d638 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800d60e:	2254      	movs	r2, #84	; 0x54
 800d610:	2100      	movs	r1, #0
 800d612:	69f8      	ldr	r0, [r7, #28]
 800d614:	f000 ff25 	bl	800e462 <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800d618:	edd7 2a00 	vldr	s5, [r7]
 800d61c:	ed97 2a01 	vldr	s4, [r7, #4]
 800d620:	edd7 1a02 	vldr	s3, [r7, #8]
 800d624:	ed97 1a03 	vldr	s2, [r7, #12]
 800d628:	edd7 0a04 	vldr	s1, [r7, #16]
 800d62c:	ed97 0a05 	vldr	s0, [r7, #20]
 800d630:	69f8      	ldr	r0, [r7, #28]
 800d632:	f7ff ff45 	bl	800d4c0 <initPID>
	return pp;
 800d636:	69fb      	ldr	r3, [r7, #28]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <usart1CommandHandler>:




void usart1CommandHandler()
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
	serialPort1Callback((char *)Usart1Device.RxBuf);
 800d644:	4802      	ldr	r0, [pc, #8]	; (800d650 <usart1CommandHandler+0x10>)
 800d646:	f7fe fc6f 	bl	800bf28 <serialPort1Callback>

}
 800d64a:	bf00      	nop
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	2000cf12 	.word	0x2000cf12

0800d654 <usart3CommandHandler>:
void usart3CommandHandler()
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
	int len=Usart3Device.countRxLineBuf+Usart3Device.countRxBuf;
 800d65a:	4a3b      	ldr	r2, [pc, #236]	; (800d748 <usart3CommandHandler+0xf4>)
 800d65c:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d660:	4413      	add	r3, r2
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	4619      	mov	r1, r3
 800d666:	4a38      	ldr	r2, [pc, #224]	; (800d748 <usart3CommandHandler+0xf4>)
 800d668:	f241 7350 	movw	r3, #5968	; 0x1750
 800d66c:	4413      	add	r3, r2
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	440b      	add	r3, r1
 800d672:	607b      	str	r3, [r7, #4]

	//If overflow Clear
	if(len>UART_RX_BUF_SIZE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d67a:	dd12      	ble.n	800d6a2 <usart3CommandHandler+0x4e>
	{
		memset(Usart3Device.RxLineBuf,0,UART_RX_BUF_SIZE);
 800d67c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d680:	2100      	movs	r1, #0
 800d682:	4832      	ldr	r0, [pc, #200]	; (800d74c <usart3CommandHandler+0xf8>)
 800d684:	f000 feed 	bl	800e462 <memset>
		Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d688:	4a2f      	ldr	r2, [pc, #188]	; (800d748 <usart3CommandHandler+0xf4>)
 800d68a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d68e:	4413      	add	r3, r2
 800d690:	4a2e      	ldr	r2, [pc, #184]	; (800d74c <usart3CommandHandler+0xf8>)
 800d692:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=0;
 800d694:	4a2c      	ldr	r2, [pc, #176]	; (800d748 <usart3CommandHandler+0xf4>)
 800d696:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d69a:	4413      	add	r3, r2
 800d69c:	2200      	movs	r2, #0
 800d69e:	801a      	strh	r2, [r3, #0]
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
			Usart3Device.countRxLineBuf=0;
		}
	}

}
 800d6a0:	e04e      	b.n	800d740 <usart3CommandHandler+0xec>
		memcpy(&(Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf]),Usart3Device.RxBuf,Usart3Device.countRxBuf);
 800d6a2:	4a29      	ldr	r2, [pc, #164]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6a4:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d6a8:	4413      	add	r3, r2
 800d6aa:	881b      	ldrh	r3, [r3, #0]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800d6b2:	4413      	add	r3, r2
 800d6b4:	4a24      	ldr	r2, [pc, #144]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6b6:	1898      	adds	r0, r3, r2
 800d6b8:	4a23      	ldr	r2, [pc, #140]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6ba:	f241 7350 	movw	r3, #5968	; 0x1750
 800d6be:	4413      	add	r3, r2
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4922      	ldr	r1, [pc, #136]	; (800d750 <usart3CommandHandler+0xfc>)
 800d6c6:	f000 fec1 	bl	800e44c <memcpy>
		Usart3Device.pRxLineBuf+=Usart3Device.countRxBuf;
 800d6ca:	4a1f      	ldr	r2, [pc, #124]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6cc:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d6d0:	4413      	add	r3, r2
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	491c      	ldr	r1, [pc, #112]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6d6:	f241 7350 	movw	r3, #5968	; 0x1750
 800d6da:	440b      	add	r3, r1
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	441a      	add	r2, r3
 800d6e0:	4919      	ldr	r1, [pc, #100]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6e2:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d6e6:	440b      	add	r3, r1
 800d6e8:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=len;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	b299      	uxth	r1, r3
 800d6ee:	4a16      	ldr	r2, [pc, #88]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6f0:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d6f4:	4413      	add	r3, r2
 800d6f6:	460a      	mov	r2, r1
 800d6f8:	801a      	strh	r2, [r3, #0]
		if (Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf-1]=='\n')
 800d6fa:	4a13      	ldr	r2, [pc, #76]	; (800d748 <usart3CommandHandler+0xf4>)
 800d6fc:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d700:	4413      	add	r3, r2
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	3b01      	subs	r3, #1
 800d706:	4a10      	ldr	r2, [pc, #64]	; (800d748 <usart3CommandHandler+0xf4>)
 800d708:	441a      	add	r2, r3
 800d70a:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800d70e:	4413      	add	r3, r2
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b0a      	cmp	r3, #10
 800d714:	d114      	bne.n	800d740 <usart3CommandHandler+0xec>
			serialReceiveCallback((char *)Usart3Device.RxLineBuf);
 800d716:	480d      	ldr	r0, [pc, #52]	; (800d74c <usart3CommandHandler+0xf8>)
 800d718:	f7fe fbee 	bl	800bef8 <serialReceiveCallback>
			memset(Usart3Device.RxLineBuf,0,len);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	461a      	mov	r2, r3
 800d720:	2100      	movs	r1, #0
 800d722:	480a      	ldr	r0, [pc, #40]	; (800d74c <usart3CommandHandler+0xf8>)
 800d724:	f000 fe9d 	bl	800e462 <memset>
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d728:	4a07      	ldr	r2, [pc, #28]	; (800d748 <usart3CommandHandler+0xf4>)
 800d72a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d72e:	4413      	add	r3, r2
 800d730:	4a06      	ldr	r2, [pc, #24]	; (800d74c <usart3CommandHandler+0xf8>)
 800d732:	601a      	str	r2, [r3, #0]
			Usart3Device.countRxLineBuf=0;
 800d734:	4a04      	ldr	r2, [pc, #16]	; (800d748 <usart3CommandHandler+0xf4>)
 800d736:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d73a:	4413      	add	r3, r2
 800d73c:	2200      	movs	r2, #0
 800d73e:	801a      	strh	r2, [r3, #0]
}
 800d740:	bf00      	nop
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	2000d3a8 	.word	0x2000d3a8
 800d74c:	2000e878 	.word	0x2000e878
 800d750:	2000e67e 	.word	0x2000e67e

0800d754 <usart2CommandHandler>:

void usart2CommandHandler()
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we want to make sure it has the right number of bytes
		serialPort2Callback((char *)Usart2Device.RxBuf);
 800d758:	4802      	ldr	r0, [pc, #8]	; (800d764 <usart2CommandHandler+0x10>)
 800d75a:	f7fe fbf3 	bl	800bf44 <serialPort2Callback>
}
 800d75e:	bf00      	nop
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	2000b7a6 	.word	0x2000b7a6

0800d768 <UartCommandHandler>:
void UartCommandHandler(UART_DEVICE *UsartDevice)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	if(UsartDevice == &Usart3Device)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a08      	ldr	r2, [pc, #32]	; (800d794 <UartCommandHandler+0x2c>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d102      	bne.n	800d77e <UartCommandHandler+0x16>
		usart3CommandHandler();
 800d778:	f7ff ff6c 	bl	800d654 <usart3CommandHandler>
	else if(UsartDevice == &Usart2Device)
		usart2CommandHandler();
}
 800d77c:	e005      	b.n	800d78a <UartCommandHandler+0x22>
	else if(UsartDevice == &Usart2Device)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a05      	ldr	r2, [pc, #20]	; (800d798 <UartCommandHandler+0x30>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d101      	bne.n	800d78a <UartCommandHandler+0x22>
		usart2CommandHandler();
 800d786:	f7ff ffe5 	bl	800d754 <usart2CommandHandler>
}
 800d78a:	bf00      	nop
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	2000d3a8 	.word	0x2000d3a8
 800d798:	2000a4d0 	.word	0x2000a4d0

0800d79c <my_UsartInit>:


/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	af00      	add	r7, sp, #0

	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800d7a0:	f44f 7218 	mov.w	r2, #608	; 0x260
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4849      	ldr	r0, [pc, #292]	; (800d8cc <my_UsartInit+0x130>)
 800d7a8:	f000 fe5b 	bl	800e462 <memset>
	printfBinStruct.header[0]=0x5a;
 800d7ac:	4b47      	ldr	r3, [pc, #284]	; (800d8cc <my_UsartInit+0x130>)
 800d7ae:	225a      	movs	r2, #90	; 0x5a
 800d7b0:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800d7b2:	4b46      	ldr	r3, [pc, #280]	; (800d8cc <my_UsartInit+0x130>)
 800d7b4:	225a      	movs	r2, #90	; 0x5a
 800d7b6:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800d7b8:	4b44      	ldr	r3, [pc, #272]	; (800d8cc <my_UsartInit+0x130>)
 800d7ba:	22a5      	movs	r2, #165	; 0xa5
 800d7bc:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800d7be:	4b43      	ldr	r3, [pc, #268]	; (800d8cc <my_UsartInit+0x130>)
 800d7c0:	22a5      	movs	r2, #165	; 0xa5
 800d7c2:	70da      	strb	r2, [r3, #3]

	printfBinStruct.pData=printfBinStruct.data;
 800d7c4:	4b41      	ldr	r3, [pc, #260]	; (800d8cc <my_UsartInit+0x130>)
 800d7c6:	4a42      	ldr	r2, [pc, #264]	; (800d8d0 <my_UsartInit+0x134>)
 800d7c8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c

	 memset(&Usart3Device,0,sizeof(Usart3Device));
 800d7cc:	f241 726c 	movw	r2, #5996	; 0x176c
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	4840      	ldr	r0, [pc, #256]	; (800d8d4 <my_UsartInit+0x138>)
 800d7d4:	f000 fe45 	bl	800e462 <memset>
	 Usart3Device.huart = &huart3;
 800d7d8:	4b3e      	ldr	r3, [pc, #248]	; (800d8d4 <my_UsartInit+0x138>)
 800d7da:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d7de:	4a3e      	ldr	r2, [pc, #248]	; (800d8d8 <my_UsartInit+0x13c>)
 800d7e0:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxBuf = Usart3Device.RxBuf;
 800d7e2:	4a3c      	ldr	r2, [pc, #240]	; (800d8d4 <my_UsartInit+0x138>)
 800d7e4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d7e8:	4413      	add	r3, r2
 800d7ea:	4a3c      	ldr	r2, [pc, #240]	; (800d8dc <my_UsartInit+0x140>)
 800d7ec:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d7ee:	4a39      	ldr	r2, [pc, #228]	; (800d8d4 <my_UsartInit+0x138>)
 800d7f0:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d7f4:	4413      	add	r3, r2
 800d7f6:	4a3a      	ldr	r2, [pc, #232]	; (800d8e0 <my_UsartInit+0x144>)
 800d7f8:	601a      	str	r2, [r3, #0]
	 Usart3Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart3Device.RxBuf;
 800d7fa:	4a36      	ldr	r2, [pc, #216]	; (800d8d4 <my_UsartInit+0x138>)
 800d7fc:	f241 7354 	movw	r3, #5972	; 0x1754
 800d800:	4413      	add	r3, r2
 800d802:	4a36      	ldr	r2, [pc, #216]	; (800d8dc <my_UsartInit+0x140>)
 800d804:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart3Device.huart, Usart3Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d806:	4b33      	ldr	r3, [pc, #204]	; (800d8d4 <my_UsartInit+0x138>)
 800d808:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d812:	4932      	ldr	r1, [pc, #200]	; (800d8dc <my_UsartInit+0x140>)
 800d814:	4618      	mov	r0, r3
 800d816:	f7f8 fe85 	bl	8006524 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart3Device.huart, UART_IT_IDLE);
 800d81a:	4b2e      	ldr	r3, [pc, #184]	; (800d8d4 <my_UsartInit+0x138>)
 800d81c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	4b2b      	ldr	r3, [pc, #172]	; (800d8d4 <my_UsartInit+0x138>)
 800d828:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f042 0210 	orr.w	r2, r2, #16
 800d834:	601a      	str	r2, [r3, #0]

	// memset(&Usart2Device,0,sizeof(Usart2Device));
	 Usart2Device.huart = &huart2;
 800d836:	4b2b      	ldr	r3, [pc, #172]	; (800d8e4 <my_UsartInit+0x148>)
 800d838:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d83c:	4a2a      	ldr	r2, [pc, #168]	; (800d8e8 <my_UsartInit+0x14c>)
 800d83e:	601a      	str	r2, [r3, #0]
	 Usart2Device.pRxBuf = Usart2Device.RxBuf;
 800d840:	4a28      	ldr	r2, [pc, #160]	; (800d8e4 <my_UsartInit+0x148>)
 800d842:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d846:	4413      	add	r3, r2
 800d848:	4a28      	ldr	r2, [pc, #160]	; (800d8ec <my_UsartInit+0x150>)
 800d84a:	601a      	str	r2, [r3, #0]
	 Usart2Device.pRxLineBuf=Usart2Device.RxLineBuf;
 800d84c:	4a25      	ldr	r2, [pc, #148]	; (800d8e4 <my_UsartInit+0x148>)
 800d84e:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d852:	4413      	add	r3, r2
 800d854:	4a26      	ldr	r2, [pc, #152]	; (800d8f0 <my_UsartInit+0x154>)
 800d856:	601a      	str	r2, [r3, #0]
	 Usart2Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart2Device.RxBuf;
 800d858:	4a22      	ldr	r2, [pc, #136]	; (800d8e4 <my_UsartInit+0x148>)
 800d85a:	f241 7354 	movw	r3, #5972	; 0x1754
 800d85e:	4413      	add	r3, r2
 800d860:	4a22      	ldr	r2, [pc, #136]	; (800d8ec <my_UsartInit+0x150>)
 800d862:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart2Device.huart, Usart2Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d864:	4b1f      	ldr	r3, [pc, #124]	; (800d8e4 <my_UsartInit+0x148>)
 800d866:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d870:	491e      	ldr	r1, [pc, #120]	; (800d8ec <my_UsartInit+0x150>)
 800d872:	4618      	mov	r0, r3
 800d874:	f7f8 fe56 	bl	8006524 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart2Device.huart, UART_IT_IDLE);
 800d878:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <my_UsartInit+0x148>)
 800d87a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	4b17      	ldr	r3, [pc, #92]	; (800d8e4 <my_UsartInit+0x148>)
 800d886:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f042 0210 	orr.w	r2, r2, #16
 800d892:	601a      	str	r2, [r3, #0]

	 memset(&Usart1Device,0,sizeof(Usart1Device));
 800d894:	f241 726c 	movw	r2, #5996	; 0x176c
 800d898:	2100      	movs	r1, #0
 800d89a:	4816      	ldr	r0, [pc, #88]	; (800d8f4 <my_UsartInit+0x158>)
 800d89c:	f000 fde1 	bl	800e462 <memset>
	 Usart1Device.huart = &huart1;
 800d8a0:	4b14      	ldr	r3, [pc, #80]	; (800d8f4 <my_UsartInit+0x158>)
 800d8a2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d8a6:	4a14      	ldr	r2, [pc, #80]	; (800d8f8 <my_UsartInit+0x15c>)
 800d8a8:	601a      	str	r2, [r3, #0]
	 Usart1Device.pRxBuf = Usart1Device.RxBuf;
 800d8aa:	4a12      	ldr	r2, [pc, #72]	; (800d8f4 <my_UsartInit+0x158>)
 800d8ac:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4a12      	ldr	r2, [pc, #72]	; (800d8fc <my_UsartInit+0x160>)
 800d8b4:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800d8b6:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <my_UsartInit+0x15c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <my_UsartInit+0x15c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f042 0220 	orr.w	r2, r2, #32
 800d8c4:	601a      	str	r2, [r3, #0]

}
 800d8c6:	bf00      	nop
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20000cb0 	.word	0x20000cb0
 800d8d0:	20000cb4 	.word	0x20000cb4
 800d8d4:	2000d3a8 	.word	0x2000d3a8
 800d8d8:	2000a08c 	.word	0x2000a08c
 800d8dc:	2000e67e 	.word	0x2000e67e
 800d8e0:	2000e878 	.word	0x2000e878
 800d8e4:	2000a4d0 	.word	0x2000a4d0
 800d8e8:	2000a1ec 	.word	0x2000a1ec
 800d8ec:	2000b7a6 	.word	0x2000b7a6
 800d8f0:	2000b9a0 	.word	0x2000b9a0
 800d8f4:	2000bc3c 	.word	0x2000bc3c
 800d8f8:	2000a16c 	.word	0x2000a16c
 800d8fc:	2000cf12 	.word	0x2000cf12

0800d900 <HAL_UART_RxIdleCallback>:
  HAL_UART_IRQHandler(&huart3);
}
*/

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	f003 0310 	and.w	r3, r3, #16
 800d912:	2b10      	cmp	r3, #16
 800d914:	bf0c      	ite	eq
 800d916:	2301      	moveq	r3, #1
 800d918:	2300      	movne	r3, #0
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	60fb      	str	r3, [r7, #12]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0310 	and.w	r3, r3, #16
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bf14      	ite	ne
 800d92c:	2301      	movne	r3, #1
 800d92e:	2300      	moveq	r3, #0
 800d930:	b2db      	uxtb	r3, r3
 800d932:	60bb      	str	r3, [r7, #8]

	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d01b      	beq.n	800d972 <HAL_UART_RxIdleCallback+0x72>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d018      	beq.n	800d972 <HAL_UART_RxIdleCallback+0x72>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2210      	movs	r2, #16
 800d946:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		if(huart == &huart3)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a0d      	ldr	r2, [pc, #52]	; (800d980 <HAL_UART_RxIdleCallback+0x80>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d106      	bne.n	800d95e <HAL_UART_RxIdleCallback+0x5e>
			Usart3Device.Received = 1;
 800d950:	4a0c      	ldr	r2, [pc, #48]	; (800d984 <HAL_UART_RxIdleCallback+0x84>)
 800d952:	f241 7352 	movw	r3, #5970	; 0x1752
 800d956:	4413      	add	r3, r2
 800d958:	2201      	movs	r2, #1
 800d95a:	801a      	strh	r2, [r3, #0]

		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/

	}

}
 800d95c:	e009      	b.n	800d972 <HAL_UART_RxIdleCallback+0x72>
		else if(huart == &huart2)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a09      	ldr	r2, [pc, #36]	; (800d988 <HAL_UART_RxIdleCallback+0x88>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d105      	bne.n	800d972 <HAL_UART_RxIdleCallback+0x72>
			Usart2Device.Received = 1;
 800d966:	4a09      	ldr	r2, [pc, #36]	; (800d98c <HAL_UART_RxIdleCallback+0x8c>)
 800d968:	f241 7352 	movw	r3, #5970	; 0x1752
 800d96c:	4413      	add	r3, r2
 800d96e:	2201      	movs	r2, #1
 800d970:	801a      	strh	r2, [r3, #0]
}
 800d972:	bf00      	nop
 800d974:	3714      	adds	r7, #20
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	2000a08c 	.word	0x2000a08c
 800d984:	2000d3a8 	.word	0x2000d3a8
 800d988:	2000a1ec 	.word	0x2000a1ec
 800d98c:	2000a4d0 	.word	0x2000a4d0

0800d990 <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800d99c:	4a40      	ldr	r2, [pc, #256]	; (800daa0 <_write+0x110>)
 800d99e:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d9ac:	fb03 f302 	mul.w	r3, r3, r2
 800d9b0:	4a3b      	ldr	r2, [pc, #236]	; (800daa0 <_write+0x110>)
 800d9b2:	4413      	add	r3, r2
 800d9b4:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	6978      	ldr	r0, [r7, #20]
 800d9be:	f000 fd45 	bl	800e44c <memcpy>
	*(pDes+len)='\0';
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800d9cc:	4a34      	ldr	r2, [pc, #208]	; (800daa0 <_write+0x110>)
 800d9ce:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	b291      	uxth	r1, r2
 800d9da:	4a31      	ldr	r2, [pc, #196]	; (800daa0 <_write+0x110>)
 800d9dc:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	460a      	mov	r2, r1
 800d9e6:	80da      	strh	r2, [r3, #6]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800d9e8:	4a2d      	ldr	r2, [pc, #180]	; (800daa0 <_write+0x110>)
 800d9ea:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d9ee:	4413      	add	r3, r2
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	b299      	uxth	r1, r3
 800d9f6:	4a2a      	ldr	r2, [pc, #168]	; (800daa0 <_write+0x110>)
 800d9f8:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d9fc:	4413      	add	r3, r2
 800d9fe:	460a      	mov	r2, r1
 800da00:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800da02:	4a27      	ldr	r2, [pc, #156]	; (800daa0 <_write+0x110>)
 800da04:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800da08:	4413      	add	r3, r2
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d11b      	bne.n	800da48 <_write+0xb8>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800da10:	4b23      	ldr	r3, [pc, #140]	; (800daa0 <_write+0x110>)
 800da12:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da16:	6818      	ldr	r0, [r3, #0]
 800da18:	4a21      	ldr	r2, [pc, #132]	; (800daa0 <_write+0x110>)
 800da1a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800da1e:	4413      	add	r3, r2
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	4a1f      	ldr	r2, [pc, #124]	; (800daa0 <_write+0x110>)
 800da24:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	4413      	add	r3, r2
 800da2c:	88db      	ldrh	r3, [r3, #6]
 800da2e:	461a      	mov	r2, r3
 800da30:	6979      	ldr	r1, [r7, #20]
 800da32:	f7f8 fcfb 	bl	800642c <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800da36:	f7fe fa97 	bl	800bf68 <micros>
 800da3a:	4601      	mov	r1, r0
 800da3c:	4a18      	ldr	r2, [pc, #96]	; (800daa0 <_write+0x110>)
 800da3e:	f241 7358 	movw	r3, #5976	; 0x1758
 800da42:	4413      	add	r3, r2
 800da44:	6019      	str	r1, [r3, #0]
 800da46:	e00a      	b.n	800da5e <_write+0xce>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
 800da48:	4a15      	ldr	r2, [pc, #84]	; (800daa0 <_write+0x110>)
 800da4a:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800da4e:	4413      	add	r3, r2
 800da50:	8819      	ldrh	r1, [r3, #0]
 800da52:	4a13      	ldr	r2, [pc, #76]	; (800daa0 <_write+0x110>)
 800da54:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800da58:	4413      	add	r3, r2
 800da5a:	460a      	mov	r2, r1
 800da5c:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800da5e:	4a10      	ldr	r2, [pc, #64]	; (800daa0 <_write+0x110>)
 800da60:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800da64:	4413      	add	r3, r2
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	b299      	uxth	r1, r3
 800da6c:	4a0c      	ldr	r2, [pc, #48]	; (800daa0 <_write+0x110>)
 800da6e:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800da72:	4413      	add	r3, r2
 800da74:	460a      	mov	r2, r1
 800da76:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800da78:	4a09      	ldr	r2, [pc, #36]	; (800daa0 <_write+0x110>)
 800da7a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800da7e:	4413      	add	r3, r2
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	b299      	uxth	r1, r3
 800da88:	4a05      	ldr	r2, [pc, #20]	; (800daa0 <_write+0x110>)
 800da8a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800da8e:	4413      	add	r3, r2
 800da90:	460a      	mov	r2, r1
 800da92:	801a      	strh	r2, [r3, #0]
//	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800da94:	687b      	ldr	r3, [r7, #4]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	2000d3a8 	.word	0x2000d3a8

0800daa4 <HAL_UART_RxCpltCallback>:
void printfBinPush(int16_t dat)
{
*(printfBinStruct.pData)++=dat;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
	//printf("RxCplCall_Test\r\n");
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <HAL_UART_TxCpltCallback>:

/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	 /*update information*/
	 Usart3Device.TxEnd = micros();
 800dac0:	f7fe fa52 	bl	800bf68 <micros>
 800dac4:	4601      	mov	r1, r0
 800dac6:	4a3c      	ldr	r2, [pc, #240]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800dac8:	f241 735c 	movw	r3, #5980	; 0x175c
 800dacc:	4413      	add	r3, r2
 800dace:	6019      	str	r1, [r3, #0]
	 Usart3Device.lastTxTime = Usart3Device.TxEnd - Usart3Device.TxStart;
 800dad0:	4a39      	ldr	r2, [pc, #228]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800dad2:	f241 735c 	movw	r3, #5980	; 0x175c
 800dad6:	4413      	add	r3, r2
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4937      	ldr	r1, [pc, #220]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800dadc:	f241 7358 	movw	r3, #5976	; 0x1758
 800dae0:	440b      	add	r3, r1
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	1ad2      	subs	r2, r2, r3
 800dae6:	4934      	ldr	r1, [pc, #208]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800dae8:	f241 7364 	movw	r3, #5988	; 0x1764
 800daec:	440b      	add	r3, r1
 800daee:	601a      	str	r2, [r3, #0]
	 Usart3Device.lastTxCount = Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum];
 800daf0:	4b31      	ldr	r3, [pc, #196]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800daf2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	4a2f      	ldr	r2, [pc, #188]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800dafa:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	4413      	add	r3, r2
 800db02:	88db      	ldrh	r3, [r3, #6]
 800db04:	4619      	mov	r1, r3
 800db06:	4a2c      	ldr	r2, [pc, #176]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db08:	f241 7368 	movw	r3, #5992	; 0x1768
 800db0c:	4413      	add	r3, r2
 800db0e:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	Usart3Device.consumerTxBufNum++;
 800db10:	4b29      	ldr	r3, [pc, #164]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db12:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db16:	881b      	ldrh	r3, [r3, #0]
 800db18:	3301      	adds	r3, #1
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	4b26      	ldr	r3, [pc, #152]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db1e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db22:	801a      	strh	r2, [r3, #0]
	Usart3Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800db24:	4b24      	ldr	r3, [pc, #144]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db26:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	f003 0307 	and.w	r3, r3, #7
 800db30:	b29a      	uxth	r2, r3
 800db32:	4b21      	ldr	r3, [pc, #132]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db34:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db38:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 Usart3Device.bufferedTxNum--;
 800db3a:	4a1f      	ldr	r2, [pc, #124]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db3c:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800db40:	4413      	add	r3, r2
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	3b01      	subs	r3, #1
 800db46:	b299      	uxth	r1, r3
 800db48:	4a1b      	ldr	r2, [pc, #108]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db4a:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800db4e:	4413      	add	r3, r2
 800db50:	460a      	mov	r2, r1
 800db52:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(Usart3Device.bufferedTxNum>0){
 800db54:	4a18      	ldr	r2, [pc, #96]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db56:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d025      	beq.n	800dbae <HAL_UART_TxCpltCallback+0xf6>
		Usart3Device.TxStart = micros();
 800db62:	f7fe fa01 	bl	800bf68 <micros>
 800db66:	4601      	mov	r1, r0
 800db68:	4a13      	ldr	r2, [pc, #76]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db6a:	f241 7358 	movw	r3, #5976	; 0x1758
 800db6e:	4413      	add	r3, r2
 800db70:	6019      	str	r1, [r3, #0]
		uint8_t *px = &Usart3Device.TxBuf[Usart3Device.consumerTxBufNum][0];
 800db72:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db74:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	f44f 7316 	mov.w	r3, #600	; 0x258
 800db80:	fb03 f302 	mul.w	r3, r3, r2
 800db84:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db86:	4413      	add	r3, r2
 800db88:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit_DMA(Usart3Device.huart,px,Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum]);
 800db8a:	4b0b      	ldr	r3, [pc, #44]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db8c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800db90:	6818      	ldr	r0, [r3, #0]
 800db92:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db94:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	4a07      	ldr	r2, [pc, #28]	; (800dbb8 <HAL_UART_TxCpltCallback+0x100>)
 800db9c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	4413      	add	r3, r2
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	461a      	mov	r2, r3
 800dba8:	68f9      	ldr	r1, [r7, #12]
 800dbaa:	f7f8 fc3f 	bl	800642c <HAL_UART_Transmit_DMA>
	}
}
 800dbae:	bf00      	nop
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000d3a8 	.word	0x2000d3a8

0800dbbc <myUsart1IRQ>:


void myUsart1IRQ()
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0

 	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800dbc0:	4b25      	ldr	r3, [pc, #148]	; (800dc58 <myUsart1IRQ+0x9c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	69db      	ldr	r3, [r3, #28]
 800dbc6:	f003 0320 	and.w	r3, r3, #32
 800dbca:	2b20      	cmp	r3, #32
 800dbcc:	d141      	bne.n	800dc52 <myUsart1IRQ+0x96>
	{
		*(Usart1Device.pRxBuf)=(uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800dbce:	4b22      	ldr	r3, [pc, #136]	; (800dc58 <myUsart1IRQ+0x9c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dbd4:	4a21      	ldr	r2, [pc, #132]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dbd6:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dbda:	4413      	add	r3, r2
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	b2ca      	uxtb	r2, r1
 800dbe0:	701a      	strb	r2, [r3, #0]
		if(*(Usart1Device.pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800dbe2:	4a1e      	ldr	r2, [pc, #120]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dbe4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dbe8:	4413      	add	r3, r2
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b0a      	cmp	r3, #10
 800dbf0:	d124      	bne.n	800dc3c <myUsart1IRQ+0x80>
		{
			if((Usart1Device.pRxBuf)!=(Usart1Device.RxBuf)) // if '0x0a' is not in the beginning
 800dbf2:	4a1a      	ldr	r2, [pc, #104]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dbf4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dbf8:	4413      	add	r3, r2
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a18      	ldr	r2, [pc, #96]	; (800dc60 <myUsart1IRQ+0xa4>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d027      	beq.n	800dc52 <myUsart1IRQ+0x96>
			{
				if(*(Usart1Device.pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800dc02:	4a16      	ldr	r2, [pc, #88]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dc04:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dc08:	4413      	add	r3, r2
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b0d      	cmp	r3, #13
 800dc12:	d106      	bne.n	800dc22 <myUsart1IRQ+0x66>
			    {
					Usart1Device.Received = 1;
 800dc14:	4a11      	ldr	r2, [pc, #68]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dc16:	f241 7352 	movw	r3, #5970	; 0x1752
 800dc1a:	4413      	add	r3, r2
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else Usart1Device.pRxBuf++;
	}

}
 800dc20:	e017      	b.n	800dc52 <myUsart1IRQ+0x96>
					memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800dc22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dc26:	2100      	movs	r1, #0
 800dc28:	480d      	ldr	r0, [pc, #52]	; (800dc60 <myUsart1IRQ+0xa4>)
 800dc2a:	f000 fc1a 	bl	800e462 <memset>
					Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800dc2e:	4a0b      	ldr	r2, [pc, #44]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dc30:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dc34:	4413      	add	r3, r2
 800dc36:	4a0a      	ldr	r2, [pc, #40]	; (800dc60 <myUsart1IRQ+0xa4>)
 800dc38:	601a      	str	r2, [r3, #0]
}
 800dc3a:	e00a      	b.n	800dc52 <myUsart1IRQ+0x96>
		else Usart1Device.pRxBuf++;
 800dc3c:	4a07      	ldr	r2, [pc, #28]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dc3e:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dc42:	4413      	add	r3, r2
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	4904      	ldr	r1, [pc, #16]	; (800dc5c <myUsart1IRQ+0xa0>)
 800dc4a:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dc4e:	440b      	add	r3, r1
 800dc50:	601a      	str	r2, [r3, #0]
}
 800dc52:	bf00      	nop
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	2000a16c 	.word	0x2000a16c
 800dc5c:	2000bc3c 	.word	0x2000bc3c
 800dc60:	2000cf12 	.word	0x2000cf12

0800dc64 <UsartDMAIdleHandler>:


void UsartDMAIdleHandler(UART_DEVICE *UsartDevice)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	f241 7352 	movw	r3, #5970	; 0x1752
 800dc72:	4413      	add	r3, r2
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	f040 808f 	bne.w	800dd9a <UsartDMAIdleHandler+0x136>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc86:	2b22      	cmp	r3, #34	; 0x22
 800dc88:	d165      	bne.n	800dd56 <UsartDMAIdleHandler+0xf2>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9a:	2b40      	cmp	r3, #64	; 0x40
 800dc9c:	d15b      	bne.n	800dd56 <UsartDMAIdleHandler+0xf2>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689a      	ldr	r2, [r3, #8]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcb8:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d024      	beq.n	800dd12 <UsartDMAIdleHandler+0xae>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	b299      	uxth	r1, r3
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	f241 7350 	movw	r3, #5968	; 0x1750
 800dcee:	4413      	add	r3, r2
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7f4 fbbf 	bl	8002490 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dd2c:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 0201 	bic.w	r2, r2, #1
 800dd48:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2220      	movs	r2, #32
 800dd54:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands*/
			UartCommandHandler(UsartDevice);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff fd06 	bl	800d768 <UartCommandHandler>

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	f241 7352 	movw	r3, #5970	; 0x1752
 800dd62:	4413      	add	r3, r2
 800dd64:	2200      	movs	r2, #0
 800dd66:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	f241 63cc 	movw	r3, #5836	; 0x16cc
 800dd6e:	4413      	add	r3, r2
 800dd70:	2264      	movs	r2, #100	; 0x64
 800dd72:	2100      	movs	r1, #0
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 fb74 	bl	800e462 <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800dd80:	4413      	add	r3, r2
 800dd82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dd86:	2100      	movs	r1, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 fb6a 	bl	800e462 <memset>
			UsartDevice->countRxBuf = 0;
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	f241 7350 	movw	r3, #5968	; 0x1750
 800dd94:	4413      	add	r3, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800dda8:	4413      	add	r3, r2
 800ddaa:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ddae:	4619      	mov	r1, r3
 800ddb0:	f7f8 fbb8 	bl	8006524 <HAL_UART_Receive_DMA>
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <Usart_TerminalHandler>:

/*Put this function in a loop for polling*/
void Usart_TerminalHandler()
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	af00      	add	r7, sp, #0
	UsartDMAIdleHandler(&Usart3Device);
 800ddc0:	4811      	ldr	r0, [pc, #68]	; (800de08 <Usart_TerminalHandler+0x4c>)
 800ddc2:	f7ff ff4f 	bl	800dc64 <UsartDMAIdleHandler>
	UsartDMAIdleHandler(&Usart2Device);
 800ddc6:	4811      	ldr	r0, [pc, #68]	; (800de0c <Usart_TerminalHandler+0x50>)
 800ddc8:	f7ff ff4c 	bl	800dc64 <UsartDMAIdleHandler>

	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800ddcc:	4a10      	ldr	r2, [pc, #64]	; (800de10 <Usart_TerminalHandler+0x54>)
 800ddce:	f241 7352 	movw	r3, #5970	; 0x1752
 800ddd2:	4413      	add	r3, r2
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d113      	bne.n	800de02 <Usart_TerminalHandler+0x46>
	{
		usart1CommandHandler();
 800ddda:	f7ff fc31 	bl	800d640 <usart1CommandHandler>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800ddde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dde2:	2100      	movs	r1, #0
 800dde4:	480b      	ldr	r0, [pc, #44]	; (800de14 <Usart_TerminalHandler+0x58>)
 800dde6:	f000 fb3c 	bl	800e462 <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800ddea:	4a09      	ldr	r2, [pc, #36]	; (800de10 <Usart_TerminalHandler+0x54>)
 800ddec:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800ddf0:	4413      	add	r3, r2
 800ddf2:	4a08      	ldr	r2, [pc, #32]	; (800de14 <Usart_TerminalHandler+0x58>)
 800ddf4:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800ddf6:	4a06      	ldr	r2, [pc, #24]	; (800de10 <Usart_TerminalHandler+0x54>)
 800ddf8:	f241 7352 	movw	r3, #5970	; 0x1752
 800ddfc:	4413      	add	r3, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	801a      	strh	r2, [r3, #0]

	}

}
 800de02:	bf00      	nop
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	2000d3a8 	.word	0x2000d3a8
 800de0c:	2000a4d0 	.word	0x2000a4d0
 800de10:	2000bc3c 	.word	0x2000bc3c
 800de14:	2000cf12 	.word	0x2000cf12

0800de18 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f04f 0200 	mov.w	r2, #0
 800de38:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f04f 0200 	mov.w	r2, #0
 800de40:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a0e      	ldr	r2, [pc, #56]	; (800de80 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800de46:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f240 6266 	movw	r2, #1638	; 0x666
 800de56:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f643 1299 	movw	r2, #14745	; 0x3999
 800de5e:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a08      	ldr	r2, [pc, #32]	; (800de84 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800de64:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a07      	ldr	r2, [pc, #28]	; (800de88 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800de6a:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2210      	movs	r2, #16
 800de70:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	48ca0080 	.word	0x48ca0080
 800de84:	200099fc 	.word	0x200099fc
 800de88:	40021000 	.word	0x40021000

0800de8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800de8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dec4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800de90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800de92:	e003      	b.n	800de9c <LoopCopyDataInit>

0800de94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800de96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800de98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800de9a:	3104      	adds	r1, #4

0800de9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800de9c:	480b      	ldr	r0, [pc, #44]	; (800decc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dea4:	d3f6      	bcc.n	800de94 <CopyDataInit>
  ldr  r2, =_sbss
 800dea6:	4a0b      	ldr	r2, [pc, #44]	; (800ded4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dea8:	e002      	b.n	800deb0 <LoopFillZerobss>

0800deaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800deaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800deac:	f842 3b04 	str.w	r3, [r2], #4

0800deb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800deb0:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800deb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800deb4:	d3f9      	bcc.n	800deaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800deb6:	f7fb fcf9 	bl	80098ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800deba:	f000 fa9b 	bl	800e3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800debe:	f7fa feb7 	bl	8008c30 <main>
  bx  lr    
 800dec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dec4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dec8:	08012a94 	.word	0x08012a94
  ldr  r0, =_sdata
 800decc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ded0:	20000540 	.word	0x20000540
  ldr  r2, =_sbss
 800ded4:	20000540 	.word	0x20000540
  ldr  r3, = _ebss
 800ded8:	2000eb18 	.word	0x2000eb18

0800dedc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dedc:	e7fe      	b.n	800dedc <ADC_IRQHandler>
	...

0800dee0 <setup>:


SOFT_ARM softArm;

void setup()
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	af00      	add	r7, sp, #0
	/* 1000Hz control loop*/
	setPeriodControlLoop(50);
 800dee4:	2032      	movs	r0, #50	; 0x32
 800dee6:	f7fe f8b7 	bl	800c058 <setPeriodControlLoop>

	/* 50Hz serial display loop*/
	setPeriodSendLoop(50);
 800deea:	2032      	movs	r0, #50	; 0x32
 800deec:	f7fe f8c4 	bl	800c078 <setPeriodSendLoop>

	softArm.setup();
 800def0:	4802      	ldr	r0, [pc, #8]	; (800defc <setup+0x1c>)
 800def2:	f000 f84b 	bl	800df8c <_ZN8SOFT_ARM5setupEv>

}
 800def6:	bf00      	nop
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20000f10 	.word	0x20000f10

0800df00 <loop>:

void loop()
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
	softArm.loop();
 800df04:	4802      	ldr	r0, [pc, #8]	; (800df10 <loop+0x10>)
 800df06:	f000 f889 	bl	800e01c <_ZN8SOFT_ARM4loopEv>

}
 800df0a:	bf00      	nop
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000f10 	.word	0x20000f10

0800df14 <serialDisplay>:

void serialDisplay()
{
 800df14:	b480      	push	{r7}
 800df16:	af00      	add	r7, sp, #0

}
 800df18:	bf00      	nop
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
	...

0800df24 <_Z41__static_initialization_and_destruction_0ii>:
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d107      	bne.n	800df44 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d102      	bne.n	800df44 <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
 800df3e:	4803      	ldr	r0, [pc, #12]	; (800df4c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800df40:	f000 f80e 	bl	800df60 <_ZN8SOFT_ARMC1Ev>
}
 800df44:	bf00      	nop
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000f10 	.word	0x20000f10

0800df50 <_GLOBAL__sub_I_softArm>:
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
 800df54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df58:	2001      	movs	r0, #1
 800df5a:	f7ff ffe3 	bl	800df24 <_Z41__static_initialization_and_destruction_0ii>
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 800df60:	b5b0      	push	{r4, r5, r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2408      	movs	r4, #8
 800df6c:	461d      	mov	r5, r3
 800df6e:	2c00      	cmp	r4, #0
 800df70:	db06      	blt.n	800df80 <_ZN8SOFT_ARMC1Ev+0x20>
 800df72:	2106      	movs	r1, #6
 800df74:	4628      	mov	r0, r5
 800df76:	f000 f8ef 	bl	800e158 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 800df7a:	35a4      	adds	r5, #164	; 0xa4
 800df7c:	3c01      	subs	r4, #1
 800df7e:	e7f6      	b.n	800df6e <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4618      	mov	r0, r3
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df8c <_ZN8SOFT_ARM5setupEv>:


void SOFT_ARM::setup()
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800df94:	2300      	movs	r3, #0
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	2b08      	cmp	r3, #8
 800df9c:	dc37      	bgt.n	800e00e <_ZN8SOFT_ARM5setupEv+0x82>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	22a4      	movs	r2, #164	; 0xa4
 800dfa2:	fb02 f303 	mul.w	r3, r2, r3
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	2b05      	cmp	r3, #5
 800dfb4:	dc27      	bgt.n	800e006 <_ZN8SOFT_ARM5setupEv+0x7a>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	69ba      	ldr	r2, [r7, #24]
 800dfba:	3216      	adds	r2, #22
 800dfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc0:	613b      	str	r3, [r7, #16]
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	011b      	lsls	r3, r3, #4
 800dfc6:	3314      	adds	r3, #20
 800dfc8:	60fb      	str	r3, [r7, #12]
			/*analog port is treated as the overall No. in our arm.*/
			bellowCur->attach(pwmPortOffset+i*2, pwmPortOffset+i*2+1, j*6+i);
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	005a      	lsls	r2, r3, #1
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	18d1      	adds	r1, r2, r3
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	005a      	lsls	r2, r3, #1
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	4413      	add	r3, r2
 800dfda:	1c58      	adds	r0, r3, #1
 800dfdc:	69fa      	ldr	r2, [r7, #28]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	4413      	add	r3, r2
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	4413      	add	r3, r2
 800dfec:	4602      	mov	r2, r0
 800dfee:	6938      	ldr	r0, [r7, #16]
 800dff0:	f7fd f862 	bl	800b0b8 <_ZN7CHAMBER6attachEiii>
			bellowCur->writeOpening(0);
 800dff4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e018 <_ZN8SOFT_ARM5setupEv+0x8c>
 800dff8:	6938      	ldr	r0, [r7, #16]
 800dffa:	f7fd f97d 	bl	800b2f8 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++)
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	3301      	adds	r3, #1
 800e002:	61bb      	str	r3, [r7, #24]
 800e004:	e7d4      	b.n	800dfb0 <_ZN8SOFT_ARM5setupEv+0x24>
	for(int j=0;j<SEGMENTNUM;j++){
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	3301      	adds	r3, #1
 800e00a:	61fb      	str	r3, [r7, #28]
 800e00c:	e7c4      	b.n	800df98 <_ZN8SOFT_ARM5setupEv+0xc>
		}
	}

}
 800e00e:	bf00      	nop
 800e010:	3720      	adds	r7, #32
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	00000000 	.word	0x00000000

0800e01c <_ZN8SOFT_ARM4loopEv>:

void SOFT_ARM::loop()
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08a      	sub	sp, #40	; 0x28
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 800e024:	2300      	movs	r3, #0
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	f300 808c 	bgt.w	800e148 <_ZN8SOFT_ARM4loopEv+0x12c>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	22a4      	movs	r2, #164	; 0xa4
 800e034:	fb02 f303 	mul.w	r3, r2, r3
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4413      	add	r3, r2
 800e03c:	61fb      	str	r3, [r7, #28]
		for(int i=0;i<BELLOWNUM;i++)
 800e03e:	2300      	movs	r3, #0
 800e040:	623b      	str	r3, [r7, #32]
 800e042:	6a3b      	ldr	r3, [r7, #32]
 800e044:	2b05      	cmp	r3, #5
 800e046:	dc7b      	bgt.n	800e140 <_ZN8SOFT_ARM4loopEv+0x124>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	6a3a      	ldr	r2, [r7, #32]
 800e04c:	3216      	adds	r2, #22
 800e04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e052:	61bb      	str	r3, [r7, #24]

			armSegCur->bellows[i]->pressure=sensorData[j][i].pressure*100-101325;
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	6a3a      	ldr	r2, [r7, #32]
 800e062:	4413      	add	r3, r2
 800e064:	33c6      	adds	r3, #198	; 0xc6
 800e066:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800e06a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e06e:	b29b      	uxth	r3, r3
 800e070:	461a      	mov	r2, r3
 800e072:	2364      	movs	r3, #100	; 0x64
 800e074:	fb03 f202 	mul.w	r2, r3, r2
 800e078:	4b35      	ldr	r3, [pc, #212]	; (800e150 <_ZN8SOFT_ARM4loopEv+0x134>)
 800e07a:	4413      	add	r3, r2
 800e07c:	69fa      	ldr	r2, [r7, #28]
 800e07e:	6a39      	ldr	r1, [r7, #32]
 800e080:	3116      	adds	r1, #22
 800e082:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e086:	ee07 3a90 	vmov	s15, r3
 800e08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e08e:	edc2 7a27 	vstr	s15, [r2, #156]	; 0x9c

			int commandMode=commandsBuffer[j][i]&0xC000;
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e096:	4613      	mov	r3, r2
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	4413      	add	r3, r2
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	6a3a      	ldr	r2, [r7, #32]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	440b      	add	r3, r1
 800e0aa:	889b      	ldrh	r3, [r3, #4]
 800e0ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e0b0:	617b      	str	r3, [r7, #20]
			if (commandMode==openingControl){
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d11e      	bne.n	800e0f6 <_ZN8SOFT_ARM4loopEv+0xda>
				float openingCommandTemp=((int16_t)(commandsBuffer[j][i]<<2))*0.00012207f;
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	6a3a      	ldr	r2, [r7, #32]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	440b      	add	r3, r1
 800e0d0:	889b      	ldrh	r3, [r3, #4]
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	b21b      	sxth	r3, r3
 800e0d6:	ee07 3a90 	vmov	s15, r3
 800e0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0de:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e154 <_ZN8SOFT_ARM4loopEv+0x138>
 800e0e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0e6:	edc7 7a03 	vstr	s15, [r7, #12]
				bellowCur->writeOpening(openingCommandTemp);
 800e0ea:	ed97 0a03 	vldr	s0, [r7, #12]
 800e0ee:	69b8      	ldr	r0, [r7, #24]
 800e0f0:	f7fd f902 	bl	800b2f8 <_ZN7CHAMBER12writeOpeningEf>
 800e0f4:	e020      	b.n	800e138 <_ZN8SOFT_ARM4loopEv+0x11c>
			}
			else if (commandMode==pressureControl){
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d11d      	bne.n	800e138 <_ZN8SOFT_ARM4loopEv+0x11c>
				float pressureCommandTemp=((uint16_t)(commandsBuffer[j][i]<<2))*100;
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e100:	4613      	mov	r3, r2
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	4413      	add	r3, r2
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	6a3a      	ldr	r2, [r7, #32]
 800e10a:	4413      	add	r3, r2
 800e10c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	440b      	add	r3, r1
 800e114:	889b      	ldrh	r3, [r3, #4]
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	b29b      	uxth	r3, r3
 800e11a:	461a      	mov	r2, r3
 800e11c:	2364      	movs	r3, #100	; 0x64
 800e11e:	fb03 f302 	mul.w	r3, r3, r2
 800e122:	ee07 3a90 	vmov	s15, r3
 800e126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e12a:	edc7 7a04 	vstr	s15, [r7, #16]
				bellowCur->writePressure(pressureCommandTemp);
 800e12e:	ed97 0a04 	vldr	s0, [r7, #16]
 800e132:	69b8      	ldr	r0, [r7, #24]
 800e134:	f7fc ffde 	bl	800b0f4 <_ZN7CHAMBER13writePressureEf>
		for(int i=0;i<BELLOWNUM;i++)
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	3301      	adds	r3, #1
 800e13c:	623b      	str	r3, [r7, #32]
 800e13e:	e780      	b.n	800e042 <_ZN8SOFT_ARM4loopEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	3301      	adds	r3, #1
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
 800e146:	e76f      	b.n	800e028 <_ZN8SOFT_ARM4loopEv+0xc>
			}
		}
	}
}
 800e148:	bf00      	nop
 800e14a:	3728      	adds	r7, #40	; 0x28
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	fffe7433 	.word	0xfffe7433
 800e154:	38ffffd5 	.word	0x38ffffd5

0800e158 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
 800e162:	2084      	movs	r0, #132	; 0x84
 800e164:	f000 f87a 	bl	800e25c <_Znwj>
 800e168:	4603      	mov	r3, r0
 800e16a:	461c      	mov	r4, r3
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	4620      	mov	r0, r4
 800e170:	f7fd fe32 	bl	800bdd8 <_ZN9PNEUDRIVEC1Ei>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b05      	cmp	r3, #5
 800e180:	dc0f      	bgt.n	800e1a2 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e186:	689a      	ldr	r2, [r3, #8]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	6819      	ldr	r1, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	3216      	adds	r2, #22
 800e196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3301      	adds	r3, #1
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	e7ec      	b.n	800e17c <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd90      	pop	{r4, r7, pc}

0800e1ac <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  canbus.RxData=(uint8_t *)(&softArm.sensorData[canbus.RxHeader.StdId]);
 800e1b4:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800e1b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	005b      	lsls	r3, r3, #1
 800e1bc:	4413      	add	r3, r2
 800e1be:	011b      	lsls	r3, r3, #4
 800e1c0:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 800e1c4:	4a0d      	ldr	r2, [pc, #52]	; (800e1fc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800e1c6:	4413      	add	r3, r2
 800e1c8:	4a0b      	ldr	r2, [pc, #44]	; (800e1f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800e1ca:	6613      	str	r3, [r2, #96]	; 0x60
  if (HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e1cc:	4b0a      	ldr	r3, [pc, #40]	; (800e1f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800e1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1d0:	4a0b      	ldr	r2, [pc, #44]	; (800e200 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	4808      	ldr	r0, [pc, #32]	; (800e1f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800e1d6:	f7f3 fc38 	bl	8001a4a <HAL_CAN_GetRxMessage>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bf14      	ite	ne
 800e1e0:	2301      	movne	r3, #1
 800e1e2:	2300      	moveq	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    /* Reception Error */
    Error_Handler();
 800e1ea:	f7fa fe65 	bl	8008eb8 <Error_Handler>
  }

}
 800e1ee:	bf00      	nop
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	200016f4 	.word	0x200016f4
 800e1fc:	20000f10 	.word	0x20000f10
 800e200:	20001734 	.word	0x20001734

0800e204 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	canbus.RxData=(uint8_t *)(&softArm.sensorData[canbus.RxHeader.StdId]);
 800e20c:	4b10      	ldr	r3, [pc, #64]	; (800e250 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800e20e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e210:	4613      	mov	r3, r2
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	4413      	add	r3, r2
 800e216:	011b      	lsls	r3, r3, #4
 800e218:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 800e21c:	4a0d      	ldr	r2, [pc, #52]	; (800e254 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 800e21e:	4413      	add	r3, r2
 800e220:	4a0b      	ldr	r2, [pc, #44]	; (800e250 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800e222:	6613      	str	r3, [r2, #96]	; 0x60
  if (HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800e226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e228:	4a0b      	ldr	r2, [pc, #44]	; (800e258 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 800e22a:	2101      	movs	r1, #1
 800e22c:	4808      	ldr	r0, [pc, #32]	; (800e250 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800e22e:	f7f3 fc0c 	bl	8001a4a <HAL_CAN_GetRxMessage>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	bf14      	ite	ne
 800e238:	2301      	movne	r3, #1
 800e23a:	2300      	moveq	r3, #0
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
  {
    /* Reception Error */
    Error_Handler();
 800e242:	f7fa fe39 	bl	8008eb8 <Error_Handler>
  }


}
 800e246:	bf00      	nop
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	200016f4 	.word	0x200016f4
 800e254:	20000f10 	.word	0x20000f10
 800e258:	20001734 	.word	0x20001734

0800e25c <_Znwj>:
 800e25c:	b510      	push	{r4, lr}
 800e25e:	2800      	cmp	r0, #0
 800e260:	bf14      	ite	ne
 800e262:	4604      	movne	r4, r0
 800e264:	2401      	moveq	r4, #1
 800e266:	4620      	mov	r0, r4
 800e268:	f000 f8e8 	bl	800e43c <malloc>
 800e26c:	b930      	cbnz	r0, 800e27c <_Znwj+0x20>
 800e26e:	f000 f807 	bl	800e280 <_ZSt15get_new_handlerv>
 800e272:	b908      	cbnz	r0, 800e278 <_Znwj+0x1c>
 800e274:	f000 f8a9 	bl	800e3ca <abort>
 800e278:	4780      	blx	r0
 800e27a:	e7f4      	b.n	800e266 <_Znwj+0xa>
 800e27c:	bd10      	pop	{r4, pc}
	...

0800e280 <_ZSt15get_new_handlerv>:
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <_ZSt15get_new_handlerv+0xc>)
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	f3bf 8f5b 	dmb	ish
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	2000175c 	.word	0x2000175c

0800e290 <round>:
 800e290:	ee10 3a90 	vmov	r3, s1
 800e294:	b530      	push	{r4, r5, lr}
 800e296:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e29a:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800e29e:	2913      	cmp	r1, #19
 800e2a0:	ee10 5a90 	vmov	r5, s1
 800e2a4:	ee10 2a10 	vmov	r2, s0
 800e2a8:	dc17      	bgt.n	800e2da <round+0x4a>
 800e2aa:	2900      	cmp	r1, #0
 800e2ac:	da09      	bge.n	800e2c2 <round+0x32>
 800e2ae:	3101      	adds	r1, #1
 800e2b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2b4:	d103      	bne.n	800e2be <round+0x2e>
 800e2b6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e2ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e2be:	2200      	movs	r2, #0
 800e2c0:	e024      	b.n	800e30c <round+0x7c>
 800e2c2:	4815      	ldr	r0, [pc, #84]	; (800e318 <round+0x88>)
 800e2c4:	4108      	asrs	r0, r1
 800e2c6:	4203      	tst	r3, r0
 800e2c8:	d100      	bne.n	800e2cc <round+0x3c>
 800e2ca:	b16a      	cbz	r2, 800e2e8 <round+0x58>
 800e2cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2d0:	410b      	asrs	r3, r1
 800e2d2:	442b      	add	r3, r5
 800e2d4:	ea23 0300 	bic.w	r3, r3, r0
 800e2d8:	e7f1      	b.n	800e2be <round+0x2e>
 800e2da:	2933      	cmp	r1, #51	; 0x33
 800e2dc:	dd05      	ble.n	800e2ea <round+0x5a>
 800e2de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e2e2:	d101      	bne.n	800e2e8 <round+0x58>
 800e2e4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e2e8:	bd30      	pop	{r4, r5, pc}
 800e2ea:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800e2ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e2f2:	40c4      	lsrs	r4, r0
 800e2f4:	4222      	tst	r2, r4
 800e2f6:	d0f7      	beq.n	800e2e8 <round+0x58>
 800e2f8:	2001      	movs	r0, #1
 800e2fa:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800e2fe:	fa00 f101 	lsl.w	r1, r0, r1
 800e302:	1852      	adds	r2, r2, r1
 800e304:	bf28      	it	cs
 800e306:	181b      	addcs	r3, r3, r0
 800e308:	ea22 0204 	bic.w	r2, r2, r4
 800e30c:	4619      	mov	r1, r3
 800e30e:	4610      	mov	r0, r2
 800e310:	ec41 0b10 	vmov	d0, r0, r1
 800e314:	e7e8      	b.n	800e2e8 <round+0x58>
 800e316:	bf00      	nop
 800e318:	000fffff 	.word	0x000fffff
 800e31c:	00000000 	.word	0x00000000

0800e320 <sqrtf>:
 800e320:	b500      	push	{lr}
 800e322:	ed2d 8b02 	vpush	{d8}
 800e326:	b08b      	sub	sp, #44	; 0x2c
 800e328:	eeb0 8a40 	vmov.f32	s16, s0
 800e32c:	f000 f848 	bl	800e3c0 <__ieee754_sqrtf>
 800e330:	4b21      	ldr	r3, [pc, #132]	; (800e3b8 <sqrtf+0x98>)
 800e332:	f993 3000 	ldrsb.w	r3, [r3]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	d028      	beq.n	800e38c <sqrtf+0x6c>
 800e33a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e342:	d623      	bvs.n	800e38c <sqrtf+0x6c>
 800e344:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34c:	d51e      	bpl.n	800e38c <sqrtf+0x6c>
 800e34e:	2201      	movs	r2, #1
 800e350:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800e354:	9200      	str	r2, [sp, #0]
 800e356:	4a19      	ldr	r2, [pc, #100]	; (800e3bc <sqrtf+0x9c>)
 800e358:	9201      	str	r2, [sp, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	9208      	str	r2, [sp, #32]
 800e35e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e362:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e366:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e3b0 <sqrtf+0x90>
 800e36a:	b9a3      	cbnz	r3, 800e396 <sqrtf+0x76>
 800e36c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e370:	4668      	mov	r0, sp
 800e372:	f000 f828 	bl	800e3c6 <matherr>
 800e376:	b1a0      	cbz	r0, 800e3a2 <sqrtf+0x82>
 800e378:	9b08      	ldr	r3, [sp, #32]
 800e37a:	b11b      	cbz	r3, 800e384 <sqrtf+0x64>
 800e37c:	f000 f834 	bl	800e3e8 <__errno>
 800e380:	9b08      	ldr	r3, [sp, #32]
 800e382:	6003      	str	r3, [r0, #0]
 800e384:	ed9d 0b06 	vldr	d0, [sp, #24]
 800e388:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e38c:	b00b      	add	sp, #44	; 0x2c
 800e38e:	ecbd 8b02 	vpop	{d8}
 800e392:	f85d fb04 	ldr.w	pc, [sp], #4
 800e396:	2b02      	cmp	r3, #2
 800e398:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800e39c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800e3a0:	d1e6      	bne.n	800e370 <sqrtf+0x50>
 800e3a2:	f000 f821 	bl	800e3e8 <__errno>
 800e3a6:	2321      	movs	r3, #33	; 0x21
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	e7e5      	b.n	800e378 <sqrtf+0x58>
 800e3ac:	f3af 8000 	nop.w
	...
 800e3b8:	2000036c 	.word	0x2000036c
 800e3bc:	08012758 	.word	0x08012758

0800e3c0 <__ieee754_sqrtf>:
 800e3c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e3c4:	4770      	bx	lr

0800e3c6 <matherr>:
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	4770      	bx	lr

0800e3ca <abort>:
 800e3ca:	b508      	push	{r3, lr}
 800e3cc:	2006      	movs	r0, #6
 800e3ce:	f000 ffbd 	bl	800f34c <raise>
 800e3d2:	2001      	movs	r0, #1
 800e3d4:	f004 f8e6 	bl	80125a4 <_exit>

0800e3d8 <calloc>:
 800e3d8:	4b02      	ldr	r3, [pc, #8]	; (800e3e4 <calloc+0xc>)
 800e3da:	460a      	mov	r2, r1
 800e3dc:	4601      	mov	r1, r0
 800e3de:	6818      	ldr	r0, [r3, #0]
 800e3e0:	f000 b847 	b.w	800e472 <_calloc_r>
 800e3e4:	20000370 	.word	0x20000370

0800e3e8 <__errno>:
 800e3e8:	4b01      	ldr	r3, [pc, #4]	; (800e3f0 <__errno+0x8>)
 800e3ea:	6818      	ldr	r0, [r3, #0]
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop
 800e3f0:	20000370 	.word	0x20000370

0800e3f4 <__libc_init_array>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4e0d      	ldr	r6, [pc, #52]	; (800e42c <__libc_init_array+0x38>)
 800e3f8:	4c0d      	ldr	r4, [pc, #52]	; (800e430 <__libc_init_array+0x3c>)
 800e3fa:	1ba4      	subs	r4, r4, r6
 800e3fc:	10a4      	asrs	r4, r4, #2
 800e3fe:	2500      	movs	r5, #0
 800e400:	42a5      	cmp	r5, r4
 800e402:	d109      	bne.n	800e418 <__libc_init_array+0x24>
 800e404:	4e0b      	ldr	r6, [pc, #44]	; (800e434 <__libc_init_array+0x40>)
 800e406:	4c0c      	ldr	r4, [pc, #48]	; (800e438 <__libc_init_array+0x44>)
 800e408:	f004 f8ce 	bl	80125a8 <_init>
 800e40c:	1ba4      	subs	r4, r4, r6
 800e40e:	10a4      	asrs	r4, r4, #2
 800e410:	2500      	movs	r5, #0
 800e412:	42a5      	cmp	r5, r4
 800e414:	d105      	bne.n	800e422 <__libc_init_array+0x2e>
 800e416:	bd70      	pop	{r4, r5, r6, pc}
 800e418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e41c:	4798      	blx	r3
 800e41e:	3501      	adds	r5, #1
 800e420:	e7ee      	b.n	800e400 <__libc_init_array+0xc>
 800e422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e426:	4798      	blx	r3
 800e428:	3501      	adds	r5, #1
 800e42a:	e7f2      	b.n	800e412 <__libc_init_array+0x1e>
 800e42c:	08012a88 	.word	0x08012a88
 800e430:	08012a88 	.word	0x08012a88
 800e434:	08012a88 	.word	0x08012a88
 800e438:	08012a90 	.word	0x08012a90

0800e43c <malloc>:
 800e43c:	4b02      	ldr	r3, [pc, #8]	; (800e448 <malloc+0xc>)
 800e43e:	4601      	mov	r1, r0
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f000 b873 	b.w	800e52c <_malloc_r>
 800e446:	bf00      	nop
 800e448:	20000370 	.word	0x20000370

0800e44c <memcpy>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	1e43      	subs	r3, r0, #1
 800e450:	440a      	add	r2, r1
 800e452:	4291      	cmp	r1, r2
 800e454:	d100      	bne.n	800e458 <memcpy+0xc>
 800e456:	bd10      	pop	{r4, pc}
 800e458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e45c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e460:	e7f7      	b.n	800e452 <memcpy+0x6>

0800e462 <memset>:
 800e462:	4402      	add	r2, r0
 800e464:	4603      	mov	r3, r0
 800e466:	4293      	cmp	r3, r2
 800e468:	d100      	bne.n	800e46c <memset+0xa>
 800e46a:	4770      	bx	lr
 800e46c:	f803 1b01 	strb.w	r1, [r3], #1
 800e470:	e7f9      	b.n	800e466 <memset+0x4>

0800e472 <_calloc_r>:
 800e472:	b538      	push	{r3, r4, r5, lr}
 800e474:	fb02 f401 	mul.w	r4, r2, r1
 800e478:	4621      	mov	r1, r4
 800e47a:	f000 f857 	bl	800e52c <_malloc_r>
 800e47e:	4605      	mov	r5, r0
 800e480:	b118      	cbz	r0, 800e48a <_calloc_r+0x18>
 800e482:	4622      	mov	r2, r4
 800e484:	2100      	movs	r1, #0
 800e486:	f7ff ffec 	bl	800e462 <memset>
 800e48a:	4628      	mov	r0, r5
 800e48c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e490 <_free_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4605      	mov	r5, r0
 800e494:	2900      	cmp	r1, #0
 800e496:	d045      	beq.n	800e524 <_free_r+0x94>
 800e498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e49c:	1f0c      	subs	r4, r1, #4
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	bfb8      	it	lt
 800e4a2:	18e4      	addlt	r4, r4, r3
 800e4a4:	f003 f9d2 	bl	801184c <__malloc_lock>
 800e4a8:	4a1f      	ldr	r2, [pc, #124]	; (800e528 <_free_r+0x98>)
 800e4aa:	6813      	ldr	r3, [r2, #0]
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	b933      	cbnz	r3, 800e4be <_free_r+0x2e>
 800e4b0:	6063      	str	r3, [r4, #4]
 800e4b2:	6014      	str	r4, [r2, #0]
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ba:	f003 b9c8 	b.w	801184e <__malloc_unlock>
 800e4be:	42a3      	cmp	r3, r4
 800e4c0:	d90c      	bls.n	800e4dc <_free_r+0x4c>
 800e4c2:	6821      	ldr	r1, [r4, #0]
 800e4c4:	1862      	adds	r2, r4, r1
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	bf04      	itt	eq
 800e4ca:	681a      	ldreq	r2, [r3, #0]
 800e4cc:	685b      	ldreq	r3, [r3, #4]
 800e4ce:	6063      	str	r3, [r4, #4]
 800e4d0:	bf04      	itt	eq
 800e4d2:	1852      	addeq	r2, r2, r1
 800e4d4:	6022      	streq	r2, [r4, #0]
 800e4d6:	6004      	str	r4, [r0, #0]
 800e4d8:	e7ec      	b.n	800e4b4 <_free_r+0x24>
 800e4da:	4613      	mov	r3, r2
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	b10a      	cbz	r2, 800e4e4 <_free_r+0x54>
 800e4e0:	42a2      	cmp	r2, r4
 800e4e2:	d9fa      	bls.n	800e4da <_free_r+0x4a>
 800e4e4:	6819      	ldr	r1, [r3, #0]
 800e4e6:	1858      	adds	r0, r3, r1
 800e4e8:	42a0      	cmp	r0, r4
 800e4ea:	d10b      	bne.n	800e504 <_free_r+0x74>
 800e4ec:	6820      	ldr	r0, [r4, #0]
 800e4ee:	4401      	add	r1, r0
 800e4f0:	1858      	adds	r0, r3, r1
 800e4f2:	4282      	cmp	r2, r0
 800e4f4:	6019      	str	r1, [r3, #0]
 800e4f6:	d1dd      	bne.n	800e4b4 <_free_r+0x24>
 800e4f8:	6810      	ldr	r0, [r2, #0]
 800e4fa:	6852      	ldr	r2, [r2, #4]
 800e4fc:	605a      	str	r2, [r3, #4]
 800e4fe:	4401      	add	r1, r0
 800e500:	6019      	str	r1, [r3, #0]
 800e502:	e7d7      	b.n	800e4b4 <_free_r+0x24>
 800e504:	d902      	bls.n	800e50c <_free_r+0x7c>
 800e506:	230c      	movs	r3, #12
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	e7d3      	b.n	800e4b4 <_free_r+0x24>
 800e50c:	6820      	ldr	r0, [r4, #0]
 800e50e:	1821      	adds	r1, r4, r0
 800e510:	428a      	cmp	r2, r1
 800e512:	bf04      	itt	eq
 800e514:	6811      	ldreq	r1, [r2, #0]
 800e516:	6852      	ldreq	r2, [r2, #4]
 800e518:	6062      	str	r2, [r4, #4]
 800e51a:	bf04      	itt	eq
 800e51c:	1809      	addeq	r1, r1, r0
 800e51e:	6021      	streq	r1, [r4, #0]
 800e520:	605c      	str	r4, [r3, #4]
 800e522:	e7c7      	b.n	800e4b4 <_free_r+0x24>
 800e524:	bd38      	pop	{r3, r4, r5, pc}
 800e526:	bf00      	nop
 800e528:	20001760 	.word	0x20001760

0800e52c <_malloc_r>:
 800e52c:	b570      	push	{r4, r5, r6, lr}
 800e52e:	1ccd      	adds	r5, r1, #3
 800e530:	f025 0503 	bic.w	r5, r5, #3
 800e534:	3508      	adds	r5, #8
 800e536:	2d0c      	cmp	r5, #12
 800e538:	bf38      	it	cc
 800e53a:	250c      	movcc	r5, #12
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	4606      	mov	r6, r0
 800e540:	db01      	blt.n	800e546 <_malloc_r+0x1a>
 800e542:	42a9      	cmp	r1, r5
 800e544:	d903      	bls.n	800e54e <_malloc_r+0x22>
 800e546:	230c      	movs	r3, #12
 800e548:	6033      	str	r3, [r6, #0]
 800e54a:	2000      	movs	r0, #0
 800e54c:	bd70      	pop	{r4, r5, r6, pc}
 800e54e:	f003 f97d 	bl	801184c <__malloc_lock>
 800e552:	4a21      	ldr	r2, [pc, #132]	; (800e5d8 <_malloc_r+0xac>)
 800e554:	6814      	ldr	r4, [r2, #0]
 800e556:	4621      	mov	r1, r4
 800e558:	b991      	cbnz	r1, 800e580 <_malloc_r+0x54>
 800e55a:	4c20      	ldr	r4, [pc, #128]	; (800e5dc <_malloc_r+0xb0>)
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	b91b      	cbnz	r3, 800e568 <_malloc_r+0x3c>
 800e560:	4630      	mov	r0, r6
 800e562:	f000 feb5 	bl	800f2d0 <_sbrk_r>
 800e566:	6020      	str	r0, [r4, #0]
 800e568:	4629      	mov	r1, r5
 800e56a:	4630      	mov	r0, r6
 800e56c:	f000 feb0 	bl	800f2d0 <_sbrk_r>
 800e570:	1c43      	adds	r3, r0, #1
 800e572:	d124      	bne.n	800e5be <_malloc_r+0x92>
 800e574:	230c      	movs	r3, #12
 800e576:	6033      	str	r3, [r6, #0]
 800e578:	4630      	mov	r0, r6
 800e57a:	f003 f968 	bl	801184e <__malloc_unlock>
 800e57e:	e7e4      	b.n	800e54a <_malloc_r+0x1e>
 800e580:	680b      	ldr	r3, [r1, #0]
 800e582:	1b5b      	subs	r3, r3, r5
 800e584:	d418      	bmi.n	800e5b8 <_malloc_r+0x8c>
 800e586:	2b0b      	cmp	r3, #11
 800e588:	d90f      	bls.n	800e5aa <_malloc_r+0x7e>
 800e58a:	600b      	str	r3, [r1, #0]
 800e58c:	50cd      	str	r5, [r1, r3]
 800e58e:	18cc      	adds	r4, r1, r3
 800e590:	4630      	mov	r0, r6
 800e592:	f003 f95c 	bl	801184e <__malloc_unlock>
 800e596:	f104 000b 	add.w	r0, r4, #11
 800e59a:	1d23      	adds	r3, r4, #4
 800e59c:	f020 0007 	bic.w	r0, r0, #7
 800e5a0:	1ac3      	subs	r3, r0, r3
 800e5a2:	d0d3      	beq.n	800e54c <_malloc_r+0x20>
 800e5a4:	425a      	negs	r2, r3
 800e5a6:	50e2      	str	r2, [r4, r3]
 800e5a8:	e7d0      	b.n	800e54c <_malloc_r+0x20>
 800e5aa:	428c      	cmp	r4, r1
 800e5ac:	684b      	ldr	r3, [r1, #4]
 800e5ae:	bf16      	itet	ne
 800e5b0:	6063      	strne	r3, [r4, #4]
 800e5b2:	6013      	streq	r3, [r2, #0]
 800e5b4:	460c      	movne	r4, r1
 800e5b6:	e7eb      	b.n	800e590 <_malloc_r+0x64>
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	6849      	ldr	r1, [r1, #4]
 800e5bc:	e7cc      	b.n	800e558 <_malloc_r+0x2c>
 800e5be:	1cc4      	adds	r4, r0, #3
 800e5c0:	f024 0403 	bic.w	r4, r4, #3
 800e5c4:	42a0      	cmp	r0, r4
 800e5c6:	d005      	beq.n	800e5d4 <_malloc_r+0xa8>
 800e5c8:	1a21      	subs	r1, r4, r0
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f000 fe80 	bl	800f2d0 <_sbrk_r>
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	d0cf      	beq.n	800e574 <_malloc_r+0x48>
 800e5d4:	6025      	str	r5, [r4, #0]
 800e5d6:	e7db      	b.n	800e590 <_malloc_r+0x64>
 800e5d8:	20001760 	.word	0x20001760
 800e5dc:	20001764 	.word	0x20001764

0800e5e0 <__cvt>:
 800e5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5e2:	ed2d 8b02 	vpush	{d8}
 800e5e6:	eeb0 8b40 	vmov.f64	d8, d0
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	4617      	mov	r7, r2
 800e5ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e5f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e5f2:	ee18 2a90 	vmov	r2, s17
 800e5f6:	f025 0520 	bic.w	r5, r5, #32
 800e5fa:	2a00      	cmp	r2, #0
 800e5fc:	bfb6      	itet	lt
 800e5fe:	222d      	movlt	r2, #45	; 0x2d
 800e600:	2200      	movge	r2, #0
 800e602:	eeb1 8b40 	vneglt.f64	d8, d0
 800e606:	2d46      	cmp	r5, #70	; 0x46
 800e608:	460c      	mov	r4, r1
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	d004      	beq.n	800e618 <__cvt+0x38>
 800e60e:	2d45      	cmp	r5, #69	; 0x45
 800e610:	d100      	bne.n	800e614 <__cvt+0x34>
 800e612:	3401      	adds	r4, #1
 800e614:	2102      	movs	r1, #2
 800e616:	e000      	b.n	800e61a <__cvt+0x3a>
 800e618:	2103      	movs	r1, #3
 800e61a:	ab03      	add	r3, sp, #12
 800e61c:	9301      	str	r3, [sp, #4]
 800e61e:	ab02      	add	r3, sp, #8
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	4622      	mov	r2, r4
 800e624:	4633      	mov	r3, r6
 800e626:	eeb0 0b48 	vmov.f64	d0, d8
 800e62a:	f001 fe99 	bl	8010360 <_dtoa_r>
 800e62e:	2d47      	cmp	r5, #71	; 0x47
 800e630:	d101      	bne.n	800e636 <__cvt+0x56>
 800e632:	07fb      	lsls	r3, r7, #31
 800e634:	d51e      	bpl.n	800e674 <__cvt+0x94>
 800e636:	2d46      	cmp	r5, #70	; 0x46
 800e638:	eb00 0304 	add.w	r3, r0, r4
 800e63c:	d10c      	bne.n	800e658 <__cvt+0x78>
 800e63e:	7802      	ldrb	r2, [r0, #0]
 800e640:	2a30      	cmp	r2, #48	; 0x30
 800e642:	d107      	bne.n	800e654 <__cvt+0x74>
 800e644:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64c:	bf1c      	itt	ne
 800e64e:	f1c4 0401 	rsbne	r4, r4, #1
 800e652:	6034      	strne	r4, [r6, #0]
 800e654:	6832      	ldr	r2, [r6, #0]
 800e656:	4413      	add	r3, r2
 800e658:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e660:	d007      	beq.n	800e672 <__cvt+0x92>
 800e662:	2130      	movs	r1, #48	; 0x30
 800e664:	9a03      	ldr	r2, [sp, #12]
 800e666:	429a      	cmp	r2, r3
 800e668:	d204      	bcs.n	800e674 <__cvt+0x94>
 800e66a:	1c54      	adds	r4, r2, #1
 800e66c:	9403      	str	r4, [sp, #12]
 800e66e:	7011      	strb	r1, [r2, #0]
 800e670:	e7f8      	b.n	800e664 <__cvt+0x84>
 800e672:	9303      	str	r3, [sp, #12]
 800e674:	9b03      	ldr	r3, [sp, #12]
 800e676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e678:	1a1b      	subs	r3, r3, r0
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	b005      	add	sp, #20
 800e67e:	ecbd 8b02 	vpop	{d8}
 800e682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e684 <__exponent>:
 800e684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e686:	2900      	cmp	r1, #0
 800e688:	4604      	mov	r4, r0
 800e68a:	bfba      	itte	lt
 800e68c:	4249      	neglt	r1, r1
 800e68e:	232d      	movlt	r3, #45	; 0x2d
 800e690:	232b      	movge	r3, #43	; 0x2b
 800e692:	2909      	cmp	r1, #9
 800e694:	f804 2b02 	strb.w	r2, [r4], #2
 800e698:	7043      	strb	r3, [r0, #1]
 800e69a:	dd20      	ble.n	800e6de <__exponent+0x5a>
 800e69c:	f10d 0307 	add.w	r3, sp, #7
 800e6a0:	461f      	mov	r7, r3
 800e6a2:	260a      	movs	r6, #10
 800e6a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e6a8:	fb06 1115 	mls	r1, r6, r5, r1
 800e6ac:	3130      	adds	r1, #48	; 0x30
 800e6ae:	2d09      	cmp	r5, #9
 800e6b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e6b4:	f103 32ff 	add.w	r2, r3, #4294967295
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	dc09      	bgt.n	800e6d0 <__exponent+0x4c>
 800e6bc:	3130      	adds	r1, #48	; 0x30
 800e6be:	3b02      	subs	r3, #2
 800e6c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e6c4:	42bb      	cmp	r3, r7
 800e6c6:	4622      	mov	r2, r4
 800e6c8:	d304      	bcc.n	800e6d4 <__exponent+0x50>
 800e6ca:	1a10      	subs	r0, r2, r0
 800e6cc:	b003      	add	sp, #12
 800e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	e7e7      	b.n	800e6a4 <__exponent+0x20>
 800e6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d8:	f804 2b01 	strb.w	r2, [r4], #1
 800e6dc:	e7f2      	b.n	800e6c4 <__exponent+0x40>
 800e6de:	2330      	movs	r3, #48	; 0x30
 800e6e0:	4419      	add	r1, r3
 800e6e2:	7083      	strb	r3, [r0, #2]
 800e6e4:	1d02      	adds	r2, r0, #4
 800e6e6:	70c1      	strb	r1, [r0, #3]
 800e6e8:	e7ef      	b.n	800e6ca <__exponent+0x46>
 800e6ea:	0000      	movs	r0, r0
 800e6ec:	0000      	movs	r0, r0
	...

0800e6f0 <_printf_float>:
 800e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	b08d      	sub	sp, #52	; 0x34
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	4616      	mov	r6, r2
 800e6fa:	461f      	mov	r7, r3
 800e6fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e700:	4605      	mov	r5, r0
 800e702:	f003 f81f 	bl	8011744 <_localeconv_r>
 800e706:	f8d0 b000 	ldr.w	fp, [r0]
 800e70a:	4658      	mov	r0, fp
 800e70c:	f7f1 fd98 	bl	8000240 <strlen>
 800e710:	2300      	movs	r3, #0
 800e712:	930a      	str	r3, [sp, #40]	; 0x28
 800e714:	f8d8 3000 	ldr.w	r3, [r8]
 800e718:	9005      	str	r0, [sp, #20]
 800e71a:	3307      	adds	r3, #7
 800e71c:	f023 0307 	bic.w	r3, r3, #7
 800e720:	f103 0108 	add.w	r1, r3, #8
 800e724:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e728:	6822      	ldr	r2, [r4, #0]
 800e72a:	f8c8 1000 	str.w	r1, [r8]
 800e72e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e732:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e736:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800e9c0 <_printf_float+0x2d0>
 800e73a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e73e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e742:	eeb4 6b47 	vcmp.f64	d6, d7
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	dd24      	ble.n	800e796 <_printf_float+0xa6>
 800e74c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	d502      	bpl.n	800e75c <_printf_float+0x6c>
 800e756:	232d      	movs	r3, #45	; 0x2d
 800e758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e75c:	499a      	ldr	r1, [pc, #616]	; (800e9c8 <_printf_float+0x2d8>)
 800e75e:	4b9b      	ldr	r3, [pc, #620]	; (800e9cc <_printf_float+0x2dc>)
 800e760:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e764:	bf8c      	ite	hi
 800e766:	4688      	movhi	r8, r1
 800e768:	4698      	movls	r8, r3
 800e76a:	f022 0204 	bic.w	r2, r2, #4
 800e76e:	2303      	movs	r3, #3
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	6022      	str	r2, [r4, #0]
 800e774:	f04f 0a00 	mov.w	sl, #0
 800e778:	9700      	str	r7, [sp, #0]
 800e77a:	4633      	mov	r3, r6
 800e77c:	aa0b      	add	r2, sp, #44	; 0x2c
 800e77e:	4621      	mov	r1, r4
 800e780:	4628      	mov	r0, r5
 800e782:	f000 f9e1 	bl	800eb48 <_printf_common>
 800e786:	3001      	adds	r0, #1
 800e788:	f040 8089 	bne.w	800e89e <_printf_float+0x1ae>
 800e78c:	f04f 30ff 	mov.w	r0, #4294967295
 800e790:	b00d      	add	sp, #52	; 0x34
 800e792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e796:	eeb4 0b40 	vcmp.f64	d0, d0
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	d702      	bvc.n	800e7a6 <_printf_float+0xb6>
 800e7a0:	498b      	ldr	r1, [pc, #556]	; (800e9d0 <_printf_float+0x2e0>)
 800e7a2:	4b8c      	ldr	r3, [pc, #560]	; (800e9d4 <_printf_float+0x2e4>)
 800e7a4:	e7dc      	b.n	800e760 <_printf_float+0x70>
 800e7a6:	6861      	ldr	r1, [r4, #4]
 800e7a8:	1c4b      	adds	r3, r1, #1
 800e7aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7ae:	ab0a      	add	r3, sp, #40	; 0x28
 800e7b0:	a809      	add	r0, sp, #36	; 0x24
 800e7b2:	d13b      	bne.n	800e82c <_printf_float+0x13c>
 800e7b4:	2106      	movs	r1, #6
 800e7b6:	6061      	str	r1, [r4, #4]
 800e7b8:	f04f 0c00 	mov.w	ip, #0
 800e7bc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800e7c0:	e9cd 0900 	strd	r0, r9, [sp]
 800e7c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e7c8:	6022      	str	r2, [r4, #0]
 800e7ca:	6861      	ldr	r1, [r4, #4]
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f7ff ff07 	bl	800e5e0 <__cvt>
 800e7d2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800e7d6:	2b47      	cmp	r3, #71	; 0x47
 800e7d8:	4680      	mov	r8, r0
 800e7da:	d109      	bne.n	800e7f0 <_printf_float+0x100>
 800e7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7de:	1cd8      	adds	r0, r3, #3
 800e7e0:	db02      	blt.n	800e7e8 <_printf_float+0xf8>
 800e7e2:	6862      	ldr	r2, [r4, #4]
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	dd47      	ble.n	800e878 <_printf_float+0x188>
 800e7e8:	f1a9 0902 	sub.w	r9, r9, #2
 800e7ec:	fa5f f989 	uxtb.w	r9, r9
 800e7f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7f6:	d824      	bhi.n	800e842 <_printf_float+0x152>
 800e7f8:	3901      	subs	r1, #1
 800e7fa:	464a      	mov	r2, r9
 800e7fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e800:	9109      	str	r1, [sp, #36]	; 0x24
 800e802:	f7ff ff3f 	bl	800e684 <__exponent>
 800e806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e808:	1813      	adds	r3, r2, r0
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	4682      	mov	sl, r0
 800e80e:	6123      	str	r3, [r4, #16]
 800e810:	dc02      	bgt.n	800e818 <_printf_float+0x128>
 800e812:	6822      	ldr	r2, [r4, #0]
 800e814:	07d1      	lsls	r1, r2, #31
 800e816:	d501      	bpl.n	800e81c <_printf_float+0x12c>
 800e818:	3301      	adds	r3, #1
 800e81a:	6123      	str	r3, [r4, #16]
 800e81c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e820:	2b00      	cmp	r3, #0
 800e822:	d0a9      	beq.n	800e778 <_printf_float+0x88>
 800e824:	232d      	movs	r3, #45	; 0x2d
 800e826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e82a:	e7a5      	b.n	800e778 <_printf_float+0x88>
 800e82c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800e830:	f000 8178 	beq.w	800eb24 <_printf_float+0x434>
 800e834:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e838:	d1be      	bne.n	800e7b8 <_printf_float+0xc8>
 800e83a:	2900      	cmp	r1, #0
 800e83c:	d1bc      	bne.n	800e7b8 <_printf_float+0xc8>
 800e83e:	2101      	movs	r1, #1
 800e840:	e7b9      	b.n	800e7b6 <_printf_float+0xc6>
 800e842:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e846:	d119      	bne.n	800e87c <_printf_float+0x18c>
 800e848:	2900      	cmp	r1, #0
 800e84a:	6863      	ldr	r3, [r4, #4]
 800e84c:	dd0c      	ble.n	800e868 <_printf_float+0x178>
 800e84e:	6121      	str	r1, [r4, #16]
 800e850:	b913      	cbnz	r3, 800e858 <_printf_float+0x168>
 800e852:	6822      	ldr	r2, [r4, #0]
 800e854:	07d2      	lsls	r2, r2, #31
 800e856:	d502      	bpl.n	800e85e <_printf_float+0x16e>
 800e858:	3301      	adds	r3, #1
 800e85a:	440b      	add	r3, r1
 800e85c:	6123      	str	r3, [r4, #16]
 800e85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e860:	65a3      	str	r3, [r4, #88]	; 0x58
 800e862:	f04f 0a00 	mov.w	sl, #0
 800e866:	e7d9      	b.n	800e81c <_printf_float+0x12c>
 800e868:	b913      	cbnz	r3, 800e870 <_printf_float+0x180>
 800e86a:	6822      	ldr	r2, [r4, #0]
 800e86c:	07d0      	lsls	r0, r2, #31
 800e86e:	d501      	bpl.n	800e874 <_printf_float+0x184>
 800e870:	3302      	adds	r3, #2
 800e872:	e7f3      	b.n	800e85c <_printf_float+0x16c>
 800e874:	2301      	movs	r3, #1
 800e876:	e7f1      	b.n	800e85c <_printf_float+0x16c>
 800e878:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e87c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e880:	4293      	cmp	r3, r2
 800e882:	db05      	blt.n	800e890 <_printf_float+0x1a0>
 800e884:	6822      	ldr	r2, [r4, #0]
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	07d1      	lsls	r1, r2, #31
 800e88a:	d5e8      	bpl.n	800e85e <_printf_float+0x16e>
 800e88c:	3301      	adds	r3, #1
 800e88e:	e7e5      	b.n	800e85c <_printf_float+0x16c>
 800e890:	2b00      	cmp	r3, #0
 800e892:	bfd4      	ite	le
 800e894:	f1c3 0302 	rsble	r3, r3, #2
 800e898:	2301      	movgt	r3, #1
 800e89a:	4413      	add	r3, r2
 800e89c:	e7de      	b.n	800e85c <_printf_float+0x16c>
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	055a      	lsls	r2, r3, #21
 800e8a2:	d407      	bmi.n	800e8b4 <_printf_float+0x1c4>
 800e8a4:	6923      	ldr	r3, [r4, #16]
 800e8a6:	4642      	mov	r2, r8
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	47b8      	blx	r7
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d12a      	bne.n	800e908 <_printf_float+0x218>
 800e8b2:	e76b      	b.n	800e78c <_printf_float+0x9c>
 800e8b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e8b8:	f240 80de 	bls.w	800ea78 <_printf_float+0x388>
 800e8bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e8c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c8:	d133      	bne.n	800e932 <_printf_float+0x242>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	4a42      	ldr	r2, [pc, #264]	; (800e9d8 <_printf_float+0x2e8>)
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	47b8      	blx	r7
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	f43f af59 	beq.w	800e78c <_printf_float+0x9c>
 800e8da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	db02      	blt.n	800e8e8 <_printf_float+0x1f8>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	07d8      	lsls	r0, r3, #31
 800e8e6:	d50f      	bpl.n	800e908 <_printf_float+0x218>
 800e8e8:	9b05      	ldr	r3, [sp, #20]
 800e8ea:	465a      	mov	r2, fp
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	47b8      	blx	r7
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	f43f af4a 	beq.w	800e78c <_printf_float+0x9c>
 800e8f8:	f04f 0800 	mov.w	r8, #0
 800e8fc:	f104 091a 	add.w	r9, r4, #26
 800e900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e902:	3b01      	subs	r3, #1
 800e904:	4543      	cmp	r3, r8
 800e906:	dc09      	bgt.n	800e91c <_printf_float+0x22c>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	079b      	lsls	r3, r3, #30
 800e90c:	f100 8105 	bmi.w	800eb1a <_printf_float+0x42a>
 800e910:	68e0      	ldr	r0, [r4, #12]
 800e912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e914:	4298      	cmp	r0, r3
 800e916:	bfb8      	it	lt
 800e918:	4618      	movlt	r0, r3
 800e91a:	e739      	b.n	800e790 <_printf_float+0xa0>
 800e91c:	2301      	movs	r3, #1
 800e91e:	464a      	mov	r2, r9
 800e920:	4631      	mov	r1, r6
 800e922:	4628      	mov	r0, r5
 800e924:	47b8      	blx	r7
 800e926:	3001      	adds	r0, #1
 800e928:	f43f af30 	beq.w	800e78c <_printf_float+0x9c>
 800e92c:	f108 0801 	add.w	r8, r8, #1
 800e930:	e7e6      	b.n	800e900 <_printf_float+0x210>
 800e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	dc2b      	bgt.n	800e990 <_printf_float+0x2a0>
 800e938:	2301      	movs	r3, #1
 800e93a:	4a27      	ldr	r2, [pc, #156]	; (800e9d8 <_printf_float+0x2e8>)
 800e93c:	4631      	mov	r1, r6
 800e93e:	4628      	mov	r0, r5
 800e940:	47b8      	blx	r7
 800e942:	3001      	adds	r0, #1
 800e944:	f43f af22 	beq.w	800e78c <_printf_float+0x9c>
 800e948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94a:	b923      	cbnz	r3, 800e956 <_printf_float+0x266>
 800e94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e94e:	b913      	cbnz	r3, 800e956 <_printf_float+0x266>
 800e950:	6823      	ldr	r3, [r4, #0]
 800e952:	07d9      	lsls	r1, r3, #31
 800e954:	d5d8      	bpl.n	800e908 <_printf_float+0x218>
 800e956:	9b05      	ldr	r3, [sp, #20]
 800e958:	465a      	mov	r2, fp
 800e95a:	4631      	mov	r1, r6
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b8      	blx	r7
 800e960:	3001      	adds	r0, #1
 800e962:	f43f af13 	beq.w	800e78c <_printf_float+0x9c>
 800e966:	f04f 0900 	mov.w	r9, #0
 800e96a:	f104 0a1a 	add.w	sl, r4, #26
 800e96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e970:	425b      	negs	r3, r3
 800e972:	454b      	cmp	r3, r9
 800e974:	dc01      	bgt.n	800e97a <_printf_float+0x28a>
 800e976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e978:	e795      	b.n	800e8a6 <_printf_float+0x1b6>
 800e97a:	2301      	movs	r3, #1
 800e97c:	4652      	mov	r2, sl
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	f43f af01 	beq.w	800e78c <_printf_float+0x9c>
 800e98a:	f109 0901 	add.w	r9, r9, #1
 800e98e:	e7ee      	b.n	800e96e <_printf_float+0x27e>
 800e990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e994:	429a      	cmp	r2, r3
 800e996:	bfa8      	it	ge
 800e998:	461a      	movge	r2, r3
 800e99a:	2a00      	cmp	r2, #0
 800e99c:	4691      	mov	r9, r2
 800e99e:	dd07      	ble.n	800e9b0 <_printf_float+0x2c0>
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	4642      	mov	r2, r8
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	47b8      	blx	r7
 800e9aa:	3001      	adds	r0, #1
 800e9ac:	f43f aeee 	beq.w	800e78c <_printf_float+0x9c>
 800e9b0:	f104 031a 	add.w	r3, r4, #26
 800e9b4:	f04f 0a00 	mov.w	sl, #0
 800e9b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9bc:	9307      	str	r3, [sp, #28]
 800e9be:	e017      	b.n	800e9f0 <_printf_float+0x300>
 800e9c0:	ffffffff 	.word	0xffffffff
 800e9c4:	7fefffff 	.word	0x7fefffff
 800e9c8:	08012768 	.word	0x08012768
 800e9cc:	08012764 	.word	0x08012764
 800e9d0:	08012770 	.word	0x08012770
 800e9d4:	0801276c 	.word	0x0801276c
 800e9d8:	08012774 	.word	0x08012774
 800e9dc:	2301      	movs	r3, #1
 800e9de:	9a07      	ldr	r2, [sp, #28]
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	47b8      	blx	r7
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	f43f aed0 	beq.w	800e78c <_printf_float+0x9c>
 800e9ec:	f10a 0a01 	add.w	sl, sl, #1
 800e9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9f2:	9306      	str	r3, [sp, #24]
 800e9f4:	eba3 0309 	sub.w	r3, r3, r9
 800e9f8:	4553      	cmp	r3, sl
 800e9fa:	dcef      	bgt.n	800e9dc <_printf_float+0x2ec>
 800e9fc:	9b06      	ldr	r3, [sp, #24]
 800e9fe:	4498      	add	r8, r3
 800ea00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea04:	429a      	cmp	r2, r3
 800ea06:	db15      	blt.n	800ea34 <_printf_float+0x344>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	07da      	lsls	r2, r3, #31
 800ea0c:	d412      	bmi.n	800ea34 <_printf_float+0x344>
 800ea0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea10:	9a06      	ldr	r2, [sp, #24]
 800ea12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea14:	1a9a      	subs	r2, r3, r2
 800ea16:	eba3 0a01 	sub.w	sl, r3, r1
 800ea1a:	4592      	cmp	sl, r2
 800ea1c:	bfa8      	it	ge
 800ea1e:	4692      	movge	sl, r2
 800ea20:	f1ba 0f00 	cmp.w	sl, #0
 800ea24:	dc0e      	bgt.n	800ea44 <_printf_float+0x354>
 800ea26:	f04f 0800 	mov.w	r8, #0
 800ea2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea2e:	f104 091a 	add.w	r9, r4, #26
 800ea32:	e019      	b.n	800ea68 <_printf_float+0x378>
 800ea34:	9b05      	ldr	r3, [sp, #20]
 800ea36:	465a      	mov	r2, fp
 800ea38:	4631      	mov	r1, r6
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	47b8      	blx	r7
 800ea3e:	3001      	adds	r0, #1
 800ea40:	d1e5      	bne.n	800ea0e <_printf_float+0x31e>
 800ea42:	e6a3      	b.n	800e78c <_printf_float+0x9c>
 800ea44:	4653      	mov	r3, sl
 800ea46:	4642      	mov	r2, r8
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	d1e9      	bne.n	800ea26 <_printf_float+0x336>
 800ea52:	e69b      	b.n	800e78c <_printf_float+0x9c>
 800ea54:	2301      	movs	r3, #1
 800ea56:	464a      	mov	r2, r9
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	47b8      	blx	r7
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f43f ae94 	beq.w	800e78c <_printf_float+0x9c>
 800ea64:	f108 0801 	add.w	r8, r8, #1
 800ea68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea6c:	1a9b      	subs	r3, r3, r2
 800ea6e:	eba3 030a 	sub.w	r3, r3, sl
 800ea72:	4543      	cmp	r3, r8
 800ea74:	dcee      	bgt.n	800ea54 <_printf_float+0x364>
 800ea76:	e747      	b.n	800e908 <_printf_float+0x218>
 800ea78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea7a:	2a01      	cmp	r2, #1
 800ea7c:	dc01      	bgt.n	800ea82 <_printf_float+0x392>
 800ea7e:	07db      	lsls	r3, r3, #31
 800ea80:	d539      	bpl.n	800eaf6 <_printf_float+0x406>
 800ea82:	2301      	movs	r3, #1
 800ea84:	4642      	mov	r2, r8
 800ea86:	4631      	mov	r1, r6
 800ea88:	4628      	mov	r0, r5
 800ea8a:	47b8      	blx	r7
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	f43f ae7d 	beq.w	800e78c <_printf_float+0x9c>
 800ea92:	9b05      	ldr	r3, [sp, #20]
 800ea94:	465a      	mov	r2, fp
 800ea96:	4631      	mov	r1, r6
 800ea98:	4628      	mov	r0, r5
 800ea9a:	47b8      	blx	r7
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	f108 0801 	add.w	r8, r8, #1
 800eaa2:	f43f ae73 	beq.w	800e78c <_printf_float+0x9c>
 800eaa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab4:	f103 33ff 	add.w	r3, r3, #4294967295
 800eab8:	d018      	beq.n	800eaec <_printf_float+0x3fc>
 800eaba:	4642      	mov	r2, r8
 800eabc:	4631      	mov	r1, r6
 800eabe:	4628      	mov	r0, r5
 800eac0:	47b8      	blx	r7
 800eac2:	3001      	adds	r0, #1
 800eac4:	d10e      	bne.n	800eae4 <_printf_float+0x3f4>
 800eac6:	e661      	b.n	800e78c <_printf_float+0x9c>
 800eac8:	2301      	movs	r3, #1
 800eaca:	464a      	mov	r2, r9
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	47b8      	blx	r7
 800ead2:	3001      	adds	r0, #1
 800ead4:	f43f ae5a 	beq.w	800e78c <_printf_float+0x9c>
 800ead8:	f108 0801 	add.w	r8, r8, #1
 800eadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eade:	3b01      	subs	r3, #1
 800eae0:	4543      	cmp	r3, r8
 800eae2:	dcf1      	bgt.n	800eac8 <_printf_float+0x3d8>
 800eae4:	4653      	mov	r3, sl
 800eae6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eaea:	e6dd      	b.n	800e8a8 <_printf_float+0x1b8>
 800eaec:	f04f 0800 	mov.w	r8, #0
 800eaf0:	f104 091a 	add.w	r9, r4, #26
 800eaf4:	e7f2      	b.n	800eadc <_printf_float+0x3ec>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e7df      	b.n	800eaba <_printf_float+0x3ca>
 800eafa:	2301      	movs	r3, #1
 800eafc:	464a      	mov	r2, r9
 800eafe:	4631      	mov	r1, r6
 800eb00:	4628      	mov	r0, r5
 800eb02:	47b8      	blx	r7
 800eb04:	3001      	adds	r0, #1
 800eb06:	f43f ae41 	beq.w	800e78c <_printf_float+0x9c>
 800eb0a:	f108 0801 	add.w	r8, r8, #1
 800eb0e:	68e3      	ldr	r3, [r4, #12]
 800eb10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb12:	1a9b      	subs	r3, r3, r2
 800eb14:	4543      	cmp	r3, r8
 800eb16:	dcf0      	bgt.n	800eafa <_printf_float+0x40a>
 800eb18:	e6fa      	b.n	800e910 <_printf_float+0x220>
 800eb1a:	f04f 0800 	mov.w	r8, #0
 800eb1e:	f104 0919 	add.w	r9, r4, #25
 800eb22:	e7f4      	b.n	800eb0e <_printf_float+0x41e>
 800eb24:	2900      	cmp	r1, #0
 800eb26:	f43f ae8a 	beq.w	800e83e <_printf_float+0x14e>
 800eb2a:	f04f 0c00 	mov.w	ip, #0
 800eb2e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800eb32:	e9cd 0900 	strd	r0, r9, [sp]
 800eb36:	6022      	str	r2, [r4, #0]
 800eb38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f7ff fd4f 	bl	800e5e0 <__cvt>
 800eb42:	4680      	mov	r8, r0
 800eb44:	e64a      	b.n	800e7dc <_printf_float+0xec>
 800eb46:	bf00      	nop

0800eb48 <_printf_common>:
 800eb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb4c:	4691      	mov	r9, r2
 800eb4e:	461f      	mov	r7, r3
 800eb50:	688a      	ldr	r2, [r1, #8]
 800eb52:	690b      	ldr	r3, [r1, #16]
 800eb54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	bfb8      	it	lt
 800eb5c:	4613      	movlt	r3, r2
 800eb5e:	f8c9 3000 	str.w	r3, [r9]
 800eb62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb66:	4606      	mov	r6, r0
 800eb68:	460c      	mov	r4, r1
 800eb6a:	b112      	cbz	r2, 800eb72 <_printf_common+0x2a>
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	f8c9 3000 	str.w	r3, [r9]
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	0699      	lsls	r1, r3, #26
 800eb76:	bf42      	ittt	mi
 800eb78:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb7c:	3302      	addmi	r3, #2
 800eb7e:	f8c9 3000 	strmi.w	r3, [r9]
 800eb82:	6825      	ldr	r5, [r4, #0]
 800eb84:	f015 0506 	ands.w	r5, r5, #6
 800eb88:	d107      	bne.n	800eb9a <_printf_common+0x52>
 800eb8a:	f104 0a19 	add.w	sl, r4, #25
 800eb8e:	68e3      	ldr	r3, [r4, #12]
 800eb90:	f8d9 2000 	ldr.w	r2, [r9]
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	42ab      	cmp	r3, r5
 800eb98:	dc28      	bgt.n	800ebec <_printf_common+0xa4>
 800eb9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb9e:	6822      	ldr	r2, [r4, #0]
 800eba0:	3300      	adds	r3, #0
 800eba2:	bf18      	it	ne
 800eba4:	2301      	movne	r3, #1
 800eba6:	0692      	lsls	r2, r2, #26
 800eba8:	d42d      	bmi.n	800ec06 <_printf_common+0xbe>
 800ebaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebae:	4639      	mov	r1, r7
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	47c0      	blx	r8
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	d020      	beq.n	800ebfa <_printf_common+0xb2>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	68e5      	ldr	r5, [r4, #12]
 800ebbc:	f8d9 2000 	ldr.w	r2, [r9]
 800ebc0:	f003 0306 	and.w	r3, r3, #6
 800ebc4:	2b04      	cmp	r3, #4
 800ebc6:	bf08      	it	eq
 800ebc8:	1aad      	subeq	r5, r5, r2
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	6922      	ldr	r2, [r4, #16]
 800ebce:	bf0c      	ite	eq
 800ebd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebd4:	2500      	movne	r5, #0
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	bfc4      	itt	gt
 800ebda:	1a9b      	subgt	r3, r3, r2
 800ebdc:	18ed      	addgt	r5, r5, r3
 800ebde:	f04f 0900 	mov.w	r9, #0
 800ebe2:	341a      	adds	r4, #26
 800ebe4:	454d      	cmp	r5, r9
 800ebe6:	d11a      	bne.n	800ec1e <_printf_common+0xd6>
 800ebe8:	2000      	movs	r0, #0
 800ebea:	e008      	b.n	800ebfe <_printf_common+0xb6>
 800ebec:	2301      	movs	r3, #1
 800ebee:	4652      	mov	r2, sl
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	47c0      	blx	r8
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	d103      	bne.n	800ec02 <_printf_common+0xba>
 800ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec02:	3501      	adds	r5, #1
 800ec04:	e7c3      	b.n	800eb8e <_printf_common+0x46>
 800ec06:	18e1      	adds	r1, r4, r3
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	2030      	movs	r0, #48	; 0x30
 800ec0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec10:	4422      	add	r2, r4
 800ec12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	e7c5      	b.n	800ebaa <_printf_common+0x62>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	4622      	mov	r2, r4
 800ec22:	4639      	mov	r1, r7
 800ec24:	4630      	mov	r0, r6
 800ec26:	47c0      	blx	r8
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d0e6      	beq.n	800ebfa <_printf_common+0xb2>
 800ec2c:	f109 0901 	add.w	r9, r9, #1
 800ec30:	e7d8      	b.n	800ebe4 <_printf_common+0x9c>
	...

0800ec34 <_printf_i>:
 800ec34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	7e09      	ldrb	r1, [r1, #24]
 800ec40:	b085      	sub	sp, #20
 800ec42:	296e      	cmp	r1, #110	; 0x6e
 800ec44:	4617      	mov	r7, r2
 800ec46:	4606      	mov	r6, r0
 800ec48:	4698      	mov	r8, r3
 800ec4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec4c:	f000 80b3 	beq.w	800edb6 <_printf_i+0x182>
 800ec50:	d822      	bhi.n	800ec98 <_printf_i+0x64>
 800ec52:	2963      	cmp	r1, #99	; 0x63
 800ec54:	d036      	beq.n	800ecc4 <_printf_i+0x90>
 800ec56:	d80a      	bhi.n	800ec6e <_printf_i+0x3a>
 800ec58:	2900      	cmp	r1, #0
 800ec5a:	f000 80b9 	beq.w	800edd0 <_printf_i+0x19c>
 800ec5e:	2958      	cmp	r1, #88	; 0x58
 800ec60:	f000 8083 	beq.w	800ed6a <_printf_i+0x136>
 800ec64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec6c:	e032      	b.n	800ecd4 <_printf_i+0xa0>
 800ec6e:	2964      	cmp	r1, #100	; 0x64
 800ec70:	d001      	beq.n	800ec76 <_printf_i+0x42>
 800ec72:	2969      	cmp	r1, #105	; 0x69
 800ec74:	d1f6      	bne.n	800ec64 <_printf_i+0x30>
 800ec76:	6820      	ldr	r0, [r4, #0]
 800ec78:	6813      	ldr	r3, [r2, #0]
 800ec7a:	0605      	lsls	r5, r0, #24
 800ec7c:	f103 0104 	add.w	r1, r3, #4
 800ec80:	d52a      	bpl.n	800ecd8 <_printf_i+0xa4>
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6011      	str	r1, [r2, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da03      	bge.n	800ec92 <_printf_i+0x5e>
 800ec8a:	222d      	movs	r2, #45	; 0x2d
 800ec8c:	425b      	negs	r3, r3
 800ec8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec92:	486f      	ldr	r0, [pc, #444]	; (800ee50 <_printf_i+0x21c>)
 800ec94:	220a      	movs	r2, #10
 800ec96:	e039      	b.n	800ed0c <_printf_i+0xd8>
 800ec98:	2973      	cmp	r1, #115	; 0x73
 800ec9a:	f000 809d 	beq.w	800edd8 <_printf_i+0x1a4>
 800ec9e:	d808      	bhi.n	800ecb2 <_printf_i+0x7e>
 800eca0:	296f      	cmp	r1, #111	; 0x6f
 800eca2:	d020      	beq.n	800ece6 <_printf_i+0xb2>
 800eca4:	2970      	cmp	r1, #112	; 0x70
 800eca6:	d1dd      	bne.n	800ec64 <_printf_i+0x30>
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	f043 0320 	orr.w	r3, r3, #32
 800ecae:	6023      	str	r3, [r4, #0]
 800ecb0:	e003      	b.n	800ecba <_printf_i+0x86>
 800ecb2:	2975      	cmp	r1, #117	; 0x75
 800ecb4:	d017      	beq.n	800ece6 <_printf_i+0xb2>
 800ecb6:	2978      	cmp	r1, #120	; 0x78
 800ecb8:	d1d4      	bne.n	800ec64 <_printf_i+0x30>
 800ecba:	2378      	movs	r3, #120	; 0x78
 800ecbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecc0:	4864      	ldr	r0, [pc, #400]	; (800ee54 <_printf_i+0x220>)
 800ecc2:	e055      	b.n	800ed70 <_printf_i+0x13c>
 800ecc4:	6813      	ldr	r3, [r2, #0]
 800ecc6:	1d19      	adds	r1, r3, #4
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6011      	str	r1, [r2, #0]
 800eccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e08c      	b.n	800edf2 <_printf_i+0x1be>
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6011      	str	r1, [r2, #0]
 800ecdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ece0:	bf18      	it	ne
 800ece2:	b21b      	sxthne	r3, r3
 800ece4:	e7cf      	b.n	800ec86 <_printf_i+0x52>
 800ece6:	6813      	ldr	r3, [r2, #0]
 800ece8:	6825      	ldr	r5, [r4, #0]
 800ecea:	1d18      	adds	r0, r3, #4
 800ecec:	6010      	str	r0, [r2, #0]
 800ecee:	0628      	lsls	r0, r5, #24
 800ecf0:	d501      	bpl.n	800ecf6 <_printf_i+0xc2>
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	e002      	b.n	800ecfc <_printf_i+0xc8>
 800ecf6:	0668      	lsls	r0, r5, #25
 800ecf8:	d5fb      	bpl.n	800ecf2 <_printf_i+0xbe>
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	4854      	ldr	r0, [pc, #336]	; (800ee50 <_printf_i+0x21c>)
 800ecfe:	296f      	cmp	r1, #111	; 0x6f
 800ed00:	bf14      	ite	ne
 800ed02:	220a      	movne	r2, #10
 800ed04:	2208      	moveq	r2, #8
 800ed06:	2100      	movs	r1, #0
 800ed08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed0c:	6865      	ldr	r5, [r4, #4]
 800ed0e:	60a5      	str	r5, [r4, #8]
 800ed10:	2d00      	cmp	r5, #0
 800ed12:	f2c0 8095 	blt.w	800ee40 <_printf_i+0x20c>
 800ed16:	6821      	ldr	r1, [r4, #0]
 800ed18:	f021 0104 	bic.w	r1, r1, #4
 800ed1c:	6021      	str	r1, [r4, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d13d      	bne.n	800ed9e <_printf_i+0x16a>
 800ed22:	2d00      	cmp	r5, #0
 800ed24:	f040 808e 	bne.w	800ee44 <_printf_i+0x210>
 800ed28:	4665      	mov	r5, ip
 800ed2a:	2a08      	cmp	r2, #8
 800ed2c:	d10b      	bne.n	800ed46 <_printf_i+0x112>
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	07db      	lsls	r3, r3, #31
 800ed32:	d508      	bpl.n	800ed46 <_printf_i+0x112>
 800ed34:	6923      	ldr	r3, [r4, #16]
 800ed36:	6862      	ldr	r2, [r4, #4]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	bfde      	ittt	le
 800ed3c:	2330      	movle	r3, #48	; 0x30
 800ed3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed46:	ebac 0305 	sub.w	r3, ip, r5
 800ed4a:	6123      	str	r3, [r4, #16]
 800ed4c:	f8cd 8000 	str.w	r8, [sp]
 800ed50:	463b      	mov	r3, r7
 800ed52:	aa03      	add	r2, sp, #12
 800ed54:	4621      	mov	r1, r4
 800ed56:	4630      	mov	r0, r6
 800ed58:	f7ff fef6 	bl	800eb48 <_printf_common>
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d14d      	bne.n	800edfc <_printf_i+0x1c8>
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	b005      	add	sp, #20
 800ed66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed6a:	4839      	ldr	r0, [pc, #228]	; (800ee50 <_printf_i+0x21c>)
 800ed6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed70:	6813      	ldr	r3, [r2, #0]
 800ed72:	6821      	ldr	r1, [r4, #0]
 800ed74:	1d1d      	adds	r5, r3, #4
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6015      	str	r5, [r2, #0]
 800ed7a:	060a      	lsls	r2, r1, #24
 800ed7c:	d50b      	bpl.n	800ed96 <_printf_i+0x162>
 800ed7e:	07ca      	lsls	r2, r1, #31
 800ed80:	bf44      	itt	mi
 800ed82:	f041 0120 	orrmi.w	r1, r1, #32
 800ed86:	6021      	strmi	r1, [r4, #0]
 800ed88:	b91b      	cbnz	r3, 800ed92 <_printf_i+0x15e>
 800ed8a:	6822      	ldr	r2, [r4, #0]
 800ed8c:	f022 0220 	bic.w	r2, r2, #32
 800ed90:	6022      	str	r2, [r4, #0]
 800ed92:	2210      	movs	r2, #16
 800ed94:	e7b7      	b.n	800ed06 <_printf_i+0xd2>
 800ed96:	064d      	lsls	r5, r1, #25
 800ed98:	bf48      	it	mi
 800ed9a:	b29b      	uxthmi	r3, r3
 800ed9c:	e7ef      	b.n	800ed7e <_printf_i+0x14a>
 800ed9e:	4665      	mov	r5, ip
 800eda0:	fbb3 f1f2 	udiv	r1, r3, r2
 800eda4:	fb02 3311 	mls	r3, r2, r1, r3
 800eda8:	5cc3      	ldrb	r3, [r0, r3]
 800edaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800edae:	460b      	mov	r3, r1
 800edb0:	2900      	cmp	r1, #0
 800edb2:	d1f5      	bne.n	800eda0 <_printf_i+0x16c>
 800edb4:	e7b9      	b.n	800ed2a <_printf_i+0xf6>
 800edb6:	6813      	ldr	r3, [r2, #0]
 800edb8:	6825      	ldr	r5, [r4, #0]
 800edba:	6961      	ldr	r1, [r4, #20]
 800edbc:	1d18      	adds	r0, r3, #4
 800edbe:	6010      	str	r0, [r2, #0]
 800edc0:	0628      	lsls	r0, r5, #24
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	d501      	bpl.n	800edca <_printf_i+0x196>
 800edc6:	6019      	str	r1, [r3, #0]
 800edc8:	e002      	b.n	800edd0 <_printf_i+0x19c>
 800edca:	066a      	lsls	r2, r5, #25
 800edcc:	d5fb      	bpl.n	800edc6 <_printf_i+0x192>
 800edce:	8019      	strh	r1, [r3, #0]
 800edd0:	2300      	movs	r3, #0
 800edd2:	6123      	str	r3, [r4, #16]
 800edd4:	4665      	mov	r5, ip
 800edd6:	e7b9      	b.n	800ed4c <_printf_i+0x118>
 800edd8:	6813      	ldr	r3, [r2, #0]
 800edda:	1d19      	adds	r1, r3, #4
 800eddc:	6011      	str	r1, [r2, #0]
 800edde:	681d      	ldr	r5, [r3, #0]
 800ede0:	6862      	ldr	r2, [r4, #4]
 800ede2:	2100      	movs	r1, #0
 800ede4:	4628      	mov	r0, r5
 800ede6:	f7f1 fa33 	bl	8000250 <memchr>
 800edea:	b108      	cbz	r0, 800edf0 <_printf_i+0x1bc>
 800edec:	1b40      	subs	r0, r0, r5
 800edee:	6060      	str	r0, [r4, #4]
 800edf0:	6863      	ldr	r3, [r4, #4]
 800edf2:	6123      	str	r3, [r4, #16]
 800edf4:	2300      	movs	r3, #0
 800edf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edfa:	e7a7      	b.n	800ed4c <_printf_i+0x118>
 800edfc:	6923      	ldr	r3, [r4, #16]
 800edfe:	462a      	mov	r2, r5
 800ee00:	4639      	mov	r1, r7
 800ee02:	4630      	mov	r0, r6
 800ee04:	47c0      	blx	r8
 800ee06:	3001      	adds	r0, #1
 800ee08:	d0aa      	beq.n	800ed60 <_printf_i+0x12c>
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	079b      	lsls	r3, r3, #30
 800ee0e:	d413      	bmi.n	800ee38 <_printf_i+0x204>
 800ee10:	68e0      	ldr	r0, [r4, #12]
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	4298      	cmp	r0, r3
 800ee16:	bfb8      	it	lt
 800ee18:	4618      	movlt	r0, r3
 800ee1a:	e7a3      	b.n	800ed64 <_printf_i+0x130>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	464a      	mov	r2, r9
 800ee20:	4639      	mov	r1, r7
 800ee22:	4630      	mov	r0, r6
 800ee24:	47c0      	blx	r8
 800ee26:	3001      	adds	r0, #1
 800ee28:	d09a      	beq.n	800ed60 <_printf_i+0x12c>
 800ee2a:	3501      	adds	r5, #1
 800ee2c:	68e3      	ldr	r3, [r4, #12]
 800ee2e:	9a03      	ldr	r2, [sp, #12]
 800ee30:	1a9b      	subs	r3, r3, r2
 800ee32:	42ab      	cmp	r3, r5
 800ee34:	dcf2      	bgt.n	800ee1c <_printf_i+0x1e8>
 800ee36:	e7eb      	b.n	800ee10 <_printf_i+0x1dc>
 800ee38:	2500      	movs	r5, #0
 800ee3a:	f104 0919 	add.w	r9, r4, #25
 800ee3e:	e7f5      	b.n	800ee2c <_printf_i+0x1f8>
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1ac      	bne.n	800ed9e <_printf_i+0x16a>
 800ee44:	7803      	ldrb	r3, [r0, #0]
 800ee46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee4e:	e76c      	b.n	800ed2a <_printf_i+0xf6>
 800ee50:	08012776 	.word	0x08012776
 800ee54:	08012787 	.word	0x08012787

0800ee58 <_scanf_float>:
 800ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5c:	469a      	mov	sl, r3
 800ee5e:	688b      	ldr	r3, [r1, #8]
 800ee60:	4616      	mov	r6, r2
 800ee62:	1e5a      	subs	r2, r3, #1
 800ee64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ee68:	b087      	sub	sp, #28
 800ee6a:	bf83      	ittte	hi
 800ee6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ee70:	189b      	addhi	r3, r3, r2
 800ee72:	9301      	strhi	r3, [sp, #4]
 800ee74:	2300      	movls	r3, #0
 800ee76:	bf86      	itte	hi
 800ee78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ee7c:	608b      	strhi	r3, [r1, #8]
 800ee7e:	9301      	strls	r3, [sp, #4]
 800ee80:	680b      	ldr	r3, [r1, #0]
 800ee82:	4688      	mov	r8, r1
 800ee84:	f04f 0b00 	mov.w	fp, #0
 800ee88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ee8c:	f848 3b1c 	str.w	r3, [r8], #28
 800ee90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ee94:	4607      	mov	r7, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4645      	mov	r5, r8
 800ee9a:	465a      	mov	r2, fp
 800ee9c:	46d9      	mov	r9, fp
 800ee9e:	f8cd b008 	str.w	fp, [sp, #8]
 800eea2:	68a1      	ldr	r1, [r4, #8]
 800eea4:	b181      	cbz	r1, 800eec8 <_scanf_float+0x70>
 800eea6:	6833      	ldr	r3, [r6, #0]
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	2b49      	cmp	r3, #73	; 0x49
 800eeac:	d071      	beq.n	800ef92 <_scanf_float+0x13a>
 800eeae:	d84d      	bhi.n	800ef4c <_scanf_float+0xf4>
 800eeb0:	2b39      	cmp	r3, #57	; 0x39
 800eeb2:	d840      	bhi.n	800ef36 <_scanf_float+0xde>
 800eeb4:	2b31      	cmp	r3, #49	; 0x31
 800eeb6:	f080 8088 	bcs.w	800efca <_scanf_float+0x172>
 800eeba:	2b2d      	cmp	r3, #45	; 0x2d
 800eebc:	f000 8090 	beq.w	800efe0 <_scanf_float+0x188>
 800eec0:	d815      	bhi.n	800eeee <_scanf_float+0x96>
 800eec2:	2b2b      	cmp	r3, #43	; 0x2b
 800eec4:	f000 808c 	beq.w	800efe0 <_scanf_float+0x188>
 800eec8:	f1b9 0f00 	cmp.w	r9, #0
 800eecc:	d003      	beq.n	800eed6 <_scanf_float+0x7e>
 800eece:	6823      	ldr	r3, [r4, #0]
 800eed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	3a01      	subs	r2, #1
 800eed8:	2a01      	cmp	r2, #1
 800eeda:	f200 80ea 	bhi.w	800f0b2 <_scanf_float+0x25a>
 800eede:	4545      	cmp	r5, r8
 800eee0:	f200 80dc 	bhi.w	800f09c <_scanf_float+0x244>
 800eee4:	2601      	movs	r6, #1
 800eee6:	4630      	mov	r0, r6
 800eee8:	b007      	add	sp, #28
 800eeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeee:	2b2e      	cmp	r3, #46	; 0x2e
 800eef0:	f000 809f 	beq.w	800f032 <_scanf_float+0x1da>
 800eef4:	2b30      	cmp	r3, #48	; 0x30
 800eef6:	d1e7      	bne.n	800eec8 <_scanf_float+0x70>
 800eef8:	6820      	ldr	r0, [r4, #0]
 800eefa:	f410 7f80 	tst.w	r0, #256	; 0x100
 800eefe:	d064      	beq.n	800efca <_scanf_float+0x172>
 800ef00:	9b01      	ldr	r3, [sp, #4]
 800ef02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ef06:	6020      	str	r0, [r4, #0]
 800ef08:	f109 0901 	add.w	r9, r9, #1
 800ef0c:	b11b      	cbz	r3, 800ef16 <_scanf_float+0xbe>
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	3101      	adds	r1, #1
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	60a1      	str	r1, [r4, #8]
 800ef16:	68a3      	ldr	r3, [r4, #8]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	60a3      	str	r3, [r4, #8]
 800ef1c:	6923      	ldr	r3, [r4, #16]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	6123      	str	r3, [r4, #16]
 800ef22:	6873      	ldr	r3, [r6, #4]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	6073      	str	r3, [r6, #4]
 800ef2a:	f340 80ac 	ble.w	800f086 <_scanf_float+0x22e>
 800ef2e:	6833      	ldr	r3, [r6, #0]
 800ef30:	3301      	adds	r3, #1
 800ef32:	6033      	str	r3, [r6, #0]
 800ef34:	e7b5      	b.n	800eea2 <_scanf_float+0x4a>
 800ef36:	2b45      	cmp	r3, #69	; 0x45
 800ef38:	f000 8085 	beq.w	800f046 <_scanf_float+0x1ee>
 800ef3c:	2b46      	cmp	r3, #70	; 0x46
 800ef3e:	d06a      	beq.n	800f016 <_scanf_float+0x1be>
 800ef40:	2b41      	cmp	r3, #65	; 0x41
 800ef42:	d1c1      	bne.n	800eec8 <_scanf_float+0x70>
 800ef44:	2a01      	cmp	r2, #1
 800ef46:	d1bf      	bne.n	800eec8 <_scanf_float+0x70>
 800ef48:	2202      	movs	r2, #2
 800ef4a:	e046      	b.n	800efda <_scanf_float+0x182>
 800ef4c:	2b65      	cmp	r3, #101	; 0x65
 800ef4e:	d07a      	beq.n	800f046 <_scanf_float+0x1ee>
 800ef50:	d818      	bhi.n	800ef84 <_scanf_float+0x12c>
 800ef52:	2b54      	cmp	r3, #84	; 0x54
 800ef54:	d066      	beq.n	800f024 <_scanf_float+0x1cc>
 800ef56:	d811      	bhi.n	800ef7c <_scanf_float+0x124>
 800ef58:	2b4e      	cmp	r3, #78	; 0x4e
 800ef5a:	d1b5      	bne.n	800eec8 <_scanf_float+0x70>
 800ef5c:	2a00      	cmp	r2, #0
 800ef5e:	d146      	bne.n	800efee <_scanf_float+0x196>
 800ef60:	f1b9 0f00 	cmp.w	r9, #0
 800ef64:	d145      	bne.n	800eff2 <_scanf_float+0x19a>
 800ef66:	6821      	ldr	r1, [r4, #0]
 800ef68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ef6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ef70:	d13f      	bne.n	800eff2 <_scanf_float+0x19a>
 800ef72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ef76:	6021      	str	r1, [r4, #0]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	e02e      	b.n	800efda <_scanf_float+0x182>
 800ef7c:	2b59      	cmp	r3, #89	; 0x59
 800ef7e:	d01e      	beq.n	800efbe <_scanf_float+0x166>
 800ef80:	2b61      	cmp	r3, #97	; 0x61
 800ef82:	e7de      	b.n	800ef42 <_scanf_float+0xea>
 800ef84:	2b6e      	cmp	r3, #110	; 0x6e
 800ef86:	d0e9      	beq.n	800ef5c <_scanf_float+0x104>
 800ef88:	d815      	bhi.n	800efb6 <_scanf_float+0x15e>
 800ef8a:	2b66      	cmp	r3, #102	; 0x66
 800ef8c:	d043      	beq.n	800f016 <_scanf_float+0x1be>
 800ef8e:	2b69      	cmp	r3, #105	; 0x69
 800ef90:	d19a      	bne.n	800eec8 <_scanf_float+0x70>
 800ef92:	f1bb 0f00 	cmp.w	fp, #0
 800ef96:	d138      	bne.n	800f00a <_scanf_float+0x1b2>
 800ef98:	f1b9 0f00 	cmp.w	r9, #0
 800ef9c:	d197      	bne.n	800eece <_scanf_float+0x76>
 800ef9e:	6821      	ldr	r1, [r4, #0]
 800efa0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800efa4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800efa8:	d195      	bne.n	800eed6 <_scanf_float+0x7e>
 800efaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800efae:	6021      	str	r1, [r4, #0]
 800efb0:	f04f 0b01 	mov.w	fp, #1
 800efb4:	e011      	b.n	800efda <_scanf_float+0x182>
 800efb6:	2b74      	cmp	r3, #116	; 0x74
 800efb8:	d034      	beq.n	800f024 <_scanf_float+0x1cc>
 800efba:	2b79      	cmp	r3, #121	; 0x79
 800efbc:	d184      	bne.n	800eec8 <_scanf_float+0x70>
 800efbe:	f1bb 0f07 	cmp.w	fp, #7
 800efc2:	d181      	bne.n	800eec8 <_scanf_float+0x70>
 800efc4:	f04f 0b08 	mov.w	fp, #8
 800efc8:	e007      	b.n	800efda <_scanf_float+0x182>
 800efca:	eb12 0f0b 	cmn.w	r2, fp
 800efce:	f47f af7b 	bne.w	800eec8 <_scanf_float+0x70>
 800efd2:	6821      	ldr	r1, [r4, #0]
 800efd4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800efd8:	6021      	str	r1, [r4, #0]
 800efda:	702b      	strb	r3, [r5, #0]
 800efdc:	3501      	adds	r5, #1
 800efde:	e79a      	b.n	800ef16 <_scanf_float+0xbe>
 800efe0:	6821      	ldr	r1, [r4, #0]
 800efe2:	0608      	lsls	r0, r1, #24
 800efe4:	f57f af70 	bpl.w	800eec8 <_scanf_float+0x70>
 800efe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800efec:	e7f4      	b.n	800efd8 <_scanf_float+0x180>
 800efee:	2a02      	cmp	r2, #2
 800eff0:	d047      	beq.n	800f082 <_scanf_float+0x22a>
 800eff2:	f1bb 0f01 	cmp.w	fp, #1
 800eff6:	d003      	beq.n	800f000 <_scanf_float+0x1a8>
 800eff8:	f1bb 0f04 	cmp.w	fp, #4
 800effc:	f47f af64 	bne.w	800eec8 <_scanf_float+0x70>
 800f000:	f10b 0b01 	add.w	fp, fp, #1
 800f004:	fa5f fb8b 	uxtb.w	fp, fp
 800f008:	e7e7      	b.n	800efda <_scanf_float+0x182>
 800f00a:	f1bb 0f03 	cmp.w	fp, #3
 800f00e:	d0f7      	beq.n	800f000 <_scanf_float+0x1a8>
 800f010:	f1bb 0f05 	cmp.w	fp, #5
 800f014:	e7f2      	b.n	800effc <_scanf_float+0x1a4>
 800f016:	f1bb 0f02 	cmp.w	fp, #2
 800f01a:	f47f af55 	bne.w	800eec8 <_scanf_float+0x70>
 800f01e:	f04f 0b03 	mov.w	fp, #3
 800f022:	e7da      	b.n	800efda <_scanf_float+0x182>
 800f024:	f1bb 0f06 	cmp.w	fp, #6
 800f028:	f47f af4e 	bne.w	800eec8 <_scanf_float+0x70>
 800f02c:	f04f 0b07 	mov.w	fp, #7
 800f030:	e7d3      	b.n	800efda <_scanf_float+0x182>
 800f032:	6821      	ldr	r1, [r4, #0]
 800f034:	0588      	lsls	r0, r1, #22
 800f036:	f57f af47 	bpl.w	800eec8 <_scanf_float+0x70>
 800f03a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f03e:	6021      	str	r1, [r4, #0]
 800f040:	f8cd 9008 	str.w	r9, [sp, #8]
 800f044:	e7c9      	b.n	800efda <_scanf_float+0x182>
 800f046:	6821      	ldr	r1, [r4, #0]
 800f048:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f04c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f050:	d006      	beq.n	800f060 <_scanf_float+0x208>
 800f052:	0548      	lsls	r0, r1, #21
 800f054:	f57f af38 	bpl.w	800eec8 <_scanf_float+0x70>
 800f058:	f1b9 0f00 	cmp.w	r9, #0
 800f05c:	f43f af3b 	beq.w	800eed6 <_scanf_float+0x7e>
 800f060:	0588      	lsls	r0, r1, #22
 800f062:	bf58      	it	pl
 800f064:	9802      	ldrpl	r0, [sp, #8]
 800f066:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f06a:	bf58      	it	pl
 800f06c:	eba9 0000 	subpl.w	r0, r9, r0
 800f070:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f074:	bf58      	it	pl
 800f076:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f07a:	6021      	str	r1, [r4, #0]
 800f07c:	f04f 0900 	mov.w	r9, #0
 800f080:	e7ab      	b.n	800efda <_scanf_float+0x182>
 800f082:	2203      	movs	r2, #3
 800f084:	e7a9      	b.n	800efda <_scanf_float+0x182>
 800f086:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f08a:	9205      	str	r2, [sp, #20]
 800f08c:	4631      	mov	r1, r6
 800f08e:	4638      	mov	r0, r7
 800f090:	4798      	blx	r3
 800f092:	9a05      	ldr	r2, [sp, #20]
 800f094:	2800      	cmp	r0, #0
 800f096:	f43f af04 	beq.w	800eea2 <_scanf_float+0x4a>
 800f09a:	e715      	b.n	800eec8 <_scanf_float+0x70>
 800f09c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	4798      	blx	r3
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	6123      	str	r3, [r4, #16]
 800f0b0:	e715      	b.n	800eede <_scanf_float+0x86>
 800f0b2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f0b6:	2b06      	cmp	r3, #6
 800f0b8:	d80a      	bhi.n	800f0d0 <_scanf_float+0x278>
 800f0ba:	f1bb 0f02 	cmp.w	fp, #2
 800f0be:	d966      	bls.n	800f18e <_scanf_float+0x336>
 800f0c0:	f1ab 0b03 	sub.w	fp, fp, #3
 800f0c4:	fa5f fb8b 	uxtb.w	fp, fp
 800f0c8:	eba5 0b0b 	sub.w	fp, r5, fp
 800f0cc:	455d      	cmp	r5, fp
 800f0ce:	d149      	bne.n	800f164 <_scanf_float+0x30c>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	05da      	lsls	r2, r3, #23
 800f0d4:	d51f      	bpl.n	800f116 <_scanf_float+0x2be>
 800f0d6:	055b      	lsls	r3, r3, #21
 800f0d8:	d466      	bmi.n	800f1a8 <_scanf_float+0x350>
 800f0da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	2965      	cmp	r1, #101	; 0x65
 800f0e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0e6:	f105 3bff 	add.w	fp, r5, #4294967295
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	d00d      	beq.n	800f10a <_scanf_float+0x2b2>
 800f0ee:	2945      	cmp	r1, #69	; 0x45
 800f0f0:	d00b      	beq.n	800f10a <_scanf_float+0x2b2>
 800f0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0f6:	4632      	mov	r2, r6
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	4798      	blx	r3
 800f0fc:	6923      	ldr	r3, [r4, #16]
 800f0fe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f102:	3b01      	subs	r3, #1
 800f104:	f1a5 0b02 	sub.w	fp, r5, #2
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f10e:	4632      	mov	r2, r6
 800f110:	4638      	mov	r0, r7
 800f112:	4798      	blx	r3
 800f114:	465d      	mov	r5, fp
 800f116:	6826      	ldr	r6, [r4, #0]
 800f118:	f016 0610 	ands.w	r6, r6, #16
 800f11c:	d170      	bne.n	800f200 <_scanf_float+0x3a8>
 800f11e:	702e      	strb	r6, [r5, #0]
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f12a:	d140      	bne.n	800f1ae <_scanf_float+0x356>
 800f12c:	9b02      	ldr	r3, [sp, #8]
 800f12e:	eba9 0303 	sub.w	r3, r9, r3
 800f132:	425a      	negs	r2, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d147      	bne.n	800f1c8 <_scanf_float+0x370>
 800f138:	2200      	movs	r2, #0
 800f13a:	4638      	mov	r0, r7
 800f13c:	4641      	mov	r1, r8
 800f13e:	f000 ff23 	bl	800ff88 <_strtod_r>
 800f142:	6820      	ldr	r0, [r4, #0]
 800f144:	f8da 3000 	ldr.w	r3, [sl]
 800f148:	f010 0f02 	tst.w	r0, #2
 800f14c:	f103 0204 	add.w	r2, r3, #4
 800f150:	f8ca 2000 	str.w	r2, [sl]
 800f154:	d043      	beq.n	800f1de <_scanf_float+0x386>
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	ed83 0b00 	vstr	d0, [r3]
 800f15c:	68e3      	ldr	r3, [r4, #12]
 800f15e:	3301      	adds	r3, #1
 800f160:	60e3      	str	r3, [r4, #12]
 800f162:	e6c0      	b.n	800eee6 <_scanf_float+0x8e>
 800f164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f16c:	4632      	mov	r2, r6
 800f16e:	4638      	mov	r0, r7
 800f170:	4798      	blx	r3
 800f172:	6923      	ldr	r3, [r4, #16]
 800f174:	3b01      	subs	r3, #1
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	e7a8      	b.n	800f0cc <_scanf_float+0x274>
 800f17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f17e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f182:	4632      	mov	r2, r6
 800f184:	4638      	mov	r0, r7
 800f186:	4798      	blx	r3
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	6123      	str	r3, [r4, #16]
 800f18e:	4545      	cmp	r5, r8
 800f190:	d8f3      	bhi.n	800f17a <_scanf_float+0x322>
 800f192:	e6a7      	b.n	800eee4 <_scanf_float+0x8c>
 800f194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f19c:	4632      	mov	r2, r6
 800f19e:	4638      	mov	r0, r7
 800f1a0:	4798      	blx	r3
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	6123      	str	r3, [r4, #16]
 800f1a8:	4545      	cmp	r5, r8
 800f1aa:	d8f3      	bhi.n	800f194 <_scanf_float+0x33c>
 800f1ac:	e69a      	b.n	800eee4 <_scanf_float+0x8c>
 800f1ae:	9b03      	ldr	r3, [sp, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d0c1      	beq.n	800f138 <_scanf_float+0x2e0>
 800f1b4:	9904      	ldr	r1, [sp, #16]
 800f1b6:	230a      	movs	r3, #10
 800f1b8:	4632      	mov	r2, r6
 800f1ba:	3101      	adds	r1, #1
 800f1bc:	4638      	mov	r0, r7
 800f1be:	f000 ff6f 	bl	80100a0 <_strtol_r>
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	9d04      	ldr	r5, [sp, #16]
 800f1c6:	1ac2      	subs	r2, r0, r3
 800f1c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f1cc:	429d      	cmp	r5, r3
 800f1ce:	bf28      	it	cs
 800f1d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f1d4:	490b      	ldr	r1, [pc, #44]	; (800f204 <_scanf_float+0x3ac>)
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f000 f8d4 	bl	800f384 <siprintf>
 800f1dc:	e7ac      	b.n	800f138 <_scanf_float+0x2e0>
 800f1de:	f010 0004 	ands.w	r0, r0, #4
 800f1e2:	d1b8      	bne.n	800f156 <_scanf_float+0x2fe>
 800f1e4:	eeb4 0b40 	vcmp.f64	d0, d0
 800f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ec:	681d      	ldr	r5, [r3, #0]
 800f1ee:	d704      	bvc.n	800f1fa <_scanf_float+0x3a2>
 800f1f0:	f000 f87e 	bl	800f2f0 <nanf>
 800f1f4:	ed85 0a00 	vstr	s0, [r5]
 800f1f8:	e7b0      	b.n	800f15c <_scanf_float+0x304>
 800f1fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f1fe:	e7f9      	b.n	800f1f4 <_scanf_float+0x39c>
 800f200:	2600      	movs	r6, #0
 800f202:	e670      	b.n	800eee6 <_scanf_float+0x8e>
 800f204:	08012798 	.word	0x08012798

0800f208 <_puts_r>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	460e      	mov	r6, r1
 800f20c:	4605      	mov	r5, r0
 800f20e:	b118      	cbz	r0, 800f218 <_puts_r+0x10>
 800f210:	6983      	ldr	r3, [r0, #24]
 800f212:	b90b      	cbnz	r3, 800f218 <_puts_r+0x10>
 800f214:	f001 fee0 	bl	8010fd8 <__sinit>
 800f218:	69ab      	ldr	r3, [r5, #24]
 800f21a:	68ac      	ldr	r4, [r5, #8]
 800f21c:	b913      	cbnz	r3, 800f224 <_puts_r+0x1c>
 800f21e:	4628      	mov	r0, r5
 800f220:	f001 feda 	bl	8010fd8 <__sinit>
 800f224:	4b23      	ldr	r3, [pc, #140]	; (800f2b4 <_puts_r+0xac>)
 800f226:	429c      	cmp	r4, r3
 800f228:	d117      	bne.n	800f25a <_puts_r+0x52>
 800f22a:	686c      	ldr	r4, [r5, #4]
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	071b      	lsls	r3, r3, #28
 800f230:	d51d      	bpl.n	800f26e <_puts_r+0x66>
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	b1db      	cbz	r3, 800f26e <_puts_r+0x66>
 800f236:	3e01      	subs	r6, #1
 800f238:	68a3      	ldr	r3, [r4, #8]
 800f23a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f23e:	3b01      	subs	r3, #1
 800f240:	60a3      	str	r3, [r4, #8]
 800f242:	b9e9      	cbnz	r1, 800f280 <_puts_r+0x78>
 800f244:	2b00      	cmp	r3, #0
 800f246:	da2e      	bge.n	800f2a6 <_puts_r+0x9e>
 800f248:	4622      	mov	r2, r4
 800f24a:	210a      	movs	r1, #10
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 ff39 	bl	80100c4 <__swbuf_r>
 800f252:	3001      	adds	r0, #1
 800f254:	d011      	beq.n	800f27a <_puts_r+0x72>
 800f256:	200a      	movs	r0, #10
 800f258:	e011      	b.n	800f27e <_puts_r+0x76>
 800f25a:	4b17      	ldr	r3, [pc, #92]	; (800f2b8 <_puts_r+0xb0>)
 800f25c:	429c      	cmp	r4, r3
 800f25e:	d101      	bne.n	800f264 <_puts_r+0x5c>
 800f260:	68ac      	ldr	r4, [r5, #8]
 800f262:	e7e3      	b.n	800f22c <_puts_r+0x24>
 800f264:	4b15      	ldr	r3, [pc, #84]	; (800f2bc <_puts_r+0xb4>)
 800f266:	429c      	cmp	r4, r3
 800f268:	bf08      	it	eq
 800f26a:	68ec      	ldreq	r4, [r5, #12]
 800f26c:	e7de      	b.n	800f22c <_puts_r+0x24>
 800f26e:	4621      	mov	r1, r4
 800f270:	4628      	mov	r0, r5
 800f272:	f000 ff79 	bl	8010168 <__swsetup_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0dd      	beq.n	800f236 <_puts_r+0x2e>
 800f27a:	f04f 30ff 	mov.w	r0, #4294967295
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	2b00      	cmp	r3, #0
 800f282:	da04      	bge.n	800f28e <_puts_r+0x86>
 800f284:	69a2      	ldr	r2, [r4, #24]
 800f286:	429a      	cmp	r2, r3
 800f288:	dc06      	bgt.n	800f298 <_puts_r+0x90>
 800f28a:	290a      	cmp	r1, #10
 800f28c:	d004      	beq.n	800f298 <_puts_r+0x90>
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	1c5a      	adds	r2, r3, #1
 800f292:	6022      	str	r2, [r4, #0]
 800f294:	7019      	strb	r1, [r3, #0]
 800f296:	e7cf      	b.n	800f238 <_puts_r+0x30>
 800f298:	4622      	mov	r2, r4
 800f29a:	4628      	mov	r0, r5
 800f29c:	f000 ff12 	bl	80100c4 <__swbuf_r>
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d1c9      	bne.n	800f238 <_puts_r+0x30>
 800f2a4:	e7e9      	b.n	800f27a <_puts_r+0x72>
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	200a      	movs	r0, #10
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	6022      	str	r2, [r4, #0]
 800f2ae:	7018      	strb	r0, [r3, #0]
 800f2b0:	e7e5      	b.n	800f27e <_puts_r+0x76>
 800f2b2:	bf00      	nop
 800f2b4:	08012820 	.word	0x08012820
 800f2b8:	08012840 	.word	0x08012840
 800f2bc:	08012800 	.word	0x08012800

0800f2c0 <puts>:
 800f2c0:	4b02      	ldr	r3, [pc, #8]	; (800f2cc <puts+0xc>)
 800f2c2:	4601      	mov	r1, r0
 800f2c4:	6818      	ldr	r0, [r3, #0]
 800f2c6:	f7ff bf9f 	b.w	800f208 <_puts_r>
 800f2ca:	bf00      	nop
 800f2cc:	20000370 	.word	0x20000370

0800f2d0 <_sbrk_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4c06      	ldr	r4, [pc, #24]	; (800f2ec <_sbrk_r+0x1c>)
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	4608      	mov	r0, r1
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	f003 f954 	bl	8012588 <_sbrk>
 800f2e0:	1c43      	adds	r3, r0, #1
 800f2e2:	d102      	bne.n	800f2ea <_sbrk_r+0x1a>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	b103      	cbz	r3, 800f2ea <_sbrk_r+0x1a>
 800f2e8:	602b      	str	r3, [r5, #0]
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	2000eb14 	.word	0x2000eb14

0800f2f0 <nanf>:
 800f2f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f2f8 <nanf+0x8>
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	7fc00000 	.word	0x7fc00000

0800f2fc <_raise_r>:
 800f2fc:	291f      	cmp	r1, #31
 800f2fe:	b538      	push	{r3, r4, r5, lr}
 800f300:	4604      	mov	r4, r0
 800f302:	460d      	mov	r5, r1
 800f304:	d904      	bls.n	800f310 <_raise_r+0x14>
 800f306:	2316      	movs	r3, #22
 800f308:	6003      	str	r3, [r0, #0]
 800f30a:	f04f 30ff 	mov.w	r0, #4294967295
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f312:	b112      	cbz	r2, 800f31a <_raise_r+0x1e>
 800f314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f318:	b94b      	cbnz	r3, 800f32e <_raise_r+0x32>
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 f830 	bl	800f380 <_getpid_r>
 800f320:	462a      	mov	r2, r5
 800f322:	4601      	mov	r1, r0
 800f324:	4620      	mov	r0, r4
 800f326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f32a:	f000 b817 	b.w	800f35c <_kill_r>
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d00a      	beq.n	800f348 <_raise_r+0x4c>
 800f332:	1c59      	adds	r1, r3, #1
 800f334:	d103      	bne.n	800f33e <_raise_r+0x42>
 800f336:	2316      	movs	r3, #22
 800f338:	6003      	str	r3, [r0, #0]
 800f33a:	2001      	movs	r0, #1
 800f33c:	e7e7      	b.n	800f30e <_raise_r+0x12>
 800f33e:	2400      	movs	r4, #0
 800f340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f344:	4628      	mov	r0, r5
 800f346:	4798      	blx	r3
 800f348:	2000      	movs	r0, #0
 800f34a:	e7e0      	b.n	800f30e <_raise_r+0x12>

0800f34c <raise>:
 800f34c:	4b02      	ldr	r3, [pc, #8]	; (800f358 <raise+0xc>)
 800f34e:	4601      	mov	r1, r0
 800f350:	6818      	ldr	r0, [r3, #0]
 800f352:	f7ff bfd3 	b.w	800f2fc <_raise_r>
 800f356:	bf00      	nop
 800f358:	20000370 	.word	0x20000370

0800f35c <_kill_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4c07      	ldr	r4, [pc, #28]	; (800f37c <_kill_r+0x20>)
 800f360:	2300      	movs	r3, #0
 800f362:	4605      	mov	r5, r0
 800f364:	4608      	mov	r0, r1
 800f366:	4611      	mov	r1, r2
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	f003 f8f5 	bl	8012558 <_kill>
 800f36e:	1c43      	adds	r3, r0, #1
 800f370:	d102      	bne.n	800f378 <_kill_r+0x1c>
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	b103      	cbz	r3, 800f378 <_kill_r+0x1c>
 800f376:	602b      	str	r3, [r5, #0]
 800f378:	bd38      	pop	{r3, r4, r5, pc}
 800f37a:	bf00      	nop
 800f37c:	2000eb14 	.word	0x2000eb14

0800f380 <_getpid_r>:
 800f380:	f003 b8da 	b.w	8012538 <_getpid>

0800f384 <siprintf>:
 800f384:	b40e      	push	{r1, r2, r3}
 800f386:	b500      	push	{lr}
 800f388:	b09c      	sub	sp, #112	; 0x70
 800f38a:	ab1d      	add	r3, sp, #116	; 0x74
 800f38c:	9002      	str	r0, [sp, #8]
 800f38e:	9006      	str	r0, [sp, #24]
 800f390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f394:	4809      	ldr	r0, [pc, #36]	; (800f3bc <siprintf+0x38>)
 800f396:	9107      	str	r1, [sp, #28]
 800f398:	9104      	str	r1, [sp, #16]
 800f39a:	4909      	ldr	r1, [pc, #36]	; (800f3c0 <siprintf+0x3c>)
 800f39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a0:	9105      	str	r1, [sp, #20]
 800f3a2:	6800      	ldr	r0, [r0, #0]
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	a902      	add	r1, sp, #8
 800f3a8:	f002 feac 	bl	8012104 <_svfiprintf_r>
 800f3ac:	9b02      	ldr	r3, [sp, #8]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
 800f3b2:	b01c      	add	sp, #112	; 0x70
 800f3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3b8:	b003      	add	sp, #12
 800f3ba:	4770      	bx	lr
 800f3bc:	20000370 	.word	0x20000370
 800f3c0:	ffff0208 	.word	0xffff0208

0800f3c4 <sulp>:
 800f3c4:	b570      	push	{r4, r5, r6, lr}
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	4616      	mov	r6, r2
 800f3cc:	ec45 4b10 	vmov	d0, r4, r5
 800f3d0:	f002 fd0a 	bl	8011de8 <__ulp>
 800f3d4:	b17e      	cbz	r6, 800f3f6 <sulp+0x32>
 800f3d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f3da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	dd09      	ble.n	800f3f6 <sulp+0x32>
 800f3e2:	051b      	lsls	r3, r3, #20
 800f3e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f3ee:	ec41 0b17 	vmov	d7, r0, r1
 800f3f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}

0800f3f8 <_strtod_l>:
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ed2d 8b0c 	vpush	{d8-d13}
 800f400:	4698      	mov	r8, r3
 800f402:	b09d      	sub	sp, #116	; 0x74
 800f404:	2300      	movs	r3, #0
 800f406:	4604      	mov	r4, r0
 800f408:	4640      	mov	r0, r8
 800f40a:	460e      	mov	r6, r1
 800f40c:	9214      	str	r2, [sp, #80]	; 0x50
 800f40e:	9318      	str	r3, [sp, #96]	; 0x60
 800f410:	f002 f995 	bl	801173e <__localeconv_l>
 800f414:	4681      	mov	r9, r0
 800f416:	6800      	ldr	r0, [r0, #0]
 800f418:	f7f0 ff12 	bl	8000240 <strlen>
 800f41c:	f04f 0a00 	mov.w	sl, #0
 800f420:	4607      	mov	r7, r0
 800f422:	f04f 0b00 	mov.w	fp, #0
 800f426:	9617      	str	r6, [sp, #92]	; 0x5c
 800f428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f42a:	781a      	ldrb	r2, [r3, #0]
 800f42c:	2a0d      	cmp	r2, #13
 800f42e:	d834      	bhi.n	800f49a <_strtod_l+0xa2>
 800f430:	2a09      	cmp	r2, #9
 800f432:	d238      	bcs.n	800f4a6 <_strtod_l+0xae>
 800f434:	2a00      	cmp	r2, #0
 800f436:	d040      	beq.n	800f4ba <_strtod_l+0xc2>
 800f438:	2300      	movs	r3, #0
 800f43a:	930d      	str	r3, [sp, #52]	; 0x34
 800f43c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f43e:	782b      	ldrb	r3, [r5, #0]
 800f440:	2b30      	cmp	r3, #48	; 0x30
 800f442:	f040 80b3 	bne.w	800f5ac <_strtod_l+0x1b4>
 800f446:	786b      	ldrb	r3, [r5, #1]
 800f448:	2b58      	cmp	r3, #88	; 0x58
 800f44a:	d001      	beq.n	800f450 <_strtod_l+0x58>
 800f44c:	2b78      	cmp	r3, #120	; 0x78
 800f44e:	d169      	bne.n	800f524 <_strtod_l+0x12c>
 800f450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	ab18      	add	r3, sp, #96	; 0x60
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	f8cd 8008 	str.w	r8, [sp, #8]
 800f45c:	ab19      	add	r3, sp, #100	; 0x64
 800f45e:	4a8f      	ldr	r2, [pc, #572]	; (800f69c <_strtod_l+0x2a4>)
 800f460:	a917      	add	r1, sp, #92	; 0x5c
 800f462:	4620      	mov	r0, r4
 800f464:	f001 fe91 	bl	801118a <__gethex>
 800f468:	f010 0607 	ands.w	r6, r0, #7
 800f46c:	4607      	mov	r7, r0
 800f46e:	d005      	beq.n	800f47c <_strtod_l+0x84>
 800f470:	2e06      	cmp	r6, #6
 800f472:	d12c      	bne.n	800f4ce <_strtod_l+0xd6>
 800f474:	3501      	adds	r5, #1
 800f476:	2300      	movs	r3, #0
 800f478:	9517      	str	r5, [sp, #92]	; 0x5c
 800f47a:	930d      	str	r3, [sp, #52]	; 0x34
 800f47c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f040 855e 	bne.w	800ff40 <_strtod_l+0xb48>
 800f484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f486:	b1eb      	cbz	r3, 800f4c4 <_strtod_l+0xcc>
 800f488:	ec4b ab17 	vmov	d7, sl, fp
 800f48c:	eeb1 0b47 	vneg.f64	d0, d7
 800f490:	b01d      	add	sp, #116	; 0x74
 800f492:	ecbd 8b0c 	vpop	{d8-d13}
 800f496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f49a:	2a2b      	cmp	r2, #43	; 0x2b
 800f49c:	d015      	beq.n	800f4ca <_strtod_l+0xd2>
 800f49e:	2a2d      	cmp	r2, #45	; 0x2d
 800f4a0:	d004      	beq.n	800f4ac <_strtod_l+0xb4>
 800f4a2:	2a20      	cmp	r2, #32
 800f4a4:	d1c8      	bne.n	800f438 <_strtod_l+0x40>
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f4aa:	e7bd      	b.n	800f428 <_strtod_l+0x30>
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	920d      	str	r2, [sp, #52]	; 0x34
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	9217      	str	r2, [sp, #92]	; 0x5c
 800f4b4:	785b      	ldrb	r3, [r3, #1]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1c0      	bne.n	800f43c <_strtod_l+0x44>
 800f4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f040 853c 	bne.w	800ff3c <_strtod_l+0xb44>
 800f4c4:	ec4b ab10 	vmov	d0, sl, fp
 800f4c8:	e7e2      	b.n	800f490 <_strtod_l+0x98>
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	e7ef      	b.n	800f4ae <_strtod_l+0xb6>
 800f4ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f4d0:	b13a      	cbz	r2, 800f4e2 <_strtod_l+0xea>
 800f4d2:	2135      	movs	r1, #53	; 0x35
 800f4d4:	a81a      	add	r0, sp, #104	; 0x68
 800f4d6:	f002 fd80 	bl	8011fda <__copybits>
 800f4da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f002 f9eb 	bl	80118b8 <_Bfree>
 800f4e2:	3e01      	subs	r6, #1
 800f4e4:	2e04      	cmp	r6, #4
 800f4e6:	d806      	bhi.n	800f4f6 <_strtod_l+0xfe>
 800f4e8:	e8df f006 	tbb	[pc, r6]
 800f4ec:	1714030a 	.word	0x1714030a
 800f4f0:	0a          	.byte	0x0a
 800f4f1:	00          	.byte	0x00
 800f4f2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f4f6:	073b      	lsls	r3, r7, #28
 800f4f8:	d5c0      	bpl.n	800f47c <_strtod_l+0x84>
 800f4fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f4fe:	e7bd      	b.n	800f47c <_strtod_l+0x84>
 800f500:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f504:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f506:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f50a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f50e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f512:	e7f0      	b.n	800f4f6 <_strtod_l+0xfe>
 800f514:	f8df b188 	ldr.w	fp, [pc, #392]	; 800f6a0 <_strtod_l+0x2a8>
 800f518:	e7ed      	b.n	800f4f6 <_strtod_l+0xfe>
 800f51a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f51e:	f04f 3aff 	mov.w	sl, #4294967295
 800f522:	e7e8      	b.n	800f4f6 <_strtod_l+0xfe>
 800f524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f526:	1c5a      	adds	r2, r3, #1
 800f528:	9217      	str	r2, [sp, #92]	; 0x5c
 800f52a:	785b      	ldrb	r3, [r3, #1]
 800f52c:	2b30      	cmp	r3, #48	; 0x30
 800f52e:	d0f9      	beq.n	800f524 <_strtod_l+0x12c>
 800f530:	2b00      	cmp	r3, #0
 800f532:	d0a3      	beq.n	800f47c <_strtod_l+0x84>
 800f534:	2301      	movs	r3, #1
 800f536:	930a      	str	r3, [sp, #40]	; 0x28
 800f538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f53a:	930c      	str	r3, [sp, #48]	; 0x30
 800f53c:	2300      	movs	r3, #0
 800f53e:	9306      	str	r3, [sp, #24]
 800f540:	9308      	str	r3, [sp, #32]
 800f542:	461d      	mov	r5, r3
 800f544:	220a      	movs	r2, #10
 800f546:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f548:	f890 8000 	ldrb.w	r8, [r0]
 800f54c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800f550:	b2d9      	uxtb	r1, r3
 800f552:	2909      	cmp	r1, #9
 800f554:	d92c      	bls.n	800f5b0 <_strtod_l+0x1b8>
 800f556:	463a      	mov	r2, r7
 800f558:	f8d9 1000 	ldr.w	r1, [r9]
 800f55c:	f002 ff0d 	bl	801237a <strncmp>
 800f560:	2800      	cmp	r0, #0
 800f562:	d035      	beq.n	800f5d0 <_strtod_l+0x1d8>
 800f564:	2000      	movs	r0, #0
 800f566:	4642      	mov	r2, r8
 800f568:	462b      	mov	r3, r5
 800f56a:	4601      	mov	r1, r0
 800f56c:	9004      	str	r0, [sp, #16]
 800f56e:	2a65      	cmp	r2, #101	; 0x65
 800f570:	d001      	beq.n	800f576 <_strtod_l+0x17e>
 800f572:	2a45      	cmp	r2, #69	; 0x45
 800f574:	d117      	bne.n	800f5a6 <_strtod_l+0x1ae>
 800f576:	b923      	cbnz	r3, 800f582 <_strtod_l+0x18a>
 800f578:	b910      	cbnz	r0, 800f580 <_strtod_l+0x188>
 800f57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d09c      	beq.n	800f4ba <_strtod_l+0xc2>
 800f580:	2300      	movs	r3, #0
 800f582:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f584:	1c72      	adds	r2, r6, #1
 800f586:	9217      	str	r2, [sp, #92]	; 0x5c
 800f588:	7872      	ldrb	r2, [r6, #1]
 800f58a:	2a2b      	cmp	r2, #43	; 0x2b
 800f58c:	f000 8082 	beq.w	800f694 <_strtod_l+0x29c>
 800f590:	2a2d      	cmp	r2, #45	; 0x2d
 800f592:	d079      	beq.n	800f688 <_strtod_l+0x290>
 800f594:	f04f 0e00 	mov.w	lr, #0
 800f598:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f59c:	f1bc 0f09 	cmp.w	ip, #9
 800f5a0:	f240 8086 	bls.w	800f6b0 <_strtod_l+0x2b8>
 800f5a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800f5a6:	f04f 0800 	mov.w	r8, #0
 800f5aa:	e0a8      	b.n	800f6fe <_strtod_l+0x306>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	e7c2      	b.n	800f536 <_strtod_l+0x13e>
 800f5b0:	2d08      	cmp	r5, #8
 800f5b2:	bfd5      	itete	le
 800f5b4:	9908      	ldrle	r1, [sp, #32]
 800f5b6:	9906      	ldrgt	r1, [sp, #24]
 800f5b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f5bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f5c0:	f100 0001 	add.w	r0, r0, #1
 800f5c4:	bfd4      	ite	le
 800f5c6:	9308      	strle	r3, [sp, #32]
 800f5c8:	9306      	strgt	r3, [sp, #24]
 800f5ca:	3501      	adds	r5, #1
 800f5cc:	9017      	str	r0, [sp, #92]	; 0x5c
 800f5ce:	e7ba      	b.n	800f546 <_strtod_l+0x14e>
 800f5d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5d2:	19da      	adds	r2, r3, r7
 800f5d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f5d6:	5dda      	ldrb	r2, [r3, r7]
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	d038      	beq.n	800f64e <_strtod_l+0x256>
 800f5dc:	4601      	mov	r1, r0
 800f5de:	462b      	mov	r3, r5
 800f5e0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800f5e4:	2f09      	cmp	r7, #9
 800f5e6:	d913      	bls.n	800f610 <_strtod_l+0x218>
 800f5e8:	2701      	movs	r7, #1
 800f5ea:	9704      	str	r7, [sp, #16]
 800f5ec:	e7bf      	b.n	800f56e <_strtod_l+0x176>
 800f5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	9217      	str	r2, [sp, #92]	; 0x5c
 800f5f4:	785a      	ldrb	r2, [r3, #1]
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	2a30      	cmp	r2, #48	; 0x30
 800f5fa:	d0f8      	beq.n	800f5ee <_strtod_l+0x1f6>
 800f5fc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f600:	2b08      	cmp	r3, #8
 800f602:	f200 84a2 	bhi.w	800ff4a <_strtod_l+0xb52>
 800f606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f608:	930c      	str	r3, [sp, #48]	; 0x30
 800f60a:	4601      	mov	r1, r0
 800f60c:	2000      	movs	r0, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800f614:	f100 0701 	add.w	r7, r0, #1
 800f618:	d013      	beq.n	800f642 <_strtod_l+0x24a>
 800f61a:	4439      	add	r1, r7
 800f61c:	eb00 0e03 	add.w	lr, r0, r3
 800f620:	461f      	mov	r7, r3
 800f622:	f04f 0c0a 	mov.w	ip, #10
 800f626:	45be      	cmp	lr, r7
 800f628:	d113      	bne.n	800f652 <_strtod_l+0x25a>
 800f62a:	181f      	adds	r7, r3, r0
 800f62c:	2f08      	cmp	r7, #8
 800f62e:	f103 0301 	add.w	r3, r3, #1
 800f632:	4403      	add	r3, r0
 800f634:	dc1d      	bgt.n	800f672 <_strtod_l+0x27a>
 800f636:	9a08      	ldr	r2, [sp, #32]
 800f638:	200a      	movs	r0, #10
 800f63a:	fb00 8202 	mla	r2, r0, r2, r8
 800f63e:	9208      	str	r2, [sp, #32]
 800f640:	2700      	movs	r7, #0
 800f642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f644:	1c50      	adds	r0, r2, #1
 800f646:	9017      	str	r0, [sp, #92]	; 0x5c
 800f648:	7852      	ldrb	r2, [r2, #1]
 800f64a:	4638      	mov	r0, r7
 800f64c:	e7c8      	b.n	800f5e0 <_strtod_l+0x1e8>
 800f64e:	4628      	mov	r0, r5
 800f650:	e7d2      	b.n	800f5f8 <_strtod_l+0x200>
 800f652:	2f08      	cmp	r7, #8
 800f654:	f107 0701 	add.w	r7, r7, #1
 800f658:	dc04      	bgt.n	800f664 <_strtod_l+0x26c>
 800f65a:	9a08      	ldr	r2, [sp, #32]
 800f65c:	fb0c f202 	mul.w	r2, ip, r2
 800f660:	9208      	str	r2, [sp, #32]
 800f662:	e7e0      	b.n	800f626 <_strtod_l+0x22e>
 800f664:	2f10      	cmp	r7, #16
 800f666:	bfde      	ittt	le
 800f668:	9a06      	ldrle	r2, [sp, #24]
 800f66a:	fb0c f202 	mulle.w	r2, ip, r2
 800f66e:	9206      	strle	r2, [sp, #24]
 800f670:	e7d9      	b.n	800f626 <_strtod_l+0x22e>
 800f672:	2b10      	cmp	r3, #16
 800f674:	bfdf      	itttt	le
 800f676:	9a06      	ldrle	r2, [sp, #24]
 800f678:	200a      	movle	r0, #10
 800f67a:	fb00 8202 	mlale	r2, r0, r2, r8
 800f67e:	9206      	strle	r2, [sp, #24]
 800f680:	e7de      	b.n	800f640 <_strtod_l+0x248>
 800f682:	2301      	movs	r3, #1
 800f684:	9304      	str	r3, [sp, #16]
 800f686:	e777      	b.n	800f578 <_strtod_l+0x180>
 800f688:	f04f 0e01 	mov.w	lr, #1
 800f68c:	1cb2      	adds	r2, r6, #2
 800f68e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f690:	78b2      	ldrb	r2, [r6, #2]
 800f692:	e781      	b.n	800f598 <_strtod_l+0x1a0>
 800f694:	f04f 0e00 	mov.w	lr, #0
 800f698:	e7f8      	b.n	800f68c <_strtod_l+0x294>
 800f69a:	bf00      	nop
 800f69c:	080127a0 	.word	0x080127a0
 800f6a0:	7ff00000 	.word	0x7ff00000
 800f6a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6a6:	f102 0c01 	add.w	ip, r2, #1
 800f6aa:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800f6ae:	7852      	ldrb	r2, [r2, #1]
 800f6b0:	2a30      	cmp	r2, #48	; 0x30
 800f6b2:	d0f7      	beq.n	800f6a4 <_strtod_l+0x2ac>
 800f6b4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800f6b8:	f1bc 0f08 	cmp.w	ip, #8
 800f6bc:	f63f af73 	bhi.w	800f5a6 <_strtod_l+0x1ae>
 800f6c0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800f6c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6c6:	920e      	str	r2, [sp, #56]	; 0x38
 800f6c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6ca:	f102 0c01 	add.w	ip, r2, #1
 800f6ce:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800f6d2:	7852      	ldrb	r2, [r2, #1]
 800f6d4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800f6d8:	f1b9 0f09 	cmp.w	r9, #9
 800f6dc:	d939      	bls.n	800f752 <_strtod_l+0x35a>
 800f6de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f6e0:	ebac 0c07 	sub.w	ip, ip, r7
 800f6e4:	f1bc 0f08 	cmp.w	ip, #8
 800f6e8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800f6ec:	dc37      	bgt.n	800f75e <_strtod_l+0x366>
 800f6ee:	45e0      	cmp	r8, ip
 800f6f0:	bfa8      	it	ge
 800f6f2:	46e0      	movge	r8, ip
 800f6f4:	f1be 0f00 	cmp.w	lr, #0
 800f6f8:	d001      	beq.n	800f6fe <_strtod_l+0x306>
 800f6fa:	f1c8 0800 	rsb	r8, r8, #0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d151      	bne.n	800f7a6 <_strtod_l+0x3ae>
 800f702:	2800      	cmp	r0, #0
 800f704:	f47f aeba 	bne.w	800f47c <_strtod_l+0x84>
 800f708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f47f aeb6 	bne.w	800f47c <_strtod_l+0x84>
 800f710:	9b04      	ldr	r3, [sp, #16]
 800f712:	2b00      	cmp	r3, #0
 800f714:	f47f aed1 	bne.w	800f4ba <_strtod_l+0xc2>
 800f718:	2a4e      	cmp	r2, #78	; 0x4e
 800f71a:	d027      	beq.n	800f76c <_strtod_l+0x374>
 800f71c:	dc21      	bgt.n	800f762 <_strtod_l+0x36a>
 800f71e:	2a49      	cmp	r2, #73	; 0x49
 800f720:	f47f aecb 	bne.w	800f4ba <_strtod_l+0xc2>
 800f724:	499a      	ldr	r1, [pc, #616]	; (800f990 <_strtod_l+0x598>)
 800f726:	a817      	add	r0, sp, #92	; 0x5c
 800f728:	f001 ff62 	bl	80115f0 <__match>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	f43f aec4 	beq.w	800f4ba <_strtod_l+0xc2>
 800f732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f734:	4997      	ldr	r1, [pc, #604]	; (800f994 <_strtod_l+0x59c>)
 800f736:	3b01      	subs	r3, #1
 800f738:	a817      	add	r0, sp, #92	; 0x5c
 800f73a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f73c:	f001 ff58 	bl	80115f0 <__match>
 800f740:	b910      	cbnz	r0, 800f748 <_strtod_l+0x350>
 800f742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f744:	3301      	adds	r3, #1
 800f746:	9317      	str	r3, [sp, #92]	; 0x5c
 800f748:	f8df b260 	ldr.w	fp, [pc, #608]	; 800f9ac <_strtod_l+0x5b4>
 800f74c:	f04f 0a00 	mov.w	sl, #0
 800f750:	e694      	b.n	800f47c <_strtod_l+0x84>
 800f752:	270a      	movs	r7, #10
 800f754:	fb07 2808 	mla	r8, r7, r8, r2
 800f758:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800f75c:	e7b4      	b.n	800f6c8 <_strtod_l+0x2d0>
 800f75e:	46e0      	mov	r8, ip
 800f760:	e7c8      	b.n	800f6f4 <_strtod_l+0x2fc>
 800f762:	2a69      	cmp	r2, #105	; 0x69
 800f764:	d0de      	beq.n	800f724 <_strtod_l+0x32c>
 800f766:	2a6e      	cmp	r2, #110	; 0x6e
 800f768:	f47f aea7 	bne.w	800f4ba <_strtod_l+0xc2>
 800f76c:	498a      	ldr	r1, [pc, #552]	; (800f998 <_strtod_l+0x5a0>)
 800f76e:	a817      	add	r0, sp, #92	; 0x5c
 800f770:	f001 ff3e 	bl	80115f0 <__match>
 800f774:	2800      	cmp	r0, #0
 800f776:	f43f aea0 	beq.w	800f4ba <_strtod_l+0xc2>
 800f77a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b28      	cmp	r3, #40	; 0x28
 800f780:	d10e      	bne.n	800f7a0 <_strtod_l+0x3a8>
 800f782:	aa1a      	add	r2, sp, #104	; 0x68
 800f784:	4985      	ldr	r1, [pc, #532]	; (800f99c <_strtod_l+0x5a4>)
 800f786:	a817      	add	r0, sp, #92	; 0x5c
 800f788:	f001 ff46 	bl	8011618 <__hexnan>
 800f78c:	2805      	cmp	r0, #5
 800f78e:	d107      	bne.n	800f7a0 <_strtod_l+0x3a8>
 800f790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f792:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f796:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f79a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f79e:	e66d      	b.n	800f47c <_strtod_l+0x84>
 800f7a0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f9b0 <_strtod_l+0x5b8>
 800f7a4:	e7d2      	b.n	800f74c <_strtod_l+0x354>
 800f7a6:	eddd 7a08 	vldr	s15, [sp, #32]
 800f7aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f7ae:	eba8 0201 	sub.w	r2, r8, r1
 800f7b2:	2d00      	cmp	r5, #0
 800f7b4:	bf08      	it	eq
 800f7b6:	461d      	moveq	r5, r3
 800f7b8:	2b10      	cmp	r3, #16
 800f7ba:	9204      	str	r2, [sp, #16]
 800f7bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	bfa8      	it	ge
 800f7c4:	2210      	movge	r2, #16
 800f7c6:	2b09      	cmp	r3, #9
 800f7c8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f7cc:	dc14      	bgt.n	800f7f8 <_strtod_l+0x400>
 800f7ce:	9904      	ldr	r1, [sp, #16]
 800f7d0:	2900      	cmp	r1, #0
 800f7d2:	f43f ae53 	beq.w	800f47c <_strtod_l+0x84>
 800f7d6:	9904      	ldr	r1, [sp, #16]
 800f7d8:	dd72      	ble.n	800f8c0 <_strtod_l+0x4c8>
 800f7da:	2916      	cmp	r1, #22
 800f7dc:	dc5a      	bgt.n	800f894 <_strtod_l+0x49c>
 800f7de:	4970      	ldr	r1, [pc, #448]	; (800f9a0 <_strtod_l+0x5a8>)
 800f7e0:	9b04      	ldr	r3, [sp, #16]
 800f7e2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f7e6:	ed91 7b00 	vldr	d7, [r1]
 800f7ea:	ec4b ab16 	vmov	d6, sl, fp
 800f7ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7f2:	ec5b ab17 	vmov	sl, fp, d7
 800f7f6:	e641      	b.n	800f47c <_strtod_l+0x84>
 800f7f8:	4969      	ldr	r1, [pc, #420]	; (800f9a0 <_strtod_l+0x5a8>)
 800f7fa:	eddd 7a06 	vldr	s15, [sp, #24]
 800f7fe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f802:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800f806:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f80a:	2b0f      	cmp	r3, #15
 800f80c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f810:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f814:	ec5b ab17 	vmov	sl, fp, d7
 800f818:	ddd9      	ble.n	800f7ce <_strtod_l+0x3d6>
 800f81a:	9904      	ldr	r1, [sp, #16]
 800f81c:	1a9a      	subs	r2, r3, r2
 800f81e:	440a      	add	r2, r1
 800f820:	2a00      	cmp	r2, #0
 800f822:	f340 8096 	ble.w	800f952 <_strtod_l+0x55a>
 800f826:	f012 000f 	ands.w	r0, r2, #15
 800f82a:	d00a      	beq.n	800f842 <_strtod_l+0x44a>
 800f82c:	495c      	ldr	r1, [pc, #368]	; (800f9a0 <_strtod_l+0x5a8>)
 800f82e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f832:	ed91 7b00 	vldr	d7, [r1]
 800f836:	ec4b ab16 	vmov	d6, sl, fp
 800f83a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f83e:	ec5b ab17 	vmov	sl, fp, d7
 800f842:	f032 020f 	bics.w	r2, r2, #15
 800f846:	d072      	beq.n	800f92e <_strtod_l+0x536>
 800f848:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f84c:	dd45      	ble.n	800f8da <_strtod_l+0x4e2>
 800f84e:	2500      	movs	r5, #0
 800f850:	46a8      	mov	r8, r5
 800f852:	9506      	str	r5, [sp, #24]
 800f854:	46a9      	mov	r9, r5
 800f856:	2322      	movs	r3, #34	; 0x22
 800f858:	f8df b150 	ldr.w	fp, [pc, #336]	; 800f9ac <_strtod_l+0x5b4>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	f04f 0a00 	mov.w	sl, #0
 800f862:	9b06      	ldr	r3, [sp, #24]
 800f864:	2b00      	cmp	r3, #0
 800f866:	f43f ae09 	beq.w	800f47c <_strtod_l+0x84>
 800f86a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f86c:	4620      	mov	r0, r4
 800f86e:	f002 f823 	bl	80118b8 <_Bfree>
 800f872:	4649      	mov	r1, r9
 800f874:	4620      	mov	r0, r4
 800f876:	f002 f81f 	bl	80118b8 <_Bfree>
 800f87a:	4641      	mov	r1, r8
 800f87c:	4620      	mov	r0, r4
 800f87e:	f002 f81b 	bl	80118b8 <_Bfree>
 800f882:	9906      	ldr	r1, [sp, #24]
 800f884:	4620      	mov	r0, r4
 800f886:	f002 f817 	bl	80118b8 <_Bfree>
 800f88a:	4629      	mov	r1, r5
 800f88c:	4620      	mov	r0, r4
 800f88e:	f002 f813 	bl	80118b8 <_Bfree>
 800f892:	e5f3      	b.n	800f47c <_strtod_l+0x84>
 800f894:	9804      	ldr	r0, [sp, #16]
 800f896:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f89a:	4281      	cmp	r1, r0
 800f89c:	dbbd      	blt.n	800f81a <_strtod_l+0x422>
 800f89e:	4a40      	ldr	r2, [pc, #256]	; (800f9a0 <_strtod_l+0x5a8>)
 800f8a0:	f1c3 030f 	rsb	r3, r3, #15
 800f8a4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f8a8:	ed91 7b00 	vldr	d7, [r1]
 800f8ac:	ec4b ab16 	vmov	d6, sl, fp
 800f8b0:	1ac3      	subs	r3, r0, r3
 800f8b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f8b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8ba:	ed92 6b00 	vldr	d6, [r2]
 800f8be:	e796      	b.n	800f7ee <_strtod_l+0x3f6>
 800f8c0:	3116      	adds	r1, #22
 800f8c2:	dbaa      	blt.n	800f81a <_strtod_l+0x422>
 800f8c4:	4936      	ldr	r1, [pc, #216]	; (800f9a0 <_strtod_l+0x5a8>)
 800f8c6:	9b04      	ldr	r3, [sp, #16]
 800f8c8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800f8cc:	ed91 7b00 	vldr	d7, [r1]
 800f8d0:	ec4b ab16 	vmov	d6, sl, fp
 800f8d4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f8d8:	e78b      	b.n	800f7f2 <_strtod_l+0x3fa>
 800f8da:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800f8de:	2000      	movs	r0, #0
 800f8e0:	4e30      	ldr	r6, [pc, #192]	; (800f9a4 <_strtod_l+0x5ac>)
 800f8e2:	1112      	asrs	r2, r2, #4
 800f8e4:	4601      	mov	r1, r0
 800f8e6:	2a01      	cmp	r2, #1
 800f8e8:	dc23      	bgt.n	800f932 <_strtod_l+0x53a>
 800f8ea:	b108      	cbz	r0, 800f8f0 <_strtod_l+0x4f8>
 800f8ec:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f8f0:	4a2c      	ldr	r2, [pc, #176]	; (800f9a4 <_strtod_l+0x5ac>)
 800f8f2:	482d      	ldr	r0, [pc, #180]	; (800f9a8 <_strtod_l+0x5b0>)
 800f8f4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800f8f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f8fc:	ed91 7b00 	vldr	d7, [r1]
 800f900:	ec4b ab16 	vmov	d6, sl, fp
 800f904:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f908:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f90c:	9907      	ldr	r1, [sp, #28]
 800f90e:	4a27      	ldr	r2, [pc, #156]	; (800f9ac <_strtod_l+0x5b4>)
 800f910:	400a      	ands	r2, r1
 800f912:	4282      	cmp	r2, r0
 800f914:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f918:	d899      	bhi.n	800f84e <_strtod_l+0x456>
 800f91a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f91e:	4282      	cmp	r2, r0
 800f920:	bf86      	itte	hi
 800f922:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800f9b4 <_strtod_l+0x5bc>
 800f926:	f04f 3aff 	movhi.w	sl, #4294967295
 800f92a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800f92e:	2700      	movs	r7, #0
 800f930:	e070      	b.n	800fa14 <_strtod_l+0x61c>
 800f932:	07d7      	lsls	r7, r2, #31
 800f934:	d50a      	bpl.n	800f94c <_strtod_l+0x554>
 800f936:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800f93a:	ed90 7b00 	vldr	d7, [r0]
 800f93e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800f942:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f946:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f94a:	2001      	movs	r0, #1
 800f94c:	3101      	adds	r1, #1
 800f94e:	1052      	asrs	r2, r2, #1
 800f950:	e7c9      	b.n	800f8e6 <_strtod_l+0x4ee>
 800f952:	d0ec      	beq.n	800f92e <_strtod_l+0x536>
 800f954:	4252      	negs	r2, r2
 800f956:	f012 000f 	ands.w	r0, r2, #15
 800f95a:	d00a      	beq.n	800f972 <_strtod_l+0x57a>
 800f95c:	4910      	ldr	r1, [pc, #64]	; (800f9a0 <_strtod_l+0x5a8>)
 800f95e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f962:	ed91 7b00 	vldr	d7, [r1]
 800f966:	ec4b ab16 	vmov	d6, sl, fp
 800f96a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f96e:	ec5b ab17 	vmov	sl, fp, d7
 800f972:	1112      	asrs	r2, r2, #4
 800f974:	d0db      	beq.n	800f92e <_strtod_l+0x536>
 800f976:	2a1f      	cmp	r2, #31
 800f978:	dd1e      	ble.n	800f9b8 <_strtod_l+0x5c0>
 800f97a:	2500      	movs	r5, #0
 800f97c:	46a8      	mov	r8, r5
 800f97e:	9506      	str	r5, [sp, #24]
 800f980:	46a9      	mov	r9, r5
 800f982:	2322      	movs	r3, #34	; 0x22
 800f984:	f04f 0a00 	mov.w	sl, #0
 800f988:	f04f 0b00 	mov.w	fp, #0
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	e768      	b.n	800f862 <_strtod_l+0x46a>
 800f990:	08012769 	.word	0x08012769
 800f994:	080127f3 	.word	0x080127f3
 800f998:	08012771 	.word	0x08012771
 800f99c:	080127b4 	.word	0x080127b4
 800f9a0:	08012898 	.word	0x08012898
 800f9a4:	08012870 	.word	0x08012870
 800f9a8:	7ca00000 	.word	0x7ca00000
 800f9ac:	7ff00000 	.word	0x7ff00000
 800f9b0:	fff80000 	.word	0xfff80000
 800f9b4:	7fefffff 	.word	0x7fefffff
 800f9b8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800f9bc:	f012 0710 	ands.w	r7, r2, #16
 800f9c0:	49ab      	ldr	r1, [pc, #684]	; (800fc70 <_strtod_l+0x878>)
 800f9c2:	bf18      	it	ne
 800f9c4:	276a      	movne	r7, #106	; 0x6a
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	f300 8113 	bgt.w	800fbf4 <_strtod_l+0x7fc>
 800f9ce:	b108      	cbz	r0, 800f9d4 <_strtod_l+0x5dc>
 800f9d0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f9d4:	b1bf      	cbz	r7, 800fa06 <_strtod_l+0x60e>
 800f9d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f9da:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800f9de:	2a00      	cmp	r2, #0
 800f9e0:	4659      	mov	r1, fp
 800f9e2:	dd10      	ble.n	800fa06 <_strtod_l+0x60e>
 800f9e4:	2a1f      	cmp	r2, #31
 800f9e6:	f340 8113 	ble.w	800fc10 <_strtod_l+0x818>
 800f9ea:	2a34      	cmp	r2, #52	; 0x34
 800f9ec:	bfde      	ittt	le
 800f9ee:	3a20      	suble	r2, #32
 800f9f0:	f04f 30ff 	movle.w	r0, #4294967295
 800f9f4:	fa00 f202 	lslle.w	r2, r0, r2
 800f9f8:	f04f 0a00 	mov.w	sl, #0
 800f9fc:	bfcc      	ite	gt
 800f9fe:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fa02:	ea02 0b01 	andle.w	fp, r2, r1
 800fa06:	ec4b ab17 	vmov	d7, sl, fp
 800fa0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	d0b2      	beq.n	800f97a <_strtod_l+0x582>
 800fa14:	9a08      	ldr	r2, [sp, #32]
 800fa16:	9200      	str	r2, [sp, #0]
 800fa18:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f001 ff9d 	bl	801195c <__s2b>
 800fa22:	9006      	str	r0, [sp, #24]
 800fa24:	2800      	cmp	r0, #0
 800fa26:	f43f af12 	beq.w	800f84e <_strtod_l+0x456>
 800fa2a:	9a04      	ldr	r2, [sp, #16]
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	2a00      	cmp	r2, #0
 800fa30:	f1c3 0300 	rsb	r3, r3, #0
 800fa34:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800fc58 <_strtod_l+0x860>
 800fa38:	bfa8      	it	ge
 800fa3a:	2300      	movge	r3, #0
 800fa3c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800fc60 <_strtod_l+0x868>
 800fa40:	ed9f bb89 	vldr	d11, [pc, #548]	; 800fc68 <_strtod_l+0x870>
 800fa44:	930e      	str	r3, [sp, #56]	; 0x38
 800fa46:	2500      	movs	r5, #0
 800fa48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fa4c:	9310      	str	r3, [sp, #64]	; 0x40
 800fa4e:	46a8      	mov	r8, r5
 800fa50:	9b06      	ldr	r3, [sp, #24]
 800fa52:	4620      	mov	r0, r4
 800fa54:	6859      	ldr	r1, [r3, #4]
 800fa56:	f001 fefb 	bl	8011850 <_Balloc>
 800fa5a:	4681      	mov	r9, r0
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	f43f aefa 	beq.w	800f856 <_strtod_l+0x45e>
 800fa62:	9b06      	ldr	r3, [sp, #24]
 800fa64:	691a      	ldr	r2, [r3, #16]
 800fa66:	3202      	adds	r2, #2
 800fa68:	f103 010c 	add.w	r1, r3, #12
 800fa6c:	0092      	lsls	r2, r2, #2
 800fa6e:	300c      	adds	r0, #12
 800fa70:	f7fe fcec 	bl	800e44c <memcpy>
 800fa74:	aa1a      	add	r2, sp, #104	; 0x68
 800fa76:	a919      	add	r1, sp, #100	; 0x64
 800fa78:	ec4b ab10 	vmov	d0, sl, fp
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800fa82:	f002 fa27 	bl	8011ed4 <__d2b>
 800fa86:	9018      	str	r0, [sp, #96]	; 0x60
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	f43f aee4 	beq.w	800f856 <_strtod_l+0x45e>
 800fa8e:	2101      	movs	r1, #1
 800fa90:	4620      	mov	r0, r4
 800fa92:	f001 ffef 	bl	8011a74 <__i2b>
 800fa96:	4680      	mov	r8, r0
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	f43f aedc 	beq.w	800f856 <_strtod_l+0x45e>
 800fa9e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800faa0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800faa2:	2e00      	cmp	r6, #0
 800faa4:	bfb1      	iteee	lt
 800faa6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800faa8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800faaa:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800faac:	18f3      	addge	r3, r6, r3
 800faae:	bfba      	itte	lt
 800fab0:	1b98      	sublt	r0, r3, r6
 800fab2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fab4:	9308      	strge	r3, [sp, #32]
 800fab6:	eba6 0607 	sub.w	r6, r6, r7
 800faba:	bfb8      	it	lt
 800fabc:	9308      	strlt	r3, [sp, #32]
 800fabe:	4416      	add	r6, r2
 800fac0:	4b6c      	ldr	r3, [pc, #432]	; (800fc74 <_strtod_l+0x87c>)
 800fac2:	3e01      	subs	r6, #1
 800fac4:	429e      	cmp	r6, r3
 800fac6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800faca:	f280 80b4 	bge.w	800fc36 <_strtod_l+0x83e>
 800face:	1b9b      	subs	r3, r3, r6
 800fad0:	2b1f      	cmp	r3, #31
 800fad2:	eba2 0203 	sub.w	r2, r2, r3
 800fad6:	f04f 0101 	mov.w	r1, #1
 800fada:	f300 80a0 	bgt.w	800fc1e <_strtod_l+0x826>
 800fade:	fa01 f303 	lsl.w	r3, r1, r3
 800fae2:	9311      	str	r3, [sp, #68]	; 0x44
 800fae4:	2300      	movs	r3, #0
 800fae6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fae8:	9b08      	ldr	r3, [sp, #32]
 800faea:	4413      	add	r3, r2
 800faec:	4402      	add	r2, r0
 800faee:	18be      	adds	r6, r7, r2
 800faf0:	9a08      	ldr	r2, [sp, #32]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	bfa8      	it	ge
 800faf6:	461a      	movge	r2, r3
 800faf8:	42b2      	cmp	r2, r6
 800fafa:	bfa8      	it	ge
 800fafc:	4632      	movge	r2, r6
 800fafe:	2a00      	cmp	r2, #0
 800fb00:	dd04      	ble.n	800fb0c <_strtod_l+0x714>
 800fb02:	9908      	ldr	r1, [sp, #32]
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	1ab6      	subs	r6, r6, r2
 800fb08:	1a8a      	subs	r2, r1, r2
 800fb0a:	9208      	str	r2, [sp, #32]
 800fb0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb0e:	b1c2      	cbz	r2, 800fb42 <_strtod_l+0x74a>
 800fb10:	4641      	mov	r1, r8
 800fb12:	4620      	mov	r0, r4
 800fb14:	9315      	str	r3, [sp, #84]	; 0x54
 800fb16:	f002 f84d 	bl	8011bb4 <__pow5mult>
 800fb1a:	4680      	mov	r8, r0
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	f43f ae9a 	beq.w	800f856 <_strtod_l+0x45e>
 800fb22:	4601      	mov	r1, r0
 800fb24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb26:	4620      	mov	r0, r4
 800fb28:	f001 ffad 	bl	8011a86 <__multiply>
 800fb2c:	900c      	str	r0, [sp, #48]	; 0x30
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f ae91 	beq.w	800f856 <_strtod_l+0x45e>
 800fb34:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb36:	4620      	mov	r0, r4
 800fb38:	f001 febe 	bl	80118b8 <_Bfree>
 800fb3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb40:	9218      	str	r2, [sp, #96]	; 0x60
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dc7c      	bgt.n	800fc40 <_strtod_l+0x848>
 800fb46:	9b04      	ldr	r3, [sp, #16]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	dd08      	ble.n	800fb5e <_strtod_l+0x766>
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb50:	4620      	mov	r0, r4
 800fb52:	f002 f82f 	bl	8011bb4 <__pow5mult>
 800fb56:	4681      	mov	r9, r0
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	f43f ae7c 	beq.w	800f856 <_strtod_l+0x45e>
 800fb5e:	2e00      	cmp	r6, #0
 800fb60:	dd08      	ble.n	800fb74 <_strtod_l+0x77c>
 800fb62:	4649      	mov	r1, r9
 800fb64:	4632      	mov	r2, r6
 800fb66:	4620      	mov	r0, r4
 800fb68:	f002 f872 	bl	8011c50 <__lshift>
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f43f ae71 	beq.w	800f856 <_strtod_l+0x45e>
 800fb74:	9b08      	ldr	r3, [sp, #32]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	dd08      	ble.n	800fb8c <_strtod_l+0x794>
 800fb7a:	4641      	mov	r1, r8
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f002 f866 	bl	8011c50 <__lshift>
 800fb84:	4680      	mov	r8, r0
 800fb86:	2800      	cmp	r0, #0
 800fb88:	f43f ae65 	beq.w	800f856 <_strtod_l+0x45e>
 800fb8c:	464a      	mov	r2, r9
 800fb8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb90:	4620      	mov	r0, r4
 800fb92:	f002 f8cb 	bl	8011d2c <__mdiff>
 800fb96:	4605      	mov	r5, r0
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f43f ae5c 	beq.w	800f856 <_strtod_l+0x45e>
 800fb9e:	68c3      	ldr	r3, [r0, #12]
 800fba0:	930c      	str	r3, [sp, #48]	; 0x30
 800fba2:	2300      	movs	r3, #0
 800fba4:	60c3      	str	r3, [r0, #12]
 800fba6:	4641      	mov	r1, r8
 800fba8:	f002 f8a6 	bl	8011cf8 <__mcmp>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	da63      	bge.n	800fc78 <_strtod_l+0x880>
 800fbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb2:	b9e3      	cbnz	r3, 800fbee <_strtod_l+0x7f6>
 800fbb4:	f1ba 0f00 	cmp.w	sl, #0
 800fbb8:	d119      	bne.n	800fbee <_strtod_l+0x7f6>
 800fbba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbbe:	b9b3      	cbnz	r3, 800fbee <_strtod_l+0x7f6>
 800fbc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fbc4:	0d1b      	lsrs	r3, r3, #20
 800fbc6:	051b      	lsls	r3, r3, #20
 800fbc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fbcc:	d90f      	bls.n	800fbee <_strtod_l+0x7f6>
 800fbce:	696b      	ldr	r3, [r5, #20]
 800fbd0:	b913      	cbnz	r3, 800fbd8 <_strtod_l+0x7e0>
 800fbd2:	692b      	ldr	r3, [r5, #16]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	dd0a      	ble.n	800fbee <_strtod_l+0x7f6>
 800fbd8:	4629      	mov	r1, r5
 800fbda:	2201      	movs	r2, #1
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f002 f837 	bl	8011c50 <__lshift>
 800fbe2:	4641      	mov	r1, r8
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	f002 f887 	bl	8011cf8 <__mcmp>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	dc75      	bgt.n	800fcda <_strtod_l+0x8e2>
 800fbee:	2f00      	cmp	r7, #0
 800fbf0:	d17f      	bne.n	800fcf2 <_strtod_l+0x8fa>
 800fbf2:	e63a      	b.n	800f86a <_strtod_l+0x472>
 800fbf4:	07d6      	lsls	r6, r2, #31
 800fbf6:	d508      	bpl.n	800fc0a <_strtod_l+0x812>
 800fbf8:	ed9d 6b06 	vldr	d6, [sp, #24]
 800fbfc:	ed91 7b00 	vldr	d7, [r1]
 800fc00:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fc04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc08:	2001      	movs	r0, #1
 800fc0a:	1052      	asrs	r2, r2, #1
 800fc0c:	3108      	adds	r1, #8
 800fc0e:	e6db      	b.n	800f9c8 <_strtod_l+0x5d0>
 800fc10:	f04f 31ff 	mov.w	r1, #4294967295
 800fc14:	fa01 f202 	lsl.w	r2, r1, r2
 800fc18:	ea02 0a0a 	and.w	sl, r2, sl
 800fc1c:	e6f3      	b.n	800fa06 <_strtod_l+0x60e>
 800fc1e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fc22:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fc26:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fc2a:	36e2      	adds	r6, #226	; 0xe2
 800fc2c:	fa01 f306 	lsl.w	r3, r1, r6
 800fc30:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc32:	9111      	str	r1, [sp, #68]	; 0x44
 800fc34:	e758      	b.n	800fae8 <_strtod_l+0x6f0>
 800fc36:	2300      	movs	r3, #0
 800fc38:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	9311      	str	r3, [sp, #68]	; 0x44
 800fc3e:	e753      	b.n	800fae8 <_strtod_l+0x6f0>
 800fc40:	461a      	mov	r2, r3
 800fc42:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc44:	4620      	mov	r0, r4
 800fc46:	f002 f803 	bl	8011c50 <__lshift>
 800fc4a:	9018      	str	r0, [sp, #96]	; 0x60
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	f47f af7a 	bne.w	800fb46 <_strtod_l+0x74e>
 800fc52:	e600      	b.n	800f856 <_strtod_l+0x45e>
 800fc54:	f3af 8000 	nop.w
 800fc58:	94a03595 	.word	0x94a03595
 800fc5c:	3fdfffff 	.word	0x3fdfffff
 800fc60:	35afe535 	.word	0x35afe535
 800fc64:	3fe00000 	.word	0x3fe00000
 800fc68:	94a03595 	.word	0x94a03595
 800fc6c:	3fcfffff 	.word	0x3fcfffff
 800fc70:	080127c8 	.word	0x080127c8
 800fc74:	fffffc02 	.word	0xfffffc02
 800fc78:	f8cd b020 	str.w	fp, [sp, #32]
 800fc7c:	f040 8085 	bne.w	800fd8a <_strtod_l+0x992>
 800fc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc86:	b322      	cbz	r2, 800fcd2 <_strtod_l+0x8da>
 800fc88:	4ab7      	ldr	r2, [pc, #732]	; (800ff68 <_strtod_l+0xb70>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d154      	bne.n	800fd38 <_strtod_l+0x940>
 800fc8e:	4651      	mov	r1, sl
 800fc90:	b1e7      	cbz	r7, 800fccc <_strtod_l+0x8d4>
 800fc92:	4bb6      	ldr	r3, [pc, #728]	; (800ff6c <_strtod_l+0xb74>)
 800fc94:	465a      	mov	r2, fp
 800fc96:	4013      	ands	r3, r2
 800fc98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fca0:	d803      	bhi.n	800fcaa <_strtod_l+0x8b2>
 800fca2:	0d1b      	lsrs	r3, r3, #20
 800fca4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fca8:	409a      	lsls	r2, r3
 800fcaa:	4291      	cmp	r1, r2
 800fcac:	d144      	bne.n	800fd38 <_strtod_l+0x940>
 800fcae:	4bb0      	ldr	r3, [pc, #704]	; (800ff70 <_strtod_l+0xb78>)
 800fcb0:	9a08      	ldr	r2, [sp, #32]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d102      	bne.n	800fcbc <_strtod_l+0x8c4>
 800fcb6:	3101      	adds	r1, #1
 800fcb8:	f43f adcd 	beq.w	800f856 <_strtod_l+0x45e>
 800fcbc:	4bab      	ldr	r3, [pc, #684]	; (800ff6c <_strtod_l+0xb74>)
 800fcbe:	9a08      	ldr	r2, [sp, #32]
 800fcc0:	401a      	ands	r2, r3
 800fcc2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800fcc6:	f04f 0a00 	mov.w	sl, #0
 800fcca:	e790      	b.n	800fbee <_strtod_l+0x7f6>
 800fccc:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd0:	e7eb      	b.n	800fcaa <_strtod_l+0x8b2>
 800fcd2:	bb8b      	cbnz	r3, 800fd38 <_strtod_l+0x940>
 800fcd4:	f1ba 0f00 	cmp.w	sl, #0
 800fcd8:	d12e      	bne.n	800fd38 <_strtod_l+0x940>
 800fcda:	465b      	mov	r3, fp
 800fcdc:	4aa3      	ldr	r2, [pc, #652]	; (800ff6c <_strtod_l+0xb74>)
 800fcde:	b30f      	cbz	r7, 800fd24 <_strtod_l+0x92c>
 800fce0:	ea02 010b 	and.w	r1, r2, fp
 800fce4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fce8:	dc1c      	bgt.n	800fd24 <_strtod_l+0x92c>
 800fcea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fcee:	f77f ae48 	ble.w	800f982 <_strtod_l+0x58a>
 800fcf2:	4aa0      	ldr	r2, [pc, #640]	; (800ff74 <_strtod_l+0xb7c>)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800fcfa:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800fcfe:	ec4b ab17 	vmov	d7, sl, fp
 800fd02:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fd06:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd0a:	9b05      	ldr	r3, [sp, #20]
 800fd0c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f47f adaa 	bne.w	800f86a <_strtod_l+0x472>
 800fd16:	9b04      	ldr	r3, [sp, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f47f ada6 	bne.w	800f86a <_strtod_l+0x472>
 800fd1e:	2322      	movs	r3, #34	; 0x22
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	e5a2      	b.n	800f86a <_strtod_l+0x472>
 800fd24:	4013      	ands	r3, r2
 800fd26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fd2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fd2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fd32:	f04f 3aff 	mov.w	sl, #4294967295
 800fd36:	e75a      	b.n	800fbee <_strtod_l+0x7f6>
 800fd38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd3a:	b18b      	cbz	r3, 800fd60 <_strtod_l+0x968>
 800fd3c:	9a08      	ldr	r2, [sp, #32]
 800fd3e:	4213      	tst	r3, r2
 800fd40:	f43f af55 	beq.w	800fbee <_strtod_l+0x7f6>
 800fd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd46:	463a      	mov	r2, r7
 800fd48:	4650      	mov	r0, sl
 800fd4a:	4659      	mov	r1, fp
 800fd4c:	b163      	cbz	r3, 800fd68 <_strtod_l+0x970>
 800fd4e:	f7ff fb39 	bl	800f3c4 <sulp>
 800fd52:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800fd56:	ee37 7b00 	vadd.f64	d7, d7, d0
 800fd5a:	ec5b ab17 	vmov	sl, fp, d7
 800fd5e:	e746      	b.n	800fbee <_strtod_l+0x7f6>
 800fd60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd62:	ea13 0f0a 	tst.w	r3, sl
 800fd66:	e7eb      	b.n	800fd40 <_strtod_l+0x948>
 800fd68:	f7ff fb2c 	bl	800f3c4 <sulp>
 800fd6c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800fd70:	ee37 7b40 	vsub.f64	d7, d7, d0
 800fd74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd80:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd84:	f43f adfd 	beq.w	800f982 <_strtod_l+0x58a>
 800fd88:	e731      	b.n	800fbee <_strtod_l+0x7f6>
 800fd8a:	4641      	mov	r1, r8
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f002 f8f0 	bl	8011f72 <__ratio>
 800fd92:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fd96:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	d869      	bhi.n	800fe74 <_strtod_l+0xa7c>
 800fda0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d045      	beq.n	800fe32 <_strtod_l+0xa3a>
 800fda6:	4b74      	ldr	r3, [pc, #464]	; (800ff78 <_strtod_l+0xb80>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800fdae:	9808      	ldr	r0, [sp, #32]
 800fdb0:	496e      	ldr	r1, [pc, #440]	; (800ff6c <_strtod_l+0xb74>)
 800fdb2:	ea00 0601 	and.w	r6, r0, r1
 800fdb6:	4871      	ldr	r0, [pc, #452]	; (800ff7c <_strtod_l+0xb84>)
 800fdb8:	4286      	cmp	r6, r0
 800fdba:	f040 8089 	bne.w	800fed0 <_strtod_l+0xad8>
 800fdbe:	910f      	str	r1, [sp, #60]	; 0x3c
 800fdc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fdc4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800fdc8:	9908      	ldr	r1, [sp, #32]
 800fdca:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800fdce:	ec4b ab10 	vmov	d0, sl, fp
 800fdd2:	ec43 2b1c 	vmov	d12, r2, r3
 800fdd6:	f002 f807 	bl	8011de8 <__ulp>
 800fdda:	ec4b ab1d 	vmov	d13, sl, fp
 800fdde:	eeac db00 	vfma.f64	d13, d12, d0
 800fde2:	ed8d db08 	vstr	d13, [sp, #32]
 800fde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fdea:	4a65      	ldr	r2, [pc, #404]	; (800ff80 <_strtod_l+0xb88>)
 800fdec:	4019      	ands	r1, r3
 800fdee:	4291      	cmp	r1, r2
 800fdf0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800fdf4:	d948      	bls.n	800fe88 <_strtod_l+0xa90>
 800fdf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdf8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d103      	bne.n	800fe08 <_strtod_l+0xa10>
 800fe00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe02:	3301      	adds	r3, #1
 800fe04:	f43f ad27 	beq.w	800f856 <_strtod_l+0x45e>
 800fe08:	f8df b164 	ldr.w	fp, [pc, #356]	; 800ff70 <_strtod_l+0xb78>
 800fe0c:	f04f 3aff 	mov.w	sl, #4294967295
 800fe10:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe12:	4620      	mov	r0, r4
 800fe14:	f001 fd50 	bl	80118b8 <_Bfree>
 800fe18:	4649      	mov	r1, r9
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f001 fd4c 	bl	80118b8 <_Bfree>
 800fe20:	4641      	mov	r1, r8
 800fe22:	4620      	mov	r0, r4
 800fe24:	f001 fd48 	bl	80118b8 <_Bfree>
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f001 fd44 	bl	80118b8 <_Bfree>
 800fe30:	e60e      	b.n	800fa50 <_strtod_l+0x658>
 800fe32:	f1ba 0f00 	cmp.w	sl, #0
 800fe36:	d113      	bne.n	800fe60 <_strtod_l+0xa68>
 800fe38:	9b08      	ldr	r3, [sp, #32]
 800fe3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe3e:	b9b3      	cbnz	r3, 800fe6e <_strtod_l+0xa76>
 800fe40:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fe44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800fe50:	d401      	bmi.n	800fe56 <_strtod_l+0xa5e>
 800fe52:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fe56:	eeb1 7b48 	vneg.f64	d7, d8
 800fe5a:	ec53 2b17 	vmov	r2, r3, d7
 800fe5e:	e7a6      	b.n	800fdae <_strtod_l+0x9b6>
 800fe60:	f1ba 0f01 	cmp.w	sl, #1
 800fe64:	d103      	bne.n	800fe6e <_strtod_l+0xa76>
 800fe66:	9b08      	ldr	r3, [sp, #32]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f43f ad8a 	beq.w	800f982 <_strtod_l+0x58a>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	4b44      	ldr	r3, [pc, #272]	; (800ff84 <_strtod_l+0xb8c>)
 800fe72:	e79a      	b.n	800fdaa <_strtod_l+0x9b2>
 800fe74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe76:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800fe7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d0e9      	beq.n	800fe56 <_strtod_l+0xa5e>
 800fe82:	ec53 2b18 	vmov	r2, r3, d8
 800fe86:	e792      	b.n	800fdae <_strtod_l+0x9b6>
 800fe88:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fe8c:	2f00      	cmp	r7, #0
 800fe8e:	d1bf      	bne.n	800fe10 <_strtod_l+0xa18>
 800fe90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe94:	0d1b      	lsrs	r3, r3, #20
 800fe96:	051b      	lsls	r3, r3, #20
 800fe98:	429e      	cmp	r6, r3
 800fe9a:	d1b9      	bne.n	800fe10 <_strtod_l+0xa18>
 800fe9c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800fea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fea2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800fea6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800feaa:	b92b      	cbnz	r3, 800feb8 <_strtod_l+0xac0>
 800feac:	f1ba 0f00 	cmp.w	sl, #0
 800feb0:	d102      	bne.n	800feb8 <_strtod_l+0xac0>
 800feb2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800feb6:	b3d2      	cbz	r2, 800ff2e <_strtod_l+0xb36>
 800feb8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800febc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec0:	f53f acd3 	bmi.w	800f86a <_strtod_l+0x472>
 800fec4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	dda0      	ble.n	800fe10 <_strtod_l+0xa18>
 800fece:	e4cc      	b.n	800f86a <_strtod_l+0x472>
 800fed0:	b1ef      	cbz	r7, 800ff0e <_strtod_l+0xb16>
 800fed2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800fed6:	d81a      	bhi.n	800ff0e <_strtod_l+0xb16>
 800fed8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ff60 <_strtod_l+0xb68>
 800fedc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee4:	d810      	bhi.n	800ff08 <_strtod_l+0xb10>
 800fee6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800feea:	ee17 3a90 	vmov	r3, s15
 800feee:	2b00      	cmp	r3, #0
 800fef0:	bf08      	it	eq
 800fef2:	2301      	moveq	r3, #1
 800fef4:	ee07 3a90 	vmov	s15, r3
 800fef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fefa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800fefe:	b99b      	cbnz	r3, 800ff28 <_strtod_l+0xb30>
 800ff00:	eeb1 7b48 	vneg.f64	d7, d8
 800ff04:	ec53 2b17 	vmov	r2, r3, d7
 800ff08:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800ff0c:	1b8b      	subs	r3, r1, r6
 800ff0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ff12:	ec43 2b1c 	vmov	d12, r2, r3
 800ff16:	f001 ff67 	bl	8011de8 <__ulp>
 800ff1a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ff1e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800ff22:	ec5b ab17 	vmov	sl, fp, d7
 800ff26:	e7b1      	b.n	800fe8c <_strtod_l+0xa94>
 800ff28:	ec53 2b18 	vmov	r2, r3, d8
 800ff2c:	e7ec      	b.n	800ff08 <_strtod_l+0xb10>
 800ff2e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	f57f af6b 	bpl.w	800fe10 <_strtod_l+0xa18>
 800ff3a:	e496      	b.n	800f86a <_strtod_l+0x472>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ff40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff44:	6013      	str	r3, [r2, #0]
 800ff46:	f7ff ba9d 	b.w	800f484 <_strtod_l+0x8c>
 800ff4a:	2a65      	cmp	r2, #101	; 0x65
 800ff4c:	f04f 0100 	mov.w	r1, #0
 800ff50:	f43f ab97 	beq.w	800f682 <_strtod_l+0x28a>
 800ff54:	2701      	movs	r7, #1
 800ff56:	460b      	mov	r3, r1
 800ff58:	9704      	str	r7, [sp, #16]
 800ff5a:	f7ff bb0a 	b.w	800f572 <_strtod_l+0x17a>
 800ff5e:	bf00      	nop
 800ff60:	ffc00000 	.word	0xffc00000
 800ff64:	41dfffff 	.word	0x41dfffff
 800ff68:	000fffff 	.word	0x000fffff
 800ff6c:	7ff00000 	.word	0x7ff00000
 800ff70:	7fefffff 	.word	0x7fefffff
 800ff74:	39500000 	.word	0x39500000
 800ff78:	3ff00000 	.word	0x3ff00000
 800ff7c:	7fe00000 	.word	0x7fe00000
 800ff80:	7c9fffff 	.word	0x7c9fffff
 800ff84:	bff00000 	.word	0xbff00000

0800ff88 <_strtod_r>:
 800ff88:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <_strtod_r+0x18>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	b410      	push	{r4}
 800ff8e:	6a1b      	ldr	r3, [r3, #32]
 800ff90:	4c04      	ldr	r4, [pc, #16]	; (800ffa4 <_strtod_r+0x1c>)
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	bf08      	it	eq
 800ff96:	4623      	moveq	r3, r4
 800ff98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff9c:	f7ff ba2c 	b.w	800f3f8 <_strtod_l>
 800ffa0:	20000370 	.word	0x20000370
 800ffa4:	200003d4 	.word	0x200003d4

0800ffa8 <_strtol_l.isra.0>:
 800ffa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffac:	4680      	mov	r8, r0
 800ffae:	4689      	mov	r9, r1
 800ffb0:	4692      	mov	sl, r2
 800ffb2:	461e      	mov	r6, r3
 800ffb4:	460f      	mov	r7, r1
 800ffb6:	463d      	mov	r5, r7
 800ffb8:	9808      	ldr	r0, [sp, #32]
 800ffba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffbe:	f001 fbbb 	bl	8011738 <__locale_ctype_ptr_l>
 800ffc2:	4420      	add	r0, r4
 800ffc4:	7843      	ldrb	r3, [r0, #1]
 800ffc6:	f013 0308 	ands.w	r3, r3, #8
 800ffca:	d132      	bne.n	8010032 <_strtol_l.isra.0+0x8a>
 800ffcc:	2c2d      	cmp	r4, #45	; 0x2d
 800ffce:	d132      	bne.n	8010036 <_strtol_l.isra.0+0x8e>
 800ffd0:	787c      	ldrb	r4, [r7, #1]
 800ffd2:	1cbd      	adds	r5, r7, #2
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	d05d      	beq.n	8010096 <_strtol_l.isra.0+0xee>
 800ffda:	2e10      	cmp	r6, #16
 800ffdc:	d109      	bne.n	800fff2 <_strtol_l.isra.0+0x4a>
 800ffde:	2c30      	cmp	r4, #48	; 0x30
 800ffe0:	d107      	bne.n	800fff2 <_strtol_l.isra.0+0x4a>
 800ffe2:	782b      	ldrb	r3, [r5, #0]
 800ffe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ffe8:	2b58      	cmp	r3, #88	; 0x58
 800ffea:	d14f      	bne.n	801008c <_strtol_l.isra.0+0xe4>
 800ffec:	786c      	ldrb	r4, [r5, #1]
 800ffee:	2610      	movs	r6, #16
 800fff0:	3502      	adds	r5, #2
 800fff2:	2a00      	cmp	r2, #0
 800fff4:	bf14      	ite	ne
 800fff6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800fffa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800fffe:	2700      	movs	r7, #0
 8010000:	fbb1 fcf6 	udiv	ip, r1, r6
 8010004:	4638      	mov	r0, r7
 8010006:	fb06 1e1c 	mls	lr, r6, ip, r1
 801000a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801000e:	2b09      	cmp	r3, #9
 8010010:	d817      	bhi.n	8010042 <_strtol_l.isra.0+0x9a>
 8010012:	461c      	mov	r4, r3
 8010014:	42a6      	cmp	r6, r4
 8010016:	dd23      	ble.n	8010060 <_strtol_l.isra.0+0xb8>
 8010018:	1c7b      	adds	r3, r7, #1
 801001a:	d007      	beq.n	801002c <_strtol_l.isra.0+0x84>
 801001c:	4584      	cmp	ip, r0
 801001e:	d31c      	bcc.n	801005a <_strtol_l.isra.0+0xb2>
 8010020:	d101      	bne.n	8010026 <_strtol_l.isra.0+0x7e>
 8010022:	45a6      	cmp	lr, r4
 8010024:	db19      	blt.n	801005a <_strtol_l.isra.0+0xb2>
 8010026:	fb00 4006 	mla	r0, r0, r6, r4
 801002a:	2701      	movs	r7, #1
 801002c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010030:	e7eb      	b.n	801000a <_strtol_l.isra.0+0x62>
 8010032:	462f      	mov	r7, r5
 8010034:	e7bf      	b.n	800ffb6 <_strtol_l.isra.0+0xe>
 8010036:	2c2b      	cmp	r4, #43	; 0x2b
 8010038:	bf04      	itt	eq
 801003a:	1cbd      	addeq	r5, r7, #2
 801003c:	787c      	ldrbeq	r4, [r7, #1]
 801003e:	461a      	mov	r2, r3
 8010040:	e7c9      	b.n	800ffd6 <_strtol_l.isra.0+0x2e>
 8010042:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010046:	2b19      	cmp	r3, #25
 8010048:	d801      	bhi.n	801004e <_strtol_l.isra.0+0xa6>
 801004a:	3c37      	subs	r4, #55	; 0x37
 801004c:	e7e2      	b.n	8010014 <_strtol_l.isra.0+0x6c>
 801004e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010052:	2b19      	cmp	r3, #25
 8010054:	d804      	bhi.n	8010060 <_strtol_l.isra.0+0xb8>
 8010056:	3c57      	subs	r4, #87	; 0x57
 8010058:	e7dc      	b.n	8010014 <_strtol_l.isra.0+0x6c>
 801005a:	f04f 37ff 	mov.w	r7, #4294967295
 801005e:	e7e5      	b.n	801002c <_strtol_l.isra.0+0x84>
 8010060:	1c7b      	adds	r3, r7, #1
 8010062:	d108      	bne.n	8010076 <_strtol_l.isra.0+0xce>
 8010064:	2322      	movs	r3, #34	; 0x22
 8010066:	f8c8 3000 	str.w	r3, [r8]
 801006a:	4608      	mov	r0, r1
 801006c:	f1ba 0f00 	cmp.w	sl, #0
 8010070:	d107      	bne.n	8010082 <_strtol_l.isra.0+0xda>
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	b102      	cbz	r2, 801007a <_strtol_l.isra.0+0xd2>
 8010078:	4240      	negs	r0, r0
 801007a:	f1ba 0f00 	cmp.w	sl, #0
 801007e:	d0f8      	beq.n	8010072 <_strtol_l.isra.0+0xca>
 8010080:	b10f      	cbz	r7, 8010086 <_strtol_l.isra.0+0xde>
 8010082:	f105 39ff 	add.w	r9, r5, #4294967295
 8010086:	f8ca 9000 	str.w	r9, [sl]
 801008a:	e7f2      	b.n	8010072 <_strtol_l.isra.0+0xca>
 801008c:	2430      	movs	r4, #48	; 0x30
 801008e:	2e00      	cmp	r6, #0
 8010090:	d1af      	bne.n	800fff2 <_strtol_l.isra.0+0x4a>
 8010092:	2608      	movs	r6, #8
 8010094:	e7ad      	b.n	800fff2 <_strtol_l.isra.0+0x4a>
 8010096:	2c30      	cmp	r4, #48	; 0x30
 8010098:	d0a3      	beq.n	800ffe2 <_strtol_l.isra.0+0x3a>
 801009a:	260a      	movs	r6, #10
 801009c:	e7a9      	b.n	800fff2 <_strtol_l.isra.0+0x4a>
	...

080100a0 <_strtol_r>:
 80100a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100a2:	4c06      	ldr	r4, [pc, #24]	; (80100bc <_strtol_r+0x1c>)
 80100a4:	4d06      	ldr	r5, [pc, #24]	; (80100c0 <_strtol_r+0x20>)
 80100a6:	6824      	ldr	r4, [r4, #0]
 80100a8:	6a24      	ldr	r4, [r4, #32]
 80100aa:	2c00      	cmp	r4, #0
 80100ac:	bf08      	it	eq
 80100ae:	462c      	moveq	r4, r5
 80100b0:	9400      	str	r4, [sp, #0]
 80100b2:	f7ff ff79 	bl	800ffa8 <_strtol_l.isra.0>
 80100b6:	b003      	add	sp, #12
 80100b8:	bd30      	pop	{r4, r5, pc}
 80100ba:	bf00      	nop
 80100bc:	20000370 	.word	0x20000370
 80100c0:	200003d4 	.word	0x200003d4

080100c4 <__swbuf_r>:
 80100c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c6:	460e      	mov	r6, r1
 80100c8:	4614      	mov	r4, r2
 80100ca:	4605      	mov	r5, r0
 80100cc:	b118      	cbz	r0, 80100d6 <__swbuf_r+0x12>
 80100ce:	6983      	ldr	r3, [r0, #24]
 80100d0:	b90b      	cbnz	r3, 80100d6 <__swbuf_r+0x12>
 80100d2:	f000 ff81 	bl	8010fd8 <__sinit>
 80100d6:	4b21      	ldr	r3, [pc, #132]	; (801015c <__swbuf_r+0x98>)
 80100d8:	429c      	cmp	r4, r3
 80100da:	d12a      	bne.n	8010132 <__swbuf_r+0x6e>
 80100dc:	686c      	ldr	r4, [r5, #4]
 80100de:	69a3      	ldr	r3, [r4, #24]
 80100e0:	60a3      	str	r3, [r4, #8]
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	071a      	lsls	r2, r3, #28
 80100e6:	d52e      	bpl.n	8010146 <__swbuf_r+0x82>
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	b363      	cbz	r3, 8010146 <__swbuf_r+0x82>
 80100ec:	6923      	ldr	r3, [r4, #16]
 80100ee:	6820      	ldr	r0, [r4, #0]
 80100f0:	1ac0      	subs	r0, r0, r3
 80100f2:	6963      	ldr	r3, [r4, #20]
 80100f4:	b2f6      	uxtb	r6, r6
 80100f6:	4283      	cmp	r3, r0
 80100f8:	4637      	mov	r7, r6
 80100fa:	dc04      	bgt.n	8010106 <__swbuf_r+0x42>
 80100fc:	4621      	mov	r1, r4
 80100fe:	4628      	mov	r0, r5
 8010100:	f000 ff00 	bl	8010f04 <_fflush_r>
 8010104:	bb28      	cbnz	r0, 8010152 <__swbuf_r+0x8e>
 8010106:	68a3      	ldr	r3, [r4, #8]
 8010108:	3b01      	subs	r3, #1
 801010a:	60a3      	str	r3, [r4, #8]
 801010c:	6823      	ldr	r3, [r4, #0]
 801010e:	1c5a      	adds	r2, r3, #1
 8010110:	6022      	str	r2, [r4, #0]
 8010112:	701e      	strb	r6, [r3, #0]
 8010114:	6963      	ldr	r3, [r4, #20]
 8010116:	3001      	adds	r0, #1
 8010118:	4283      	cmp	r3, r0
 801011a:	d004      	beq.n	8010126 <__swbuf_r+0x62>
 801011c:	89a3      	ldrh	r3, [r4, #12]
 801011e:	07db      	lsls	r3, r3, #31
 8010120:	d519      	bpl.n	8010156 <__swbuf_r+0x92>
 8010122:	2e0a      	cmp	r6, #10
 8010124:	d117      	bne.n	8010156 <__swbuf_r+0x92>
 8010126:	4621      	mov	r1, r4
 8010128:	4628      	mov	r0, r5
 801012a:	f000 feeb 	bl	8010f04 <_fflush_r>
 801012e:	b190      	cbz	r0, 8010156 <__swbuf_r+0x92>
 8010130:	e00f      	b.n	8010152 <__swbuf_r+0x8e>
 8010132:	4b0b      	ldr	r3, [pc, #44]	; (8010160 <__swbuf_r+0x9c>)
 8010134:	429c      	cmp	r4, r3
 8010136:	d101      	bne.n	801013c <__swbuf_r+0x78>
 8010138:	68ac      	ldr	r4, [r5, #8]
 801013a:	e7d0      	b.n	80100de <__swbuf_r+0x1a>
 801013c:	4b09      	ldr	r3, [pc, #36]	; (8010164 <__swbuf_r+0xa0>)
 801013e:	429c      	cmp	r4, r3
 8010140:	bf08      	it	eq
 8010142:	68ec      	ldreq	r4, [r5, #12]
 8010144:	e7cb      	b.n	80100de <__swbuf_r+0x1a>
 8010146:	4621      	mov	r1, r4
 8010148:	4628      	mov	r0, r5
 801014a:	f000 f80d 	bl	8010168 <__swsetup_r>
 801014e:	2800      	cmp	r0, #0
 8010150:	d0cc      	beq.n	80100ec <__swbuf_r+0x28>
 8010152:	f04f 37ff 	mov.w	r7, #4294967295
 8010156:	4638      	mov	r0, r7
 8010158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801015a:	bf00      	nop
 801015c:	08012820 	.word	0x08012820
 8010160:	08012840 	.word	0x08012840
 8010164:	08012800 	.word	0x08012800

08010168 <__swsetup_r>:
 8010168:	4b32      	ldr	r3, [pc, #200]	; (8010234 <__swsetup_r+0xcc>)
 801016a:	b570      	push	{r4, r5, r6, lr}
 801016c:	681d      	ldr	r5, [r3, #0]
 801016e:	4606      	mov	r6, r0
 8010170:	460c      	mov	r4, r1
 8010172:	b125      	cbz	r5, 801017e <__swsetup_r+0x16>
 8010174:	69ab      	ldr	r3, [r5, #24]
 8010176:	b913      	cbnz	r3, 801017e <__swsetup_r+0x16>
 8010178:	4628      	mov	r0, r5
 801017a:	f000 ff2d 	bl	8010fd8 <__sinit>
 801017e:	4b2e      	ldr	r3, [pc, #184]	; (8010238 <__swsetup_r+0xd0>)
 8010180:	429c      	cmp	r4, r3
 8010182:	d10f      	bne.n	80101a4 <__swsetup_r+0x3c>
 8010184:	686c      	ldr	r4, [r5, #4]
 8010186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801018a:	b29a      	uxth	r2, r3
 801018c:	0715      	lsls	r5, r2, #28
 801018e:	d42c      	bmi.n	80101ea <__swsetup_r+0x82>
 8010190:	06d0      	lsls	r0, r2, #27
 8010192:	d411      	bmi.n	80101b8 <__swsetup_r+0x50>
 8010194:	2209      	movs	r2, #9
 8010196:	6032      	str	r2, [r6, #0]
 8010198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	f04f 30ff 	mov.w	r0, #4294967295
 80101a2:	e03e      	b.n	8010222 <__swsetup_r+0xba>
 80101a4:	4b25      	ldr	r3, [pc, #148]	; (801023c <__swsetup_r+0xd4>)
 80101a6:	429c      	cmp	r4, r3
 80101a8:	d101      	bne.n	80101ae <__swsetup_r+0x46>
 80101aa:	68ac      	ldr	r4, [r5, #8]
 80101ac:	e7eb      	b.n	8010186 <__swsetup_r+0x1e>
 80101ae:	4b24      	ldr	r3, [pc, #144]	; (8010240 <__swsetup_r+0xd8>)
 80101b0:	429c      	cmp	r4, r3
 80101b2:	bf08      	it	eq
 80101b4:	68ec      	ldreq	r4, [r5, #12]
 80101b6:	e7e6      	b.n	8010186 <__swsetup_r+0x1e>
 80101b8:	0751      	lsls	r1, r2, #29
 80101ba:	d512      	bpl.n	80101e2 <__swsetup_r+0x7a>
 80101bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101be:	b141      	cbz	r1, 80101d2 <__swsetup_r+0x6a>
 80101c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101c4:	4299      	cmp	r1, r3
 80101c6:	d002      	beq.n	80101ce <__swsetup_r+0x66>
 80101c8:	4630      	mov	r0, r6
 80101ca:	f7fe f961 	bl	800e490 <_free_r>
 80101ce:	2300      	movs	r3, #0
 80101d0:	6363      	str	r3, [r4, #52]	; 0x34
 80101d2:	89a3      	ldrh	r3, [r4, #12]
 80101d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101d8:	81a3      	strh	r3, [r4, #12]
 80101da:	2300      	movs	r3, #0
 80101dc:	6063      	str	r3, [r4, #4]
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	f043 0308 	orr.w	r3, r3, #8
 80101e8:	81a3      	strh	r3, [r4, #12]
 80101ea:	6923      	ldr	r3, [r4, #16]
 80101ec:	b94b      	cbnz	r3, 8010202 <__swsetup_r+0x9a>
 80101ee:	89a3      	ldrh	r3, [r4, #12]
 80101f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101f8:	d003      	beq.n	8010202 <__swsetup_r+0x9a>
 80101fa:	4621      	mov	r1, r4
 80101fc:	4630      	mov	r0, r6
 80101fe:	f001 fad3 	bl	80117a8 <__smakebuf_r>
 8010202:	89a2      	ldrh	r2, [r4, #12]
 8010204:	f012 0301 	ands.w	r3, r2, #1
 8010208:	d00c      	beq.n	8010224 <__swsetup_r+0xbc>
 801020a:	2300      	movs	r3, #0
 801020c:	60a3      	str	r3, [r4, #8]
 801020e:	6963      	ldr	r3, [r4, #20]
 8010210:	425b      	negs	r3, r3
 8010212:	61a3      	str	r3, [r4, #24]
 8010214:	6923      	ldr	r3, [r4, #16]
 8010216:	b953      	cbnz	r3, 801022e <__swsetup_r+0xc6>
 8010218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801021c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010220:	d1ba      	bne.n	8010198 <__swsetup_r+0x30>
 8010222:	bd70      	pop	{r4, r5, r6, pc}
 8010224:	0792      	lsls	r2, r2, #30
 8010226:	bf58      	it	pl
 8010228:	6963      	ldrpl	r3, [r4, #20]
 801022a:	60a3      	str	r3, [r4, #8]
 801022c:	e7f2      	b.n	8010214 <__swsetup_r+0xac>
 801022e:	2000      	movs	r0, #0
 8010230:	e7f7      	b.n	8010222 <__swsetup_r+0xba>
 8010232:	bf00      	nop
 8010234:	20000370 	.word	0x20000370
 8010238:	08012820 	.word	0x08012820
 801023c:	08012840 	.word	0x08012840
 8010240:	08012800 	.word	0x08012800

08010244 <quorem>:
 8010244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010248:	6903      	ldr	r3, [r0, #16]
 801024a:	690c      	ldr	r4, [r1, #16]
 801024c:	42a3      	cmp	r3, r4
 801024e:	4680      	mov	r8, r0
 8010250:	f2c0 8082 	blt.w	8010358 <quorem+0x114>
 8010254:	3c01      	subs	r4, #1
 8010256:	f101 0714 	add.w	r7, r1, #20
 801025a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801025e:	f100 0614 	add.w	r6, r0, #20
 8010262:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010266:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801026a:	eb06 030c 	add.w	r3, r6, ip
 801026e:	3501      	adds	r5, #1
 8010270:	eb07 090c 	add.w	r9, r7, ip
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	fbb0 f5f5 	udiv	r5, r0, r5
 801027a:	b395      	cbz	r5, 80102e2 <quorem+0x9e>
 801027c:	f04f 0a00 	mov.w	sl, #0
 8010280:	4638      	mov	r0, r7
 8010282:	46b6      	mov	lr, r6
 8010284:	46d3      	mov	fp, sl
 8010286:	f850 2b04 	ldr.w	r2, [r0], #4
 801028a:	b293      	uxth	r3, r2
 801028c:	fb05 a303 	mla	r3, r5, r3, sl
 8010290:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010294:	b29b      	uxth	r3, r3
 8010296:	ebab 0303 	sub.w	r3, fp, r3
 801029a:	0c12      	lsrs	r2, r2, #16
 801029c:	f8de b000 	ldr.w	fp, [lr]
 80102a0:	fb05 a202 	mla	r2, r5, r2, sl
 80102a4:	fa13 f38b 	uxtah	r3, r3, fp
 80102a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80102ac:	fa1f fb82 	uxth.w	fp, r2
 80102b0:	f8de 2000 	ldr.w	r2, [lr]
 80102b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80102b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102bc:	b29b      	uxth	r3, r3
 80102be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102c2:	4581      	cmp	r9, r0
 80102c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80102c8:	f84e 3b04 	str.w	r3, [lr], #4
 80102cc:	d2db      	bcs.n	8010286 <quorem+0x42>
 80102ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80102d2:	b933      	cbnz	r3, 80102e2 <quorem+0x9e>
 80102d4:	9b01      	ldr	r3, [sp, #4]
 80102d6:	3b04      	subs	r3, #4
 80102d8:	429e      	cmp	r6, r3
 80102da:	461a      	mov	r2, r3
 80102dc:	d330      	bcc.n	8010340 <quorem+0xfc>
 80102de:	f8c8 4010 	str.w	r4, [r8, #16]
 80102e2:	4640      	mov	r0, r8
 80102e4:	f001 fd08 	bl	8011cf8 <__mcmp>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	db25      	blt.n	8010338 <quorem+0xf4>
 80102ec:	3501      	adds	r5, #1
 80102ee:	4630      	mov	r0, r6
 80102f0:	f04f 0c00 	mov.w	ip, #0
 80102f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80102f8:	f8d0 e000 	ldr.w	lr, [r0]
 80102fc:	b293      	uxth	r3, r2
 80102fe:	ebac 0303 	sub.w	r3, ip, r3
 8010302:	0c12      	lsrs	r2, r2, #16
 8010304:	fa13 f38e 	uxtah	r3, r3, lr
 8010308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801030c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010310:	b29b      	uxth	r3, r3
 8010312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010316:	45b9      	cmp	r9, r7
 8010318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801031c:	f840 3b04 	str.w	r3, [r0], #4
 8010320:	d2e8      	bcs.n	80102f4 <quorem+0xb0>
 8010322:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010326:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801032a:	b92a      	cbnz	r2, 8010338 <quorem+0xf4>
 801032c:	3b04      	subs	r3, #4
 801032e:	429e      	cmp	r6, r3
 8010330:	461a      	mov	r2, r3
 8010332:	d30b      	bcc.n	801034c <quorem+0x108>
 8010334:	f8c8 4010 	str.w	r4, [r8, #16]
 8010338:	4628      	mov	r0, r5
 801033a:	b003      	add	sp, #12
 801033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010340:	6812      	ldr	r2, [r2, #0]
 8010342:	3b04      	subs	r3, #4
 8010344:	2a00      	cmp	r2, #0
 8010346:	d1ca      	bne.n	80102de <quorem+0x9a>
 8010348:	3c01      	subs	r4, #1
 801034a:	e7c5      	b.n	80102d8 <quorem+0x94>
 801034c:	6812      	ldr	r2, [r2, #0]
 801034e:	3b04      	subs	r3, #4
 8010350:	2a00      	cmp	r2, #0
 8010352:	d1ef      	bne.n	8010334 <quorem+0xf0>
 8010354:	3c01      	subs	r4, #1
 8010356:	e7ea      	b.n	801032e <quorem+0xea>
 8010358:	2000      	movs	r0, #0
 801035a:	e7ee      	b.n	801033a <quorem+0xf6>
 801035c:	0000      	movs	r0, r0
	...

08010360 <_dtoa_r>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	ec57 6b10 	vmov	r6, r7, d0
 8010368:	b095      	sub	sp, #84	; 0x54
 801036a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801036c:	9108      	str	r1, [sp, #32]
 801036e:	4604      	mov	r4, r0
 8010370:	920a      	str	r2, [sp, #40]	; 0x28
 8010372:	9311      	str	r3, [sp, #68]	; 0x44
 8010374:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8010378:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801037c:	b93d      	cbnz	r5, 801038e <_dtoa_r+0x2e>
 801037e:	2010      	movs	r0, #16
 8010380:	f7fe f85c 	bl	800e43c <malloc>
 8010384:	6260      	str	r0, [r4, #36]	; 0x24
 8010386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801038a:	6005      	str	r5, [r0, #0]
 801038c:	60c5      	str	r5, [r0, #12]
 801038e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010390:	6819      	ldr	r1, [r3, #0]
 8010392:	b151      	cbz	r1, 80103aa <_dtoa_r+0x4a>
 8010394:	685a      	ldr	r2, [r3, #4]
 8010396:	604a      	str	r2, [r1, #4]
 8010398:	2301      	movs	r3, #1
 801039a:	4093      	lsls	r3, r2
 801039c:	608b      	str	r3, [r1, #8]
 801039e:	4620      	mov	r0, r4
 80103a0:	f001 fa8a 	bl	80118b8 <_Bfree>
 80103a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103a6:	2200      	movs	r2, #0
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	1e3b      	subs	r3, r7, #0
 80103ac:	bfb9      	ittee	lt
 80103ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103b2:	9303      	strlt	r3, [sp, #12]
 80103b4:	2300      	movge	r3, #0
 80103b6:	f8c8 3000 	strge.w	r3, [r8]
 80103ba:	9d03      	ldr	r5, [sp, #12]
 80103bc:	4bac      	ldr	r3, [pc, #688]	; (8010670 <_dtoa_r+0x310>)
 80103be:	bfbc      	itt	lt
 80103c0:	2201      	movlt	r2, #1
 80103c2:	f8c8 2000 	strlt.w	r2, [r8]
 80103c6:	43ab      	bics	r3, r5
 80103c8:	d11b      	bne.n	8010402 <_dtoa_r+0xa2>
 80103ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80103cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80103d0:	6013      	str	r3, [r2, #0]
 80103d2:	9b02      	ldr	r3, [sp, #8]
 80103d4:	b923      	cbnz	r3, 80103e0 <_dtoa_r+0x80>
 80103d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80103da:	2d00      	cmp	r5, #0
 80103dc:	f000 84dd 	beq.w	8010d9a <_dtoa_r+0xa3a>
 80103e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80103e2:	b953      	cbnz	r3, 80103fa <_dtoa_r+0x9a>
 80103e4:	4ba3      	ldr	r3, [pc, #652]	; (8010674 <_dtoa_r+0x314>)
 80103e6:	e020      	b.n	801042a <_dtoa_r+0xca>
 80103e8:	4ba3      	ldr	r3, [pc, #652]	; (8010678 <_dtoa_r+0x318>)
 80103ea:	9304      	str	r3, [sp, #16]
 80103ec:	3308      	adds	r3, #8
 80103ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80103f0:	6013      	str	r3, [r2, #0]
 80103f2:	9804      	ldr	r0, [sp, #16]
 80103f4:	b015      	add	sp, #84	; 0x54
 80103f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fa:	4b9e      	ldr	r3, [pc, #632]	; (8010674 <_dtoa_r+0x314>)
 80103fc:	9304      	str	r3, [sp, #16]
 80103fe:	3303      	adds	r3, #3
 8010400:	e7f5      	b.n	80103ee <_dtoa_r+0x8e>
 8010402:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010406:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801040a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010412:	d10c      	bne.n	801042e <_dtoa_r+0xce>
 8010414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010416:	2301      	movs	r3, #1
 8010418:	6013      	str	r3, [r2, #0]
 801041a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801041c:	2b00      	cmp	r3, #0
 801041e:	f000 84b9 	beq.w	8010d94 <_dtoa_r+0xa34>
 8010422:	4b96      	ldr	r3, [pc, #600]	; (801067c <_dtoa_r+0x31c>)
 8010424:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	3b01      	subs	r3, #1
 801042a:	9304      	str	r3, [sp, #16]
 801042c:	e7e1      	b.n	80103f2 <_dtoa_r+0x92>
 801042e:	a913      	add	r1, sp, #76	; 0x4c
 8010430:	aa12      	add	r2, sp, #72	; 0x48
 8010432:	ed9d 0b04 	vldr	d0, [sp, #16]
 8010436:	4620      	mov	r0, r4
 8010438:	f001 fd4c 	bl	8011ed4 <__d2b>
 801043c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8010440:	9001      	str	r0, [sp, #4]
 8010442:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010444:	2e00      	cmp	r6, #0
 8010446:	d046      	beq.n	80104d6 <_dtoa_r+0x176>
 8010448:	9805      	ldr	r0, [sp, #20]
 801044a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801044e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010452:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8010456:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801045a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801045e:	2700      	movs	r7, #0
 8010460:	ee07 aa90 	vmov	s15, sl
 8010464:	ec43 2b16 	vmov	d6, r2, r3
 8010468:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801046c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8010658 <_dtoa_r+0x2f8>
 8010470:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010474:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010478:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8010660 <_dtoa_r+0x300>
 801047c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010480:	eeb0 7b46 	vmov.f64	d7, d6
 8010484:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8010668 <_dtoa_r+0x308>
 8010488:	eea5 7b06 	vfma.f64	d7, d5, d6
 801048c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010490:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010498:	ee16 ba90 	vmov	fp, s13
 801049c:	d508      	bpl.n	80104b0 <_dtoa_r+0x150>
 801049e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80104a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	bf18      	it	ne
 80104ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80104b0:	f1bb 0f16 	cmp.w	fp, #22
 80104b4:	d834      	bhi.n	8010520 <_dtoa_r+0x1c0>
 80104b6:	4b72      	ldr	r3, [pc, #456]	; (8010680 <_dtoa_r+0x320>)
 80104b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80104bc:	ed93 7b00 	vldr	d7, [r3]
 80104c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104cc:	dd01      	ble.n	80104d2 <_dtoa_r+0x172>
 80104ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104d2:	2300      	movs	r3, #0
 80104d4:	e025      	b.n	8010522 <_dtoa_r+0x1c2>
 80104d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104d8:	eb01 0a03 	add.w	sl, r1, r3
 80104dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80104e0:	2b20      	cmp	r3, #32
 80104e2:	dd17      	ble.n	8010514 <_dtoa_r+0x1b4>
 80104e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80104e8:	9a02      	ldr	r2, [sp, #8]
 80104ea:	409d      	lsls	r5, r3
 80104ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80104f0:	fa22 f303 	lsr.w	r3, r2, r3
 80104f4:	432b      	orrs	r3, r5
 80104f6:	ee07 3a90 	vmov	s15, r3
 80104fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80104fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010502:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010506:	9805      	ldr	r0, [sp, #20]
 8010508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801050c:	2701      	movs	r7, #1
 801050e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8010512:	e7a5      	b.n	8010460 <_dtoa_r+0x100>
 8010514:	9a02      	ldr	r2, [sp, #8]
 8010516:	f1c3 0320 	rsb	r3, r3, #32
 801051a:	fa02 f303 	lsl.w	r3, r2, r3
 801051e:	e7ea      	b.n	80104f6 <_dtoa_r+0x196>
 8010520:	2301      	movs	r3, #1
 8010522:	eba1 0a0a 	sub.w	sl, r1, sl
 8010526:	9310      	str	r3, [sp, #64]	; 0x40
 8010528:	f1ba 0301 	subs.w	r3, sl, #1
 801052c:	9307      	str	r3, [sp, #28]
 801052e:	bf43      	ittte	mi
 8010530:	2300      	movmi	r3, #0
 8010532:	f1ca 0a01 	rsbmi	sl, sl, #1
 8010536:	9307      	strmi	r3, [sp, #28]
 8010538:	f04f 0a00 	movpl.w	sl, #0
 801053c:	f1bb 0f00 	cmp.w	fp, #0
 8010540:	db19      	blt.n	8010576 <_dtoa_r+0x216>
 8010542:	9b07      	ldr	r3, [sp, #28]
 8010544:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010548:	445b      	add	r3, fp
 801054a:	9307      	str	r3, [sp, #28]
 801054c:	f04f 0800 	mov.w	r8, #0
 8010550:	9b08      	ldr	r3, [sp, #32]
 8010552:	2b09      	cmp	r3, #9
 8010554:	d866      	bhi.n	8010624 <_dtoa_r+0x2c4>
 8010556:	2b05      	cmp	r3, #5
 8010558:	bfc4      	itt	gt
 801055a:	3b04      	subgt	r3, #4
 801055c:	9308      	strgt	r3, [sp, #32]
 801055e:	9b08      	ldr	r3, [sp, #32]
 8010560:	f1a3 0302 	sub.w	r3, r3, #2
 8010564:	bfcc      	ite	gt
 8010566:	2500      	movgt	r5, #0
 8010568:	2501      	movle	r5, #1
 801056a:	2b03      	cmp	r3, #3
 801056c:	d866      	bhi.n	801063c <_dtoa_r+0x2dc>
 801056e:	e8df f003 	tbb	[pc, r3]
 8010572:	5755      	.short	0x5755
 8010574:	4909      	.short	0x4909
 8010576:	2300      	movs	r3, #0
 8010578:	ebaa 0a0b 	sub.w	sl, sl, fp
 801057c:	f1cb 0800 	rsb	r8, fp, #0
 8010580:	930b      	str	r3, [sp, #44]	; 0x2c
 8010582:	e7e5      	b.n	8010550 <_dtoa_r+0x1f0>
 8010584:	2301      	movs	r3, #1
 8010586:	9309      	str	r3, [sp, #36]	; 0x24
 8010588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801058a:	2b00      	cmp	r3, #0
 801058c:	dd59      	ble.n	8010642 <_dtoa_r+0x2e2>
 801058e:	9306      	str	r3, [sp, #24]
 8010590:	4699      	mov	r9, r3
 8010592:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010594:	2200      	movs	r2, #0
 8010596:	6072      	str	r2, [r6, #4]
 8010598:	2204      	movs	r2, #4
 801059a:	f102 0014 	add.w	r0, r2, #20
 801059e:	4298      	cmp	r0, r3
 80105a0:	6871      	ldr	r1, [r6, #4]
 80105a2:	d953      	bls.n	801064c <_dtoa_r+0x2ec>
 80105a4:	4620      	mov	r0, r4
 80105a6:	f001 f953 	bl	8011850 <_Balloc>
 80105aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105ac:	6030      	str	r0, [r6, #0]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	9304      	str	r3, [sp, #16]
 80105b2:	f1b9 0f0e 	cmp.w	r9, #14
 80105b6:	f200 80c2 	bhi.w	801073e <_dtoa_r+0x3de>
 80105ba:	2d00      	cmp	r5, #0
 80105bc:	f000 80bf 	beq.w	801073e <_dtoa_r+0x3de>
 80105c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105c4:	f1bb 0f00 	cmp.w	fp, #0
 80105c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80105cc:	f340 80e6 	ble.w	801079c <_dtoa_r+0x43c>
 80105d0:	4a2b      	ldr	r2, [pc, #172]	; (8010680 <_dtoa_r+0x320>)
 80105d2:	f00b 030f 	and.w	r3, fp, #15
 80105d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80105da:	ed93 7b00 	vldr	d7, [r3]
 80105de:	ea4f 132b 	mov.w	r3, fp, asr #4
 80105e2:	06da      	lsls	r2, r3, #27
 80105e4:	f140 80d8 	bpl.w	8010798 <_dtoa_r+0x438>
 80105e8:	4a26      	ldr	r2, [pc, #152]	; (8010684 <_dtoa_r+0x324>)
 80105ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80105ee:	ed92 6b08 	vldr	d6, [r2, #32]
 80105f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80105f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80105fa:	f003 030f 	and.w	r3, r3, #15
 80105fe:	2203      	movs	r2, #3
 8010600:	4920      	ldr	r1, [pc, #128]	; (8010684 <_dtoa_r+0x324>)
 8010602:	e04a      	b.n	801069a <_dtoa_r+0x33a>
 8010604:	2301      	movs	r3, #1
 8010606:	9309      	str	r3, [sp, #36]	; 0x24
 8010608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801060a:	445b      	add	r3, fp
 801060c:	f103 0901 	add.w	r9, r3, #1
 8010610:	9306      	str	r3, [sp, #24]
 8010612:	464b      	mov	r3, r9
 8010614:	2b01      	cmp	r3, #1
 8010616:	bfb8      	it	lt
 8010618:	2301      	movlt	r3, #1
 801061a:	e7ba      	b.n	8010592 <_dtoa_r+0x232>
 801061c:	2300      	movs	r3, #0
 801061e:	e7b2      	b.n	8010586 <_dtoa_r+0x226>
 8010620:	2300      	movs	r3, #0
 8010622:	e7f0      	b.n	8010606 <_dtoa_r+0x2a6>
 8010624:	2501      	movs	r5, #1
 8010626:	2300      	movs	r3, #0
 8010628:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801062c:	f04f 33ff 	mov.w	r3, #4294967295
 8010630:	9306      	str	r3, [sp, #24]
 8010632:	4699      	mov	r9, r3
 8010634:	2200      	movs	r2, #0
 8010636:	2312      	movs	r3, #18
 8010638:	920a      	str	r2, [sp, #40]	; 0x28
 801063a:	e7aa      	b.n	8010592 <_dtoa_r+0x232>
 801063c:	2301      	movs	r3, #1
 801063e:	9309      	str	r3, [sp, #36]	; 0x24
 8010640:	e7f4      	b.n	801062c <_dtoa_r+0x2cc>
 8010642:	2301      	movs	r3, #1
 8010644:	9306      	str	r3, [sp, #24]
 8010646:	4699      	mov	r9, r3
 8010648:	461a      	mov	r2, r3
 801064a:	e7f5      	b.n	8010638 <_dtoa_r+0x2d8>
 801064c:	3101      	adds	r1, #1
 801064e:	6071      	str	r1, [r6, #4]
 8010650:	0052      	lsls	r2, r2, #1
 8010652:	e7a2      	b.n	801059a <_dtoa_r+0x23a>
 8010654:	f3af 8000 	nop.w
 8010658:	636f4361 	.word	0x636f4361
 801065c:	3fd287a7 	.word	0x3fd287a7
 8010660:	8b60c8b3 	.word	0x8b60c8b3
 8010664:	3fc68a28 	.word	0x3fc68a28
 8010668:	509f79fb 	.word	0x509f79fb
 801066c:	3fd34413 	.word	0x3fd34413
 8010670:	7ff00000 	.word	0x7ff00000
 8010674:	080127f9 	.word	0x080127f9
 8010678:	080127f0 	.word	0x080127f0
 801067c:	08012775 	.word	0x08012775
 8010680:	08012898 	.word	0x08012898
 8010684:	08012870 	.word	0x08012870
 8010688:	07de      	lsls	r6, r3, #31
 801068a:	d504      	bpl.n	8010696 <_dtoa_r+0x336>
 801068c:	ed91 6b00 	vldr	d6, [r1]
 8010690:	3201      	adds	r2, #1
 8010692:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010696:	105b      	asrs	r3, r3, #1
 8010698:	3108      	adds	r1, #8
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1f4      	bne.n	8010688 <_dtoa_r+0x328>
 801069e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80106a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80106a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80106aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f000 80a7 	beq.w	8010800 <_dtoa_r+0x4a0>
 80106b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80106b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	f140 809d 	bpl.w	8010800 <_dtoa_r+0x4a0>
 80106c6:	f1b9 0f00 	cmp.w	r9, #0
 80106ca:	f000 8099 	beq.w	8010800 <_dtoa_r+0x4a0>
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dd30      	ble.n	8010736 <_dtoa_r+0x3d6>
 80106d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80106d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80106dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80106e0:	9d06      	ldr	r5, [sp, #24]
 80106e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80106e6:	3201      	adds	r2, #1
 80106e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80106ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80106f0:	ee07 2a90 	vmov	s15, r2
 80106f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80106f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80106fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010700:	9a03      	ldr	r2, [sp, #12]
 8010702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010706:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801070a:	2d00      	cmp	r5, #0
 801070c:	d17b      	bne.n	8010806 <_dtoa_r+0x4a6>
 801070e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010712:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010716:	ec41 0b17 	vmov	d7, r0, r1
 801071a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010722:	f300 8253 	bgt.w	8010bcc <_dtoa_r+0x86c>
 8010726:	eeb1 7b47 	vneg.f64	d7, d7
 801072a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010732:	f100 8249 	bmi.w	8010bc8 <_dtoa_r+0x868>
 8010736:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801073a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801073e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010740:	2b00      	cmp	r3, #0
 8010742:	f2c0 8119 	blt.w	8010978 <_dtoa_r+0x618>
 8010746:	f1bb 0f0e 	cmp.w	fp, #14
 801074a:	f300 8115 	bgt.w	8010978 <_dtoa_r+0x618>
 801074e:	4bc3      	ldr	r3, [pc, #780]	; (8010a5c <_dtoa_r+0x6fc>)
 8010750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010754:	ed93 6b00 	vldr	d6, [r3]
 8010758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801075a:	2b00      	cmp	r3, #0
 801075c:	f280 80ba 	bge.w	80108d4 <_dtoa_r+0x574>
 8010760:	f1b9 0f00 	cmp.w	r9, #0
 8010764:	f300 80b6 	bgt.w	80108d4 <_dtoa_r+0x574>
 8010768:	f040 822d 	bne.w	8010bc6 <_dtoa_r+0x866>
 801076c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010770:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010774:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801077c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010780:	464d      	mov	r5, r9
 8010782:	464f      	mov	r7, r9
 8010784:	f280 8204 	bge.w	8010b90 <_dtoa_r+0x830>
 8010788:	9b04      	ldr	r3, [sp, #16]
 801078a:	9a04      	ldr	r2, [sp, #16]
 801078c:	1c5e      	adds	r6, r3, #1
 801078e:	2331      	movs	r3, #49	; 0x31
 8010790:	7013      	strb	r3, [r2, #0]
 8010792:	f10b 0b01 	add.w	fp, fp, #1
 8010796:	e1ff      	b.n	8010b98 <_dtoa_r+0x838>
 8010798:	2202      	movs	r2, #2
 801079a:	e731      	b.n	8010600 <_dtoa_r+0x2a0>
 801079c:	d02e      	beq.n	80107fc <_dtoa_r+0x49c>
 801079e:	f1cb 0300 	rsb	r3, fp, #0
 80107a2:	4aae      	ldr	r2, [pc, #696]	; (8010a5c <_dtoa_r+0x6fc>)
 80107a4:	f003 010f 	and.w	r1, r3, #15
 80107a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80107ac:	ed92 7b00 	vldr	d7, [r2]
 80107b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80107b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80107b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80107bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80107c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80107c4:	49a6      	ldr	r1, [pc, #664]	; (8010a60 <_dtoa_r+0x700>)
 80107c6:	111b      	asrs	r3, r3, #4
 80107c8:	2000      	movs	r0, #0
 80107ca:	2202      	movs	r2, #2
 80107cc:	b93b      	cbnz	r3, 80107de <_dtoa_r+0x47e>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f43f af6b 	beq.w	80106aa <_dtoa_r+0x34a>
 80107d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80107d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107dc:	e765      	b.n	80106aa <_dtoa_r+0x34a>
 80107de:	07dd      	lsls	r5, r3, #31
 80107e0:	d509      	bpl.n	80107f6 <_dtoa_r+0x496>
 80107e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80107e6:	ed91 7b00 	vldr	d7, [r1]
 80107ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80107ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80107f2:	3201      	adds	r2, #1
 80107f4:	2001      	movs	r0, #1
 80107f6:	105b      	asrs	r3, r3, #1
 80107f8:	3108      	adds	r1, #8
 80107fa:	e7e7      	b.n	80107cc <_dtoa_r+0x46c>
 80107fc:	2202      	movs	r2, #2
 80107fe:	e754      	b.n	80106aa <_dtoa_r+0x34a>
 8010800:	465b      	mov	r3, fp
 8010802:	464d      	mov	r5, r9
 8010804:	e770      	b.n	80106e8 <_dtoa_r+0x388>
 8010806:	4a95      	ldr	r2, [pc, #596]	; (8010a5c <_dtoa_r+0x6fc>)
 8010808:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801080c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010812:	ec41 0b17 	vmov	d7, r0, r1
 8010816:	b35a      	cbz	r2, 8010870 <_dtoa_r+0x510>
 8010818:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801081c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010820:	9e04      	ldr	r6, [sp, #16]
 8010822:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010826:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801082a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801082e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010832:	ee14 2a90 	vmov	r2, s9
 8010836:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801083a:	3230      	adds	r2, #48	; 0x30
 801083c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010840:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010848:	f806 2b01 	strb.w	r2, [r6], #1
 801084c:	d43b      	bmi.n	80108c6 <_dtoa_r+0x566>
 801084e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010852:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085a:	d472      	bmi.n	8010942 <_dtoa_r+0x5e2>
 801085c:	9a04      	ldr	r2, [sp, #16]
 801085e:	1ab2      	subs	r2, r6, r2
 8010860:	4295      	cmp	r5, r2
 8010862:	f77f af68 	ble.w	8010736 <_dtoa_r+0x3d6>
 8010866:	ee27 7b03 	vmul.f64	d7, d7, d3
 801086a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801086e:	e7de      	b.n	801082e <_dtoa_r+0x4ce>
 8010870:	9a04      	ldr	r2, [sp, #16]
 8010872:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010876:	1956      	adds	r6, r2, r5
 8010878:	4611      	mov	r1, r2
 801087a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801087e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010882:	ee14 2a90 	vmov	r2, s9
 8010886:	3230      	adds	r2, #48	; 0x30
 8010888:	f801 2b01 	strb.w	r2, [r1], #1
 801088c:	42b1      	cmp	r1, r6
 801088e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010892:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010896:	d11a      	bne.n	80108ce <_dtoa_r+0x56e>
 8010898:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801089c:	ee37 4b05 	vadd.f64	d4, d7, d5
 80108a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80108a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a8:	dc4b      	bgt.n	8010942 <_dtoa_r+0x5e2>
 80108aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80108ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	f57f af3e 	bpl.w	8010736 <_dtoa_r+0x3d6>
 80108ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80108be:	2a30      	cmp	r2, #48	; 0x30
 80108c0:	f106 31ff 	add.w	r1, r6, #4294967295
 80108c4:	d001      	beq.n	80108ca <_dtoa_r+0x56a>
 80108c6:	469b      	mov	fp, r3
 80108c8:	e02a      	b.n	8010920 <_dtoa_r+0x5c0>
 80108ca:	460e      	mov	r6, r1
 80108cc:	e7f5      	b.n	80108ba <_dtoa_r+0x55a>
 80108ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80108d2:	e7d4      	b.n	801087e <_dtoa_r+0x51e>
 80108d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80108dc:	9e04      	ldr	r6, [sp, #16]
 80108de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80108e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80108e6:	ee15 3a10 	vmov	r3, s10
 80108ea:	3330      	adds	r3, #48	; 0x30
 80108ec:	f806 3b01 	strb.w	r3, [r6], #1
 80108f0:	9b04      	ldr	r3, [sp, #16]
 80108f2:	1af3      	subs	r3, r6, r3
 80108f4:	4599      	cmp	r9, r3
 80108f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80108fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 80108fe:	d133      	bne.n	8010968 <_dtoa_r+0x608>
 8010900:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010904:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090c:	dc18      	bgt.n	8010940 <_dtoa_r+0x5e0>
 801090e:	eeb4 7b46 	vcmp.f64	d7, d6
 8010912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010916:	d103      	bne.n	8010920 <_dtoa_r+0x5c0>
 8010918:	ee15 3a10 	vmov	r3, s10
 801091c:	07db      	lsls	r3, r3, #31
 801091e:	d40f      	bmi.n	8010940 <_dtoa_r+0x5e0>
 8010920:	9901      	ldr	r1, [sp, #4]
 8010922:	4620      	mov	r0, r4
 8010924:	f000 ffc8 	bl	80118b8 <_Bfree>
 8010928:	2300      	movs	r3, #0
 801092a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801092c:	7033      	strb	r3, [r6, #0]
 801092e:	f10b 0301 	add.w	r3, fp, #1
 8010932:	6013      	str	r3, [r2, #0]
 8010934:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010936:	2b00      	cmp	r3, #0
 8010938:	f43f ad5b 	beq.w	80103f2 <_dtoa_r+0x92>
 801093c:	601e      	str	r6, [r3, #0]
 801093e:	e558      	b.n	80103f2 <_dtoa_r+0x92>
 8010940:	465b      	mov	r3, fp
 8010942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010946:	2939      	cmp	r1, #57	; 0x39
 8010948:	f106 32ff 	add.w	r2, r6, #4294967295
 801094c:	d106      	bne.n	801095c <_dtoa_r+0x5fc>
 801094e:	9904      	ldr	r1, [sp, #16]
 8010950:	4291      	cmp	r1, r2
 8010952:	d107      	bne.n	8010964 <_dtoa_r+0x604>
 8010954:	2230      	movs	r2, #48	; 0x30
 8010956:	700a      	strb	r2, [r1, #0]
 8010958:	3301      	adds	r3, #1
 801095a:	460a      	mov	r2, r1
 801095c:	7811      	ldrb	r1, [r2, #0]
 801095e:	3101      	adds	r1, #1
 8010960:	7011      	strb	r1, [r2, #0]
 8010962:	e7b0      	b.n	80108c6 <_dtoa_r+0x566>
 8010964:	4616      	mov	r6, r2
 8010966:	e7ec      	b.n	8010942 <_dtoa_r+0x5e2>
 8010968:	ee27 7b04 	vmul.f64	d7, d7, d4
 801096c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010974:	d1b3      	bne.n	80108de <_dtoa_r+0x57e>
 8010976:	e7d3      	b.n	8010920 <_dtoa_r+0x5c0>
 8010978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801097a:	2a00      	cmp	r2, #0
 801097c:	f000 808d 	beq.w	8010a9a <_dtoa_r+0x73a>
 8010980:	9a08      	ldr	r2, [sp, #32]
 8010982:	2a01      	cmp	r2, #1
 8010984:	dc72      	bgt.n	8010a6c <_dtoa_r+0x70c>
 8010986:	2f00      	cmp	r7, #0
 8010988:	d06c      	beq.n	8010a64 <_dtoa_r+0x704>
 801098a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801098e:	4645      	mov	r5, r8
 8010990:	4656      	mov	r6, sl
 8010992:	9a07      	ldr	r2, [sp, #28]
 8010994:	2101      	movs	r1, #1
 8010996:	441a      	add	r2, r3
 8010998:	4620      	mov	r0, r4
 801099a:	449a      	add	sl, r3
 801099c:	9207      	str	r2, [sp, #28]
 801099e:	f001 f869 	bl	8011a74 <__i2b>
 80109a2:	4607      	mov	r7, r0
 80109a4:	2e00      	cmp	r6, #0
 80109a6:	dd0b      	ble.n	80109c0 <_dtoa_r+0x660>
 80109a8:	9b07      	ldr	r3, [sp, #28]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	dd08      	ble.n	80109c0 <_dtoa_r+0x660>
 80109ae:	42b3      	cmp	r3, r6
 80109b0:	9a07      	ldr	r2, [sp, #28]
 80109b2:	bfa8      	it	ge
 80109b4:	4633      	movge	r3, r6
 80109b6:	ebaa 0a03 	sub.w	sl, sl, r3
 80109ba:	1af6      	subs	r6, r6, r3
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	9307      	str	r3, [sp, #28]
 80109c0:	f1b8 0f00 	cmp.w	r8, #0
 80109c4:	d01d      	beq.n	8010a02 <_dtoa_r+0x6a2>
 80109c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d06a      	beq.n	8010aa2 <_dtoa_r+0x742>
 80109cc:	b18d      	cbz	r5, 80109f2 <_dtoa_r+0x692>
 80109ce:	4639      	mov	r1, r7
 80109d0:	462a      	mov	r2, r5
 80109d2:	4620      	mov	r0, r4
 80109d4:	f001 f8ee 	bl	8011bb4 <__pow5mult>
 80109d8:	9a01      	ldr	r2, [sp, #4]
 80109da:	4601      	mov	r1, r0
 80109dc:	4607      	mov	r7, r0
 80109de:	4620      	mov	r0, r4
 80109e0:	f001 f851 	bl	8011a86 <__multiply>
 80109e4:	9901      	ldr	r1, [sp, #4]
 80109e6:	900c      	str	r0, [sp, #48]	; 0x30
 80109e8:	4620      	mov	r0, r4
 80109ea:	f000 ff65 	bl	80118b8 <_Bfree>
 80109ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109f0:	9301      	str	r3, [sp, #4]
 80109f2:	ebb8 0205 	subs.w	r2, r8, r5
 80109f6:	d004      	beq.n	8010a02 <_dtoa_r+0x6a2>
 80109f8:	9901      	ldr	r1, [sp, #4]
 80109fa:	4620      	mov	r0, r4
 80109fc:	f001 f8da 	bl	8011bb4 <__pow5mult>
 8010a00:	9001      	str	r0, [sp, #4]
 8010a02:	2101      	movs	r1, #1
 8010a04:	4620      	mov	r0, r4
 8010a06:	f001 f835 	bl	8011a74 <__i2b>
 8010a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f000 81ca 	beq.w	8010da8 <_dtoa_r+0xa48>
 8010a14:	461a      	mov	r2, r3
 8010a16:	4601      	mov	r1, r0
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f001 f8cb 	bl	8011bb4 <__pow5mult>
 8010a1e:	9b08      	ldr	r3, [sp, #32]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	4605      	mov	r5, r0
 8010a24:	dc44      	bgt.n	8010ab0 <_dtoa_r+0x750>
 8010a26:	9b02      	ldr	r3, [sp, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d13c      	bne.n	8010aa6 <_dtoa_r+0x746>
 8010a2c:	9b03      	ldr	r3, [sp, #12]
 8010a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d137      	bne.n	8010aa6 <_dtoa_r+0x746>
 8010a36:	9b03      	ldr	r3, [sp, #12]
 8010a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a3c:	0d1b      	lsrs	r3, r3, #20
 8010a3e:	051b      	lsls	r3, r3, #20
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d033      	beq.n	8010aac <_dtoa_r+0x74c>
 8010a44:	9b07      	ldr	r3, [sp, #28]
 8010a46:	3301      	adds	r3, #1
 8010a48:	f10a 0a01 	add.w	sl, sl, #1
 8010a4c:	9307      	str	r3, [sp, #28]
 8010a4e:	f04f 0801 	mov.w	r8, #1
 8010a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a54:	bb73      	cbnz	r3, 8010ab4 <_dtoa_r+0x754>
 8010a56:	2001      	movs	r0, #1
 8010a58:	e034      	b.n	8010ac4 <_dtoa_r+0x764>
 8010a5a:	bf00      	nop
 8010a5c:	08012898 	.word	0x08012898
 8010a60:	08012870 	.word	0x08012870
 8010a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a6a:	e790      	b.n	801098e <_dtoa_r+0x62e>
 8010a6c:	f109 35ff 	add.w	r5, r9, #4294967295
 8010a70:	45a8      	cmp	r8, r5
 8010a72:	bfbf      	itttt	lt
 8010a74:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8010a76:	eba5 0808 	sublt.w	r8, r5, r8
 8010a7a:	4443      	addlt	r3, r8
 8010a7c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8010a7e:	bfb6      	itet	lt
 8010a80:	46a8      	movlt	r8, r5
 8010a82:	eba8 0505 	subge.w	r5, r8, r5
 8010a86:	2500      	movlt	r5, #0
 8010a88:	f1b9 0f00 	cmp.w	r9, #0
 8010a8c:	bfb9      	ittee	lt
 8010a8e:	ebaa 0609 	sublt.w	r6, sl, r9
 8010a92:	2300      	movlt	r3, #0
 8010a94:	4656      	movge	r6, sl
 8010a96:	464b      	movge	r3, r9
 8010a98:	e77b      	b.n	8010992 <_dtoa_r+0x632>
 8010a9a:	4645      	mov	r5, r8
 8010a9c:	4656      	mov	r6, sl
 8010a9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010aa0:	e780      	b.n	80109a4 <_dtoa_r+0x644>
 8010aa2:	4642      	mov	r2, r8
 8010aa4:	e7a8      	b.n	80109f8 <_dtoa_r+0x698>
 8010aa6:	f04f 0800 	mov.w	r8, #0
 8010aaa:	e7d2      	b.n	8010a52 <_dtoa_r+0x6f2>
 8010aac:	4698      	mov	r8, r3
 8010aae:	e7d0      	b.n	8010a52 <_dtoa_r+0x6f2>
 8010ab0:	f04f 0800 	mov.w	r8, #0
 8010ab4:	692b      	ldr	r3, [r5, #16]
 8010ab6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010aba:	6918      	ldr	r0, [r3, #16]
 8010abc:	f000 ff8c 	bl	80119d8 <__hi0bits>
 8010ac0:	f1c0 0020 	rsb	r0, r0, #32
 8010ac4:	9b07      	ldr	r3, [sp, #28]
 8010ac6:	4418      	add	r0, r3
 8010ac8:	f010 001f 	ands.w	r0, r0, #31
 8010acc:	d047      	beq.n	8010b5e <_dtoa_r+0x7fe>
 8010ace:	f1c0 0320 	rsb	r3, r0, #32
 8010ad2:	2b04      	cmp	r3, #4
 8010ad4:	dd3b      	ble.n	8010b4e <_dtoa_r+0x7ee>
 8010ad6:	9b07      	ldr	r3, [sp, #28]
 8010ad8:	f1c0 001c 	rsb	r0, r0, #28
 8010adc:	4482      	add	sl, r0
 8010ade:	4406      	add	r6, r0
 8010ae0:	4403      	add	r3, r0
 8010ae2:	9307      	str	r3, [sp, #28]
 8010ae4:	f1ba 0f00 	cmp.w	sl, #0
 8010ae8:	dd05      	ble.n	8010af6 <_dtoa_r+0x796>
 8010aea:	4652      	mov	r2, sl
 8010aec:	9901      	ldr	r1, [sp, #4]
 8010aee:	4620      	mov	r0, r4
 8010af0:	f001 f8ae 	bl	8011c50 <__lshift>
 8010af4:	9001      	str	r0, [sp, #4]
 8010af6:	9b07      	ldr	r3, [sp, #28]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dd05      	ble.n	8010b08 <_dtoa_r+0x7a8>
 8010afc:	4629      	mov	r1, r5
 8010afe:	461a      	mov	r2, r3
 8010b00:	4620      	mov	r0, r4
 8010b02:	f001 f8a5 	bl	8011c50 <__lshift>
 8010b06:	4605      	mov	r5, r0
 8010b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b0a:	b353      	cbz	r3, 8010b62 <_dtoa_r+0x802>
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	9801      	ldr	r0, [sp, #4]
 8010b10:	f001 f8f2 	bl	8011cf8 <__mcmp>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	da24      	bge.n	8010b62 <_dtoa_r+0x802>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	220a      	movs	r2, #10
 8010b1c:	9901      	ldr	r1, [sp, #4]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f000 fee1 	bl	80118e6 <__multadd>
 8010b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b26:	9001      	str	r0, [sp, #4]
 8010b28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 8142 	beq.w	8010db6 <_dtoa_r+0xa56>
 8010b32:	2300      	movs	r3, #0
 8010b34:	4639      	mov	r1, r7
 8010b36:	220a      	movs	r2, #10
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f000 fed4 	bl	80118e6 <__multadd>
 8010b3e:	9b06      	ldr	r3, [sp, #24]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	4607      	mov	r7, r0
 8010b44:	dc4b      	bgt.n	8010bde <_dtoa_r+0x87e>
 8010b46:	9b08      	ldr	r3, [sp, #32]
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	dd48      	ble.n	8010bde <_dtoa_r+0x87e>
 8010b4c:	e011      	b.n	8010b72 <_dtoa_r+0x812>
 8010b4e:	d0c9      	beq.n	8010ae4 <_dtoa_r+0x784>
 8010b50:	9a07      	ldr	r2, [sp, #28]
 8010b52:	331c      	adds	r3, #28
 8010b54:	441a      	add	r2, r3
 8010b56:	449a      	add	sl, r3
 8010b58:	441e      	add	r6, r3
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	e7c1      	b.n	8010ae2 <_dtoa_r+0x782>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	e7f6      	b.n	8010b50 <_dtoa_r+0x7f0>
 8010b62:	f1b9 0f00 	cmp.w	r9, #0
 8010b66:	dc34      	bgt.n	8010bd2 <_dtoa_r+0x872>
 8010b68:	9b08      	ldr	r3, [sp, #32]
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	dd31      	ble.n	8010bd2 <_dtoa_r+0x872>
 8010b6e:	f8cd 9018 	str.w	r9, [sp, #24]
 8010b72:	9b06      	ldr	r3, [sp, #24]
 8010b74:	b963      	cbnz	r3, 8010b90 <_dtoa_r+0x830>
 8010b76:	4629      	mov	r1, r5
 8010b78:	2205      	movs	r2, #5
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 feb3 	bl	80118e6 <__multadd>
 8010b80:	4601      	mov	r1, r0
 8010b82:	4605      	mov	r5, r0
 8010b84:	9801      	ldr	r0, [sp, #4]
 8010b86:	f001 f8b7 	bl	8011cf8 <__mcmp>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	f73f adfc 	bgt.w	8010788 <_dtoa_r+0x428>
 8010b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b92:	9e04      	ldr	r6, [sp, #16]
 8010b94:	ea6f 0b03 	mvn.w	fp, r3
 8010b98:	f04f 0900 	mov.w	r9, #0
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 fe8a 	bl	80118b8 <_Bfree>
 8010ba4:	2f00      	cmp	r7, #0
 8010ba6:	f43f aebb 	beq.w	8010920 <_dtoa_r+0x5c0>
 8010baa:	f1b9 0f00 	cmp.w	r9, #0
 8010bae:	d005      	beq.n	8010bbc <_dtoa_r+0x85c>
 8010bb0:	45b9      	cmp	r9, r7
 8010bb2:	d003      	beq.n	8010bbc <_dtoa_r+0x85c>
 8010bb4:	4649      	mov	r1, r9
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f000 fe7e 	bl	80118b8 <_Bfree>
 8010bbc:	4639      	mov	r1, r7
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f000 fe7a 	bl	80118b8 <_Bfree>
 8010bc4:	e6ac      	b.n	8010920 <_dtoa_r+0x5c0>
 8010bc6:	2500      	movs	r5, #0
 8010bc8:	462f      	mov	r7, r5
 8010bca:	e7e1      	b.n	8010b90 <_dtoa_r+0x830>
 8010bcc:	469b      	mov	fp, r3
 8010bce:	462f      	mov	r7, r5
 8010bd0:	e5da      	b.n	8010788 <_dtoa_r+0x428>
 8010bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd4:	f8cd 9018 	str.w	r9, [sp, #24]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 80f3 	beq.w	8010dc4 <_dtoa_r+0xa64>
 8010bde:	2e00      	cmp	r6, #0
 8010be0:	dd05      	ble.n	8010bee <_dtoa_r+0x88e>
 8010be2:	4639      	mov	r1, r7
 8010be4:	4632      	mov	r2, r6
 8010be6:	4620      	mov	r0, r4
 8010be8:	f001 f832 	bl	8011c50 <__lshift>
 8010bec:	4607      	mov	r7, r0
 8010bee:	f1b8 0f00 	cmp.w	r8, #0
 8010bf2:	d04c      	beq.n	8010c8e <_dtoa_r+0x92e>
 8010bf4:	6879      	ldr	r1, [r7, #4]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 fe2a 	bl	8011850 <_Balloc>
 8010bfc:	693a      	ldr	r2, [r7, #16]
 8010bfe:	3202      	adds	r2, #2
 8010c00:	4606      	mov	r6, r0
 8010c02:	0092      	lsls	r2, r2, #2
 8010c04:	f107 010c 	add.w	r1, r7, #12
 8010c08:	300c      	adds	r0, #12
 8010c0a:	f7fd fc1f 	bl	800e44c <memcpy>
 8010c0e:	2201      	movs	r2, #1
 8010c10:	4631      	mov	r1, r6
 8010c12:	4620      	mov	r0, r4
 8010c14:	f001 f81c 	bl	8011c50 <__lshift>
 8010c18:	9b02      	ldr	r3, [sp, #8]
 8010c1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010c1e:	f003 0301 	and.w	r3, r3, #1
 8010c22:	46b9      	mov	r9, r7
 8010c24:	9307      	str	r3, [sp, #28]
 8010c26:	4607      	mov	r7, r0
 8010c28:	4629      	mov	r1, r5
 8010c2a:	9801      	ldr	r0, [sp, #4]
 8010c2c:	f7ff fb0a 	bl	8010244 <quorem>
 8010c30:	4649      	mov	r1, r9
 8010c32:	4606      	mov	r6, r0
 8010c34:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010c38:	9801      	ldr	r0, [sp, #4]
 8010c3a:	f001 f85d 	bl	8011cf8 <__mcmp>
 8010c3e:	463a      	mov	r2, r7
 8010c40:	9002      	str	r0, [sp, #8]
 8010c42:	4629      	mov	r1, r5
 8010c44:	4620      	mov	r0, r4
 8010c46:	f001 f871 	bl	8011d2c <__mdiff>
 8010c4a:	68c3      	ldr	r3, [r0, #12]
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	bb03      	cbnz	r3, 8010c92 <_dtoa_r+0x932>
 8010c50:	4601      	mov	r1, r0
 8010c52:	9009      	str	r0, [sp, #36]	; 0x24
 8010c54:	9801      	ldr	r0, [sp, #4]
 8010c56:	f001 f84f 	bl	8011cf8 <__mcmp>
 8010c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	4611      	mov	r1, r2
 8010c60:	4620      	mov	r0, r4
 8010c62:	9309      	str	r3, [sp, #36]	; 0x24
 8010c64:	f000 fe28 	bl	80118b8 <_Bfree>
 8010c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c6a:	b9a3      	cbnz	r3, 8010c96 <_dtoa_r+0x936>
 8010c6c:	9a08      	ldr	r2, [sp, #32]
 8010c6e:	b992      	cbnz	r2, 8010c96 <_dtoa_r+0x936>
 8010c70:	9a07      	ldr	r2, [sp, #28]
 8010c72:	b982      	cbnz	r2, 8010c96 <_dtoa_r+0x936>
 8010c74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010c78:	d029      	beq.n	8010cce <_dtoa_r+0x96e>
 8010c7a:	9b02      	ldr	r3, [sp, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	dd01      	ble.n	8010c84 <_dtoa_r+0x924>
 8010c80:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8010c84:	f10a 0601 	add.w	r6, sl, #1
 8010c88:	f88a 8000 	strb.w	r8, [sl]
 8010c8c:	e786      	b.n	8010b9c <_dtoa_r+0x83c>
 8010c8e:	4638      	mov	r0, r7
 8010c90:	e7c2      	b.n	8010c18 <_dtoa_r+0x8b8>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e7e3      	b.n	8010c5e <_dtoa_r+0x8fe>
 8010c96:	9a02      	ldr	r2, [sp, #8]
 8010c98:	2a00      	cmp	r2, #0
 8010c9a:	db04      	blt.n	8010ca6 <_dtoa_r+0x946>
 8010c9c:	d124      	bne.n	8010ce8 <_dtoa_r+0x988>
 8010c9e:	9a08      	ldr	r2, [sp, #32]
 8010ca0:	bb12      	cbnz	r2, 8010ce8 <_dtoa_r+0x988>
 8010ca2:	9a07      	ldr	r2, [sp, #28]
 8010ca4:	bb02      	cbnz	r2, 8010ce8 <_dtoa_r+0x988>
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	ddec      	ble.n	8010c84 <_dtoa_r+0x924>
 8010caa:	2201      	movs	r2, #1
 8010cac:	9901      	ldr	r1, [sp, #4]
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f000 ffce 	bl	8011c50 <__lshift>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	9001      	str	r0, [sp, #4]
 8010cb8:	f001 f81e 	bl	8011cf8 <__mcmp>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	dc03      	bgt.n	8010cc8 <_dtoa_r+0x968>
 8010cc0:	d1e0      	bne.n	8010c84 <_dtoa_r+0x924>
 8010cc2:	f018 0f01 	tst.w	r8, #1
 8010cc6:	d0dd      	beq.n	8010c84 <_dtoa_r+0x924>
 8010cc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010ccc:	d1d8      	bne.n	8010c80 <_dtoa_r+0x920>
 8010cce:	2339      	movs	r3, #57	; 0x39
 8010cd0:	f10a 0601 	add.w	r6, sl, #1
 8010cd4:	f88a 3000 	strb.w	r3, [sl]
 8010cd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cdc:	2b39      	cmp	r3, #57	; 0x39
 8010cde:	f106 32ff 	add.w	r2, r6, #4294967295
 8010ce2:	d04c      	beq.n	8010d7e <_dtoa_r+0xa1e>
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	e051      	b.n	8010d8c <_dtoa_r+0xa2c>
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f10a 0601 	add.w	r6, sl, #1
 8010cee:	dd05      	ble.n	8010cfc <_dtoa_r+0x99c>
 8010cf0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010cf4:	d0eb      	beq.n	8010cce <_dtoa_r+0x96e>
 8010cf6:	f108 0801 	add.w	r8, r8, #1
 8010cfa:	e7c5      	b.n	8010c88 <_dtoa_r+0x928>
 8010cfc:	9b04      	ldr	r3, [sp, #16]
 8010cfe:	9a06      	ldr	r2, [sp, #24]
 8010d00:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010d04:	1af3      	subs	r3, r6, r3
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d021      	beq.n	8010d4e <_dtoa_r+0x9ee>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	220a      	movs	r2, #10
 8010d0e:	9901      	ldr	r1, [sp, #4]
 8010d10:	4620      	mov	r0, r4
 8010d12:	f000 fde8 	bl	80118e6 <__multadd>
 8010d16:	45b9      	cmp	r9, r7
 8010d18:	9001      	str	r0, [sp, #4]
 8010d1a:	f04f 0300 	mov.w	r3, #0
 8010d1e:	f04f 020a 	mov.w	r2, #10
 8010d22:	4649      	mov	r1, r9
 8010d24:	4620      	mov	r0, r4
 8010d26:	d105      	bne.n	8010d34 <_dtoa_r+0x9d4>
 8010d28:	f000 fddd 	bl	80118e6 <__multadd>
 8010d2c:	4681      	mov	r9, r0
 8010d2e:	4607      	mov	r7, r0
 8010d30:	46b2      	mov	sl, r6
 8010d32:	e779      	b.n	8010c28 <_dtoa_r+0x8c8>
 8010d34:	f000 fdd7 	bl	80118e6 <__multadd>
 8010d38:	4639      	mov	r1, r7
 8010d3a:	4681      	mov	r9, r0
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	220a      	movs	r2, #10
 8010d40:	4620      	mov	r0, r4
 8010d42:	f000 fdd0 	bl	80118e6 <__multadd>
 8010d46:	4607      	mov	r7, r0
 8010d48:	e7f2      	b.n	8010d30 <_dtoa_r+0x9d0>
 8010d4a:	f04f 0900 	mov.w	r9, #0
 8010d4e:	2201      	movs	r2, #1
 8010d50:	9901      	ldr	r1, [sp, #4]
 8010d52:	4620      	mov	r0, r4
 8010d54:	f000 ff7c 	bl	8011c50 <__lshift>
 8010d58:	4629      	mov	r1, r5
 8010d5a:	9001      	str	r0, [sp, #4]
 8010d5c:	f000 ffcc 	bl	8011cf8 <__mcmp>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	dcb9      	bgt.n	8010cd8 <_dtoa_r+0x978>
 8010d64:	d102      	bne.n	8010d6c <_dtoa_r+0xa0c>
 8010d66:	f018 0f01 	tst.w	r8, #1
 8010d6a:	d1b5      	bne.n	8010cd8 <_dtoa_r+0x978>
 8010d6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d70:	2b30      	cmp	r3, #48	; 0x30
 8010d72:	f106 32ff 	add.w	r2, r6, #4294967295
 8010d76:	f47f af11 	bne.w	8010b9c <_dtoa_r+0x83c>
 8010d7a:	4616      	mov	r6, r2
 8010d7c:	e7f6      	b.n	8010d6c <_dtoa_r+0xa0c>
 8010d7e:	9b04      	ldr	r3, [sp, #16]
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d105      	bne.n	8010d90 <_dtoa_r+0xa30>
 8010d84:	9a04      	ldr	r2, [sp, #16]
 8010d86:	f10b 0b01 	add.w	fp, fp, #1
 8010d8a:	2331      	movs	r3, #49	; 0x31
 8010d8c:	7013      	strb	r3, [r2, #0]
 8010d8e:	e705      	b.n	8010b9c <_dtoa_r+0x83c>
 8010d90:	4616      	mov	r6, r2
 8010d92:	e7a1      	b.n	8010cd8 <_dtoa_r+0x978>
 8010d94:	4b16      	ldr	r3, [pc, #88]	; (8010df0 <_dtoa_r+0xa90>)
 8010d96:	f7ff bb48 	b.w	801042a <_dtoa_r+0xca>
 8010d9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f47f ab23 	bne.w	80103e8 <_dtoa_r+0x88>
 8010da2:	4b14      	ldr	r3, [pc, #80]	; (8010df4 <_dtoa_r+0xa94>)
 8010da4:	f7ff bb41 	b.w	801042a <_dtoa_r+0xca>
 8010da8:	9b08      	ldr	r3, [sp, #32]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	f77f ae3b 	ble.w	8010a26 <_dtoa_r+0x6c6>
 8010db0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8010db4:	e64f      	b.n	8010a56 <_dtoa_r+0x6f6>
 8010db6:	9b06      	ldr	r3, [sp, #24]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dc03      	bgt.n	8010dc4 <_dtoa_r+0xa64>
 8010dbc:	9b08      	ldr	r3, [sp, #32]
 8010dbe:	2b02      	cmp	r3, #2
 8010dc0:	f73f aed7 	bgt.w	8010b72 <_dtoa_r+0x812>
 8010dc4:	9e04      	ldr	r6, [sp, #16]
 8010dc6:	9801      	ldr	r0, [sp, #4]
 8010dc8:	4629      	mov	r1, r5
 8010dca:	f7ff fa3b 	bl	8010244 <quorem>
 8010dce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010dd2:	f806 8b01 	strb.w	r8, [r6], #1
 8010dd6:	9b04      	ldr	r3, [sp, #16]
 8010dd8:	9a06      	ldr	r2, [sp, #24]
 8010dda:	1af3      	subs	r3, r6, r3
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	ddb4      	ble.n	8010d4a <_dtoa_r+0x9ea>
 8010de0:	2300      	movs	r3, #0
 8010de2:	220a      	movs	r2, #10
 8010de4:	9901      	ldr	r1, [sp, #4]
 8010de6:	4620      	mov	r0, r4
 8010de8:	f000 fd7d 	bl	80118e6 <__multadd>
 8010dec:	9001      	str	r0, [sp, #4]
 8010dee:	e7ea      	b.n	8010dc6 <_dtoa_r+0xa66>
 8010df0:	08012774 	.word	0x08012774
 8010df4:	080127f0 	.word	0x080127f0

08010df8 <__sflush_r>:
 8010df8:	898a      	ldrh	r2, [r1, #12]
 8010dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfe:	4605      	mov	r5, r0
 8010e00:	0710      	lsls	r0, r2, #28
 8010e02:	460c      	mov	r4, r1
 8010e04:	d458      	bmi.n	8010eb8 <__sflush_r+0xc0>
 8010e06:	684b      	ldr	r3, [r1, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	dc05      	bgt.n	8010e18 <__sflush_r+0x20>
 8010e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dc02      	bgt.n	8010e18 <__sflush_r+0x20>
 8010e12:	2000      	movs	r0, #0
 8010e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e1a:	2e00      	cmp	r6, #0
 8010e1c:	d0f9      	beq.n	8010e12 <__sflush_r+0x1a>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e24:	682f      	ldr	r7, [r5, #0]
 8010e26:	6a21      	ldr	r1, [r4, #32]
 8010e28:	602b      	str	r3, [r5, #0]
 8010e2a:	d032      	beq.n	8010e92 <__sflush_r+0x9a>
 8010e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	075a      	lsls	r2, r3, #29
 8010e32:	d505      	bpl.n	8010e40 <__sflush_r+0x48>
 8010e34:	6863      	ldr	r3, [r4, #4]
 8010e36:	1ac0      	subs	r0, r0, r3
 8010e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e3a:	b10b      	cbz	r3, 8010e40 <__sflush_r+0x48>
 8010e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e3e:	1ac0      	subs	r0, r0, r3
 8010e40:	2300      	movs	r3, #0
 8010e42:	4602      	mov	r2, r0
 8010e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e46:	6a21      	ldr	r1, [r4, #32]
 8010e48:	4628      	mov	r0, r5
 8010e4a:	47b0      	blx	r6
 8010e4c:	1c43      	adds	r3, r0, #1
 8010e4e:	89a3      	ldrh	r3, [r4, #12]
 8010e50:	d106      	bne.n	8010e60 <__sflush_r+0x68>
 8010e52:	6829      	ldr	r1, [r5, #0]
 8010e54:	291d      	cmp	r1, #29
 8010e56:	d848      	bhi.n	8010eea <__sflush_r+0xf2>
 8010e58:	4a29      	ldr	r2, [pc, #164]	; (8010f00 <__sflush_r+0x108>)
 8010e5a:	40ca      	lsrs	r2, r1
 8010e5c:	07d6      	lsls	r6, r2, #31
 8010e5e:	d544      	bpl.n	8010eea <__sflush_r+0xf2>
 8010e60:	2200      	movs	r2, #0
 8010e62:	6062      	str	r2, [r4, #4]
 8010e64:	04d9      	lsls	r1, r3, #19
 8010e66:	6922      	ldr	r2, [r4, #16]
 8010e68:	6022      	str	r2, [r4, #0]
 8010e6a:	d504      	bpl.n	8010e76 <__sflush_r+0x7e>
 8010e6c:	1c42      	adds	r2, r0, #1
 8010e6e:	d101      	bne.n	8010e74 <__sflush_r+0x7c>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	b903      	cbnz	r3, 8010e76 <__sflush_r+0x7e>
 8010e74:	6560      	str	r0, [r4, #84]	; 0x54
 8010e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e78:	602f      	str	r7, [r5, #0]
 8010e7a:	2900      	cmp	r1, #0
 8010e7c:	d0c9      	beq.n	8010e12 <__sflush_r+0x1a>
 8010e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e82:	4299      	cmp	r1, r3
 8010e84:	d002      	beq.n	8010e8c <__sflush_r+0x94>
 8010e86:	4628      	mov	r0, r5
 8010e88:	f7fd fb02 	bl	800e490 <_free_r>
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8010e90:	e7c0      	b.n	8010e14 <__sflush_r+0x1c>
 8010e92:	2301      	movs	r3, #1
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b0      	blx	r6
 8010e98:	1c41      	adds	r1, r0, #1
 8010e9a:	d1c8      	bne.n	8010e2e <__sflush_r+0x36>
 8010e9c:	682b      	ldr	r3, [r5, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d0c5      	beq.n	8010e2e <__sflush_r+0x36>
 8010ea2:	2b1d      	cmp	r3, #29
 8010ea4:	d001      	beq.n	8010eaa <__sflush_r+0xb2>
 8010ea6:	2b16      	cmp	r3, #22
 8010ea8:	d101      	bne.n	8010eae <__sflush_r+0xb6>
 8010eaa:	602f      	str	r7, [r5, #0]
 8010eac:	e7b1      	b.n	8010e12 <__sflush_r+0x1a>
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eb4:	81a3      	strh	r3, [r4, #12]
 8010eb6:	e7ad      	b.n	8010e14 <__sflush_r+0x1c>
 8010eb8:	690f      	ldr	r7, [r1, #16]
 8010eba:	2f00      	cmp	r7, #0
 8010ebc:	d0a9      	beq.n	8010e12 <__sflush_r+0x1a>
 8010ebe:	0793      	lsls	r3, r2, #30
 8010ec0:	680e      	ldr	r6, [r1, #0]
 8010ec2:	bf08      	it	eq
 8010ec4:	694b      	ldreq	r3, [r1, #20]
 8010ec6:	600f      	str	r7, [r1, #0]
 8010ec8:	bf18      	it	ne
 8010eca:	2300      	movne	r3, #0
 8010ecc:	eba6 0807 	sub.w	r8, r6, r7
 8010ed0:	608b      	str	r3, [r1, #8]
 8010ed2:	f1b8 0f00 	cmp.w	r8, #0
 8010ed6:	dd9c      	ble.n	8010e12 <__sflush_r+0x1a>
 8010ed8:	4643      	mov	r3, r8
 8010eda:	463a      	mov	r2, r7
 8010edc:	6a21      	ldr	r1, [r4, #32]
 8010ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	47b0      	blx	r6
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	dc06      	bgt.n	8010ef6 <__sflush_r+0xfe>
 8010ee8:	89a3      	ldrh	r3, [r4, #12]
 8010eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eee:	81a3      	strh	r3, [r4, #12]
 8010ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef4:	e78e      	b.n	8010e14 <__sflush_r+0x1c>
 8010ef6:	4407      	add	r7, r0
 8010ef8:	eba8 0800 	sub.w	r8, r8, r0
 8010efc:	e7e9      	b.n	8010ed2 <__sflush_r+0xda>
 8010efe:	bf00      	nop
 8010f00:	20400001 	.word	0x20400001

08010f04 <_fflush_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	690b      	ldr	r3, [r1, #16]
 8010f08:	4605      	mov	r5, r0
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	b1db      	cbz	r3, 8010f46 <_fflush_r+0x42>
 8010f0e:	b118      	cbz	r0, 8010f18 <_fflush_r+0x14>
 8010f10:	6983      	ldr	r3, [r0, #24]
 8010f12:	b90b      	cbnz	r3, 8010f18 <_fflush_r+0x14>
 8010f14:	f000 f860 	bl	8010fd8 <__sinit>
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <_fflush_r+0x48>)
 8010f1a:	429c      	cmp	r4, r3
 8010f1c:	d109      	bne.n	8010f32 <_fflush_r+0x2e>
 8010f1e:	686c      	ldr	r4, [r5, #4]
 8010f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f24:	b17b      	cbz	r3, 8010f46 <_fflush_r+0x42>
 8010f26:	4621      	mov	r1, r4
 8010f28:	4628      	mov	r0, r5
 8010f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2e:	f7ff bf63 	b.w	8010df8 <__sflush_r>
 8010f32:	4b07      	ldr	r3, [pc, #28]	; (8010f50 <_fflush_r+0x4c>)
 8010f34:	429c      	cmp	r4, r3
 8010f36:	d101      	bne.n	8010f3c <_fflush_r+0x38>
 8010f38:	68ac      	ldr	r4, [r5, #8]
 8010f3a:	e7f1      	b.n	8010f20 <_fflush_r+0x1c>
 8010f3c:	4b05      	ldr	r3, [pc, #20]	; (8010f54 <_fflush_r+0x50>)
 8010f3e:	429c      	cmp	r4, r3
 8010f40:	bf08      	it	eq
 8010f42:	68ec      	ldreq	r4, [r5, #12]
 8010f44:	e7ec      	b.n	8010f20 <_fflush_r+0x1c>
 8010f46:	2000      	movs	r0, #0
 8010f48:	bd38      	pop	{r3, r4, r5, pc}
 8010f4a:	bf00      	nop
 8010f4c:	08012820 	.word	0x08012820
 8010f50:	08012840 	.word	0x08012840
 8010f54:	08012800 	.word	0x08012800

08010f58 <std>:
 8010f58:	2300      	movs	r3, #0
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f62:	6083      	str	r3, [r0, #8]
 8010f64:	8181      	strh	r1, [r0, #12]
 8010f66:	6643      	str	r3, [r0, #100]	; 0x64
 8010f68:	81c2      	strh	r2, [r0, #14]
 8010f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f6e:	6183      	str	r3, [r0, #24]
 8010f70:	4619      	mov	r1, r3
 8010f72:	2208      	movs	r2, #8
 8010f74:	305c      	adds	r0, #92	; 0x5c
 8010f76:	f7fd fa74 	bl	800e462 <memset>
 8010f7a:	4b05      	ldr	r3, [pc, #20]	; (8010f90 <std+0x38>)
 8010f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f7e:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <std+0x3c>)
 8010f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f82:	4b05      	ldr	r3, [pc, #20]	; (8010f98 <std+0x40>)
 8010f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <std+0x44>)
 8010f88:	6224      	str	r4, [r4, #32]
 8010f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f8c:	bd10      	pop	{r4, pc}
 8010f8e:	bf00      	nop
 8010f90:	080122f5 	.word	0x080122f5
 8010f94:	08012317 	.word	0x08012317
 8010f98:	0801234f 	.word	0x0801234f
 8010f9c:	08012373 	.word	0x08012373

08010fa0 <_cleanup_r>:
 8010fa0:	4901      	ldr	r1, [pc, #4]	; (8010fa8 <_cleanup_r+0x8>)
 8010fa2:	f000 b885 	b.w	80110b0 <_fwalk_reent>
 8010fa6:	bf00      	nop
 8010fa8:	08010f05 	.word	0x08010f05

08010fac <__sfmoreglue>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	1e4a      	subs	r2, r1, #1
 8010fb0:	2568      	movs	r5, #104	; 0x68
 8010fb2:	4355      	muls	r5, r2
 8010fb4:	460e      	mov	r6, r1
 8010fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fba:	f7fd fab7 	bl	800e52c <_malloc_r>
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	b140      	cbz	r0, 8010fd4 <__sfmoreglue+0x28>
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8010fc8:	300c      	adds	r0, #12
 8010fca:	60a0      	str	r0, [r4, #8]
 8010fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fd0:	f7fd fa47 	bl	800e462 <memset>
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}

08010fd8 <__sinit>:
 8010fd8:	6983      	ldr	r3, [r0, #24]
 8010fda:	b510      	push	{r4, lr}
 8010fdc:	4604      	mov	r4, r0
 8010fde:	bb33      	cbnz	r3, 801102e <__sinit+0x56>
 8010fe0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010fe4:	6503      	str	r3, [r0, #80]	; 0x50
 8010fe6:	4b12      	ldr	r3, [pc, #72]	; (8011030 <__sinit+0x58>)
 8010fe8:	4a12      	ldr	r2, [pc, #72]	; (8011034 <__sinit+0x5c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	6282      	str	r2, [r0, #40]	; 0x28
 8010fee:	4298      	cmp	r0, r3
 8010ff0:	bf04      	itt	eq
 8010ff2:	2301      	moveq	r3, #1
 8010ff4:	6183      	streq	r3, [r0, #24]
 8010ff6:	f000 f81f 	bl	8011038 <__sfp>
 8010ffa:	6060      	str	r0, [r4, #4]
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 f81b 	bl	8011038 <__sfp>
 8011002:	60a0      	str	r0, [r4, #8]
 8011004:	4620      	mov	r0, r4
 8011006:	f000 f817 	bl	8011038 <__sfp>
 801100a:	2200      	movs	r2, #0
 801100c:	60e0      	str	r0, [r4, #12]
 801100e:	2104      	movs	r1, #4
 8011010:	6860      	ldr	r0, [r4, #4]
 8011012:	f7ff ffa1 	bl	8010f58 <std>
 8011016:	2201      	movs	r2, #1
 8011018:	2109      	movs	r1, #9
 801101a:	68a0      	ldr	r0, [r4, #8]
 801101c:	f7ff ff9c 	bl	8010f58 <std>
 8011020:	2202      	movs	r2, #2
 8011022:	2112      	movs	r1, #18
 8011024:	68e0      	ldr	r0, [r4, #12]
 8011026:	f7ff ff97 	bl	8010f58 <std>
 801102a:	2301      	movs	r3, #1
 801102c:	61a3      	str	r3, [r4, #24]
 801102e:	bd10      	pop	{r4, pc}
 8011030:	08012760 	.word	0x08012760
 8011034:	08010fa1 	.word	0x08010fa1

08011038 <__sfp>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	4b1b      	ldr	r3, [pc, #108]	; (80110a8 <__sfp+0x70>)
 801103c:	681e      	ldr	r6, [r3, #0]
 801103e:	69b3      	ldr	r3, [r6, #24]
 8011040:	4607      	mov	r7, r0
 8011042:	b913      	cbnz	r3, 801104a <__sfp+0x12>
 8011044:	4630      	mov	r0, r6
 8011046:	f7ff ffc7 	bl	8010fd8 <__sinit>
 801104a:	3648      	adds	r6, #72	; 0x48
 801104c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011050:	3b01      	subs	r3, #1
 8011052:	d503      	bpl.n	801105c <__sfp+0x24>
 8011054:	6833      	ldr	r3, [r6, #0]
 8011056:	b133      	cbz	r3, 8011066 <__sfp+0x2e>
 8011058:	6836      	ldr	r6, [r6, #0]
 801105a:	e7f7      	b.n	801104c <__sfp+0x14>
 801105c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011060:	b16d      	cbz	r5, 801107e <__sfp+0x46>
 8011062:	3468      	adds	r4, #104	; 0x68
 8011064:	e7f4      	b.n	8011050 <__sfp+0x18>
 8011066:	2104      	movs	r1, #4
 8011068:	4638      	mov	r0, r7
 801106a:	f7ff ff9f 	bl	8010fac <__sfmoreglue>
 801106e:	6030      	str	r0, [r6, #0]
 8011070:	2800      	cmp	r0, #0
 8011072:	d1f1      	bne.n	8011058 <__sfp+0x20>
 8011074:	230c      	movs	r3, #12
 8011076:	603b      	str	r3, [r7, #0]
 8011078:	4604      	mov	r4, r0
 801107a:	4620      	mov	r0, r4
 801107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801107e:	4b0b      	ldr	r3, [pc, #44]	; (80110ac <__sfp+0x74>)
 8011080:	6665      	str	r5, [r4, #100]	; 0x64
 8011082:	e9c4 5500 	strd	r5, r5, [r4]
 8011086:	60a5      	str	r5, [r4, #8]
 8011088:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801108c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011090:	2208      	movs	r2, #8
 8011092:	4629      	mov	r1, r5
 8011094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011098:	f7fd f9e3 	bl	800e462 <memset>
 801109c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110a4:	e7e9      	b.n	801107a <__sfp+0x42>
 80110a6:	bf00      	nop
 80110a8:	08012760 	.word	0x08012760
 80110ac:	ffff0001 	.word	0xffff0001

080110b0 <_fwalk_reent>:
 80110b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b4:	4680      	mov	r8, r0
 80110b6:	4689      	mov	r9, r1
 80110b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110bc:	2600      	movs	r6, #0
 80110be:	b914      	cbnz	r4, 80110c6 <_fwalk_reent+0x16>
 80110c0:	4630      	mov	r0, r6
 80110c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80110ca:	3f01      	subs	r7, #1
 80110cc:	d501      	bpl.n	80110d2 <_fwalk_reent+0x22>
 80110ce:	6824      	ldr	r4, [r4, #0]
 80110d0:	e7f5      	b.n	80110be <_fwalk_reent+0xe>
 80110d2:	89ab      	ldrh	r3, [r5, #12]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d907      	bls.n	80110e8 <_fwalk_reent+0x38>
 80110d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110dc:	3301      	adds	r3, #1
 80110de:	d003      	beq.n	80110e8 <_fwalk_reent+0x38>
 80110e0:	4629      	mov	r1, r5
 80110e2:	4640      	mov	r0, r8
 80110e4:	47c8      	blx	r9
 80110e6:	4306      	orrs	r6, r0
 80110e8:	3568      	adds	r5, #104	; 0x68
 80110ea:	e7ee      	b.n	80110ca <_fwalk_reent+0x1a>

080110ec <rshift>:
 80110ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ee:	6906      	ldr	r6, [r0, #16]
 80110f0:	114b      	asrs	r3, r1, #5
 80110f2:	429e      	cmp	r6, r3
 80110f4:	f100 0414 	add.w	r4, r0, #20
 80110f8:	dd30      	ble.n	801115c <rshift+0x70>
 80110fa:	f011 011f 	ands.w	r1, r1, #31
 80110fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011102:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011106:	d108      	bne.n	801111a <rshift+0x2e>
 8011108:	4621      	mov	r1, r4
 801110a:	42b2      	cmp	r2, r6
 801110c:	460b      	mov	r3, r1
 801110e:	d211      	bcs.n	8011134 <rshift+0x48>
 8011110:	f852 3b04 	ldr.w	r3, [r2], #4
 8011114:	f841 3b04 	str.w	r3, [r1], #4
 8011118:	e7f7      	b.n	801110a <rshift+0x1e>
 801111a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801111e:	f1c1 0c20 	rsb	ip, r1, #32
 8011122:	40cd      	lsrs	r5, r1
 8011124:	3204      	adds	r2, #4
 8011126:	4623      	mov	r3, r4
 8011128:	42b2      	cmp	r2, r6
 801112a:	4617      	mov	r7, r2
 801112c:	d30c      	bcc.n	8011148 <rshift+0x5c>
 801112e:	601d      	str	r5, [r3, #0]
 8011130:	b105      	cbz	r5, 8011134 <rshift+0x48>
 8011132:	3304      	adds	r3, #4
 8011134:	1b1a      	subs	r2, r3, r4
 8011136:	42a3      	cmp	r3, r4
 8011138:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801113c:	bf08      	it	eq
 801113e:	2300      	moveq	r3, #0
 8011140:	6102      	str	r2, [r0, #16]
 8011142:	bf08      	it	eq
 8011144:	6143      	streq	r3, [r0, #20]
 8011146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011148:	683f      	ldr	r7, [r7, #0]
 801114a:	fa07 f70c 	lsl.w	r7, r7, ip
 801114e:	433d      	orrs	r5, r7
 8011150:	f843 5b04 	str.w	r5, [r3], #4
 8011154:	f852 5b04 	ldr.w	r5, [r2], #4
 8011158:	40cd      	lsrs	r5, r1
 801115a:	e7e5      	b.n	8011128 <rshift+0x3c>
 801115c:	4623      	mov	r3, r4
 801115e:	e7e9      	b.n	8011134 <rshift+0x48>

08011160 <__hexdig_fun>:
 8011160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011164:	2b09      	cmp	r3, #9
 8011166:	d802      	bhi.n	801116e <__hexdig_fun+0xe>
 8011168:	3820      	subs	r0, #32
 801116a:	b2c0      	uxtb	r0, r0
 801116c:	4770      	bx	lr
 801116e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011172:	2b05      	cmp	r3, #5
 8011174:	d801      	bhi.n	801117a <__hexdig_fun+0x1a>
 8011176:	3847      	subs	r0, #71	; 0x47
 8011178:	e7f7      	b.n	801116a <__hexdig_fun+0xa>
 801117a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801117e:	2b05      	cmp	r3, #5
 8011180:	d801      	bhi.n	8011186 <__hexdig_fun+0x26>
 8011182:	3827      	subs	r0, #39	; 0x27
 8011184:	e7f1      	b.n	801116a <__hexdig_fun+0xa>
 8011186:	2000      	movs	r0, #0
 8011188:	4770      	bx	lr

0801118a <__gethex>:
 801118a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118e:	b08b      	sub	sp, #44	; 0x2c
 8011190:	468a      	mov	sl, r1
 8011192:	9002      	str	r0, [sp, #8]
 8011194:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011196:	9306      	str	r3, [sp, #24]
 8011198:	4690      	mov	r8, r2
 801119a:	f000 fad0 	bl	801173e <__localeconv_l>
 801119e:	6803      	ldr	r3, [r0, #0]
 80111a0:	9303      	str	r3, [sp, #12]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ef f84c 	bl	8000240 <strlen>
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	9001      	str	r0, [sp, #4]
 80111ac:	4403      	add	r3, r0
 80111ae:	f04f 0b00 	mov.w	fp, #0
 80111b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111b6:	9307      	str	r3, [sp, #28]
 80111b8:	f8da 3000 	ldr.w	r3, [sl]
 80111bc:	3302      	adds	r3, #2
 80111be:	461f      	mov	r7, r3
 80111c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80111c4:	2830      	cmp	r0, #48	; 0x30
 80111c6:	d06c      	beq.n	80112a2 <__gethex+0x118>
 80111c8:	f7ff ffca 	bl	8011160 <__hexdig_fun>
 80111cc:	4604      	mov	r4, r0
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d16a      	bne.n	80112a8 <__gethex+0x11e>
 80111d2:	9a01      	ldr	r2, [sp, #4]
 80111d4:	9903      	ldr	r1, [sp, #12]
 80111d6:	4638      	mov	r0, r7
 80111d8:	f001 f8cf 	bl	801237a <strncmp>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d166      	bne.n	80112ae <__gethex+0x124>
 80111e0:	9b01      	ldr	r3, [sp, #4]
 80111e2:	5cf8      	ldrb	r0, [r7, r3]
 80111e4:	18fe      	adds	r6, r7, r3
 80111e6:	f7ff ffbb 	bl	8011160 <__hexdig_fun>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d062      	beq.n	80112b4 <__gethex+0x12a>
 80111ee:	4633      	mov	r3, r6
 80111f0:	7818      	ldrb	r0, [r3, #0]
 80111f2:	2830      	cmp	r0, #48	; 0x30
 80111f4:	461f      	mov	r7, r3
 80111f6:	f103 0301 	add.w	r3, r3, #1
 80111fa:	d0f9      	beq.n	80111f0 <__gethex+0x66>
 80111fc:	f7ff ffb0 	bl	8011160 <__hexdig_fun>
 8011200:	fab0 f580 	clz	r5, r0
 8011204:	096d      	lsrs	r5, r5, #5
 8011206:	4634      	mov	r4, r6
 8011208:	f04f 0b01 	mov.w	fp, #1
 801120c:	463a      	mov	r2, r7
 801120e:	4616      	mov	r6, r2
 8011210:	3201      	adds	r2, #1
 8011212:	7830      	ldrb	r0, [r6, #0]
 8011214:	f7ff ffa4 	bl	8011160 <__hexdig_fun>
 8011218:	2800      	cmp	r0, #0
 801121a:	d1f8      	bne.n	801120e <__gethex+0x84>
 801121c:	9a01      	ldr	r2, [sp, #4]
 801121e:	9903      	ldr	r1, [sp, #12]
 8011220:	4630      	mov	r0, r6
 8011222:	f001 f8aa 	bl	801237a <strncmp>
 8011226:	b950      	cbnz	r0, 801123e <__gethex+0xb4>
 8011228:	b954      	cbnz	r4, 8011240 <__gethex+0xb6>
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	18f4      	adds	r4, r6, r3
 801122e:	4622      	mov	r2, r4
 8011230:	4616      	mov	r6, r2
 8011232:	3201      	adds	r2, #1
 8011234:	7830      	ldrb	r0, [r6, #0]
 8011236:	f7ff ff93 	bl	8011160 <__hexdig_fun>
 801123a:	2800      	cmp	r0, #0
 801123c:	d1f8      	bne.n	8011230 <__gethex+0xa6>
 801123e:	b10c      	cbz	r4, 8011244 <__gethex+0xba>
 8011240:	1ba4      	subs	r4, r4, r6
 8011242:	00a4      	lsls	r4, r4, #2
 8011244:	7833      	ldrb	r3, [r6, #0]
 8011246:	2b50      	cmp	r3, #80	; 0x50
 8011248:	d001      	beq.n	801124e <__gethex+0xc4>
 801124a:	2b70      	cmp	r3, #112	; 0x70
 801124c:	d140      	bne.n	80112d0 <__gethex+0x146>
 801124e:	7873      	ldrb	r3, [r6, #1]
 8011250:	2b2b      	cmp	r3, #43	; 0x2b
 8011252:	d031      	beq.n	80112b8 <__gethex+0x12e>
 8011254:	2b2d      	cmp	r3, #45	; 0x2d
 8011256:	d033      	beq.n	80112c0 <__gethex+0x136>
 8011258:	1c71      	adds	r1, r6, #1
 801125a:	f04f 0900 	mov.w	r9, #0
 801125e:	7808      	ldrb	r0, [r1, #0]
 8011260:	f7ff ff7e 	bl	8011160 <__hexdig_fun>
 8011264:	1e43      	subs	r3, r0, #1
 8011266:	b2db      	uxtb	r3, r3
 8011268:	2b18      	cmp	r3, #24
 801126a:	d831      	bhi.n	80112d0 <__gethex+0x146>
 801126c:	f1a0 0210 	sub.w	r2, r0, #16
 8011270:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011274:	f7ff ff74 	bl	8011160 <__hexdig_fun>
 8011278:	1e43      	subs	r3, r0, #1
 801127a:	b2db      	uxtb	r3, r3
 801127c:	2b18      	cmp	r3, #24
 801127e:	d922      	bls.n	80112c6 <__gethex+0x13c>
 8011280:	f1b9 0f00 	cmp.w	r9, #0
 8011284:	d000      	beq.n	8011288 <__gethex+0xfe>
 8011286:	4252      	negs	r2, r2
 8011288:	4414      	add	r4, r2
 801128a:	f8ca 1000 	str.w	r1, [sl]
 801128e:	b30d      	cbz	r5, 80112d4 <__gethex+0x14a>
 8011290:	f1bb 0f00 	cmp.w	fp, #0
 8011294:	bf0c      	ite	eq
 8011296:	2706      	moveq	r7, #6
 8011298:	2700      	movne	r7, #0
 801129a:	4638      	mov	r0, r7
 801129c:	b00b      	add	sp, #44	; 0x2c
 801129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a2:	f10b 0b01 	add.w	fp, fp, #1
 80112a6:	e78a      	b.n	80111be <__gethex+0x34>
 80112a8:	2500      	movs	r5, #0
 80112aa:	462c      	mov	r4, r5
 80112ac:	e7ae      	b.n	801120c <__gethex+0x82>
 80112ae:	463e      	mov	r6, r7
 80112b0:	2501      	movs	r5, #1
 80112b2:	e7c7      	b.n	8011244 <__gethex+0xba>
 80112b4:	4604      	mov	r4, r0
 80112b6:	e7fb      	b.n	80112b0 <__gethex+0x126>
 80112b8:	f04f 0900 	mov.w	r9, #0
 80112bc:	1cb1      	adds	r1, r6, #2
 80112be:	e7ce      	b.n	801125e <__gethex+0xd4>
 80112c0:	f04f 0901 	mov.w	r9, #1
 80112c4:	e7fa      	b.n	80112bc <__gethex+0x132>
 80112c6:	230a      	movs	r3, #10
 80112c8:	fb03 0202 	mla	r2, r3, r2, r0
 80112cc:	3a10      	subs	r2, #16
 80112ce:	e7cf      	b.n	8011270 <__gethex+0xe6>
 80112d0:	4631      	mov	r1, r6
 80112d2:	e7da      	b.n	801128a <__gethex+0x100>
 80112d4:	1bf3      	subs	r3, r6, r7
 80112d6:	3b01      	subs	r3, #1
 80112d8:	4629      	mov	r1, r5
 80112da:	2b07      	cmp	r3, #7
 80112dc:	dc49      	bgt.n	8011372 <__gethex+0x1e8>
 80112de:	9802      	ldr	r0, [sp, #8]
 80112e0:	f000 fab6 	bl	8011850 <_Balloc>
 80112e4:	9b01      	ldr	r3, [sp, #4]
 80112e6:	f100 0914 	add.w	r9, r0, #20
 80112ea:	f04f 0b00 	mov.w	fp, #0
 80112ee:	f1c3 0301 	rsb	r3, r3, #1
 80112f2:	4605      	mov	r5, r0
 80112f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80112f8:	46da      	mov	sl, fp
 80112fa:	9308      	str	r3, [sp, #32]
 80112fc:	42b7      	cmp	r7, r6
 80112fe:	d33b      	bcc.n	8011378 <__gethex+0x1ee>
 8011300:	9804      	ldr	r0, [sp, #16]
 8011302:	f840 ab04 	str.w	sl, [r0], #4
 8011306:	eba0 0009 	sub.w	r0, r0, r9
 801130a:	1080      	asrs	r0, r0, #2
 801130c:	6128      	str	r0, [r5, #16]
 801130e:	0147      	lsls	r7, r0, #5
 8011310:	4650      	mov	r0, sl
 8011312:	f000 fb61 	bl	80119d8 <__hi0bits>
 8011316:	f8d8 6000 	ldr.w	r6, [r8]
 801131a:	1a3f      	subs	r7, r7, r0
 801131c:	42b7      	cmp	r7, r6
 801131e:	dd64      	ble.n	80113ea <__gethex+0x260>
 8011320:	1bbf      	subs	r7, r7, r6
 8011322:	4639      	mov	r1, r7
 8011324:	4628      	mov	r0, r5
 8011326:	f000 fe72 	bl	801200e <__any_on>
 801132a:	4682      	mov	sl, r0
 801132c:	b178      	cbz	r0, 801134e <__gethex+0x1c4>
 801132e:	1e7b      	subs	r3, r7, #1
 8011330:	1159      	asrs	r1, r3, #5
 8011332:	f003 021f 	and.w	r2, r3, #31
 8011336:	f04f 0a01 	mov.w	sl, #1
 801133a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801133e:	fa0a f202 	lsl.w	r2, sl, r2
 8011342:	420a      	tst	r2, r1
 8011344:	d003      	beq.n	801134e <__gethex+0x1c4>
 8011346:	4553      	cmp	r3, sl
 8011348:	dc46      	bgt.n	80113d8 <__gethex+0x24e>
 801134a:	f04f 0a02 	mov.w	sl, #2
 801134e:	4639      	mov	r1, r7
 8011350:	4628      	mov	r0, r5
 8011352:	f7ff fecb 	bl	80110ec <rshift>
 8011356:	443c      	add	r4, r7
 8011358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801135c:	42a3      	cmp	r3, r4
 801135e:	da52      	bge.n	8011406 <__gethex+0x27c>
 8011360:	4629      	mov	r1, r5
 8011362:	9802      	ldr	r0, [sp, #8]
 8011364:	f000 faa8 	bl	80118b8 <_Bfree>
 8011368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801136a:	2300      	movs	r3, #0
 801136c:	6013      	str	r3, [r2, #0]
 801136e:	27a3      	movs	r7, #163	; 0xa3
 8011370:	e793      	b.n	801129a <__gethex+0x110>
 8011372:	3101      	adds	r1, #1
 8011374:	105b      	asrs	r3, r3, #1
 8011376:	e7b0      	b.n	80112da <__gethex+0x150>
 8011378:	1e73      	subs	r3, r6, #1
 801137a:	9305      	str	r3, [sp, #20]
 801137c:	9a07      	ldr	r2, [sp, #28]
 801137e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011382:	4293      	cmp	r3, r2
 8011384:	d018      	beq.n	80113b8 <__gethex+0x22e>
 8011386:	f1bb 0f20 	cmp.w	fp, #32
 801138a:	d107      	bne.n	801139c <__gethex+0x212>
 801138c:	9b04      	ldr	r3, [sp, #16]
 801138e:	f8c3 a000 	str.w	sl, [r3]
 8011392:	3304      	adds	r3, #4
 8011394:	f04f 0a00 	mov.w	sl, #0
 8011398:	9304      	str	r3, [sp, #16]
 801139a:	46d3      	mov	fp, sl
 801139c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80113a0:	f7ff fede 	bl	8011160 <__hexdig_fun>
 80113a4:	f000 000f 	and.w	r0, r0, #15
 80113a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80113ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80113b0:	f10b 0b04 	add.w	fp, fp, #4
 80113b4:	9b05      	ldr	r3, [sp, #20]
 80113b6:	e00d      	b.n	80113d4 <__gethex+0x24a>
 80113b8:	9b05      	ldr	r3, [sp, #20]
 80113ba:	9a08      	ldr	r2, [sp, #32]
 80113bc:	4413      	add	r3, r2
 80113be:	42bb      	cmp	r3, r7
 80113c0:	d3e1      	bcc.n	8011386 <__gethex+0x1fc>
 80113c2:	4618      	mov	r0, r3
 80113c4:	9a01      	ldr	r2, [sp, #4]
 80113c6:	9903      	ldr	r1, [sp, #12]
 80113c8:	9309      	str	r3, [sp, #36]	; 0x24
 80113ca:	f000 ffd6 	bl	801237a <strncmp>
 80113ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d1d8      	bne.n	8011386 <__gethex+0x1fc>
 80113d4:	461e      	mov	r6, r3
 80113d6:	e791      	b.n	80112fc <__gethex+0x172>
 80113d8:	1eb9      	subs	r1, r7, #2
 80113da:	4628      	mov	r0, r5
 80113dc:	f000 fe17 	bl	801200e <__any_on>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	d0b2      	beq.n	801134a <__gethex+0x1c0>
 80113e4:	f04f 0a03 	mov.w	sl, #3
 80113e8:	e7b1      	b.n	801134e <__gethex+0x1c4>
 80113ea:	da09      	bge.n	8011400 <__gethex+0x276>
 80113ec:	1bf7      	subs	r7, r6, r7
 80113ee:	4629      	mov	r1, r5
 80113f0:	463a      	mov	r2, r7
 80113f2:	9802      	ldr	r0, [sp, #8]
 80113f4:	f000 fc2c 	bl	8011c50 <__lshift>
 80113f8:	1be4      	subs	r4, r4, r7
 80113fa:	4605      	mov	r5, r0
 80113fc:	f100 0914 	add.w	r9, r0, #20
 8011400:	f04f 0a00 	mov.w	sl, #0
 8011404:	e7a8      	b.n	8011358 <__gethex+0x1ce>
 8011406:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801140a:	42a0      	cmp	r0, r4
 801140c:	dd6a      	ble.n	80114e4 <__gethex+0x35a>
 801140e:	1b04      	subs	r4, r0, r4
 8011410:	42a6      	cmp	r6, r4
 8011412:	dc2e      	bgt.n	8011472 <__gethex+0x2e8>
 8011414:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011418:	2b02      	cmp	r3, #2
 801141a:	d022      	beq.n	8011462 <__gethex+0x2d8>
 801141c:	2b03      	cmp	r3, #3
 801141e:	d024      	beq.n	801146a <__gethex+0x2e0>
 8011420:	2b01      	cmp	r3, #1
 8011422:	d115      	bne.n	8011450 <__gethex+0x2c6>
 8011424:	42a6      	cmp	r6, r4
 8011426:	d113      	bne.n	8011450 <__gethex+0x2c6>
 8011428:	2e01      	cmp	r6, #1
 801142a:	dc0b      	bgt.n	8011444 <__gethex+0x2ba>
 801142c:	9a06      	ldr	r2, [sp, #24]
 801142e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011432:	6013      	str	r3, [r2, #0]
 8011434:	2301      	movs	r3, #1
 8011436:	612b      	str	r3, [r5, #16]
 8011438:	f8c9 3000 	str.w	r3, [r9]
 801143c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801143e:	2762      	movs	r7, #98	; 0x62
 8011440:	601d      	str	r5, [r3, #0]
 8011442:	e72a      	b.n	801129a <__gethex+0x110>
 8011444:	1e71      	subs	r1, r6, #1
 8011446:	4628      	mov	r0, r5
 8011448:	f000 fde1 	bl	801200e <__any_on>
 801144c:	2800      	cmp	r0, #0
 801144e:	d1ed      	bne.n	801142c <__gethex+0x2a2>
 8011450:	4629      	mov	r1, r5
 8011452:	9802      	ldr	r0, [sp, #8]
 8011454:	f000 fa30 	bl	80118b8 <_Bfree>
 8011458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801145a:	2300      	movs	r3, #0
 801145c:	6013      	str	r3, [r2, #0]
 801145e:	2750      	movs	r7, #80	; 0x50
 8011460:	e71b      	b.n	801129a <__gethex+0x110>
 8011462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0e1      	beq.n	801142c <__gethex+0x2a2>
 8011468:	e7f2      	b.n	8011450 <__gethex+0x2c6>
 801146a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801146c:	2b00      	cmp	r3, #0
 801146e:	d1dd      	bne.n	801142c <__gethex+0x2a2>
 8011470:	e7ee      	b.n	8011450 <__gethex+0x2c6>
 8011472:	1e67      	subs	r7, r4, #1
 8011474:	f1ba 0f00 	cmp.w	sl, #0
 8011478:	d131      	bne.n	80114de <__gethex+0x354>
 801147a:	b127      	cbz	r7, 8011486 <__gethex+0x2fc>
 801147c:	4639      	mov	r1, r7
 801147e:	4628      	mov	r0, r5
 8011480:	f000 fdc5 	bl	801200e <__any_on>
 8011484:	4682      	mov	sl, r0
 8011486:	117a      	asrs	r2, r7, #5
 8011488:	2301      	movs	r3, #1
 801148a:	f007 071f 	and.w	r7, r7, #31
 801148e:	fa03 f707 	lsl.w	r7, r3, r7
 8011492:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8011496:	4621      	mov	r1, r4
 8011498:	421f      	tst	r7, r3
 801149a:	4628      	mov	r0, r5
 801149c:	bf18      	it	ne
 801149e:	f04a 0a02 	orrne.w	sl, sl, #2
 80114a2:	1b36      	subs	r6, r6, r4
 80114a4:	f7ff fe22 	bl	80110ec <rshift>
 80114a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80114ac:	2702      	movs	r7, #2
 80114ae:	f1ba 0f00 	cmp.w	sl, #0
 80114b2:	d048      	beq.n	8011546 <__gethex+0x3bc>
 80114b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d015      	beq.n	80114e8 <__gethex+0x35e>
 80114bc:	2b03      	cmp	r3, #3
 80114be:	d017      	beq.n	80114f0 <__gethex+0x366>
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d109      	bne.n	80114d8 <__gethex+0x34e>
 80114c4:	f01a 0f02 	tst.w	sl, #2
 80114c8:	d006      	beq.n	80114d8 <__gethex+0x34e>
 80114ca:	f8d9 3000 	ldr.w	r3, [r9]
 80114ce:	ea4a 0a03 	orr.w	sl, sl, r3
 80114d2:	f01a 0f01 	tst.w	sl, #1
 80114d6:	d10e      	bne.n	80114f6 <__gethex+0x36c>
 80114d8:	f047 0710 	orr.w	r7, r7, #16
 80114dc:	e033      	b.n	8011546 <__gethex+0x3bc>
 80114de:	f04f 0a01 	mov.w	sl, #1
 80114e2:	e7d0      	b.n	8011486 <__gethex+0x2fc>
 80114e4:	2701      	movs	r7, #1
 80114e6:	e7e2      	b.n	80114ae <__gethex+0x324>
 80114e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114ea:	f1c3 0301 	rsb	r3, r3, #1
 80114ee:	9315      	str	r3, [sp, #84]	; 0x54
 80114f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0f0      	beq.n	80114d8 <__gethex+0x34e>
 80114f6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80114fa:	f105 0314 	add.w	r3, r5, #20
 80114fe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8011502:	eb03 010a 	add.w	r1, r3, sl
 8011506:	f04f 0c00 	mov.w	ip, #0
 801150a:	4618      	mov	r0, r3
 801150c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011510:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011514:	d01c      	beq.n	8011550 <__gethex+0x3c6>
 8011516:	3201      	adds	r2, #1
 8011518:	6002      	str	r2, [r0, #0]
 801151a:	2f02      	cmp	r7, #2
 801151c:	f105 0314 	add.w	r3, r5, #20
 8011520:	d138      	bne.n	8011594 <__gethex+0x40a>
 8011522:	f8d8 2000 	ldr.w	r2, [r8]
 8011526:	3a01      	subs	r2, #1
 8011528:	42b2      	cmp	r2, r6
 801152a:	d10a      	bne.n	8011542 <__gethex+0x3b8>
 801152c:	1171      	asrs	r1, r6, #5
 801152e:	2201      	movs	r2, #1
 8011530:	f006 061f 	and.w	r6, r6, #31
 8011534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011538:	fa02 f606 	lsl.w	r6, r2, r6
 801153c:	421e      	tst	r6, r3
 801153e:	bf18      	it	ne
 8011540:	4617      	movne	r7, r2
 8011542:	f047 0720 	orr.w	r7, r7, #32
 8011546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011548:	601d      	str	r5, [r3, #0]
 801154a:	9b06      	ldr	r3, [sp, #24]
 801154c:	601c      	str	r4, [r3, #0]
 801154e:	e6a4      	b.n	801129a <__gethex+0x110>
 8011550:	4299      	cmp	r1, r3
 8011552:	f843 cc04 	str.w	ip, [r3, #-4]
 8011556:	d8d8      	bhi.n	801150a <__gethex+0x380>
 8011558:	68ab      	ldr	r3, [r5, #8]
 801155a:	4599      	cmp	r9, r3
 801155c:	db12      	blt.n	8011584 <__gethex+0x3fa>
 801155e:	6869      	ldr	r1, [r5, #4]
 8011560:	9802      	ldr	r0, [sp, #8]
 8011562:	3101      	adds	r1, #1
 8011564:	f000 f974 	bl	8011850 <_Balloc>
 8011568:	692a      	ldr	r2, [r5, #16]
 801156a:	3202      	adds	r2, #2
 801156c:	f105 010c 	add.w	r1, r5, #12
 8011570:	4683      	mov	fp, r0
 8011572:	0092      	lsls	r2, r2, #2
 8011574:	300c      	adds	r0, #12
 8011576:	f7fc ff69 	bl	800e44c <memcpy>
 801157a:	4629      	mov	r1, r5
 801157c:	9802      	ldr	r0, [sp, #8]
 801157e:	f000 f99b 	bl	80118b8 <_Bfree>
 8011582:	465d      	mov	r5, fp
 8011584:	692b      	ldr	r3, [r5, #16]
 8011586:	1c5a      	adds	r2, r3, #1
 8011588:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801158c:	612a      	str	r2, [r5, #16]
 801158e:	2201      	movs	r2, #1
 8011590:	615a      	str	r2, [r3, #20]
 8011592:	e7c2      	b.n	801151a <__gethex+0x390>
 8011594:	692a      	ldr	r2, [r5, #16]
 8011596:	454a      	cmp	r2, r9
 8011598:	dd0b      	ble.n	80115b2 <__gethex+0x428>
 801159a:	2101      	movs	r1, #1
 801159c:	4628      	mov	r0, r5
 801159e:	f7ff fda5 	bl	80110ec <rshift>
 80115a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115a6:	3401      	adds	r4, #1
 80115a8:	42a3      	cmp	r3, r4
 80115aa:	f6ff aed9 	blt.w	8011360 <__gethex+0x1d6>
 80115ae:	2701      	movs	r7, #1
 80115b0:	e7c7      	b.n	8011542 <__gethex+0x3b8>
 80115b2:	f016 061f 	ands.w	r6, r6, #31
 80115b6:	d0fa      	beq.n	80115ae <__gethex+0x424>
 80115b8:	449a      	add	sl, r3
 80115ba:	f1c6 0620 	rsb	r6, r6, #32
 80115be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80115c2:	f000 fa09 	bl	80119d8 <__hi0bits>
 80115c6:	42b0      	cmp	r0, r6
 80115c8:	dbe7      	blt.n	801159a <__gethex+0x410>
 80115ca:	e7f0      	b.n	80115ae <__gethex+0x424>

080115cc <L_shift>:
 80115cc:	f1c2 0208 	rsb	r2, r2, #8
 80115d0:	0092      	lsls	r2, r2, #2
 80115d2:	b570      	push	{r4, r5, r6, lr}
 80115d4:	f1c2 0620 	rsb	r6, r2, #32
 80115d8:	6843      	ldr	r3, [r0, #4]
 80115da:	6804      	ldr	r4, [r0, #0]
 80115dc:	fa03 f506 	lsl.w	r5, r3, r6
 80115e0:	432c      	orrs	r4, r5
 80115e2:	40d3      	lsrs	r3, r2
 80115e4:	6004      	str	r4, [r0, #0]
 80115e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80115ea:	4288      	cmp	r0, r1
 80115ec:	d3f4      	bcc.n	80115d8 <L_shift+0xc>
 80115ee:	bd70      	pop	{r4, r5, r6, pc}

080115f0 <__match>:
 80115f0:	b530      	push	{r4, r5, lr}
 80115f2:	6803      	ldr	r3, [r0, #0]
 80115f4:	3301      	adds	r3, #1
 80115f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115fa:	b914      	cbnz	r4, 8011602 <__match+0x12>
 80115fc:	6003      	str	r3, [r0, #0]
 80115fe:	2001      	movs	r0, #1
 8011600:	bd30      	pop	{r4, r5, pc}
 8011602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801160a:	2d19      	cmp	r5, #25
 801160c:	bf98      	it	ls
 801160e:	3220      	addls	r2, #32
 8011610:	42a2      	cmp	r2, r4
 8011612:	d0f0      	beq.n	80115f6 <__match+0x6>
 8011614:	2000      	movs	r0, #0
 8011616:	e7f3      	b.n	8011600 <__match+0x10>

08011618 <__hexnan>:
 8011618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	680b      	ldr	r3, [r1, #0]
 801161e:	6801      	ldr	r1, [r0, #0]
 8011620:	115f      	asrs	r7, r3, #5
 8011622:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011626:	f013 031f 	ands.w	r3, r3, #31
 801162a:	b087      	sub	sp, #28
 801162c:	bf18      	it	ne
 801162e:	3704      	addne	r7, #4
 8011630:	2500      	movs	r5, #0
 8011632:	1f3e      	subs	r6, r7, #4
 8011634:	4682      	mov	sl, r0
 8011636:	4690      	mov	r8, r2
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	f847 5c04 	str.w	r5, [r7, #-4]
 801163e:	46b1      	mov	r9, r6
 8011640:	4634      	mov	r4, r6
 8011642:	9502      	str	r5, [sp, #8]
 8011644:	46ab      	mov	fp, r5
 8011646:	784a      	ldrb	r2, [r1, #1]
 8011648:	1c4b      	adds	r3, r1, #1
 801164a:	9303      	str	r3, [sp, #12]
 801164c:	b342      	cbz	r2, 80116a0 <__hexnan+0x88>
 801164e:	4610      	mov	r0, r2
 8011650:	9105      	str	r1, [sp, #20]
 8011652:	9204      	str	r2, [sp, #16]
 8011654:	f7ff fd84 	bl	8011160 <__hexdig_fun>
 8011658:	2800      	cmp	r0, #0
 801165a:	d143      	bne.n	80116e4 <__hexnan+0xcc>
 801165c:	9a04      	ldr	r2, [sp, #16]
 801165e:	9905      	ldr	r1, [sp, #20]
 8011660:	2a20      	cmp	r2, #32
 8011662:	d818      	bhi.n	8011696 <__hexnan+0x7e>
 8011664:	9b02      	ldr	r3, [sp, #8]
 8011666:	459b      	cmp	fp, r3
 8011668:	dd13      	ble.n	8011692 <__hexnan+0x7a>
 801166a:	454c      	cmp	r4, r9
 801166c:	d206      	bcs.n	801167c <__hexnan+0x64>
 801166e:	2d07      	cmp	r5, #7
 8011670:	dc04      	bgt.n	801167c <__hexnan+0x64>
 8011672:	462a      	mov	r2, r5
 8011674:	4649      	mov	r1, r9
 8011676:	4620      	mov	r0, r4
 8011678:	f7ff ffa8 	bl	80115cc <L_shift>
 801167c:	4544      	cmp	r4, r8
 801167e:	d944      	bls.n	801170a <__hexnan+0xf2>
 8011680:	2300      	movs	r3, #0
 8011682:	f1a4 0904 	sub.w	r9, r4, #4
 8011686:	f844 3c04 	str.w	r3, [r4, #-4]
 801168a:	f8cd b008 	str.w	fp, [sp, #8]
 801168e:	464c      	mov	r4, r9
 8011690:	461d      	mov	r5, r3
 8011692:	9903      	ldr	r1, [sp, #12]
 8011694:	e7d7      	b.n	8011646 <__hexnan+0x2e>
 8011696:	2a29      	cmp	r2, #41	; 0x29
 8011698:	d14a      	bne.n	8011730 <__hexnan+0x118>
 801169a:	3102      	adds	r1, #2
 801169c:	f8ca 1000 	str.w	r1, [sl]
 80116a0:	f1bb 0f00 	cmp.w	fp, #0
 80116a4:	d044      	beq.n	8011730 <__hexnan+0x118>
 80116a6:	454c      	cmp	r4, r9
 80116a8:	d206      	bcs.n	80116b8 <__hexnan+0xa0>
 80116aa:	2d07      	cmp	r5, #7
 80116ac:	dc04      	bgt.n	80116b8 <__hexnan+0xa0>
 80116ae:	462a      	mov	r2, r5
 80116b0:	4649      	mov	r1, r9
 80116b2:	4620      	mov	r0, r4
 80116b4:	f7ff ff8a 	bl	80115cc <L_shift>
 80116b8:	4544      	cmp	r4, r8
 80116ba:	d928      	bls.n	801170e <__hexnan+0xf6>
 80116bc:	4643      	mov	r3, r8
 80116be:	f854 2b04 	ldr.w	r2, [r4], #4
 80116c2:	f843 2b04 	str.w	r2, [r3], #4
 80116c6:	42a6      	cmp	r6, r4
 80116c8:	d2f9      	bcs.n	80116be <__hexnan+0xa6>
 80116ca:	2200      	movs	r2, #0
 80116cc:	f843 2b04 	str.w	r2, [r3], #4
 80116d0:	429e      	cmp	r6, r3
 80116d2:	d2fb      	bcs.n	80116cc <__hexnan+0xb4>
 80116d4:	6833      	ldr	r3, [r6, #0]
 80116d6:	b91b      	cbnz	r3, 80116e0 <__hexnan+0xc8>
 80116d8:	4546      	cmp	r6, r8
 80116da:	d127      	bne.n	801172c <__hexnan+0x114>
 80116dc:	2301      	movs	r3, #1
 80116de:	6033      	str	r3, [r6, #0]
 80116e0:	2005      	movs	r0, #5
 80116e2:	e026      	b.n	8011732 <__hexnan+0x11a>
 80116e4:	3501      	adds	r5, #1
 80116e6:	2d08      	cmp	r5, #8
 80116e8:	f10b 0b01 	add.w	fp, fp, #1
 80116ec:	dd06      	ble.n	80116fc <__hexnan+0xe4>
 80116ee:	4544      	cmp	r4, r8
 80116f0:	d9cf      	bls.n	8011692 <__hexnan+0x7a>
 80116f2:	2300      	movs	r3, #0
 80116f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80116f8:	2501      	movs	r5, #1
 80116fa:	3c04      	subs	r4, #4
 80116fc:	6822      	ldr	r2, [r4, #0]
 80116fe:	f000 000f 	and.w	r0, r0, #15
 8011702:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011706:	6020      	str	r0, [r4, #0]
 8011708:	e7c3      	b.n	8011692 <__hexnan+0x7a>
 801170a:	2508      	movs	r5, #8
 801170c:	e7c1      	b.n	8011692 <__hexnan+0x7a>
 801170e:	9b01      	ldr	r3, [sp, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d0df      	beq.n	80116d4 <__hexnan+0xbc>
 8011714:	f04f 32ff 	mov.w	r2, #4294967295
 8011718:	f1c3 0320 	rsb	r3, r3, #32
 801171c:	fa22 f303 	lsr.w	r3, r2, r3
 8011720:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011724:	401a      	ands	r2, r3
 8011726:	f847 2c04 	str.w	r2, [r7, #-4]
 801172a:	e7d3      	b.n	80116d4 <__hexnan+0xbc>
 801172c:	3e04      	subs	r6, #4
 801172e:	e7d1      	b.n	80116d4 <__hexnan+0xbc>
 8011730:	2004      	movs	r0, #4
 8011732:	b007      	add	sp, #28
 8011734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011738 <__locale_ctype_ptr_l>:
 8011738:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801173c:	4770      	bx	lr

0801173e <__localeconv_l>:
 801173e:	30f0      	adds	r0, #240	; 0xf0
 8011740:	4770      	bx	lr
	...

08011744 <_localeconv_r>:
 8011744:	4b04      	ldr	r3, [pc, #16]	; (8011758 <_localeconv_r+0x14>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	6a18      	ldr	r0, [r3, #32]
 801174a:	4b04      	ldr	r3, [pc, #16]	; (801175c <_localeconv_r+0x18>)
 801174c:	2800      	cmp	r0, #0
 801174e:	bf08      	it	eq
 8011750:	4618      	moveq	r0, r3
 8011752:	30f0      	adds	r0, #240	; 0xf0
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	20000370 	.word	0x20000370
 801175c:	200003d4 	.word	0x200003d4

08011760 <__swhatbuf_r>:
 8011760:	b570      	push	{r4, r5, r6, lr}
 8011762:	460e      	mov	r6, r1
 8011764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011768:	2900      	cmp	r1, #0
 801176a:	b096      	sub	sp, #88	; 0x58
 801176c:	4614      	mov	r4, r2
 801176e:	461d      	mov	r5, r3
 8011770:	da07      	bge.n	8011782 <__swhatbuf_r+0x22>
 8011772:	2300      	movs	r3, #0
 8011774:	602b      	str	r3, [r5, #0]
 8011776:	89b3      	ldrh	r3, [r6, #12]
 8011778:	061a      	lsls	r2, r3, #24
 801177a:	d410      	bmi.n	801179e <__swhatbuf_r+0x3e>
 801177c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011780:	e00e      	b.n	80117a0 <__swhatbuf_r+0x40>
 8011782:	466a      	mov	r2, sp
 8011784:	f000 fe3a 	bl	80123fc <_fstat_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	dbf2      	blt.n	8011772 <__swhatbuf_r+0x12>
 801178c:	9a01      	ldr	r2, [sp, #4]
 801178e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011796:	425a      	negs	r2, r3
 8011798:	415a      	adcs	r2, r3
 801179a:	602a      	str	r2, [r5, #0]
 801179c:	e7ee      	b.n	801177c <__swhatbuf_r+0x1c>
 801179e:	2340      	movs	r3, #64	; 0x40
 80117a0:	2000      	movs	r0, #0
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	b016      	add	sp, #88	; 0x58
 80117a6:	bd70      	pop	{r4, r5, r6, pc}

080117a8 <__smakebuf_r>:
 80117a8:	898b      	ldrh	r3, [r1, #12]
 80117aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117ac:	079d      	lsls	r5, r3, #30
 80117ae:	4606      	mov	r6, r0
 80117b0:	460c      	mov	r4, r1
 80117b2:	d507      	bpl.n	80117c4 <__smakebuf_r+0x1c>
 80117b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117b8:	6023      	str	r3, [r4, #0]
 80117ba:	6123      	str	r3, [r4, #16]
 80117bc:	2301      	movs	r3, #1
 80117be:	6163      	str	r3, [r4, #20]
 80117c0:	b002      	add	sp, #8
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	ab01      	add	r3, sp, #4
 80117c6:	466a      	mov	r2, sp
 80117c8:	f7ff ffca 	bl	8011760 <__swhatbuf_r>
 80117cc:	9900      	ldr	r1, [sp, #0]
 80117ce:	4605      	mov	r5, r0
 80117d0:	4630      	mov	r0, r6
 80117d2:	f7fc feab 	bl	800e52c <_malloc_r>
 80117d6:	b948      	cbnz	r0, 80117ec <__smakebuf_r+0x44>
 80117d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117dc:	059a      	lsls	r2, r3, #22
 80117de:	d4ef      	bmi.n	80117c0 <__smakebuf_r+0x18>
 80117e0:	f023 0303 	bic.w	r3, r3, #3
 80117e4:	f043 0302 	orr.w	r3, r3, #2
 80117e8:	81a3      	strh	r3, [r4, #12]
 80117ea:	e7e3      	b.n	80117b4 <__smakebuf_r+0xc>
 80117ec:	4b0d      	ldr	r3, [pc, #52]	; (8011824 <__smakebuf_r+0x7c>)
 80117ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	6020      	str	r0, [r4, #0]
 80117f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117f8:	81a3      	strh	r3, [r4, #12]
 80117fa:	9b00      	ldr	r3, [sp, #0]
 80117fc:	6163      	str	r3, [r4, #20]
 80117fe:	9b01      	ldr	r3, [sp, #4]
 8011800:	6120      	str	r0, [r4, #16]
 8011802:	b15b      	cbz	r3, 801181c <__smakebuf_r+0x74>
 8011804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011808:	4630      	mov	r0, r6
 801180a:	f000 fe09 	bl	8012420 <_isatty_r>
 801180e:	b128      	cbz	r0, 801181c <__smakebuf_r+0x74>
 8011810:	89a3      	ldrh	r3, [r4, #12]
 8011812:	f023 0303 	bic.w	r3, r3, #3
 8011816:	f043 0301 	orr.w	r3, r3, #1
 801181a:	81a3      	strh	r3, [r4, #12]
 801181c:	89a3      	ldrh	r3, [r4, #12]
 801181e:	431d      	orrs	r5, r3
 8011820:	81a5      	strh	r5, [r4, #12]
 8011822:	e7cd      	b.n	80117c0 <__smakebuf_r+0x18>
 8011824:	08010fa1 	.word	0x08010fa1

08011828 <__ascii_mbtowc>:
 8011828:	b082      	sub	sp, #8
 801182a:	b901      	cbnz	r1, 801182e <__ascii_mbtowc+0x6>
 801182c:	a901      	add	r1, sp, #4
 801182e:	b142      	cbz	r2, 8011842 <__ascii_mbtowc+0x1a>
 8011830:	b14b      	cbz	r3, 8011846 <__ascii_mbtowc+0x1e>
 8011832:	7813      	ldrb	r3, [r2, #0]
 8011834:	600b      	str	r3, [r1, #0]
 8011836:	7812      	ldrb	r2, [r2, #0]
 8011838:	1c10      	adds	r0, r2, #0
 801183a:	bf18      	it	ne
 801183c:	2001      	movne	r0, #1
 801183e:	b002      	add	sp, #8
 8011840:	4770      	bx	lr
 8011842:	4610      	mov	r0, r2
 8011844:	e7fb      	b.n	801183e <__ascii_mbtowc+0x16>
 8011846:	f06f 0001 	mvn.w	r0, #1
 801184a:	e7f8      	b.n	801183e <__ascii_mbtowc+0x16>

0801184c <__malloc_lock>:
 801184c:	4770      	bx	lr

0801184e <__malloc_unlock>:
 801184e:	4770      	bx	lr

08011850 <_Balloc>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011854:	4604      	mov	r4, r0
 8011856:	460e      	mov	r6, r1
 8011858:	b93d      	cbnz	r5, 801186a <_Balloc+0x1a>
 801185a:	2010      	movs	r0, #16
 801185c:	f7fc fdee 	bl	800e43c <malloc>
 8011860:	6260      	str	r0, [r4, #36]	; 0x24
 8011862:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011866:	6005      	str	r5, [r0, #0]
 8011868:	60c5      	str	r5, [r0, #12]
 801186a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801186c:	68eb      	ldr	r3, [r5, #12]
 801186e:	b183      	cbz	r3, 8011892 <_Balloc+0x42>
 8011870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011878:	b9b8      	cbnz	r0, 80118aa <_Balloc+0x5a>
 801187a:	2101      	movs	r1, #1
 801187c:	fa01 f506 	lsl.w	r5, r1, r6
 8011880:	1d6a      	adds	r2, r5, #5
 8011882:	0092      	lsls	r2, r2, #2
 8011884:	4620      	mov	r0, r4
 8011886:	f7fc fdf4 	bl	800e472 <_calloc_r>
 801188a:	b160      	cbz	r0, 80118a6 <_Balloc+0x56>
 801188c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011890:	e00e      	b.n	80118b0 <_Balloc+0x60>
 8011892:	2221      	movs	r2, #33	; 0x21
 8011894:	2104      	movs	r1, #4
 8011896:	4620      	mov	r0, r4
 8011898:	f7fc fdeb 	bl	800e472 <_calloc_r>
 801189c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801189e:	60e8      	str	r0, [r5, #12]
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1e4      	bne.n	8011870 <_Balloc+0x20>
 80118a6:	2000      	movs	r0, #0
 80118a8:	bd70      	pop	{r4, r5, r6, pc}
 80118aa:	6802      	ldr	r2, [r0, #0]
 80118ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80118b0:	2300      	movs	r3, #0
 80118b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80118b6:	e7f7      	b.n	80118a8 <_Balloc+0x58>

080118b8 <_Bfree>:
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80118bc:	4606      	mov	r6, r0
 80118be:	460d      	mov	r5, r1
 80118c0:	b93c      	cbnz	r4, 80118d2 <_Bfree+0x1a>
 80118c2:	2010      	movs	r0, #16
 80118c4:	f7fc fdba 	bl	800e43c <malloc>
 80118c8:	6270      	str	r0, [r6, #36]	; 0x24
 80118ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118ce:	6004      	str	r4, [r0, #0]
 80118d0:	60c4      	str	r4, [r0, #12]
 80118d2:	b13d      	cbz	r5, 80118e4 <_Bfree+0x2c>
 80118d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80118d6:	686a      	ldr	r2, [r5, #4]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118de:	6029      	str	r1, [r5, #0]
 80118e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80118e4:	bd70      	pop	{r4, r5, r6, pc}

080118e6 <__multadd>:
 80118e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ea:	690d      	ldr	r5, [r1, #16]
 80118ec:	461f      	mov	r7, r3
 80118ee:	4606      	mov	r6, r0
 80118f0:	460c      	mov	r4, r1
 80118f2:	f101 0c14 	add.w	ip, r1, #20
 80118f6:	2300      	movs	r3, #0
 80118f8:	f8dc 0000 	ldr.w	r0, [ip]
 80118fc:	b281      	uxth	r1, r0
 80118fe:	fb02 7101 	mla	r1, r2, r1, r7
 8011902:	0c0f      	lsrs	r7, r1, #16
 8011904:	0c00      	lsrs	r0, r0, #16
 8011906:	fb02 7000 	mla	r0, r2, r0, r7
 801190a:	b289      	uxth	r1, r1
 801190c:	3301      	adds	r3, #1
 801190e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011912:	429d      	cmp	r5, r3
 8011914:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011918:	f84c 1b04 	str.w	r1, [ip], #4
 801191c:	dcec      	bgt.n	80118f8 <__multadd+0x12>
 801191e:	b1d7      	cbz	r7, 8011956 <__multadd+0x70>
 8011920:	68a3      	ldr	r3, [r4, #8]
 8011922:	42ab      	cmp	r3, r5
 8011924:	dc12      	bgt.n	801194c <__multadd+0x66>
 8011926:	6861      	ldr	r1, [r4, #4]
 8011928:	4630      	mov	r0, r6
 801192a:	3101      	adds	r1, #1
 801192c:	f7ff ff90 	bl	8011850 <_Balloc>
 8011930:	6922      	ldr	r2, [r4, #16]
 8011932:	3202      	adds	r2, #2
 8011934:	f104 010c 	add.w	r1, r4, #12
 8011938:	4680      	mov	r8, r0
 801193a:	0092      	lsls	r2, r2, #2
 801193c:	300c      	adds	r0, #12
 801193e:	f7fc fd85 	bl	800e44c <memcpy>
 8011942:	4621      	mov	r1, r4
 8011944:	4630      	mov	r0, r6
 8011946:	f7ff ffb7 	bl	80118b8 <_Bfree>
 801194a:	4644      	mov	r4, r8
 801194c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011950:	3501      	adds	r5, #1
 8011952:	615f      	str	r7, [r3, #20]
 8011954:	6125      	str	r5, [r4, #16]
 8011956:	4620      	mov	r0, r4
 8011958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801195c <__s2b>:
 801195c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011960:	460c      	mov	r4, r1
 8011962:	4615      	mov	r5, r2
 8011964:	461f      	mov	r7, r3
 8011966:	2209      	movs	r2, #9
 8011968:	3308      	adds	r3, #8
 801196a:	4606      	mov	r6, r0
 801196c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011970:	2100      	movs	r1, #0
 8011972:	2201      	movs	r2, #1
 8011974:	429a      	cmp	r2, r3
 8011976:	db20      	blt.n	80119ba <__s2b+0x5e>
 8011978:	4630      	mov	r0, r6
 801197a:	f7ff ff69 	bl	8011850 <_Balloc>
 801197e:	9b08      	ldr	r3, [sp, #32]
 8011980:	6143      	str	r3, [r0, #20]
 8011982:	2d09      	cmp	r5, #9
 8011984:	f04f 0301 	mov.w	r3, #1
 8011988:	6103      	str	r3, [r0, #16]
 801198a:	dd19      	ble.n	80119c0 <__s2b+0x64>
 801198c:	f104 0809 	add.w	r8, r4, #9
 8011990:	46c1      	mov	r9, r8
 8011992:	442c      	add	r4, r5
 8011994:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011998:	4601      	mov	r1, r0
 801199a:	3b30      	subs	r3, #48	; 0x30
 801199c:	220a      	movs	r2, #10
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ff ffa1 	bl	80118e6 <__multadd>
 80119a4:	45a1      	cmp	r9, r4
 80119a6:	d1f5      	bne.n	8011994 <__s2b+0x38>
 80119a8:	eb08 0405 	add.w	r4, r8, r5
 80119ac:	3c08      	subs	r4, #8
 80119ae:	1b2d      	subs	r5, r5, r4
 80119b0:	1963      	adds	r3, r4, r5
 80119b2:	42bb      	cmp	r3, r7
 80119b4:	db07      	blt.n	80119c6 <__s2b+0x6a>
 80119b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ba:	0052      	lsls	r2, r2, #1
 80119bc:	3101      	adds	r1, #1
 80119be:	e7d9      	b.n	8011974 <__s2b+0x18>
 80119c0:	340a      	adds	r4, #10
 80119c2:	2509      	movs	r5, #9
 80119c4:	e7f3      	b.n	80119ae <__s2b+0x52>
 80119c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119ca:	4601      	mov	r1, r0
 80119cc:	3b30      	subs	r3, #48	; 0x30
 80119ce:	220a      	movs	r2, #10
 80119d0:	4630      	mov	r0, r6
 80119d2:	f7ff ff88 	bl	80118e6 <__multadd>
 80119d6:	e7eb      	b.n	80119b0 <__s2b+0x54>

080119d8 <__hi0bits>:
 80119d8:	0c02      	lsrs	r2, r0, #16
 80119da:	0412      	lsls	r2, r2, #16
 80119dc:	4603      	mov	r3, r0
 80119de:	b9b2      	cbnz	r2, 8011a0e <__hi0bits+0x36>
 80119e0:	0403      	lsls	r3, r0, #16
 80119e2:	2010      	movs	r0, #16
 80119e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80119e8:	bf04      	itt	eq
 80119ea:	021b      	lsleq	r3, r3, #8
 80119ec:	3008      	addeq	r0, #8
 80119ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80119f2:	bf04      	itt	eq
 80119f4:	011b      	lsleq	r3, r3, #4
 80119f6:	3004      	addeq	r0, #4
 80119f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80119fc:	bf04      	itt	eq
 80119fe:	009b      	lsleq	r3, r3, #2
 8011a00:	3002      	addeq	r0, #2
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	db06      	blt.n	8011a14 <__hi0bits+0x3c>
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	d503      	bpl.n	8011a12 <__hi0bits+0x3a>
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	4770      	bx	lr
 8011a0e:	2000      	movs	r0, #0
 8011a10:	e7e8      	b.n	80119e4 <__hi0bits+0xc>
 8011a12:	2020      	movs	r0, #32
 8011a14:	4770      	bx	lr

08011a16 <__lo0bits>:
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	f013 0207 	ands.w	r2, r3, #7
 8011a1c:	4601      	mov	r1, r0
 8011a1e:	d00b      	beq.n	8011a38 <__lo0bits+0x22>
 8011a20:	07da      	lsls	r2, r3, #31
 8011a22:	d423      	bmi.n	8011a6c <__lo0bits+0x56>
 8011a24:	0798      	lsls	r0, r3, #30
 8011a26:	bf49      	itett	mi
 8011a28:	085b      	lsrmi	r3, r3, #1
 8011a2a:	089b      	lsrpl	r3, r3, #2
 8011a2c:	2001      	movmi	r0, #1
 8011a2e:	600b      	strmi	r3, [r1, #0]
 8011a30:	bf5c      	itt	pl
 8011a32:	600b      	strpl	r3, [r1, #0]
 8011a34:	2002      	movpl	r0, #2
 8011a36:	4770      	bx	lr
 8011a38:	b298      	uxth	r0, r3
 8011a3a:	b9a8      	cbnz	r0, 8011a68 <__lo0bits+0x52>
 8011a3c:	0c1b      	lsrs	r3, r3, #16
 8011a3e:	2010      	movs	r0, #16
 8011a40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011a44:	bf04      	itt	eq
 8011a46:	0a1b      	lsreq	r3, r3, #8
 8011a48:	3008      	addeq	r0, #8
 8011a4a:	071a      	lsls	r2, r3, #28
 8011a4c:	bf04      	itt	eq
 8011a4e:	091b      	lsreq	r3, r3, #4
 8011a50:	3004      	addeq	r0, #4
 8011a52:	079a      	lsls	r2, r3, #30
 8011a54:	bf04      	itt	eq
 8011a56:	089b      	lsreq	r3, r3, #2
 8011a58:	3002      	addeq	r0, #2
 8011a5a:	07da      	lsls	r2, r3, #31
 8011a5c:	d402      	bmi.n	8011a64 <__lo0bits+0x4e>
 8011a5e:	085b      	lsrs	r3, r3, #1
 8011a60:	d006      	beq.n	8011a70 <__lo0bits+0x5a>
 8011a62:	3001      	adds	r0, #1
 8011a64:	600b      	str	r3, [r1, #0]
 8011a66:	4770      	bx	lr
 8011a68:	4610      	mov	r0, r2
 8011a6a:	e7e9      	b.n	8011a40 <__lo0bits+0x2a>
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	4770      	bx	lr
 8011a70:	2020      	movs	r0, #32
 8011a72:	4770      	bx	lr

08011a74 <__i2b>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	460c      	mov	r4, r1
 8011a78:	2101      	movs	r1, #1
 8011a7a:	f7ff fee9 	bl	8011850 <_Balloc>
 8011a7e:	2201      	movs	r2, #1
 8011a80:	6144      	str	r4, [r0, #20]
 8011a82:	6102      	str	r2, [r0, #16]
 8011a84:	bd10      	pop	{r4, pc}

08011a86 <__multiply>:
 8011a86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8a:	4614      	mov	r4, r2
 8011a8c:	690a      	ldr	r2, [r1, #16]
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	bfb8      	it	lt
 8011a94:	460b      	movlt	r3, r1
 8011a96:	4688      	mov	r8, r1
 8011a98:	bfbc      	itt	lt
 8011a9a:	46a0      	movlt	r8, r4
 8011a9c:	461c      	movlt	r4, r3
 8011a9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011aa2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011aaa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011aae:	eb07 0609 	add.w	r6, r7, r9
 8011ab2:	42b3      	cmp	r3, r6
 8011ab4:	bfb8      	it	lt
 8011ab6:	3101      	addlt	r1, #1
 8011ab8:	f7ff feca 	bl	8011850 <_Balloc>
 8011abc:	f100 0514 	add.w	r5, r0, #20
 8011ac0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011ac4:	462b      	mov	r3, r5
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	4573      	cmp	r3, lr
 8011aca:	d316      	bcc.n	8011afa <__multiply+0x74>
 8011acc:	f104 0214 	add.w	r2, r4, #20
 8011ad0:	f108 0114 	add.w	r1, r8, #20
 8011ad4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011ad8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	9b00      	ldr	r3, [sp, #0]
 8011ae0:	9201      	str	r2, [sp, #4]
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d80c      	bhi.n	8011b00 <__multiply+0x7a>
 8011ae6:	2e00      	cmp	r6, #0
 8011ae8:	dd03      	ble.n	8011af2 <__multiply+0x6c>
 8011aea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d05d      	beq.n	8011bae <__multiply+0x128>
 8011af2:	6106      	str	r6, [r0, #16]
 8011af4:	b003      	add	sp, #12
 8011af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afa:	f843 2b04 	str.w	r2, [r3], #4
 8011afe:	e7e3      	b.n	8011ac8 <__multiply+0x42>
 8011b00:	f8b2 b000 	ldrh.w	fp, [r2]
 8011b04:	f1bb 0f00 	cmp.w	fp, #0
 8011b08:	d023      	beq.n	8011b52 <__multiply+0xcc>
 8011b0a:	4689      	mov	r9, r1
 8011b0c:	46ac      	mov	ip, r5
 8011b0e:	f04f 0800 	mov.w	r8, #0
 8011b12:	f859 4b04 	ldr.w	r4, [r9], #4
 8011b16:	f8dc a000 	ldr.w	sl, [ip]
 8011b1a:	b2a3      	uxth	r3, r4
 8011b1c:	fa1f fa8a 	uxth.w	sl, sl
 8011b20:	fb0b a303 	mla	r3, fp, r3, sl
 8011b24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011b28:	f8dc 4000 	ldr.w	r4, [ip]
 8011b2c:	4443      	add	r3, r8
 8011b2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011b32:	fb0b 840a 	mla	r4, fp, sl, r8
 8011b36:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011b3a:	46e2      	mov	sl, ip
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011b42:	454f      	cmp	r7, r9
 8011b44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011b48:	f84a 3b04 	str.w	r3, [sl], #4
 8011b4c:	d82b      	bhi.n	8011ba6 <__multiply+0x120>
 8011b4e:	f8cc 8004 	str.w	r8, [ip, #4]
 8011b52:	9b01      	ldr	r3, [sp, #4]
 8011b54:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011b58:	3204      	adds	r2, #4
 8011b5a:	f1ba 0f00 	cmp.w	sl, #0
 8011b5e:	d020      	beq.n	8011ba2 <__multiply+0x11c>
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	4689      	mov	r9, r1
 8011b64:	46a8      	mov	r8, r5
 8011b66:	f04f 0b00 	mov.w	fp, #0
 8011b6a:	f8b9 c000 	ldrh.w	ip, [r9]
 8011b6e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011b72:	fb0a 440c 	mla	r4, sl, ip, r4
 8011b76:	445c      	add	r4, fp
 8011b78:	46c4      	mov	ip, r8
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011b80:	f84c 3b04 	str.w	r3, [ip], #4
 8011b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b88:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011b8c:	0c1b      	lsrs	r3, r3, #16
 8011b8e:	fb0a b303 	mla	r3, sl, r3, fp
 8011b92:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011b96:	454f      	cmp	r7, r9
 8011b98:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011b9c:	d805      	bhi.n	8011baa <__multiply+0x124>
 8011b9e:	f8c8 3004 	str.w	r3, [r8, #4]
 8011ba2:	3504      	adds	r5, #4
 8011ba4:	e79b      	b.n	8011ade <__multiply+0x58>
 8011ba6:	46d4      	mov	ip, sl
 8011ba8:	e7b3      	b.n	8011b12 <__multiply+0x8c>
 8011baa:	46e0      	mov	r8, ip
 8011bac:	e7dd      	b.n	8011b6a <__multiply+0xe4>
 8011bae:	3e01      	subs	r6, #1
 8011bb0:	e799      	b.n	8011ae6 <__multiply+0x60>
	...

08011bb4 <__pow5mult>:
 8011bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb8:	4615      	mov	r5, r2
 8011bba:	f012 0203 	ands.w	r2, r2, #3
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	460f      	mov	r7, r1
 8011bc2:	d007      	beq.n	8011bd4 <__pow5mult+0x20>
 8011bc4:	3a01      	subs	r2, #1
 8011bc6:	4c21      	ldr	r4, [pc, #132]	; (8011c4c <__pow5mult+0x98>)
 8011bc8:	2300      	movs	r3, #0
 8011bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011bce:	f7ff fe8a 	bl	80118e6 <__multadd>
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	10ad      	asrs	r5, r5, #2
 8011bd6:	d035      	beq.n	8011c44 <__pow5mult+0x90>
 8011bd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011bda:	b93c      	cbnz	r4, 8011bec <__pow5mult+0x38>
 8011bdc:	2010      	movs	r0, #16
 8011bde:	f7fc fc2d 	bl	800e43c <malloc>
 8011be2:	6270      	str	r0, [r6, #36]	; 0x24
 8011be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011be8:	6004      	str	r4, [r0, #0]
 8011bea:	60c4      	str	r4, [r0, #12]
 8011bec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011bf4:	b94c      	cbnz	r4, 8011c0a <__pow5mult+0x56>
 8011bf6:	f240 2171 	movw	r1, #625	; 0x271
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7ff ff3a 	bl	8011a74 <__i2b>
 8011c00:	2300      	movs	r3, #0
 8011c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c06:	4604      	mov	r4, r0
 8011c08:	6003      	str	r3, [r0, #0]
 8011c0a:	f04f 0800 	mov.w	r8, #0
 8011c0e:	07eb      	lsls	r3, r5, #31
 8011c10:	d50a      	bpl.n	8011c28 <__pow5mult+0x74>
 8011c12:	4639      	mov	r1, r7
 8011c14:	4622      	mov	r2, r4
 8011c16:	4630      	mov	r0, r6
 8011c18:	f7ff ff35 	bl	8011a86 <__multiply>
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	4681      	mov	r9, r0
 8011c20:	4630      	mov	r0, r6
 8011c22:	f7ff fe49 	bl	80118b8 <_Bfree>
 8011c26:	464f      	mov	r7, r9
 8011c28:	106d      	asrs	r5, r5, #1
 8011c2a:	d00b      	beq.n	8011c44 <__pow5mult+0x90>
 8011c2c:	6820      	ldr	r0, [r4, #0]
 8011c2e:	b938      	cbnz	r0, 8011c40 <__pow5mult+0x8c>
 8011c30:	4622      	mov	r2, r4
 8011c32:	4621      	mov	r1, r4
 8011c34:	4630      	mov	r0, r6
 8011c36:	f7ff ff26 	bl	8011a86 <__multiply>
 8011c3a:	6020      	str	r0, [r4, #0]
 8011c3c:	f8c0 8000 	str.w	r8, [r0]
 8011c40:	4604      	mov	r4, r0
 8011c42:	e7e4      	b.n	8011c0e <__pow5mult+0x5a>
 8011c44:	4638      	mov	r0, r7
 8011c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c4a:	bf00      	nop
 8011c4c:	08012960 	.word	0x08012960

08011c50 <__lshift>:
 8011c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c54:	460c      	mov	r4, r1
 8011c56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c5a:	6923      	ldr	r3, [r4, #16]
 8011c5c:	6849      	ldr	r1, [r1, #4]
 8011c5e:	eb0a 0903 	add.w	r9, sl, r3
 8011c62:	68a3      	ldr	r3, [r4, #8]
 8011c64:	4607      	mov	r7, r0
 8011c66:	4616      	mov	r6, r2
 8011c68:	f109 0501 	add.w	r5, r9, #1
 8011c6c:	42ab      	cmp	r3, r5
 8011c6e:	db32      	blt.n	8011cd6 <__lshift+0x86>
 8011c70:	4638      	mov	r0, r7
 8011c72:	f7ff fded 	bl	8011850 <_Balloc>
 8011c76:	2300      	movs	r3, #0
 8011c78:	4680      	mov	r8, r0
 8011c7a:	f100 0114 	add.w	r1, r0, #20
 8011c7e:	461a      	mov	r2, r3
 8011c80:	4553      	cmp	r3, sl
 8011c82:	db2b      	blt.n	8011cdc <__lshift+0x8c>
 8011c84:	6920      	ldr	r0, [r4, #16]
 8011c86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c8a:	f104 0314 	add.w	r3, r4, #20
 8011c8e:	f016 021f 	ands.w	r2, r6, #31
 8011c92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c9a:	d025      	beq.n	8011ce8 <__lshift+0x98>
 8011c9c:	f1c2 0e20 	rsb	lr, r2, #32
 8011ca0:	2000      	movs	r0, #0
 8011ca2:	681e      	ldr	r6, [r3, #0]
 8011ca4:	468a      	mov	sl, r1
 8011ca6:	4096      	lsls	r6, r2
 8011ca8:	4330      	orrs	r0, r6
 8011caa:	f84a 0b04 	str.w	r0, [sl], #4
 8011cae:	f853 0b04 	ldr.w	r0, [r3], #4
 8011cb2:	459c      	cmp	ip, r3
 8011cb4:	fa20 f00e 	lsr.w	r0, r0, lr
 8011cb8:	d814      	bhi.n	8011ce4 <__lshift+0x94>
 8011cba:	6048      	str	r0, [r1, #4]
 8011cbc:	b108      	cbz	r0, 8011cc2 <__lshift+0x72>
 8011cbe:	f109 0502 	add.w	r5, r9, #2
 8011cc2:	3d01      	subs	r5, #1
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	f8c8 5010 	str.w	r5, [r8, #16]
 8011cca:	4621      	mov	r1, r4
 8011ccc:	f7ff fdf4 	bl	80118b8 <_Bfree>
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd6:	3101      	adds	r1, #1
 8011cd8:	005b      	lsls	r3, r3, #1
 8011cda:	e7c7      	b.n	8011c6c <__lshift+0x1c>
 8011cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	e7cd      	b.n	8011c80 <__lshift+0x30>
 8011ce4:	4651      	mov	r1, sl
 8011ce6:	e7dc      	b.n	8011ca2 <__lshift+0x52>
 8011ce8:	3904      	subs	r1, #4
 8011cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cee:	f841 2f04 	str.w	r2, [r1, #4]!
 8011cf2:	459c      	cmp	ip, r3
 8011cf4:	d8f9      	bhi.n	8011cea <__lshift+0x9a>
 8011cf6:	e7e4      	b.n	8011cc2 <__lshift+0x72>

08011cf8 <__mcmp>:
 8011cf8:	6903      	ldr	r3, [r0, #16]
 8011cfa:	690a      	ldr	r2, [r1, #16]
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	b530      	push	{r4, r5, lr}
 8011d00:	d10c      	bne.n	8011d1c <__mcmp+0x24>
 8011d02:	0092      	lsls	r2, r2, #2
 8011d04:	3014      	adds	r0, #20
 8011d06:	3114      	adds	r1, #20
 8011d08:	1884      	adds	r4, r0, r2
 8011d0a:	4411      	add	r1, r2
 8011d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011d14:	4295      	cmp	r5, r2
 8011d16:	d003      	beq.n	8011d20 <__mcmp+0x28>
 8011d18:	d305      	bcc.n	8011d26 <__mcmp+0x2e>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	bd30      	pop	{r4, r5, pc}
 8011d20:	42a0      	cmp	r0, r4
 8011d22:	d3f3      	bcc.n	8011d0c <__mcmp+0x14>
 8011d24:	e7fa      	b.n	8011d1c <__mcmp+0x24>
 8011d26:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2a:	e7f7      	b.n	8011d1c <__mcmp+0x24>

08011d2c <__mdiff>:
 8011d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d30:	460d      	mov	r5, r1
 8011d32:	4607      	mov	r7, r0
 8011d34:	4611      	mov	r1, r2
 8011d36:	4628      	mov	r0, r5
 8011d38:	4614      	mov	r4, r2
 8011d3a:	f7ff ffdd 	bl	8011cf8 <__mcmp>
 8011d3e:	1e06      	subs	r6, r0, #0
 8011d40:	d108      	bne.n	8011d54 <__mdiff+0x28>
 8011d42:	4631      	mov	r1, r6
 8011d44:	4638      	mov	r0, r7
 8011d46:	f7ff fd83 	bl	8011850 <_Balloc>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d54:	bfa4      	itt	ge
 8011d56:	4623      	movge	r3, r4
 8011d58:	462c      	movge	r4, r5
 8011d5a:	4638      	mov	r0, r7
 8011d5c:	6861      	ldr	r1, [r4, #4]
 8011d5e:	bfa6      	itte	ge
 8011d60:	461d      	movge	r5, r3
 8011d62:	2600      	movge	r6, #0
 8011d64:	2601      	movlt	r6, #1
 8011d66:	f7ff fd73 	bl	8011850 <_Balloc>
 8011d6a:	692b      	ldr	r3, [r5, #16]
 8011d6c:	60c6      	str	r6, [r0, #12]
 8011d6e:	6926      	ldr	r6, [r4, #16]
 8011d70:	f105 0914 	add.w	r9, r5, #20
 8011d74:	f104 0214 	add.w	r2, r4, #20
 8011d78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011d7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011d80:	f100 0514 	add.w	r5, r0, #20
 8011d84:	f04f 0e00 	mov.w	lr, #0
 8011d88:	f852 ab04 	ldr.w	sl, [r2], #4
 8011d8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011d90:	fa1e f18a 	uxtah	r1, lr, sl
 8011d94:	b2a3      	uxth	r3, r4
 8011d96:	1ac9      	subs	r1, r1, r3
 8011d98:	0c23      	lsrs	r3, r4, #16
 8011d9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011d9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011da2:	b289      	uxth	r1, r1
 8011da4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011da8:	45c8      	cmp	r8, r9
 8011daa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011dae:	4694      	mov	ip, r2
 8011db0:	f845 3b04 	str.w	r3, [r5], #4
 8011db4:	d8e8      	bhi.n	8011d88 <__mdiff+0x5c>
 8011db6:	45bc      	cmp	ip, r7
 8011db8:	d304      	bcc.n	8011dc4 <__mdiff+0x98>
 8011dba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011dbe:	b183      	cbz	r3, 8011de2 <__mdiff+0xb6>
 8011dc0:	6106      	str	r6, [r0, #16]
 8011dc2:	e7c5      	b.n	8011d50 <__mdiff+0x24>
 8011dc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011dc8:	fa1e f381 	uxtah	r3, lr, r1
 8011dcc:	141a      	asrs	r2, r3, #16
 8011dce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011dd8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011ddc:	f845 3b04 	str.w	r3, [r5], #4
 8011de0:	e7e9      	b.n	8011db6 <__mdiff+0x8a>
 8011de2:	3e01      	subs	r6, #1
 8011de4:	e7e9      	b.n	8011dba <__mdiff+0x8e>
	...

08011de8 <__ulp>:
 8011de8:	4b12      	ldr	r3, [pc, #72]	; (8011e34 <__ulp+0x4c>)
 8011dea:	ee10 2a90 	vmov	r2, s1
 8011dee:	401a      	ands	r2, r3
 8011df0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	dd04      	ble.n	8011e02 <__ulp+0x1a>
 8011df8:	2000      	movs	r0, #0
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	ec41 0b10 	vmov	d0, r0, r1
 8011e00:	4770      	bx	lr
 8011e02:	425b      	negs	r3, r3
 8011e04:	151b      	asrs	r3, r3, #20
 8011e06:	2b13      	cmp	r3, #19
 8011e08:	f04f 0000 	mov.w	r0, #0
 8011e0c:	f04f 0100 	mov.w	r1, #0
 8011e10:	dc04      	bgt.n	8011e1c <__ulp+0x34>
 8011e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011e16:	fa42 f103 	asr.w	r1, r2, r3
 8011e1a:	e7ef      	b.n	8011dfc <__ulp+0x14>
 8011e1c:	3b14      	subs	r3, #20
 8011e1e:	2b1e      	cmp	r3, #30
 8011e20:	f04f 0201 	mov.w	r2, #1
 8011e24:	bfda      	itte	le
 8011e26:	f1c3 031f 	rsble	r3, r3, #31
 8011e2a:	fa02 f303 	lslle.w	r3, r2, r3
 8011e2e:	4613      	movgt	r3, r2
 8011e30:	4618      	mov	r0, r3
 8011e32:	e7e3      	b.n	8011dfc <__ulp+0x14>
 8011e34:	7ff00000 	.word	0x7ff00000

08011e38 <__b2d>:
 8011e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3a:	6905      	ldr	r5, [r0, #16]
 8011e3c:	f100 0714 	add.w	r7, r0, #20
 8011e40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011e44:	1f2e      	subs	r6, r5, #4
 8011e46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f7ff fdc4 	bl	80119d8 <__hi0bits>
 8011e50:	f1c0 0320 	rsb	r3, r0, #32
 8011e54:	280a      	cmp	r0, #10
 8011e56:	600b      	str	r3, [r1, #0]
 8011e58:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011ed0 <__b2d+0x98>
 8011e5c:	dc14      	bgt.n	8011e88 <__b2d+0x50>
 8011e5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011e62:	fa24 f10e 	lsr.w	r1, r4, lr
 8011e66:	42b7      	cmp	r7, r6
 8011e68:	ea41 030c 	orr.w	r3, r1, ip
 8011e6c:	bf34      	ite	cc
 8011e6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011e72:	2100      	movcs	r1, #0
 8011e74:	3015      	adds	r0, #21
 8011e76:	fa04 f000 	lsl.w	r0, r4, r0
 8011e7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011e7e:	ea40 0201 	orr.w	r2, r0, r1
 8011e82:	ec43 2b10 	vmov	d0, r2, r3
 8011e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e88:	42b7      	cmp	r7, r6
 8011e8a:	bf3a      	itte	cc
 8011e8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011e90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011e94:	2100      	movcs	r1, #0
 8011e96:	380b      	subs	r0, #11
 8011e98:	d015      	beq.n	8011ec6 <__b2d+0x8e>
 8011e9a:	4084      	lsls	r4, r0
 8011e9c:	f1c0 0520 	rsb	r5, r0, #32
 8011ea0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011ea4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011ea8:	42be      	cmp	r6, r7
 8011eaa:	fa21 fc05 	lsr.w	ip, r1, r5
 8011eae:	ea44 030c 	orr.w	r3, r4, ip
 8011eb2:	bf8c      	ite	hi
 8011eb4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011eb8:	2400      	movls	r4, #0
 8011eba:	fa01 f000 	lsl.w	r0, r1, r0
 8011ebe:	40ec      	lsrs	r4, r5
 8011ec0:	ea40 0204 	orr.w	r2, r0, r4
 8011ec4:	e7dd      	b.n	8011e82 <__b2d+0x4a>
 8011ec6:	ea44 030c 	orr.w	r3, r4, ip
 8011eca:	460a      	mov	r2, r1
 8011ecc:	e7d9      	b.n	8011e82 <__b2d+0x4a>
 8011ece:	bf00      	nop
 8011ed0:	3ff00000 	.word	0x3ff00000

08011ed4 <__d2b>:
 8011ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ed8:	460e      	mov	r6, r1
 8011eda:	2101      	movs	r1, #1
 8011edc:	ec59 8b10 	vmov	r8, r9, d0
 8011ee0:	4615      	mov	r5, r2
 8011ee2:	f7ff fcb5 	bl	8011850 <_Balloc>
 8011ee6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011eea:	4607      	mov	r7, r0
 8011eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ef0:	bb34      	cbnz	r4, 8011f40 <__d2b+0x6c>
 8011ef2:	9301      	str	r3, [sp, #4]
 8011ef4:	f1b8 0300 	subs.w	r3, r8, #0
 8011ef8:	d027      	beq.n	8011f4a <__d2b+0x76>
 8011efa:	a802      	add	r0, sp, #8
 8011efc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011f00:	f7ff fd89 	bl	8011a16 <__lo0bits>
 8011f04:	9900      	ldr	r1, [sp, #0]
 8011f06:	b1f0      	cbz	r0, 8011f46 <__d2b+0x72>
 8011f08:	9a01      	ldr	r2, [sp, #4]
 8011f0a:	f1c0 0320 	rsb	r3, r0, #32
 8011f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f12:	430b      	orrs	r3, r1
 8011f14:	40c2      	lsrs	r2, r0
 8011f16:	617b      	str	r3, [r7, #20]
 8011f18:	9201      	str	r2, [sp, #4]
 8011f1a:	9b01      	ldr	r3, [sp, #4]
 8011f1c:	61bb      	str	r3, [r7, #24]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	bf14      	ite	ne
 8011f22:	2102      	movne	r1, #2
 8011f24:	2101      	moveq	r1, #1
 8011f26:	6139      	str	r1, [r7, #16]
 8011f28:	b1c4      	cbz	r4, 8011f5c <__d2b+0x88>
 8011f2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011f2e:	4404      	add	r4, r0
 8011f30:	6034      	str	r4, [r6, #0]
 8011f32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011f36:	6028      	str	r0, [r5, #0]
 8011f38:	4638      	mov	r0, r7
 8011f3a:	b003      	add	sp, #12
 8011f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f44:	e7d5      	b.n	8011ef2 <__d2b+0x1e>
 8011f46:	6179      	str	r1, [r7, #20]
 8011f48:	e7e7      	b.n	8011f1a <__d2b+0x46>
 8011f4a:	a801      	add	r0, sp, #4
 8011f4c:	f7ff fd63 	bl	8011a16 <__lo0bits>
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	2101      	movs	r1, #1
 8011f56:	6139      	str	r1, [r7, #16]
 8011f58:	3020      	adds	r0, #32
 8011f5a:	e7e5      	b.n	8011f28 <__d2b+0x54>
 8011f5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011f60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011f64:	6030      	str	r0, [r6, #0]
 8011f66:	6918      	ldr	r0, [r3, #16]
 8011f68:	f7ff fd36 	bl	80119d8 <__hi0bits>
 8011f6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011f70:	e7e1      	b.n	8011f36 <__d2b+0x62>

08011f72 <__ratio>:
 8011f72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f76:	4688      	mov	r8, r1
 8011f78:	4669      	mov	r1, sp
 8011f7a:	4681      	mov	r9, r0
 8011f7c:	f7ff ff5c 	bl	8011e38 <__b2d>
 8011f80:	a901      	add	r1, sp, #4
 8011f82:	4640      	mov	r0, r8
 8011f84:	ec57 6b10 	vmov	r6, r7, d0
 8011f88:	ee10 4a10 	vmov	r4, s0
 8011f8c:	f7ff ff54 	bl	8011e38 <__b2d>
 8011f90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f98:	eba3 0c02 	sub.w	ip, r3, r2
 8011f9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011fa6:	ec51 0b10 	vmov	r0, r1, d0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	ee10 aa10 	vmov	sl, s0
 8011fb0:	bfce      	itee	gt
 8011fb2:	463a      	movgt	r2, r7
 8011fb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011fb8:	460a      	movle	r2, r1
 8011fba:	463d      	mov	r5, r7
 8011fbc:	468b      	mov	fp, r1
 8011fbe:	bfcc      	ite	gt
 8011fc0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011fc4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011fc8:	ec45 4b17 	vmov	d7, r4, r5
 8011fcc:	ec4b ab16 	vmov	d6, sl, fp
 8011fd0:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8011fd4:	b003      	add	sp, #12
 8011fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fda <__copybits>:
 8011fda:	3901      	subs	r1, #1
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	1149      	asrs	r1, r1, #5
 8011fe0:	6914      	ldr	r4, [r2, #16]
 8011fe2:	3101      	adds	r1, #1
 8011fe4:	f102 0314 	add.w	r3, r2, #20
 8011fe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011fec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011ff0:	42a3      	cmp	r3, r4
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	d303      	bcc.n	8011ffe <__copybits+0x24>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	428a      	cmp	r2, r1
 8011ffa:	d305      	bcc.n	8012008 <__copybits+0x2e>
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012002:	f840 2b04 	str.w	r2, [r0], #4
 8012006:	e7f3      	b.n	8011ff0 <__copybits+0x16>
 8012008:	f842 3b04 	str.w	r3, [r2], #4
 801200c:	e7f4      	b.n	8011ff8 <__copybits+0x1e>

0801200e <__any_on>:
 801200e:	f100 0214 	add.w	r2, r0, #20
 8012012:	6900      	ldr	r0, [r0, #16]
 8012014:	114b      	asrs	r3, r1, #5
 8012016:	4298      	cmp	r0, r3
 8012018:	b510      	push	{r4, lr}
 801201a:	db11      	blt.n	8012040 <__any_on+0x32>
 801201c:	dd0a      	ble.n	8012034 <__any_on+0x26>
 801201e:	f011 011f 	ands.w	r1, r1, #31
 8012022:	d007      	beq.n	8012034 <__any_on+0x26>
 8012024:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012028:	fa24 f001 	lsr.w	r0, r4, r1
 801202c:	fa00 f101 	lsl.w	r1, r0, r1
 8012030:	428c      	cmp	r4, r1
 8012032:	d10b      	bne.n	801204c <__any_on+0x3e>
 8012034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012038:	4293      	cmp	r3, r2
 801203a:	d803      	bhi.n	8012044 <__any_on+0x36>
 801203c:	2000      	movs	r0, #0
 801203e:	bd10      	pop	{r4, pc}
 8012040:	4603      	mov	r3, r0
 8012042:	e7f7      	b.n	8012034 <__any_on+0x26>
 8012044:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012048:	2900      	cmp	r1, #0
 801204a:	d0f5      	beq.n	8012038 <__any_on+0x2a>
 801204c:	2001      	movs	r0, #1
 801204e:	e7f6      	b.n	801203e <__any_on+0x30>

08012050 <__ssputs_r>:
 8012050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012054:	688e      	ldr	r6, [r1, #8]
 8012056:	429e      	cmp	r6, r3
 8012058:	4682      	mov	sl, r0
 801205a:	460c      	mov	r4, r1
 801205c:	4690      	mov	r8, r2
 801205e:	4699      	mov	r9, r3
 8012060:	d837      	bhi.n	80120d2 <__ssputs_r+0x82>
 8012062:	898a      	ldrh	r2, [r1, #12]
 8012064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012068:	d031      	beq.n	80120ce <__ssputs_r+0x7e>
 801206a:	6825      	ldr	r5, [r4, #0]
 801206c:	6909      	ldr	r1, [r1, #16]
 801206e:	1a6f      	subs	r7, r5, r1
 8012070:	6965      	ldr	r5, [r4, #20]
 8012072:	2302      	movs	r3, #2
 8012074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012078:	fb95 f5f3 	sdiv	r5, r5, r3
 801207c:	f109 0301 	add.w	r3, r9, #1
 8012080:	443b      	add	r3, r7
 8012082:	429d      	cmp	r5, r3
 8012084:	bf38      	it	cc
 8012086:	461d      	movcc	r5, r3
 8012088:	0553      	lsls	r3, r2, #21
 801208a:	d530      	bpl.n	80120ee <__ssputs_r+0x9e>
 801208c:	4629      	mov	r1, r5
 801208e:	f7fc fa4d 	bl	800e52c <_malloc_r>
 8012092:	4606      	mov	r6, r0
 8012094:	b950      	cbnz	r0, 80120ac <__ssputs_r+0x5c>
 8012096:	230c      	movs	r3, #12
 8012098:	f8ca 3000 	str.w	r3, [sl]
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120a2:	81a3      	strh	r3, [r4, #12]
 80120a4:	f04f 30ff 	mov.w	r0, #4294967295
 80120a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ac:	463a      	mov	r2, r7
 80120ae:	6921      	ldr	r1, [r4, #16]
 80120b0:	f7fc f9cc 	bl	800e44c <memcpy>
 80120b4:	89a3      	ldrh	r3, [r4, #12]
 80120b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120be:	81a3      	strh	r3, [r4, #12]
 80120c0:	6126      	str	r6, [r4, #16]
 80120c2:	6165      	str	r5, [r4, #20]
 80120c4:	443e      	add	r6, r7
 80120c6:	1bed      	subs	r5, r5, r7
 80120c8:	6026      	str	r6, [r4, #0]
 80120ca:	60a5      	str	r5, [r4, #8]
 80120cc:	464e      	mov	r6, r9
 80120ce:	454e      	cmp	r6, r9
 80120d0:	d900      	bls.n	80120d4 <__ssputs_r+0x84>
 80120d2:	464e      	mov	r6, r9
 80120d4:	4632      	mov	r2, r6
 80120d6:	4641      	mov	r1, r8
 80120d8:	6820      	ldr	r0, [r4, #0]
 80120da:	f000 f9c3 	bl	8012464 <memmove>
 80120de:	68a3      	ldr	r3, [r4, #8]
 80120e0:	1b9b      	subs	r3, r3, r6
 80120e2:	60a3      	str	r3, [r4, #8]
 80120e4:	6823      	ldr	r3, [r4, #0]
 80120e6:	441e      	add	r6, r3
 80120e8:	6026      	str	r6, [r4, #0]
 80120ea:	2000      	movs	r0, #0
 80120ec:	e7dc      	b.n	80120a8 <__ssputs_r+0x58>
 80120ee:	462a      	mov	r2, r5
 80120f0:	f000 f9d1 	bl	8012496 <_realloc_r>
 80120f4:	4606      	mov	r6, r0
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d1e2      	bne.n	80120c0 <__ssputs_r+0x70>
 80120fa:	6921      	ldr	r1, [r4, #16]
 80120fc:	4650      	mov	r0, sl
 80120fe:	f7fc f9c7 	bl	800e490 <_free_r>
 8012102:	e7c8      	b.n	8012096 <__ssputs_r+0x46>

08012104 <_svfiprintf_r>:
 8012104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	461d      	mov	r5, r3
 801210a:	898b      	ldrh	r3, [r1, #12]
 801210c:	061f      	lsls	r7, r3, #24
 801210e:	b09d      	sub	sp, #116	; 0x74
 8012110:	4680      	mov	r8, r0
 8012112:	460c      	mov	r4, r1
 8012114:	4616      	mov	r6, r2
 8012116:	d50f      	bpl.n	8012138 <_svfiprintf_r+0x34>
 8012118:	690b      	ldr	r3, [r1, #16]
 801211a:	b96b      	cbnz	r3, 8012138 <_svfiprintf_r+0x34>
 801211c:	2140      	movs	r1, #64	; 0x40
 801211e:	f7fc fa05 	bl	800e52c <_malloc_r>
 8012122:	6020      	str	r0, [r4, #0]
 8012124:	6120      	str	r0, [r4, #16]
 8012126:	b928      	cbnz	r0, 8012134 <_svfiprintf_r+0x30>
 8012128:	230c      	movs	r3, #12
 801212a:	f8c8 3000 	str.w	r3, [r8]
 801212e:	f04f 30ff 	mov.w	r0, #4294967295
 8012132:	e0c8      	b.n	80122c6 <_svfiprintf_r+0x1c2>
 8012134:	2340      	movs	r3, #64	; 0x40
 8012136:	6163      	str	r3, [r4, #20]
 8012138:	2300      	movs	r3, #0
 801213a:	9309      	str	r3, [sp, #36]	; 0x24
 801213c:	2320      	movs	r3, #32
 801213e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012142:	2330      	movs	r3, #48	; 0x30
 8012144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012148:	9503      	str	r5, [sp, #12]
 801214a:	f04f 0b01 	mov.w	fp, #1
 801214e:	4637      	mov	r7, r6
 8012150:	463d      	mov	r5, r7
 8012152:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012156:	b10b      	cbz	r3, 801215c <_svfiprintf_r+0x58>
 8012158:	2b25      	cmp	r3, #37	; 0x25
 801215a:	d13e      	bne.n	80121da <_svfiprintf_r+0xd6>
 801215c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012160:	d00b      	beq.n	801217a <_svfiprintf_r+0x76>
 8012162:	4653      	mov	r3, sl
 8012164:	4632      	mov	r2, r6
 8012166:	4621      	mov	r1, r4
 8012168:	4640      	mov	r0, r8
 801216a:	f7ff ff71 	bl	8012050 <__ssputs_r>
 801216e:	3001      	adds	r0, #1
 8012170:	f000 80a4 	beq.w	80122bc <_svfiprintf_r+0x1b8>
 8012174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012176:	4453      	add	r3, sl
 8012178:	9309      	str	r3, [sp, #36]	; 0x24
 801217a:	783b      	ldrb	r3, [r7, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	f000 809d 	beq.w	80122bc <_svfiprintf_r+0x1b8>
 8012182:	2300      	movs	r3, #0
 8012184:	f04f 32ff 	mov.w	r2, #4294967295
 8012188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801218c:	9304      	str	r3, [sp, #16]
 801218e:	9307      	str	r3, [sp, #28]
 8012190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012194:	931a      	str	r3, [sp, #104]	; 0x68
 8012196:	462f      	mov	r7, r5
 8012198:	2205      	movs	r2, #5
 801219a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801219e:	4850      	ldr	r0, [pc, #320]	; (80122e0 <_svfiprintf_r+0x1dc>)
 80121a0:	f7ee f856 	bl	8000250 <memchr>
 80121a4:	9b04      	ldr	r3, [sp, #16]
 80121a6:	b9d0      	cbnz	r0, 80121de <_svfiprintf_r+0xda>
 80121a8:	06d9      	lsls	r1, r3, #27
 80121aa:	bf44      	itt	mi
 80121ac:	2220      	movmi	r2, #32
 80121ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121b2:	071a      	lsls	r2, r3, #28
 80121b4:	bf44      	itt	mi
 80121b6:	222b      	movmi	r2, #43	; 0x2b
 80121b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121bc:	782a      	ldrb	r2, [r5, #0]
 80121be:	2a2a      	cmp	r2, #42	; 0x2a
 80121c0:	d015      	beq.n	80121ee <_svfiprintf_r+0xea>
 80121c2:	9a07      	ldr	r2, [sp, #28]
 80121c4:	462f      	mov	r7, r5
 80121c6:	2000      	movs	r0, #0
 80121c8:	250a      	movs	r5, #10
 80121ca:	4639      	mov	r1, r7
 80121cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121d0:	3b30      	subs	r3, #48	; 0x30
 80121d2:	2b09      	cmp	r3, #9
 80121d4:	d94d      	bls.n	8012272 <_svfiprintf_r+0x16e>
 80121d6:	b1b8      	cbz	r0, 8012208 <_svfiprintf_r+0x104>
 80121d8:	e00f      	b.n	80121fa <_svfiprintf_r+0xf6>
 80121da:	462f      	mov	r7, r5
 80121dc:	e7b8      	b.n	8012150 <_svfiprintf_r+0x4c>
 80121de:	4a40      	ldr	r2, [pc, #256]	; (80122e0 <_svfiprintf_r+0x1dc>)
 80121e0:	1a80      	subs	r0, r0, r2
 80121e2:	fa0b f000 	lsl.w	r0, fp, r0
 80121e6:	4318      	orrs	r0, r3
 80121e8:	9004      	str	r0, [sp, #16]
 80121ea:	463d      	mov	r5, r7
 80121ec:	e7d3      	b.n	8012196 <_svfiprintf_r+0x92>
 80121ee:	9a03      	ldr	r2, [sp, #12]
 80121f0:	1d11      	adds	r1, r2, #4
 80121f2:	6812      	ldr	r2, [r2, #0]
 80121f4:	9103      	str	r1, [sp, #12]
 80121f6:	2a00      	cmp	r2, #0
 80121f8:	db01      	blt.n	80121fe <_svfiprintf_r+0xfa>
 80121fa:	9207      	str	r2, [sp, #28]
 80121fc:	e004      	b.n	8012208 <_svfiprintf_r+0x104>
 80121fe:	4252      	negs	r2, r2
 8012200:	f043 0302 	orr.w	r3, r3, #2
 8012204:	9207      	str	r2, [sp, #28]
 8012206:	9304      	str	r3, [sp, #16]
 8012208:	783b      	ldrb	r3, [r7, #0]
 801220a:	2b2e      	cmp	r3, #46	; 0x2e
 801220c:	d10c      	bne.n	8012228 <_svfiprintf_r+0x124>
 801220e:	787b      	ldrb	r3, [r7, #1]
 8012210:	2b2a      	cmp	r3, #42	; 0x2a
 8012212:	d133      	bne.n	801227c <_svfiprintf_r+0x178>
 8012214:	9b03      	ldr	r3, [sp, #12]
 8012216:	1d1a      	adds	r2, r3, #4
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	9203      	str	r2, [sp, #12]
 801221c:	2b00      	cmp	r3, #0
 801221e:	bfb8      	it	lt
 8012220:	f04f 33ff 	movlt.w	r3, #4294967295
 8012224:	3702      	adds	r7, #2
 8012226:	9305      	str	r3, [sp, #20]
 8012228:	4d2e      	ldr	r5, [pc, #184]	; (80122e4 <_svfiprintf_r+0x1e0>)
 801222a:	7839      	ldrb	r1, [r7, #0]
 801222c:	2203      	movs	r2, #3
 801222e:	4628      	mov	r0, r5
 8012230:	f7ee f80e 	bl	8000250 <memchr>
 8012234:	b138      	cbz	r0, 8012246 <_svfiprintf_r+0x142>
 8012236:	2340      	movs	r3, #64	; 0x40
 8012238:	1b40      	subs	r0, r0, r5
 801223a:	fa03 f000 	lsl.w	r0, r3, r0
 801223e:	9b04      	ldr	r3, [sp, #16]
 8012240:	4303      	orrs	r3, r0
 8012242:	3701      	adds	r7, #1
 8012244:	9304      	str	r3, [sp, #16]
 8012246:	7839      	ldrb	r1, [r7, #0]
 8012248:	4827      	ldr	r0, [pc, #156]	; (80122e8 <_svfiprintf_r+0x1e4>)
 801224a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801224e:	2206      	movs	r2, #6
 8012250:	1c7e      	adds	r6, r7, #1
 8012252:	f7ed fffd 	bl	8000250 <memchr>
 8012256:	2800      	cmp	r0, #0
 8012258:	d038      	beq.n	80122cc <_svfiprintf_r+0x1c8>
 801225a:	4b24      	ldr	r3, [pc, #144]	; (80122ec <_svfiprintf_r+0x1e8>)
 801225c:	bb13      	cbnz	r3, 80122a4 <_svfiprintf_r+0x1a0>
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	3307      	adds	r3, #7
 8012262:	f023 0307 	bic.w	r3, r3, #7
 8012266:	3308      	adds	r3, #8
 8012268:	9303      	str	r3, [sp, #12]
 801226a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226c:	444b      	add	r3, r9
 801226e:	9309      	str	r3, [sp, #36]	; 0x24
 8012270:	e76d      	b.n	801214e <_svfiprintf_r+0x4a>
 8012272:	fb05 3202 	mla	r2, r5, r2, r3
 8012276:	2001      	movs	r0, #1
 8012278:	460f      	mov	r7, r1
 801227a:	e7a6      	b.n	80121ca <_svfiprintf_r+0xc6>
 801227c:	2300      	movs	r3, #0
 801227e:	3701      	adds	r7, #1
 8012280:	9305      	str	r3, [sp, #20]
 8012282:	4619      	mov	r1, r3
 8012284:	250a      	movs	r5, #10
 8012286:	4638      	mov	r0, r7
 8012288:	f810 2b01 	ldrb.w	r2, [r0], #1
 801228c:	3a30      	subs	r2, #48	; 0x30
 801228e:	2a09      	cmp	r2, #9
 8012290:	d903      	bls.n	801229a <_svfiprintf_r+0x196>
 8012292:	2b00      	cmp	r3, #0
 8012294:	d0c8      	beq.n	8012228 <_svfiprintf_r+0x124>
 8012296:	9105      	str	r1, [sp, #20]
 8012298:	e7c6      	b.n	8012228 <_svfiprintf_r+0x124>
 801229a:	fb05 2101 	mla	r1, r5, r1, r2
 801229e:	2301      	movs	r3, #1
 80122a0:	4607      	mov	r7, r0
 80122a2:	e7f0      	b.n	8012286 <_svfiprintf_r+0x182>
 80122a4:	ab03      	add	r3, sp, #12
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	4622      	mov	r2, r4
 80122aa:	4b11      	ldr	r3, [pc, #68]	; (80122f0 <_svfiprintf_r+0x1ec>)
 80122ac:	a904      	add	r1, sp, #16
 80122ae:	4640      	mov	r0, r8
 80122b0:	f7fc fa1e 	bl	800e6f0 <_printf_float>
 80122b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80122b8:	4681      	mov	r9, r0
 80122ba:	d1d6      	bne.n	801226a <_svfiprintf_r+0x166>
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	065b      	lsls	r3, r3, #25
 80122c0:	f53f af35 	bmi.w	801212e <_svfiprintf_r+0x2a>
 80122c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122c6:	b01d      	add	sp, #116	; 0x74
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	ab03      	add	r3, sp, #12
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	4622      	mov	r2, r4
 80122d2:	4b07      	ldr	r3, [pc, #28]	; (80122f0 <_svfiprintf_r+0x1ec>)
 80122d4:	a904      	add	r1, sp, #16
 80122d6:	4640      	mov	r0, r8
 80122d8:	f7fc fcac 	bl	800ec34 <_printf_i>
 80122dc:	e7ea      	b.n	80122b4 <_svfiprintf_r+0x1b0>
 80122de:	bf00      	nop
 80122e0:	0801296c 	.word	0x0801296c
 80122e4:	08012972 	.word	0x08012972
 80122e8:	08012976 	.word	0x08012976
 80122ec:	0800e6f1 	.word	0x0800e6f1
 80122f0:	08012051 	.word	0x08012051

080122f4 <__sread>:
 80122f4:	b510      	push	{r4, lr}
 80122f6:	460c      	mov	r4, r1
 80122f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122fc:	f000 f8f2 	bl	80124e4 <_read_r>
 8012300:	2800      	cmp	r0, #0
 8012302:	bfab      	itete	ge
 8012304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012306:	89a3      	ldrhlt	r3, [r4, #12]
 8012308:	181b      	addge	r3, r3, r0
 801230a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801230e:	bfac      	ite	ge
 8012310:	6563      	strge	r3, [r4, #84]	; 0x54
 8012312:	81a3      	strhlt	r3, [r4, #12]
 8012314:	bd10      	pop	{r4, pc}

08012316 <__swrite>:
 8012316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801231a:	461f      	mov	r7, r3
 801231c:	898b      	ldrh	r3, [r1, #12]
 801231e:	05db      	lsls	r3, r3, #23
 8012320:	4605      	mov	r5, r0
 8012322:	460c      	mov	r4, r1
 8012324:	4616      	mov	r6, r2
 8012326:	d505      	bpl.n	8012334 <__swrite+0x1e>
 8012328:	2302      	movs	r3, #2
 801232a:	2200      	movs	r2, #0
 801232c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012330:	f000 f886 	bl	8012440 <_lseek_r>
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801233a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801233e:	81a3      	strh	r3, [r4, #12]
 8012340:	4632      	mov	r2, r6
 8012342:	463b      	mov	r3, r7
 8012344:	4628      	mov	r0, r5
 8012346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801234a:	f000 b835 	b.w	80123b8 <_write_r>

0801234e <__sseek>:
 801234e:	b510      	push	{r4, lr}
 8012350:	460c      	mov	r4, r1
 8012352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012356:	f000 f873 	bl	8012440 <_lseek_r>
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	bf15      	itete	ne
 8012360:	6560      	strne	r0, [r4, #84]	; 0x54
 8012362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801236a:	81a3      	strheq	r3, [r4, #12]
 801236c:	bf18      	it	ne
 801236e:	81a3      	strhne	r3, [r4, #12]
 8012370:	bd10      	pop	{r4, pc}

08012372 <__sclose>:
 8012372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012376:	f000 b831 	b.w	80123dc <_close_r>

0801237a <strncmp>:
 801237a:	b510      	push	{r4, lr}
 801237c:	b16a      	cbz	r2, 801239a <strncmp+0x20>
 801237e:	3901      	subs	r1, #1
 8012380:	1884      	adds	r4, r0, r2
 8012382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012386:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801238a:	4293      	cmp	r3, r2
 801238c:	d103      	bne.n	8012396 <strncmp+0x1c>
 801238e:	42a0      	cmp	r0, r4
 8012390:	d001      	beq.n	8012396 <strncmp+0x1c>
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1f5      	bne.n	8012382 <strncmp+0x8>
 8012396:	1a98      	subs	r0, r3, r2
 8012398:	bd10      	pop	{r4, pc}
 801239a:	4610      	mov	r0, r2
 801239c:	e7fc      	b.n	8012398 <strncmp+0x1e>

0801239e <__ascii_wctomb>:
 801239e:	b149      	cbz	r1, 80123b4 <__ascii_wctomb+0x16>
 80123a0:	2aff      	cmp	r2, #255	; 0xff
 80123a2:	bf85      	ittet	hi
 80123a4:	238a      	movhi	r3, #138	; 0x8a
 80123a6:	6003      	strhi	r3, [r0, #0]
 80123a8:	700a      	strbls	r2, [r1, #0]
 80123aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80123ae:	bf98      	it	ls
 80123b0:	2001      	movls	r0, #1
 80123b2:	4770      	bx	lr
 80123b4:	4608      	mov	r0, r1
 80123b6:	4770      	bx	lr

080123b8 <_write_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4c07      	ldr	r4, [pc, #28]	; (80123d8 <_write_r+0x20>)
 80123bc:	4605      	mov	r5, r0
 80123be:	4608      	mov	r0, r1
 80123c0:	4611      	mov	r1, r2
 80123c2:	2200      	movs	r2, #0
 80123c4:	6022      	str	r2, [r4, #0]
 80123c6:	461a      	mov	r2, r3
 80123c8:	f7fb fae2 	bl	800d990 <_write>
 80123cc:	1c43      	adds	r3, r0, #1
 80123ce:	d102      	bne.n	80123d6 <_write_r+0x1e>
 80123d0:	6823      	ldr	r3, [r4, #0]
 80123d2:	b103      	cbz	r3, 80123d6 <_write_r+0x1e>
 80123d4:	602b      	str	r3, [r5, #0]
 80123d6:	bd38      	pop	{r3, r4, r5, pc}
 80123d8:	2000eb14 	.word	0x2000eb14

080123dc <_close_r>:
 80123dc:	b538      	push	{r3, r4, r5, lr}
 80123de:	4c06      	ldr	r4, [pc, #24]	; (80123f8 <_close_r+0x1c>)
 80123e0:	2300      	movs	r3, #0
 80123e2:	4605      	mov	r5, r0
 80123e4:	4608      	mov	r0, r1
 80123e6:	6023      	str	r3, [r4, #0]
 80123e8:	f000 f896 	bl	8012518 <_close>
 80123ec:	1c43      	adds	r3, r0, #1
 80123ee:	d102      	bne.n	80123f6 <_close_r+0x1a>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	b103      	cbz	r3, 80123f6 <_close_r+0x1a>
 80123f4:	602b      	str	r3, [r5, #0]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	2000eb14 	.word	0x2000eb14

080123fc <_fstat_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4c07      	ldr	r4, [pc, #28]	; (801241c <_fstat_r+0x20>)
 8012400:	2300      	movs	r3, #0
 8012402:	4605      	mov	r5, r0
 8012404:	4608      	mov	r0, r1
 8012406:	4611      	mov	r1, r2
 8012408:	6023      	str	r3, [r4, #0]
 801240a:	f000 f88d 	bl	8012528 <_fstat>
 801240e:	1c43      	adds	r3, r0, #1
 8012410:	d102      	bne.n	8012418 <_fstat_r+0x1c>
 8012412:	6823      	ldr	r3, [r4, #0]
 8012414:	b103      	cbz	r3, 8012418 <_fstat_r+0x1c>
 8012416:	602b      	str	r3, [r5, #0]
 8012418:	bd38      	pop	{r3, r4, r5, pc}
 801241a:	bf00      	nop
 801241c:	2000eb14 	.word	0x2000eb14

08012420 <_isatty_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4c06      	ldr	r4, [pc, #24]	; (801243c <_isatty_r+0x1c>)
 8012424:	2300      	movs	r3, #0
 8012426:	4605      	mov	r5, r0
 8012428:	4608      	mov	r0, r1
 801242a:	6023      	str	r3, [r4, #0]
 801242c:	f000 f88c 	bl	8012548 <_isatty>
 8012430:	1c43      	adds	r3, r0, #1
 8012432:	d102      	bne.n	801243a <_isatty_r+0x1a>
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	b103      	cbz	r3, 801243a <_isatty_r+0x1a>
 8012438:	602b      	str	r3, [r5, #0]
 801243a:	bd38      	pop	{r3, r4, r5, pc}
 801243c:	2000eb14 	.word	0x2000eb14

08012440 <_lseek_r>:
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4c07      	ldr	r4, [pc, #28]	; (8012460 <_lseek_r+0x20>)
 8012444:	4605      	mov	r5, r0
 8012446:	4608      	mov	r0, r1
 8012448:	4611      	mov	r1, r2
 801244a:	2200      	movs	r2, #0
 801244c:	6022      	str	r2, [r4, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	f000 f88a 	bl	8012568 <_lseek>
 8012454:	1c43      	adds	r3, r0, #1
 8012456:	d102      	bne.n	801245e <_lseek_r+0x1e>
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	b103      	cbz	r3, 801245e <_lseek_r+0x1e>
 801245c:	602b      	str	r3, [r5, #0]
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	2000eb14 	.word	0x2000eb14

08012464 <memmove>:
 8012464:	4288      	cmp	r0, r1
 8012466:	b510      	push	{r4, lr}
 8012468:	eb01 0302 	add.w	r3, r1, r2
 801246c:	d807      	bhi.n	801247e <memmove+0x1a>
 801246e:	1e42      	subs	r2, r0, #1
 8012470:	4299      	cmp	r1, r3
 8012472:	d00a      	beq.n	801248a <memmove+0x26>
 8012474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012478:	f802 4f01 	strb.w	r4, [r2, #1]!
 801247c:	e7f8      	b.n	8012470 <memmove+0xc>
 801247e:	4283      	cmp	r3, r0
 8012480:	d9f5      	bls.n	801246e <memmove+0xa>
 8012482:	1881      	adds	r1, r0, r2
 8012484:	1ad2      	subs	r2, r2, r3
 8012486:	42d3      	cmn	r3, r2
 8012488:	d100      	bne.n	801248c <memmove+0x28>
 801248a:	bd10      	pop	{r4, pc}
 801248c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012490:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012494:	e7f7      	b.n	8012486 <memmove+0x22>

08012496 <_realloc_r>:
 8012496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012498:	4607      	mov	r7, r0
 801249a:	4614      	mov	r4, r2
 801249c:	460e      	mov	r6, r1
 801249e:	b921      	cbnz	r1, 80124aa <_realloc_r+0x14>
 80124a0:	4611      	mov	r1, r2
 80124a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80124a6:	f7fc b841 	b.w	800e52c <_malloc_r>
 80124aa:	b922      	cbnz	r2, 80124b6 <_realloc_r+0x20>
 80124ac:	f7fb fff0 	bl	800e490 <_free_r>
 80124b0:	4625      	mov	r5, r4
 80124b2:	4628      	mov	r0, r5
 80124b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b6:	f000 f827 	bl	8012508 <_malloc_usable_size_r>
 80124ba:	42a0      	cmp	r0, r4
 80124bc:	d20f      	bcs.n	80124de <_realloc_r+0x48>
 80124be:	4621      	mov	r1, r4
 80124c0:	4638      	mov	r0, r7
 80124c2:	f7fc f833 	bl	800e52c <_malloc_r>
 80124c6:	4605      	mov	r5, r0
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0f2      	beq.n	80124b2 <_realloc_r+0x1c>
 80124cc:	4631      	mov	r1, r6
 80124ce:	4622      	mov	r2, r4
 80124d0:	f7fb ffbc 	bl	800e44c <memcpy>
 80124d4:	4631      	mov	r1, r6
 80124d6:	4638      	mov	r0, r7
 80124d8:	f7fb ffda 	bl	800e490 <_free_r>
 80124dc:	e7e9      	b.n	80124b2 <_realloc_r+0x1c>
 80124de:	4635      	mov	r5, r6
 80124e0:	e7e7      	b.n	80124b2 <_realloc_r+0x1c>
	...

080124e4 <_read_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4c07      	ldr	r4, [pc, #28]	; (8012504 <_read_r+0x20>)
 80124e8:	4605      	mov	r5, r0
 80124ea:	4608      	mov	r0, r1
 80124ec:	4611      	mov	r1, r2
 80124ee:	2200      	movs	r2, #0
 80124f0:	6022      	str	r2, [r4, #0]
 80124f2:	461a      	mov	r2, r3
 80124f4:	f000 f840 	bl	8012578 <_read>
 80124f8:	1c43      	adds	r3, r0, #1
 80124fa:	d102      	bne.n	8012502 <_read_r+0x1e>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	b103      	cbz	r3, 8012502 <_read_r+0x1e>
 8012500:	602b      	str	r3, [r5, #0]
 8012502:	bd38      	pop	{r3, r4, r5, pc}
 8012504:	2000eb14 	.word	0x2000eb14

08012508 <_malloc_usable_size_r>:
 8012508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801250c:	1f18      	subs	r0, r3, #4
 801250e:	2b00      	cmp	r3, #0
 8012510:	bfbc      	itt	lt
 8012512:	580b      	ldrlt	r3, [r1, r0]
 8012514:	18c0      	addlt	r0, r0, r3
 8012516:	4770      	bx	lr

08012518 <_close>:
 8012518:	4b02      	ldr	r3, [pc, #8]	; (8012524 <_close+0xc>)
 801251a:	2258      	movs	r2, #88	; 0x58
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	f04f 30ff 	mov.w	r0, #4294967295
 8012522:	4770      	bx	lr
 8012524:	2000eb14 	.word	0x2000eb14

08012528 <_fstat>:
 8012528:	4b02      	ldr	r3, [pc, #8]	; (8012534 <_fstat+0xc>)
 801252a:	2258      	movs	r2, #88	; 0x58
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	f04f 30ff 	mov.w	r0, #4294967295
 8012532:	4770      	bx	lr
 8012534:	2000eb14 	.word	0x2000eb14

08012538 <_getpid>:
 8012538:	4b02      	ldr	r3, [pc, #8]	; (8012544 <_getpid+0xc>)
 801253a:	2258      	movs	r2, #88	; 0x58
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	f04f 30ff 	mov.w	r0, #4294967295
 8012542:	4770      	bx	lr
 8012544:	2000eb14 	.word	0x2000eb14

08012548 <_isatty>:
 8012548:	4b02      	ldr	r3, [pc, #8]	; (8012554 <_isatty+0xc>)
 801254a:	2258      	movs	r2, #88	; 0x58
 801254c:	601a      	str	r2, [r3, #0]
 801254e:	2000      	movs	r0, #0
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	2000eb14 	.word	0x2000eb14

08012558 <_kill>:
 8012558:	4b02      	ldr	r3, [pc, #8]	; (8012564 <_kill+0xc>)
 801255a:	2258      	movs	r2, #88	; 0x58
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	f04f 30ff 	mov.w	r0, #4294967295
 8012562:	4770      	bx	lr
 8012564:	2000eb14 	.word	0x2000eb14

08012568 <_lseek>:
 8012568:	4b02      	ldr	r3, [pc, #8]	; (8012574 <_lseek+0xc>)
 801256a:	2258      	movs	r2, #88	; 0x58
 801256c:	601a      	str	r2, [r3, #0]
 801256e:	f04f 30ff 	mov.w	r0, #4294967295
 8012572:	4770      	bx	lr
 8012574:	2000eb14 	.word	0x2000eb14

08012578 <_read>:
 8012578:	4b02      	ldr	r3, [pc, #8]	; (8012584 <_read+0xc>)
 801257a:	2258      	movs	r2, #88	; 0x58
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	f04f 30ff 	mov.w	r0, #4294967295
 8012582:	4770      	bx	lr
 8012584:	2000eb14 	.word	0x2000eb14

08012588 <_sbrk>:
 8012588:	4b04      	ldr	r3, [pc, #16]	; (801259c <_sbrk+0x14>)
 801258a:	6819      	ldr	r1, [r3, #0]
 801258c:	4602      	mov	r2, r0
 801258e:	b909      	cbnz	r1, 8012594 <_sbrk+0xc>
 8012590:	4903      	ldr	r1, [pc, #12]	; (80125a0 <_sbrk+0x18>)
 8012592:	6019      	str	r1, [r3, #0]
 8012594:	6818      	ldr	r0, [r3, #0]
 8012596:	4402      	add	r2, r0
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	4770      	bx	lr
 801259c:	20001768 	.word	0x20001768
 80125a0:	2000eb18 	.word	0x2000eb18

080125a4 <_exit>:
 80125a4:	e7fe      	b.n	80125a4 <_exit>
	...

080125a8 <_init>:
 80125a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125aa:	bf00      	nop
 80125ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ae:	bc08      	pop	{r3}
 80125b0:	469e      	mov	lr, r3
 80125b2:	4770      	bx	lr

080125b4 <_fini>:
 80125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b6:	bf00      	nop
 80125b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ba:	bc08      	pop	{r3}
 80125bc:	469e      	mov	lr, r3
 80125be:	4770      	bx	lr
