
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014908  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08014b08  08014b08  00024b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154ac  080154ac  0003057c  2**0
                  CONTENTS
  4 .ARM          00000008  080154ac  080154ac  000254ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154b4  080154b4  0003057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080154b4  080154b4  000254b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154c0  080154c0  000254c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000057c  20000000  080154c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011644  2000057c  08015a40  0003057c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011bc0  08015a40  00031bc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051f41  00000000  00000000  000305aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000099fa  00000000  00000000  000824eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024e8  00000000  00000000  0008bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002148  00000000  00000000  0008e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033f25  00000000  00000000  00090518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d1a9  00000000  00000000  000c443d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00116ecc  00000000  00000000  000f15e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002084b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac94  00000000  00000000  00208530  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  002131c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00213278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000057c 	.word	0x2000057c
 800021c:	00000000 	.word	0x00000000
 8000220:	08014af0 	.word	0x08014af0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000580 	.word	0x20000580
 800023c:	08014af0 	.word	0x08014af0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fc5a 	bl	8001872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f007 fd18 	bl	80089f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f007 fcee 	bl	80089a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000239c 	.word	0x2000239c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000239c 	.word	0x2000239c

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e031      	b.n	800108a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f006 fbaa 	bl	8007788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_ADC_Init+0x84>)
 8001054:	4013      	ands	r3, r2
 8001056:	f043 0202 	orr.w	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f964 	bl	800132c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
 800107a:	e001      	b.n	8001080 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	ffffeefd 	.word	0xffffeefd

08001098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e12a      	b.n	800130a <HAL_ADC_ConfigChannel+0x272>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d93a      	bls.n	800113a <HAL_ADC_ConfigChannel+0xa2>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010cc:	d035      	beq.n	800113a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68d9      	ldr	r1, [r3, #12]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	3b1e      	subs	r3, #30
 80010e4:	2207      	movs	r2, #7
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	400a      	ands	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a87      	ldr	r2, [pc, #540]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10a      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68d9      	ldr	r1, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	061a      	lsls	r2, r3, #24
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001112:	e035      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	4603      	mov	r3, r0
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4403      	add	r3, r0
 800112c:	3b1e      	subs	r3, #30
 800112e:	409a      	lsls	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	e022      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6919      	ldr	r1, [r3, #16]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43da      	mvns	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	400a      	ands	r2, r1
 800115c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4403      	add	r3, r0
 8001176:	409a      	lsls	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b06      	cmp	r3, #6
 8001186:	d824      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	221f      	movs	r2, #31
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43da      	mvns	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	400a      	ands	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b05      	subs	r3, #5
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
 80011d0:	e04c      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d824      	bhi.n	8001224 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	; 0x23
 80011ec:	221f      	movs	r2, #31
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	3b23      	subs	r3, #35	; 0x23
 8001216:	fa00 f203 	lsl.w	r2, r0, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e023      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	; 0x41
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43da      	mvns	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b41      	subs	r3, #65	; 0x41
 8001260:	fa00 f203 	lsl.w	r2, r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800127e:	d105      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 8001286:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800128a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d109      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d105      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_ADC_ConfigChannel+0x284>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d125      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x22e>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d11c      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_ADC_ConfigChannel+0x288>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_ADC_ConfigChannel+0x280>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d111      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_ADC_ConfigChannel+0x28c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_ADC_ConfigChannel+0x290>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9a      	lsrs	r2, r3, #18
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012f2:	e002      	b.n	80012fa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f9      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	10000012 	.word	0x10000012
 800131c:	40012000 	.word	0x40012000
 8001320:	40012300 	.word	0x40012300
 8001324:	2000000c 	.word	0x2000000c
 8001328:	431bde83 	.word	0x431bde83

0800132c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	4b78      	ldr	r3, [pc, #480]	; (8001518 <ADC_Init+0x1ec>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a77      	ldr	r2, [pc, #476]	; (8001518 <ADC_Init+0x1ec>)
 800133a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800133e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <ADC_Init+0x1ec>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4973      	ldr	r1, [pc, #460]	; (8001518 <ADC_Init+0x1ec>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0ed      	b.n	800170e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f006 fa00 	bl	8007944 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0202 	bic.w	r2, r2, #2
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fd50 	bl	8000ff8 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155a:	e012      	b.n	8001582 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155c:	f7ff fd4c 	bl	8000ff8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d90b      	bls.n	8001582 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0c5      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e5      	bne.n	800155c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	e012      	b.n	80015ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a8:	f7ff fd26 	bl	8000ff8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d90b      	bls.n	80015ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09f      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e5      	beq.n	80015a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e5b      	ldrb	r3, [r3, #25]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e9b      	ldrb	r3, [r3, #26]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0220 	bic.w	r2, r2, #32
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7edb      	ldrb	r3, [r3, #27]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7f1b      	ldrb	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0208 	bic.w	r2, r2, #8
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7f5b      	ldrb	r3, [r3, #29]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0204 	orr.w	r2, r2, #4
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	ea42 0103 	orr.w	r1, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	05fa0000 	.word	0x05fa0000

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff4c 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189a:	f7ff ff61 	bl	8001760 <__NVIC_GetPriorityGrouping>
 800189e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	6978      	ldr	r0, [r7, #20]
 80018a6:	f7ff ffb1 	bl	800180c <NVIC_EncodePriority>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff80 	bl	80017b8 <__NVIC_SetPriority>
}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff54 	bl	800177c <__NVIC_EnableIRQ>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff fb86 	bl	8000ff8 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e099      	b.n	8001a2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	e00f      	b.n	800193a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191a:	f7ff fb6d 	bl	8000ff8 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b05      	cmp	r3, #5
 8001926:	d908      	bls.n	800193a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e078      	b.n	8001a2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e8      	bne.n	800191a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <HAL_DMA_Init+0x158>)
 8001954:	4013      	ands	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001966:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2b04      	cmp	r3, #4
 8001992:	d107      	bne.n	80019a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4313      	orrs	r3, r2
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f023 0307 	bic.w	r3, r3, #7
 80019ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d117      	bne.n	80019fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00e      	beq.n	80019fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb09 	bl	8001ff8 <DMA_CheckFifoParam>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2240      	movs	r2, #64	; 0x40
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019fa:	2301      	movs	r3, #1
 80019fc:	e016      	b.n	8001a2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fac0 	bl	8001f8c <DMA_CalcBaseAndBitshift>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	223f      	movs	r2, #63	; 0x3f
 8001a16:	409a      	lsls	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	e010803f 	.word	0xe010803f

08001a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_DMA_Start_IT+0x26>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e048      	b.n	8001af0 <HAL_DMA_Start_IT+0xb8>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d137      	bne.n	8001ae2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fa52 	bl	8001f30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	223f      	movs	r2, #63	; 0x3f
 8001a92:	409a      	lsls	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0216 	orr.w	r2, r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ab6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0208 	orr.w	r2, r2, #8
 8001ace:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e005      	b.n	8001aee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aea:	2302      	movs	r3, #2
 8001aec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b06:	f7ff fa77 	bl	8000ff8 <HAL_GetTick>
 8001b0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d008      	beq.n	8001b2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e052      	b.n	8001bd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0216 	bic.w	r2, r2, #22
 8001b38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_DMA_Abort+0x62>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0208 	bic.w	r2, r2, #8
 8001b68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	e013      	b.n	8001ba4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7c:	f7ff fa3c 	bl	8000ff8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d90c      	bls.n	8001ba4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e015      	b.n	8001bd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e4      	bne.n	8001b7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	223f      	movs	r2, #63	; 0x3f
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00c      	b.n	8001c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_DMA_IRQHandler+0x258>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_DMA_IRQHandler+0x25c>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2208      	movs	r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d043      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03c      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2210      	movs	r2, #16
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
 8001d4a:	e01f      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0208 	bic.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2220      	movs	r2, #32
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808e 	beq.w	8001eba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8086 	beq.w	8001eba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2220      	movs	r2, #32
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d136      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0216 	bic.w	r2, r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x1da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	223f      	movs	r2, #63	; 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07d      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
        }
        return;
 8001e32:	e078      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d108      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d030      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
 8001e60:	e02b      	b.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
 8001e72:	e022      	b.n	8001eba <HAL_DMA_IRQHandler+0x29e>
 8001e74:	2000000c 	.word	0x2000000c
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0210 	bic.w	r2, r2, #16
 8001e98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d032      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d307      	bcc.n	8001f02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f2      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x2ca>
 8001f00:	e000      	b.n	8001f04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e000      	b.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f26:	bf00      	nop
    }
  }
}
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop

08001f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d108      	bne.n	8001f70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6e:	e007      	b.n	8001f80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3b10      	subs	r3, #16
 8001f9c:	4a13      	ldr	r2, [pc, #76]	; (8001fec <DMA_CalcBaseAndBitshift+0x60>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x64>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d908      	bls.n	8001fcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	1d1a      	adds	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001fca:	e006      	b.n	8001fda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	aaaaaaab 	.word	0xaaaaaaab
 8001ff0:	08014e6c 	.word	0x08014e6c
 8001ff4:	fffffc00 	.word	0xfffffc00

08001ff8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11f      	bne.n	8002052 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d855      	bhi.n	80020c4 <DMA_CheckFifoParam+0xcc>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <DMA_CheckFifoParam+0x28>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002043 	.word	0x08002043
 8002028:	08002031 	.word	0x08002031
 800202c:	080020c5 	.word	0x080020c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d045      	beq.n	80020c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002040:	e042      	b.n	80020c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800204a:	d13f      	bne.n	80020cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002050:	e03c      	b.n	80020cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205a:	d121      	bne.n	80020a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d836      	bhi.n	80020d0 <DMA_CheckFifoParam+0xd8>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <DMA_CheckFifoParam+0x70>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002079 	.word	0x08002079
 800206c:	0800207f 	.word	0x0800207f
 8002070:	08002079 	.word	0x08002079
 8002074:	08002091 	.word	0x08002091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e02f      	b.n	80020de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208e:	e021      	b.n	80020d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002098:	d11e      	bne.n	80020d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209e:	e01b      	b.n	80020d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d902      	bls.n	80020ac <DMA_CheckFifoParam+0xb4>
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d003      	beq.n	80020b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020aa:	e018      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      break;
 80020b0:	e015      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00e      	beq.n	80020dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      break;
 80020c2:	e00b      	b.n	80020dc <DMA_CheckFifoParam+0xe4>
      break;
 80020c4:	bf00      	nop
 80020c6:	e00a      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020c8:	bf00      	nop
 80020ca:	e008      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020cc:	bf00      	nop
 80020ce:	e006      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020d0:	bf00      	nop
 80020d2:	e004      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020d4:	bf00      	nop
 80020d6:	e002      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;   
 80020d8:	bf00      	nop
 80020da:	e000      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020dc:	bf00      	nop
    }
  } 
  
  return status; 
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e175      	b.n	80023f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8164 	bne.w	80023f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00b      	beq.n	800214a <HAL_GPIO_Init+0x5e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213e:	2b11      	cmp	r3, #17
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b12      	cmp	r3, #18
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x100>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80be 	beq.w	80023f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_GPIO_Init+0x320>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a64      	ldr	r2, [pc, #400]	; (800240c <HAL_GPIO_Init+0x320>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_GPIO_Init+0x320>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800228e:	4a60      	ldr	r2, [pc, #384]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d037      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x334>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a53      	ldr	r2, [pc, #332]	; (8002424 <HAL_GPIO_Init+0x338>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x33c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x22a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x340>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x344>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x348>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_GPIO_Init+0x34c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x21a>
 8002302:	2309      	movs	r3, #9
 8002304:	e012      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002306:	230a      	movs	r3, #10
 8002308:	e010      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230a:	2308      	movs	r3, #8
 800230c:	e00e      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230e:	2307      	movs	r3, #7
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002312:	2306      	movs	r3, #6
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x240>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800233c:	4934      	ldr	r1, [pc, #208]	; (8002410 <HAL_GPIO_Init+0x324>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <HAL_GPIO_Init+0x350>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236e:	4a33      	ldr	r2, [pc, #204]	; (800243c <HAL_GPIO_Init+0x350>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_GPIO_Init+0x350>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_GPIO_Init+0x350>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_GPIO_Init+0x350>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_GPIO_Init+0x350>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae86 	bls.w	800210c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40021c00 	.word	0x40021c00
 8002434:	40022000 	.word	0x40022000
 8002438:	40022400 	.word	0x40022400
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fea6 	bl	80081e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f005 fcc0 	bl	8007e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e006      	b.n	800252c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800252a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800253c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_I2C_Init+0x11c>)
 800254a:	430b      	orrs	r3, r1
 800254c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	ea42 0103 	orr.w	r1, r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69d9      	ldr	r1, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	02008000 	.word	0x02008000

080025c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d138      	bne.n	800264c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e032      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	; 0x24
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	d139      	bne.n	80026e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267a:	2302      	movs	r3, #2
 800267c:	e033      	b.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2224      	movs	r2, #36	; 0x24
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002722:	f7fe fc69 	bl	8000ff8 <HAL_GetTick>
 8002726:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002728:	e009      	b.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272a:	f7fe fc65 	bl	8000ff8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002738:	d901      	bls.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e022      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d1ee      	bne.n	800272a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fe fc4e 	bl	8000ff8 <HAL_GetTick>
 800275c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800275e:	e009      	b.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002760:	f7fe fc4a 	bl	8000ff8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d901      	bls.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e007      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002780:	d1ee      	bne.n	8002760 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e29b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b96      	ldr	r3, [pc, #600]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x130>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e275      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x7a>
 8002800:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x9c>
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xc0>
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002854:	4b6f      	ldr	r3, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a6b      	ldr	r2, [pc, #428]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fbc0 	bl	8000ff8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fbbc 	bl	8000ff8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e229      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fbac 	bl	8000ff8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fba8 	bl	8000ff8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e215      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x110>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d069      	beq.n	80029a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1e9      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	493d      	ldr	r1, [pc, #244]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e040      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fb5e 	bl	8000ff8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe fb5a 	bl	8000ff8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4929      	ldr	r1, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fb3a 	bl	8000ff8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fb36 	bl	8000ff8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1a3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d038      	beq.n	8002a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d019      	beq.n	80029ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fb17 	bl	8000ff8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe fb13 	bl	8000ff8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e180      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x23a>
 80029ec:	e01a      	b.n	8002a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fafd 	bl	8000ff8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe faf9 	bl	8000ff8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d903      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e166      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
 8002a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a4 	beq.w	8002b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a88      	ldr	r2, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a66:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fac1 	bl	8000ff8 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe fabd 	bl	8000ff8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e12a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x31a>
 8002aa0:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	e02d      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x33c>
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	e01c      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x35e>
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a5e      	ldr	r2, [pc, #376]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5b      	ldr	r2, [pc, #364]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fa71 	bl	8000ff8 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe fa6d 	bl	8000ff8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0d8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ee      	beq.n	8002b1a <HAL_RCC_OscConfig+0x386>
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fa5b 	bl	8000ff8 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fa57 	bl	8000ff8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0c2      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ee      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ae 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d06d      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d14b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fa28 	bl	8000ff8 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fa24 	bl	8000ff8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e091      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	491b      	ldr	r1, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f9f6 	bl	8000ff8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe f9f2 	bl	8000ff8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e05f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x47c>
 8002c2e:	e057      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f9dc 	bl	8000ff8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f9d8 	bl	8000ff8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4b0>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_RCC_OscConfig+0x558>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d030      	beq.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d129      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d122      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d119      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10f      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d0      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d910      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 020f 	bic.w	r2, r3, #15
 8002d1e:	4965      	ldr	r1, [pc, #404]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d040      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e073      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06b      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4936      	ldr	r1, [pc, #216]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe f908 	bl	8000ff8 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe f904 	bl	8000ff8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e053      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d210      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4922      	ldr	r1, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4601      	mov	r1, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1cc>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	fa21 f303 	lsr.w	r3, r1, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 fda6 	bl	80089f4 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08014e74 	.word	0x08014e74
 8002ec0:	2000000c 	.word	0x2000000c
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ede:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d007      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x32>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d008      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x38>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 808d 	bne.w	800300e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ef6:	60bb      	str	r3, [r7, #8]
      break;
 8002ef8:	e08c      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002efc:	60bb      	str	r3, [r7, #8]
      break;
 8002efe:	e089      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f00:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f0a:	4b45      	ldr	r3, [pc, #276]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d023      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f16:	4b42      	ldr	r3, [pc, #264]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	f04f 0400 	mov.w	r4, #0
 8002f20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	ea03 0501 	and.w	r5, r3, r1
 8002f2c:	ea04 0602 	and.w	r6, r4, r2
 8002f30:	4a3d      	ldr	r2, [pc, #244]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f32:	fb02 f106 	mul.w	r1, r2, r6
 8002f36:	2200      	movs	r2, #0
 8002f38:	fb02 f205 	mul.w	r2, r2, r5
 8002f3c:	440a      	add	r2, r1
 8002f3e:	493a      	ldr	r1, [pc, #232]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f40:	fba5 0101 	umull	r0, r1, r5, r1
 8002f44:	1853      	adds	r3, r2, r1
 8002f46:	4619      	mov	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f04f 0400 	mov.w	r4, #0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4623      	mov	r3, r4
 8002f52:	f7fd f9cd 	bl	80002f0 <__aeabi_uldivmod>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e049      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	f04f 0400 	mov.w	r4, #0
 8002f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	ea03 0501 	and.w	r5, r3, r1
 8002f74:	ea04 0602 	and.w	r6, r4, r2
 8002f78:	4629      	mov	r1, r5
 8002f7a:	4632      	mov	r2, r6
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f04f 0400 	mov.w	r4, #0
 8002f84:	0154      	lsls	r4, r2, #5
 8002f86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8a:	014b      	lsls	r3, r1, #5
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4622      	mov	r2, r4
 8002f90:	1b49      	subs	r1, r1, r5
 8002f92:	eb62 0206 	sbc.w	r2, r2, r6
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f04f 0400 	mov.w	r4, #0
 8002f9e:	0194      	lsls	r4, r2, #6
 8002fa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fa4:	018b      	lsls	r3, r1, #6
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	00e2      	lsls	r2, r4, #3
 8002fb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fba:	00d9      	lsls	r1, r3, #3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	195b      	adds	r3, r3, r5
 8002fc2:	eb44 0406 	adc.w	r4, r4, r6
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	02a2      	lsls	r2, r4, #10
 8002fd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fd4:	0299      	lsls	r1, r3, #10
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4614      	mov	r4, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4621      	mov	r1, r4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f04f 0400 	mov.w	r4, #0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	f7fd f982 	bl	80002f0 <__aeabi_uldivmod>
 8002fec:	4603      	mov	r3, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	60bb      	str	r3, [r7, #8]
      break;
 800300c:	e002      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003010:	60bb      	str	r3, [r7, #8]
      break;
 8003012:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003014:	68bb      	ldr	r3, [r7, #8]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	2000000c 	.word	0x2000000c

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4601      	mov	r1, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	08014e84 	.word	0x08014e84

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffdc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003074:	4601      	mov	r1, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4a03      	ldr	r2, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	08014e84 	.word	0x08014e84

08003094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	220f      	movs	r2, #15
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_RCC_GetClockConfig+0x60>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003120:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	4964      	ldr	r1, [pc, #400]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	4959      	ldr	r1, [pc, #356]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800318e:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	494a      	ldr	r1, [pc, #296]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 808b 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fd fefa 	bl	8000ff8 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fd fef6 	bl	8000ff8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e38d      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d035      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d02e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d114      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd febe 	bl	8000ff8 <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fd feba 	bl	8000ff8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e34f      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ee      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ae:	d111      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032be:	400b      	ands	r3, r1
 80032c0:	4901      	ldr	r1, [pc, #4]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	0ffffcff 	.word	0x0ffffcff
 80032d4:	4bb3      	ldr	r3, [pc, #716]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4ab2      	ldr	r2, [pc, #712]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	4bb0      	ldr	r3, [pc, #704]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	49ad      	ldr	r1, [pc, #692]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d010      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032fe:	4ba9      	ldr	r3, [pc, #676]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	4aa7      	ldr	r2, [pc, #668]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800330e:	4ba5      	ldr	r3, [pc, #660]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	49a2      	ldr	r1, [pc, #648]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332c:	4b9d      	ldr	r3, [pc, #628]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	499a      	ldr	r1, [pc, #616]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334e:	4b95      	ldr	r3, [pc, #596]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335c:	4991      	ldr	r1, [pc, #580]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337e:	4989      	ldr	r1, [pc, #548]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003392:	4b84      	ldr	r3, [pc, #528]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4980      	ldr	r1, [pc, #512]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b4:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4978      	ldr	r1, [pc, #480]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 020c 	bic.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	496f      	ldr	r1, [pc, #444]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	4967      	ldr	r1, [pc, #412]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800341a:	4b62      	ldr	r3, [pc, #392]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003428:	495e      	ldr	r1, [pc, #376]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343c:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	4956      	ldr	r1, [pc, #344]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	494d      	ldr	r1, [pc, #308]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	4945      	ldr	r1, [pc, #276]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	493c      	ldr	r1, [pc, #240]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	4934      	ldr	r1, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d011      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034e6:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f4:	492b      	ldr	r1, [pc, #172]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	4912      	ldr	r1, [pc, #72]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800356c:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357c:	4909      	ldr	r1, [pc, #36]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00f      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	4985      	ldr	r1, [pc, #532]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035bc:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035cc:	497c      	ldr	r1, [pc, #496]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e2:	f040 80d6 	bne.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f2:	f7fd fd01 	bl	8000ff8 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035fa:	f7fd fcfd 	bl	8000ff8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e194      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800360c:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d021      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800363a:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	019a      	lsls	r2, r3, #6
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	071b      	lsls	r3, r3, #28
 8003660:	4957      	ldr	r1, [pc, #348]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02e      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003692:	d129      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003694:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	0f1b      	lsrs	r3, r3, #28
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	019a      	lsls	r2, r3, #6
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	071b      	lsls	r3, r3, #28
 80036c8:	493d      	ldr	r1, [pc, #244]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d6:	f023 021f 	bic.w	r2, r3, #31
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	3b01      	subs	r3, #1
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01d      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	0e1b      	lsrs	r3, r3, #24
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003708:	0f1b      	lsrs	r3, r3, #28
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	019a      	lsls	r2, r3, #6
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	431a      	orrs	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	071b      	lsls	r3, r3, #28
 8003728:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	019a      	lsls	r2, r3, #6
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	071b      	lsls	r3, r3, #28
 8003758:	4919      	ldr	r1, [pc, #100]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fd fc44 	bl	8000ff8 <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003774:	f7fd fc40 	bl	8000ff8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0d7      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 80cd 	bne.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a6:	f7fd fc27 	bl	8000ff8 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ae:	f7fd fc23 	bl	8000ff8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d903      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0ba      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80037c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c4:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d0:	d0ed      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02e      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037fa:	4b51      	ldr	r3, [pc, #324]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003808:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	0f1b      	lsrs	r3, r3, #28
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	019a      	lsls	r2, r3, #6
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	071b      	lsls	r3, r3, #28
 800382e:	4944      	ldr	r1, [pc, #272]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003836:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800383c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	493d      	ldr	r1, [pc, #244]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003864:	d11d      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4929      	ldr	r1, [pc, #164]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	0e1b      	lsrs	r3, r3, #24
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038bc:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	019a      	lsls	r2, r3, #6
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	4917      	ldr	r1, [pc, #92]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4911      	ldr	r1, [pc, #68]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fd fb74 	bl	8000ff8 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003914:	f7fd fb70 	bl	8000ff8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e007      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003932:	d1ef      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e084      	b.n	8003a60 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f004 fd89 	bl	8008488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003996:	d902      	bls.n	800399e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e002      	b.n	80039a4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800399e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039ac:	d007      	beq.n	80039be <HAL_SPI_Init+0x7a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b6:	d002      	beq.n	80039be <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ce:	d903      	bls.n	80039d8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
 80039d6:	e002      	b.n	80039de <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	ea42 0103 	orr.w	r1, r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0204 	and.w	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	ea42 0103 	orr.w	r1, r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e16c      	b.n	8003d62 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a96:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003a9e:	7dbb      	ldrb	r3, [r7, #22]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d106      	bne.n	8003aba <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_TransmitReceive_DMA+0x52>
 8003ab4:	7dbb      	ldrb	r3, [r7, #22]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
 8003abc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003abe:	e14b      	b.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad6:	e13f      	b.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	887a      	ldrh	r2, [r7, #2]
 8003b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	887a      	ldrh	r2, [r7, #2]
 8003b16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003b34:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b3e:	d908      	bls.n	8003b52 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	e06f      	b.n	8003c32 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b60:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d126      	bne.n	8003bbc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b88:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b98:	e010      	b.n	8003bbc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc6:	d134      	bne.n	8003c32 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c0a:	e012      	b.n	8003c32 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c1a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d108      	bne.n	8003c50 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c4e:	e007      	b.n	8003c60 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4a47      	ldr	r2, [pc, #284]	; (8003d74 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	4a45      	ldr	r2, [pc, #276]	; (8003d7c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	461a      	mov	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f7fd fed5 	bl	8001a38 <HAL_DMA_Start_IT>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00c      	beq.n	8003cae <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003cac:	e054      	b.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	2200      	movs	r2, #0
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	2200      	movs	r2, #0
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f7fd fe9f 	bl	8001a38 <HAL_DMA_Start_IT>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	f043 0210 	orr.w	r2, r3, #16
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003d18:	e01e      	b.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d007      	beq.n	8003d38 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0202 	orr.w	r2, r2, #2
 8003d56:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	080040d5 	.word	0x080040d5
 8003d70:	08003fbd 	.word	0x08003fbd
 8003d74:	080040f1 	.word	0x080040f1
 8003d78:	08004043 	.word	0x08004043
 8003d7c:	0800410d 	.word	0x0800410d

08003d80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
    return;
 8003dc2:	e0d8      	b.n	8003f76 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_SPI_IRQHandler+0x66>
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
    return;
 8003de4:	e0c7      	b.n	8003f76 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_SPI_IRQHandler+0x8c>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_SPI_IRQHandler+0x8c>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b5 	beq.w	8003f76 <HAL_SPI_IRQHandler+0x1f6>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80ae 	beq.w	8003f76 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d023      	beq.n	8003e6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d011      	beq.n	8003e56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	f043 0204 	orr.w	r2, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	e00b      	b.n	8003e6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]
        return;
 8003e6c:	e083      	b.n	8003f76 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d014      	beq.n	8003ea4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f043 0208 	orr.w	r2, r3, #8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d050      	beq.n	8003f74 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_SPI_IRQHandler+0x17e>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d034      	beq.n	8003f68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0203 	bic.w	r2, r2, #3
 8003f0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d011      	beq.n	8003f3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_SPI_IRQHandler+0x1fc>)
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fe58 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_SPI_IRQHandler+0x1fc>)
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd fe42 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003f66:	e003      	b.n	8003f70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f004 f92f 	bl	80081cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f6e:	e000      	b.n	8003f72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f70:	bf00      	nop
    return;
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
  }
}
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	0800414d 	.word	0x0800414d

08003f80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fca:	f7fd f815 	bl	8000ff8 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fde:	d02a      	beq.n	8004036 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0220 	bic.w	r2, r2, #32
 8003fee:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0203 	bic.w	r2, r2, #3
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f98d 	bl	8004324 <SPI_EndRxTransaction>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f004 f8cc 	bl	80081cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004034:	e002      	b.n	800403c <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ffa2 	bl	8003f80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004050:	f7fc ffd2 	bl	8000ff8 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	d030      	beq.n	80040c8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0220 	bic.w	r2, r2, #32
 8004074:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	2164      	movs	r1, #100	; 0x64
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f9aa 	bl	80043d4 <SPI_EndRxTxTransaction>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0203 	bic.w	r2, r2, #3
 80040a0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f004 f883 	bl	80081cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040c6:	e002      	b.n	80040ce <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f004 f871 	bl	80081b0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ff56 	bl	8003f94 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff ff52 	bl	8003fa8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0203 	bic.w	r2, r2, #3
 8004128:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	f043 0210 	orr.w	r2, r3, #16
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f004 f844 	bl	80081cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f004 f82f 	bl	80081cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e04c      	b.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d048      	beq.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004190:	f7fc ff32 	bl	8000ff8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e00f      	b.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d1a3      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004258:	e057      	b.n	800430a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004260:	d106      	bne.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d048      	beq.n	800430a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004278:	f7fc febe 	bl	8000ff8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d902      	bls.n	800428e <SPI_WaitFifoStateUntilTimeout+0x44>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d13d      	bne.n	800430a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800429c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a6:	d111      	bne.n	80042cc <SPI_WaitFifoStateUntilTimeout+0x82>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	d004      	beq.n	80042bc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d107      	bne.n	80042cc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d4:	d10f      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e008      	b.n	800431c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d19f      	bne.n	800425a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004338:	d111      	bne.n	800435e <SPI_EndRxTransaction+0x3a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d004      	beq.n	800434e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d107      	bne.n	800435e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff ff04 	bl	8004176 <SPI_WaitFlagStateUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e023      	b.n	80043cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d11d      	bne.n	80043ca <SPI_EndRxTransaction+0xa6>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004396:	d004      	beq.n	80043a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a0:	d113      	bne.n	80043ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff4b 	bl	800424a <SPI_WaitFifoStateUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e000      	b.n	80043cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff ff2c 	bl	800424a <SPI_WaitFifoStateUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e027      	b.n	8004458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff feaf 	bl	8004176 <SPI_WaitFlagStateUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e014      	b.n	8004458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff ff05 	bl	800424a <SPI_WaitFifoStateUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e000      	b.n	8004458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e01d      	b.n	80044ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f005 f8ba 	bl	8009600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fbbe 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <HAL_TIM_Base_Start_IT+0x50>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d00b      	beq.n	80044fa <HAL_TIM_Base_Start_IT+0x42>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d007      	beq.n	80044fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e01d      	b.n	800455a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f005 f91c 	bl	8009770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fb68 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 feea 	bl	8005350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_TIM_PWM_Start+0x7c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_PWM_Start+0x2c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <HAL_TIM_PWM_Start+0x80>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_TIM_PWM_Start+0x30>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_TIM_PWM_Start+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_TIM_PWM_Start+0x84>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b06      	cmp	r3, #6
 80045ba:	d00b      	beq.n	80045d4 <HAL_TIM_PWM_Start+0x70>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d007      	beq.n	80045d4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40010400 	.word	0x40010400
 80045e8:	00010007 	.word	0x00010007

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0202 	mvn.w	r2, #2
 8004618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fad8 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 faca 	bl	8004bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fadb 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d122      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d11b      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 faae 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 faa0 	bl	8004bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fab1 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0208 	mvn.w	r2, #8
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2204      	movs	r2, #4
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa84 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa76 	bl	8004bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa87 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa5a 	bl	8004be4 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa4c 	bl	8004bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fa5d 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0201 	mvn.w	r2, #1
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f003 fd80 	bl	8008270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d10e      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d107      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 ff16 	bl	80055c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d10e      	bne.n	80047ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d107      	bne.n	80047ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 ff09 	bl	80055dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d10e      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d107      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa0b 	bl	8004c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d10e      	bne.n	8004822 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d107      	bne.n	8004822 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f06f 0220 	mvn.w	r2, #32
 800481a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fec9 	bl	80055b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004842:	2302      	movs	r3, #2
 8004844:	e105      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b14      	cmp	r3, #20
 800485a:	f200 80f0 	bhi.w	8004a3e <HAL_TIM_PWM_ConfigChannel+0x212>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004a3f 	.word	0x08004a3f
 800486c:	08004a3f 	.word	0x08004a3f
 8004870:	08004a3f 	.word	0x08004a3f
 8004874:	080048f9 	.word	0x080048f9
 8004878:	08004a3f 	.word	0x08004a3f
 800487c:	08004a3f 	.word	0x08004a3f
 8004880:	08004a3f 	.word	0x08004a3f
 8004884:	0800493b 	.word	0x0800493b
 8004888:	08004a3f 	.word	0x08004a3f
 800488c:	08004a3f 	.word	0x08004a3f
 8004890:	08004a3f 	.word	0x08004a3f
 8004894:	0800497b 	.word	0x0800497b
 8004898:	08004a3f 	.word	0x08004a3f
 800489c:	08004a3f 	.word	0x08004a3f
 80048a0:	08004a3f 	.word	0x08004a3f
 80048a4:	080049bd 	.word	0x080049bd
 80048a8:	08004a3f 	.word	0x08004a3f
 80048ac:	08004a3f 	.word	0x08004a3f
 80048b0:	08004a3f 	.word	0x08004a3f
 80048b4:	080049fd 	.word	0x080049fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fa4e 	bl	8004d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	619a      	str	r2, [r3, #24]
      break;
 80048f6:	e0a3      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 faa0 	bl	8004e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6999      	ldr	r1, [r3, #24]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	021a      	lsls	r2, r3, #8
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	619a      	str	r2, [r3, #24]
      break;
 8004938:	e082      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 faf7 	bl	8004f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0208 	orr.w	r2, r2, #8
 8004954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0204 	bic.w	r2, r2, #4
 8004964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69d9      	ldr	r1, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	61da      	str	r2, [r3, #28]
      break;
 8004978:	e062      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fb4d 	bl	8005020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69d9      	ldr	r1, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	021a      	lsls	r2, r3, #8
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	61da      	str	r2, [r3, #28]
      break;
 80049ba:	e041      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fb84 	bl	80050d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049fa:	e021      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fbb6 	bl	8005174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a3c:	e000      	b.n	8004a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004a3e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop

08004a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_ConfigClockSource+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e0a6      	b.n	8004bc2 <HAL_TIM_ConfigClockSource+0x166>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <HAL_TIM_ConfigClockSource+0x170>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d067      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0x120>
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d80b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x6c>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d073      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0x140>
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d802      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x62>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d06f      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004abc:	e078      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d06c      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0x140>
 8004ac2:	2b30      	cmp	r3, #48	; 0x30
 8004ac4:	d06a      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ac6:	e073      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ac8:	2b70      	cmp	r3, #112	; 0x70
 8004aca:	d00d      	beq.n	8004ae8 <HAL_TIM_ConfigClockSource+0x8c>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d804      	bhi.n	8004ada <HAL_TIM_ConfigClockSource+0x7e>
 8004ad0:	2b50      	cmp	r3, #80	; 0x50
 8004ad2:	d033      	beq.n	8004b3c <HAL_TIM_ConfigClockSource+0xe0>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d041      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ad8:	e06a      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d066      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x152>
 8004ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae4:	d017      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ae6:	e063      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6899      	ldr	r1, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f000 fc0a 	bl	8005310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	609a      	str	r2, [r3, #8]
      break;
 8004b14:	e04c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f000 fbf3 	bl	8005310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b38:	609a      	str	r2, [r3, #8]
      break;
 8004b3a:	e039      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f000 fb67 	bl	800521c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2150      	movs	r1, #80	; 0x50
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fbc0 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004b5a:	e029      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f000 fb86 	bl	800527a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2160      	movs	r1, #96	; 0x60
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fbb0 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004b7a:	e019      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f000 fb47 	bl	800521c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2140      	movs	r1, #64	; 0x40
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fba0 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004b9a:	e009      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 fb97 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	fffeff88 	.word	0xfffeff88

08004bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d027      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d023      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d017      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <TIM_Base_SetConfig+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_Base_SetConfig+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <TIM_Base_SetConfig+0x134>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <TIM_Base_SetConfig+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <TIM_Base_SetConfig+0x13c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800
 8004d54:	40001800 	.word	0x40001800
 8004d58:	40001c00 	.word	0x40001c00
 8004d5c:	40002000 	.word	0x40002000

08004d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <TIM_OC1_SetConfig+0xd8>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0302 	bic.w	r3, r3, #2
 8004da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <TIM_OC1_SetConfig+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x64>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a20      	ldr	r2, [pc, #128]	; (8004e40 <TIM_OC1_SetConfig+0xe0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <TIM_OC1_SetConfig+0xdc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC1_SetConfig+0x8e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <TIM_OC1_SetConfig+0xe0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	fffeff8f 	.word	0xfffeff8f
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400

08004e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0210 	bic.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <TIM_OC2_SetConfig+0xe4>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <TIM_OC2_SetConfig+0xe8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC2_SetConfig+0x68>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <TIM_OC2_SetConfig+0xec>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10d      	bne.n	8004ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <TIM_OC2_SetConfig+0xe8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC2_SetConfig+0x94>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <TIM_OC2_SetConfig+0xec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d113      	bne.n	8004f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	feff8fff 	.word	0xfeff8fff
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <TIM_OC3_SetConfig+0xe0>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <TIM_OC3_SetConfig+0xe4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC3_SetConfig+0x66>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <TIM_OC3_SetConfig+0xe8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10d      	bne.n	8004fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <TIM_OC3_SetConfig+0xe4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC3_SetConfig+0x92>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <TIM_OC3_SetConfig+0xe8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	fffeff8f 	.word	0xfffeff8f
 8005018:	40010000 	.word	0x40010000
 800501c:	40010400 	.word	0x40010400

08005020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <TIM_OC4_SetConfig+0xa4>)
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <TIM_OC4_SetConfig+0xa8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC4_SetConfig+0x68>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <TIM_OC4_SetConfig+0xac>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d109      	bne.n	800509c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	feff8fff 	.word	0xfeff8fff
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <TIM_OC5_SetConfig+0x98>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a12      	ldr	r2, [pc, #72]	; (800516c <TIM_OC5_SetConfig+0x9c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC5_SetConfig+0x5e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a11      	ldr	r2, [pc, #68]	; (8005170 <TIM_OC5_SetConfig+0xa0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d109      	bne.n	8005142 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	fffeff8f 	.word	0xfffeff8f
 800516c:	40010000 	.word	0x40010000
 8005170:	40010400 	.word	0x40010400

08005174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <TIM_OC6_SetConfig+0x9c>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	051b      	lsls	r3, r3, #20
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <TIM_OC6_SetConfig+0xa0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC6_SetConfig+0x60>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <TIM_OC6_SetConfig+0xa4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d109      	bne.n	80051e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	feff8fff 	.word	0xfeff8fff
 8005214:	40010000 	.word	0x40010000
 8005218:	40010400 	.word	0x40010400

0800521c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 030a 	bic.w	r3, r3, #10
 8005258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0210 	bic.w	r2, r3, #16
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f043 0307 	orr.w	r3, r3, #7
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	021a      	lsls	r2, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	431a      	orrs	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4313      	orrs	r3, r2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e06d      	b.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d108      	bne.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005426:	d01d      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10c      	bne.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4313      	orrs	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40010000 	.word	0x40010000
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40001800 	.word	0x40001800

080054b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e065      	b.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a16      	ldr	r2, [pc, #88]	; (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d115      	bne.n	800558e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40010400 	.word	0x40010400

080055b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e040      	b.n	8005684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f004 fb12 	bl	8009c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	; 0x24
 800561c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 faa4 	bl	8005b7c <UART_SetConfig>
 8005634:	4603      	mov	r3, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e022      	b.n	8005684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fd42 	bl	80060d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fdc9 	bl	8006214 <UART_CheckIdleState>
 8005682:	4603      	mov	r3, r0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d164      	bne.n	800576c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_UART_Transmit_DMA+0x22>
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e05d      	b.n	800576e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Transmit_DMA+0x34>
 80056bc:	2302      	movs	r3, #2
 80056be:	e056      	b.n	800576e <HAL_UART_Transmit_DMA+0xe2>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2221      	movs	r2, #33	; 0x21
 80056e8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02a      	beq.n	8005748 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f6:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_UART_Transmit_DMA+0xec>)
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_UART_Transmit_DMA+0xf0>)
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_UART_Transmit_DMA+0xf4>)
 8005708:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570e:	2200      	movs	r2, #0
 8005710:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	4619      	mov	r1, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3328      	adds	r3, #40	; 0x28
 8005722:	461a      	mov	r2, r3
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	f7fc f987 	bl	8001a38 <HAL_DMA_Start_IT>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2210      	movs	r2, #16
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e012      	b.n	800576e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005766:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	080063ff 	.word	0x080063ff
 800577c:	0800644f 	.word	0x0800644f
 8005780:	080064eb 	.word	0x080064eb

08005784 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005796:	2b20      	cmp	r3, #32
 8005798:	d16c      	bne.n	8005874 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_UART_Receive_DMA+0x22>
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e065      	b.n	8005876 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_UART_Receive_DMA+0x34>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e05e      	b.n	8005876 <HAL_UART_Receive_DMA+0xf2>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2222      	movs	r2, #34	; 0x22
 80057d8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02a      	beq.n	8005838 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <HAL_UART_Receive_DMA+0xfc>)
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	4a25      	ldr	r2, [pc, #148]	; (8005884 <HAL_UART_Receive_DMA+0x100>)
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f6:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_UART_Receive_DMA+0x104>)
 80057f8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fe:	2200      	movs	r2, #0
 8005800:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	4619      	mov	r1, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	461a      	mov	r2, r3
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	f7fc f90f 	bl	8001a38 <HAL_DMA_Start_IT>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2210      	movs	r2, #16
 8005824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01e      	b.n	8005876 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	0800646b 	.word	0x0800646b
 8005884:	080064cf 	.word	0x080064cf
 8005888:	080064eb 	.word	0x080064eb

0800588c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80058b2:	4013      	ands	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d113      	bne.n	80058e4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8114 	beq.w	8005b02 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
      }
      return;
 80058e2:	e10e      	b.n	8005b02 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80d6 	beq.w	8005a98 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80cb 	beq.w	8005a98 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <HAL_UART_IRQHandler+0x9e>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2201      	movs	r2, #1
 800591c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <HAL_UART_IRQHandler+0xc6>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2202      	movs	r2, #2
 8005944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00e      	beq.n	800597a <HAL_UART_IRQHandler+0xee>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2204      	movs	r2, #4
 800596c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a4:	f043 0208 	orr.w	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <HAL_UART_IRQHandler+0x14a>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 8093 	beq.w	8005b06 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d004      	beq.n	8005a22 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d031      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fccb 	bl	80063be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d123      	bne.n	8005a7e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a52:	4a30      	ldr	r2, [pc, #192]	; (8005b14 <HAL_UART_IRQHandler+0x288>)
 8005a54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc f8bc 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	e00e      	b.n	8005a94 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f86c 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00a      	b.n	8005a94 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f868 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e006      	b.n	8005a94 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f864 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005a92:	e038      	b.n	8005b06 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	bf00      	nop
    return;
 8005a96:	e036      	b.n	8005b06 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <HAL_UART_IRQHandler+0x232>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f856 	bl	8005b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005abc:	e026      	b.n	8005b0c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
    }
    return;
 8005ae2:	e012      	b.n	8005b0a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00e      	beq.n	8005b0c <HAL_UART_IRQHandler+0x280>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fd48 	bl	800658e <UART_EndTransmit_IT>
    return;
 8005afe:	bf00      	nop
 8005b00:	e004      	b.n	8005b0c <HAL_UART_IRQHandler+0x280>
      return;
 8005b02:	bf00      	nop
 8005b04:	e002      	b.n	8005b0c <HAL_UART_IRQHandler+0x280>
    return;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <HAL_UART_IRQHandler+0x280>
    return;
 8005b0a:	bf00      	nop
  }

}
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08006563 	.word	0x08006563

08005b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4bb1      	ldr	r3, [pc, #708]	; (8005e70 <UART_SetConfig+0x2f4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	6939      	ldr	r1, [r7, #16]
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a9f      	ldr	r2, [pc, #636]	; (8005e74 <UART_SetConfig+0x2f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d121      	bne.n	8005c40 <UART_SetConfig+0xc4>
 8005bfc:	4b9e      	ldr	r3, [pc, #632]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d816      	bhi.n	8005c38 <UART_SetConfig+0xbc>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x94>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c27 	.word	0x08005c27
 8005c1c:	08005c33 	.word	0x08005c33
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e151      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e14e      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e14b      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c32:	2308      	movs	r3, #8
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e148      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	bf00      	nop
 8005c3e:	e144      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a8d      	ldr	r2, [pc, #564]	; (8005e7c <UART_SetConfig+0x300>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d134      	bne.n	8005cb4 <UART_SetConfig+0x138>
 8005c4a:	4b8b      	ldr	r3, [pc, #556]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d829      	bhi.n	8005cac <UART_SetConfig+0x130>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0xe4>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005cad 	.word	0x08005cad
 8005c68:	08005cad 	.word	0x08005cad
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005ca1 	.word	0x08005ca1
 8005c74:	08005cad 	.word	0x08005cad
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005c9b 	.word	0x08005c9b
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cad 	.word	0x08005cad
 8005c90:	08005ca7 	.word	0x08005ca7
 8005c94:	2300      	movs	r3, #0
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e117      	b.n	8005eca <UART_SetConfig+0x34e>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e114      	b.n	8005eca <UART_SetConfig+0x34e>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e111      	b.n	8005eca <UART_SetConfig+0x34e>
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e10e      	b.n	8005eca <UART_SetConfig+0x34e>
 8005cac:	2310      	movs	r3, #16
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	bf00      	nop
 8005cb2:	e10a      	b.n	8005eca <UART_SetConfig+0x34e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a71      	ldr	r2, [pc, #452]	; (8005e80 <UART_SetConfig+0x304>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d120      	bne.n	8005d00 <UART_SetConfig+0x184>
 8005cbe:	4b6e      	ldr	r3, [pc, #440]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cc8:	2b10      	cmp	r3, #16
 8005cca:	d00f      	beq.n	8005cec <UART_SetConfig+0x170>
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d802      	bhi.n	8005cd6 <UART_SetConfig+0x15a>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0x164>
 8005cd4:	e010      	b.n	8005cf8 <UART_SetConfig+0x17c>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d005      	beq.n	8005ce6 <UART_SetConfig+0x16a>
 8005cda:	2b30      	cmp	r3, #48	; 0x30
 8005cdc:	d009      	beq.n	8005cf2 <UART_SetConfig+0x176>
 8005cde:	e00b      	b.n	8005cf8 <UART_SetConfig+0x17c>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e0f1      	b.n	8005eca <UART_SetConfig+0x34e>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e0ee      	b.n	8005eca <UART_SetConfig+0x34e>
 8005cec:	2304      	movs	r3, #4
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e0eb      	b.n	8005eca <UART_SetConfig+0x34e>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e0e8      	b.n	8005eca <UART_SetConfig+0x34e>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	bf00      	nop
 8005cfe:	e0e4      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a5f      	ldr	r2, [pc, #380]	; (8005e84 <UART_SetConfig+0x308>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d120      	bne.n	8005d4c <UART_SetConfig+0x1d0>
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d00f      	beq.n	8005d38 <UART_SetConfig+0x1bc>
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d802      	bhi.n	8005d22 <UART_SetConfig+0x1a6>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <UART_SetConfig+0x1b0>
 8005d20:	e010      	b.n	8005d44 <UART_SetConfig+0x1c8>
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d005      	beq.n	8005d32 <UART_SetConfig+0x1b6>
 8005d26:	2bc0      	cmp	r3, #192	; 0xc0
 8005d28:	d009      	beq.n	8005d3e <UART_SetConfig+0x1c2>
 8005d2a:	e00b      	b.n	8005d44 <UART_SetConfig+0x1c8>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e0cb      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d32:	2302      	movs	r3, #2
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e0c8      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e0c5      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e0c2      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d44:	2310      	movs	r3, #16
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	bf00      	nop
 8005d4a:	e0be      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a4d      	ldr	r2, [pc, #308]	; (8005e88 <UART_SetConfig+0x30c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d124      	bne.n	8005da0 <UART_SetConfig+0x224>
 8005d56:	4b48      	ldr	r3, [pc, #288]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d64:	d012      	beq.n	8005d8c <UART_SetConfig+0x210>
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6a:	d802      	bhi.n	8005d72 <UART_SetConfig+0x1f6>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <UART_SetConfig+0x204>
 8005d70:	e012      	b.n	8005d98 <UART_SetConfig+0x21c>
 8005d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d76:	d006      	beq.n	8005d86 <UART_SetConfig+0x20a>
 8005d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7c:	d009      	beq.n	8005d92 <UART_SetConfig+0x216>
 8005d7e:	e00b      	b.n	8005d98 <UART_SetConfig+0x21c>
 8005d80:	2300      	movs	r3, #0
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e0a1      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e09e      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e09b      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d92:	2308      	movs	r3, #8
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e098      	b.n	8005eca <UART_SetConfig+0x34e>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	bf00      	nop
 8005d9e:	e094      	b.n	8005eca <UART_SetConfig+0x34e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a39      	ldr	r2, [pc, #228]	; (8005e8c <UART_SetConfig+0x310>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d124      	bne.n	8005df4 <UART_SetConfig+0x278>
 8005daa:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d012      	beq.n	8005de0 <UART_SetConfig+0x264>
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbe:	d802      	bhi.n	8005dc6 <UART_SetConfig+0x24a>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <UART_SetConfig+0x258>
 8005dc4:	e012      	b.n	8005dec <UART_SetConfig+0x270>
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d006      	beq.n	8005dda <UART_SetConfig+0x25e>
 8005dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd0:	d009      	beq.n	8005de6 <UART_SetConfig+0x26a>
 8005dd2:	e00b      	b.n	8005dec <UART_SetConfig+0x270>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e077      	b.n	8005eca <UART_SetConfig+0x34e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e074      	b.n	8005eca <UART_SetConfig+0x34e>
 8005de0:	2304      	movs	r3, #4
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e071      	b.n	8005eca <UART_SetConfig+0x34e>
 8005de6:	2308      	movs	r3, #8
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	e06e      	b.n	8005eca <UART_SetConfig+0x34e>
 8005dec:	2310      	movs	r3, #16
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	bf00      	nop
 8005df2:	e06a      	b.n	8005eca <UART_SetConfig+0x34e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <UART_SetConfig+0x314>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d124      	bne.n	8005e48 <UART_SetConfig+0x2cc>
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d012      	beq.n	8005e34 <UART_SetConfig+0x2b8>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d802      	bhi.n	8005e1a <UART_SetConfig+0x29e>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <UART_SetConfig+0x2ac>
 8005e18:	e012      	b.n	8005e40 <UART_SetConfig+0x2c4>
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1e:	d006      	beq.n	8005e2e <UART_SetConfig+0x2b2>
 8005e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e24:	d009      	beq.n	8005e3a <UART_SetConfig+0x2be>
 8005e26:	e00b      	b.n	8005e40 <UART_SetConfig+0x2c4>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e04d      	b.n	8005eca <UART_SetConfig+0x34e>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e04a      	b.n	8005eca <UART_SetConfig+0x34e>
 8005e34:	2304      	movs	r3, #4
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e047      	b.n	8005eca <UART_SetConfig+0x34e>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e044      	b.n	8005eca <UART_SetConfig+0x34e>
 8005e40:	2310      	movs	r3, #16
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	bf00      	nop
 8005e46:	e040      	b.n	8005eca <UART_SetConfig+0x34e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a11      	ldr	r2, [pc, #68]	; (8005e94 <UART_SetConfig+0x318>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d139      	bne.n	8005ec6 <UART_SetConfig+0x34a>
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <UART_SetConfig+0x2fc>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e60:	d027      	beq.n	8005eb2 <UART_SetConfig+0x336>
 8005e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e66:	d817      	bhi.n	8005e98 <UART_SetConfig+0x31c>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01c      	beq.n	8005ea6 <UART_SetConfig+0x32a>
 8005e6c:	e027      	b.n	8005ebe <UART_SetConfig+0x342>
 8005e6e:	bf00      	nop
 8005e70:	efff69f3 	.word	0xefff69f3
 8005e74:	40011000 	.word	0x40011000
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	40004400 	.word	0x40004400
 8005e80:	40004800 	.word	0x40004800
 8005e84:	40004c00 	.word	0x40004c00
 8005e88:	40005000 	.word	0x40005000
 8005e8c:	40011400 	.word	0x40011400
 8005e90:	40007800 	.word	0x40007800
 8005e94:	40007c00 	.word	0x40007c00
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x330>
 8005e9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ea2:	d009      	beq.n	8005eb8 <UART_SetConfig+0x33c>
 8005ea4:	e00b      	b.n	8005ebe <UART_SetConfig+0x342>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e00e      	b.n	8005eca <UART_SetConfig+0x34e>
 8005eac:	2302      	movs	r3, #2
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e00b      	b.n	8005eca <UART_SetConfig+0x34e>
 8005eb2:	2304      	movs	r3, #4
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e008      	b.n	8005eca <UART_SetConfig+0x34e>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e005      	b.n	8005eca <UART_SetConfig+0x34e>
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	bf00      	nop
 8005ec4:	e001      	b.n	8005eca <UART_SetConfig+0x34e>
 8005ec6:	2310      	movs	r3, #16
 8005ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed2:	d17f      	bne.n	8005fd4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005ed4:	7ffb      	ldrb	r3, [r7, #31]
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d85c      	bhi.n	8005f94 <UART_SetConfig+0x418>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0x364>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f45 	.word	0x08005f45
 8005eec:	08005f95 	.word	0x08005f95
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	08005f95 	.word	0x08005f95
 8005ef8:	08005f95 	.word	0x08005f95
 8005efc:	08005f95 	.word	0x08005f95
 8005f00:	08005f7d 	.word	0x08005f7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fd f89e 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8005f08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	005a      	lsls	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	61bb      	str	r3, [r7, #24]
        break;
 8005f22:	e03a      	b.n	8005f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f24:	f7fd f8a2 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8005f28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	005a      	lsls	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	61bb      	str	r3, [r7, #24]
        break;
 8005f42:	e02a      	b.n	8005f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	085a      	lsrs	r2, r3, #1
 8005f4a:	4b5f      	ldr	r3, [pc, #380]	; (80060c8 <UART_SetConfig+0x54c>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6852      	ldr	r2, [r2, #4]
 8005f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	61bb      	str	r3, [r7, #24]
        break;
 8005f5a:	e01e      	b.n	8005f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5c:	f7fc ffb4 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8005f60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	005a      	lsls	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	441a      	add	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	61bb      	str	r3, [r7, #24]
        break;
 8005f7a:	e00e      	b.n	8005f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	61bb      	str	r3, [r7, #24]
        break;
 8005f92:	e002      	b.n	8005f9a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	75fb      	strb	r3, [r7, #23]
        break;
 8005f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	d916      	bls.n	8005fce <UART_SetConfig+0x452>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa6:	d212      	bcs.n	8005fce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f023 030f 	bic.w	r3, r3, #15
 8005fb0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	897a      	ldrh	r2, [r7, #10]
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	e070      	b.n	80060b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
 8005fd2:	e06d      	b.n	80060b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d859      	bhi.n	800608e <UART_SetConfig+0x512>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x464>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	0800608f 	.word	0x0800608f
 8005ff0:	08006059 	.word	0x08006059
 8005ff4:	0800608f 	.word	0x0800608f
 8005ff8:	0800608f 	.word	0x0800608f
 8005ffc:	0800608f 	.word	0x0800608f
 8006000:	08006077 	.word	0x08006077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fd f81e 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8006008:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085a      	lsrs	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	b29b      	uxth	r3, r3
 800601e:	61bb      	str	r3, [r7, #24]
        break;
 8006020:	e038      	b.n	8006094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006022:	f7fd f823 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8006026:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	085a      	lsrs	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	b29b      	uxth	r3, r3
 800603c:	61bb      	str	r3, [r7, #24]
        break;
 800603e:	e029      	b.n	8006094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	085a      	lsrs	r2, r3, #1
 8006046:	4b21      	ldr	r3, [pc, #132]	; (80060cc <UART_SetConfig+0x550>)
 8006048:	4413      	add	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6852      	ldr	r2, [r2, #4]
 800604e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	61bb      	str	r3, [r7, #24]
        break;
 8006056:	e01d      	b.n	8006094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006058:	f7fc ff36 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 800605c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	085a      	lsrs	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	b29b      	uxth	r3, r3
 8006072:	61bb      	str	r3, [r7, #24]
        break;
 8006074:	e00e      	b.n	8006094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	61bb      	str	r3, [r7, #24]
        break;
 800608c:	e002      	b.n	8006094 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
        break;
 8006092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d908      	bls.n	80060ac <UART_SetConfig+0x530>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d204      	bcs.n	80060ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	e001      	b.n	80060b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	01e84800 	.word	0x01e84800
 80060cc:	00f42400 	.word	0x00f42400

080060d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ce:	d10a      	bne.n	80061e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af02      	add	r7, sp, #8
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006222:	f7fa fee9 	bl	8000ff8 <HAL_GetTick>
 8006226:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b08      	cmp	r3, #8
 8006234:	d10e      	bne.n	8006254 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f82a 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e020      	b.n	8006296 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d10e      	bne.n	8006280 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006262:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f814 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e00a      	b.n	8006296 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ae:	e05d      	b.n	800636c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d059      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b8:	f7fa fe9e 	bl	8000ff8 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <UART_WaitOnFlagUntilTimeout+0x30>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11b      	bne.n	8006306 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e042      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02b      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006322:	d123      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800632c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800633c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e00f      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	429a      	cmp	r2, r3
 8006388:	d092      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006414:	d014      	beq.n	8006440 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800643e:	e002      	b.n	8006446 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f006 fb73 	bl	800cb2c <HAL_UART_TxCpltCallback>
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff fb5b 	bl	8005b18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006480:	d01e      	beq.n	80064c0 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006498:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff fb33 	bl	8005b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fb2f 	bl	8005b40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006502:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d109      	bne.n	8006526 <UART_DMAError+0x3c>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b21      	cmp	r3, #33	; 0x21
 8006516:	d106      	bne.n	8006526 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	f7ff ff37 	bl	8006394 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d109      	bne.n	8006548 <UART_DMAError+0x5e>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b22      	cmp	r3, #34	; 0x22
 8006538:	d106      	bne.n	8006548 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006542:	6978      	ldr	r0, [r7, #20]
 8006544:	f7ff ff3b 	bl	80063be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654c:	f043 0210 	orr.w	r2, r3, #16
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006554:	6978      	ldr	r0, [r7, #20]
 8006556:	f7ff fafd 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655a:	bf00      	nop
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7ff fae7 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f006 faba 	bl	800cb2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	0a5a      	lsrs	r2, r3, #9
 80065d0:	490f      	ldr	r1, [pc, #60]	; (8006610 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80065d2:	fba1 1202 	umull	r1, r2, r1, r2
 80065d6:	09d2      	lsrs	r2, r2, #7
 80065d8:	490e      	ldr	r1, [pc, #56]	; (8006614 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80065da:	fb01 f202 	mul.w	r2, r1, r2
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	0a5b      	lsrs	r3, r3, #9
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	09db      	lsrs	r3, r3, #7
 80065f0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	00044b83 	.word	0x00044b83
 8006614:	3b9aca00 	.word	0x3b9aca00

08006618 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800662a:	2b84      	cmp	r3, #132	; 0x84
 800662c:	d005      	beq.n	800663a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800662e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	3303      	adds	r3, #3
 8006638:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800664c:	f000 fab6 	bl	8006bbc <vTaskStartScheduler>
  
  return osOK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	bd80      	pop	{r7, pc}

08006656 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006658:	b089      	sub	sp, #36	; 0x24
 800665a:	af04      	add	r7, sp, #16
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685c      	ldr	r4, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681d      	ldr	r5, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691e      	ldr	r6, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff ffd0 	bl	8006618 <makeFreeRtosPriority>
 8006678:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006682:	9202      	str	r2, [sp, #8]
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	9100      	str	r1, [sp, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4632      	mov	r2, r6
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	f000 f8c5 	bl	800681e <xTaskCreateStatic>
 8006694:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80066a4:	f000 fd6c 	bl	8007180 <xTaskGetSchedulerState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80066ae:	f000 ff83 	bl	80075b8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0208 	add.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f103 0208 	add.w	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d103      	bne.n	8006778 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e00c      	b.n	8006792 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3308      	adds	r3, #8
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e002      	b.n	8006786 <vListInsert+0x2e>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d2f6      	bcs.n	8006780 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6892      	ldr	r2, [r2, #8]
 80067e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6852      	ldr	r2, [r2, #4]
 80067ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d103      	bne.n	80067fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	1e5a      	subs	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800681e:	b580      	push	{r7, lr}
 8006820:	b08e      	sub	sp, #56	; 0x38
 8006822:	af04      	add	r7, sp, #16
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	e7fe      	b.n	8006848 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xTaskCreateStatic+0x4a>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	e7fe      	b.n	8006866 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006868:	2354      	movs	r3, #84	; 0x54
 800686a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b54      	cmp	r3, #84	; 0x54
 8006870:	d00b      	beq.n	800688a <xTaskCreateStatic+0x6c>
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e7fe      	b.n	8006888 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800688a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01a      	beq.n	80068c8 <xTaskCreateStatic+0xaa>
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9303      	str	r3, [sp, #12]
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	9302      	str	r3, [sp, #8]
 80068aa:	f107 0314 	add.w	r3, r7, #20
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f80b 	bl	80068d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c2:	f000 f891 	bl	80069e8 <prvAddNewTaskToReadyList>
 80068c6:	e001      	b.n	80068cc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068cc:	697b      	ldr	r3, [r7, #20]
	}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b088      	sub	sp, #32
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80068ee:	440b      	add	r3, r1
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f023 0307 	bic.w	r3, r3, #7
 80068fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <prvInitialiseNewTask+0x4a>
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	b672      	cpsid	i
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	b662      	cpsie	i
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e7fe      	b.n	800691e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01f      	beq.n	8006966 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	e012      	b.n	8006952 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	7819      	ldrb	r1, [r3, #0]
 8006934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	3334      	adds	r3, #52	; 0x34
 800693c:	460a      	mov	r2, r1
 800693e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d006      	beq.n	800695a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	2b0f      	cmp	r3, #15
 8006956:	d9e9      	bls.n	800692c <prvInitialiseNewTask+0x56>
 8006958:	e000      	b.n	800695c <prvInitialiseNewTask+0x86>
			{
				break;
 800695a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006964:	e003      	b.n	800696e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	2b06      	cmp	r3, #6
 8006972:	d901      	bls.n	8006978 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006974:	2306      	movs	r3, #6
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2200      	movs	r2, #0
 8006988:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff feb1 	bl	80066f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	3318      	adds	r3, #24
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff feac 	bl	80066f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	f1c3 0207 	rsb	r2, r3, #7
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	69b8      	ldr	r0, [r7, #24]
 80069c8:	f000 fc5e 	bl	8007288 <pxPortInitialiseStack>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069de:	bf00      	nop
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069f0:	f000 fd52 	bl	8007498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069f4:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <prvAddNewTaskToReadyList+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <prvAddNewTaskToReadyList+0xb8>)
 80069fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069fe:	4b29      	ldr	r3, [pc, #164]	; (8006aa4 <prvAddNewTaskToReadyList+0xbc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a06:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <prvAddNewTaskToReadyList+0xbc>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a0c:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <prvAddNewTaskToReadyList+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d110      	bne.n	8006a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a14:	f000 fb1e 	bl	8007054 <prvInitialiseTaskLists>
 8006a18:	e00d      	b.n	8006a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <prvAddNewTaskToReadyList+0xc0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a22:	4b20      	ldr	r3, [pc, #128]	; (8006aa4 <prvAddNewTaskToReadyList+0xbc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d802      	bhi.n	8006a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a30:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <prvAddNewTaskToReadyList+0xbc>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a36:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <prvAddNewTaskToReadyList+0xc4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <prvAddNewTaskToReadyList+0xc4>)
 8006a3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	2201      	movs	r2, #1
 8006a46:	409a      	lsls	r2, r3
 8006a48:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <prvAddNewTaskToReadyList+0xc8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <prvAddNewTaskToReadyList+0xc8>)
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <prvAddNewTaskToReadyList+0xcc>)
 8006a60:	441a      	add	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7ff fe51 	bl	8006710 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a6e:	f000 fd45 	bl	80074fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <prvAddNewTaskToReadyList+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <prvAddNewTaskToReadyList+0xbc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d207      	bcs.n	8006a98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <prvAddNewTaskToReadyList+0xd0>)
 8006a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000698 	.word	0x20000698
 8006aa4:	20000598 	.word	0x20000598
 8006aa8:	200006a4 	.word	0x200006a4
 8006aac:	200006b4 	.word	0x200006b4
 8006ab0:	200006a0 	.word	0x200006a0
 8006ab4:	2000059c 	.word	0x2000059c
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10b      	bne.n	8006ae8 <vTaskDelayUntil+0x2c>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	e7fe      	b.n	8006ae6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <vTaskDelayUntil+0x4a>
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	b672      	cpsid	i
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	b662      	cpsie	i
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	e7fe      	b.n	8006b04 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006b06:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <vTaskDelayUntil+0xf4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <vTaskDelayUntil+0x6a>
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e7fe      	b.n	8006b24 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8006b26:	f000 f8ab 	bl	8006c80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006b2a:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <vTaskDelayUntil+0xf8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	4413      	add	r3, r2
 8006b38:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d20b      	bcs.n	8006b5c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d211      	bcs.n	8006b72 <vTaskDelayUntil+0xb6>
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d90d      	bls.n	8006b72 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5a:	e00a      	b.n	8006b72 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d303      	bcc.n	8006b6e <vTaskDelayUntil+0xb2>
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d901      	bls.n	8006b72 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fb18 	bl	80071bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006b8c:	f000 f886 	bl	8006c9c <xTaskResumeAll>
 8006b90:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006b98:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <vTaskDelayUntil+0xfc>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200006c0 	.word	0x200006c0
 8006bb4:	2000069c 	.word	0x2000069c
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bca:	463a      	mov	r2, r7
 8006bcc:	1d39      	adds	r1, r7, #4
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 ff7c 	bl	8007ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	460a      	mov	r2, r1
 8006bea:	491f      	ldr	r1, [pc, #124]	; (8006c68 <vTaskStartScheduler+0xac>)
 8006bec:	481f      	ldr	r0, [pc, #124]	; (8006c6c <vTaskStartScheduler+0xb0>)
 8006bee:	f7ff fe16 	bl	800681e <xTaskCreateStatic>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <vTaskStartScheduler+0xb4>)
 8006bf6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <vTaskStartScheduler+0xb4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e001      	b.n	8006c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d117      	bne.n	8006c40 <vTaskStartScheduler+0x84>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	b672      	cpsid	i
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	b662      	cpsie	i
 8006c24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <vTaskStartScheduler+0xb8>)
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <vTaskStartScheduler+0xbc>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <vTaskStartScheduler+0xc0>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c3a:	f000 fbb1 	bl	80073a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c3e:	e00f      	b.n	8006c60 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d10b      	bne.n	8006c60 <vTaskStartScheduler+0xa4>
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	b672      	cpsid	i
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	b662      	cpsie	i
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e7fe      	b.n	8006c5e <vTaskStartScheduler+0xa2>
}
 8006c60:	bf00      	nop
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	08014b08 	.word	0x08014b08
 8006c6c:	08007025 	.word	0x08007025
 8006c70:	200006bc 	.word	0x200006bc
 8006c74:	200006b8 	.word	0x200006b8
 8006c78:	200006a4 	.word	0x200006a4
 8006c7c:	2000069c 	.word	0x2000069c

08006c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <vTaskSuspendAll+0x18>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <vTaskSuspendAll+0x18>)
 8006c8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	200006c0 	.word	0x200006c0

08006c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006caa:	4b42      	ldr	r3, [pc, #264]	; (8006db4 <xTaskResumeAll+0x118>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <xTaskResumeAll+0x2e>
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	b672      	cpsid	i
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	b662      	cpsie	i
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	e7fe      	b.n	8006cc8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cca:	f000 fbe5 	bl	8007498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cce:	4b39      	ldr	r3, [pc, #228]	; (8006db4 <xTaskResumeAll+0x118>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	4a37      	ldr	r2, [pc, #220]	; (8006db4 <xTaskResumeAll+0x118>)
 8006cd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd8:	4b36      	ldr	r3, [pc, #216]	; (8006db4 <xTaskResumeAll+0x118>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d161      	bne.n	8006da4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ce0:	4b35      	ldr	r3, [pc, #212]	; (8006db8 <xTaskResumeAll+0x11c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d05d      	beq.n	8006da4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ce8:	e02e      	b.n	8006d48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cea:	4b34      	ldr	r3, [pc, #208]	; (8006dbc <xTaskResumeAll+0x120>)
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fd67 	bl	80067ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fd62 	bl	80067ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <xTaskResumeAll+0x124>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <xTaskResumeAll+0x124>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <xTaskResumeAll+0x128>)
 8006d26:	441a      	add	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7ff fcee 	bl	8006710 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <xTaskResumeAll+0x12c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d42:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <xTaskResumeAll+0x130>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <xTaskResumeAll+0x120>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1cc      	bne.n	8006cea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d56:	f000 f9f3 	bl	8007140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <xTaskResumeAll+0x134>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d010      	beq.n	8006d88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d66:	f000 f847 	bl	8006df8 <xTaskIncrementTick>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006d70:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <xTaskResumeAll+0x130>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f1      	bne.n	8006d66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <xTaskResumeAll+0x134>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <xTaskResumeAll+0x130>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <xTaskResumeAll+0x138>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006da4:	f000 fbaa 	bl	80074fc <vPortExitCritical>

	return xAlreadyYielded;
 8006da8:	68bb      	ldr	r3, [r7, #8]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200006c0 	.word	0x200006c0
 8006db8:	20000698 	.word	0x20000698
 8006dbc:	20000658 	.word	0x20000658
 8006dc0:	200006a0 	.word	0x200006a0
 8006dc4:	2000059c 	.word	0x2000059c
 8006dc8:	20000598 	.word	0x20000598
 8006dcc:	200006ac 	.word	0x200006ac
 8006dd0:	200006a8 	.word	0x200006a8
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <xTaskGetTickCount+0x1c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006de4:	687b      	ldr	r3, [r7, #4]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000069c 	.word	0x2000069c

08006df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b4f      	ldr	r3, [pc, #316]	; (8006f40 <xTaskIncrementTick+0x148>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 8089 	bne.w	8006f1e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e0c:	4b4d      	ldr	r3, [pc, #308]	; (8006f44 <xTaskIncrementTick+0x14c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e14:	4a4b      	ldr	r2, [pc, #300]	; (8006f44 <xTaskIncrementTick+0x14c>)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d121      	bne.n	8006e64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e20:	4b49      	ldr	r3, [pc, #292]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <xTaskIncrementTick+0x4a>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	b672      	cpsid	i
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	b662      	cpsie	i
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	e7fe      	b.n	8006e40 <xTaskIncrementTick+0x48>
 8006e42:	4b41      	ldr	r3, [pc, #260]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	4b40      	ldr	r3, [pc, #256]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3e      	ldr	r2, [pc, #248]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4a3e      	ldr	r2, [pc, #248]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <xTaskIncrementTick+0x158>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	4a3c      	ldr	r2, [pc, #240]	; (8006f50 <xTaskIncrementTick+0x158>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	f000 f96e 	bl	8007140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e64:	4b3b      	ldr	r3, [pc, #236]	; (8006f54 <xTaskIncrementTick+0x15c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d348      	bcc.n	8006f00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6e:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e78:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <xTaskIncrementTick+0x15c>)
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	601a      	str	r2, [r3, #0]
					break;
 8006e80:	e03e      	b.n	8006f00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d203      	bcs.n	8006ea2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e9a:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <xTaskIncrementTick+0x15c>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ea0:	e02e      	b.n	8006f00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fc8f 	bl	80067ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fc86 	bl	80067ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <xTaskIncrementTick+0x160>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <xTaskIncrementTick+0x160>)
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <xTaskIncrementTick+0x164>)
 8006ede:	441a      	add	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f7ff fc12 	bl	8006710 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <xTaskIncrementTick+0x168>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d3b9      	bcc.n	8006e6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006efe:	e7b6      	b.n	8006e6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f00:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <xTaskIncrementTick+0x168>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	4915      	ldr	r1, [pc, #84]	; (8006f5c <xTaskIncrementTick+0x164>)
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d907      	bls.n	8006f28 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e004      	b.n	8006f28 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <xTaskIncrementTick+0x16c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <xTaskIncrementTick+0x16c>)
 8006f26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <xTaskIncrementTick+0x170>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f34:	697b      	ldr	r3, [r7, #20]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200006c0 	.word	0x200006c0
 8006f44:	2000069c 	.word	0x2000069c
 8006f48:	20000650 	.word	0x20000650
 8006f4c:	20000654 	.word	0x20000654
 8006f50:	200006b0 	.word	0x200006b0
 8006f54:	200006b8 	.word	0x200006b8
 8006f58:	200006a0 	.word	0x200006a0
 8006f5c:	2000059c 	.word	0x2000059c
 8006f60:	20000598 	.word	0x20000598
 8006f64:	200006a8 	.word	0x200006a8
 8006f68:	200006ac 	.word	0x200006ac

08006f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f72:	4b27      	ldr	r3, [pc, #156]	; (8007010 <vTaskSwitchContext+0xa4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <vTaskSwitchContext+0xa8>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f80:	e040      	b.n	8007004 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <vTaskSwitchContext+0xa8>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b23      	ldr	r3, [pc, #140]	; (8007018 <vTaskSwitchContext+0xac>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	fab3 f383 	clz	r3, r3
 8006f94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	f1c3 031f 	rsb	r3, r3, #31
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	491f      	ldr	r1, [pc, #124]	; (800701c <vTaskSwitchContext+0xb0>)
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <vTaskSwitchContext+0x5e>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	b672      	cpsid	i
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	b662      	cpsie	i
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e7fe      	b.n	8006fc8 <vTaskSwitchContext+0x5c>
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4a11      	ldr	r2, [pc, #68]	; (800701c <vTaskSwitchContext+0xb0>)
 8006fd6:	4413      	add	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	3308      	adds	r3, #8
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d104      	bne.n	8006ffa <vTaskSwitchContext+0x8e>
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4a07      	ldr	r2, [pc, #28]	; (8007020 <vTaskSwitchContext+0xb4>)
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	200006c0 	.word	0x200006c0
 8007014:	200006ac 	.word	0x200006ac
 8007018:	200006a0 	.word	0x200006a0
 800701c:	2000059c 	.word	0x2000059c
 8007020:	20000598 	.word	0x20000598

08007024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800702c:	f000 f852 	bl	80070d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <prvIdleTask+0x28>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d9f9      	bls.n	800702c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <prvIdleTask+0x2c>)
 800703a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007048:	e7f0      	b.n	800702c <prvIdleTask+0x8>
 800704a:	bf00      	nop
 800704c:	2000059c 	.word	0x2000059c
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800705a:	2300      	movs	r3, #0
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	e00c      	b.n	800707a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <prvInitialiseTaskLists+0x60>)
 800706c:	4413      	add	r3, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fb21 	bl	80066b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3301      	adds	r3, #1
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b06      	cmp	r3, #6
 800707e:	d9ef      	bls.n	8007060 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007080:	480d      	ldr	r0, [pc, #52]	; (80070b8 <prvInitialiseTaskLists+0x64>)
 8007082:	f7ff fb18 	bl	80066b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007086:	480d      	ldr	r0, [pc, #52]	; (80070bc <prvInitialiseTaskLists+0x68>)
 8007088:	f7ff fb15 	bl	80066b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800708c:	480c      	ldr	r0, [pc, #48]	; (80070c0 <prvInitialiseTaskLists+0x6c>)
 800708e:	f7ff fb12 	bl	80066b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007092:	480c      	ldr	r0, [pc, #48]	; (80070c4 <prvInitialiseTaskLists+0x70>)
 8007094:	f7ff fb0f 	bl	80066b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007098:	480b      	ldr	r0, [pc, #44]	; (80070c8 <prvInitialiseTaskLists+0x74>)
 800709a:	f7ff fb0c 	bl	80066b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <prvInitialiseTaskLists+0x78>)
 80070a0:	4a05      	ldr	r2, [pc, #20]	; (80070b8 <prvInitialiseTaskLists+0x64>)
 80070a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <prvInitialiseTaskLists+0x7c>)
 80070a6:	4a05      	ldr	r2, [pc, #20]	; (80070bc <prvInitialiseTaskLists+0x68>)
 80070a8:	601a      	str	r2, [r3, #0]
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	2000059c 	.word	0x2000059c
 80070b8:	20000628 	.word	0x20000628
 80070bc:	2000063c 	.word	0x2000063c
 80070c0:	20000658 	.word	0x20000658
 80070c4:	2000066c 	.word	0x2000066c
 80070c8:	20000684 	.word	0x20000684
 80070cc:	20000650 	.word	0x20000650
 80070d0:	20000654 	.word	0x20000654

080070d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070da:	e019      	b.n	8007110 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070dc:	f000 f9dc 	bl	8007498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e0:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <prvCheckTasksWaitingTermination+0x4c>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fb6c 	bl	80067ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <prvCheckTasksWaitingTermination+0x50>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <prvCheckTasksWaitingTermination+0x50>)
 80070fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <prvCheckTasksWaitingTermination+0x54>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3b01      	subs	r3, #1
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <prvCheckTasksWaitingTermination+0x54>)
 8007104:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007106:	f000 f9f9 	bl	80074fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f80e 	bl	800712c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <prvCheckTasksWaitingTermination+0x54>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e1      	bne.n	80070dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	2000066c 	.word	0x2000066c
 8007124:	20000698 	.word	0x20000698
 8007128:	20000680 	.word	0x20000680

0800712c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <prvResetNextTaskUnblockTime+0x38>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvResetNextTaskUnblockTime+0x3c>)
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007158:	e008      	b.n	800716c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <prvResetNextTaskUnblockTime+0x38>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4a04      	ldr	r2, [pc, #16]	; (800717c <prvResetNextTaskUnblockTime+0x3c>)
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	20000650 	.word	0x20000650
 800717c:	200006b8 	.word	0x200006b8

08007180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <xTaskGetSchedulerState+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800718e:	2301      	movs	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	e008      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <xTaskGetSchedulerState+0x38>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800719c:	2302      	movs	r3, #2
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e001      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071a6:	687b      	ldr	r3, [r7, #4]
	}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	200006a4 	.word	0x200006a4
 80071b8:	200006c0 	.word	0x200006c0

080071bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <prvAddCurrentTaskToDelayedList+0xb0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071cc:	4b28      	ldr	r3, [pc, #160]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff faf9 	bl	80067ca <uxListRemove>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	2201      	movs	r2, #1
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	43da      	mvns	r2, r3
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4013      	ands	r3, r2
 80071f2:	4a20      	ldr	r2, [pc, #128]	; (8007274 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d10a      	bne.n	8007214 <prvAddCurrentTaskToDelayedList+0x58>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007204:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	481a      	ldr	r0, [pc, #104]	; (8007278 <prvAddCurrentTaskToDelayedList+0xbc>)
 800720e:	f7ff fa7f 	bl	8006710 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007212:	e026      	b.n	8007262 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800721c:	4b14      	ldr	r3, [pc, #80]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d209      	bcs.n	8007240 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722c:	4b13      	ldr	r3, [pc, #76]	; (800727c <prvAddCurrentTaskToDelayedList+0xc0>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3304      	adds	r3, #4
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f7ff fa8d 	bl	8006758 <vListInsert>
}
 800723e:	e010      	b.n	8007262 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3304      	adds	r3, #4
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fa83 	bl	8006758 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d202      	bcs.n	8007262 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800725c:	4a09      	ldr	r2, [pc, #36]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6013      	str	r3, [r2, #0]
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000069c 	.word	0x2000069c
 8007270:	20000598 	.word	0x20000598
 8007274:	200006a0 	.word	0x200006a0
 8007278:	20000684 	.word	0x20000684
 800727c:	20000654 	.word	0x20000654
 8007280:	20000650 	.word	0x20000650
 8007284:	200006b8 	.word	0x200006b8

08007288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3b04      	subs	r3, #4
 8007298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3b04      	subs	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f023 0201 	bic.w	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072b8:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <pxPortInitialiseStack+0x64>)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b14      	subs	r3, #20
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f06f 0202 	mvn.w	r2, #2
 80072d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3b20      	subs	r3, #32
 80072dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	080072f1 	.word	0x080072f1

080072f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <prvTaskExitError+0x58>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d00b      	beq.n	800731c <prvTaskExitError+0x2c>
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	b672      	cpsid	i
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	b662      	cpsie	i
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e7fe      	b.n	800731a <prvTaskExitError+0x2a>
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	b672      	cpsid	i
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	b662      	cpsie	i
 8007330:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007332:	bf00      	nop
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0fc      	beq.n	8007334 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000008 	.word	0x20000008
 800734c:	00000000 	.word	0x00000000

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	4770      	bx	lr
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst2>:
 8007370:	20000598 	.word	0x20000598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007378:	4808      	ldr	r0, [pc, #32]	; (800739c <prvPortStartFirstTask+0x24>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8814 	msr	CONTROL, r0
 800738a:	b662      	cpsie	i
 800738c:	b661      	cpsie	f
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	df00      	svc	0
 8007398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800739a:	bf00      	nop
 800739c:	e000ed08 	.word	0xe000ed08

080073a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073a6:	4b36      	ldr	r3, [pc, #216]	; (8007480 <xPortStartScheduler+0xe0>)
 80073a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	22ff      	movs	r2, #255	; 0xff
 80073b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <xPortStartScheduler+0xe4>)
 80073cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ce:	4b2e      	ldr	r3, [pc, #184]	; (8007488 <xPortStartScheduler+0xe8>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073d4:	e009      	b.n	80073ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <xPortStartScheduler+0xe8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3b01      	subs	r3, #1
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <xPortStartScheduler+0xe8>)
 80073de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	d0ef      	beq.n	80073d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <xPortStartScheduler+0xe8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1c3 0307 	rsb	r3, r3, #7
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d00b      	beq.n	800741a <xPortStartScheduler+0x7a>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	b672      	cpsid	i
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	b662      	cpsie	i
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	e7fe      	b.n	8007418 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <xPortStartScheduler+0xe8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	4a19      	ldr	r2, [pc, #100]	; (8007488 <xPortStartScheduler+0xe8>)
 8007422:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <xPortStartScheduler+0xe8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <xPortStartScheduler+0xe8>)
 800742e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <xPortStartScheduler+0xec>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a13      	ldr	r2, [pc, #76]	; (800748c <xPortStartScheduler+0xec>)
 800743e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007442:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <xPortStartScheduler+0xec>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a10      	ldr	r2, [pc, #64]	; (800748c <xPortStartScheduler+0xec>)
 800744a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800744e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007450:	f000 f8d4 	bl	80075fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007454:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <xPortStartScheduler+0xf0>)
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800745a:	f000 f8f3 	bl	8007644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <xPortStartScheduler+0xf4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0c      	ldr	r2, [pc, #48]	; (8007494 <xPortStartScheduler+0xf4>)
 8007464:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007468:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800746a:	f7ff ff85 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800746e:	f7ff fd7d 	bl	8006f6c <vTaskSwitchContext>
	prvTaskExitError();
 8007472:	f7ff ff3d 	bl	80072f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	e000e400 	.word	0xe000e400
 8007484:	200006c4 	.word	0x200006c4
 8007488:	200006c8 	.word	0x200006c8
 800748c:	e000ed20 	.word	0xe000ed20
 8007490:	20000008 	.word	0x20000008
 8007494:	e000ef34 	.word	0xe000ef34

08007498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	b672      	cpsid	i
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	b662      	cpsie	i
 80074b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <vPortEnterCritical+0x5c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <vPortEnterCritical+0x5c>)
 80074bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <vPortEnterCritical+0x5c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d110      	bne.n	80074e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <vPortEnterCritical+0x60>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <vPortEnterCritical+0x50>
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	b672      	cpsid	i
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	b662      	cpsie	i
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	e7fe      	b.n	80074e6 <vPortEnterCritical+0x4e>
	}
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000008 	.word	0x20000008
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <vPortExitCritical+0x50>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <vPortExitCritical+0x26>
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	b672      	cpsid	i
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	b662      	cpsie	i
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	e7fe      	b.n	8007520 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007522:	4b0a      	ldr	r3, [pc, #40]	; (800754c <vPortExitCritical+0x50>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3b01      	subs	r3, #1
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <vPortExitCritical+0x50>)
 800752a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <vPortExitCritical+0x50>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <vPortExitCritical+0x42>
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000008 	.word	0x20000008

08007550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007550:	f3ef 8009 	mrs	r0, PSP
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4b15      	ldr	r3, [pc, #84]	; (80075b0 <pxCurrentTCBConst>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f01e 0f10 	tst.w	lr, #16
 8007560:	bf08      	it	eq
 8007562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007574:	b672      	cpsid	i
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	b662      	cpsie	i
 8007584:	f7ff fcf2 	bl	8006f6c <vTaskSwitchContext>
 8007588:	f04f 0000 	mov.w	r0, #0
 800758c:	f380 8811 	msr	BASEPRI, r0
 8007590:	bc09      	pop	{r0, r3}
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f01e 0f10 	tst.w	lr, #16
 800759e:	bf08      	it	eq
 80075a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075a4:	f380 8809 	msr	PSP, r0
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop

080075b0 <pxCurrentTCBConst>:
 80075b0:	20000598 	.word	0x20000598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop

080075b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	b672      	cpsid	i
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	b662      	cpsie	i
 80075d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075d4:	f7ff fc10 	bl	8006df8 <xTaskIncrementTick>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <xPortSysTickHandler+0x40>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <vPortSetupTimerInterrupt+0x34>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <vPortSetupTimerInterrupt+0x38>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <vPortSetupTimerInterrupt+0x3c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0a      	ldr	r2, [pc, #40]	; (800763c <vPortSetupTimerInterrupt+0x40>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <vPortSetupTimerInterrupt+0x44>)
 800761a:	3b01      	subs	r3, #1
 800761c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <vPortSetupTimerInterrupt+0x34>)
 8007620:	2207      	movs	r2, #7
 8007622:	601a      	str	r2, [r3, #0]
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	e000e010 	.word	0xe000e010
 8007634:	e000e018 	.word	0xe000e018
 8007638:	2000000c 	.word	0x2000000c
 800763c:	10624dd3 	.word	0x10624dd3
 8007640:	e000e014 	.word	0xe000e014

08007644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007654 <vPortEnableVFP+0x10>
 8007648:	6801      	ldr	r1, [r0, #0]
 800764a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800764e:	6001      	str	r1, [r0, #0]
 8007650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007652:	bf00      	nop
 8007654:	e000ed88 	.word	0xe000ed88

08007658 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800765e:	463b      	mov	r3, r7
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	609a      	str	r2, [r3, #8]
 8007668:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800766a:	4b44      	ldr	r3, [pc, #272]	; (800777c <MX_ADC1_Init+0x124>)
 800766c:	4a44      	ldr	r2, [pc, #272]	; (8007780 <MX_ADC1_Init+0x128>)
 800766e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007670:	4b42      	ldr	r3, [pc, #264]	; (800777c <MX_ADC1_Init+0x124>)
 8007672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007678:	4b40      	ldr	r3, [pc, #256]	; (800777c <MX_ADC1_Init+0x124>)
 800767a:	2200      	movs	r2, #0
 800767c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800767e:	4b3f      	ldr	r3, [pc, #252]	; (800777c <MX_ADC1_Init+0x124>)
 8007680:	2201      	movs	r2, #1
 8007682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007684:	4b3d      	ldr	r3, [pc, #244]	; (800777c <MX_ADC1_Init+0x124>)
 8007686:	2201      	movs	r2, #1
 8007688:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800768a:	4b3c      	ldr	r3, [pc, #240]	; (800777c <MX_ADC1_Init+0x124>)
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007692:	4b3a      	ldr	r3, [pc, #232]	; (800777c <MX_ADC1_Init+0x124>)
 8007694:	2200      	movs	r2, #0
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007698:	4b38      	ldr	r3, [pc, #224]	; (800777c <MX_ADC1_Init+0x124>)
 800769a:	4a3a      	ldr	r2, [pc, #232]	; (8007784 <MX_ADC1_Init+0x12c>)
 800769c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800769e:	4b37      	ldr	r3, [pc, #220]	; (800777c <MX_ADC1_Init+0x124>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80076a4:	4b35      	ldr	r3, [pc, #212]	; (800777c <MX_ADC1_Init+0x124>)
 80076a6:	2206      	movs	r2, #6
 80076a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80076aa:	4b34      	ldr	r3, [pc, #208]	; (800777c <MX_ADC1_Init+0x124>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80076b2:	4b32      	ldr	r3, [pc, #200]	; (800777c <MX_ADC1_Init+0x124>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80076b8:	4830      	ldr	r0, [pc, #192]	; (800777c <MX_ADC1_Init+0x124>)
 80076ba:	f7f9 fca9 	bl	8001010 <HAL_ADC_Init>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80076c4:	f000 fde6 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80076c8:	2303      	movs	r3, #3
 80076ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80076cc:	2301      	movs	r3, #1
 80076ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80076d0:	2307      	movs	r3, #7
 80076d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076d4:	463b      	mov	r3, r7
 80076d6:	4619      	mov	r1, r3
 80076d8:	4828      	ldr	r0, [pc, #160]	; (800777c <MX_ADC1_Init+0x124>)
 80076da:	f7f9 fcdd 	bl	8001098 <HAL_ADC_ConfigChannel>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80076e4:	f000 fdd6 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80076e8:	2304      	movs	r3, #4
 80076ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80076ec:	2302      	movs	r3, #2
 80076ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076f0:	463b      	mov	r3, r7
 80076f2:	4619      	mov	r1, r3
 80076f4:	4821      	ldr	r0, [pc, #132]	; (800777c <MX_ADC1_Init+0x124>)
 80076f6:	f7f9 fccf 	bl	8001098 <HAL_ADC_ConfigChannel>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007700:	f000 fdc8 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007704:	2309      	movs	r3, #9
 8007706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007708:	2303      	movs	r3, #3
 800770a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800770c:	463b      	mov	r3, r7
 800770e:	4619      	mov	r1, r3
 8007710:	481a      	ldr	r0, [pc, #104]	; (800777c <MX_ADC1_Init+0x124>)
 8007712:	f7f9 fcc1 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800771c:	f000 fdba 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007720:	230a      	movs	r3, #10
 8007722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007724:	2304      	movs	r3, #4
 8007726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007728:	463b      	mov	r3, r7
 800772a:	4619      	mov	r1, r3
 800772c:	4813      	ldr	r0, [pc, #76]	; (800777c <MX_ADC1_Init+0x124>)
 800772e:	f7f9 fcb3 	bl	8001098 <HAL_ADC_ConfigChannel>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8007738:	f000 fdac 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800773c:	230c      	movs	r3, #12
 800773e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007740:	2305      	movs	r3, #5
 8007742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007744:	463b      	mov	r3, r7
 8007746:	4619      	mov	r1, r3
 8007748:	480c      	ldr	r0, [pc, #48]	; (800777c <MX_ADC1_Init+0x124>)
 800774a:	f7f9 fca5 	bl	8001098 <HAL_ADC_ConfigChannel>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8007754:	f000 fd9e 	bl	8008294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007758:	230d      	movs	r3, #13
 800775a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800775c:	2306      	movs	r3, #6
 800775e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007760:	463b      	mov	r3, r7
 8007762:	4619      	mov	r1, r3
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <MX_ADC1_Init+0x124>)
 8007766:	f7f9 fc97 	bl	8001098 <HAL_ADC_ConfigChannel>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8007770:	f000 fd90 	bl	8008294 <Error_Handler>
  }

}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200023a0 	.word	0x200023a0
 8007780:	40012000 	.word	0x40012000
 8007784:	0f000001 	.word	0x0f000001

08007788 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	; 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007790:	f107 031c 	add.w	r3, r7, #28
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	609a      	str	r2, [r3, #8]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a45      	ldr	r2, [pc, #276]	; (80078bc <HAL_ADC_MspInit+0x134>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	f040 8084 	bne.w	80078b4 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80077ac:	4b44      	ldr	r3, [pc, #272]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	4a43      	ldr	r2, [pc, #268]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b6:	6453      	str	r3, [r2, #68]	; 0x44
 80077b8:	4b41      	ldr	r3, [pc, #260]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	61bb      	str	r3, [r7, #24]
 80077c2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077c4:	4b3e      	ldr	r3, [pc, #248]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	4a3d      	ldr	r2, [pc, #244]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077ca:	f043 0304 	orr.w	r3, r3, #4
 80077ce:	6313      	str	r3, [r2, #48]	; 0x30
 80077d0:	4b3b      	ldr	r3, [pc, #236]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077dc:	4b38      	ldr	r3, [pc, #224]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	4a37      	ldr	r2, [pc, #220]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077e2:	f043 0301 	orr.w	r3, r3, #1
 80077e6:	6313      	str	r3, [r2, #48]	; 0x30
 80077e8:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077f4:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	4a31      	ldr	r2, [pc, #196]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007800:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <HAL_ADC_MspInit+0x138>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 800780c:	230d      	movs	r3, #13
 800780e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007810:	2303      	movs	r3, #3
 8007812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007818:	f107 031c 	add.w	r3, r7, #28
 800781c:	4619      	mov	r1, r3
 800781e:	4829      	ldr	r0, [pc, #164]	; (80078c4 <HAL_ADC_MspInit+0x13c>)
 8007820:	f7fa fc64 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8007824:	2318      	movs	r3, #24
 8007826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007828:	2303      	movs	r3, #3
 800782a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782c:	2300      	movs	r3, #0
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007830:	f107 031c 	add.w	r3, r7, #28
 8007834:	4619      	mov	r1, r3
 8007836:	4824      	ldr	r0, [pc, #144]	; (80078c8 <HAL_ADC_MspInit+0x140>)
 8007838:	f7fa fc58 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 800783c:	2302      	movs	r3, #2
 800783e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007840:	2303      	movs	r3, #3
 8007842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007844:	2300      	movs	r3, #0
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8007848:	f107 031c 	add.w	r3, r7, #28
 800784c:	4619      	mov	r1, r3
 800784e:	481f      	ldr	r0, [pc, #124]	; (80078cc <HAL_ADC_MspInit+0x144>)
 8007850:	f7fa fc4c 	bl	80020ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007856:	4a1f      	ldr	r2, [pc, #124]	; (80078d4 <HAL_ADC_MspInit+0x14c>)
 8007858:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 800785c:	2200      	movs	r2, #0
 800785e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007860:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007862:	2200      	movs	r2, #0
 8007864:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007868:	2200      	movs	r2, #0
 800786a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800786c:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 800786e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007872:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800787a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 800787e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007882:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007884:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800788a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 800788e:	2200      	movs	r2, #0
 8007890:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 8007894:	2200      	movs	r2, #0
 8007896:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007898:	480d      	ldr	r0, [pc, #52]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 800789a:	f7fa f81f 	bl	80018dc <HAL_DMA_Init>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80078a4:	f000 fcf6 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
 80078ae:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <HAL_ADC_MspInit+0x148>)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80078b4:	bf00      	nop
 80078b6:	3730      	adds	r7, #48	; 0x30
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40012000 	.word	0x40012000
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40020800 	.word	0x40020800
 80078c8:	40020000 	.word	0x40020000
 80078cc:	40020400 	.word	0x40020400
 80078d0:	200023e8 	.word	0x200023e8
 80078d4:	40026470 	.word	0x40026470

080078d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80078dc:	4b17      	ldr	r3, [pc, #92]	; (800793c <MX_CAN1_Init+0x64>)
 80078de:	4a18      	ldr	r2, [pc, #96]	; (8007940 <MX_CAN1_Init+0x68>)
 80078e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <MX_CAN1_Init+0x64>)
 80078e4:	2206      	movs	r2, #6
 80078e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <MX_CAN1_Init+0x64>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <MX_CAN1_Init+0x64>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <MX_CAN1_Init+0x64>)
 80078f6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80078fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80078fc:	4b0f      	ldr	r3, [pc, #60]	; (800793c <MX_CAN1_Init+0x64>)
 80078fe:	2200      	movs	r2, #0
 8007900:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007902:	4b0e      	ldr	r3, [pc, #56]	; (800793c <MX_CAN1_Init+0x64>)
 8007904:	2200      	movs	r2, #0
 8007906:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <MX_CAN1_Init+0x64>)
 800790a:	2200      	movs	r2, #0
 800790c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <MX_CAN1_Init+0x64>)
 8007910:	2200      	movs	r2, #0
 8007912:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <MX_CAN1_Init+0x64>)
 8007916:	2201      	movs	r2, #1
 8007918:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <MX_CAN1_Init+0x64>)
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <MX_CAN1_Init+0x64>)
 8007922:	2200      	movs	r2, #0
 8007924:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007926:	4805      	ldr	r0, [pc, #20]	; (800793c <MX_CAN1_Init+0x64>)
 8007928:	f7f9 fdfa 	bl	8001520 <HAL_CAN_Init>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8007932:	f000 fcaf 	bl	8008294 <Error_Handler>
  }

}
 8007936:	bf00      	nop
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20002448 	.word	0x20002448
 8007940:	40006400 	.word	0x40006400

08007944 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <HAL_CAN_MspInit+0x7c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d127      	bne.n	80079b6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 800796c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007970:	6413      	str	r3, [r2, #64]	; 0x40
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 8007984:	f043 0308 	orr.w	r3, r3, #8
 8007988:	6313      	str	r3, [r2, #48]	; 0x30
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <HAL_CAN_MspInit+0x80>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007996:	2303      	movs	r3, #3
 8007998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800799a:	2302      	movs	r3, #2
 800799c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079a2:	2303      	movs	r3, #3
 80079a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80079a6:	2309      	movs	r3, #9
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079aa:	f107 0314 	add.w	r3, r7, #20
 80079ae:	4619      	mov	r1, r3
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <HAL_CAN_MspInit+0x84>)
 80079b2:	f7fa fb9b 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80079b6:	bf00      	nop
 80079b8:	3728      	adds	r7, #40	; 0x28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40006400 	.word	0x40006400
 80079c4:	40023800 	.word	0x40023800
 80079c8:	40020c00 	.word	0x40020c00

080079cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80079d2:	4b3e      	ldr	r3, [pc, #248]	; (8007acc <MX_DMA_Init+0x100>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	4a3d      	ldr	r2, [pc, #244]	; (8007acc <MX_DMA_Init+0x100>)
 80079d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079dc:	6313      	str	r3, [r2, #48]	; 0x30
 80079de:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <MX_DMA_Init+0x100>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80079ea:	4b38      	ldr	r3, [pc, #224]	; (8007acc <MX_DMA_Init+0x100>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	4a37      	ldr	r2, [pc, #220]	; (8007acc <MX_DMA_Init+0x100>)
 80079f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f4:	6313      	str	r3, [r2, #48]	; 0x30
 80079f6:	4b35      	ldr	r3, [pc, #212]	; (8007acc <MX_DMA_Init+0x100>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2105      	movs	r1, #5
 8007a06:	200b      	movs	r0, #11
 8007a08:	f7f9 ff3e 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007a0c:	200b      	movs	r0, #11
 8007a0e:	f7f9 ff57 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8007a12:	2200      	movs	r2, #0
 8007a14:	2105      	movs	r1, #5
 8007a16:	200c      	movs	r0, #12
 8007a18:	f7f9 ff36 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007a1c:	200c      	movs	r0, #12
 8007a1e:	f7f9 ff4f 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2105      	movs	r1, #5
 8007a26:	200f      	movs	r0, #15
 8007a28:	f7f9 ff2e 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007a2c:	200f      	movs	r0, #15
 8007a2e:	f7f9 ff47 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007a32:	2200      	movs	r2, #0
 8007a34:	2105      	movs	r1, #5
 8007a36:	2010      	movs	r0, #16
 8007a38:	f7f9 ff26 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007a3c:	2010      	movs	r0, #16
 8007a3e:	f7f9 ff3f 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8007a42:	2200      	movs	r2, #0
 8007a44:	2105      	movs	r1, #5
 8007a46:	2011      	movs	r0, #17
 8007a48:	f7f9 ff1e 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007a4c:	2011      	movs	r0, #17
 8007a4e:	f7f9 ff37 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8007a52:	2200      	movs	r2, #0
 8007a54:	2105      	movs	r1, #5
 8007a56:	2038      	movs	r0, #56	; 0x38
 8007a58:	f7f9 ff16 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007a5c:	2038      	movs	r0, #56	; 0x38
 8007a5e:	f7f9 ff2f 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2105      	movs	r1, #5
 8007a66:	2039      	movs	r0, #57	; 0x39
 8007a68:	f7f9 ff0e 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007a6c:	2039      	movs	r0, #57	; 0x39
 8007a6e:	f7f9 ff27 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2105      	movs	r1, #5
 8007a76:	203a      	movs	r0, #58	; 0x3a
 8007a78:	f7f9 ff06 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007a7c:	203a      	movs	r0, #58	; 0x3a
 8007a7e:	f7f9 ff1f 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8007a82:	2200      	movs	r2, #0
 8007a84:	2105      	movs	r1, #5
 8007a86:	203b      	movs	r0, #59	; 0x3b
 8007a88:	f7f9 fefe 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007a8c:	203b      	movs	r0, #59	; 0x3b
 8007a8e:	f7f9 ff17 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8007a92:	2200      	movs	r2, #0
 8007a94:	2105      	movs	r1, #5
 8007a96:	203c      	movs	r0, #60	; 0x3c
 8007a98:	f7f9 fef6 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007a9c:	203c      	movs	r0, #60	; 0x3c
 8007a9e:	f7f9 ff0f 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2105      	movs	r1, #5
 8007aa6:	2044      	movs	r0, #68	; 0x44
 8007aa8:	f7f9 feee 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007aac:	2044      	movs	r0, #68	; 0x44
 8007aae:	f7f9 ff07 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2105      	movs	r1, #5
 8007ab6:	2046      	movs	r0, #70	; 0x46
 8007ab8:	f7f9 fee6 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007abc:	2046      	movs	r0, #70	; 0x46
 8007abe:	f7f9 feff 	bl	80018c0 <HAL_NVIC_EnableIRQ>

}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40023800 	.word	0x40023800

08007ad0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a07      	ldr	r2, [pc, #28]	; (8007afc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <vApplicationGetIdleTaskMemory+0x30>)
 8007ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2280      	movs	r2, #128	; 0x80
 8007aec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200006cc 	.word	0x200006cc
 8007b00:	20000720 	.word	0x20000720

08007b04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007b04:	b5b0      	push	{r4, r5, r7, lr}
 8007b06:	b08e      	sub	sp, #56	; 0x38
 8007b08:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 8007b0a:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <MX_FREERTOS_Init+0x58>)
 8007b0c:	f107 041c 	add.w	r4, r7, #28
 8007b10:	461d      	mov	r5, r3
 8007b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 8007b1e:	f107 031c 	add.w	r3, r7, #28
 8007b22:	2100      	movs	r1, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fd96 	bl	8006656 <osThreadCreate>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <MX_FREERTOS_Init+0x5c>)
 8007b2e:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8007b30:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <MX_FREERTOS_Init+0x60>)
 8007b32:	463c      	mov	r4, r7
 8007b34:	461d      	mov	r5, r3
 8007b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8007b42:	463b      	mov	r3, r7
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fd85 	bl	8006656 <osThreadCreate>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <MX_FREERTOS_Init+0x64>)
 8007b50:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007b52:	bf00      	nop
 8007b54:	3738      	adds	r7, #56	; 0x38
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bdb0      	pop	{r4, r5, r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08014b1c 	.word	0x08014b1c
 8007b60:	20006470 	.word	0x20006470
 8007b64:	08014b44 	.word	0x08014b44
 8007b68:	200064c8 	.word	0x200064c8

08007b6c <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007b74:	f7ff f930 	bl	8006dd8 <xTaskGetTickCount>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <sendTaskFunc+0x44>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <sendTaskFunc+0x44>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <sendTaskFunc+0x44>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <sendTaskFunc+0x48>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	db04      	blt.n	8007ba0 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <sendTaskFunc+0x44>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 8007b9c:	f007 f8fe 	bl	800ed9c <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8007ba0:	f107 0308 	add.w	r3, r7, #8
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe ff88 	bl	8006abc <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 8007bac:	e7e8      	b.n	8007b80 <sendTaskFunc+0x14>
 8007bae:	bf00      	nop
 8007bb0:	20000920 	.word	0x20000920
 8007bb4:	20000218 	.word	0x20000218

08007bb8 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007bc0:	f7ff f90a 	bl	8006dd8 <xTaskGetTickCount>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 8007bc8:	2301      	movs	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 8007bcc:	f002 fb32 	bl	800a234 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceivePolling();
 8007bd0:	f005 f84a 	bl	800cc68 <Usart_ReceivePolling>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <controlTaskFunc+0x4c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <controlTaskFunc+0x4c>)
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <controlTaskFunc+0x4c>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <controlTaskFunc+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	db04      	blt.n	8007bf4 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <controlTaskFunc+0x4c>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
		loop();
 8007bf0:	f006 ffde 	bl	800ebb0 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	68f9      	ldr	r1, [r7, #12]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe ff5e 	bl	8006abc <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8007c00:	e7e4      	b.n	8007bcc <controlTaskFunc+0x14>
 8007c02:	bf00      	nop
 8007c04:	20000924 	.word	0x20000924
 8007c08:	20000214 	.word	0x20000214

08007c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c12:	f107 031c 	add.w	r3, r7, #28
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	605a      	str	r2, [r3, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c22:	4b65      	ldr	r3, [pc, #404]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	4a64      	ldr	r2, [pc, #400]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c28:	f043 0310 	orr.w	r3, r3, #16
 8007c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2e:	4b62      	ldr	r3, [pc, #392]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c3a:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	4a5e      	ldr	r2, [pc, #376]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c40:	f043 0320 	orr.w	r3, r3, #32
 8007c44:	6313      	str	r3, [r2, #48]	; 0x30
 8007c46:	4b5c      	ldr	r3, [pc, #368]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c52:	4b59      	ldr	r3, [pc, #356]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	4a58      	ldr	r2, [pc, #352]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c58:	f043 0304 	orr.w	r3, r3, #4
 8007c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c5e:	4b56      	ldr	r3, [pc, #344]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c6a:	4b53      	ldr	r3, [pc, #332]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	4a52      	ldr	r2, [pc, #328]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	6313      	str	r3, [r2, #48]	; 0x30
 8007c76:	4b50      	ldr	r3, [pc, #320]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c82:	4b4d      	ldr	r3, [pc, #308]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	4a4c      	ldr	r2, [pc, #304]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8e:	4b4a      	ldr	r3, [pc, #296]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c9a:	4b47      	ldr	r3, [pc, #284]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4a46      	ldr	r2, [pc, #280]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cb2:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	4a40      	ldr	r2, [pc, #256]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007cb8:	f043 0308 	orr.w	r3, r3, #8
 8007cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	; (8007db8 <MX_GPIO_Init+0x1ac>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f240 119b 	movw	r1, #411	; 0x19b
 8007cd0:	483a      	ldr	r0, [pc, #232]	; (8007dbc <MX_GPIO_Init+0x1b0>)
 8007cd2:	f7fa fbb5 	bl	8002440 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f64f 5138 	movw	r1, #64824	; 0xfd38
 8007cdc:	4838      	ldr	r0, [pc, #224]	; (8007dc0 <MX_GPIO_Init+0x1b4>)
 8007cde:	f7fa fbaf 	bl	8002440 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8007ce2:	f240 139b 	movw	r3, #411	; 0x19b
 8007ce6:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cec:	2302      	movs	r3, #2
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cf4:	f107 031c 	add.w	r3, r7, #28
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4830      	ldr	r0, [pc, #192]	; (8007dbc <MX_GPIO_Init+0x1b0>)
 8007cfc:	f7fa f9f6 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8007d00:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8007d04:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d06:	2301      	movs	r3, #1
 8007d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d12:	f107 031c 	add.w	r3, r7, #28
 8007d16:	4619      	mov	r1, r3
 8007d18:	4829      	ldr	r0, [pc, #164]	; (8007dc0 <MX_GPIO_Init+0x1b4>)
 8007d1a:	f7fa f9e7 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 8007d1e:	233f      	movs	r3, #63	; 0x3f
 8007d20:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007d22:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <MX_GPIO_Init+0x1b8>)
 8007d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007d26:	2302      	movs	r3, #2
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d2a:	f107 031c 	add.w	r3, r7, #28
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4825      	ldr	r0, [pc, #148]	; (8007dc8 <MX_GPIO_Init+0x1bc>)
 8007d32:	f7fa f9db 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 8007d36:	239c      	movs	r3, #156	; 0x9c
 8007d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d42:	f107 031c 	add.w	r3, r7, #28
 8007d46:	4619      	mov	r1, r3
 8007d48:	4820      	ldr	r0, [pc, #128]	; (8007dcc <MX_GPIO_Init+0x1c0>)
 8007d4a:	f7fa f9cf 	bl	80020ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2105      	movs	r1, #5
 8007d52:	2006      	movs	r0, #6
 8007d54:	f7f9 fd98 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007d58:	2006      	movs	r0, #6
 8007d5a:	f7f9 fdb1 	bl	80018c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2105      	movs	r1, #5
 8007d62:	2007      	movs	r0, #7
 8007d64:	f7f9 fd90 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007d68:	2007      	movs	r0, #7
 8007d6a:	f7f9 fda9 	bl	80018c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2105      	movs	r1, #5
 8007d72:	2008      	movs	r0, #8
 8007d74:	f7f9 fd88 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007d78:	2008      	movs	r0, #8
 8007d7a:	f7f9 fda1 	bl	80018c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2105      	movs	r1, #5
 8007d82:	2009      	movs	r0, #9
 8007d84:	f7f9 fd80 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007d88:	2009      	movs	r0, #9
 8007d8a:	f7f9 fd99 	bl	80018c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2105      	movs	r1, #5
 8007d92:	200a      	movs	r0, #10
 8007d94:	f7f9 fd78 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007d98:	200a      	movs	r0, #10
 8007d9a:	f7f9 fd91 	bl	80018c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2105      	movs	r1, #5
 8007da2:	2017      	movs	r0, #23
 8007da4:	f7f9 fd70 	bl	8001888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007da8:	2017      	movs	r0, #23
 8007daa:	f7f9 fd89 	bl	80018c0 <HAL_NVIC_EnableIRQ>

}
 8007dae:	bf00      	nop
 8007db0:	3730      	adds	r7, #48	; 0x30
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	40021400 	.word	0x40021400
 8007dc4:	10210000 	.word	0x10210000
 8007dc8:	40021800 	.word	0x40021800
 8007dcc:	40020c00 	.word	0x40020c00

08007dd0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007dd4:	4b1b      	ldr	r3, [pc, #108]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <MX_I2C1_Init+0x78>)
 8007dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8007dda:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <MX_I2C1_Init+0x7c>)
 8007dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007de0:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007de6:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007dec:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e0a:	480e      	ldr	r0, [pc, #56]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007e0c:	f7fa fb4a 	bl	80024a4 <HAL_I2C_Init>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007e16:	f000 fa3d 	bl	8008294 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4809      	ldr	r0, [pc, #36]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007e1e:	f7fa fbd1 	bl	80025c4 <HAL_I2CEx_ConfigAnalogFilter>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007e28:	f000 fa34 	bl	8008294 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4805      	ldr	r0, [pc, #20]	; (8007e44 <MX_I2C1_Init+0x74>)
 8007e30:	f7fa fc13 	bl	800265a <HAL_I2CEx_ConfigDigitalFilter>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007e3a:	f000 fa2b 	bl	8008294 <Error_Handler>
  }

}
 8007e3e:	bf00      	nop
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000a580 	.word	0x2000a580
 8007e48:	40005400 	.word	0x40005400
 8007e4c:	6000030d 	.word	0x6000030d

08007e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	609a      	str	r2, [r3, #8]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2e      	ldr	r2, [pc, #184]	; (8007f28 <HAL_I2C_MspInit+0xd8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d156      	bne.n	8007f20 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e72:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e7e:	4b2b      	ldr	r3, [pc, #172]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e90:	2312      	movs	r3, #18
 8007e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e94:	2301      	movs	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007e9c:	2304      	movs	r3, #4
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4822      	ldr	r0, [pc, #136]	; (8007f30 <HAL_I2C_MspInit+0xe0>)
 8007ea8:	f7fa f920 	bl	80020ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007eac:	4b1f      	ldr	r3, [pc, #124]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8007eb8:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <HAL_I2C_MspInit+0xdc>)
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ec6:	4a1c      	ldr	r2, [pc, #112]	; (8007f38 <HAL_I2C_MspInit+0xe8>)
 8007ec8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8007eca:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ed0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ed2:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ed4:	2240      	movs	r2, #64	; 0x40
 8007ed6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ed8:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ede:	4b15      	ldr	r3, [pc, #84]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ee4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007eec:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007efe:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007f04:	480b      	ldr	r0, [pc, #44]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007f06:	f7f9 fce9 	bl	80018dc <HAL_DMA_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8007f10:	f000 f9c0 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
 8007f1a:	4a06      	ldr	r2, [pc, #24]	; (8007f34 <HAL_I2C_MspInit+0xe4>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007f20:	bf00      	nop
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40005400 	.word	0x40005400
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40020400 	.word	0x40020400
 8007f34:	2000a520 	.word	0x2000a520
 8007f38:	400260a0 	.word	0x400260a0

08007f3c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f44:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007f48:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <SCB_EnableICache+0x3c>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007f50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <SCB_EnableICache+0x3c>)
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	4a06      	ldr	r2, [pc, #24]	; (8007f78 <SCB_EnableICache+0x3c>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	e000ed00 	.word	0xe000ed00

08007f7c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <SCB_EnableDCache+0x7c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007f8a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <SCB_EnableDCache+0x7c>)
 8007f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f94:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	0b5b      	lsrs	r3, r3, #13
 8007f9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f9e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007fb2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007fb8:	490f      	ldr	r1, [pc, #60]	; (8007ff8 <SCB_EnableDCache+0x7c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	1e5a      	subs	r2, r3, #1
 8007fc4:	60ba      	str	r2, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1ef      	bne.n	8007faa <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1e5a      	subs	r2, r3, #1
 8007fce:	60fa      	str	r2, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <SCB_EnableDCache+0x24>
 8007fd4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <SCB_EnableDCache+0x7c>)
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	4a06      	ldr	r2, [pc, #24]	; (8007ff8 <SCB_EnableDCache+0x7c>)
 8007fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe2:	6153      	str	r3, [r2, #20]
 8007fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007fe8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007fec:	bf00      	nop
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	e000ed00 	.word	0xe000ed00

08007ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008000:	f7ff ff9c 	bl	8007f3c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008004:	f7ff ffba 	bl	8007f7c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008008:	f7f8 ffd4 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800800c:	f000 f83a 	bl	8008084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008010:	f7ff fdfc 	bl	8007c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8008014:	f7ff fcda 	bl	80079cc <MX_DMA_Init>
  MX_ADC1_Init();
 8008018:	f7ff fb1e 	bl	8007658 <MX_ADC1_Init>
  MX_TIM1_Init();
 800801c:	f000 fe68 	bl	8008cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008020:	f000 ff20 	bl	8008e64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008024:	f000 ffac 	bl	8008f80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008028:	f001 f826 	bl	8009078 <MX_TIM4_Init>
  MX_TIM7_Init();
 800802c:	f001 f8a0 	bl	8009170 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008030:	f001 f8d4 	bl	80091dc <MX_TIM8_Init>
  MX_TIM9_Init();
 8008034:	f001 f98c 	bl	8009350 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008038:	f001 f9f8 	bl	800942c <MX_TIM10_Init>
  MX_TIM11_Init();
 800803c:	f001 fa44 	bl	80094c8 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008040:	f001 fa90 	bl	8009564 <MX_TIM14_Init>
  MX_SPI1_Init();
 8008044:	f000 f92e 	bl	80082a4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8008048:	f000 f964 	bl	8008314 <MX_SPI3_Init>
  MX_SPI4_Init();
 800804c:	f000 f9a0 	bl	8008390 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008050:	f000 f9dc 	bl	800840c <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008054:	f001 fd62 	bl	8009b1c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008058:	f001 fdc0 	bl	8009bdc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800805c:	f7ff feb8 	bl	8007dd0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008060:	f001 fd8c 	bl	8009b7c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008064:	f7ff fc38 	bl	80078d8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008068:	f004 fc3a 	bl	800c8e0 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 800806c:	f002 f932 	bl	800a2d4 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008070:	f003 fd5c 	bl	800bb2c <PWMBuiltIn_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008074:	f006 fd2a 	bl	800eacc <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008078:	f7ff fd44 	bl	8007b04 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800807c:	f7fe fae4 	bl	8006648 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008080:	e7fe      	b.n	8008080 <main+0x84>
	...

08008084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0b8      	sub	sp, #224	; 0xe0
 8008088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800808a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800808e:	2234      	movs	r2, #52	; 0x34
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f007 fef5 	bl	800fe82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	2290      	movs	r2, #144	; 0x90
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f007 fee6 	bl	800fe82 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80080b6:	4b3c      	ldr	r3, [pc, #240]	; (80081a8 <SystemClock_Config+0x124>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	4a3b      	ldr	r2, [pc, #236]	; (80081a8 <SystemClock_Config+0x124>)
 80080bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c0:	6413      	str	r3, [r2, #64]	; 0x40
 80080c2:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <SystemClock_Config+0x124>)
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080ce:	4b37      	ldr	r3, [pc, #220]	; (80081ac <SystemClock_Config+0x128>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a36      	ldr	r2, [pc, #216]	; (80081ac <SystemClock_Config+0x128>)
 80080d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4b34      	ldr	r3, [pc, #208]	; (80081ac <SystemClock_Config+0x128>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80080e6:	2302      	movs	r3, #2
 80080e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080f2:	2310      	movs	r3, #16
 80080f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080f8:	2302      	movs	r3, #2
 80080fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80080fe:	2300      	movs	r3, #0
 8008100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008104:	2308      	movs	r3, #8
 8008106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800810a:	23d8      	movs	r3, #216	; 0xd8
 800810c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008110:	2302      	movs	r3, #2
 8008112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008116:	2302      	movs	r3, #2
 8008118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800811c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008120:	4618      	mov	r0, r3
 8008122:	f7fa fb37 	bl	8002794 <HAL_RCC_OscConfig>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800812c:	f000 f8b2 	bl	8008294 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008130:	f7fa fae0 	bl	80026f4 <HAL_PWREx_EnableOverDrive>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800813a:	f000 f8ab 	bl	8008294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800813e:	230f      	movs	r3, #15
 8008140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008144:	2302      	movs	r3, #2
 8008146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800814a:	2300      	movs	r3, #0
 800814c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008150:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800815c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008160:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008164:	2107      	movs	r1, #7
 8008166:	4618      	mov	r0, r3
 8008168:	f7fa fdc2 	bl	8002cf0 <HAL_RCC_ClockConfig>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008172:	f000 f88f 	bl	8008294 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008176:	f244 13c0 	movw	r3, #16832	; 0x41c0
 800817a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800817c:	2300      	movs	r3, #0
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008180:	2300      	movs	r3, #0
 8008182:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008184:	2300      	movs	r3, #0
 8008186:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008188:	2300      	movs	r3, #0
 800818a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f7fa ffb1 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800819c:	f000 f87a 	bl	8008294 <Error_Handler>
  }
}
 80081a0:	bf00      	nop
 80081a2:	37e0      	adds	r7, #224	; 0xe0
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40023800 	.word	0x40023800
 80081ac:	40007000 	.word	0x40007000

080081b0 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 ff81 	bl	800a0c0 <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f006 ff10 	bl	800efe4 <slaveSPITxRxCpltCallback>

}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f006 ff2f 	bl	800f038 <slaveSPIErrorCallback>

}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d103      	bne.n	8008200 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e021      	b.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d103      	bne.n	800820e <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008206:	4b19      	ldr	r3, [pc, #100]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	e01a      	b.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d103      	bne.n	800821c <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008216:	2202      	movs	r2, #2
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e013      	b.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	2b08      	cmp	r3, #8
 8008220:	d103      	bne.n	800822a <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008222:	4b12      	ldr	r3, [pc, #72]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008224:	2203      	movs	r2, #3
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e00c      	b.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b10      	cmp	r3, #16
 800822e:	d103      	bne.n	8008238 <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008230:	4b0e      	ldr	r3, [pc, #56]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008232:	2204      	movs	r2, #4
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e005      	b.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008238:	88fb      	ldrh	r3, [r7, #6]
 800823a:	2b20      	cmp	r3, #32
 800823c:	d102      	bne.n	8008244 <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008240:	2205      	movs	r2, #5
 8008242:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fefc 	bl	800a048 <ADBoard_BUSYCallback>
 8008250:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <HAL_GPIO_EXTI_Callback+0x88>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f002 ff9d 	bl	800b19c <interruptCallback>
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000928 	.word	0x20000928

08008270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a04      	ldr	r2, [pc, #16]	; (8008290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d101      	bne.n	8008286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008282:	f7f8 fea5 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40000c00 	.word	0x40000c00

08008294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008298:	bf00      	nop
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80082a8:	4b18      	ldr	r3, [pc, #96]	; (800830c <MX_SPI1_Init+0x68>)
 80082aa:	4a19      	ldr	r2, [pc, #100]	; (8008310 <MX_SPI1_Init+0x6c>)
 80082ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80082ae:	4b17      	ldr	r3, [pc, #92]	; (800830c <MX_SPI1_Init+0x68>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80082b4:	4b15      	ldr	r3, [pc, #84]	; (800830c <MX_SPI1_Init+0x68>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <MX_SPI1_Init+0x68>)
 80082bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80082c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c2:	4b12      	ldr	r3, [pc, #72]	; (800830c <MX_SPI1_Init+0x68>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80082c8:	4b10      	ldr	r3, [pc, #64]	; (800830c <MX_SPI1_Init+0x68>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80082ce:	4b0f      	ldr	r3, [pc, #60]	; (800830c <MX_SPI1_Init+0x68>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80082d4:	4b0d      	ldr	r3, [pc, #52]	; (800830c <MX_SPI1_Init+0x68>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <MX_SPI1_Init+0x68>)
 80082dc:	2200      	movs	r2, #0
 80082de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <MX_SPI1_Init+0x68>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <MX_SPI1_Init+0x68>)
 80082e8:	2207      	movs	r2, #7
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80082ec:	4b07      	ldr	r3, [pc, #28]	; (800830c <MX_SPI1_Init+0x68>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80082f2:	4b06      	ldr	r3, [pc, #24]	; (800830c <MX_SPI1_Init+0x68>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80082f8:	4804      	ldr	r0, [pc, #16]	; (800830c <MX_SPI1_Init+0x68>)
 80082fa:	f7fb fb23 	bl	8003944 <HAL_SPI_Init>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008304:	f7ff ffc6 	bl	8008294 <Error_Handler>
  }

}
 8008308:	bf00      	nop
 800830a:	bd80      	pop	{r7, pc}
 800830c:	2000a818 	.word	0x2000a818
 8008310:	40013000 	.word	0x40013000

08008314 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <MX_SPI3_Init+0x74>)
 800831a:	4a1c      	ldr	r2, [pc, #112]	; (800838c <MX_SPI3_Init+0x78>)
 800831c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800831e:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <MX_SPI3_Init+0x74>)
 8008320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008324:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008326:	4b18      	ldr	r3, [pc, #96]	; (8008388 <MX_SPI3_Init+0x74>)
 8008328:	2200      	movs	r2, #0
 800832a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <MX_SPI3_Init+0x74>)
 800832e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008332:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008334:	4b14      	ldr	r3, [pc, #80]	; (8008388 <MX_SPI3_Init+0x74>)
 8008336:	2200      	movs	r2, #0
 8008338:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <MX_SPI3_Init+0x74>)
 800833c:	2200      	movs	r2, #0
 800833e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008340:	4b11      	ldr	r3, [pc, #68]	; (8008388 <MX_SPI3_Init+0x74>)
 8008342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008346:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008348:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <MX_SPI3_Init+0x74>)
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800834e:	4b0e      	ldr	r3, [pc, #56]	; (8008388 <MX_SPI3_Init+0x74>)
 8008350:	2200      	movs	r2, #0
 8008352:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <MX_SPI3_Init+0x74>)
 8008356:	2200      	movs	r2, #0
 8008358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <MX_SPI3_Init+0x74>)
 800835c:	2200      	movs	r2, #0
 800835e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008360:	4b09      	ldr	r3, [pc, #36]	; (8008388 <MX_SPI3_Init+0x74>)
 8008362:	2207      	movs	r2, #7
 8008364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <MX_SPI3_Init+0x74>)
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <MX_SPI3_Init+0x74>)
 800836e:	2208      	movs	r2, #8
 8008370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008372:	4805      	ldr	r0, [pc, #20]	; (8008388 <MX_SPI3_Init+0x74>)
 8008374:	f7fb fae6 	bl	8003944 <HAL_SPI_Init>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800837e:	f7ff ff89 	bl	8008294 <Error_Handler>
  }

}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	2000a690 	.word	0x2000a690
 800838c:	40003c00 	.word	0x40003c00

08008390 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <MX_SPI4_Init+0x74>)
 8008396:	4a1c      	ldr	r2, [pc, #112]	; (8008408 <MX_SPI4_Init+0x78>)
 8008398:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800839a:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <MX_SPI4_Init+0x74>)
 800839c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80083a0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80083a2:	4b18      	ldr	r3, [pc, #96]	; (8008404 <MX_SPI4_Init+0x74>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80083a8:	4b16      	ldr	r3, [pc, #88]	; (8008404 <MX_SPI4_Init+0x74>)
 80083aa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80083ae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80083b0:	4b14      	ldr	r3, [pc, #80]	; (8008404 <MX_SPI4_Init+0x74>)
 80083b2:	2202      	movs	r2, #2
 80083b4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80083b6:	4b13      	ldr	r3, [pc, #76]	; (8008404 <MX_SPI4_Init+0x74>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <MX_SPI4_Init+0x74>)
 80083be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80083c4:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <MX_SPI4_Init+0x74>)
 80083c6:	2210      	movs	r2, #16
 80083c8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80083ca:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <MX_SPI4_Init+0x74>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80083d0:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <MX_SPI4_Init+0x74>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <MX_SPI4_Init+0x74>)
 80083d8:	2200      	movs	r2, #0
 80083da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <MX_SPI4_Init+0x74>)
 80083de:	2207      	movs	r2, #7
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <MX_SPI4_Init+0x74>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80083e8:	4b06      	ldr	r3, [pc, #24]	; (8008404 <MX_SPI4_Init+0x74>)
 80083ea:	2208      	movs	r2, #8
 80083ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80083ee:	4805      	ldr	r0, [pc, #20]	; (8008404 <MX_SPI4_Init+0x74>)
 80083f0:	f7fb faa8 	bl	8003944 <HAL_SPI_Init>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80083fa:	f7ff ff4b 	bl	8008294 <Error_Handler>
  }

}
 80083fe:	bf00      	nop
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	2000a7b4 	.word	0x2000a7b4
 8008408:	40013400 	.word	0x40013400

0800840c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <MX_SPI6_Init+0x74>)
 8008412:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <MX_SPI6_Init+0x78>)
 8008414:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008416:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <MX_SPI6_Init+0x74>)
 8008418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800841c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800841e:	4b18      	ldr	r3, [pc, #96]	; (8008480 <MX_SPI6_Init+0x74>)
 8008420:	2200      	movs	r2, #0
 8008422:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <MX_SPI6_Init+0x74>)
 8008426:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800842a:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <MX_SPI6_Init+0x74>)
 800842e:	2200      	movs	r2, #0
 8008430:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <MX_SPI6_Init+0x74>)
 8008434:	2200      	movs	r2, #0
 8008436:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <MX_SPI6_Init+0x74>)
 800843a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843e:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <MX_SPI6_Init+0x74>)
 8008442:	2230      	movs	r2, #48	; 0x30
 8008444:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <MX_SPI6_Init+0x74>)
 8008448:	2200      	movs	r2, #0
 800844a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800844c:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <MX_SPI6_Init+0x74>)
 800844e:	2200      	movs	r2, #0
 8008450:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <MX_SPI6_Init+0x74>)
 8008454:	2200      	movs	r2, #0
 8008456:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <MX_SPI6_Init+0x74>)
 800845a:	2207      	movs	r2, #7
 800845c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800845e:	4b08      	ldr	r3, [pc, #32]	; (8008480 <MX_SPI6_Init+0x74>)
 8008460:	2200      	movs	r2, #0
 8008462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <MX_SPI6_Init+0x74>)
 8008466:	2208      	movs	r2, #8
 8008468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800846a:	4805      	ldr	r0, [pc, #20]	; (8008480 <MX_SPI6_Init+0x74>)
 800846c:	f7fb fa6a 	bl	8003944 <HAL_SPI_Init>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8008476:	f7ff ff0d 	bl	8008294 <Error_Handler>
  }

}
 800847a:	bf00      	nop
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	2000a62c 	.word	0x2000a62c
 8008484:	40015400 	.word	0x40015400

08008488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b092      	sub	sp, #72	; 0x48
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	605a      	str	r2, [r3, #4]
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	60da      	str	r2, [r3, #12]
 800849e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a5b      	ldr	r2, [pc, #364]	; (8008614 <HAL_SPI_MspInit+0x18c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	f040 80c4 	bne.w	8008634 <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084ac:	4b5a      	ldr	r3, [pc, #360]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	4a59      	ldr	r2, [pc, #356]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084b6:	6453      	str	r3, [r2, #68]	; 0x44
 80084b8:	4b57      	ldr	r3, [pc, #348]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084c0:	633b      	str	r3, [r7, #48]	; 0x30
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084c4:	4b54      	ldr	r3, [pc, #336]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c8:	4a53      	ldr	r2, [pc, #332]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6313      	str	r3, [r2, #48]	; 0x30
 80084d0:	4b51      	ldr	r3, [pc, #324]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084dc:	4b4e      	ldr	r3, [pc, #312]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e0:	4a4d      	ldr	r2, [pc, #308]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e6:	6313      	str	r3, [r2, #48]	; 0x30
 80084e8:	4b4b      	ldr	r3, [pc, #300]	; (8008618 <HAL_SPI_MspInit+0x190>)
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80084f4:	2360      	movs	r3, #96	; 0x60
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f8:	2302      	movs	r3, #2
 80084fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008500:	2303      	movs	r3, #3
 8008502:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008504:	2305      	movs	r3, #5
 8008506:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800850c:	4619      	mov	r1, r3
 800850e:	4843      	ldr	r0, [pc, #268]	; (800861c <HAL_SPI_MspInit+0x194>)
 8008510:	f7f9 fdec 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008518:	2302      	movs	r3, #2
 800851a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800851c:	2301      	movs	r3, #1
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008520:	2303      	movs	r3, #3
 8008522:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008524:	2305      	movs	r3, #5
 8008526:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800852c:	4619      	mov	r1, r3
 800852e:	483b      	ldr	r0, [pc, #236]	; (800861c <HAL_SPI_MspInit+0x194>)
 8008530:	f7f9 fddc 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008538:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853a:	2302      	movs	r3, #2
 800853c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008542:	2303      	movs	r3, #3
 8008544:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008546:	2305      	movs	r3, #5
 8008548:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800854a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800854e:	4619      	mov	r1, r3
 8008550:	4833      	ldr	r0, [pc, #204]	; (8008620 <HAL_SPI_MspInit+0x198>)
 8008552:	f7f9 fdcb 	bl	80020ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8008556:	4b33      	ldr	r3, [pc, #204]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008558:	4a33      	ldr	r2, [pc, #204]	; (8008628 <HAL_SPI_MspInit+0x1a0>)
 800855a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800855c:	4b31      	ldr	r3, [pc, #196]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 800855e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008562:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008564:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008566:	2200      	movs	r2, #0
 8008568:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800856a:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 800856c:	2200      	movs	r2, #0
 800856e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008570:	4b2c      	ldr	r3, [pc, #176]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008576:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008578:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 800857a:	2200      	movs	r2, #0
 800857c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800857e:	4b29      	ldr	r3, [pc, #164]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008580:	2200      	movs	r2, #0
 8008582:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008584:	4b27      	ldr	r3, [pc, #156]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008586:	2200      	movs	r2, #0
 8008588:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800858a:	4b26      	ldr	r3, [pc, #152]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 800858c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008590:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008592:	4b24      	ldr	r3, [pc, #144]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 8008594:	2200      	movs	r2, #0
 8008596:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008598:	4822      	ldr	r0, [pc, #136]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 800859a:	f7f9 f99f 	bl	80018dc <HAL_DMA_Init>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80085a4:	f7ff fe76 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a1e      	ldr	r2, [pc, #120]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 80085ac:	659a      	str	r2, [r3, #88]	; 0x58
 80085ae:	4a1d      	ldr	r2, [pc, #116]	; (8008624 <HAL_SPI_MspInit+0x19c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80085b4:	4b1d      	ldr	r3, [pc, #116]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_SPI_MspInit+0x1a8>)
 80085b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80085ba:	4b1c      	ldr	r3, [pc, #112]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80085c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80085c2:	4b1a      	ldr	r3, [pc, #104]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085c4:	2240      	movs	r2, #64	; 0x40
 80085c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085c8:	4b18      	ldr	r3, [pc, #96]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80085ce:	4b17      	ldr	r3, [pc, #92]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085d8:	2200      	movs	r2, #0
 80085da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085de:	2200      	movs	r2, #0
 80085e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80085e8:	4b10      	ldr	r3, [pc, #64]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80085ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085f0:	4b0e      	ldr	r3, [pc, #56]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80085f6:	480d      	ldr	r0, [pc, #52]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 80085f8:	f7f9 f970 	bl	80018dc <HAL_DMA_Init>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 8008602:	f7ff fe47 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a08      	ldr	r2, [pc, #32]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 800860a:	655a      	str	r2, [r3, #84]	; 0x54
 800860c:	4a07      	ldr	r2, [pc, #28]	; (800862c <HAL_SPI_MspInit+0x1a4>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008612:	e1bb      	b.n	800898c <HAL_SPI_MspInit+0x504>
 8008614:	40013000 	.word	0x40013000
 8008618:	40023800 	.word	0x40023800
 800861c:	40020000 	.word	0x40020000
 8008620:	40021800 	.word	0x40021800
 8008624:	2000a87c 	.word	0x2000a87c
 8008628:	40026440 	.word	0x40026440
 800862c:	2000a8dc 	.word	0x2000a8dc
 8008630:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a9d      	ldr	r2, [pc, #628]	; (80088b0 <HAL_SPI_MspInit+0x428>)
 800863a:	4293      	cmp	r3, r2
 800863c:	f040 80a6 	bne.w	800878c <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008640:	4b9c      	ldr	r3, [pc, #624]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	4a9b      	ldr	r2, [pc, #620]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 8008646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864a:	6413      	str	r3, [r2, #64]	; 0x40
 800864c:	4b99      	ldr	r3, [pc, #612]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008658:	4b96      	ldr	r3, [pc, #600]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	4a95      	ldr	r2, [pc, #596]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	6313      	str	r3, [r2, #48]	; 0x30
 8008664:	4b93      	ldr	r3, [pc, #588]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008670:	4b90      	ldr	r3, [pc, #576]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	4a8f      	ldr	r2, [pc, #572]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 8008676:	f043 0304 	orr.w	r3, r3, #4
 800867a:	6313      	str	r3, [r2, #48]	; 0x30
 800867c:	4b8d      	ldr	r3, [pc, #564]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008688:	2304      	movs	r3, #4
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800868c:	2302      	movs	r3, #2
 800868e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008694:	2303      	movs	r3, #3
 8008696:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008698:	2307      	movs	r3, #7
 800869a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800869c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086a0:	4619      	mov	r1, r3
 80086a2:	4885      	ldr	r0, [pc, #532]	; (80088b8 <HAL_SPI_MspInit+0x430>)
 80086a4:	f7f9 fd22 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80086a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ae:	2302      	movs	r3, #2
 80086b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086b6:	2303      	movs	r3, #3
 80086b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80086ba:	2306      	movs	r3, #6
 80086bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086c2:	4619      	mov	r1, r3
 80086c4:	487d      	ldr	r0, [pc, #500]	; (80088bc <HAL_SPI_MspInit+0x434>)
 80086c6:	f7f9 fd11 	bl	80020ec <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80086ca:	4b7d      	ldr	r3, [pc, #500]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086cc:	4a7d      	ldr	r2, [pc, #500]	; (80088c4 <HAL_SPI_MspInit+0x43c>)
 80086ce:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80086d0:	4b7b      	ldr	r3, [pc, #492]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086d6:	4b7a      	ldr	r3, [pc, #488]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086dc:	4b78      	ldr	r3, [pc, #480]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086de:	2200      	movs	r2, #0
 80086e0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086e2:	4b77      	ldr	r3, [pc, #476]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80086ea:	4b75      	ldr	r3, [pc, #468]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086f0:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80086f2:	4b73      	ldr	r3, [pc, #460]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086f8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80086fa:	4b71      	ldr	r3, [pc, #452]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008700:	4b6f      	ldr	r3, [pc, #444]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 8008702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008706:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008708:	4b6d      	ldr	r3, [pc, #436]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 800870a:	2200      	movs	r2, #0
 800870c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800870e:	486c      	ldr	r0, [pc, #432]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 8008710:	f7f9 f8e4 	bl	80018dc <HAL_DMA_Init>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <HAL_SPI_MspInit+0x296>
      Error_Handler();
 800871a:	f7ff fdbb 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a67      	ldr	r2, [pc, #412]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 8008722:	659a      	str	r2, [r3, #88]	; 0x58
 8008724:	4a66      	ldr	r2, [pc, #408]	; (80088c0 <HAL_SPI_MspInit+0x438>)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800872a:	4b67      	ldr	r3, [pc, #412]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 800872c:	4a67      	ldr	r2, [pc, #412]	; (80088cc <HAL_SPI_MspInit+0x444>)
 800872e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8008730:	4b65      	ldr	r3, [pc, #404]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008732:	2200      	movs	r2, #0
 8008734:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008736:	4b64      	ldr	r3, [pc, #400]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008738:	2240      	movs	r2, #64	; 0x40
 800873a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800873c:	4b62      	ldr	r3, [pc, #392]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 800873e:	2200      	movs	r2, #0
 8008740:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008742:	4b61      	ldr	r3, [pc, #388]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008748:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800874a:	4b5f      	ldr	r3, [pc, #380]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 800874c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008750:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008752:	4b5d      	ldr	r3, [pc, #372]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008758:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800875a:	4b5b      	ldr	r3, [pc, #364]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 800875c:	2200      	movs	r2, #0
 800875e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008760:	4b59      	ldr	r3, [pc, #356]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008766:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008768:	4b57      	ldr	r3, [pc, #348]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 800876a:	2200      	movs	r2, #0
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800876e:	4856      	ldr	r0, [pc, #344]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008770:	f7f9 f8b4 	bl	80018dc <HAL_DMA_Init>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 800877a:	f7ff fd8b 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a51      	ldr	r2, [pc, #324]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008782:	655a      	str	r2, [r3, #84]	; 0x54
 8008784:	4a50      	ldr	r2, [pc, #320]	; (80088c8 <HAL_SPI_MspInit+0x440>)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6393      	str	r3, [r2, #56]	; 0x38
}
 800878a:	e0ff      	b.n	800898c <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a4f      	ldr	r2, [pc, #316]	; (80088d0 <HAL_SPI_MspInit+0x448>)
 8008792:	4293      	cmp	r3, r2
 8008794:	f040 80a8 	bne.w	80088e8 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008798:	4b46      	ldr	r3, [pc, #280]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	4a45      	ldr	r2, [pc, #276]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 800879e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80087a2:	6453      	str	r3, [r2, #68]	; 0x44
 80087a4:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80087b0:	4b40      	ldr	r3, [pc, #256]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	4a3f      	ldr	r2, [pc, #252]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 80087b6:	f043 0310 	orr.w	r3, r3, #16
 80087ba:	6313      	str	r3, [r2, #48]	; 0x30
 80087bc:	4b3d      	ldr	r3, [pc, #244]	; (80088b4 <HAL_SPI_MspInit+0x42c>)
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 80087c8:	f246 0304 	movw	r3, #24580	; 0x6004
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ce:	2302      	movs	r3, #2
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087d6:	2303      	movs	r3, #3
 80087d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80087da:	2305      	movs	r3, #5
 80087dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80087de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087e2:	4619      	mov	r1, r3
 80087e4:	483b      	ldr	r0, [pc, #236]	; (80088d4 <HAL_SPI_MspInit+0x44c>)
 80087e6:	f7f9 fc81 	bl	80020ec <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80087ea:	4b3b      	ldr	r3, [pc, #236]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 80087ec:	4a3b      	ldr	r2, [pc, #236]	; (80088dc <HAL_SPI_MspInit+0x454>)
 80087ee:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80087f0:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 80087f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087f6:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087f8:	4b37      	ldr	r3, [pc, #220]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087fe:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008800:	2200      	movs	r2, #0
 8008802:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008804:	4b34      	ldr	r3, [pc, #208]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800880a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800880c:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 800880e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008812:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008814:	4b30      	ldr	r3, [pc, #192]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800881a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800881c:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 800881e:	2200      	movs	r2, #0
 8008820:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008822:	4b2d      	ldr	r3, [pc, #180]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008828:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800882a:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 800882c:	2200      	movs	r2, #0
 800882e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008830:	4829      	ldr	r0, [pc, #164]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008832:	f7f9 f853 	bl	80018dc <HAL_DMA_Init>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 800883c:	f7ff fd2a 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a25      	ldr	r2, [pc, #148]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008844:	659a      	str	r2, [r3, #88]	; 0x58
 8008846:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <HAL_SPI_MspInit+0x450>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 800884e:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <HAL_SPI_MspInit+0x45c>)
 8008850:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8008852:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008858:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800885a:	4b21      	ldr	r3, [pc, #132]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 800885c:	2240      	movs	r2, #64	; 0x40
 800885e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008860:	4b1f      	ldr	r3, [pc, #124]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008862:	2200      	movs	r2, #0
 8008864:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008866:	4b1e      	ldr	r3, [pc, #120]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800886c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800886e:	4b1c      	ldr	r3, [pc, #112]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008874:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800887c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800887e:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008880:	2200      	movs	r2, #0
 8008882:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008884:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800888a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800888c:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 800888e:	2200      	movs	r2, #0
 8008890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008892:	4813      	ldr	r0, [pc, #76]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 8008894:	f7f9 f822 	bl	80018dc <HAL_DMA_Init>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 800889e:	f7ff fcf9 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a0e      	ldr	r2, [pc, #56]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 80088a6:	655a      	str	r2, [r3, #84]	; 0x54
 80088a8:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <HAL_SPI_MspInit+0x458>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80088ae:	e06d      	b.n	800898c <HAL_SPI_MspInit+0x504>
 80088b0:	40003c00 	.word	0x40003c00
 80088b4:	40023800 	.word	0x40023800
 80088b8:	40020400 	.word	0x40020400
 80088bc:	40020800 	.word	0x40020800
 80088c0:	2000a93c 	.word	0x2000a93c
 80088c4:	40026010 	.word	0x40026010
 80088c8:	2000a6f4 	.word	0x2000a6f4
 80088cc:	40026088 	.word	0x40026088
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40021000 	.word	0x40021000
 80088d8:	2000a5cc 	.word	0x2000a5cc
 80088dc:	40026410 	.word	0x40026410
 80088e0:	2000a754 	.word	0x2000a754
 80088e4:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <HAL_SPI_MspInit+0x50c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d14c      	bne.n	800898c <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <HAL_SPI_MspInit+0x510>)
 80088f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f6:	4a28      	ldr	r2, [pc, #160]	; (8008998 <HAL_SPI_MspInit+0x510>)
 80088f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088fc:	6453      	str	r3, [r2, #68]	; 0x44
 80088fe:	4b26      	ldr	r3, [pc, #152]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800890a:	4b23      	ldr	r3, [pc, #140]	; (8008998 <HAL_SPI_MspInit+0x510>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	4a22      	ldr	r2, [pc, #136]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008914:	6313      	str	r3, [r2, #48]	; 0x30
 8008916:	4b20      	ldr	r3, [pc, #128]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	4a1c      	ldr	r2, [pc, #112]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008928:	f043 0302 	orr.w	r3, r3, #2
 800892c:	6313      	str	r3, [r2, #48]	; 0x30
 800892e:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <HAL_SPI_MspInit+0x510>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800893a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008940:	2302      	movs	r3, #2
 8008942:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008944:	2300      	movs	r3, #0
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008948:	2303      	movs	r3, #3
 800894a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800894c:	2305      	movs	r3, #5
 800894e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008954:	4619      	mov	r1, r3
 8008956:	4811      	ldr	r0, [pc, #68]	; (800899c <HAL_SPI_MspInit+0x514>)
 8008958:	f7f9 fbc8 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800895c:	2308      	movs	r3, #8
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008960:	2302      	movs	r3, #2
 8008962:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008968:	2303      	movs	r3, #3
 800896a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800896c:	2308      	movs	r3, #8
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008974:	4619      	mov	r1, r3
 8008976:	480a      	ldr	r0, [pc, #40]	; (80089a0 <HAL_SPI_MspInit+0x518>)
 8008978:	f7f9 fbb8 	bl	80020ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 800897c:	2200      	movs	r2, #0
 800897e:	2105      	movs	r1, #5
 8008980:	2056      	movs	r0, #86	; 0x56
 8008982:	f7f8 ff81 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8008986:	2056      	movs	r0, #86	; 0x56
 8008988:	f7f8 ff9a 	bl	80018c0 <HAL_NVIC_EnableIRQ>
}
 800898c:	bf00      	nop
 800898e:	3748      	adds	r7, #72	; 0x48
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	40015400 	.word	0x40015400
 8008998:	40023800 	.word	0x40023800
 800899c:	40021800 	.word	0x40021800
 80089a0:	40020400 	.word	0x40020400

080089a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <HAL_MspInit+0x4c>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <HAL_MspInit+0x4c>)
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6413      	str	r3, [r2, #64]	; 0x40
 80089b6:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <HAL_MspInit+0x4c>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <HAL_MspInit+0x4c>)
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	4a0a      	ldr	r2, [pc, #40]	; (80089f0 <HAL_MspInit+0x4c>)
 80089c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089cc:	6453      	str	r3, [r2, #68]	; 0x44
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <HAL_MspInit+0x4c>)
 80089d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80089da:	2200      	movs	r2, #0
 80089dc:	210f      	movs	r1, #15
 80089de:	f06f 0001 	mvn.w	r0, #1
 80089e2:	f7f8 ff51 	bl	8001888 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40023800 	.word	0x40023800

080089f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08c      	sub	sp, #48	; 0x30
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8008a04:	2200      	movs	r2, #0
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	2032      	movs	r0, #50	; 0x32
 8008a0a:	f7f8 ff3d 	bl	8001888 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8008a0e:	2032      	movs	r0, #50	; 0x32
 8008a10:	f7f8 ff56 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8008a14:	4b1f      	ldr	r3, [pc, #124]	; (8008a94 <HAL_InitTick+0xa0>)
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	4a1e      	ldr	r2, [pc, #120]	; (8008a94 <HAL_InitTick+0xa0>)
 8008a1a:	f043 0308 	orr.w	r3, r3, #8
 8008a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8008a20:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <HAL_InitTick+0xa0>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008a2c:	f107 0210 	add.w	r2, r7, #16
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fa fb2c 	bl	8003094 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008a3c:	f7fa fb02 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8008a40:	4603      	mov	r3, r0
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <HAL_InitTick+0xa4>)
 8008a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4e:	0c9b      	lsrs	r3, r3, #18
 8008a50:	3b01      	subs	r3, #1
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8008a54:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a56:	4a12      	ldr	r2, [pc, #72]	; (8008aa0 <HAL_InitTick+0xac>)
 8008a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a60:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8008a62:	4a0e      	ldr	r2, [pc, #56]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8008a68:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8008a74:	4809      	ldr	r0, [pc, #36]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a76:	f7fb fcf3 	bl	8004460 <HAL_TIM_Base_Init>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8008a80:	4806      	ldr	r0, [pc, #24]	; (8008a9c <HAL_InitTick+0xa8>)
 8008a82:	f7fb fd19 	bl	80044b8 <HAL_TIM_Base_Start_IT>
 8008a86:	4603      	mov	r3, r0
 8008a88:	e000      	b.n	8008a8c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3730      	adds	r7, #48	; 0x30
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40023800 	.word	0x40023800
 8008a98:	431bde83 	.word	0x431bde83
 8008a9c:	2000a99c 	.word	0x2000a99c
 8008aa0:	40000c00 	.word	0x40000c00

08008aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008aa8:	bf00      	nop
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ab6:	e7fe      	b.n	8008ab6 <HardFault_Handler+0x4>

08008ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008abc:	e7fe      	b.n	8008abc <MemManage_Handler+0x4>

08008abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ac2:	e7fe      	b.n	8008ac2 <BusFault_Handler+0x4>

08008ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ac8:	e7fe      	b.n	8008ac8 <UsageFault_Handler+0x4>

08008aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008aca:	b480      	push	{r7}
 8008acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ace:	bf00      	nop
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f7f9 fcc9 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008aea:	2002      	movs	r0, #2
 8008aec:	f7f9 fcc2 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008af0:	bf00      	nop
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008af8:	2004      	movs	r0, #4
 8008afa:	f7f9 fcbb 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008afe:	bf00      	nop
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008b06:	2008      	movs	r0, #8
 8008b08:	f7f9 fcb4 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008b0c:	bf00      	nop
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008b14:	2010      	movs	r0, #16
 8008b16:	f7f9 fcad 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008b1a:	bf00      	nop
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8008b24:	4802      	ldr	r0, [pc, #8]	; (8008b30 <DMA1_Stream0_IRQHandler+0x10>)
 8008b26:	f7f9 f879 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000a93c 	.word	0x2000a93c

08008b34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008b38:	4802      	ldr	r0, [pc, #8]	; (8008b44 <DMA1_Stream1_IRQHandler+0x10>)
 8008b3a:	f7f9 f86f 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	2000ac5c 	.word	0x2000ac5c

08008b48 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008b4c:	4802      	ldr	r0, [pc, #8]	; (8008b58 <DMA1_Stream4_IRQHandler+0x10>)
 8008b4e:	f7f9 f865 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000ad3c 	.word	0x2000ad3c

08008b5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8008b60:	4802      	ldr	r0, [pc, #8]	; (8008b6c <DMA1_Stream5_IRQHandler+0x10>)
 8008b62:	f7f9 f85b 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	2000a6f4 	.word	0x2000a6f4

08008b70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008b74:	4802      	ldr	r0, [pc, #8]	; (8008b80 <DMA1_Stream6_IRQHandler+0x10>)
 8008b76:	f7f9 f851 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008b7a:	bf00      	nop
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	2000a520 	.word	0x2000a520

08008b84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008b88:	2020      	movs	r0, #32
 8008b8a:	f7f9 fc73 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008b8e:	bf00      	nop
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008b98:	4803      	ldr	r0, [pc, #12]	; (8008ba8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008b9a:	f7fb fd27 	bl	80045ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008b9e:	4803      	ldr	r0, [pc, #12]	; (8008bac <TIM1_UP_TIM10_IRQHandler+0x18>)
 8008ba0:	f7fb fd24 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008ba4:	bf00      	nop
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	2000ab1c 	.word	0x2000ab1c
 8008bac:	2000aa5c 	.word	0x2000aa5c

08008bb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008bb4:	4802      	ldr	r0, [pc, #8]	; (8008bc0 <USART3_IRQHandler+0x10>)
 8008bb6:	f7fc fe69 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008bba:	bf00      	nop
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000acbc 	.word	0x2000acbc

08008bc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008bc8:	4802      	ldr	r0, [pc, #8]	; (8008bd4 <TIM5_IRQHandler+0x10>)
 8008bca:	f7fb fd0f 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008bce:	bf00      	nop
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000a99c 	.word	0x2000a99c

08008bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8008bdc:	4802      	ldr	r0, [pc, #8]	; (8008be8 <DMA2_Stream0_IRQHandler+0x10>)
 8008bde:	f7f9 f81d 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008be2:	bf00      	nop
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	2000a5cc 	.word	0x2000a5cc

08008bec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8008bf0:	4802      	ldr	r0, [pc, #8]	; (8008bfc <DMA2_Stream1_IRQHandler+0x10>)
 8008bf2:	f7f9 f813 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2000a754 	.word	0x2000a754

08008c00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008c04:	4802      	ldr	r0, [pc, #8]	; (8008c10 <DMA2_Stream2_IRQHandler+0x10>)
 8008c06:	f7f9 f809 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	2000a87c 	.word	0x2000a87c

08008c14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008c18:	4802      	ldr	r0, [pc, #8]	; (8008c24 <DMA2_Stream3_IRQHandler+0x10>)
 8008c1a:	f7f8 ffff 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	2000a8dc 	.word	0x2000a8dc

08008c28 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008c2c:	4802      	ldr	r0, [pc, #8]	; (8008c38 <DMA2_Stream4_IRQHandler+0x10>)
 8008c2e:	f7f8 fff5 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008c32:	bf00      	nop
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200023e8 	.word	0x200023e8

08008c3c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008c40:	4802      	ldr	r0, [pc, #8]	; (8008c4c <DMA2_Stream5_IRQHandler+0x10>)
 8008c42:	f7f8 ffeb 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	2000adfc 	.word	0x2000adfc

08008c50 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008c54:	4802      	ldr	r0, [pc, #8]	; (8008c60 <DMA2_Stream7_IRQHandler+0x10>)
 8008c56:	f7f8 ffe1 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008c5a:	bf00      	nop
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	2000ad9c 	.word	0x2000ad9c

08008c64 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8008c68:	4802      	ldr	r0, [pc, #8]	; (8008c74 <SPI6_IRQHandler+0x10>)
 8008c6a:	f7fb f889 	bl	8003d80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8008c6e:	bf00      	nop
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	2000a62c 	.word	0x2000a62c

08008c78 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8008c7c:	f7fd fd10 	bl	80066a0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c80:	bf00      	nop
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <SystemInit+0x5c>)
 8008c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8e:	4a14      	ldr	r2, [pc, #80]	; (8008ce0 <SystemInit+0x5c>)
 8008c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008c98:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <SystemInit+0x60>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a11      	ldr	r2, [pc, #68]	; (8008ce4 <SystemInit+0x60>)
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <SystemInit+0x60>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008caa:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <SystemInit+0x60>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	490d      	ldr	r1, [pc, #52]	; (8008ce4 <SystemInit+0x60>)
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <SystemInit+0x64>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008cb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <SystemInit+0x60>)
 8008cb8:	4a0c      	ldr	r2, [pc, #48]	; (8008cec <SystemInit+0x68>)
 8008cba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <SystemInit+0x60>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <SystemInit+0x60>)
 8008cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008cc8:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <SystemInit+0x60>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <SystemInit+0x5c>)
 8008cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008cd4:	609a      	str	r2, [r3, #8]
#endif
}
 8008cd6:	bf00      	nop
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	e000ed00 	.word	0xe000ed00
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	fef6ffff 	.word	0xfef6ffff
 8008cec:	24003010 	.word	0x24003010

08008cf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b09a      	sub	sp, #104	; 0x68
 8008cf4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	605a      	str	r2, [r3, #4]
 8008d00:	609a      	str	r2, [r3, #8]
 8008d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
 8008d20:	615a      	str	r2, [r3, #20]
 8008d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	222c      	movs	r2, #44	; 0x2c
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f007 f8a9 	bl	800fe82 <memset>

  htim1.Instance = TIM1;
 8008d30:	4b4a      	ldr	r3, [pc, #296]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d32:	4a4b      	ldr	r2, [pc, #300]	; (8008e60 <MX_TIM1_Init+0x170>)
 8008d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8008d36:	4b49      	ldr	r3, [pc, #292]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d38:	f245 425f 	movw	r2, #21599	; 0x545f
 8008d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d3e:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8008d44:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d4c:	4b43      	ldr	r3, [pc, #268]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d52:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d58:	4b40      	ldr	r3, [pc, #256]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008d5e:	483f      	ldr	r0, [pc, #252]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d60:	f7fb fb7e 	bl	8004460 <HAL_TIM_Base_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8008d6a:	f7ff fa93 	bl	8008294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d72:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008d74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4838      	ldr	r0, [pc, #224]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d7c:	f7fb fe6e 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8008d86:	f7ff fa85 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008d8a:	4834      	ldr	r0, [pc, #208]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008d8c:	f7fb fbbe 	bl	800450c <HAL_TIM_PWM_Init>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8008d96:	f7ff fa7d 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008da6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008daa:	4619      	mov	r1, r3
 8008dac:	482b      	ldr	r0, [pc, #172]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008dae:	f7fc faf5 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8008db8:	f7ff fa6c 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008dbc:	2360      	movs	r3, #96	; 0x60
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4619      	mov	r1, r3
 8008de0:	481e      	ldr	r0, [pc, #120]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008de2:	f7fb fd23 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8008dec:	f7ff fa52 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008df4:	2204      	movs	r2, #4
 8008df6:	4619      	mov	r1, r3
 8008df8:	4818      	ldr	r0, [pc, #96]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008dfa:	f7fb fd17 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8008e04:	f7ff fa46 	bl	8008294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008e38:	1d3b      	adds	r3, r7, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4807      	ldr	r0, [pc, #28]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008e3e:	f7fc fb3b 	bl	80054b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8008e48:	f7ff fa24 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <MX_TIM1_Init+0x16c>)
 8008e4e:	f000 fcc3 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 8008e52:	bf00      	nop
 8008e54:	3768      	adds	r7, #104	; 0x68
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	2000ab1c 	.word	0x2000ab1c
 8008e60:	40010000 	.word	0x40010000

08008e64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08e      	sub	sp, #56	; 0x38
 8008e68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	605a      	str	r2, [r3, #4]
 8008e74:	609a      	str	r2, [r3, #8]
 8008e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e78:	f107 031c 	add.w	r3, r7, #28
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	605a      	str	r2, [r3, #4]
 8008e82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e84:	463b      	mov	r3, r7
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
 8008e8e:	60da      	str	r2, [r3, #12]
 8008e90:	611a      	str	r2, [r3, #16]
 8008e92:	615a      	str	r2, [r3, #20]
 8008e94:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8008e9e:	4b37      	ldr	r3, [pc, #220]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008ea0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8008ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ea6:	4b35      	ldr	r3, [pc, #212]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8008eac:	4b33      	ldr	r3, [pc, #204]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008eb4:	4b31      	ldr	r3, [pc, #196]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008eba:	4b30      	ldr	r3, [pc, #192]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008ec0:	482e      	ldr	r0, [pc, #184]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008ec2:	f7fb facd 	bl	8004460 <HAL_TIM_Base_Init>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8008ecc:	f7ff f9e2 	bl	8008294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eda:	4619      	mov	r1, r3
 8008edc:	4827      	ldr	r0, [pc, #156]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008ede:	f7fb fdbd 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8008ee8:	f7ff f9d4 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008eec:	4823      	ldr	r0, [pc, #140]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008eee:	f7fb fb0d 	bl	800450c <HAL_TIM_PWM_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8008ef8:	f7ff f9cc 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f04:	f107 031c 	add.w	r3, r7, #28
 8008f08:	4619      	mov	r1, r3
 8008f0a:	481c      	ldr	r0, [pc, #112]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008f0c:	f7fc fa46 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8008f16:	f7ff f9bd 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f1a:	2360      	movs	r3, #96	; 0x60
 8008f1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f2a:	463b      	mov	r3, r7
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4812      	ldr	r0, [pc, #72]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008f32:	f7fb fc7b 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8008f3c:	f7ff f9aa 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f40:	463b      	mov	r3, r7
 8008f42:	2208      	movs	r2, #8
 8008f44:	4619      	mov	r1, r3
 8008f46:	480d      	ldr	r0, [pc, #52]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008f48:	f7fb fc70 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8008f52:	f7ff f99f 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f56:	463b      	mov	r3, r7
 8008f58:	220c      	movs	r2, #12
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	4807      	ldr	r0, [pc, #28]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008f5e:	f7fb fc65 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8008f68:	f7ff f994 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8008f6c:	4803      	ldr	r0, [pc, #12]	; (8008f7c <MX_TIM2_Init+0x118>)
 8008f6e:	f000 fc33 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 8008f72:	bf00      	nop
 8008f74:	3738      	adds	r7, #56	; 0x38
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2000ab9c 	.word	0x2000ab9c

08008f80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08a      	sub	sp, #40	; 0x28
 8008f84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f86:	f107 031c 	add.w	r3, r7, #28
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f92:	463b      	mov	r3, r7
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	609a      	str	r2, [r3, #8]
 8008f9c:	60da      	str	r2, [r3, #12]
 8008f9e:	611a      	str	r2, [r3, #16]
 8008fa0:	615a      	str	r2, [r3, #20]
 8008fa2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008fa4:	4b32      	ldr	r3, [pc, #200]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fa6:	4a33      	ldr	r2, [pc, #204]	; (8009074 <MX_TIM3_Init+0xf4>)
 8008fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8008faa:	4b31      	ldr	r3, [pc, #196]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fac:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8008fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fb2:	4b2f      	ldr	r3, [pc, #188]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8008fb8:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fc6:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008fcc:	4828      	ldr	r0, [pc, #160]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fce:	f7fb fa9d 	bl	800450c <HAL_TIM_PWM_Init>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8008fd8:	f7ff f95c 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008fe4:	f107 031c 	add.w	r3, r7, #28
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4821      	ldr	r0, [pc, #132]	; (8009070 <MX_TIM3_Init+0xf0>)
 8008fec:	f7fc f9d6 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8008ff6:	f7ff f94d 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ffa:	2360      	movs	r3, #96	; 0x60
 8008ffc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009002:	2300      	movs	r3, #0
 8009004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800900a:	463b      	mov	r3, r7
 800900c:	2200      	movs	r2, #0
 800900e:	4619      	mov	r1, r3
 8009010:	4817      	ldr	r0, [pc, #92]	; (8009070 <MX_TIM3_Init+0xf0>)
 8009012:	f7fb fc0b 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800901c:	f7ff f93a 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009020:	463b      	mov	r3, r7
 8009022:	2204      	movs	r2, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4812      	ldr	r0, [pc, #72]	; (8009070 <MX_TIM3_Init+0xf0>)
 8009028:	f7fb fc00 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009032:	f7ff f92f 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009036:	463b      	mov	r3, r7
 8009038:	2208      	movs	r2, #8
 800903a:	4619      	mov	r1, r3
 800903c:	480c      	ldr	r0, [pc, #48]	; (8009070 <MX_TIM3_Init+0xf0>)
 800903e:	f7fb fbf5 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009048:	f7ff f924 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800904c:	463b      	mov	r3, r7
 800904e:	220c      	movs	r2, #12
 8009050:	4619      	mov	r1, r3
 8009052:	4807      	ldr	r0, [pc, #28]	; (8009070 <MX_TIM3_Init+0xf0>)
 8009054:	f7fb fbea 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800905e:	f7ff f919 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009062:	4803      	ldr	r0, [pc, #12]	; (8009070 <MX_TIM3_Init+0xf0>)
 8009064:	f000 fbb8 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 8009068:	bf00      	nop
 800906a:	3728      	adds	r7, #40	; 0x28
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	2000aa9c 	.word	0x2000aa9c
 8009074:	40000400 	.word	0x40000400

08009078 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800907e:	f107 031c 	add.w	r3, r7, #28
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800908a:	463b      	mov	r3, r7
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	609a      	str	r2, [r3, #8]
 8009094:	60da      	str	r2, [r3, #12]
 8009096:	611a      	str	r2, [r3, #16]
 8009098:	615a      	str	r2, [r3, #20]
 800909a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800909c:	4b32      	ldr	r3, [pc, #200]	; (8009168 <MX_TIM4_Init+0xf0>)
 800909e:	4a33      	ldr	r2, [pc, #204]	; (800916c <MX_TIM4_Init+0xf4>)
 80090a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 80090a2:	4b31      	ldr	r3, [pc, #196]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090a4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80090a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090aa:	4b2f      	ldr	r3, [pc, #188]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80090b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090b8:	4b2b      	ldr	r3, [pc, #172]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090be:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80090c4:	4828      	ldr	r0, [pc, #160]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090c6:	f7fb fa21 	bl	800450c <HAL_TIM_PWM_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80090d0:	f7ff f8e0 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80090dc:	f107 031c 	add.w	r3, r7, #28
 80090e0:	4619      	mov	r1, r3
 80090e2:	4821      	ldr	r0, [pc, #132]	; (8009168 <MX_TIM4_Init+0xf0>)
 80090e4:	f7fc f95a 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80090ee:	f7ff f8d1 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80090f2:	2360      	movs	r3, #96	; 0x60
 80090f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009102:	463b      	mov	r3, r7
 8009104:	2200      	movs	r2, #0
 8009106:	4619      	mov	r1, r3
 8009108:	4817      	ldr	r0, [pc, #92]	; (8009168 <MX_TIM4_Init+0xf0>)
 800910a:	f7fb fb8f 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009114:	f7ff f8be 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009118:	463b      	mov	r3, r7
 800911a:	2204      	movs	r2, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4812      	ldr	r0, [pc, #72]	; (8009168 <MX_TIM4_Init+0xf0>)
 8009120:	f7fb fb84 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800912a:	f7ff f8b3 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800912e:	463b      	mov	r3, r7
 8009130:	2208      	movs	r2, #8
 8009132:	4619      	mov	r1, r3
 8009134:	480c      	ldr	r0, [pc, #48]	; (8009168 <MX_TIM4_Init+0xf0>)
 8009136:	f7fb fb79 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009140:	f7ff f8a8 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009144:	463b      	mov	r3, r7
 8009146:	220c      	movs	r2, #12
 8009148:	4619      	mov	r1, r3
 800914a:	4807      	ldr	r0, [pc, #28]	; (8009168 <MX_TIM4_Init+0xf0>)
 800914c:	f7fb fb6e 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009156:	f7ff f89d 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800915a:	4803      	ldr	r0, [pc, #12]	; (8009168 <MX_TIM4_Init+0xf0>)
 800915c:	f000 fb3c 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 8009160:	bf00      	nop
 8009162:	3728      	adds	r7, #40	; 0x28
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	2000aa1c 	.word	0x2000aa1c
 800916c:	40000800 	.word	0x40000800

08009170 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009176:	1d3b      	adds	r3, r7, #4
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009180:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <MX_TIM7_Init+0x64>)
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <MX_TIM7_Init+0x68>)
 8009184:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <MX_TIM7_Init+0x64>)
 8009188:	2200      	movs	r2, #0
 800918a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800918c:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <MX_TIM7_Init+0x64>)
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009192:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <MX_TIM7_Init+0x64>)
 8009194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009198:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <MX_TIM7_Init+0x64>)
 800919c:	2200      	movs	r2, #0
 800919e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80091a0:	480c      	ldr	r0, [pc, #48]	; (80091d4 <MX_TIM7_Init+0x64>)
 80091a2:	f7fb f95d 	bl	8004460 <HAL_TIM_Base_Init>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80091ac:	f7ff f872 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091b0:	2300      	movs	r3, #0
 80091b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80091b8:	1d3b      	adds	r3, r7, #4
 80091ba:	4619      	mov	r1, r3
 80091bc:	4805      	ldr	r0, [pc, #20]	; (80091d4 <MX_TIM7_Init+0x64>)
 80091be:	f7fc f8ed 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80091c8:	f7ff f864 	bl	8008294 <Error_Handler>
  }

}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	2000ac1c 	.word	0x2000ac1c
 80091d8:	40001400 	.word	0x40001400

080091dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b09a      	sub	sp, #104	; 0x68
 80091e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	605a      	str	r2, [r3, #4]
 80091ec:	609a      	str	r2, [r3, #8]
 80091ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	605a      	str	r2, [r3, #4]
 8009206:	609a      	str	r2, [r3, #8]
 8009208:	60da      	str	r2, [r3, #12]
 800920a:	611a      	str	r2, [r3, #16]
 800920c:	615a      	str	r2, [r3, #20]
 800920e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009210:	1d3b      	adds	r3, r7, #4
 8009212:	222c      	movs	r2, #44	; 0x2c
 8009214:	2100      	movs	r1, #0
 8009216:	4618      	mov	r0, r3
 8009218:	f006 fe33 	bl	800fe82 <memset>

  htim8.Instance = TIM8;
 800921c:	4b4a      	ldr	r3, [pc, #296]	; (8009348 <MX_TIM8_Init+0x16c>)
 800921e:	4a4b      	ldr	r2, [pc, #300]	; (800934c <MX_TIM8_Init+0x170>)
 8009220:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009222:	4b49      	ldr	r3, [pc, #292]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009224:	f245 425f 	movw	r2, #21599	; 0x545f
 8009228:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800922a:	4b47      	ldr	r3, [pc, #284]	; (8009348 <MX_TIM8_Init+0x16c>)
 800922c:	2200      	movs	r2, #0
 800922e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009230:	4b45      	ldr	r3, [pc, #276]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009232:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009236:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009238:	4b43      	ldr	r3, [pc, #268]	; (8009348 <MX_TIM8_Init+0x16c>)
 800923a:	2200      	movs	r2, #0
 800923c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800923e:	4b42      	ldr	r3, [pc, #264]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009240:	2200      	movs	r2, #0
 8009242:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009244:	4b40      	ldr	r3, [pc, #256]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009246:	2200      	movs	r2, #0
 8009248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800924a:	483f      	ldr	r0, [pc, #252]	; (8009348 <MX_TIM8_Init+0x16c>)
 800924c:	f7fb f908 	bl	8004460 <HAL_TIM_Base_Init>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009256:	f7ff f81d 	bl	8008294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800925a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800925e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009260:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009264:	4619      	mov	r1, r3
 8009266:	4838      	ldr	r0, [pc, #224]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009268:	f7fb fbf8 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009272:	f7ff f80f 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009276:	4834      	ldr	r0, [pc, #208]	; (8009348 <MX_TIM8_Init+0x16c>)
 8009278:	f7fb f948 	bl	800450c <HAL_TIM_PWM_Init>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009282:	f7ff f807 	bl	8008294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009286:	2300      	movs	r3, #0
 8009288:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800928a:	2300      	movs	r3, #0
 800928c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800928e:	2300      	movs	r3, #0
 8009290:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009296:	4619      	mov	r1, r3
 8009298:	482b      	ldr	r0, [pc, #172]	; (8009348 <MX_TIM8_Init+0x16c>)
 800929a:	f7fc f87f 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80092a4:	f7fe fff6 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80092a8:	2360      	movs	r3, #96	; 0x60
 80092aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80092bc:	2300      	movs	r3, #0
 80092be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80092c0:	2300      	movs	r3, #0
 80092c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092c8:	2200      	movs	r2, #0
 80092ca:	4619      	mov	r1, r3
 80092cc:	481e      	ldr	r0, [pc, #120]	; (8009348 <MX_TIM8_Init+0x16c>)
 80092ce:	f7fb faad 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80092d8:	f7fe ffdc 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80092dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092e0:	2204      	movs	r2, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4818      	ldr	r0, [pc, #96]	; (8009348 <MX_TIM8_Init+0x16c>)
 80092e6:	f7fb faa1 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80092f0:	f7fe ffd0 	bl	8008294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800930c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009312:	2300      	movs	r3, #0
 8009314:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009320:	2300      	movs	r3, #0
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4807      	ldr	r0, [pc, #28]	; (8009348 <MX_TIM8_Init+0x16c>)
 800932a:	f7fc f8c5 	bl	80054b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009334:	f7fe ffae 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <MX_TIM8_Init+0x16c>)
 800933a:	f000 fa4d 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 800933e:	bf00      	nop
 8009340:	3768      	adds	r7, #104	; 0x68
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	2000a9dc 	.word	0x2000a9dc
 800934c:	40010400 	.word	0x40010400

08009350 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08c      	sub	sp, #48	; 0x30
 8009354:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009356:	f107 0320 	add.w	r3, r7, #32
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009364:	1d3b      	adds	r3, r7, #4
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	609a      	str	r2, [r3, #8]
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	611a      	str	r2, [r3, #16]
 8009372:	615a      	str	r2, [r3, #20]
 8009374:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009376:	4b2b      	ldr	r3, [pc, #172]	; (8009424 <MX_TIM9_Init+0xd4>)
 8009378:	4a2b      	ldr	r2, [pc, #172]	; (8009428 <MX_TIM9_Init+0xd8>)
 800937a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 800937c:	4b29      	ldr	r3, [pc, #164]	; (8009424 <MX_TIM9_Init+0xd4>)
 800937e:	f245 425f 	movw	r2, #21599	; 0x545f
 8009382:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009384:	4b27      	ldr	r3, [pc, #156]	; (8009424 <MX_TIM9_Init+0xd4>)
 8009386:	2200      	movs	r2, #0
 8009388:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800938a:	4b26      	ldr	r3, [pc, #152]	; (8009424 <MX_TIM9_Init+0xd4>)
 800938c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009390:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <MX_TIM9_Init+0xd4>)
 8009394:	2200      	movs	r2, #0
 8009396:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009398:	4b22      	ldr	r3, [pc, #136]	; (8009424 <MX_TIM9_Init+0xd4>)
 800939a:	2200      	movs	r2, #0
 800939c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800939e:	4821      	ldr	r0, [pc, #132]	; (8009424 <MX_TIM9_Init+0xd4>)
 80093a0:	f7fb f85e 	bl	8004460 <HAL_TIM_Base_Init>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80093aa:	f7fe ff73 	bl	8008294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80093b4:	f107 0320 	add.w	r3, r7, #32
 80093b8:	4619      	mov	r1, r3
 80093ba:	481a      	ldr	r0, [pc, #104]	; (8009424 <MX_TIM9_Init+0xd4>)
 80093bc:	f7fb fb4e 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 80093c6:	f7fe ff65 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80093ca:	4816      	ldr	r0, [pc, #88]	; (8009424 <MX_TIM9_Init+0xd4>)
 80093cc:	f7fb f89e 	bl	800450c <HAL_TIM_PWM_Init>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80093d6:	f7fe ff5d 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093da:	2360      	movs	r3, #96	; 0x60
 80093dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80093ea:	1d3b      	adds	r3, r7, #4
 80093ec:	2200      	movs	r2, #0
 80093ee:	4619      	mov	r1, r3
 80093f0:	480c      	ldr	r0, [pc, #48]	; (8009424 <MX_TIM9_Init+0xd4>)
 80093f2:	f7fb fa1b 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80093fc:	f7fe ff4a 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009400:	1d3b      	adds	r3, r7, #4
 8009402:	2204      	movs	r2, #4
 8009404:	4619      	mov	r1, r3
 8009406:	4807      	ldr	r0, [pc, #28]	; (8009424 <MX_TIM9_Init+0xd4>)
 8009408:	f7fb fa10 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009412:	f7fe ff3f 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8009416:	4803      	ldr	r0, [pc, #12]	; (8009424 <MX_TIM9_Init+0xd4>)
 8009418:	f000 f9de 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 800941c:	bf00      	nop
 800941e:	3730      	adds	r7, #48	; 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	2000ab5c 	.word	0x2000ab5c
 8009428:	40014000 	.word	0x40014000

0800942c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	611a      	str	r2, [r3, #16]
 8009440:	615a      	str	r2, [r3, #20]
 8009442:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8009444:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <MX_TIM10_Init+0x94>)
 8009446:	4a1f      	ldr	r2, [pc, #124]	; (80094c4 <MX_TIM10_Init+0x98>)
 8009448:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <MX_TIM10_Init+0x94>)
 800944c:	f245 425f 	movw	r2, #21599	; 0x545f
 8009450:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009452:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <MX_TIM10_Init+0x94>)
 8009454:	2200      	movs	r2, #0
 8009456:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009458:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <MX_TIM10_Init+0x94>)
 800945a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800945e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009460:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <MX_TIM10_Init+0x94>)
 8009462:	2200      	movs	r2, #0
 8009464:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009466:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <MX_TIM10_Init+0x94>)
 8009468:	2200      	movs	r2, #0
 800946a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800946c:	4814      	ldr	r0, [pc, #80]	; (80094c0 <MX_TIM10_Init+0x94>)
 800946e:	f7fa fff7 	bl	8004460 <HAL_TIM_Base_Init>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8009478:	f7fe ff0c 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800947c:	4810      	ldr	r0, [pc, #64]	; (80094c0 <MX_TIM10_Init+0x94>)
 800947e:	f7fb f845 	bl	800450c <HAL_TIM_PWM_Init>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8009488:	f7fe ff04 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800948c:	2360      	movs	r3, #96	; 0x60
 800948e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800949c:	1d3b      	adds	r3, r7, #4
 800949e:	2200      	movs	r2, #0
 80094a0:	4619      	mov	r1, r3
 80094a2:	4807      	ldr	r0, [pc, #28]	; (80094c0 <MX_TIM10_Init+0x94>)
 80094a4:	f7fb f9c2 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80094ae:	f7fe fef1 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 80094b2:	4803      	ldr	r0, [pc, #12]	; (80094c0 <MX_TIM10_Init+0x94>)
 80094b4:	f000 f990 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 80094b8:	bf00      	nop
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	2000aa5c 	.word	0x2000aa5c
 80094c4:	40014400 	.word	0x40014400

080094c8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	609a      	str	r2, [r3, #8]
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	611a      	str	r2, [r3, #16]
 80094dc:	615a      	str	r2, [r3, #20]
 80094de:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80094e0:	4b1e      	ldr	r3, [pc, #120]	; (800955c <MX_TIM11_Init+0x94>)
 80094e2:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <MX_TIM11_Init+0x98>)
 80094e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 80094e6:	4b1d      	ldr	r3, [pc, #116]	; (800955c <MX_TIM11_Init+0x94>)
 80094e8:	f245 425f 	movw	r2, #21599	; 0x545f
 80094ec:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ee:	4b1b      	ldr	r3, [pc, #108]	; (800955c <MX_TIM11_Init+0x94>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80094f4:	4b19      	ldr	r3, [pc, #100]	; (800955c <MX_TIM11_Init+0x94>)
 80094f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80094fa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094fc:	4b17      	ldr	r3, [pc, #92]	; (800955c <MX_TIM11_Init+0x94>)
 80094fe:	2200      	movs	r2, #0
 8009500:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009502:	4b16      	ldr	r3, [pc, #88]	; (800955c <MX_TIM11_Init+0x94>)
 8009504:	2200      	movs	r2, #0
 8009506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009508:	4814      	ldr	r0, [pc, #80]	; (800955c <MX_TIM11_Init+0x94>)
 800950a:	f7fa ffa9 	bl	8004460 <HAL_TIM_Base_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8009514:	f7fe febe 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009518:	4810      	ldr	r0, [pc, #64]	; (800955c <MX_TIM11_Init+0x94>)
 800951a:	f7fa fff7 	bl	800450c <HAL_TIM_PWM_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8009524:	f7fe feb6 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009528:	2360      	movs	r3, #96	; 0x60
 800952a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009538:	1d3b      	adds	r3, r7, #4
 800953a:	2200      	movs	r2, #0
 800953c:	4619      	mov	r1, r3
 800953e:	4807      	ldr	r0, [pc, #28]	; (800955c <MX_TIM11_Init+0x94>)
 8009540:	f7fb f974 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800954a:	f7fe fea3 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800954e:	4803      	ldr	r0, [pc, #12]	; (800955c <MX_TIM11_Init+0x94>)
 8009550:	f000 f942 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 8009554:	bf00      	nop
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	2000aadc 	.word	0x2000aadc
 8009560:	40014800 	.word	0x40014800

08009564 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800956a:	1d3b      	adds	r3, r7, #4
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	605a      	str	r2, [r3, #4]
 8009572:	609a      	str	r2, [r3, #8]
 8009574:	60da      	str	r2, [r3, #12]
 8009576:	611a      	str	r2, [r3, #16]
 8009578:	615a      	str	r2, [r3, #20]
 800957a:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800957c:	4b1e      	ldr	r3, [pc, #120]	; (80095f8 <MX_TIM14_Init+0x94>)
 800957e:	4a1f      	ldr	r2, [pc, #124]	; (80095fc <MX_TIM14_Init+0x98>)
 8009580:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <MX_TIM14_Init+0x94>)
 8009584:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009588:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800958a:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <MX_TIM14_Init+0x94>)
 800958c:	2200      	movs	r2, #0
 800958e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8009590:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <MX_TIM14_Init+0x94>)
 8009592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009596:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009598:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <MX_TIM14_Init+0x94>)
 800959a:	2200      	movs	r2, #0
 800959c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800959e:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <MX_TIM14_Init+0x94>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80095a4:	4814      	ldr	r0, [pc, #80]	; (80095f8 <MX_TIM14_Init+0x94>)
 80095a6:	f7fa ff5b 	bl	8004460 <HAL_TIM_Base_Init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80095b0:	f7fe fe70 	bl	8008294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80095b4:	4810      	ldr	r0, [pc, #64]	; (80095f8 <MX_TIM14_Init+0x94>)
 80095b6:	f7fa ffa9 	bl	800450c <HAL_TIM_PWM_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80095c0:	f7fe fe68 	bl	8008294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095c4:	2360      	movs	r3, #96	; 0x60
 80095c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095d4:	1d3b      	adds	r3, r7, #4
 80095d6:	2200      	movs	r2, #0
 80095d8:	4619      	mov	r1, r3
 80095da:	4807      	ldr	r0, [pc, #28]	; (80095f8 <MX_TIM14_Init+0x94>)
 80095dc:	f7fb f926 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80095e6:	f7fe fe55 	bl	8008294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 80095ea:	4803      	ldr	r0, [pc, #12]	; (80095f8 <MX_TIM14_Init+0x94>)
 80095ec:	f000 f8f4 	bl	80097d8 <HAL_TIM_MspPostInit>

}
 80095f0:	bf00      	nop
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	2000abdc 	.word	0x2000abdc
 80095fc:	40002000 	.word	0x40002000

08009600 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a50      	ldr	r2, [pc, #320]	; (8009750 <HAL_TIM_Base_MspInit+0x150>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d114      	bne.n	800963c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009612:	4b50      	ldr	r3, [pc, #320]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	4a4f      	ldr	r2, [pc, #316]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009618:	f043 0301 	orr.w	r3, r3, #1
 800961c:	6453      	str	r3, [r2, #68]	; 0x44
 800961e:	4b4d      	ldr	r3, [pc, #308]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800962a:	2200      	movs	r2, #0
 800962c:	2105      	movs	r1, #5
 800962e:	2019      	movs	r0, #25
 8009630:	f7f8 f92a 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009634:	2019      	movs	r0, #25
 8009636:	f7f8 f943 	bl	80018c0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800963a:	e084      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009644:	d10c      	bne.n	8009660 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009646:	4b43      	ldr	r3, [pc, #268]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	4a42      	ldr	r2, [pc, #264]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	6413      	str	r3, [r2, #64]	; 0x40
 8009652:	4b40      	ldr	r3, [pc, #256]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	623b      	str	r3, [r7, #32]
 800965c:	6a3b      	ldr	r3, [r7, #32]
}
 800965e:	e072      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a3c      	ldr	r2, [pc, #240]	; (8009758 <HAL_TIM_Base_MspInit+0x158>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d10c      	bne.n	8009684 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800966a:	4b3a      	ldr	r3, [pc, #232]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	4a39      	ldr	r2, [pc, #228]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009670:	f043 0320 	orr.w	r3, r3, #32
 8009674:	6413      	str	r3, [r2, #64]	; 0x40
 8009676:	4b37      	ldr	r3, [pc, #220]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	69fb      	ldr	r3, [r7, #28]
}
 8009682:	e060      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a34      	ldr	r2, [pc, #208]	; (800975c <HAL_TIM_Base_MspInit+0x15c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d10c      	bne.n	80096a8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800968e:	4b31      	ldr	r3, [pc, #196]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009692:	4a30      	ldr	r2, [pc, #192]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	6453      	str	r3, [r2, #68]	; 0x44
 800969a:	4b2e      	ldr	r3, [pc, #184]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	61bb      	str	r3, [r7, #24]
 80096a4:	69bb      	ldr	r3, [r7, #24]
}
 80096a6:	e04e      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a2c      	ldr	r2, [pc, #176]	; (8009760 <HAL_TIM_Base_MspInit+0x160>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10c      	bne.n	80096cc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80096b2:	4b28      	ldr	r3, [pc, #160]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	4a27      	ldr	r2, [pc, #156]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096bc:	6453      	str	r3, [r2, #68]	; 0x44
 80096be:	4b25      	ldr	r3, [pc, #148]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]
}
 80096ca:	e03c      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a24      	ldr	r2, [pc, #144]	; (8009764 <HAL_TIM_Base_MspInit+0x164>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d114      	bne.n	8009700 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80096d6:	4b1f      	ldr	r3, [pc, #124]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096da:	4a1e      	ldr	r2, [pc, #120]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096e0:	6453      	str	r3, [r2, #68]	; 0x44
 80096e2:	4b1c      	ldr	r3, [pc, #112]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 80096e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80096ee:	2200      	movs	r2, #0
 80096f0:	2105      	movs	r1, #5
 80096f2:	2019      	movs	r0, #25
 80096f4:	f7f8 f8c8 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80096f8:	2019      	movs	r0, #25
 80096fa:	f7f8 f8e1 	bl	80018c0 <HAL_NVIC_EnableIRQ>
}
 80096fe:	e022      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a18      	ldr	r2, [pc, #96]	; (8009768 <HAL_TIM_Base_MspInit+0x168>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d10c      	bne.n	8009724 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800970a:	4b12      	ldr	r3, [pc, #72]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 800970c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970e:	4a11      	ldr	r2, [pc, #68]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009714:	6453      	str	r3, [r2, #68]	; 0x44
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
}
 8009722:	e010      	b.n	8009746 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a10      	ldr	r2, [pc, #64]	; (800976c <HAL_TIM_Base_MspInit+0x16c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d10b      	bne.n	8009746 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	4a08      	ldr	r2, [pc, #32]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 8009734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009738:	6413      	str	r3, [r2, #64]	; 0x40
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <HAL_TIM_Base_MspInit+0x154>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009742:	60bb      	str	r3, [r7, #8]
 8009744:	68bb      	ldr	r3, [r7, #8]
}
 8009746:	bf00      	nop
 8009748:	3728      	adds	r7, #40	; 0x28
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	40010000 	.word	0x40010000
 8009754:	40023800 	.word	0x40023800
 8009758:	40001400 	.word	0x40001400
 800975c:	40010400 	.word	0x40010400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800
 800976c:	40002000 	.word	0x40002000

08009770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a13      	ldr	r2, [pc, #76]	; (80097cc <HAL_TIM_PWM_MspInit+0x5c>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d10c      	bne.n	800979c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009782:	4b13      	ldr	r3, [pc, #76]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	4a12      	ldr	r2, [pc, #72]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009788:	f043 0302 	orr.w	r3, r3, #2
 800978c:	6413      	str	r3, [r2, #64]	; 0x40
 800978e:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800979a:	e010      	b.n	80097be <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a0c      	ldr	r2, [pc, #48]	; (80097d4 <HAL_TIM_PWM_MspInit+0x64>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d10b      	bne.n	80097be <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 80097ac:	f043 0304 	orr.w	r3, r3, #4
 80097b0:	6413      	str	r3, [r2, #64]	; 0x40
 80097b2:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <HAL_TIM_PWM_MspInit+0x60>)
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	60bb      	str	r3, [r7, #8]
 80097bc:	68bb      	ldr	r3, [r7, #8]
}
 80097be:	bf00      	nop
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40000400 	.word	0x40000400
 80097d0:	40023800 	.word	0x40023800
 80097d4:	40000800 	.word	0x40000800

080097d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b092      	sub	sp, #72	; 0x48
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	60da      	str	r2, [r3, #12]
 80097ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4aa5      	ldr	r2, [pc, #660]	; (8009a8c <HAL_TIM_MspPostInit+0x2b4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d11d      	bne.n	8009836 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80097fa:	4ba5      	ldr	r3, [pc, #660]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	4aa4      	ldr	r2, [pc, #656]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009800:	f043 0310 	orr.w	r3, r3, #16
 8009804:	6313      	str	r3, [r2, #48]	; 0x30
 8009806:	4ba2      	ldr	r3, [pc, #648]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	633b      	str	r3, [r7, #48]	; 0x30
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 8009812:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009818:	2302      	movs	r3, #2
 800981a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981c:	2300      	movs	r3, #0
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009820:	2300      	movs	r3, #0
 8009822:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009824:	2301      	movs	r3, #1
 8009826:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800982c:	4619      	mov	r1, r3
 800982e:	4899      	ldr	r0, [pc, #612]	; (8009a94 <HAL_TIM_MspPostInit+0x2bc>)
 8009830:	f7f8 fc5c 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8009834:	e168      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983e:	d13a      	bne.n	80098b6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009840:	4b93      	ldr	r3, [pc, #588]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	4a92      	ldr	r2, [pc, #584]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009846:	f043 0302 	orr.w	r3, r3, #2
 800984a:	6313      	str	r3, [r2, #48]	; 0x30
 800984c:	4b90      	ldr	r3, [pc, #576]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009858:	4b8d      	ldr	r3, [pc, #564]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	4a8c      	ldr	r2, [pc, #560]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	6313      	str	r3, [r2, #48]	; 0x30
 8009864:	4b8a      	ldr	r3, [pc, #552]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	62bb      	str	r3, [r7, #40]	; 0x28
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 8009870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009876:	2302      	movs	r3, #2
 8009878:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800987e:	2300      	movs	r3, #0
 8009880:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009882:	2301      	movs	r3, #1
 8009884:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800988a:	4619      	mov	r1, r3
 800988c:	4882      	ldr	r0, [pc, #520]	; (8009a98 <HAL_TIM_MspPostInit+0x2c0>)
 800988e:	f7f8 fc2d 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 8009892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009898:	2302      	movs	r3, #2
 800989a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989c:	2300      	movs	r3, #0
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098a0:	2300      	movs	r3, #0
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80098a4:	2301      	movs	r3, #1
 80098a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 80098a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098ac:	4619      	mov	r1, r3
 80098ae:	487b      	ldr	r0, [pc, #492]	; (8009a9c <HAL_TIM_MspPostInit+0x2c4>)
 80098b0:	f7f8 fc1c 	bl	80020ec <HAL_GPIO_Init>
}
 80098b4:	e128      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a79      	ldr	r2, [pc, #484]	; (8009aa0 <HAL_TIM_MspPostInit+0x2c8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d139      	bne.n	8009934 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098c0:	4b73      	ldr	r3, [pc, #460]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c4:	4a72      	ldr	r2, [pc, #456]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098c6:	f043 0304 	orr.w	r3, r3, #4
 80098ca:	6313      	str	r3, [r2, #48]	; 0x30
 80098cc:	4b70      	ldr	r3, [pc, #448]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098d8:	4b6d      	ldr	r3, [pc, #436]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	4a6c      	ldr	r2, [pc, #432]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098de:	f043 0302 	orr.w	r3, r3, #2
 80098e2:	6313      	str	r3, [r2, #48]	; 0x30
 80098e4:	4b6a      	ldr	r3, [pc, #424]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	623b      	str	r3, [r7, #32]
 80098ee:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 80098f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f6:	2302      	movs	r3, #2
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098fe:	2300      	movs	r3, #0
 8009900:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009902:	2302      	movs	r3, #2
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009906:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800990a:	4619      	mov	r1, r3
 800990c:	4865      	ldr	r0, [pc, #404]	; (8009aa4 <HAL_TIM_MspPostInit+0x2cc>)
 800990e:	f7f8 fbed 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 8009912:	2330      	movs	r3, #48	; 0x30
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009916:	2302      	movs	r3, #2
 8009918:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800991a:	2300      	movs	r3, #0
 800991c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800991e:	2300      	movs	r3, #0
 8009920:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009922:	2302      	movs	r3, #2
 8009924:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800992a:	4619      	mov	r1, r3
 800992c:	485a      	ldr	r0, [pc, #360]	; (8009a98 <HAL_TIM_MspPostInit+0x2c0>)
 800992e:	f7f8 fbdd 	bl	80020ec <HAL_GPIO_Init>
}
 8009932:	e0e9      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a5b      	ldr	r2, [pc, #364]	; (8009aa8 <HAL_TIM_MspPostInit+0x2d0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d11d      	bne.n	800997a <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800993e:	4b54      	ldr	r3, [pc, #336]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	4a53      	ldr	r2, [pc, #332]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	6313      	str	r3, [r2, #48]	; 0x30
 800994a:	4b51      	ldr	r3, [pc, #324]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	f003 0308 	and.w	r3, r3, #8
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 8009956:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800995a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800995c:	2302      	movs	r3, #2
 800995e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009964:	2300      	movs	r3, #0
 8009966:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009968:	2302      	movs	r3, #2
 800996a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800996c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009970:	4619      	mov	r1, r3
 8009972:	484e      	ldr	r0, [pc, #312]	; (8009aac <HAL_TIM_MspPostInit+0x2d4>)
 8009974:	f7f8 fbba 	bl	80020ec <HAL_GPIO_Init>
}
 8009978:	e0c6      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a4c      	ldr	r2, [pc, #304]	; (8009ab0 <HAL_TIM_MspPostInit+0x2d8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d11c      	bne.n	80099be <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009984:	4b42      	ldr	r3, [pc, #264]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009988:	4a41      	ldr	r2, [pc, #260]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 800998a:	f043 0304 	orr.w	r3, r3, #4
 800998e:	6313      	str	r3, [r2, #48]	; 0x30
 8009990:	4b3f      	ldr	r3, [pc, #252]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800999c:	23c0      	movs	r3, #192	; 0xc0
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a0:	2302      	movs	r3, #2
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099a8:	2300      	movs	r3, #0
 80099aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80099ac:	2303      	movs	r3, #3
 80099ae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80099b4:	4619      	mov	r1, r3
 80099b6:	483b      	ldr	r0, [pc, #236]	; (8009aa4 <HAL_TIM_MspPostInit+0x2cc>)
 80099b8:	f7f8 fb98 	bl	80020ec <HAL_GPIO_Init>
}
 80099bc:	e0a4      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a3c      	ldr	r2, [pc, #240]	; (8009ab4 <HAL_TIM_MspPostInit+0x2dc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d11c      	bne.n	8009a02 <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80099c8:	4b31      	ldr	r3, [pc, #196]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80099ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099cc:	4a30      	ldr	r2, [pc, #192]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80099ce:	f043 0310 	orr.w	r3, r3, #16
 80099d2:	6313      	str	r3, [r2, #48]	; 0x30
 80099d4:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	f003 0310 	and.w	r3, r3, #16
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 80099e0:	2360      	movs	r3, #96	; 0x60
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099e4:	2302      	movs	r3, #2
 80099e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099ec:	2300      	movs	r3, #0
 80099ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80099f0:	2303      	movs	r3, #3
 80099f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80099f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80099f8:	4619      	mov	r1, r3
 80099fa:	4826      	ldr	r0, [pc, #152]	; (8009a94 <HAL_TIM_MspPostInit+0x2bc>)
 80099fc:	f7f8 fb76 	bl	80020ec <HAL_GPIO_Init>
}
 8009a00:	e082      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a2c      	ldr	r2, [pc, #176]	; (8009ab8 <HAL_TIM_MspPostInit+0x2e0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d11c      	bne.n	8009a46 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a0c:	4b20      	ldr	r3, [pc, #128]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a10:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a12:	f043 0320 	orr.w	r3, r3, #32
 8009a16:	6313      	str	r3, [r2, #48]	; 0x30
 8009a18:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a30:	2300      	movs	r3, #0
 8009a32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8009a34:	2303      	movs	r3, #3
 8009a36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 8009a38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	481f      	ldr	r0, [pc, #124]	; (8009abc <HAL_TIM_MspPostInit+0x2e4>)
 8009a40:	f7f8 fb54 	bl	80020ec <HAL_GPIO_Init>
}
 8009a44:	e060      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <HAL_TIM_MspPostInit+0x2e8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d139      	bne.n	8009ac4 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a50:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	4a0e      	ldr	r2, [pc, #56]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a56:	f043 0320 	orr.w	r3, r3, #32
 8009a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <HAL_TIM_MspPostInit+0x2b8>)
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a74:	2300      	movs	r3, #0
 8009a76:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 8009a7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a80:	4619      	mov	r1, r3
 8009a82:	480e      	ldr	r0, [pc, #56]	; (8009abc <HAL_TIM_MspPostInit+0x2e4>)
 8009a84:	f7f8 fb32 	bl	80020ec <HAL_GPIO_Init>
}
 8009a88:	e03e      	b.n	8009b08 <HAL_TIM_MspPostInit+0x330>
 8009a8a:	bf00      	nop
 8009a8c:	40010000 	.word	0x40010000
 8009a90:	40023800 	.word	0x40023800
 8009a94:	40021000 	.word	0x40021000
 8009a98:	40020400 	.word	0x40020400
 8009a9c:	40020000 	.word	0x40020000
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40020800 	.word	0x40020800
 8009aa8:	40000800 	.word	0x40000800
 8009aac:	40020c00 	.word	0x40020c00
 8009ab0:	40010400 	.word	0x40010400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40021400 	.word	0x40021400
 8009ac0:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a11      	ldr	r2, [pc, #68]	; (8009b10 <HAL_TIM_MspPostInit+0x338>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d11c      	bne.n	8009b08 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <HAL_TIM_MspPostInit+0x33c>)
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <HAL_TIM_MspPostInit+0x33c>)
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8009ada:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <HAL_TIM_MspPostInit+0x33c>)
 8009adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	60bb      	str	r3, [r7, #8]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 8009ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aec:	2302      	movs	r3, #2
 8009aee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af4:	2300      	movs	r3, #0
 8009af6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009af8:	2309      	movs	r3, #9
 8009afa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 8009afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b00:	4619      	mov	r1, r3
 8009b02:	4805      	ldr	r0, [pc, #20]	; (8009b18 <HAL_TIM_MspPostInit+0x340>)
 8009b04:	f7f8 faf2 	bl	80020ec <HAL_GPIO_Init>
}
 8009b08:	bf00      	nop
 8009b0a:	3748      	adds	r7, #72	; 0x48
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40002000 	.word	0x40002000
 8009b14:	40023800 	.word	0x40023800
 8009b18:	40021400 	.word	0x40021400

08009b1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009b20:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b22:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <MX_USART1_UART_Init+0x5c>)
 8009b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8009b26:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b28:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8009b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b2e:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b34:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009b40:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b42:	220c      	movs	r2, #12
 8009b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009b52:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009b5e:	4805      	ldr	r0, [pc, #20]	; (8009b74 <MX_USART1_UART_Init+0x58>)
 8009b60:	f7fb fd46 	bl	80055f0 <HAL_UART_Init>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009b6a:	f7fe fb93 	bl	8008294 <Error_Handler>
  }

}
 8009b6e:	bf00      	nop
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	2000ae5c 	.word	0x2000ae5c
 8009b78:	40011000 	.word	0x40011000

08009b7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009b80:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009b82:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <MX_USART2_UART_Init+0x5c>)
 8009b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009b9a:	4b0e      	ldr	r3, [pc, #56]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009ba2:	220c      	movs	r2, #12
 8009ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009bb2:	4b08      	ldr	r3, [pc, #32]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009bb8:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bbe:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <MX_USART2_UART_Init+0x58>)
 8009bc0:	f7fb fd16 	bl	80055f0 <HAL_UART_Init>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009bca:	f7fe fb63 	bl	8008294 <Error_Handler>
  }

}
 8009bce:	bf00      	nop
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000aedc 	.word	0x2000aedc
 8009bd8:	40004400 	.word	0x40004400

08009bdc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8009be0:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <MX_USART3_UART_Init+0x5c>)
 8009be4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8009be6:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009be8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8009bec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009bee:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009bf4:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c02:	220c      	movs	r2, #12
 8009c04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009c12:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <MX_USART3_UART_Init+0x58>)
 8009c20:	f7fb fce6 	bl	80055f0 <HAL_UART_Init>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8009c2a:	f7fe fb33 	bl	8008294 <Error_Handler>
  }

}
 8009c2e:	bf00      	nop
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	2000acbc 	.word	0x2000acbc
 8009c38:	40004800 	.word	0x40004800

08009c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08e      	sub	sp, #56	; 0x38
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	609a      	str	r2, [r3, #8]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a64      	ldr	r2, [pc, #400]	; (8009dec <HAL_UART_MspInit+0x1b0>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	f040 8097 	bne.w	8009d8e <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009c60:	4b63      	ldr	r3, [pc, #396]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c64:	4a62      	ldr	r2, [pc, #392]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c66:	f043 0310 	orr.w	r3, r3, #16
 8009c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8009c6c:	4b60      	ldr	r3, [pc, #384]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	623b      	str	r3, [r7, #32]
 8009c76:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c78:	4b5d      	ldr	r3, [pc, #372]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7c:	4a5c      	ldr	r2, [pc, #368]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	6313      	str	r3, [r2, #48]	; 0x30
 8009c84:	4b5a      	ldr	r3, [pc, #360]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c96:	2302      	movs	r3, #2
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009caa:	4619      	mov	r1, r3
 8009cac:	4851      	ldr	r0, [pc, #324]	; (8009df4 <HAL_UART_MspInit+0x1b8>)
 8009cae:	f7f8 fa1d 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009cc2:	2307      	movs	r3, #7
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4849      	ldr	r0, [pc, #292]	; (8009df4 <HAL_UART_MspInit+0x1b8>)
 8009cce:	f7f8 fa0d 	bl	80020ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8009cd2:	4b49      	ldr	r3, [pc, #292]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009cd4:	4a49      	ldr	r2, [pc, #292]	; (8009dfc <HAL_UART_MspInit+0x1c0>)
 8009cd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009cd8:	4b47      	ldr	r3, [pc, #284]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cde:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ce0:	4b45      	ldr	r3, [pc, #276]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ce6:	4b44      	ldr	r3, [pc, #272]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009cec:	4b42      	ldr	r3, [pc, #264]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cf2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009cf4:	4b40      	ldr	r3, [pc, #256]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009cfa:	4b3f      	ldr	r3, [pc, #252]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009d00:	4b3d      	ldr	r3, [pc, #244]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d08:	4b3b      	ldr	r3, [pc, #236]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d0e:	4b3a      	ldr	r3, [pc, #232]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009d14:	4838      	ldr	r0, [pc, #224]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d16:	f7f7 fde1 	bl	80018dc <HAL_DMA_Init>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8009d20:	f7fe fab8 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a34      	ldr	r2, [pc, #208]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d2a:	4a33      	ldr	r2, [pc, #204]	; (8009df8 <HAL_UART_MspInit+0x1bc>)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009d30:	4b33      	ldr	r3, [pc, #204]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d32:	4a34      	ldr	r2, [pc, #208]	; (8009e04 <HAL_UART_MspInit+0x1c8>)
 8009d34:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009d36:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d3e:	4b30      	ldr	r3, [pc, #192]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d40:	2240      	movs	r2, #64	; 0x40
 8009d42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d44:	4b2e      	ldr	r3, [pc, #184]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009d4a:	4b2d      	ldr	r3, [pc, #180]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d58:	4b29      	ldr	r3, [pc, #164]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009d64:	4b26      	ldr	r3, [pc, #152]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d6a:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009d70:	4823      	ldr	r0, [pc, #140]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d72:	f7f7 fdb3 	bl	80018dc <HAL_DMA_Init>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8009d7c:	f7fe fa8a 	bl	8008294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d84:	669a      	str	r2, [r3, #104]	; 0x68
 8009d86:	4a1e      	ldr	r2, [pc, #120]	; (8009e00 <HAL_UART_MspInit+0x1c4>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009d8c:	e0d5      	b.n	8009f3a <HAL_UART_MspInit+0x2fe>
  else if(uartHandle->Instance==USART2)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a1d      	ldr	r2, [pc, #116]	; (8009e08 <HAL_UART_MspInit+0x1cc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d13b      	bne.n	8009e10 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009d98:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da2:	6413      	str	r3, [r2, #64]	; 0x40
 8009da4:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009db0:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	4a0e      	ldr	r2, [pc, #56]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009db6:	f043 0308 	orr.w	r3, r3, #8
 8009dba:	6313      	str	r3, [r2, #48]	; 0x30
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <HAL_UART_MspInit+0x1b4>)
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc0:	f003 0308 	and.w	r3, r3, #8
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009dc8:	2360      	movs	r3, #96	; 0x60
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009dd8:	2307      	movs	r3, #7
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de0:	4619      	mov	r1, r3
 8009de2:	480a      	ldr	r0, [pc, #40]	; (8009e0c <HAL_UART_MspInit+0x1d0>)
 8009de4:	f7f8 f982 	bl	80020ec <HAL_GPIO_Init>
}
 8009de8:	e0a7      	b.n	8009f3a <HAL_UART_MspInit+0x2fe>
 8009dea:	bf00      	nop
 8009dec:	40011000 	.word	0x40011000
 8009df0:	40023800 	.word	0x40023800
 8009df4:	40020400 	.word	0x40020400
 8009df8:	2000adfc 	.word	0x2000adfc
 8009dfc:	40026488 	.word	0x40026488
 8009e00:	2000ad9c 	.word	0x2000ad9c
 8009e04:	400264b8 	.word	0x400264b8
 8009e08:	40004400 	.word	0x40004400
 8009e0c:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a4b      	ldr	r2, [pc, #300]	; (8009f44 <HAL_UART_MspInit+0x308>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	f040 808f 	bne.w	8009f3a <HAL_UART_MspInit+0x2fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009e1c:	4b4a      	ldr	r3, [pc, #296]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e20:	4a49      	ldr	r2, [pc, #292]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e26:	6413      	str	r3, [r2, #64]	; 0x40
 8009e28:	4b47      	ldr	r3, [pc, #284]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e34:	4b44      	ldr	r3, [pc, #272]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e38:	4a43      	ldr	r2, [pc, #268]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e3a:	f043 0308 	orr.w	r3, r3, #8
 8009e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8009e40:	4b41      	ldr	r3, [pc, #260]	; (8009f48 <HAL_UART_MspInit+0x30c>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e52:	2302      	movs	r3, #2
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009e56:	2302      	movs	r3, #2
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009e5e:	2307      	movs	r3, #7
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e66:	4619      	mov	r1, r3
 8009e68:	4838      	ldr	r0, [pc, #224]	; (8009f4c <HAL_UART_MspInit+0x310>)
 8009e6a:	f7f8 f93f 	bl	80020ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8009e6e:	4b38      	ldr	r3, [pc, #224]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e70:	4a38      	ldr	r2, [pc, #224]	; (8009f54 <HAL_UART_MspInit+0x318>)
 8009e72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8009e74:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e7a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e7c:	4b34      	ldr	r3, [pc, #208]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e82:	4b33      	ldr	r3, [pc, #204]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e88:	4b31      	ldr	r3, [pc, #196]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e90:	4b2f      	ldr	r3, [pc, #188]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e96:	4b2e      	ldr	r3, [pc, #184]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8009e9c:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009ea2:	4b2b      	ldr	r3, [pc, #172]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ea8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009eaa:	4b29      	ldr	r3, [pc, #164]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009eb0:	4827      	ldr	r0, [pc, #156]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009eb2:	f7f7 fd13 	bl	80018dc <HAL_DMA_Init>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8009ebc:	f7fe f9ea 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a23      	ldr	r2, [pc, #140]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009ec4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ec6:	4a22      	ldr	r2, [pc, #136]	; (8009f50 <HAL_UART_MspInit+0x314>)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8009ecc:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ece:	4a23      	ldr	r2, [pc, #140]	; (8009f5c <HAL_UART_MspInit+0x320>)
 8009ed0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8009ed2:	4b21      	ldr	r3, [pc, #132]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ed4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8009ed8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009eda:	4b1f      	ldr	r3, [pc, #124]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009edc:	2240      	movs	r2, #64	; 0x40
 8009ede:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ee0:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009eee:	4b1a      	ldr	r3, [pc, #104]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009efa:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009f00:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009f06:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009f0e:	4812      	ldr	r0, [pc, #72]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009f10:	f7f7 fce4 	bl	80018dc <HAL_DMA_Init>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <HAL_UART_MspInit+0x2e2>
      Error_Handler();
 8009f1a:	f7fe f9bb 	bl	8008294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a0d      	ldr	r2, [pc, #52]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009f22:	669a      	str	r2, [r3, #104]	; 0x68
 8009f24:	4a0c      	ldr	r2, [pc, #48]	; (8009f58 <HAL_UART_MspInit+0x31c>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2105      	movs	r1, #5
 8009f2e:	2027      	movs	r0, #39	; 0x27
 8009f30:	f7f7 fcaa 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009f34:	2027      	movs	r0, #39	; 0x27
 8009f36:	f7f7 fcc3 	bl	80018c0 <HAL_NVIC_EnableIRQ>
}
 8009f3a:	bf00      	nop
 8009f3c:	3738      	adds	r7, #56	; 0x38
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	40004800 	.word	0x40004800
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	40020c00 	.word	0x40020c00
 8009f50:	2000ac5c 	.word	0x2000ac5c
 8009f54:	40026028 	.word	0x40026028
 8009f58:	2000ad3c 	.word	0x2000ad3c
 8009f5c:	40026070 	.word	0x40026070

08009f60 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 f8eb 	bl	800b14c <DigitalWrite>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 f8dc 	bl	800b14c <DigitalWrite>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009faa:	2100      	movs	r1, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 f8cd 	bl	800b14c <DigitalWrite>
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 f8be 	bl	800b14c <DigitalWrite>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f8af 	bl	800b14c <DigitalWrite>
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a004:	2101      	movs	r1, #1
 800a006:	4618      	mov	r0, r3
 800a008:	f001 f8a0 	bl	800b14c <DigitalWrite>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ffb9 	bl	8009f9c <AD_CONV_LOW>
	delay_ns(200);
 800a02a:	20c8      	movs	r0, #200	; 0xc8
 800a02c:	f001 f906 	bl	800b23c <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ffc2 	bl	8009fba <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
	...

0800a048 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800a052:	2301      	movs	r3, #1
 800a054:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800a056:	2300      	movs	r3, #0
 800a058:	613b      	str	r3, [r7, #16]
 800a05a:	e024      	b.n	800a0a6 <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a05c:	4b16      	ldr	r3, [pc, #88]	; (800a0b8 <ADBoard_BUSYCallback+0x70>)
 800a05e:	6819      	ldr	r1, [r3, #0]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	440b      	add	r3, r1
 800a06c:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	429a      	cmp	r2, r3
 800a078:	d112      	bne.n	800a0a0 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800a07a:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <ADBoard_BUSYCallback+0x70>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	b292      	uxth	r2, r2
 800a082:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f7ff ff6a 	bl	8009f60 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	2308      	movs	r3, #8
 800a094:	4909      	ldr	r1, [pc, #36]	; (800a0bc <ADBoard_BUSYCallback+0x74>)
 800a096:	f7f9 fce7 	bl	8003a68 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
				break;
 800a09e:	e005      	b.n	800a0ac <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	ddd7      	ble.n	800a05c <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800a0ac:	697b      	ldr	r3, [r7, #20]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000010 	.word	0x20000010
 800a0bc:	20000014 	.word	0x20000014

0800a0c0 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	int ret=1;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	e084      	b.n	800a1dc <ADBoard_SPICallback+0x11c>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a0d2:	4b47      	ldr	r3, [pc, #284]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a0d4:	6819      	ldr	r1, [r3, #0]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	440b      	add	r3, r1
 800a0e2:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d173      	bne.n	800a1d6 <ADBoard_SPICallback+0x116>
				{
					ptADBoardDevices->curADBoardNum=i;
 800a0ee:	4b40      	ldr	r3, [pc, #256]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800a0fa:	68b8      	ldr	r0, [r7, #8]
 800a0fc:	f7ff ff3f 	bl	8009f7e <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a110:	2300      	movs	r3, #0
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	e01a      	b.n	800a14c <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a126:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a1f4 <ADBoard_SPICallback+0x134>
 800a12a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3304      	adds	r3, #4
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3301      	adds	r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b07      	cmp	r3, #7
 800a150:	dde1      	ble.n	800a116 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800a152:	4b27      	ldr	r3, [pc, #156]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a15a:	3301      	adds	r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dc19      	bgt.n	800a194 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800a160:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800a168:	4b21      	ldr	r3, [pc, #132]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3201      	adds	r2, #1
 800a16e:	b292      	uxth	r2, r2
 800a170:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a174:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	4b1d      	ldr	r3, [pc, #116]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a180:	4619      	mov	r1, r3
 800a182:	460b      	mov	r3, r1
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	4413      	add	r3, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff ff41 	bl	800a014 <AD7616_getVoltage>
 800a192:	e01a      	b.n	800a1ca <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800a194:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a19c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800a1a0:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800a1aa:	f001 f817 	bl	800b1dc <micros>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1c2:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <ADBoard_SPICallback+0x130>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	1a8a      	subs	r2, r1, r2
 800a1c8:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
					printf("getAna\r\n");
 800a1ce:	480a      	ldr	r0, [pc, #40]	; (800a1f8 <ADBoard_SPICallback+0x138>)
 800a1d0:	f006 fd9e 	bl	8010d10 <puts>
					break;
 800a1d4:	e006      	b.n	800a1e4 <ADBoard_SPICallback+0x124>
		for(int i=0;i<ADBOARD_NUM;i++)
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	613b      	str	r3, [r7, #16]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f77f af77 	ble.w	800a0d2 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800a1e4:	697b      	ldr	r3, [r7, #20]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000010 	.word	0x20000010
 800a1f4:	47800000 	.word	0x47800000
 800a1f8:	08014b60 	.word	0x08014b60

0800a1fc <ADBoard_Reset>:

void ADBoard_Reset()
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <ADBoard_Reset+0x34>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fee5 	bl	8009fd8 <AD_RESET_LOW>
	delay_us(5);
 800a20e:	2005      	movs	r0, #5
 800a210:	f000 fffa 	bl	800b208 <delay_us>
	AD_RESET_HIGH(ptADDev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff feee 	bl	8009ff6 <AD_RESET_HIGH>
	delay_us(5);
 800a21a:	2005      	movs	r0, #5
 800a21c:	f000 fff4 	bl	800b208 <delay_us>
	AD_RESET_LOW(ptADDev);}
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff fed9 	bl	8009fd8 <AD_RESET_LOW>

}
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000010 	.word	0x20000010

0800a234 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800a238:	4b10      	ldr	r3, [pc, #64]	; (800a27c <ADBoard_updateVoltage+0x48>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800a242:	4b0e      	ldr	r3, [pc, #56]	; (800a27c <ADBoard_updateVoltage+0x48>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800a24c:	f000 ffc6 	bl	800b1dc <micros>
 800a250:	4602      	mov	r2, r0
 800a252:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <ADBoard_updateVoltage+0x48>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <ADBoard_updateVoltage+0x48>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	4b07      	ldr	r3, [pc, #28]	; (800a27c <ADBoard_updateVoltage+0x48>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a264:	4619      	mov	r1, r3
 800a266:	460b      	mov	r3, r1
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	4413      	add	r3, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fecf 	bl	800a014 <AD7616_getVoltage>
}
 800a276:	bf00      	nop
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000010 	.word	0x20000010

0800a280 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800a28a:	88fb      	ldrh	r3, [r7, #6]
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d814      	bhi.n	800a2ba <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD76x6_CHANNELNUM;
 800a290:	88fb      	ldrh	r3, [r7, #6]
 800a292:	08db      	lsrs	r3, r3, #3
 800a294:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD76x6_CHANNELNUM;
 800a296:	88fb      	ldrh	r3, [r7, #6]
 800a298:	f003 0307 	and.w	r3, r3, #7
 800a29c:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800a29e:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <AnalogRead_External+0x50>)
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	89fa      	ldrh	r2, [r7, #14]
 800a2a4:	89b8      	ldrh	r0, [r7, #12]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4403      	add	r3, r0
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	440b      	add	r3, r1
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	e001      	b.n	800a2be <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800a2ba:	f04f 0300 	mov.w	r3, #0
 800a2be:	ee07 3a90 	vmov	s15, r3
}
 800a2c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	20000010 	.word	0x20000010

0800a2d4 <ADBoard_Init>:

void ADBoard_Init()
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800a2da:	230b      	movs	r3, #11
 800a2dc:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800a2de:	230c      	movs	r3, #12
 800a2e0:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800a2e2:	230d      	movs	r3, #13
 800a2e4:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800a2ea:	4b28      	ldr	r3, [pc, #160]	; (800a38c <ADBoard_Init+0xb8>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800a2f6:	4b25      	ldr	r3, [pc, #148]	; (800a38c <ADBoard_Init+0xb8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800a300:	4b22      	ldr	r3, [pc, #136]	; (800a38c <ADBoard_Init+0xb8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2200      	movs	r2, #0
 800a306:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800a308:	4b20      	ldr	r3, [pc, #128]	; (800a38c <ADBoard_Init+0xb8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2200      	movs	r2, #0
 800a30e:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800a310:	4b1e      	ldr	r3, [pc, #120]	; (800a38c <ADBoard_Init+0xb8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800a318:	4b1c      	ldr	r3, [pc, #112]	; (800a38c <ADBoard_Init+0xb8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a1c      	ldr	r2, [pc, #112]	; (800a390 <ADBoard_Init+0xbc>)
 800a31e:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800a320:	4b1a      	ldr	r3, [pc, #104]	; (800a38c <ADBoard_Init+0xb8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a1b      	ldr	r2, [pc, #108]	; (800a394 <ADBoard_Init+0xc0>)
 800a326:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800a328:	4b18      	ldr	r3, [pc, #96]	; (800a38c <ADBoard_Init+0xb8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800a330:	4b16      	ldr	r3, [pc, #88]	; (800a38c <ADBoard_Init+0xb8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a338:	4b14      	ldr	r3, [pc, #80]	; (800a38c <ADBoard_Init+0xb8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a340:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800a344:	4b11      	ldr	r3, [pc, #68]	; (800a38c <ADBoard_Init+0xb8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a13      	ldr	r2, [pc, #76]	; (800a398 <ADBoard_Init+0xc4>)
 800a34a:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <ADBoard_Init+0xb8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	79fa      	ldrb	r2, [r7, #7]
 800a352:	b292      	uxth	r2, r2
 800a354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <ADBoard_Init+0xb8>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	797a      	ldrb	r2, [r7, #5]
 800a35e:	b292      	uxth	r2, r2
 800a360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800a364:	4b09      	ldr	r3, [pc, #36]	; (800a38c <ADBoard_Init+0xb8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	79ba      	ldrb	r2, [r7, #6]
 800a36a:	b292      	uxth	r2, r2
 800a36c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800a370:	4b06      	ldr	r3, [pc, #24]	; (800a38c <ADBoard_Init+0xb8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	793a      	ldrb	r2, [r7, #4]
 800a376:	b292      	uxth	r2, r2
 800a378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800a37c:	f7ff ff3e 	bl	800a1fc <ADBoard_Reset>

	ADBoard_updateVoltage();
 800a380:	f7ff ff58 	bl	800a234 <ADBoard_updateVoltage>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000010 	.word	0x20000010
 800a390:	c1200000 	.word	0xc1200000
 800a394:	41200000 	.word	0x41200000
 800a398:	2000a7b4 	.word	0x2000a7b4

0800a39c <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800a39c:	b5b0      	push	{r4, r5, r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	68b9      	ldr	r1, [r7, #8]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 ffab 	bl	800b30c <_ZN14SOLENOID_VALVEC1Ei>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	331c      	adds	r3, #28
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 ffa5 	bl	800b30c <_ZN14SOLENOID_VALVEC1Ei>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3334      	adds	r3, #52	; 0x34
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fbed 	bl	800aba8 <_ZN15PRESSURE_SENSORC1Ei>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3350      	adds	r3, #80	; 0x50
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 fdf2 	bl	800cfbc <_ZN18PRESSURE_SENSORSPIC1Ev>
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	f241 036c 	movw	r3, #4204	; 0x106c
 800a3de:	4413      	add	r3, r2
 800a3e0:	4a67      	ldr	r2, [pc, #412]	; (800a580 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800a3e2:	461c      	mov	r4, r3
 800a3e4:	4615      	mov	r5, r2
 800a3e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800a3fc:	4a61      	ldr	r2, [pc, #388]	; (800a584 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800a3fe:	461c      	mov	r4, r3
 800a400:	4615      	mov	r5, r2
 800a402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a40a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a40c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800a418:	4413      	add	r3, r2
 800a41a:	4a5b      	ldr	r2, [pc, #364]	; (800a588 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800a41c:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800a424:	4413      	add	r3, r2
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68f9      	ldr	r1, [r7, #12]
 800a42a:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800a42e:	440b      	add	r3, r1
 800a430:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4a55      	ldr	r2, [pc, #340]	; (800a58c <_ZN7CHAMBERC1Eiii+0x1f0>)
 800a436:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pressure=0;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f04f 0200 	mov.w	r2, #0
 800a44a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f04f 0200 	mov.w	r2, #0
 800a454:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pressureDeadZone = 2000;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4a4a      	ldr	r2, [pc, #296]	; (800a590 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800a468:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4a49      	ldr	r2, [pc, #292]	; (800a594 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800a46e:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4a49      	ldr	r2, [pc, #292]	; (800a598 <_ZN7CHAMBERC1Eiii+0x1fc>)
 800a474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pressureOffset=0;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	fulOpening=1;
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	f241 035c 	movw	r3, #4188	; 0x105c
 800a488:	4413      	add	r3, r2
 800a48a:	2201      	movs	r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
	opening = 0;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da00      	bge.n	800a4a8 <_ZN7CHAMBERC1Eiii+0x10c>
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	105b      	asrs	r3, r3, #1
 800a4aa:	4a3c      	ldr	r2, [pc, #240]	; (800a59c <_ZN7CHAMBERC1Eiii+0x200>)
 800a4ac:	011b      	lsls	r3, r3, #4
 800a4ae:	4413      	add	r3, r2
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	da00      	bge.n	800a4c0 <_ZN7CHAMBERC1Eiii+0x124>
 800a4be:	3301      	adds	r3, #1
 800a4c0:	105b      	asrs	r3, r3, #1
 800a4c2:	4a36      	ldr	r2, [pc, #216]	; (800a59c <_ZN7CHAMBERC1Eiii+0x200>)
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	da00      	bge.n	800a4da <_ZN7CHAMBERC1Eiii+0x13e>
 800a4d8:	3301      	adds	r3, #1
 800a4da:	105b      	asrs	r3, r3, #1
 800a4dc:	4a2f      	ldr	r2, [pc, #188]	; (800a59c <_ZN7CHAMBERC1Eiii+0x200>)
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da00      	bge.n	800a4f4 <_ZN7CHAMBERC1Eiii+0x158>
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	105b      	asrs	r3, r3, #1
 800a4f6:	4a29      	ldr	r2, [pc, #164]	; (800a59c <_ZN7CHAMBERC1Eiii+0x200>)
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	4413      	add	r3, r2
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a50c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800a510:	eddf 4a23 	vldr	s9, [pc, #140]	; 800a5a0 <_ZN7CHAMBERC1Eiii+0x204>
 800a514:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800a5a4 <_ZN7CHAMBERC1Eiii+0x208>
 800a518:	eddf 3a23 	vldr	s7, [pc, #140]	; 800a5a8 <_ZN7CHAMBERC1Eiii+0x20c>
 800a51c:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800a5a8 <_ZN7CHAMBERC1Eiii+0x20c>
 800a520:	eddf 2a22 	vldr	s5, [pc, #136]	; 800a5ac <_ZN7CHAMBERC1Eiii+0x210>
 800a524:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800a5b0 <_ZN7CHAMBERC1Eiii+0x214>
 800a528:	eddf 1a22 	vldr	s3, [pc, #136]	; 800a5b4 <_ZN7CHAMBERC1Eiii+0x218>
 800a52c:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800a5b8 <_ZN7CHAMBERC1Eiii+0x21c>
 800a530:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a5a8 <_ZN7CHAMBERC1Eiii+0x20c>
 800a534:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a5bc <_ZN7CHAMBERC1Eiii+0x220>
 800a538:	f000 fad4 	bl	800aae4 <NewPressureController>
 800a53c:	4602      	mov	r2, r0
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	f241 0364 	movw	r3, #4196	; 0x1064
 800a548:	4413      	add	r3, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	f241 0368 	movw	r3, #4200	; 0x1068
 800a55e:	4413      	add	r3, r2
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	33bc      	adds	r3, #188	; 0xbc
 800a568:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f005 fc87 	bl	800fe82 <memset>

}
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bdb0      	pop	{r4, r5, r7, pc}
 800a57e:	bf00      	nop
 800a580:	08014b68 	.word	0x08014b68
 800a584:	08014b9c 	.word	0x08014b9c
 800a588:	3e99999a 	.word	0x3e99999a
 800a58c:	3c23d70a 	.word	0x3c23d70a
 800a590:	44fa0000 	.word	0x44fa0000
 800a594:	46ea6000 	.word	0x46ea6000
 800a598:	c6ea6000 	.word	0xc6ea6000
 800a59c:	20000034 	.word	0x20000034
 800a5a0:	3e99999a 	.word	0x3e99999a
 800a5a4:	387ba882 	.word	0x387ba882
 800a5a8:	00000000 	.word	0x00000000
 800a5ac:	37a7c5ac 	.word	0x37a7c5ac
 800a5b0:	471c4000 	.word	0x471c4000
 800a5b4:	501502f9 	.word	0x501502f9
 800a5b8:	3a83126f 	.word	0x3a83126f
 800a5bc:	48435000 	.word	0x48435000

0800a5c0 <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fec3 	bl	800b360 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	331c      	adds	r3, #28
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 febd 	bl	800b360 <_ZN14SOLENOID_VALVE6attachEi>
	writeOpening(0);
 800a5e6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a604 <_ZN7CHAMBER6attachEiii+0x44>
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 f962 	bl	800a8b4 <_ZN7CHAMBER12writeOpeningEf>
	pressureSensor.attach(AnalogPort);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3334      	adds	r3, #52	; 0x34
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fb38 	bl	800ac6c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	00000000 	.word	0x00000000

0800a608 <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <_ZN7CHAMBER12readPressureEv>:

float CHAMBER::readPressure(){
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

	/************************customize the correct pressure souce according to the project**********/

	pressureRaw = pressureSensor.read();
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3334      	adds	r3, #52	; 0x34
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fadd 	bl	800abf4 <_ZN15PRESSURE_SENSOR4readEv>
 800a63a:	eef0 7a40 	vmov.f32	s15, s0
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	//pressureRaw = pressureSensorspi.read();
	pressure=pressureRaw-pressureOffset;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800a650:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a660:	ee07 3a90 	vmov	s15, r3
}
 800a664:	eeb0 0a67 	vmov.f32	s0, s15
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <_ZN7CHAMBER15readPressureExtEf>:

float CHAMBER::readPressureExt(float pressureExt){
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	ed87 0a00 	vstr	s0, [r7]

	/************************read from external pressure source**********/
	pressureRaw=pressureExt;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=pressureRaw-pressureOffset;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800a68e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a69e:	ee07 3a90 	vmov	s15, r3
}
 800a6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800a6bc:	edd7 7a00 	vldr	s15, [r7]
 800a6c0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800a8a4 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800a6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	d501      	bpl.n	800a6d2 <_ZN7CHAMBER13writePressureEf+0x22>
 800a6ce:	4b76      	ldr	r3, [pc, #472]	; (800a8a8 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800a6d0:	e00b      	b.n	800a6ea <_ZN7CHAMBER13writePressureEf+0x3a>
 800a6d2:	edd7 7a00 	vldr	s15, [r7]
 800a6d6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800a8ac <_ZN7CHAMBER13writePressureEf+0x1fc>
 800a6da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e2:	dd01      	ble.n	800a6e8 <_ZN7CHAMBER13writePressureEf+0x38>
 800a6e4:	4b72      	ldr	r3, [pc, #456]	; (800a8b0 <_ZN7CHAMBER13writePressureEf+0x200>)
 800a6e6:	e000      	b.n	800a6ea <_ZN7CHAMBER13writePressureEf+0x3a>
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	float pErr = pressureCommand-pressure;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800a6fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a700:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800a70a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a70e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a716:	d54e      	bpl.n	800a7b6 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800a724:	edd7 7a03 	vldr	s15, [r7, #12]
 800a728:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a730:	dd03      	ble.n	800a73a <_ZN7CHAMBER13writePressureEf+0x8a>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a738:	e019      	b.n	800a76e <_ZN7CHAMBER13writePressureEf+0xbe>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a746:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a74a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a74e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a756:	d508      	bpl.n	800a76a <_ZN7CHAMBER13writePressureEf+0xba>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a768:	e001      	b.n	800a76e <_ZN7CHAMBER13writePressureEf+0xbe>
 800a76a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800a774:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800a784:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a788:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a798:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a7a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a7a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a7aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800a7b4:	e06a      	b.n	800a88c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a7bc:	eeb1 7a67 	vneg.f32	s14, s15
 800a7c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a7c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7cc:	dd59      	ble.n	800a882 <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a7e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a7e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a7e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f0:	dd08      	ble.n	800a804 <_ZN7CHAMBER13writePressureEf+0x154>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a7fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a802:	e013      	b.n	800a82c <_ZN7CHAMBER13writePressureEf+0x17c>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a80a:	eef1 6a67 	vneg.f32	s13, s15
 800a80e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a812:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81a:	d505      	bpl.n	800a828 <_ZN7CHAMBER13writePressureEf+0x178>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a822:	eef1 7a67 	vneg.f32	s15, s15
 800a826:	e001      	b.n	800a82c <_ZN7CHAMBER13writePressureEf+0x17c>
 800a828:	edd7 7a03 	vldr	s15, [r7, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800a838:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a83c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800a84c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a850:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800a85a:	eef1 6a67 	vneg.f32	s13, s15
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800a86a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a86e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a872:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800a880:	e004      	b.n	800a88c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f04f 0200 	mov.w	r2, #0
 800a888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800a892:	eeb0 0a67 	vmov.f32	s0, s15
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f80c 	bl	800a8b4 <_ZN7CHAMBER12writeOpeningEf>
}
 800a89c:	bf00      	nop
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	c7c35000 	.word	0xc7c35000
 800a8a8:	c7c35000 	.word	0xc7c35000
 800a8ac:	482fc800 	.word	0x482fc800
 800a8b0:	482fc800 	.word	0x482fc800

0800a8b4 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800a8c0:	edd7 7a00 	vldr	s15, [r7]
 800a8c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8cc:	dd2b      	ble.n	800a926 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800a8ce:	edd7 7a00 	vldr	s15, [r7]
 800a8d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8da:	d502      	bpl.n	800a8e2 <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	e00c      	b.n	800a8fc <_ZN7CHAMBER12writeOpeningEf+0x48>
 800a8e2:	edd7 7a00 	vldr	s15, [r7]
 800a8e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f2:	dd02      	ble.n	800a8fa <_ZN7CHAMBER12writeOpeningEf+0x46>
 800a8f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a8f8:	e000      	b.n	800a8fc <_ZN7CHAMBER12writeOpeningEf+0x48>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	1d1a      	adds	r2, r3, #4
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800a90c:	eeb0 0a67 	vmov.f32	s0, s15
 800a910:	4610      	mov	r0, r2
 800a912:	f000 fd35 	bl	800b380 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	331c      	adds	r3, #28
 800a91a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800a988 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 fd2e 	bl	800b380 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800a924:	e02c      	b.n	800a980 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800a926:	edd7 7a00 	vldr	s15, [r7]
 800a92a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a92e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a936:	d501      	bpl.n	800a93c <_ZN7CHAMBER12writeOpeningEf+0x88>
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800a93a:	e00a      	b.n	800a952 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800a93c:	edd7 7a00 	vldr	s15, [r7]
 800a940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a948:	dd02      	ble.n	800a950 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800a94a:	f04f 0300 	mov.w	r3, #0
 800a94e:	e000      	b.n	800a952 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a988 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fd0d 	bl	800b380 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f103 021c 	add.w	r2, r3, #28
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800a972:	eef1 7a67 	vneg.f32	s15, s15
 800a976:	eeb0 0a67 	vmov.f32	s0, s15
 800a97a:	4610      	mov	r0, r2
 800a97c:	f000 fd00 	bl	800b380 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	00000000 	.word	0x00000000
 800a98c:	bf800000 	.word	0xbf800000

0800a990 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800a99a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a99e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800a9a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9a6:	eef0 7ae7 	vabs.f32	s15, s15
 800a9aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a9ae:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800a9d0 <mySAT+0x40>
 800a9b2:	ee37 6b06 	vadd.f64	d6, d7, d6
 800a9b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a9ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800a9be:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	47ae147b 	.word	0x47ae147b
 800a9d4:	3f847ae1 	.word	0x3f847ae1

0800a9d8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08a      	sub	sp, #40	; 0x28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800a9e4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	ed93 7a08 	vldr	s14, [r3, #32]
 800a9fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	edd3 6a07 	vldr	s13, [r3, #28]
 800aa08:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa10:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa14:	eddf 6a25 	vldr	s13, [pc, #148]	; 800aaac <superTwisting2rdSMCUpdate+0xd4>
 800aa18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	edd3 7a02 	vldr	s15, [r3, #8]
 800aa28:	eeb0 0a67 	vmov.f32	s0, s15
 800aa2c:	f7ff ffb0 	bl	800a990 <mySAT>
 800aa30:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	edd3 7a02 	vldr	s15, [r3, #8]
 800aa3a:	eeb0 7ae7 	vabs.f32	s14, s15
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa48:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800aa4c:	f04f 0300 	mov.w	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	61fb      	str	r3, [r7, #28]
 800aa56:	f107 0314 	add.w	r3, r7, #20
 800aa5a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800aa5c:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa68:	db09      	blt.n	800aa7e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800aa6a:	ed97 0a07 	vldr	s0, [r7, #28]
 800aa6e:	f004 fbb7 	bl	800f1e0 <sqrtf>
 800aa72:	eef0 7a40 	vmov.f32	s15, s0
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	edc3 7a00 	vstr	s15, [r3]
 800aa7c:	e003      	b.n	800aa86 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	f04f 0200 	mov.w	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800aa86:	ed97 7a05 	vldr	s14, [r7, #20]
 800aa8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	ee07 3a90 	vmov	s15, r3
}
 800aaa0:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa4:	3728      	adds	r7, #40	; 0x28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	447a0000 	.word	0x447a0000

0800aab0 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	ed87 0a02 	vstr	s0, [r7, #8]
 800aabc:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3324      	adds	r3, #36	; 0x24
 800aac4:	edd7 0a01 	vldr	s1, [r7, #4]
 800aac8:	ed97 0a02 	vldr	s0, [r7, #8]
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff ff83 	bl	800a9d8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad6:	ee07 3a90 	vmov	s15, r3
}
 800aada:	eeb0 0a67 	vmov.f32	s0, s15
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08c      	sub	sp, #48	; 0x30
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800aaee:	edc7 0a08 	vstr	s1, [r7, #32]
 800aaf2:	ed87 1a07 	vstr	s2, [r7, #28]
 800aaf6:	edc7 1a06 	vstr	s3, [r7, #24]
 800aafa:	ed87 2a05 	vstr	s4, [r7, #20]
 800aafe:	edc7 2a04 	vstr	s5, [r7, #16]
 800ab02:	ed87 3a03 	vstr	s6, [r7, #12]
 800ab06:	edc7 3a02 	vstr	s7, [r7, #8]
 800ab0a:	ed87 4a01 	vstr	s8, [r7, #4]
 800ab0e:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800ab12:	204c      	movs	r0, #76	; 0x4c
 800ab14:	f005 f9a2 	bl	800fe5c <malloc>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800ab1c:	224c      	movs	r2, #76	; 0x4c
 800ab1e:	2100      	movs	r1, #0
 800ab20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab22:	f005 f9ae 	bl	800fe82 <memset>
	pController->psource = psource;
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2a:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	6a3a      	ldr	r2, [r7, #32]
 800ab30:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800ab38:	ed97 1a07 	vldr	s2, [r7, #28]
 800ab3c:	edd7 0a05 	vldr	s1, [r7, #20]
 800ab40:	ed97 0a06 	vldr	s0, [r7, #24]
 800ab44:	f001 fa5a 	bl	800bffc <newSimpleKalmanFilter>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800ab4e:	edd7 2a00 	vldr	s5, [r7]
 800ab52:	ed97 2a01 	vldr	s4, [r7, #4]
 800ab56:	edd7 1a07 	vldr	s3, [r7, #28]
 800ab5a:	ed97 1a02 	vldr	s2, [r7, #8]
 800ab5e:	edd7 0a03 	vldr	s1, [r7, #12]
 800ab62:	ed97 0a04 	vldr	s0, [r7, #16]
 800ab66:	f001 fe89 	bl	800c87c <newPID>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <NewPressureController+0xb8>)
 800ab7a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	4a06      	ldr	r2, [pc, #24]	; (800aba0 <NewPressureController+0xbc>)
 800ab88:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	4a05      	ldr	r2, [pc, #20]	; (800aba4 <NewPressureController+0xc0>)
 800ab8e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3730      	adds	r7, #48	; 0x30
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	3627c5ac 	.word	0x3627c5ac
 800aba0:	41a00000 	.word	0x41a00000
 800aba4:	0800aab1 	.word	0x0800aab1

0800aba8 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	605a      	str	r2, [r3, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f851 	bl	800ac6c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800abca:	eddf 1a08 	vldr	s3, [pc, #32]	; 800abec <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800abce:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800abf0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800abd2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800abd6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f854 	bl	800ac88 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	48927c00 	.word	0x48927c00
 800abf0:	00000000 	.word	0x00000000

0800abf4 <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fa7f 	bl	800b106 <AnalogRead>
 800ac08:	eef0 7a40 	vmov.f32	s15, s0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	ed93 7a05 	vldr	s14, [r3, #20]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	edd3 7a03 	vldr	s15, [r3, #12]
 800ac24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	ed93 6a06 	vldr	s12, [r3, #24]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	edd3 7a05 	vldr	s15, [r3, #20]
 800ac34:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ac38:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	edd3 6a04 	vldr	s13, [r3, #16]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	edd3 7a03 	vldr	s15, [r3, #12]
 800ac48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ac4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ac50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	ee07 3a90 	vmov	s15, r3
}
 800ac62:	eeb0 0a67 	vmov.f32	s0, s15
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	601a      	str	r2, [r3, #0]

}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6178      	str	r0, [r7, #20]
 800ac90:	ed87 0a04 	vstr	s0, [r7, #16]
 800ac94:	edc7 0a03 	vstr	s1, [r7, #12]
 800ac98:	ed87 1a02 	vstr	s2, [r7, #8]
 800ac9c:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	619a      	str	r2, [r3, #24]
}
 800acb8:	bf00      	nop
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3304      	adds	r3, #4
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f91d 	bl	800af16 <_ZN4PUMPC1Ei>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	330c      	adds	r3, #12
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff ff60 	bl	800aba8 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f81b 	bl	800ad28 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
	direction=0;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	635a      	str	r2, [r3, #52]	; 0x34
	pressureUpper=0;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	639a      	str	r2, [r3, #56]	; 0x38
	pressureOffset=0;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f04f 0200 	mov.w	r2, #0
 800ad1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f808 	bl	800ad4c <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f818 	bl	800ad74 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 f8eb 	bl	800af38 <_ZN4PUMP6attachEi>
	pump.stop();
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 f906 	bl	800af78 <_ZN4PUMP4stopEv>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	330c      	adds	r3, #12
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ff71 	bl	800ac6c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <_ZN15PRESSURE_SOURCE16maintainPressureEf>:

void PRESSURE_SOURCE::maintainPressure(float p){
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	ed87 0a00 	vstr	s0, [r7]
	if(p>=0){
 800ada0:	edd7 7a00 	vldr	s15, [r7]
 800ada4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	db0d      	blt.n	800adca <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x36>
		maintainPressureRange(p,p+10000);
 800adae:	edd7 7a00 	vldr	s15, [r7]
 800adb2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800adec <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x58>
 800adb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adba:	eef0 0a67 	vmov.f32	s1, s15
 800adbe:	ed97 0a00 	vldr	s0, [r7]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f814 	bl	800adf0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>
	}
	else
		maintainPressureRange(p-10000,p);
}
 800adc8:	e00c      	b.n	800ade4 <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x50>
		maintainPressureRange(p-10000,p);
 800adca:	edd7 7a00 	vldr	s15, [r7]
 800adce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800adec <_ZN15PRESSURE_SOURCE16maintainPressureEf+0x58>
 800add2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800add6:	edd7 0a00 	vldr	s1, [r7]
 800adda:	eeb0 0a67 	vmov.f32	s0, s15
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f806 	bl	800adf0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	461c4000 	.word	0x461c4000

0800adf0 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff>:

void PRESSURE_SOURCE::maintainPressureRange(float p_low,float p_high) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	ed87 0a02 	vstr	s0, [r7, #8]
 800adfc:	edc7 0a01 	vstr	s1, [r7, #4]



	if(p_low<p_high)
 800ae00:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae10:	d506      	bpl.n	800ae20 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x30>
	{
		pressureLower=p_low;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	635a      	str	r2, [r3, #52]	; 0x34
		pressureUpper=p_high;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae1e:	e005      	b.n	800ae2c <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x3c>
	}
	else{
		pressureLower=p_high;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	635a      	str	r2, [r3, #52]	; 0x34
		pressureUpper=p_low;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	readPressure();
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 f842 	bl	800aeb6 <_ZN15PRESSURE_SOURCE12readPressureEv>

	if(pressure<pressureLower)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ae3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae46:	d513      	bpl.n	800ae70 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x80>
	{
		if(pressureLower>0)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ae4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae56:	dd05      	ble.n	800ae64 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x74>
			pump.start();
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 f879 	bl	800af54 <_ZN4PUMP5startEv>
			pump.start();
		else
			pump.stop();
	}

}
 800ae62:	e024      	b.n	800aeae <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
			pump.stop();
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 f885 	bl	800af78 <_ZN4PUMP4stopEv>
}
 800ae6e:	e01e      	b.n	800aeae <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
	else if(pressure>pressureUpper)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ae7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	dc00      	bgt.n	800ae88 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0x98>
}
 800ae86:	e012      	b.n	800aeae <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
		if(pressureUpper<0)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ae8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae96:	d505      	bpl.n	800aea4 <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xb4>
			pump.start();
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f859 	bl	800af54 <_ZN4PUMP5startEv>
}
 800aea2:	e004      	b.n	800aeae <_ZN15PRESSURE_SOURCE21maintainPressureRangeEff+0xbe>
			pump.stop();
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3304      	adds	r3, #4
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 f865 	bl	800af78 <_ZN4PUMP4stopEv>
}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <_ZN15PRESSURE_SOURCE12readPressureEv>:
{
	pump.stop();
}


float PRESSURE_SOURCE::readPressure() {
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
	pressureRaw=pressureSensor.read();
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	330c      	adds	r3, #12
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff fe96 	bl	800abf4 <_ZN15PRESSURE_SENSOR4readEv>
 800aec8:	eef0 7a40 	vmov.f32	s15, s0
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pressure=pressureRaw-pressureOffset;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aede:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	return pressure;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	ee07 3a90 	vmov	s15, r3
}
 800aef0:	eeb0 0a67 	vmov.f32	s0, s15
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <_ZN15PRESSURE_SOURCE12zeroPressureEv>:

void PRESSURE_SOURCE::zeroPressure(){
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
	status=0;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	605a      	str	r2, [r3, #4]
	attach(num);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f805 	bl	800af38 <_ZN4PUMP6attachEi>
}
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	601a      	str	r2, [r3, #0]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <_ZN4PUMP5startEv>:

void PUMP::start()
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]

	DigitalWrite(DigitalPort,1-PWM_DIGITAL_OUTPUT_REVERSED);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	b29b      	uxth	r3, r3
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f000 f8f1 	bl	800b14c <DigitalWrite>
	status=1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	605a      	str	r2, [r3, #4]

}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZN4PUMP4stopEv>:

void PUMP::stop()
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	DigitalWrite(DigitalPort,PWM_DIGITAL_OUTPUT_REVERSED);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	2101      	movs	r1, #1
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f8df 	bl	800b14c <DigitalWrite>
	status=0;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]

}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800af9c:	b590      	push	{r4, r7, lr}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	330c      	adds	r3, #12
 800afaa:	2200      	movs	r2, #0
 800afac:	2100      	movs	r1, #0
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff fe88 	bl	800acc4 <_ZN15PRESSURE_SOURCEC1Eii>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	334c      	adds	r3, #76	; 0x4c
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fe81 	bl	800acc4 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2104      	movs	r1, #4
 800afce:	4618      	mov	r0, r3
 800afd0:	f004 ff12 	bl	800fdf8 <calloc>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2104      	movs	r1, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f004 ff09 	bl	800fdf8 <calloc>
 800afe6:	4603      	mov	r3, r0
 800afe8:	461a      	mov	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	889b      	ldrh	r3, [r3, #4]
 800aff6:	461a      	mov	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4293      	cmp	r3, r2
 800affc:	da18      	bge.n	800b030 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800affe:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800b002:	f004 f83e 	bl	800f082 <_Znwj>
 800b006:	4603      	mov	r3, r0
 800b008:	461c      	mov	r4, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	0059      	lsls	r1, r3, #1
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff f9c0 	bl	800a39c <_ZN7CHAMBERC1Eiii>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	e7e0      	b.n	800aff2 <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a06      	ldr	r2, [pc, #24]	; (800b04c <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800b034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    frequency = 40;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a05      	ldr	r2, [pc, #20]	; (800b050 <_ZN9PNEUDRIVEC1Ei+0xb4>)
 800b03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bd90      	pop	{r4, r7, pc}
 800b04a:	bf00      	nop
 800b04c:	44fa0000 	.word	0x44fa0000
 800b050:	42200000 	.word	0x42200000

0800b054 <_ZN9PNEUDRIVE12readPressureEi>:
	}
}


float PNEUDRIVE::readPressure(int num)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
	return (chambers[num]->readPressure());
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fadc 	bl	800a628 <_ZN7CHAMBER12readPressureEv>
 800b070:	eef0 7a40 	vmov.f32	s15, s0
}
 800b074:	eeb0 0a67 	vmov.f32	s0, s15
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <_ZN9PNEUDRIVE13writePressureEif>:

void PNEUDRIVE::writePressure(int num,float preCommand)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	ed87 0a01 	vstr	s0, [r7, #4]
	bufferPressure(num,preCommand);
 800b08c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 f808 	bl	800b0a8 <_ZN9PNEUDRIVE14bufferPressureEif>
	writeBufferedPressure(num);
 800b098:	68b9      	ldr	r1, [r7, #8]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 f818 	bl	800b0d0 <_ZN9PNEUDRIVE21writeBufferedPressureEi>
}
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <_ZN9PNEUDRIVE14bufferPressureEif>:

void PNEUDRIVE::bufferPressure(int num,float preCommand)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	ed87 0a01 	vstr	s0, [r7, #4]
	pressureCommands[num]=preCommand;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <_ZN9PNEUDRIVE21writeBufferedPressureEi>:
void PNEUDRIVE::writeBufferedPressure(int num)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
	chambers[num]->writePressure(pressureCommands[num]);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	6819      	ldr	r1, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	edd3 7a00 	vldr	s15, [r3]
 800b0f4:	eeb0 0a67 	vmov.f32	s0, s15
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	f7ff fad9 	bl	800a6b0 <_ZN7CHAMBER13writePressureEf>
}
 800b0fe:	bf00      	nop
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	4603      	mov	r3, r0
 800b10e:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	2b05      	cmp	r3, #5
 800b11a:	d806      	bhi.n	800b12a <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f986 	bl	800b430 <AnalogRead_BuiltIn>
 800b124:	ed87 0a03 	vstr	s0, [r7, #12]
 800b128:	e008      	b.n	800b13c <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800b12a:	88fb      	ldrh	r3, [r7, #6]
 800b12c:	3b06      	subs	r3, #6
 800b12e:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff f8a4 	bl	800a280 <AnalogRead_External>
 800b138:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	ee07 3a90 	vmov	s15, r3

}
 800b142:	eeb0 0a67 	vmov.f32	s0, s15
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	460a      	mov	r2, r1
 800b156:	80fb      	strh	r3, [r7, #6]
 800b158:	4613      	mov	r3, r2
 800b15a:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800b15c:	88ba      	ldrh	r2, [r7, #4]
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	4611      	mov	r1, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f99e 	bl	800b4a4 <DigitalBuiltIn_Write>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	ed87 0a00 	vstr	s0, [r7]
 800b17c:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800b17e:	88fb      	ldrh	r3, [r7, #6]
 800b180:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	2b13      	cmp	r3, #19
 800b186:	d805      	bhi.n	800b194 <PWMWriteDuty+0x24>
		PWMBuiltIn_writeDuty(num,fduty);
 800b188:	88fb      	ldrh	r3, [r7, #6]
 800b18a:	ed97 0a00 	vldr	s0, [r7]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fa24 	bl	800b5dc <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800b194:	bf00      	nop
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
};
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <serial2Callback>:
	printf("Running default serial1Callback()\r\n");
}
;

__weak  void serial2Callback(char *pSerialPort4Buffer)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	printf("Running default serial2Callback()\r\n");
 800b1b8:	4803      	ldr	r0, [pc, #12]	; (800b1c8 <serial2Callback+0x18>)
 800b1ba:	f005 fda9 	bl	8010d10 <puts>
};
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	08014c70 	.word	0x08014c70

0800b1cc <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800b1d0:	f7f5 ff12 	bl	8000ff8 <HAL_GetTick>
 800b1d4:	4603      	mov	r3, r0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <micros>:

uint32_t micros()
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800b1e2:	f7ff fff3 	bl	800b1cc <millis>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1ec:	fb03 f202 	mul.w	r2, r3, r2
 800b1f0:	4b04      	ldr	r3, [pc, #16]	; (800b204 <micros+0x28>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	4413      	add	r3, r2
 800b1f8:	607b      	str	r3, [r7, #4]
	return t;
 800b1fa:	687b      	ldr	r3, [r7, #4]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	2000a99c 	.word	0x2000a99c

0800b208 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800b210:	f7ff ffe4 	bl	800b1dc <micros>
 800b214:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800b216:	f7ff ffe1 	bl	800b1dc <micros>
 800b21a:	4602      	mov	r2, r0
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	461a      	mov	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4293      	cmp	r3, r2
 800b226:	bfcc      	ite	gt
 800b228:	2301      	movgt	r3, #1
 800b22a:	2300      	movle	r3, #0
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d000      	beq.n	800b234 <delay_us+0x2c>
 800b232:	e7f0      	b.n	800b216 <delay_us+0xe>
}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800b244:	4b20      	ldr	r3, [pc, #128]	; (800b2c8 <delay_ns+0x8c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4b1f      	ldr	r3, [pc, #124]	; (800b2c8 <delay_ns+0x8c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0201 	orr.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800b254:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <delay_ns+0x8c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	461a      	mov	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4293      	cmp	r3, r2
 800b260:	bfcc      	ite	gt
 800b262:	2301      	movgt	r3, #1
 800b264:	2300      	movle	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d000      	beq.n	800b26e <delay_ns+0x32>
 800b26c:	e7f2      	b.n	800b254 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800b26e:	4b16      	ldr	r3, [pc, #88]	; (800b2c8 <delay_ns+0x8c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6a1a      	ldr	r2, [r3, #32]
 800b274:	f241 1311 	movw	r3, #4369	; 0x1111
 800b278:	4013      	ands	r3, r2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bf0c      	ite	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	2300      	movne	r3, #0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d014      	beq.n	800b2b2 <delay_ns+0x76>
 800b288:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <delay_ns+0x8c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a1a      	ldr	r2, [r3, #32]
 800b28e:	f240 4344 	movw	r3, #1092	; 0x444
 800b292:	4013      	ands	r3, r2
 800b294:	2b00      	cmp	r3, #0
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d007      	beq.n	800b2b2 <delay_ns+0x76>
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <delay_ns+0x8c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <delay_ns+0x8c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0201 	bic.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <delay_ns+0x8c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	2000ac1c 	.word	0x2000ac1c

0800b2cc <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800b2d4:	4a04      	ldr	r2, [pc, #16]	; (800b2e8 <setPeriodControlLoop+0x1c>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6013      	str	r3, [r2, #0]
}
 800b2da:	bf00      	nop
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	20000214 	.word	0x20000214

0800b2ec <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800b2f4:	4a04      	ldr	r2, [pc, #16]	; (800b308 <setPeriodSendLoop+0x1c>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6013      	str	r3, [r2, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	20000218 	.word	0x20000218

0800b30c <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]

	_duty=0;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f04f 0200 	mov.w	r2, #0
 800b31c:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	edd3 7a02 	vldr	s15, [r3, #8]
 800b324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a09      	ldr	r2, [pc, #36]	; (800b35c <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800b336:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f04f 0200 	mov.w	r2, #0
 800b33e:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b346:	615a      	str	r2, [r3, #20]
	attach(num);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f808 	bl	800b360 <_ZN14SOLENOID_VALVE6attachEi>
}
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	41200000 	.word	0x41200000

0800b360 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	601a      	str	r2, [r3, #0]
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	0000      	movs	r0, r0
	...

0800b380 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	ed93 7a04 	vldr	s14, [r3, #16]
 800b392:	edd7 7a00 	vldr	s15, [r7]
 800b396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39e:	dd02      	ble.n	800b3a6 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	e00d      	b.n	800b3c2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	ed93 7a05 	vldr	s14, [r3, #20]
 800b3ac:	edd7 7a00 	vldr	s15, [r7]
 800b3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b8:	d502      	bpl.n	800b3c0 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	e000      	b.n	800b3c2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800b3c4:	ed97 7a00 	vldr	s14, [r7]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	edd3 7a01 	vldr	s15, [r3, #4]
 800b3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3d2:	eef0 7ae7 	vabs.f32	s15, s15
 800b3d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b3da:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800b428 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800b3de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e6:	dc00      	bgt.n	800b3ea <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800b3e8:	e017      	b.n	800b41a <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b3f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	b29a      	uxth	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b410:	eeb0 0a67 	vmov.f32	s0, s15
 800b414:	4610      	mov	r0, r2
 800b416:	f7ff feab 	bl	800b170 <PWMWriteDuty>
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	f3af 8000 	nop.w
 800b428:	a0b5ed8d 	.word	0xa0b5ed8d
 800b42c:	3eb0c6f7 	.word	0x3eb0c6f7

0800b430 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	db1e      	blt.n	800b47c <AnalogRead_BuiltIn+0x4c>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b05      	cmp	r3, #5
 800b442:	dc1b      	bgt.n	800b47c <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800b444:	4a13      	ldr	r2, [pc, #76]	; (800b494 <AnalogRead_BuiltIn+0x64>)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b44c:	ee07 3a90 	vmov	s15, r3
 800b450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b454:	eddf 6a10 	vldr	s13, [pc, #64]	; 800b498 <AnalogRead_BuiltIn+0x68>
 800b458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b45c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b49c <AnalogRead_BuiltIn+0x6c>
 800b460:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b464:	4a0e      	ldr	r2, [pc, #56]	; (800b4a0 <AnalogRead_BuiltIn+0x70>)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800b470:	4a0b      	ldr	r2, [pc, #44]	; (800b4a0 <AnalogRead_BuiltIn+0x70>)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	e001      	b.n	800b480 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	ee07 3a90 	vmov	s15, r3
}
 800b484:	eeb0 0a67 	vmov.f32	s0, s15
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	2000afd4 	.word	0x2000afd4
 800b498:	45800000 	.word	0x45800000
 800b49c:	40533333 	.word	0x40533333
 800b4a0:	2000afbc 	.word	0x2000afbc

0800b4a4 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	460a      	mov	r2, r1
 800b4ae:	80fb      	strh	r3, [r7, #6]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800b4b4:	88bb      	ldrh	r3, [r7, #4]
 800b4b6:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800b4b8:	88fb      	ldrh	r3, [r7, #6]
 800b4ba:	2b0f      	cmp	r3, #15
 800b4bc:	d80b      	bhi.n	800b4d6 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	4a07      	ldr	r2, [pc, #28]	; (800b4e0 <DigitalBuiltIn_Write+0x3c>)
 800b4c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	4a06      	ldr	r2, [pc, #24]	; (800b4e4 <DigitalBuiltIn_Write+0x40>)
 800b4ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4ce:	7bfa      	ldrb	r2, [r7, #15]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	f7f6 ffb5 	bl	8002440 <HAL_GPIO_WritePin>
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	2000021c 	.word	0x2000021c
 800b4e4:	2000025c 	.word	0x2000025c

0800b4e8 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	ee07 3a90 	vmov	s15, r3
 800b4fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b500:	edd7 7a00 	vldr	s15, [r7]
 800b504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b50c:	eeb0 0b47 	vmov.f64	d0, d7
 800b510:	f003 fde2 	bl	800f0d8 <round>
 800b514:	eeb0 7b40 	vmov.f64	d7, d0
 800b518:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b51c:	ee17 3a90 	vmov	r3, s15
 800b520:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b528:	4293      	cmp	r3, r2
 800b52a:	bf28      	it	cs
 800b52c:	4613      	movcs	r3, r2
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800b536:	b480      	push	{r7}
 800b538:	b085      	sub	sp, #20
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3301      	adds	r3, #1
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	ed97 7a03 	vldr	s14, [r7, #12]
 800b55e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b562:	eef0 7a66 	vmov.f32	s15, s13
}
 800b566:	eeb0 0a67 	vmov.f32	s0, s15
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a0f      	ldr	r2, [pc, #60]	; (800b5c0 <getTIM_SOURCECLK+0x4c>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d013      	beq.n	800b5ae <getTIM_SOURCECLK+0x3a>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a0e      	ldr	r2, [pc, #56]	; (800b5c4 <getTIM_SOURCECLK+0x50>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d00e      	beq.n	800b5ae <getTIM_SOURCECLK+0x3a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <getTIM_SOURCECLK+0x54>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d009      	beq.n	800b5ae <getTIM_SOURCECLK+0x3a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a0b      	ldr	r2, [pc, #44]	; (800b5cc <getTIM_SOURCECLK+0x58>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d004      	beq.n	800b5ae <getTIM_SOURCECLK+0x3a>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <getTIM_SOURCECLK+0x5c>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d101      	bne.n	800b5b2 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <getTIM_SOURCECLK+0x60>)
 800b5b0:	e000      	b.n	800b5b4 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800b5b2:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <getTIM_SOURCECLK+0x64>)
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800
 800b5d4:	0cdfe600 	.word	0x0cdfe600
 800b5d8:	066ff300 	.word	0x066ff300

0800b5dc <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	ed87 0a00 	vstr	s0, [r7]
 800b5e8:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	4a48      	ldr	r2, [pc, #288]	; (800b710 <PWMBuiltIn_writeDuty+0x134>)
 800b5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d112      	bne.n	800b61c <PWMBuiltIn_writeDuty+0x40>
 800b5f6:	88fb      	ldrh	r3, [r7, #6]
 800b5f8:	4a46      	ldr	r2, [pc, #280]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b602:	88fb      	ldrh	r3, [r7, #6]
 800b604:	4a43      	ldr	r2, [pc, #268]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60a:	681c      	ldr	r4, [r3, #0]
 800b60c:	ed97 0a00 	vldr	s0, [r7]
 800b610:	4608      	mov	r0, r1
 800b612:	f7ff ff69 	bl	800b4e8 <duty2CCR>
 800b616:	4603      	mov	r3, r0
 800b618:	6363      	str	r3, [r4, #52]	; 0x34

}
 800b61a:	e075      	b.n	800b708 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b61c:	88fb      	ldrh	r3, [r7, #6]
 800b61e:	4a3c      	ldr	r2, [pc, #240]	; (800b710 <PWMBuiltIn_writeDuty+0x134>)
 800b620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b624:	2b04      	cmp	r3, #4
 800b626:	d112      	bne.n	800b64e <PWMBuiltIn_writeDuty+0x72>
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	4a3a      	ldr	r2, [pc, #232]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	4a37      	ldr	r2, [pc, #220]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b63c:	681c      	ldr	r4, [r3, #0]
 800b63e:	ed97 0a00 	vldr	s0, [r7]
 800b642:	4608      	mov	r0, r1
 800b644:	f7ff ff50 	bl	800b4e8 <duty2CCR>
 800b648:	4603      	mov	r3, r0
 800b64a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b64c:	e05c      	b.n	800b708 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b64e:	88fb      	ldrh	r3, [r7, #6]
 800b650:	4a2f      	ldr	r2, [pc, #188]	; (800b710 <PWMBuiltIn_writeDuty+0x134>)
 800b652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b656:	2b08      	cmp	r3, #8
 800b658:	d112      	bne.n	800b680 <PWMBuiltIn_writeDuty+0xa4>
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	4a2d      	ldr	r2, [pc, #180]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b666:	88fb      	ldrh	r3, [r7, #6]
 800b668:	4a2a      	ldr	r2, [pc, #168]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b66e:	681c      	ldr	r4, [r3, #0]
 800b670:	ed97 0a00 	vldr	s0, [r7]
 800b674:	4608      	mov	r0, r1
 800b676:	f7ff ff37 	bl	800b4e8 <duty2CCR>
 800b67a:	4603      	mov	r3, r0
 800b67c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800b67e:	e043      	b.n	800b708 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	4a23      	ldr	r2, [pc, #140]	; (800b710 <PWMBuiltIn_writeDuty+0x134>)
 800b684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b688:	2b0c      	cmp	r3, #12
 800b68a:	d112      	bne.n	800b6b2 <PWMBuiltIn_writeDuty+0xd6>
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	4a21      	ldr	r2, [pc, #132]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	4a1e      	ldr	r2, [pc, #120]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6a0:	681c      	ldr	r4, [r3, #0]
 800b6a2:	ed97 0a00 	vldr	s0, [r7]
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	f7ff ff1e 	bl	800b4e8 <duty2CCR>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	6423      	str	r3, [r4, #64]	; 0x40
}
 800b6b0:	e02a      	b.n	800b708 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	4a16      	ldr	r2, [pc, #88]	; (800b710 <PWMBuiltIn_writeDuty+0x134>)
 800b6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ba:	2b10      	cmp	r3, #16
 800b6bc:	d112      	bne.n	800b6e4 <PWMBuiltIn_writeDuty+0x108>
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	4a14      	ldr	r2, [pc, #80]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	4a11      	ldr	r2, [pc, #68]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d2:	681c      	ldr	r4, [r3, #0]
 800b6d4:	ed97 0a00 	vldr	s0, [r7]
 800b6d8:	4608      	mov	r0, r1
 800b6da:	f7ff ff05 	bl	800b4e8 <duty2CCR>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800b6e2:	e011      	b.n	800b708 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800b6e4:	88fb      	ldrh	r3, [r7, #6]
 800b6e6:	4a0b      	ldr	r2, [pc, #44]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	4a08      	ldr	r2, [pc, #32]	; (800b714 <PWMBuiltIn_writeDuty+0x138>)
 800b6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6f8:	681c      	ldr	r4, [r3, #0]
 800b6fa:	ed97 0a00 	vldr	s0, [r7]
 800b6fe:	4608      	mov	r0, r1
 800b700:	f7ff fef2 	bl	800b4e8 <duty2CCR>
 800b704:	4603      	mov	r3, r0
 800b706:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd90      	pop	{r4, r7, pc}
 800b710:	200002cc 	.word	0x200002cc
 800b714:	2000027c 	.word	0x2000027c

0800b718 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	ed87 0a00 	vstr	s0, [r7]
 800b724:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800b726:	edd7 7a00 	vldr	s15, [r7]
 800b72a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b72e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800b9e8 <PWMBuiltIn_writeFrequency+0x2d0>
 800b732:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73a:	d501      	bpl.n	800b740 <PWMBuiltIn_writeFrequency+0x28>
 800b73c:	4bac      	ldr	r3, [pc, #688]	; (800b9f0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800b73e:	e00b      	b.n	800b758 <PWMBuiltIn_writeFrequency+0x40>
 800b740:	edd7 7a00 	vldr	s15, [r7]
 800b744:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800b9f4 <PWMBuiltIn_writeFrequency+0x2dc>
 800b748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b750:	dd01      	ble.n	800b756 <PWMBuiltIn_writeFrequency+0x3e>
 800b752:	4ba9      	ldr	r3, [pc, #676]	; (800b9f8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800b754:	e000      	b.n	800b758 <PWMBuiltIn_writeFrequency+0x40>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800b75e:	2301      	movs	r3, #1
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	e06f      	b.n	800b844 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800b764:	88fa      	ldrh	r2, [r7, #6]
 800b766:	49a5      	ldr	r1, [pc, #660]	; (800b9fc <PWMBuiltIn_writeFrequency+0x2e4>)
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	440b      	add	r3, r1
 800b778:	edd3 7a00 	vldr	s15, [r3]
 800b77c:	ed97 7a00 	vldr	s14, [r7]
 800b780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b788:	d859      	bhi.n	800b83e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800b78a:	4a9d      	ldr	r2, [pc, #628]	; (800ba00 <PWMBuiltIn_writeFrequency+0x2e8>)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3b01      	subs	r3, #1
 800b796:	499a      	ldr	r1, [pc, #616]	; (800ba00 <PWMBuiltIn_writeFrequency+0x2e8>)
 800b798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d124      	bne.n	800b7ea <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800b7a0:	4a97      	ldr	r2, [pc, #604]	; (800ba00 <PWMBuiltIn_writeFrequency+0x2e8>)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a8:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800b7aa:	88fb      	ldrh	r3, [r7, #6]
 800b7ac:	4a95      	ldr	r2, [pc, #596]	; (800ba04 <PWMBuiltIn_writeFrequency+0x2ec>)
 800b7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7ba:	edd7 7a00 	vldr	s15, [r7]
 800b7be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d6:	ee17 1a90 	vmov	r1, s15
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	4a8a      	ldr	r2, [pc, #552]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	1e4a      	subs	r2, r1, #1
 800b7e6:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800b7e8:	e02f      	b.n	800b84a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800b7ea:	88fb      	ldrh	r3, [r7, #6]
 800b7ec:	4a86      	ldr	r2, [pc, #536]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4985      	ldr	r1, [pc, #532]	; (800ba0c <PWMBuiltIn_writeFrequency+0x2f4>)
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7fc:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
 800b800:	4a80      	ldr	r2, [pc, #512]	; (800ba04 <PWMBuiltIn_writeFrequency+0x2ec>)
 800b802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b80e:	edd7 7a00 	vldr	s15, [r7]
 800b812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	4a7b      	ldr	r2, [pc, #492]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b822:	3301      	adds	r3, #1
 800b824:	ee07 3a90 	vmov	s15, r3
 800b828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b82c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b834:	ee17 3a90 	vmov	r3, s15
 800b838:	3b01      	subs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
			break;
 800b83c:	e005      	b.n	800b84a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	3301      	adds	r3, #1
 800b842:	613b      	str	r3, [r7, #16]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	2b09      	cmp	r3, #9
 800b848:	dd8c      	ble.n	800b764 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	4a6e      	ldr	r2, [pc, #440]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	429a      	cmp	r2, r3
 800b85a:	f000 80be 	beq.w	800b9da <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	e0a9      	b.n	800b9b8 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800b864:	4a68      	ldr	r2, [pc, #416]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	4966      	ldr	r1, [pc, #408]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b874:	429a      	cmp	r2, r3
 800b876:	f040 809c 	bne.w	800b9b2 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800b87a:	4a65      	ldr	r2, [pc, #404]	; (800ba10 <PWMBuiltIn_writeFrequency+0x2f8>)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d113      	bne.n	800b8ae <PWMBuiltIn_writeFrequency+0x196>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f8c2 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b890:	eef0 7a40 	vmov.f32	s15, s0
 800b894:	4a5c      	ldr	r2, [pc, #368]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b89c:	681c      	ldr	r4, [r3, #0]
 800b89e:	eeb0 0a67 	vmov.f32	s0, s15
 800b8a2:	6978      	ldr	r0, [r7, #20]
 800b8a4:	f7ff fe20 	bl	800b4e8 <duty2CCR>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	6363      	str	r3, [r4, #52]	; 0x34
 800b8ac:	e07a      	b.n	800b9a4 <PWMBuiltIn_writeFrequency+0x28c>
 800b8ae:	4a58      	ldr	r2, [pc, #352]	; (800ba10 <PWMBuiltIn_writeFrequency+0x2f8>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d113      	bne.n	800b8e2 <PWMBuiltIn_writeFrequency+0x1ca>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f8a8 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b8c4:	eef0 7a40 	vmov.f32	s15, s0
 800b8c8:	4a4f      	ldr	r2, [pc, #316]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d0:	681c      	ldr	r4, [r3, #0]
 800b8d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d6:	6978      	ldr	r0, [r7, #20]
 800b8d8:	f7ff fe06 	bl	800b4e8 <duty2CCR>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8e0:	e060      	b.n	800b9a4 <PWMBuiltIn_writeFrequency+0x28c>
 800b8e2:	4a4b      	ldr	r2, [pc, #300]	; (800ba10 <PWMBuiltIn_writeFrequency+0x2f8>)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d113      	bne.n	800b916 <PWMBuiltIn_writeFrequency+0x1fe>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f88e 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b8f8:	eef0 7a40 	vmov.f32	s15, s0
 800b8fc:	4a42      	ldr	r2, [pc, #264]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b904:	681c      	ldr	r4, [r3, #0]
 800b906:	eeb0 0a67 	vmov.f32	s0, s15
 800b90a:	6978      	ldr	r0, [r7, #20]
 800b90c:	f7ff fdec 	bl	800b4e8 <duty2CCR>
 800b910:	4603      	mov	r3, r0
 800b912:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b914:	e046      	b.n	800b9a4 <PWMBuiltIn_writeFrequency+0x28c>
 800b916:	4a3e      	ldr	r2, [pc, #248]	; (800ba10 <PWMBuiltIn_writeFrequency+0x2f8>)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91e:	2b0c      	cmp	r3, #12
 800b920:	d113      	bne.n	800b94a <PWMBuiltIn_writeFrequency+0x232>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	b29b      	uxth	r3, r3
 800b926:	4618      	mov	r0, r3
 800b928:	f000 f874 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b92c:	eef0 7a40 	vmov.f32	s15, s0
 800b930:	4a35      	ldr	r2, [pc, #212]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b938:	681c      	ldr	r4, [r3, #0]
 800b93a:	eeb0 0a67 	vmov.f32	s0, s15
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f7ff fdd2 	bl	800b4e8 <duty2CCR>
 800b944:	4603      	mov	r3, r0
 800b946:	6423      	str	r3, [r4, #64]	; 0x40
 800b948:	e02c      	b.n	800b9a4 <PWMBuiltIn_writeFrequency+0x28c>
 800b94a:	4a31      	ldr	r2, [pc, #196]	; (800ba10 <PWMBuiltIn_writeFrequency+0x2f8>)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b952:	2b10      	cmp	r3, #16
 800b954:	d113      	bne.n	800b97e <PWMBuiltIn_writeFrequency+0x266>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f85a 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b960:	eef0 7a40 	vmov.f32	s15, s0
 800b964:	4a28      	ldr	r2, [pc, #160]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b96c:	681c      	ldr	r4, [r3, #0]
 800b96e:	eeb0 0a67 	vmov.f32	s0, s15
 800b972:	6978      	ldr	r0, [r7, #20]
 800b974:	f7ff fdb8 	bl	800b4e8 <duty2CCR>
 800b978:	4603      	mov	r3, r0
 800b97a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b97c:	e012      	b.n	800b9a4 <PWMBuiltIn_writeFrequency+0x28c>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	b29b      	uxth	r3, r3
 800b982:	4618      	mov	r0, r3
 800b984:	f000 f846 	bl	800ba14 <PWMBuiltIn_readDuty>
 800b988:	eef0 7a40 	vmov.f32	s15, s0
 800b98c:	4a1e      	ldr	r2, [pc, #120]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b994:	681c      	ldr	r4, [r3, #0]
 800b996:	eeb0 0a67 	vmov.f32	s0, s15
 800b99a:	6978      	ldr	r0, [r7, #20]
 800b99c:	f7ff fda4 	bl	800b4e8 <duty2CCR>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800b9a4:	4a18      	ldr	r2, [pc, #96]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b13      	cmp	r3, #19
 800b9bc:	f77f af52 	ble.w	800b864 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	4a11      	ldr	r2, [pc, #68]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ba08 <PWMBuiltIn_writeFrequency+0x2f0>)
 800b9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	60da      	str	r2, [r3, #12]
	}
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd90      	pop	{r4, r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	f3af 8000 	nop.w
 800b9e8:	eb851eb8 	.word	0xeb851eb8
 800b9ec:	3f9eb851 	.word	0x3f9eb851
 800b9f0:	3cf5c28f 	.word	0x3cf5c28f
 800b9f4:	4bcdfe60 	.word	0x4bcdfe60
 800b9f8:	4bcdfe60 	.word	0x4bcdfe60
 800b9fc:	200009cc 	.word	0x200009cc
 800ba00:	2000097c 	.word	0x2000097c
 800ba04:	2000092c 	.word	0x2000092c
 800ba08:	2000027c 	.word	0x2000027c
 800ba0c:	200009a4 	.word	0x200009a4
 800ba10:	200002cc 	.word	0x200002cc

0800ba14 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	4a2a      	ldr	r2, [pc, #168]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800ba22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ba2a:	88fb      	ldrh	r3, [r7, #6]
 800ba2c:	4a28      	ldr	r2, [pc, #160]	; (800bad0 <PWMBuiltIn_readDuty+0xbc>)
 800ba2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <PWMBuiltIn_readDuty+0x30>
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	4a24      	ldr	r2, [pc, #144]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800ba3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba42:	e039      	b.n	800bab8 <PWMBuiltIn_readDuty+0xa4>
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	4a22      	ldr	r2, [pc, #136]	; (800bad0 <PWMBuiltIn_readDuty+0xbc>)
 800ba48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d106      	bne.n	800ba5e <PWMBuiltIn_readDuty+0x4a>
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	4a1e      	ldr	r2, [pc, #120]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800ba54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5c:	e02c      	b.n	800bab8 <PWMBuiltIn_readDuty+0xa4>
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	4a1b      	ldr	r2, [pc, #108]	; (800bad0 <PWMBuiltIn_readDuty+0xbc>)
 800ba62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba66:	2b08      	cmp	r3, #8
 800ba68:	d106      	bne.n	800ba78 <PWMBuiltIn_readDuty+0x64>
 800ba6a:	88fb      	ldrh	r3, [r7, #6]
 800ba6c:	4a17      	ldr	r2, [pc, #92]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800ba6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	e01f      	b.n	800bab8 <PWMBuiltIn_readDuty+0xa4>
 800ba78:	88fb      	ldrh	r3, [r7, #6]
 800ba7a:	4a15      	ldr	r2, [pc, #84]	; (800bad0 <PWMBuiltIn_readDuty+0xbc>)
 800ba7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba80:	2b0c      	cmp	r3, #12
 800ba82:	d106      	bne.n	800ba92 <PWMBuiltIn_readDuty+0x7e>
 800ba84:	88fb      	ldrh	r3, [r7, #6]
 800ba86:	4a11      	ldr	r2, [pc, #68]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800ba88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	e012      	b.n	800bab8 <PWMBuiltIn_readDuty+0xa4>
 800ba92:	88fb      	ldrh	r3, [r7, #6]
 800ba94:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <PWMBuiltIn_readDuty+0xbc>)
 800ba96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba9a:	2b10      	cmp	r3, #16
 800ba9c:	d106      	bne.n	800baac <PWMBuiltIn_readDuty+0x98>
 800ba9e:	88fb      	ldrh	r3, [r7, #6]
 800baa0:	4a0a      	ldr	r2, [pc, #40]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800baa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baaa:	e005      	b.n	800bab8 <PWMBuiltIn_readDuty+0xa4>
 800baac:	88fb      	ldrh	r3, [r7, #6]
 800baae:	4a07      	ldr	r2, [pc, #28]	; (800bacc <PWMBuiltIn_readDuty+0xb8>)
 800bab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bab8:	4619      	mov	r1, r3
 800baba:	f7ff fd3c 	bl	800b536 <CCR2duty>
 800babe:	eef0 7a40 	vmov.f32	s15, s0
}
 800bac2:	eeb0 0a67 	vmov.f32	s0, s15
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2000027c 	.word	0x2000027c
 800bad0:	200002cc 	.word	0x200002cc

0800bad4 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800badc:	4a07      	ldr	r2, [pc, #28]	; (800bafc <PWMBuiltInStartChannel+0x28>)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bae4:	4a06      	ldr	r2, [pc, #24]	; (800bb00 <PWMBuiltInStartChannel+0x2c>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baec:	4619      	mov	r1, r3
 800baee:	f7f8 fd39 	bl	8004564 <HAL_TIM_PWM_Start>
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	2000027c 	.word	0x2000027c
 800bb00:	200002cc 	.word	0x200002cc

0800bb04 <PWMBuiltInStart>:
{
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
}

void PWMBuiltInStart()
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	e005      	b.n	800bb1c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff ffdf 	bl	800bad4 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	607b      	str	r3, [r7, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b13      	cmp	r3, #19
 800bb20:	ddf6      	ble.n	800bb10 <PWMBuiltInStart+0xc>
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	e072      	b.n	800bc1e <PWMBuiltIn_init+0xf2>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800bb38:	4a3d      	ldr	r2, [pc, #244]	; (800bc30 <PWMBuiltIn_init+0x104>)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fd17 	bl	800b574 <getTIM_SOURCECLK>
 800bb46:	4601      	mov	r1, r0
 800bb48:	4a3a      	ldr	r2, [pc, #232]	; (800bc34 <PWMBuiltIn_init+0x108>)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800bb50:	2300      	movs	r3, #0
 800bb52:	613b      	str	r3, [r7, #16]
 800bb54:	e04c      	b.n	800bbf0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800bb56:	4a38      	ldr	r2, [pc, #224]	; (800bc38 <PWMBuiltIn_init+0x10c>)
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	fa02 f303 	lsl.w	r3, r2, r3
 800bb64:	1e5a      	subs	r2, r3, #1
 800bb66:	4935      	ldr	r1, [pc, #212]	; (800bc3c <PWMBuiltIn_init+0x110>)
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800bb6e:	4a34      	ldr	r2, [pc, #208]	; (800bc40 <PWMBuiltIn_init+0x114>)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb76:	2201      	movs	r2, #1
 800bb78:	fa02 f303 	lsl.w	r3, r2, r3
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	4931      	ldr	r1, [pc, #196]	; (800bc44 <PWMBuiltIn_init+0x118>)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800bb86:	4a2d      	ldr	r2, [pc, #180]	; (800bc3c <PWMBuiltIn_init+0x110>)
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	ee07 3a90 	vmov	s15, r3
 800bb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb98:	edc7 7a02 	vstr	s15, [r7, #8]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800bb9c:	4a29      	ldr	r2, [pc, #164]	; (800bc44 <PWMBuiltIn_init+0x118>)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bba4:	3301      	adds	r3, #1
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbae:	edc7 7a01 	vstr	s15, [r7, #4]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800bbb2:	4a20      	ldr	r2, [pc, #128]	; (800bc34 <PWMBuiltIn_init+0x108>)
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bbc2:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bbca:	ed97 7a01 	vldr	s14, [r7, #4]
 800bbce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd2:	491d      	ldr	r1, [pc, #116]	; (800bc48 <PWMBuiltIn_init+0x11c>)
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	3301      	adds	r3, #1
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	ddaf      	ble.n	800bb56 <PWMBuiltIn_init+0x2a>
		}
		float _duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?0:1;
 800bbf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bbfa:	60fb      	str	r3, [r7, #12]
		PWMBuiltIn_writeDuty(i,_duty);
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff fce9 	bl	800b5dc <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800bc4c <PWMBuiltIn_init+0x120>
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff fd80 	bl	800b718 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	617b      	str	r3, [r7, #20]
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b13      	cmp	r3, #19
 800bc22:	dd89      	ble.n	800bb38 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800bc24:	f7ff ff6e 	bl	800bb04 <PWMBuiltInStart>
}
 800bc28:	bf00      	nop
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000027c 	.word	0x2000027c
 800bc34:	2000092c 	.word	0x2000092c
 800bc38:	2000031c 	.word	0x2000031c
 800bc3c:	2000097c 	.word	0x2000097c
 800bc40:	20000344 	.word	0x20000344
 800bc44:	200009a4 	.word	0x200009a4
 800bc48:	200009cc 	.word	0x200009cc
 800bc4c:	42200000 	.word	0x42200000

0800bc50 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	ed87 0a01 	vstr	s0, [r7, #4]
 800bc5e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc64:	7afb      	ldrb	r3, [r7, #11]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
	...

0800bc7c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc8c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d15b      	bne.n	800bd50 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	ed93 7a00 	vldr	s14, [r3]
 800bc9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bca6:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcae:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcb6:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800bcc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcca:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	ed93 7a00 	vldr	s14, [r3]
 800bcd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcdc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bce4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bcf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcfa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	ed93 7a00 	vldr	s14, [r3]
 800bd04:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd0c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd14:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd20:	3308      	adds	r3, #8
 800bd22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bd26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd2a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	ed93 7a00 	vldr	s14, [r3]
 800bd34:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd40:	330c      	adds	r3, #12
 800bd42:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800bd4e:	e0fc      	b.n	800bf4a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	f040 80f7 	bne.w	800bf4a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	ed93 7a00 	vldr	s14, [r3]
 800bd62:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd6a:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd72:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd7a:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd82:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd96:	eddf 6a70 	vldr	s13, [pc, #448]	; 800bf58 <kalman_setQ+0x2dc>
 800bd9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd9e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	ed93 7a00 	vldr	s14, [r3]
 800bda8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800bdda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdde:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	ed93 7a00 	vldr	s14, [r3]
 800bde8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be00:	edd7 7a03 	vldr	s15, [r7, #12]
 800be04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0c:	3308      	adds	r3, #8
 800be0e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800be12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be16:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	ed93 7a00 	vldr	s14, [r3]
 800be20:	edd7 7a03 	vldr	s15, [r7, #12]
 800be24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be28:	edd7 7a03 	vldr	s15, [r7, #12]
 800be2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be30:	edd7 7a03 	vldr	s15, [r7, #12]
 800be34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be38:	edd7 7a03 	vldr	s15, [r7, #12]
 800be3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be40:	edd7 7a03 	vldr	s15, [r7, #12]
 800be44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4c:	330c      	adds	r3, #12
 800be4e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800be52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be56:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	ed93 7a00 	vldr	s14, [r3]
 800be60:	edd7 7a03 	vldr	s15, [r7, #12]
 800be64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be68:	edd7 7a03 	vldr	s15, [r7, #12]
 800be6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be70:	edd7 7a03 	vldr	s15, [r7, #12]
 800be74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be78:	edd7 7a03 	vldr	s15, [r7, #12]
 800be7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be84:	3310      	adds	r3, #16
 800be86:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800be8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be8e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	ed93 7a00 	vldr	s14, [r3]
 800be98:	edd7 7a03 	vldr	s15, [r7, #12]
 800be9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea8:	edd7 7a03 	vldr	s15, [r7, #12]
 800beac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb4:	3314      	adds	r3, #20
 800beb6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800beba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bebe:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	ed93 7a00 	vldr	s14, [r3]
 800bec8:	edd7 7a03 	vldr	s15, [r7, #12]
 800becc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bedc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bee0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beec:	3318      	adds	r3, #24
 800beee:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800bef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bef6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	ed93 7a00 	vldr	s14, [r3]
 800bf00:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf08:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf10:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	331c      	adds	r3, #28
 800bf1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bf22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf26:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	ed93 7a00 	vldr	s14, [r3]
 800bf30:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3c:	3320      	adds	r3, #32
 800bf3e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf46:	edc3 7a00 	vstr	s15, [r3]
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	42100000 	.word	0x42100000

0800bf5c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d105      	bne.n	800bf7c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800bf7a:	e039      	b.n	800bff0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d134      	bne.n	800bff0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	6812      	ldr	r2, [r2, #0]
 800bf8e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf94:	3304      	adds	r3, #4
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfac:	330c      	adds	r3, #12
 800bfae:	f04f 0200 	mov.w	r2, #0
 800bfb2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb8:	3310      	adds	r3, #16
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	6852      	ldr	r2, [r2, #4]
 800bfbe:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc4:	3314      	adds	r3, #20
 800bfc6:	f04f 0200 	mov.w	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd0:	3318      	adds	r3, #24
 800bfd2:	f04f 0200 	mov.w	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfdc:	331c      	adds	r3, #28
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe8:	3320      	adds	r3, #32
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	6892      	ldr	r2, [r2, #8]
 800bfee:	601a      	str	r2, [r3, #0]
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	ed87 0a03 	vstr	s0, [r7, #12]
 800c006:	edc7 0a02 	vstr	s1, [r7, #8]
 800c00a:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800c00e:	f107 0108 	add.w	r1, r7, #8
 800c012:	f107 030c 	add.w	r3, r7, #12
 800c016:	2200      	movs	r2, #0
 800c018:	ed97 0a01 	vldr	s0, [r7, #4]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 f807 	bl	800c030 <KALMANFILTER>
 800c022:	6178      	str	r0, [r7, #20]
	return pk;
 800c024:	697b      	ldr	r3, [r7, #20]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800c042:	20c4      	movs	r0, #196	; 0xc4
 800c044:	f003 ff0a 	bl	800fe5c <malloc>
 800c048:	4603      	mov	r3, r0
 800c04a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <KALMANFILTER+0x26>
		return NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	e10e      	b.n	800c274 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800c056:	22c4      	movs	r2, #196	; 0xc4
 800c058:	2100      	movs	r1, #0
 800c05a:	6978      	ldr	r0, [r7, #20]
 800c05c:	f003 ff11 	bl	800fe82 <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	887a      	ldrh	r2, [r7, #2]
 800c064:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800c068:	6978      	ldr	r0, [r7, #20]
 800c06a:	f000 f90f 	bl	800c28c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	4a82      	ldr	r2, [pc, #520]	; (800c27c <KALMANFILTER+0x24c>)
 800c072:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	4a81      	ldr	r2, [pc, #516]	; (800c280 <KALMANFILTER+0x250>)
 800c07a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	4a80      	ldr	r2, [pc, #512]	; (800c284 <KALMANFILTER+0x254>)
 800c082:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	4a7f      	ldr	r2, [pc, #508]	; (800c288 <KALMANFILTER+0x258>)
 800c08a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800c096:	887b      	ldrh	r3, [r7, #2]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	f040 8095 	bne.w	800c1c8 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c0a6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800c0b2:	ed97 7a01 	vldr	s14, [r7, #4]
 800c0b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c0c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0cc:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	330c      	adds	r3, #12
 800c0d6:	f04f 0200 	mov.w	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	3310      	adds	r3, #16
 800c0e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c0e6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	3314      	adds	r3, #20
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	3318      	adds	r3, #24
 800c0f8:	f04f 0200 	mov.w	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	331c      	adds	r3, #28
 800c104:	f04f 0200 	mov.w	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	3320      	adds	r3, #32
 800c110:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c114:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f04f 0200 	mov.w	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	3304      	adds	r3, #4
 800c126:	f04f 0200 	mov.w	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	69db      	ldr	r3, [r3, #28]
 800c130:	3308      	adds	r3, #8
 800c132:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c136:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c140:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	3304      	adds	r3, #4
 800c148:	f04f 0200 	mov.w	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	3308      	adds	r3, #8
 800c154:	f04f 0200 	mov.w	r2, #0
 800c158:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15e:	330c      	adds	r3, #12
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16a:	3310      	adds	r3, #16
 800c16c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c170:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c176:	3314      	adds	r3, #20
 800c178:	f04f 0200 	mov.w	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	3318      	adds	r3, #24
 800c184:	f04f 0200 	mov.w	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	331c      	adds	r3, #28
 800c190:	f04f 0200 	mov.w	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	3320      	adds	r3, #32
 800c19c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1a0:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f103 0210 	add.w	r2, r3, #16
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	3350      	adds	r3, #80	; 0x50
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7f4 fe87 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f103 0220 	add.w	r2, r3, #32
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	3358      	adds	r3, #88	; 0x58
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7f4 fe7e 	bl	8000ec2 <arm_mat_trans_f32>
 800c1c6:	e048      	b.n	800c25a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800c1c8:	887b      	ldrh	r3, [r7, #2]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d145      	bne.n	800c25a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1d6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	f04f 0200 	mov.w	r2, #0
 800c1ec:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	330c      	adds	r3, #12
 800c1f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1f8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800c1fa:	ed97 7a01 	vldr	s14, [r7, #4]
 800c1fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800c202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c20e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c212:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	3304      	adds	r3, #4
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c228:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	3304      	adds	r3, #4
 800c230:	f04f 0200 	mov.w	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f103 0210 	add.w	r2, r3, #16
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3350      	adds	r3, #80	; 0x50
 800c240:	4619      	mov	r1, r3
 800c242:	4610      	mov	r0, r2
 800c244:	f7f4 fe3d 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f103 0220 	add.w	r2, r3, #32
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	3358      	adds	r3, #88	; 0x58
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7f4 fe34 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c260:	68f9      	ldr	r1, [r7, #12]
 800c262:	6978      	ldr	r0, [r7, #20]
 800c264:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	6978      	ldr	r0, [r7, #20]
 800c270:	4798      	blx	r3

	return ptKalmanFilter;
 800c272:	697b      	ldr	r3, [r7, #20]
	
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	0800c5fd 	.word	0x0800c5fd
 800c280:	0800bc7d 	.word	0x0800bc7d
 800c284:	0800bf5d 	.word	0x0800bf5d
 800c288:	0800bc51 	.word	0x0800bc51

0800c28c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	f040 80d9 	bne.w	800c452 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800c2a0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800c2a4:	f003 fdda 	bl	800fe5c <malloc>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c2b8:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800c2ba:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800c2be:	2100      	movs	r1, #0
 800c2c0:	68b8      	ldr	r0, [r7, #8]
 800c2c2:	f003 fdde 	bl	800fe82 <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	2103      	movs	r1, #3
 800c2ce:	f7f4 fa27 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f103 0010 	add.w	r0, r3, #16
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	330c      	adds	r3, #12
 800c2dc:	2203      	movs	r2, #3
 800c2de:	2103      	movs	r1, #3
 800c2e0:	f7f4 fa1e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f103 0018 	add.w	r0, r3, #24
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	3330      	adds	r3, #48	; 0x30
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	2103      	movs	r1, #3
 800c2f2:	f7f4 fa15 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f103 0008 	add.w	r0, r3, #8
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	333c      	adds	r3, #60	; 0x3c
 800c300:	2201      	movs	r2, #1
 800c302:	2101      	movs	r1, #1
 800c304:	f7f4 fa0c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f103 0020 	add.w	r0, r3, #32
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	3340      	adds	r3, #64	; 0x40
 800c312:	2203      	movs	r2, #3
 800c314:	2103      	movs	r1, #3
 800c316:	f7f4 fa03 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	33f4      	adds	r3, #244	; 0xf4
 800c324:	2201      	movs	r2, #1
 800c326:	2103      	movs	r1, #3
 800c328:	f7f4 f9fa 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	3364      	adds	r3, #100	; 0x64
 800c336:	2203      	movs	r2, #3
 800c338:	2103      	movs	r1, #3
 800c33a:	f7f4 f9f1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3388      	adds	r3, #136	; 0x88
 800c348:	2203      	movs	r2, #3
 800c34a:	2103      	movs	r1, #3
 800c34c:	f7f4 f9e8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	33ac      	adds	r3, #172	; 0xac
 800c35a:	2203      	movs	r2, #3
 800c35c:	2103      	movs	r1, #3
 800c35e:	f7f4 f9df 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	33d0      	adds	r3, #208	; 0xd0
 800c36c:	2203      	movs	r2, #3
 800c36e:	2103      	movs	r1, #3
 800c370:	f7f4 f9d6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c380:	2203      	movs	r2, #3
 800c382:	2103      	movs	r1, #3
 800c384:	f7f4 f9cc 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c394:	2203      	movs	r2, #3
 800c396:	2103      	movs	r1, #3
 800c398:	f7f4 f9c2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	2103      	movs	r1, #3
 800c3ac:	f7f4 f9b8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c3bc:	2203      	movs	r2, #3
 800c3be:	2103      	movs	r1, #3
 800c3c0:	f7f4 f9ae 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	2103      	movs	r1, #3
 800c3d4:	f7f4 f9a4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	2103      	movs	r1, #3
 800c3e8:	f7f4 f99a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c3f8:	2203      	movs	r2, #3
 800c3fa:	2103      	movs	r1, #3
 800c3fc:	f7f4 f990 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c40c:	2201      	movs	r2, #1
 800c40e:	2103      	movs	r1, #3
 800c410:	f7f4 f986 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c420:	2201      	movs	r2, #1
 800c422:	2103      	movs	r1, #3
 800c424:	f7f4 f97c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c434:	2201      	movs	r2, #1
 800c436:	2103      	movs	r1, #3
 800c438:	f7f4 f972 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800c448:	2201      	movs	r2, #1
 800c44a:	2103      	movs	r1, #3
 800c44c:	f7f4 f968 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800c450:	e0d0      	b.n	800c5f4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f040 80cb 	bne.w	800c5f4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800c45e:	20bc      	movs	r0, #188	; 0xbc
 800c460:	f003 fcfc 	bl	800fe5c <malloc>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c474:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800c476:	22bc      	movs	r2, #188	; 0xbc
 800c478:	2100      	movs	r1, #0
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f003 fd01 	bl	800fe82 <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2201      	movs	r2, #1
 800c486:	2102      	movs	r1, #2
 800c488:	f7f4 f94a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f103 0010 	add.w	r0, r3, #16
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3308      	adds	r3, #8
 800c496:	2202      	movs	r2, #2
 800c498:	2102      	movs	r1, #2
 800c49a:	f7f4 f941 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f103 0018 	add.w	r0, r3, #24
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3318      	adds	r3, #24
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	f7f4 f938 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f103 0008 	add.w	r0, r3, #8
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3320      	adds	r3, #32
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	2101      	movs	r1, #1
 800c4be:	f7f4 f92f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f103 0020 	add.w	r0, r3, #32
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	3324      	adds	r3, #36	; 0x24
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	f7f4 f926 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3358      	adds	r3, #88	; 0x58
 800c4de:	2201      	movs	r2, #1
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	f7f4 f91d 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	332c      	adds	r3, #44	; 0x2c
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	2102      	movs	r1, #2
 800c4f4:	f7f4 f914 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	333c      	adds	r3, #60	; 0x3c
 800c502:	2202      	movs	r2, #2
 800c504:	2102      	movs	r1, #2
 800c506:	f7f4 f90b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	334c      	adds	r3, #76	; 0x4c
 800c514:	2201      	movs	r2, #1
 800c516:	2101      	movs	r1, #1
 800c518:	f7f4 f902 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3350      	adds	r3, #80	; 0x50
 800c526:	2201      	movs	r2, #1
 800c528:	2102      	movs	r1, #2
 800c52a:	f7f4 f8f9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	335c      	adds	r3, #92	; 0x5c
 800c538:	2202      	movs	r2, #2
 800c53a:	2102      	movs	r1, #2
 800c53c:	f7f4 f8f0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	336c      	adds	r3, #108	; 0x6c
 800c54a:	2201      	movs	r2, #1
 800c54c:	2102      	movs	r1, #2
 800c54e:	f7f4 f8e7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3374      	adds	r3, #116	; 0x74
 800c55c:	2201      	movs	r2, #1
 800c55e:	2102      	movs	r1, #2
 800c560:	f7f4 f8de 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	337c      	adds	r3, #124	; 0x7c
 800c56e:	2202      	movs	r2, #2
 800c570:	2102      	movs	r1, #2
 800c572:	f7f4 f8d5 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	338c      	adds	r3, #140	; 0x8c
 800c580:	2202      	movs	r2, #2
 800c582:	2102      	movs	r1, #2
 800c584:	f7f4 f8cc 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	339c      	adds	r3, #156	; 0x9c
 800c592:	2201      	movs	r2, #1
 800c594:	2101      	movs	r1, #1
 800c596:	f7f4 f8c3 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	33a0      	adds	r3, #160	; 0xa0
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	f7f4 f8ba 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	33a4      	adds	r3, #164	; 0xa4
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	f7f4 f8b1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	33a8      	adds	r3, #168	; 0xa8
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	f7f4 f8a8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	33ac      	adds	r3, #172	; 0xac
 800c5da:	2201      	movs	r2, #1
 800c5dc:	2102      	movs	r1, #2
 800c5de:	f7f4 f89f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	33b4      	adds	r3, #180	; 0xb4
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	2102      	movs	r1, #2
 800c5f0:	f7f4 f896 	bl	8000720 <arm_mat_init_f32>
}
 800c5f4:	bf00      	nop
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f103 0010 	add.w	r0, r3, #16
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3398      	adds	r3, #152	; 0x98
 800c610:	461a      	mov	r2, r3
 800c612:	f7f4 fad5 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f103 0010 	add.w	r0, r3, #16
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3368      	adds	r3, #104	; 0x68
 800c626:	461a      	mov	r2, r3
 800c628:	f7f4 faca 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3370      	adds	r3, #112	; 0x70
 800c63c:	461a      	mov	r2, r3
 800c63e:	f7f4 fabf 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3368      	adds	r3, #104	; 0x68
 800c652:	461a      	mov	r2, r3
 800c654:	f7f3 ffcc 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3360      	adds	r3, #96	; 0x60
 800c668:	461a      	mov	r2, r3
 800c66a:	f7f4 faa9 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f103 0020 	add.w	r0, r3, #32
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3378      	adds	r3, #120	; 0x78
 800c67e:	461a      	mov	r2, r3
 800c680:	f7f4 fa9e 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3380      	adds	r3, #128	; 0x80
 800c694:	461a      	mov	r2, r3
 800c696:	f7f3 ffab 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3378      	adds	r3, #120	; 0x78
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	f7f4 f852 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3348      	adds	r3, #72	; 0x48
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f7f4 fa7f 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f103 0020 	add.w	r0, r3, #32
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3388      	adds	r3, #136	; 0x88
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f7f4 fa74 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	3390      	adds	r3, #144	; 0x90
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	f7f4 fb52 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	33a0      	adds	r3, #160	; 0xa0
 800c6fe:	461a      	mov	r2, r3
 800c700:	f7f4 fa5e 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	33a0      	adds	r3, #160	; 0xa0
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	4619      	mov	r1, r3
 800c712:	f7f3 ff6d 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f103 0120 	add.w	r1, r3, #32
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3330      	adds	r3, #48	; 0x30
 800c726:	461a      	mov	r2, r3
 800c728:	f7f4 fa4a 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3370      	adds	r3, #112	; 0x70
 800c73c:	461a      	mov	r2, r3
 800c73e:	f7f4 fa3f 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3330      	adds	r3, #48	; 0x30
 800c752:	461a      	mov	r2, r3
 800c754:	f7f4 fb1d 	bl	8000d92 <arm_mat_sub_f32>

}
 800c758:	bf00      	nop
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800c760:	b480      	push	{r7}
 800c762:	b089      	sub	sp, #36	; 0x24
 800c764:	af00      	add	r7, sp, #0
 800c766:	61f8      	str	r0, [r7, #28]
 800c768:	ed87 0a06 	vstr	s0, [r7, #24]
 800c76c:	edc7 0a05 	vstr	s1, [r7, #20]
 800c770:	ed87 1a04 	vstr	s2, [r7, #16]
 800c774:	edc7 1a03 	vstr	s3, [r7, #12]
 800c778:	ed87 2a02 	vstr	s4, [r7, #8]
 800c77c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	69ba      	ldr	r2, [r7, #24]
 800c784:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c798:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	f04f 0200 	mov.w	r2, #0
 800c7a0:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c7ae:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	f04f 0200 	mov.w	r2, #0
 800c7b6:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	4a2f      	ldr	r2, [pc, #188]	; (800c878 <initPID+0x118>)
 800c7bc:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	ed93 7a00 	vldr	s14, [r3]
 800c7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	edd3 6a08 	vldr	s13, [r3, #32]
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	ed93 6a07 	vldr	s12, [r3, #28]
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	edd3 7a05 	vldr	s15, [r3, #20]
 800c7ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c7f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	edd3 7a00 	vldr	s15, [r3]
 800c804:	eeb1 7a67 	vneg.f32	s14, s15
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	edd3 7a07 	vldr	s15, [r3, #28]
 800c80e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	f04f 0200 	mov.w	r2, #0
 800c828:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	f04f 0200 	mov.w	r2, #0
 800c830:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f04f 0200 	mov.w	r2, #0
 800c838:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	f04f 0200 	mov.w	r2, #0
 800c840:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800c848:	edd7 7a02 	vldr	s15, [r7, #8]
 800c84c:	eef1 7a67 	vneg.f32	s15, s15
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800c85c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c860:	eef1 7a67 	vneg.f32	s15, s15
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800c86a:	bf00      	nop
 800c86c:	3724      	adds	r7, #36	; 0x24
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	41700000 	.word	0x41700000

0800c87c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	ed87 0a05 	vstr	s0, [r7, #20]
 800c886:	edc7 0a04 	vstr	s1, [r7, #16]
 800c88a:	ed87 1a03 	vstr	s2, [r7, #12]
 800c88e:	edc7 1a02 	vstr	s3, [r7, #8]
 800c892:	ed87 2a01 	vstr	s4, [r7, #4]
 800c896:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800c89a:	2054      	movs	r0, #84	; 0x54
 800c89c:	f003 fade 	bl	800fe5c <malloc>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <newPID+0x32>
		return NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e014      	b.n	800c8d8 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800c8ae:	2254      	movs	r2, #84	; 0x54
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	69f8      	ldr	r0, [r7, #28]
 800c8b4:	f003 fae5 	bl	800fe82 <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800c8b8:	edd7 2a00 	vldr	s5, [r7]
 800c8bc:	ed97 2a01 	vldr	s4, [r7, #4]
 800c8c0:	edd7 1a02 	vldr	s3, [r7, #8]
 800c8c4:	ed97 1a03 	vldr	s2, [r7, #12]
 800c8c8:	edd7 0a04 	vldr	s1, [r7, #16]
 800c8cc:	ed97 0a05 	vldr	s0, [r7, #20]
 800c8d0:	69f8      	ldr	r0, [r7, #28]
 800c8d2:	f7ff ff45 	bl	800c760 <initPID>
	return pp;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3720      	adds	r7, #32
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0

	 //for application use
	// myInitUsartMode(&huart2,usartIntMode);

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,usartDMAIdleMode);
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	4802      	ldr	r0, [pc, #8]	; (800c8f0 <my_UsartInit+0x10>)
 800c8e8:	f000 f804 	bl	800c8f4 <myInitUsartMode>

	 //Enable printf Binany
	// printfBin_init();
}
 800c8ec:	bf00      	nop
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	2000acbc 	.word	0x2000acbc

0800c8f4 <myInitUsartMode>:

static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 f843 	bl	800c98c <getUsartDevice>
 800c906:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800c908:	f242 32f4 	movw	r2, #9204	; 0x23f4
 800c90c:	2100      	movs	r1, #0
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f003 fab7 	bl	800fe82 <memset>
	uartDev->huart = huart;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800c920:	68f9      	ldr	r1, [r7, #12]
 800c922:	f242 1354 	movw	r3, #8532	; 0x2154
 800c926:	440b      	add	r3, r1
 800c928:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f242 1258 	movw	r2, #8536	; 0x2158
 800c930:	441a      	add	r2, r3
 800c932:	68f9      	ldr	r1, [r7, #12]
 800c934:	f242 334c 	movw	r3, #9036	; 0x234c
 800c938:	440b      	add	r3, r1
 800c93a:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800c942:	68f9      	ldr	r1, [r7, #12]
 800c944:	f242 33e0 	movw	r3, #9184	; 0x23e0
 800c948:	440b      	add	r3, r1
 800c94a:	601a      	str	r2, [r3, #0]
	uartDev->usartmode=usartMode;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	78fa      	ldrb	r2, [r7, #3]
 800c950:	711a      	strb	r2, [r3, #4]
	if(usartMode==usartIntMode){
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d108      	bne.n	800c96a <myInitUsartMode+0x76>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f042 0220 	orr.w	r2, r2, #32
 800c966:	601a      	str	r2, [r3, #0]
	//	 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	//	 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800c968:	e00c      	b.n	800c984 <myInitUsartMode+0x90>
	else if(usartMode==usartDMACircularMode){
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d109      	bne.n	800c984 <myInitUsartMode+0x90>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6818      	ldr	r0, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800c97a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c97e:	4619      	mov	r1, r3
 800c980:	f7f8 ff00 	bl	8005784 <HAL_UART_Receive_DMA>
}
 800c984:	bf00      	nop
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <getUsartDevice>:

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a0c      	ldr	r2, [pc, #48]	; (800c9c8 <getUsartDevice+0x3c>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d101      	bne.n	800c9a0 <getUsartDevice+0x14>
		return &Usart1Device;
 800c99c:	4b0b      	ldr	r3, [pc, #44]	; (800c9cc <getUsartDevice+0x40>)
 800c99e:	e00c      	b.n	800c9ba <getUsartDevice+0x2e>
	if(huart==&huart2)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a0b      	ldr	r2, [pc, #44]	; (800c9d0 <getUsartDevice+0x44>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d101      	bne.n	800c9ac <getUsartDevice+0x20>
		return &Usart2Device;
 800c9a8:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <getUsartDevice+0x48>)
 800c9aa:	e006      	b.n	800c9ba <getUsartDevice+0x2e>
	if(huart==&huart3)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a0a      	ldr	r2, [pc, #40]	; (800c9d8 <getUsartDevice+0x4c>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d101      	bne.n	800c9b8 <getUsartDevice+0x2c>
		return &Usart3Device;
 800c9b4:	4b09      	ldr	r3, [pc, #36]	; (800c9dc <getUsartDevice+0x50>)
 800c9b6:	e000      	b.n	800c9ba <getUsartDevice+0x2e>
	return &Usart3Device;
 800c9b8:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <getUsartDevice+0x50>)
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	2000ae5c 	.word	0x2000ae5c
 800c9cc:	2000d3d4 	.word	0x2000d3d4
 800c9d0:	2000aedc 	.word	0x2000aedc
 800c9d4:	2000afe0 	.word	0x2000afe0
 800c9d8:	2000acbc 	.word	0x2000acbc
 800c9dc:	2000f7c8 	.word	0x2000f7c8

0800c9e0 <_write>:
/************************************			*************************************/
/************************************	Transfer*************************************/
/************************************			************************************/
/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len){
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
	return my_write_DMA(&huart3,(uint8_t *)pSrc,len);
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <_write+0x20>)
 800c9f2:	f000 f807 	bl	800ca04 <my_write_DMA>
 800c9f6:	4603      	mov	r3, r0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	2000acbc 	.word	0x2000acbc

0800ca04 <my_write_DMA>:
int my_write_DMA(UART_HandleTypeDef *huart, uint8_t *pSrc, int len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff ffbb 	bl	800c98c <getUsartDevice>
 800ca16:	6178      	str	r0, [r7, #20]
	uint8_t *pDes=uartDev->TxBuf[uartDev->producerTxBufNum];
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	f641 7348 	movw	r3, #8008	; 0x1f48
 800ca1e:	4413      	add	r3, r2
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ca28:	fb03 f302 	mul.w	r3, r3, r2
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	4413      	add	r3, r2
 800ca30:	3305      	adds	r3, #5
 800ca32:	613b      	str	r3, [r7, #16]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	461a      	mov	r2, r3
 800ca38:	68b9      	ldr	r1, [r7, #8]
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f003 fa16 	bl	800fe6c <memcpy>
	*(pDes+len)='\0';
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	4413      	add	r3, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	701a      	strb	r2, [r3, #0]
	uartDev->countTxBuf[uartDev->producerTxBufNum] = len;
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	f641 7348 	movw	r3, #8008	; 0x1f48
 800ca50:	4413      	add	r3, r2
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	b291      	uxth	r1, r2
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	4413      	add	r3, r2
 800ca62:	460a      	mov	r2, r1
 800ca64:	809a      	strh	r2, [r3, #4]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	uartDev->bufferedTxNum++;
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800ca6c:	4413      	add	r3, r2
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	3301      	adds	r3, #1
 800ca72:	b299      	uxth	r1, r3
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800ca7a:	4413      	add	r3, r2
 800ca7c:	460a      	mov	r2, r1
 800ca7e:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(uartDev->bufferedTxNum == 1){
 800ca80:	697a      	ldr	r2, [r7, #20]
 800ca82:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800ca86:	4413      	add	r3, r2
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d119      	bne.n	800cac2 <my_write_DMA+0xbe>
		HAL_UART_Transmit_DMA(uartDev->huart,pDes,uartDev->countTxBuf[uartDev->producerTxBufNum]);
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	f641 7348 	movw	r3, #8008	; 0x1f48
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	4413      	add	r3, r2
 800caa6:	889b      	ldrh	r3, [r3, #4]
 800caa8:	461a      	mov	r2, r3
 800caaa:	6939      	ldr	r1, [r7, #16]
 800caac:	f7f8 fdee 	bl	800568c <HAL_UART_Transmit_DMA>
		uartDev->TxStart = micros();
 800cab0:	f7fe fb94 	bl	800b1dc <micros>
 800cab4:	4601      	mov	r1, r0
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800cabc:	4413      	add	r3, r2
 800cabe:	6019      	str	r1, [r3, #0]
 800cac0:	e00a      	b.n	800cad8 <my_write_DMA+0xd4>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the uartDevs would somehow suddenly lost the configurations
		uartDev->bufferedTxNum=uartDev->bufferedTxNum-1+1;
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cac8:	4413      	add	r3, r2
 800caca:	8819      	ldrh	r1, [r3, #0]
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cad2:	4413      	add	r3, r2
 800cad4:	460a      	mov	r2, r1
 800cad6:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	uartDev->producerTxBufNum++;
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cade:	4413      	add	r3, r2
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	b299      	uxth	r1, r3
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	f641 7348 	movw	r3, #8008	; 0x1f48
 800caec:	4413      	add	r3, r2
 800caee:	460a      	mov	r2, r1
 800caf0:	801a      	strh	r2, [r3, #0]
	uartDev->producerTxBufNum%=UART_TX_BUF_NUM;
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	f641 7348 	movw	r3, #8008	; 0x1f48
 800caf8:	4413      	add	r3, r2
 800cafa:	881a      	ldrh	r2, [r3, #0]
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <my_write_DMA+0x124>)
 800cafe:	fba3 1302 	umull	r1, r3, r3, r2
 800cb02:	08d9      	lsrs	r1, r3, #3
 800cb04:	460b      	mov	r3, r1
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	b299      	uxth	r1, r3
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cb16:	4413      	add	r3, r2
 800cb18:	460a      	mov	r2, r1
 800cb1a:	801a      	strh	r2, [r3, #0]
//	while(uartDev->bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800cb1c:	687b      	ldr	r3, [r7, #4]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	cccccccd 	.word	0xcccccccd

0800cb2c <HAL_UART_TxCpltCallback>:
/************************************							*************************************/
/************************************Transfer Complete Callback*************************************/
/************************************							************************************/
/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback for all usart*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff29 	bl	800c98c <getUsartDevice>
 800cb3a:	6178      	str	r0, [r7, #20]
	if(uartDev->usartmode==usartDMAIdleMode){
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	791b      	ldrb	r3, [r3, #4]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	f040 808a 	bne.w	800cc5a <HAL_UART_TxCpltCallback+0x12e>
		UART_DEVICE *uartDev=getUsartDevice(huart);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ff20 	bl	800c98c <getUsartDevice>
 800cb4c:	6138      	str	r0, [r7, #16]
		 /*update information*/
		 uartDev->TxEnd = micros();
 800cb4e:	f7fe fb45 	bl	800b1dc <micros>
 800cb52:	4601      	mov	r1, r0
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800cb5a:	4413      	add	r3, r2
 800cb5c:	6019      	str	r1, [r3, #0]
		 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800cb64:	4413      	add	r3, r2
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	6939      	ldr	r1, [r7, #16]
 800cb6a:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800cb6e:	440b      	add	r3, r1
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	1ad2      	subs	r2, r2, r3
 800cb74:	6939      	ldr	r1, [r7, #16]
 800cb76:	f242 33ec 	movw	r3, #9196	; 0x23ec
 800cb7a:	440b      	add	r3, r1
 800cb7c:	601a      	str	r2, [r3, #0]
		 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cb84:	4413      	add	r3, r2
 800cb86:	881b      	ldrh	r3, [r3, #0]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	889b      	ldrh	r3, [r3, #4]
 800cb94:	4619      	mov	r1, r3
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	f242 33f0 	movw	r3, #9200	; 0x23f0
 800cb9c:	4413      	add	r3, r2
 800cb9e:	6019      	str	r1, [r3, #0]

		/*One consumption done. move consumer forward*/
		uartDev->consumerTxBufNum++;
 800cba0:	693a      	ldr	r2, [r7, #16]
 800cba2:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cba6:	4413      	add	r3, r2
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b299      	uxth	r1, r3
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cbb4:	4413      	add	r3, r2
 800cbb6:	460a      	mov	r2, r1
 800cbb8:	801a      	strh	r2, [r3, #0]
		uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cbc0:	4413      	add	r3, r2
 800cbc2:	881a      	ldrh	r2, [r3, #0]
 800cbc4:	4b27      	ldr	r3, [pc, #156]	; (800cc64 <HAL_UART_TxCpltCallback+0x138>)
 800cbc6:	fba3 1302 	umull	r1, r3, r3, r2
 800cbca:	08d9      	lsrs	r1, r3, #3
 800cbcc:	460b      	mov	r3, r1
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	440b      	add	r3, r1
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	b299      	uxth	r1, r3
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cbde:	4413      	add	r3, r2
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	801a      	strh	r2, [r3, #0]

		/*reduce one bufferedTxNum*/
		 uartDev->bufferedTxNum--;
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cbea:	4413      	add	r3, r2
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b299      	uxth	r1, r3
 800cbf2:	693a      	ldr	r2, [r7, #16]
 800cbf4:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cbf8:	4413      	add	r3, r2
 800cbfa:	460a      	mov	r2, r1
 800cbfc:	801a      	strh	r2, [r3, #0]

		/*If it is still positive, go on consume next*/
		if(uartDev->bufferedTxNum>0){
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800cc04:	4413      	add	r3, r2
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d026      	beq.n	800cc5a <HAL_UART_TxCpltCallback+0x12e>
			uartDev->TxStart = micros();
 800cc0c:	f7fe fae6 	bl	800b1dc <micros>
 800cc10:	4601      	mov	r1, r0
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800cc18:	4413      	add	r3, r2
 800cc1a:	6019      	str	r1, [r3, #0]
			uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cc22:	4413      	add	r3, r2
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cc2c:	fb03 f302 	mul.w	r3, r3, r2
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4413      	add	r3, r2
 800cc34:	3305      	adds	r3, #5
 800cc36:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	f641 7346 	movw	r3, #8006	; 0x1f46
 800cc42:	4413      	add	r3, r2
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	889b      	ldrh	r3, [r3, #4]
 800cc52:	461a      	mov	r2, r3
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	f7f8 fd19 	bl	800568c <HAL_UART_Transmit_DMA>
		}
	}

}
 800cc5a:	bf00      	nop
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	cccccccd 	.word	0xcccccccd

0800cc68 <Usart_ReceivePolling>:
	}
}

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceivePolling()
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
	/********************************Usart 1 DMA reception is circular****************************/

	/********************************Usart 2 Int reception****************************/
	UsartRxIntReceivedPolling(&Usart2Device);
 800cc6c:	4803      	ldr	r0, [pc, #12]	; (800cc7c <Usart_ReceivePolling+0x14>)
 800cc6e:	f000 f831 	bl	800ccd4 <UsartRxIntReceivedPolling>

	/********************************Usart 3 DMA reception****************************/
	UsartRxDMAIdleReceivedPolling(&Usart3Device);
 800cc72:	4803      	ldr	r0, [pc, #12]	; (800cc80 <Usart_ReceivePolling+0x18>)
 800cc74:	f000 f857 	bl	800cd26 <UsartRxDMAIdleReceivedPolling>
}
 800cc78:	bf00      	nop
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	2000afe0 	.word	0x2000afe0
 800cc80:	2000f7c8 	.word	0x2000f7c8

0800cc84 <_serialCallback>:


inline static void _serialCallback(UART_DEVICE *usartDevice){
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	char *pSerialBuf=(usartDevice->usartmode==usartDMACircularMode)?((char *)usartDevice->RxLineBuf):((char *)usartDevice->RxBuf);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	791b      	ldrb	r3, [r3, #4]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d104      	bne.n	800cc9e <_serialCallback+0x1a>
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	f242 1358 	movw	r3, #8536	; 0x2158
 800cc9a:	4413      	add	r3, r2
 800cc9c:	e002      	b.n	800cca4 <_serialCallback+0x20>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800cca4:	60fb      	str	r3, [r7, #12]

	if(usartDevice==&Usart2Device){
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a08      	ldr	r2, [pc, #32]	; (800cccc <_serialCallback+0x48>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d103      	bne.n	800ccb6 <_serialCallback+0x32>
		serial2Callback(pSerialBuf);
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7fe fa7e 	bl	800b1b0 <serial2Callback>
	}
	else if(usartDevice==&Usart3Device){
		serial3Callback(pSerialBuf);
	}
}
 800ccb4:	e006      	b.n	800ccc4 <_serialCallback+0x40>
	else if(usartDevice==&Usart3Device){
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a05      	ldr	r2, [pc, #20]	; (800ccd0 <_serialCallback+0x4c>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d102      	bne.n	800ccc4 <_serialCallback+0x40>
		serial3Callback(pSerialBuf);
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f002 f8ce 	bl	800ee60 <serial3Callback>
}
 800ccc4:	bf00      	nop
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	2000afe0 	.word	0x2000afe0
 800ccd0:	2000f7c8 	.word	0x2000f7c8

0800ccd4 <UsartRxIntReceivedPolling>:

static void UsartRxIntReceivedPolling(UART_DEVICE *UsartDevice){
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
	if (UsartDevice->Received == 1) {
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	f242 33de 	movw	r3, #9182	; 0x23de
 800cce2:	4413      	add	r3, r2
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d119      	bne.n	800cd1e <UsartRxIntReceivedPolling+0x4a>
		_serialCallback(UsartDevice);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff ffca 	bl	800cc84 <_serialCallback>
		memset(UsartDevice->RxBuf,0,UART_RX_BUF_SIZE);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800ccf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f003 f8c0 	bl	800fe82 <memset>
		UsartDevice->pRxBuf=UsartDevice->RxBuf;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	f242 1354 	movw	r3, #8532	; 0x2154
 800cd0e:	440b      	add	r3, r1
 800cd10:	601a      	str	r2, [r3, #0]
		UsartDevice->Received = 0;
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	f242 33de 	movw	r3, #9182	; 0x23de
 800cd18:	4413      	add	r3, r2
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	801a      	strh	r2, [r3, #0]
	}
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <UsartRxDMAIdleReceivedPolling>:

static void UsartRxDMAIdleReceivedPolling(UART_DEVICE *UsartDevice)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	f242 33de 	movw	r3, #9182	; 0x23de
 800cd34:	4413      	add	r3, r2
 800cd36:	881b      	ldrh	r3, [r3, #0]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	f040 80f1 	bne.w	800cf20 <UsartRxDMAIdleReceivedPolling+0x1fa>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd44:	2b22      	cmp	r3, #34	; 0x22
 800cd46:	d14b      	bne.n	800cde0 <UsartRxDMAIdleReceivedPolling+0xba>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd54:	2b40      	cmp	r3, #64	; 0x40
 800cd56:	d143      	bne.n	800cde0 <UsartRxDMAIdleReceivedPolling+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd6a:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01c      	beq.n	800cdb0 <UsartRxDMAIdleReceivedPolling+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	b299      	uxth	r1, r3
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800cd94:	4413      	add	r3, r2
 800cd96:	460a      	mov	r2, r1
 800cd98:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f4 fea4 	bl	8001af8 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cdc2:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 0201 	bic.w	r2, r2, #1
 800cdd6:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2220      	movs	r2, #32
 800cdde:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	f242 3350 	movw	r3, #9040	; 0x2350
 800cde6:	4413      	add	r3, r2
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800cdf2:	4413      	add	r3, r2
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	440b      	add	r3, r1
 800cdf8:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ce00:	dd19      	ble.n	800ce36 <UsartRxDMAIdleReceivedPolling+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	f242 1358 	movw	r3, #8536	; 0x2158
 800ce08:	4413      	add	r3, r2
 800ce0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce0e:	2100      	movs	r1, #0
 800ce10:	4618      	mov	r0, r3
 800ce12:	f003 f836 	bl	800fe82 <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f242 1258 	movw	r2, #8536	; 0x2158
 800ce1c:	441a      	add	r2, r3
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	f242 334c 	movw	r3, #9036	; 0x234c
 800ce24:	440b      	add	r3, r1
 800ce26:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	f242 3350 	movw	r3, #9040	; 0x2350
 800ce2e:	4413      	add	r3, r2
 800ce30:	2200      	movs	r2, #0
 800ce32:	801a      	strh	r2, [r3, #0]
 800ce34:	e056      	b.n	800cee4 <UsartRxDMAIdleReceivedPolling+0x1be>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f242 3350 	movw	r3, #9040	; 0x2350
 800ce3c:	4413      	add	r3, r2
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	f242 1358 	movw	r3, #8536	; 0x2158
 800ce46:	4413      	add	r3, r2
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	18d0      	adds	r0, r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f503 51fb 	add.w	r1, r3, #8032	; 0x1f60
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800ce58:	4413      	add	r3, r2
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	f003 f805 	bl	800fe6c <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	f242 334c 	movw	r3, #9036	; 0x234c
 800ce68:	4413      	add	r3, r2
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800ce72:	440b      	add	r3, r1
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	441a      	add	r2, r3
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	f242 334c 	movw	r3, #9036	; 0x234c
 800ce7e:	440b      	add	r3, r1
 800ce80:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	b299      	uxth	r1, r3
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	f242 3350 	movw	r3, #9040	; 0x2350
 800ce8c:	4413      	add	r3, r2
 800ce8e:	460a      	mov	r2, r1
 800ce90:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	f242 3350 	movw	r3, #9040	; 0x2350
 800ce98:	4413      	add	r3, r2
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	441a      	add	r2, r3
 800cea2:	f242 1358 	movw	r3, #8536	; 0x2158
 800cea6:	4413      	add	r3, r2
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b0a      	cmp	r3, #10
 800ceac:	d11a      	bne.n	800cee4 <UsartRxDMAIdleReceivedPolling+0x1be>
				{
					_serialCallback(UsartDevice);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff fee8 	bl	800cc84 <_serialCallback>
					memset(UsartDevice->RxLineBuf,0,len);
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	f242 1358 	movw	r3, #8536	; 0x2158
 800ceba:	4413      	add	r3, r2
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	2100      	movs	r1, #0
 800cec0:	4618      	mov	r0, r3
 800cec2:	f002 ffde 	bl	800fe82 <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f242 1258 	movw	r2, #8536	; 0x2158
 800cecc:	441a      	add	r2, r3
 800cece:	6879      	ldr	r1, [r7, #4]
 800ced0:	f242 334c 	movw	r3, #9036	; 0x234c
 800ced4:	440b      	add	r3, r1
 800ced6:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	f242 3350 	movw	r3, #9040	; 0x2350
 800cede:	4413      	add	r3, r2
 800cee0:	2200      	movs	r2, #0
 800cee2:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	f242 33de 	movw	r3, #9182	; 0x23de
 800ceea:	4413      	add	r3, r2
 800ceec:	2200      	movs	r2, #0
 800ceee:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	f242 3358 	movw	r3, #9048	; 0x2358
 800cef6:	4413      	add	r3, r2
 800cef8:	2264      	movs	r2, #100	; 0x64
 800cefa:	2100      	movs	r1, #0
 800cefc:	4618      	mov	r0, r3
 800cefe:	f002 ffc0 	bl	800fe82 <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800cf08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f002 ffb7 	bl	800fe82 <memset>
			UsartDevice->countRxBuf = 0;
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800cf1a:	4413      	add	r3, r2
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6818      	ldr	r0, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800cf2a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f7f8 fc28 	bl	8005784 <HAL_UART_Receive_DMA>
}
 800cf34:	bf00      	nop
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <my_read_DMA_byte>:


int my_read_DMA_byte(UART_HandleTypeDef *huart){
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
	int c=-1;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	617b      	str	r3, [r7, #20]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff fd1e 	bl	800c98c <getUsartDevice>
 800cf50:	6138      	str	r0, [r7, #16]
	uint32_t RdmaInd=(UART_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (UART_RX_BUF_SIZE - 1);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800cf5e:	f240 13f3 	movw	r3, #499	; 0x1f3
 800cf62:	4013      	ands	r3, r2
 800cf64:	60fb      	str	r3, [r7, #12]
    if(uartDev->RxInd != RdmaInd){
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	f242 3354 	movw	r3, #9044	; 0x2354
 800cf6c:	4413      	add	r3, r2
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d01d      	beq.n	800cfb2 <my_read_DMA_byte+0x76>
      c = uartDev->RxBuf[uartDev->RxInd++];
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	f242 3354 	movw	r3, #9044	; 0x2354
 800cf7c:	4413      	add	r3, r2
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	1c51      	adds	r1, r2, #1
 800cf82:	6938      	ldr	r0, [r7, #16]
 800cf84:	f242 3354 	movw	r3, #9044	; 0x2354
 800cf88:	4403      	add	r3, r0
 800cf8a:	6019      	str	r1, [r3, #0]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	617b      	str	r3, [r7, #20]
      uartDev->RxInd &= (UART_RX_BUF_SIZE - 1);
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	f242 3354 	movw	r3, #9044	; 0x2354
 800cf9e:	4413      	add	r3, r2
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cfa6:	401a      	ands	r2, r3
 800cfa8:	6939      	ldr	r1, [r7, #16]
 800cfaa:	f242 3354 	movw	r3, #9044	; 0x2354
 800cfae:	440b      	add	r3, r1
 800cfb0:	601a      	str	r2, [r3, #0]
    }
    return c;
 800cfb2:	697b      	ldr	r3, [r7, #20]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f04f 0200 	mov.w	r2, #0
 800cfdc:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f04f 0200 	mov.w	r2, #0
 800cfe4:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a0e      	ldr	r2, [pc, #56]	; (800d024 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800cfea:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f04f 0200 	mov.w	r2, #0
 800cff2:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f240 6266 	movw	r2, #1638	; 0x666
 800cffa:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f643 1299 	movw	r2, #14745	; 0x3999
 800d002:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a08      	ldr	r2, [pc, #32]	; (800d028 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800d008:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a07      	ldr	r2, [pc, #28]	; (800d02c <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800d00e:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2210      	movs	r2, #16
 800d014:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4618      	mov	r0, r3
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	48ca0080 	.word	0x48ca0080
 800d028:	2000a62c 	.word	0x2000a62c
 800d02c:	40021000 	.word	0x40021000

0800d030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d030:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d068 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d034:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d036:	e003      	b.n	800d040 <LoopCopyDataInit>

0800d038 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d03a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d03c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d03e:	3104      	adds	r1, #4

0800d040 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d040:	480b      	ldr	r0, [pc, #44]	; (800d070 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d042:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d044:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d046:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d048:	d3f6      	bcc.n	800d038 <CopyDataInit>
  ldr  r2, =_sbss
 800d04a:	4a0b      	ldr	r2, [pc, #44]	; (800d078 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d04c:	e002      	b.n	800d054 <LoopFillZerobss>

0800d04e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d04e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d050:	f842 3b04 	str.w	r3, [r2], #4

0800d054 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d054:	4b09      	ldr	r3, [pc, #36]	; (800d07c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d056:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d058:	d3f9      	bcc.n	800d04e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d05a:	f7fb fe13 	bl	8008c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d05e:	f002 fed9 	bl	800fe14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d062:	f7fa ffcb 	bl	8007ffc <main>
  bx  lr    
 800d066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d068:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800d06c:	080154c4 	.word	0x080154c4
  ldr  r0, =_sdata
 800d070:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d074:	2000057c 	.word	0x2000057c
  ldr  r2, =_sbss
 800d078:	2000057c 	.word	0x2000057c
  ldr  r3, = _ebss
 800d07c:	20011bc0 	.word	0x20011bc0

0800d080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d080:	e7fe      	b.n	800d080 <ADC_IRQHandler>
	...

0800d084 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	08014f80 	.word	0x08014f80

0800d0a4 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
      data(0)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff ffe8 	bl	800d084 <_ZN3ros3MsgC1Ev>
 800d0b4:	4a05      	ldr	r2, [pc, #20]	; (800d0cc <_ZN8std_msgs6UInt16C1Ev+0x28>)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	809a      	strh	r2, [r3, #4]
    {
    }
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08014f68 	.word	0x08014f68

0800d0d0 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	8899      	ldrh	r1, [r3, #4]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	b2ca      	uxtb	r2, r1
 800d0ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	889b      	ldrh	r3, [r3, #4]
 800d0f0:	0a1b      	lsrs	r3, r3, #8
 800d0f2:	b299      	uxth	r1, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	b2ca      	uxtb	r2, r1
 800d0fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3302      	adds	r3, #2
 800d104:	60fb      	str	r3, [r7, #12]
      return offset;
 800d106:	68fb      	ldr	r3, [r7, #12]
    }
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	4413      	add	r3, r2
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	889b      	ldrh	r3, [r3, #4]
 800d134:	b21a      	sxth	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3301      	adds	r3, #1
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	440b      	add	r3, r1
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	021b      	lsls	r3, r3, #8
 800d142:	b21b      	sxth	r3, r3
 800d144:	4313      	orrs	r3, r2
 800d146:	b21b      	sxth	r3, r3
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3302      	adds	r3, #2
 800d152:	60fb      	str	r3, [r7, #12]
     return offset;
 800d154:	68fb      	ldr	r3, [r7, #12]
    }
 800d156:	4618      	mov	r0, r3
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4b03      	ldr	r3, [pc, #12]	; (800d17c <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800d16e:	4618      	mov	r0, r3
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	08014c94 	.word	0x08014c94

0800d180 <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	4b03      	ldr	r3, [pc, #12]	; (800d198 <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	08014ca4 	.word	0x08014ca4

0800d19c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7ff ff6c 	bl	800d084 <_ZN3ros3MsgC1Ev>
 800d1ac:	4a06      	ldr	r2, [pc, #24]	; (800d1c8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	711a      	strb	r2, [r3, #4]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800d1bc:	609a      	str	r2, [r3, #8]
    {
    }
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	08014f50 	.word	0x08014f50
 800d1cc:	08014cc8 	.word	0x08014cc8

0800d1d0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	7912      	ldrb	r2, [r2, #4]
 800d1e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f3 f823 	bl	8000240 <strlen>
 800d1fa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	4413      	add	r3, r2
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	4618      	mov	r0, r3
 800d206:	f000 fe6f 	bl	800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	3304      	adds	r3, #4
 800d20e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	18d0      	adds	r0, r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	4619      	mov	r1, r3
 800d21e:	f002 fe25 	bl	800fe6c <memcpy>
      offset += length_msg;
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	4413      	add	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]
      return offset;
 800d22a:	68fb      	ldr	r3, [r7, #12]
    }
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	4413      	add	r3, r2
 800d248:	781a      	ldrb	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	441a      	add	r2, r3
 800d25a:	f107 030c 	add.w	r3, r7, #12
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fe5f 	bl	800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	3304      	adds	r3, #4
 800d26a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	617b      	str	r3, [r7, #20]
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4413      	add	r3, r2
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d20c      	bcs.n	800d296 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	441a      	add	r2, r3
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	3b01      	subs	r3, #1
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	440b      	add	r3, r1
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	3301      	adds	r3, #1
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	e7ec      	b.n	800d270 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4413      	add	r3, r2
 800d29c:	3b01      	subs	r3, #1
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	441a      	add	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	613b      	str	r3, [r7, #16]
     return offset;
 800d2ba:	693b      	ldr	r3, [r7, #16]
    }
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	4b03      	ldr	r3, [pc, #12]	; (800d2dc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	08014ccc 	.word	0x08014ccc

0800d2e0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	4b03      	ldr	r3, [pc, #12]	; (800d2f8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	08014ce0 	.word	0x08014ce0

0800d2fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff febc 	bl	800d084 <_ZN3ros3MsgC1Ev>
 800d30c:	4a0c      	ldr	r2, [pc, #48]	; (800d340 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	605a      	str	r2, [r3, #4]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	611a      	str	r2, [r3, #16]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	619a      	str	r2, [r3, #24]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	61da      	str	r2, [r3, #28]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	08014f38 	.word	0x08014f38

0800d344 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d344:	b580      	push	{r7, lr}
 800d346:	b08a      	sub	sp, #40	; 0x28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6859      	ldr	r1, [r3, #4]
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	4413      	add	r3, r2
 800d35c:	b2ca      	uxtb	r2, r1
 800d35e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	0a19      	lsrs	r1, r3, #8
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	3301      	adds	r3, #1
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	4413      	add	r3, r2
 800d36e:	b2ca      	uxtb	r2, r1
 800d370:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	0c19      	lsrs	r1, r3, #16
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	3302      	adds	r3, #2
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	4413      	add	r3, r2
 800d380:	b2ca      	uxtb	r2, r1
 800d382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	0e19      	lsrs	r1, r3, #24
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	3303      	adds	r3, #3
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	4413      	add	r3, r2
 800d392:	b2ca      	uxtb	r2, r1
 800d394:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	3304      	adds	r3, #4
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800d39c:	2300      	movs	r3, #0
 800d39e:	623b      	str	r3, [r7, #32]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	6a3a      	ldr	r2, [r7, #32]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d22b      	bcs.n	800d402 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68da      	ldr	r2, [r3, #12]
 800d3ae:	6a3b      	ldr	r3, [r7, #32]
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4413      	add	r3, r2
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800d3b8:	6939      	ldr	r1, [r7, #16]
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	4413      	add	r3, r2
 800d3c0:	b2ca      	uxtb	r2, r1
 800d3c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	0a19      	lsrs	r1, r3, #8
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	b2ca      	uxtb	r2, r1
 800d3d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	0c19      	lsrs	r1, r3, #16
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	3302      	adds	r3, #2
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	4413      	add	r3, r2
 800d3e0:	b2ca      	uxtb	r2, r1
 800d3e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	0e19      	lsrs	r1, r3, #24
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	3303      	adds	r3, #3
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	b2ca      	uxtb	r2, r1
 800d3f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800d3fa:	6a3b      	ldr	r3, [r7, #32]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	623b      	str	r3, [r7, #32]
 800d400:	e7ce      	b.n	800d3a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6919      	ldr	r1, [r3, #16]
 800d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	4413      	add	r3, r2
 800d40c:	b2ca      	uxtb	r2, r1
 800d40e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	0a19      	lsrs	r1, r3, #8
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	3301      	adds	r3, #1
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	4413      	add	r3, r2
 800d41e:	b2ca      	uxtb	r2, r1
 800d420:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	0c19      	lsrs	r1, r3, #16
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	3302      	adds	r3, #2
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	4413      	add	r3, r2
 800d430:	b2ca      	uxtb	r2, r1
 800d432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	0e19      	lsrs	r1, r3, #24
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	3303      	adds	r3, #3
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	4413      	add	r3, r2
 800d442:	b2ca      	uxtb	r2, r1
 800d444:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	3304      	adds	r3, #4
 800d44a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800d44c:	2300      	movs	r3, #0
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	69fa      	ldr	r2, [r7, #28]
 800d456:	429a      	cmp	r2, r3
 800d458:	d22b      	bcs.n	800d4b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	699a      	ldr	r2, [r3, #24]
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800d468:	68f9      	ldr	r1, [r7, #12]
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	4413      	add	r3, r2
 800d470:	b2ca      	uxtb	r2, r1
 800d472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	0a19      	lsrs	r1, r3, #8
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	3301      	adds	r3, #1
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	4413      	add	r3, r2
 800d480:	b2ca      	uxtb	r2, r1
 800d482:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	0c19      	lsrs	r1, r3, #16
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	3302      	adds	r3, #2
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	4413      	add	r3, r2
 800d490:	b2ca      	uxtb	r2, r1
 800d492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	0e19      	lsrs	r1, r3, #24
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	3303      	adds	r3, #3
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	4413      	add	r3, r2
 800d4a0:	b2ca      	uxtb	r2, r1
 800d4a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	61fb      	str	r3, [r7, #28]
 800d4b0:	e7ce      	b.n	800d450 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	69d9      	ldr	r1, [r3, #28]
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	b2ca      	uxtb	r2, r1
 800d4be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	0a19      	lsrs	r1, r3, #8
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	b2ca      	uxtb	r2, r1
 800d4d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	69db      	ldr	r3, [r3, #28]
 800d4d6:	0c19      	lsrs	r1, r3, #16
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	3302      	adds	r3, #2
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	4413      	add	r3, r2
 800d4e0:	b2ca      	uxtb	r2, r1
 800d4e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	0e19      	lsrs	r1, r3, #24
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	3303      	adds	r3, #3
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	b2ca      	uxtb	r2, r1
 800d4f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61bb      	str	r3, [r7, #24]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	429a      	cmp	r2, r3
 800d508:	d228      	bcs.n	800d55c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4618      	mov	r0, r3
 800d518:	f7f2 fe92 	bl	8000240 <strlen>
 800d51c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	4413      	add	r3, r2
 800d524:	6979      	ldr	r1, [r7, #20]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fcde 	bl	800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	3304      	adds	r3, #4
 800d530:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	18d0      	adds	r0, r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	4619      	mov	r1, r3
 800d548:	f002 fc90 	bl	800fe6c <memcpy>
      offset += length_stringsi;
 800d54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	4413      	add	r3, r2
 800d552:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	3301      	adds	r3, #1
 800d558:	61bb      	str	r3, [r7, #24]
 800d55a:	e7d1      	b.n	800d500 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800d55e:	4618      	mov	r0, r3
 800d560:	3728      	adds	r7, #40	; 0x28
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d566:	b580      	push	{r7, lr}
 800d568:	b08e      	sub	sp, #56	; 0x38
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800d574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	4413      	add	r3, r2
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d580:	3301      	adds	r3, #1
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	4413      	add	r3, r2
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	6a3a      	ldr	r2, [r7, #32]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d592:	3302      	adds	r3, #2
 800d594:	683a      	ldr	r2, [r7, #0]
 800d596:	4413      	add	r3, r2
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	041b      	lsls	r3, r3, #16
 800d59c:	6a3a      	ldr	r2, [r7, #32]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800d5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a4:	3303      	adds	r3, #3
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	061b      	lsls	r3, r3, #24
 800d5ae:	6a3a      	ldr	r2, [r7, #32]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	6a3a      	ldr	r2, [r7, #32]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d90a      	bls.n	800d5da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68da      	ldr	r2, [r3, #12]
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	f003 fba6 	bl	8010d20 <realloc>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a3a      	ldr	r2, [r7, #32]
 800d5de:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d236      	bcs.n	800d65c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	440a      	add	r2, r1
 800d5fa:	7812      	ldrb	r2, [r2, #0]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d604:	3301      	adds	r3, #1
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	440b      	add	r3, r1
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	021b      	lsls	r3, r3, #8
 800d60e:	4313      	orrs	r3, r2
 800d610:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d616:	3302      	adds	r3, #2
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	440b      	add	r3, r1
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	041b      	lsls	r3, r3, #16
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d628:	3303      	adds	r3, #3
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	440b      	add	r3, r1
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	061b      	lsls	r3, r3, #24
 800d632:	4313      	orrs	r3, r2
 800d634:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800d63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63e:	3304      	adds	r3, #4
 800d640:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	3208      	adds	r2, #8
 800d650:	6812      	ldr	r2, [r2, #0]
 800d652:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d656:	3301      	adds	r3, #1
 800d658:	633b      	str	r3, [r7, #48]	; 0x30
 800d65a:	e7c3      	b.n	800d5e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	4413      	add	r3, r2
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800d666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d668:	3301      	adds	r3, #1
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	4413      	add	r3, r2
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	021b      	lsls	r3, r3, #8
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	4313      	orrs	r3, r2
 800d676:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800d678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67a:	3302      	adds	r3, #2
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	4413      	add	r3, r2
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	041b      	lsls	r3, r3, #16
 800d684:	69fa      	ldr	r2, [r7, #28]
 800d686:	4313      	orrs	r3, r2
 800d688:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800d68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68c:	3303      	adds	r3, #3
 800d68e:	683a      	ldr	r2, [r7, #0]
 800d690:	4413      	add	r3, r2
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	061b      	lsls	r3, r3, #24
 800d696:	69fa      	ldr	r2, [r7, #28]
 800d698:	4313      	orrs	r3, r2
 800d69a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800d69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69e:	3304      	adds	r3, #4
 800d6a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	69fa      	ldr	r2, [r7, #28]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d90a      	bls.n	800d6c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	699a      	ldr	r2, [r3, #24]
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	f003 fb32 	bl	8010d20 <realloc>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	69fa      	ldr	r2, [r7, #28]
 800d6c6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d236      	bcs.n	800d744 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	440a      	add	r2, r1
 800d6e2:	7812      	ldrb	r2, [r2, #0]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	440b      	add	r3, r1
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6fe:	3302      	adds	r3, #2
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	440b      	add	r3, r1
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	041b      	lsls	r3, r3, #16
 800d708:	4313      	orrs	r3, r2
 800d70a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d710:	3303      	adds	r3, #3
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	440b      	add	r3, r1
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	061b      	lsls	r3, r3, #24
 800d71a:	4313      	orrs	r3, r2
 800d71c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800d724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d726:	3304      	adds	r3, #4
 800d728:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	699a      	ldr	r2, [r3, #24]
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	3214      	adds	r2, #20
 800d738:	6812      	ldr	r2, [r2, #0]
 800d73a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	3301      	adds	r3, #1
 800d740:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d742:	e7c3      	b.n	800d6cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800d744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800d74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d750:	3301      	adds	r3, #1
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	4413      	add	r3, r2
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	021b      	lsls	r3, r3, #8
 800d75a:	69ba      	ldr	r2, [r7, #24]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800d760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d762:	3302      	adds	r3, #2
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	4413      	add	r3, r2
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	041b      	lsls	r3, r3, #16
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	4313      	orrs	r3, r2
 800d770:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800d772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d774:	3303      	adds	r3, #3
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	061b      	lsls	r3, r3, #24
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	4313      	orrs	r3, r2
 800d782:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800d784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d786:	3304      	adds	r3, #4
 800d788:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	429a      	cmp	r2, r3
 800d792:	d90a      	bls.n	800d7aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4619      	mov	r1, r3
 800d79e:	4610      	mov	r0, r2
 800d7a0:	f003 fabe 	bl	8010d20 <realloc>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	69db      	ldr	r3, [r3, #28]
 800d7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d23f      	bcs.n	800d83e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800d7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c0:	683a      	ldr	r2, [r7, #0]
 800d7c2:	441a      	add	r2, r3
 800d7c4:	f107 030c 	add.w	r3, r7, #12
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 fbaa 	bl	800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d7da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d20c      	bcs.n	800d800 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	441a      	add	r2, r3
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	440b      	add	r3, r1
 800d7f4:	7812      	ldrb	r2, [r2, #0]
 800d7f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fe:	e7ec      	b.n	800d7da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800d800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	4413      	add	r3, r2
 800d806:	3b01      	subs	r3, #1
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800d810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d812:	3b01      	subs	r3, #1
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	441a      	add	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800d81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	3220      	adds	r2, #32
 800d832:	6812      	ldr	r2, [r2, #0]
 800d834:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	3301      	adds	r3, #1
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d83c:	e7ba      	b.n	800d7b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800d83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800d840:	4618      	mov	r0, r3
 800d842:	3738      	adds	r7, #56	; 0x38
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	4b03      	ldr	r3, [pc, #12]	; (800d860 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	08014e8c 	.word	0x08014e8c

0800d864 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	4b03      	ldr	r3, [pc, #12]	; (800d87c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800d86e:	4618      	mov	r0, r3
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	08014d04 	.word	0x08014d04

0800d880 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fbfa 	bl	800d084 <_ZN3ros3MsgC1Ev>
 800d890:	4a0b      	ldr	r2, [pc, #44]	; (800d8c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	809a      	strh	r2, [r3, #4]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a09      	ldr	r2, [pc, #36]	; (800d8c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800d8a0:	609a      	str	r2, [r3, #8]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a07      	ldr	r2, [pc, #28]	; (800d8c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800d8a6:	60da      	str	r2, [r3, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a06      	ldr	r2, [pc, #24]	; (800d8c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800d8ac:	611a      	str	r2, [r3, #16]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	615a      	str	r2, [r3, #20]
    {
    }
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	08014f20 	.word	0x08014f20
 800d8c4:	08014cc8 	.word	0x08014cc8

0800d8c8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8899      	ldrh	r1, [r3, #4]
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	4413      	add	r3, r2
 800d8e0:	b2ca      	uxtb	r2, r1
 800d8e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	889b      	ldrh	r3, [r3, #4]
 800d8e8:	0a1b      	lsrs	r3, r3, #8
 800d8ea:	b299      	uxth	r1, r3
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	b2ca      	uxtb	r2, r1
 800d8f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	4618      	mov	r0, r3
 800d904:	f7f2 fc9c 	bl	8000240 <strlen>
 800d908:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	4413      	add	r3, r2
 800d910:	69b9      	ldr	r1, [r7, #24]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 fae8 	bl	800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	3304      	adds	r3, #4
 800d91c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	18d0      	adds	r0, r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	4619      	mov	r1, r3
 800d92c:	f002 fa9e 	bl	800fe6c <memcpy>
      offset += length_topic_name;
 800d930:	69fa      	ldr	r2, [r7, #28]
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	4413      	add	r3, r2
 800d936:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7f2 fc7f 	bl	8000240 <strlen>
 800d942:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	6979      	ldr	r1, [r7, #20]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 facb 	bl	800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	3304      	adds	r3, #4
 800d956:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	18d0      	adds	r0, r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	4619      	mov	r1, r3
 800d966:	f002 fa81 	bl	800fe6c <memcpy>
      offset += length_message_type;
 800d96a:	69fa      	ldr	r2, [r7, #28]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	4413      	add	r3, r2
 800d970:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	4618      	mov	r0, r3
 800d978:	f7f2 fc62 	bl	8000240 <strlen>
 800d97c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	4413      	add	r3, r2
 800d984:	6939      	ldr	r1, [r7, #16]
 800d986:	4618      	mov	r0, r3
 800d988:	f000 faae 	bl	800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	3304      	adds	r3, #4
 800d990:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	18d0      	adds	r0, r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	f002 fa64 	bl	800fe6c <memcpy>
      offset += length_md5sum;
 800d9a4:	69fa      	ldr	r2, [r7, #28]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800d9b2:	68f9      	ldr	r1, [r7, #12]
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	b2ca      	uxtb	r2, r1
 800d9bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	0a19      	lsrs	r1, r3, #8
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	b2ca      	uxtb	r2, r1
 800d9cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	0c19      	lsrs	r1, r3, #16
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	4413      	add	r3, r2
 800d9da:	b2ca      	uxtb	r2, r1
 800d9dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	0e19      	lsrs	r1, r3, #24
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	3303      	adds	r3, #3
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	b2ca      	uxtb	r2, r1
 800d9ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	61fb      	str	r3, [r7, #28]
      return offset;
 800d9f4:	69fb      	ldr	r3, [r7, #28]
    }
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3720      	adds	r7, #32
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b08a      	sub	sp, #40	; 0x28
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800da08:	2300      	movs	r3, #0
 800da0a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	889b      	ldrh	r3, [r3, #4]
 800da1e:	b21a      	sxth	r2, r3
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	3301      	adds	r3, #1
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	440b      	add	r3, r1
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	021b      	lsls	r3, r3, #8
 800da2c:	b21b      	sxth	r3, r3
 800da2e:	4313      	orrs	r3, r2
 800da30:	b21b      	sxth	r3, r3
 800da32:	b29a      	uxth	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	3302      	adds	r3, #2
 800da3c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	441a      	add	r2, r3
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 fa6a 	bl	800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	3304      	adds	r3, #4
 800da54:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	4413      	add	r3, r2
 800da60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da62:	429a      	cmp	r2, r3
 800da64:	d20c      	bcs.n	800da80 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	441a      	add	r2, r3
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	3b01      	subs	r3, #1
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	440b      	add	r3, r1
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	3301      	adds	r3, #1
 800da7c:	627b      	str	r3, [r7, #36]	; 0x24
 800da7e:	e7ec      	b.n	800da5a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800da80:	69ba      	ldr	r2, [r7, #24]
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	4413      	add	r3, r2
 800da86:	3b01      	subs	r3, #1
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	4413      	add	r3, r2
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	3b01      	subs	r3, #1
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	441a      	add	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	4413      	add	r3, r2
 800daa2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	441a      	add	r2, r3
 800daaa:	f107 0310 	add.w	r3, r7, #16
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 fa37 	bl	800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	3304      	adds	r3, #4
 800daba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	623b      	str	r3, [r7, #32]
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	4413      	add	r3, r2
 800dac6:	6a3a      	ldr	r2, [r7, #32]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d20c      	bcs.n	800dae6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	441a      	add	r2, r3
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	440b      	add	r3, r1
 800dada:	7812      	ldrb	r2, [r2, #0]
 800dadc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	3301      	adds	r3, #1
 800dae2:	623b      	str	r3, [r7, #32]
 800dae4:	e7ec      	b.n	800dac0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	4413      	add	r3, r2
 800daec:	3b01      	subs	r3, #1
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	4413      	add	r3, r2
 800daf2:	2200      	movs	r2, #0
 800daf4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	441a      	add	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	4413      	add	r3, r2
 800db08:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	441a      	add	r2, r3
 800db10:	f107 030c 	add.w	r3, r7, #12
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f000 fa04 	bl	800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	3304      	adds	r3, #4
 800db20:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	61fb      	str	r3, [r7, #28]
 800db26:	69ba      	ldr	r2, [r7, #24]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4413      	add	r3, r2
 800db2c:	69fa      	ldr	r2, [r7, #28]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d20c      	bcs.n	800db4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	441a      	add	r2, r3
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	440b      	add	r3, r1
 800db40:	7812      	ldrb	r2, [r2, #0]
 800db42:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	3301      	adds	r3, #1
 800db48:	61fb      	str	r3, [r7, #28]
 800db4a:	e7ec      	b.n	800db26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4413      	add	r3, r2
 800db52:	3b01      	subs	r3, #1
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	4413      	add	r3, r2
 800db58:	2200      	movs	r2, #0
 800db5a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	3b01      	subs	r3, #1
 800db60:	683a      	ldr	r2, [r7, #0]
 800db62:	441a      	add	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4413      	add	r3, r2
 800db6e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	69ba      	ldr	r2, [r7, #24]
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	440a      	add	r2, r1
 800db7c:	7812      	ldrb	r2, [r2, #0]
 800db7e:	4313      	orrs	r3, r2
 800db80:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	3301      	adds	r3, #1
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	440b      	add	r3, r1
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	021b      	lsls	r3, r3, #8
 800db90:	4313      	orrs	r3, r2
 800db92:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	3302      	adds	r3, #2
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	440b      	add	r3, r1
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	041b      	lsls	r3, r3, #16
 800dba2:	4313      	orrs	r3, r2
 800dba4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	3303      	adds	r3, #3
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	440b      	add	r3, r1
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	061b      	lsls	r3, r3, #24
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	61bb      	str	r3, [r7, #24]
     return offset;
 800dbc4:	69bb      	ldr	r3, [r7, #24]
    }
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3728      	adds	r7, #40	; 0x28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
	...

0800dbd0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	08014d28 	.word	0x08014d28

0800dbec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	08014d44 	.word	0x08014d44

0800dc08 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	605a      	str	r2, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
	...

0800dc2c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
      data()
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fa24 	bl	800d084 <_ZN3ros3MsgC1Ev>
 800dc3c:	4a06      	ldr	r2, [pc, #24]	; (800dc58 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff ffde 	bl	800dc08 <_ZN3ros4TimeC1Ev>
    {
    }
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	08014f08 	.word	0x08014f08

0800dc5c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6859      	ldr	r1, [r3, #4]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	4413      	add	r3, r2
 800dc74:	b2ca      	uxtb	r2, r1
 800dc76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	0a19      	lsrs	r1, r3, #8
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	4413      	add	r3, r2
 800dc86:	b2ca      	uxtb	r2, r1
 800dc88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	0c19      	lsrs	r1, r3, #16
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	3302      	adds	r3, #2
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	4413      	add	r3, r2
 800dc98:	b2ca      	uxtb	r2, r1
 800dc9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	0e19      	lsrs	r1, r3, #24
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3303      	adds	r3, #3
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	4413      	add	r3, r2
 800dcaa:	b2ca      	uxtb	r2, r1
 800dcac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6899      	ldr	r1, [r3, #8]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	b2ca      	uxtb	r2, r1
 800dcc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	0a19      	lsrs	r1, r3, #8
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3301      	adds	r3, #1
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	4413      	add	r3, r2
 800dcd0:	b2ca      	uxtb	r2, r1
 800dcd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	0c19      	lsrs	r1, r3, #16
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	3302      	adds	r3, #2
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	4413      	add	r3, r2
 800dce2:	b2ca      	uxtb	r2, r1
 800dce4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	0e19      	lsrs	r1, r3, #24
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3303      	adds	r3, #3
 800dcf0:	683a      	ldr	r2, [r7, #0]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	b2ca      	uxtb	r2, r1
 800dcf6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	60fb      	str	r3, [r7, #12]
      return offset;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
    }
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	4413      	add	r3, r2
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	440b      	add	r3, r1
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	021b      	lsls	r3, r3, #8
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685a      	ldr	r2, [r3, #4]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3302      	adds	r3, #2
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	440b      	add	r3, r1
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	041b      	lsls	r3, r3, #16
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3303      	adds	r3, #3
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	440b      	add	r3, r1
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	061b      	lsls	r3, r3, #24
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	4413      	add	r3, r2
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689a      	ldr	r2, [r3, #8]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	3301      	adds	r3, #1
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	440b      	add	r3, r1
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	021b      	lsls	r3, r3, #8
 800dd8e:	431a      	orrs	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689a      	ldr	r2, [r3, #8]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	440b      	add	r3, r1
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	041b      	lsls	r3, r3, #16
 800dda4:	431a      	orrs	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3303      	adds	r3, #3
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	440b      	add	r3, r1
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	061b      	lsls	r3, r3, #24
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	60fb      	str	r3, [r7, #12]
     return offset;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
    }
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	4b03      	ldr	r3, [pc, #12]	; (800ddec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800ddde:	4618      	mov	r0, r3
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	08014d68 	.word	0x08014d68

0800ddf0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	4b03      	ldr	r3, [pc, #12]	; (800de08 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	08014d78 	.word	0x08014d78

0800de0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	611a      	str	r2, [r3, #16]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	691b      	ldr	r3, [r3, #16]
  }
 800de46:	4618      	mov	r0, r3
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
	...

0800de54 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    UART_HandleTypeDef *huart;

  public:
    STM32Hardware():
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
      huart(&huart1){
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a04      	ldr	r2, [pc, #16]	; (800de70 <_ZN13STM32HardwareC1Ev+0x1c>)
 800de60:	601a      	str	r2, [r3, #0]
    }
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	2000ae5c 	.word	0x2000ae5c

0800de74 <_ZN13STM32Hardware4readEv>:

    void init(){

    }

    int read(){
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
      return my_read_DMA_byte(huart);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff f85b 	bl	800cf3c <my_read_DMA_byte>
 800de86:	4603      	mov	r3, r0
    }
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
    	my_write_DMA(huart, data, length);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fe fdad 	bl	800ca04 <my_write_DMA>
    }
 800deaa:	bf00      	nop
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
    	return HAL_GetTick();
 800deba:	f7f3 f89d 	bl	8000ff8 <HAL_GetTick>
 800debe:	4603      	mov	r3, r0
    }
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_Z12rosNodeSubCBRKN8std_msgs6UInt16E>:
void rosNodePub(){
	pubData.data=2;
	_pub.publish(&pubData);
}

void rosNodeSubCB(const std_msgs::UInt16& msg){
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
	printf("Receive test topi %d\r\n",msg.data);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	889b      	ldrh	r3, [r3, #4]
 800ded4:	4619      	mov	r1, r3
 800ded6:	4803      	ldr	r0, [pc, #12]	; (800dee4 <_Z12rosNodeSubCBRKN8std_msgs6UInt16E+0x1c>)
 800ded8:	f002 fea6 	bl	8010c28 <iprintf>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	08014d9c 	.word	0x08014d9c

0800dee8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800def2:	2300      	movs	r3, #0
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b03      	cmp	r3, #3
 800defa:	d80d      	bhi.n	800df18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	fa22 f103 	lsr.w	r1, r2, r3
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	b2ca      	uxtb	r2, r1
 800df0e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3301      	adds	r3, #1
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	e7ee      	b.n	800def6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800df18:	bf00      	nop
 800df1a:	3714      	adds	r7, #20
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800df34:	2300      	movs	r3, #0
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d811      	bhi.n	800df62 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	440a      	add	r2, r1
 800df48:	7812      	ldrb	r2, [r2, #0]
 800df4a:	4611      	mov	r1, r2
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	00d2      	lsls	r2, r2, #3
 800df50:	fa01 f202 	lsl.w	r2, r1, r2
 800df54:	431a      	orrs	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3301      	adds	r3, #1
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e7ea      	b.n	800df38 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800df62:	bf00      	nop
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
	...

0800df70 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	4a04      	ldr	r2, [pc, #16]	; (800df8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4618      	mov	r0, r3
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	08014ef4 	.word	0x08014ef4

0800df90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff ffe8 	bl	800df70 <_ZN3ros15NodeHandleBase_C1Ev>
 800dfa0:	4a39      	ldr	r2, [pc, #228]	; (800e088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff ff52 	bl	800de54 <_ZN13STM32HardwareC1Ev>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff f99c 	bl	800d2fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	617b      	str	r3, [r7, #20]
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b18      	cmp	r3, #24
 800dfcc:	d80a      	bhi.n	800dfe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	e7f1      	b.n	800dfc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b18      	cmp	r3, #24
 800dfec:	d80b      	bhi.n	800e006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	2200      	movs	r2, #0
 800dffc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3301      	adds	r3, #1
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	e7f0      	b.n	800dfe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e010:	d209      	bcs.n	800e026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	4413      	add	r3, r2
 800e018:	3318      	adds	r3, #24
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	3301      	adds	r3, #1
 800e022:	60fb      	str	r3, [r7, #12]
 800e024:	e7f1      	b.n	800e00a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800e026:	2300      	movs	r3, #0
 800e028:	60bb      	str	r3, [r7, #8]
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e030:	d20a      	bcs.n	800e048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	4413      	add	r3, r2
 800e038:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e03c:	2200      	movs	r2, #0
 800e03e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	3301      	adds	r3, #1
 800e044:	60bb      	str	r3, [r7, #8]
 800e046:	e7f0      	b.n	800e02a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	615a      	str	r2, [r3, #20]
  }
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	08014ec8 	.word	0x08014ec8

0800e08c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	4a04      	ldr	r2, [pc, #16]	; (800e0a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	08014edc 	.word	0x08014edc

0800e0ac <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff ffe5 	bl	800e08c <_ZN3ros11Subscriber_C1Ev>
 800e0c2:	4a0b      	ldr	r2, [pc, #44]	; (800e0f0 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	330c      	adds	r3, #12
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe ffe9 	bl	800d0a4 <_ZN8std_msgs6UInt16C1Ev>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	615a      	str	r2, [r3, #20]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	609a      	str	r2, [r3, #8]
  };
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08014eb0 	.word	0x08014eb0

0800e0f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff fed6 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e106:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800e116:	4293      	cmp	r3, r2
 800e118:	d903      	bls.n	800e122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d009      	beq.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	429a      	cmp	r2, r3
 800e136:	d903      	bls.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d013      	beq.n	800e170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff feb0 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e152:	4602      	mov	r2, r0
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	1ad2      	subs	r2, r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	bf8c      	ite	hi
 800e160:	2301      	movhi	r3, #1
 800e162:	2300      	movls	r3, #0
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800e16a:	f06f 0301 	mvn.w	r3, #1
 800e16e:	e193      	b.n	800e498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      int data = hardware_.read();
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3304      	adds	r3, #4
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fe7d 	bl	800de74 <_ZN13STM32Hardware4readEv>
 800e17a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f2c0 8173 	blt.w	800e46a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
        break;
      checksum_ += data;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	441a      	add	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e19a:	2b07      	cmp	r3, #7
 800e19c:	d11d      	bne.n	800e1da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
      {
        message_in[index_++] = data;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800e1a4:	1c59      	adds	r1, r3, #1
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	b2d1      	uxtb	r1, r2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	460a      	mov	r2, r1
 800e1b6:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800e1be:	1e5a      	subs	r2, r3, #1
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1b7      	bne.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2208      	movs	r2, #8
 800e1d4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e1d8:	e7b2      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d128      	bne.n	800e236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
      {
        if (data == 0xff)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2bff      	cmp	r3, #255	; 0xff
 800e1e8:	d10d      	bne.n	800e206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
        {
          mode_++;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f103 0214 	add.w	r2, r3, #20
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800e204:	e79c      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3304      	adds	r3, #4
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff fe51 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e210:	4602      	mov	r2, r0
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	f241 3288 	movw	r2, #5000	; 0x1388
 800e21a:	4293      	cmp	r3, r2
 800e21c:	bf8c      	ite	hi
 800e21e:	2301      	movhi	r3, #1
 800e220:	2300      	movls	r3, #0
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d08b      	beq.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800e230:	f06f 0301 	mvn.w	r3, #1
 800e234:	e130      	b.n	800e498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d11b      	bne.n	800e278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2bfe      	cmp	r3, #254	; 0xfe
 800e244:	d107      	bne.n	800e256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
        {
          mode_++;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e254:	e774      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e264:	f083 0301 	eor.w	r3, r3, #1
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f43f af68 	beq.w	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 f915 	bl	800e4a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800e276:	e763      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d113      	bne.n	800e2aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800e2a8:	e74a      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e2b0:	2b03      	cmp	r3, #3
 800e2b2:	d110      	bne.n	800e2d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	441a      	add	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e2cc:	1c5a      	adds	r2, r3, #1
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e2d4:	e734      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d116      	bne.n	800e30e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800e2e6:	425a      	negs	r2, r3
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	bf58      	it	pl
 800e2ee:	4253      	negpl	r3, r2
 800e2f0:	2bff      	cmp	r3, #255	; 0xff
 800e2f2:	d107      	bne.n	800e304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e2fa:	1c5a      	adds	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e302:	e71d      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e30c:	e718      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e314:	2b05      	cmp	r3, #5
 800e316:	d10f      	bne.n	800e338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e326:	1c5a      	adds	r2, r3, #1
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800e336:	e703      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e33e:	2b06      	cmp	r3, #6
 800e340:	d117      	bne.n	800e372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	021b      	lsls	r3, r3, #8
 800e34c:	441a      	add	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2207      	movs	r2, #7
 800e358:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800e362:	2b00      	cmp	r3, #0
 800e364:	f47f aeec 	bne.w	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2208      	movs	r2, #8
 800e36c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800e370:	e6e6      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e378:	2b08      	cmp	r3, #8
 800e37a:	f47f aee1 	bne.w	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800e38c:	425a      	negs	r2, r3
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	bf58      	it	pl
 800e394:	4253      	negpl	r3, r2
 800e396:	2bff      	cmp	r3, #255	; 0xff
 800e398:	f47f aed2 	bne.w	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d110      	bne.n	800e3c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f87a 	bl	800e4a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 f894 	bl	800e4da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800e3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c6:	e067      	b.n	800e498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e3ce:	2b0a      	cmp	r3, #10
 800e3d0:	d106      	bne.n	800e3e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
          {
            syncTime(message_in);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3318      	adds	r3, #24
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f95f 	bl	800e69c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800e3de:	e6af      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e3e6:	2b06      	cmp	r3, #6
 800e3e8:	d10d      	bne.n	800e406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
          {
            req_param_resp.deserialize(message_in);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3318      	adds	r3, #24
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7ff f8b5 	bl	800d566 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800e404:	e69c      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e40c:	2b0b      	cmp	r3, #11
 800e40e:	d104      	bne.n	800e41a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
          {
            configured_ = false;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800e418:	e692      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e420:	3b64      	subs	r3, #100	; 0x64
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f43f ae86 	beq.w	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e43a:	3b64      	subs	r3, #100	; 0x64
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	6858      	ldr	r0, [r3, #4]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800e44e:	3b64      	subs	r3, #100	; 0x64
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	3218      	adds	r2, #24
 800e464:	4611      	mov	r1, r2
 800e466:	4798      	blx	r3
    while (true)
 800e468:	e66a      	b.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800e46a:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00f      	beq.n	800e496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800e484:	4293      	cmp	r3, r2
 800e486:	d906      	bls.n	800e496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
    {
      requestSyncTime();
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f809 	bl	800e4a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    }

    return SPIN_OK;
 800e496:	2300      	movs	r3, #0
  }
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 800e4a8:	f107 030c 	add.w	r3, r7, #12
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff fbbd 	bl	800dc2c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f107 020c 	add.w	r2, r7, #12
 800e4bc:	210a      	movs	r1, #10
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	4798      	blx	r3
    rt_time = hardware_.time();
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fcf3 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	609a      	str	r2, [r3, #8]
  }
 800e4d2:	bf00      	nop
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800e4da:	b590      	push	{r4, r7, lr}
 800e4dc:	b08b      	sub	sp, #44	; 0x2c
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff f9ca 	bl	800d880 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	2b18      	cmp	r3, #24
 800e4f4:	dc5b      	bgt.n	800e5ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4fa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d04f      	beq.n	800e5a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e50a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	b29b      	uxth	r3, r3
 800e516:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e51c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e534:	6859      	ldr	r1, [r3, #4]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3308      	adds	r3, #8
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4608      	mov	r0, r1
 800e54c:	4798      	blx	r3
 800e54e:	4603      	mov	r3, r0
 800e550:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e556:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55e:	6859      	ldr	r1, [r3, #4]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e564:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	330c      	adds	r3, #12
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4608      	mov	r0, r1
 800e576:	4798      	blx	r3
 800e578:	4603      	mov	r3, r0
 800e57a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800e57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e580:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681c      	ldr	r4, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e58c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800e590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff fc50 	bl	800de3a <_ZN3ros9Publisher15getEndpointTypeEv>
 800e59a:	4601      	mov	r1, r0
 800e59c:	f107 030c 	add.w	r3, r7, #12
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ac:	e7a0      	b.n	800e4f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b4:	2b18      	cmp	r3, #24
 800e5b6:	dc68      	bgt.n	800e68a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d05b      	beq.n	800e682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4413      	add	r3, r2
 800e5fc:	6859      	ldr	r1, [r3, #4]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3308      	adds	r3, #8
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4608      	mov	r0, r1
 800e614:	4798      	blx	r3
 800e616:	4603      	mov	r3, r0
 800e618:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	6859      	ldr	r1, [r3, #4]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4413      	add	r3, r2
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	330c      	adds	r3, #12
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4608      	mov	r0, r1
 800e63e:	4798      	blx	r3
 800e640:	4603      	mov	r3, r0
 800e642:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800e644:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e648:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	681c      	ldr	r4, [r3, #0]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	6859      	ldr	r1, [r3, #4]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3304      	adds	r3, #4
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4608      	mov	r0, r1
 800e674:	4798      	blx	r3
 800e676:	4601      	mov	r1, r0
 800e678:	f107 030c 	add.w	r3, r7, #12
 800e67c:	461a      	mov	r2, r3
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	3301      	adds	r3, #1
 800e686:	627b      	str	r3, [r7, #36]	; 0x24
 800e688:	e793      	b.n	800e5b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800e692:	bf00      	nop
 800e694:	372c      	adds	r7, #44	; 0x2c
 800e696:	46bd      	mov	sp, r7
 800e698:	bd90      	pop	{r4, r7, pc}
	...

0800e69c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800e6a6:	f107 0308 	add.w	r3, r7, #8
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fabe 	bl	800dc2c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7ff fbfc 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800e6c4:	f107 0308 	add.w	r3, r7, #8
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7ff fb1e 	bl	800dd0c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	4914      	ldr	r1, [pc, #80]	; (800e728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800e6d6:	fba1 1303 	umull	r1, r3, r1, r3
 800e6da:	099b      	lsrs	r3, r3, #6
 800e6dc:	4413      	add	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800e6e0:	6939      	ldr	r1, [r7, #16]
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	4b10      	ldr	r3, [pc, #64]	; (800e728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800e6e6:	fba3 0302 	umull	r0, r3, r3, r2
 800e6ea:	099b      	lsrs	r3, r3, #6
 800e6ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e6f0:	fb00 f303 	mul.w	r3, r0, r3
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	4a0d      	ldr	r2, [pc, #52]	; (800e72c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800e6f8:	fb02 f303 	mul.w	r3, r2, r3
 800e6fc:	440b      	add	r3, r1
 800e6fe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800e700:	f107 0308 	add.w	r3, r7, #8
 800e704:	3304      	adds	r3, #4
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f8a3 	bl	800e854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	3304      	adds	r3, #4
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff fbcd 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e718:	4602      	mov	r2, r0
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800e720:	bf00      	nop
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	10624dd3 	.word	0x10624dd3
 800e72c:	000f4240 	.word	0x000f4240

0800e730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b63      	cmp	r3, #99	; 0x63
 800e740:	dd09      	ble.n	800e756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e748:	f083 0301 	eor.w	r3, r3, #1
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800e752:	2300      	movs	r3, #0
 800e754:	e077      	b.n	800e846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800e762:	3207      	adds	r2, #7
 800e764:	4611      	mov	r1, r2
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	4798      	blx	r3
 800e76a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	22ff      	movs	r2, #255	; 0xff
 800e770:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	22fe      	movs	r2, #254	; 0xfe
 800e778:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	121b      	asrs	r3, r3, #8
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800e7a0:	4413      	add	r3, r2
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	43db      	mvns	r3, r3
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	b21b      	sxth	r3, r3
 800e7bc:	121b      	asrs	r3, r3, #8
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800e7ca:	2305      	movs	r3, #5
 800e7cc:	61bb      	str	r3, [r7, #24]
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	3307      	adds	r3, #7
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	da0d      	bge.n	800e7f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	4413      	add	r3, r2
 800e7de:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	61bb      	str	r3, [r7, #24]
 800e7f2:	e7ec      	b.n	800e7ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	3307      	adds	r3, #7
 800e7f8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	425a      	negs	r2, r3
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	b2d2      	uxtb	r2, r2
 800e802:	bf58      	it	pl
 800e804:	4253      	negpl	r3, r2
 800e806:	b2da      	uxtb	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	1c59      	adds	r1, r3, #1
 800e80c:	6179      	str	r1, [r7, #20]
 800e80e:	43d2      	mvns	r2, r2
 800e810:	b2d1      	uxtb	r1, r2
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4413      	add	r3, r2
 800e816:	460a      	mov	r2, r1
 800e818:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e822:	dc0a      	bgt.n	800e83a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	1d18      	adds	r0, r3, #4
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e82e:	697a      	ldr	r2, [r7, #20]
 800e830:	4619      	mov	r1, r3
 800e832:	f7ff fb2d 	bl	800de90 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	e005      	b.n	800e846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800e83a:	4905      	ldr	r1, [pc, #20]	; (800e850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f000 f847 	bl	800e8d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800e846:	4618      	mov	r0, r3
 800e848:	3720      	adds	r7, #32
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	08014db4 	.word	0x08014db4

0800e854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3304      	adds	r3, #4
 800e862:	4618      	mov	r0, r3
 800e864:	f7ff fb25 	bl	800deb2 <_ZN13STM32Hardware4timeEv>
 800e868:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	4914      	ldr	r1, [pc, #80]	; (800e8c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800e872:	fba1 1303 	umull	r1, r3, r1, r3
 800e876:	099b      	lsrs	r3, r3, #6
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	1e5a      	subs	r2, r3, #1
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	6859      	ldr	r1, [r3, #4]
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	4b0f      	ldr	r3, [pc, #60]	; (800e8c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800e888:	fba3 0302 	umull	r0, r3, r3, r2
 800e88c:	099b      	lsrs	r3, r3, #6
 800e88e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e892:	fb00 f303 	mul.w	r3, r0, r3
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	4a0b      	ldr	r2, [pc, #44]	; (800e8c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800e89a:	fb02 f303 	mul.w	r3, r2, r3
 800e89e:	1aca      	subs	r2, r1, r3
 800e8a0:	4b0a      	ldr	r3, [pc, #40]	; (800e8cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800e8a2:	4413      	add	r3, r2
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f103 020c 	add.w	r2, r3, #12
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	3310      	adds	r3, #16
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	f7f7 fe83 	bl	80065c0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800e8ba:	bf00      	nop
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	10624dd3 	.word	0x10624dd3
 800e8c8:	000f4240 	.word	0x000f4240
 800e8cc:	3b9aca00 	.word	0x3b9aca00

0800e8d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	2103      	movs	r1, #3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f804 	bl	800e8ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800e8e4:	bf00      	nop
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800e8fa:	f107 0314 	add.w	r3, r7, #20
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe fc4c 	bl	800d19c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800e904:	7afb      	ldrb	r3, [r7, #11]
 800e906:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f107 0214 	add.w	r2, r7, #20
 800e916:	2107      	movs	r1, #7
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	4798      	blx	r3
  }
 800e91c:	bf00      	nop
 800e91e:	3720      	adds	r7, #32
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_Z41__static_initialization_and_destruction_0ii>:
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d116      	bne.n	800e962 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d111      	bne.n	800e962 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle rosSerialNode;
 800e93e:	480b      	ldr	r0, [pc, #44]	; (800e96c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800e940:	f7ff fb26 	bl	800df90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt16 pubData;
 800e944:	480a      	ldr	r0, [pc, #40]	; (800e970 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e946:	f7fe fbad 	bl	800d0a4 <_ZN8std_msgs6UInt16C1Ev>
ros::Publisher _pub("pubTopicName", &pubData);
 800e94a:	2300      	movs	r3, #0
 800e94c:	4a08      	ldr	r2, [pc, #32]	; (800e970 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e94e:	4909      	ldr	r1, [pc, #36]	; (800e974 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e950:	4809      	ldr	r0, [pc, #36]	; (800e978 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800e952:	f7ff fa5b 	bl	800de0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
 800e956:	2301      	movs	r3, #1
 800e958:	4a08      	ldr	r2, [pc, #32]	; (800e97c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800e95a:	4909      	ldr	r1, [pc, #36]	; (800e980 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800e95c:	4809      	ldr	r0, [pc, #36]	; (800e984 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e95e:	f7ff fba5 	bl	800e0ac <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20000cec 	.word	0x20000cec
 800e970:	2000121c 	.word	0x2000121c
 800e974:	08014df0 	.word	0x08014df0
 800e978:	20001224 	.word	0x20001224
 800e97c:	0800dec9 	.word	0x0800dec9
 800e980:	08014e00 	.word	0x08014e00
 800e984:	20001238 	.word	0x20001238

0800e988 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	330c      	adds	r3, #12
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fe fbbb 	bl	800d114 <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	695b      	ldr	r3, [r3, #20]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	320c      	adds	r2, #12
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	4798      	blx	r3
  }
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	699b      	ldr	r3, [r3, #24]
  }
 800e9be:	4618      	mov	r0, r3
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	330c      	adds	r3, #12
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe fbc4 	bl	800d164 <_ZN8std_msgs6UInt167getTypeEv>
 800e9dc:	4603      	mov	r3, r0
  }
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	330c      	adds	r3, #12
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fe fbc4 	bl	800d180 <_ZN8std_msgs6UInt166getMD5Ev>
 800e9f8:	4603      	mov	r3, r0
  }
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800ea02:	b480      	push	{r7}
 800ea04:	b083      	sub	sp, #12
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
    return configured_;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800ea10:	4618      	mov	r0, r3
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <_GLOBAL__sub_I_rosSerialNode>:
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea24:	2001      	movs	r0, #1
 800ea26:	f7ff ff7d 	bl	800e924 <_Z41__static_initialization_and_destruction_0ii>
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 800ea2c:	b5b0      	push	{r4, r5, r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2408      	movs	r4, #8
 800ea38:	461d      	mov	r5, r3
 800ea3a:	2c00      	cmp	r4, #0
 800ea3c:	db06      	blt.n	800ea4c <_ZN8SOFT_ARMC1Ev+0x20>
 800ea3e:	2106      	movs	r1, #6
 800ea40:	4628      	mov	r0, r5
 800ea42:	f000 f808 	bl	800ea56 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 800ea46:	35a4      	adds	r5, #164	; 0xa4
 800ea48:	3c01      	subs	r4, #1
 800ea4a:	e7f6      	b.n	800ea3a <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bdb0      	pop	{r4, r5, r7, pc}

0800ea56 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800ea56:	b590      	push	{r4, r7, lr}
 800ea58:	b085      	sub	sp, #20
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
 800ea60:	2094      	movs	r0, #148	; 0x94
 800ea62:	f000 fb0e 	bl	800f082 <_Znwj>
 800ea66:	4603      	mov	r3, r0
 800ea68:	461c      	mov	r4, r3
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f7fc fa95 	bl	800af9c <_ZN9PNEUDRIVEC1Ei>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b05      	cmp	r3, #5
 800ea7e:	dc0f      	bgt.n	800eaa0 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea84:	689a      	ldr	r2, [r3, #8]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	6819      	ldr	r1, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	3216      	adds	r2, #22
 800ea94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	60fb      	str	r3, [r7, #12]
 800ea9e:	e7ec      	b.n	800ea7a <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd90      	pop	{r4, r7, pc}

0800eaaa <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	ed87 0a01 	vstr	s0, [r7, #4]
 800eab4:	edd7 7a01 	vldr	s15, [r7, #4]
 800eab8:	fef8 7a67 	vrinta.f32	s15, s15
 800eabc:	eeb0 0a67 	vmov.f32	s0, s15
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
	...

0800eacc <setup>:
float chamber0p=0;
float chamber1p=0;

PRESSURE_SOURCE pSink2(7,analogPort_sink);

void setup() {
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0


	/*setup 1000Hz control loop*/
	setPeriodControlLoop(loopms);
 800ead0:	200a      	movs	r0, #10
 800ead2:	f7fc fbfb 	bl	800b2cc <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(50);
 800ead6:	2032      	movs	r0, #50	; 0x32
 800ead8:	f7fc fc08 	bl	800b2ec <setPeriodSendLoop>



	/*Configure the pump port and sensor paramter of the source*/
	pneudrive.pSource.attach(0,analogPort_source);
 800eadc:	4b1b      	ldr	r3, [pc, #108]	; (800eb4c <setup+0x80>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	461a      	mov	r2, r3
 800eae2:	2100      	movs	r1, #0
 800eae4:	481a      	ldr	r0, [pc, #104]	; (800eb50 <setup+0x84>)
 800eae6:	f7fc f91f 	bl	800ad28 <_ZN15PRESSURE_SOURCE6attachEii>

	/*Configure the pump port and sensor parameter of the sink*/
	pneudrive.pSink.attach(1,analogPort_sink);
 800eaea:	4b1a      	ldr	r3, [pc, #104]	; (800eb54 <setup+0x88>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	2101      	movs	r1, #1
 800eaf2:	4819      	ldr	r0, [pc, #100]	; (800eb58 <setup+0x8c>)
 800eaf4:	f7fc f918 	bl	800ad28 <_ZN15PRESSURE_SOURCE6attachEii>
	pSink2.attach(7, analogPort_sink);
 800eaf8:	4b16      	ldr	r3, [pc, #88]	; (800eb54 <setup+0x88>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	461a      	mov	r2, r3
 800eafe:	2107      	movs	r1, #7
 800eb00:	4816      	ldr	r0, [pc, #88]	; (800eb5c <setup+0x90>)
 800eb02:	f7fc f911 	bl	800ad28 <_ZN15PRESSURE_SOURCE6attachEii>

	/*Attach the valves and pressure sensors of chamber 0 to corresponding ports.
	 *Set the pressure sensor range. The parameter list are (vMin, vMax, pMin, pMax).
	 * vMin vMax have the unit of voltage. pMin pMax use the gauge pressure, has the unit of Pa. For example, atmosphere is 0, and vacuum is -101325.*/
	pneudrive.chambers[0]->attach(0, 2,analogPort_chamber0);
 800eb06:	4b16      	ldr	r3, [pc, #88]	; (800eb60 <setup+0x94>)
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	6818      	ldr	r0, [r3, #0]
 800eb0c:	4b15      	ldr	r3, [pc, #84]	; (800eb64 <setup+0x98>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2202      	movs	r2, #2
 800eb12:	2100      	movs	r1, #0
 800eb14:	f7fb fd54 	bl	800a5c0 <_ZN7CHAMBER6attachEiii>
	pneudrive.chambers[1]->attach(1, 3,analogPort_chamber1);
 800eb18:	4b11      	ldr	r3, [pc, #68]	; (800eb60 <setup+0x94>)
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <setup+0x9c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2203      	movs	r2, #3
 800eb26:	2101      	movs	r1, #1
 800eb28:	f7fb fd4a 	bl	800a5c0 <_ZN7CHAMBER6attachEiii>

	numUpdateValue=1000/loopms/fre;
 800eb2c:	4b0f      	ldr	r3, [pc, #60]	; (800eb6c <setup+0xa0>)
 800eb2e:	ed93 7a00 	vldr	s14, [r3]
 800eb32:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800eb70 <setup+0xa4>
 800eb36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb3e:	ee17 2a90 	vmov	r2, s15
 800eb42:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <setup+0xa8>)
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	2000036c 	.word	0x2000036c
 800eb50:	200022a0 	.word	0x200022a0
 800eb54:	20000370 	.word	0x20000370
 800eb58:	200022e0 	.word	0x200022e0
 800eb5c:	2000234c 	.word	0x2000234c
 800eb60:	20002294 	.word	0x20002294
 800eb64:	20000374 	.word	0x20000374
 800eb68:	20000378 	.word	0x20000378
 800eb6c:	20000388 	.word	0x20000388
 800eb70:	42c80000 	.word	0x42c80000
 800eb74:	2000038c 	.word	0x2000038c

0800eb78 <_Z10readLengthh>:

float readLength(uint8_t port){
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]
	return (AnalogRead(port)*14-35);  //135-v/5.0*(35-(-35));
 800eb82:	79fb      	ldrb	r3, [r7, #7]
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fc fabd 	bl	800b106 <AnalogRead>
 800eb8c:	eeb0 7a40 	vmov.f32	s14, s0
 800eb90:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 800eb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb98:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800ebac <_Z10readLengthh+0x34>
 800eb9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800eba0:	eeb0 0a67 	vmov.f32	s0, s15
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	420c0000 	.word	0x420c0000

0800ebb0 <loop>:

void loop() {
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	af00      	add	r7, sp, #0

	/*Update sensor data of chamber 0*/
	pneudrive.pSource.readPressure();
 800ebb4:	4862      	ldr	r0, [pc, #392]	; (800ed40 <loop+0x190>)
 800ebb6:	f7fc f97e 	bl	800aeb6 <_ZN15PRESSURE_SOURCE12readPressureEv>
	pneudrive.pSink.readPressure();
 800ebba:	4862      	ldr	r0, [pc, #392]	; (800ed44 <loop+0x194>)
 800ebbc:	f7fc f97b 	bl	800aeb6 <_ZN15PRESSURE_SOURCE12readPressureEv>

	chamber0p=pneudrive.readPressure(0);
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4861      	ldr	r0, [pc, #388]	; (800ed48 <loop+0x198>)
 800ebc4:	f7fc fa46 	bl	800b054 <_ZN9PNEUDRIVE12readPressureEi>
 800ebc8:	eef0 7a40 	vmov.f32	s15, s0
 800ebcc:	4b5f      	ldr	r3, [pc, #380]	; (800ed4c <loop+0x19c>)
 800ebce:	edc3 7a00 	vstr	s15, [r3]
	pneudrive.chambers[1]->readPressureExt(chamber0p);//using the chamber0 's pressure as the chamber 1's pressure
 800ebd2:	4b5d      	ldr	r3, [pc, #372]	; (800ed48 <loop+0x198>)
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	4b5c      	ldr	r3, [pc, #368]	; (800ed4c <loop+0x19c>)
 800ebdc:	edd3 7a00 	vldr	s15, [r3]
 800ebe0:	eeb0 0a67 	vmov.f32	s0, s15
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	f7fb fd42 	bl	800a66e <_ZN7CHAMBER15readPressureExtEf>

	length=readLength(analogPort_laser);
 800ebea:	4b59      	ldr	r3, [pc, #356]	; (800ed50 <loop+0x1a0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff ffc1 	bl	800eb78 <_Z10readLengthh>
 800ebf6:	eef0 7a40 	vmov.f32	s15, s0
 800ebfa:	4b56      	ldr	r3, [pc, #344]	; (800ed54 <loop+0x1a4>)
 800ebfc:	edc3 7a00 	vstr	s15, [r3]

	/*customized switch flag*/
	if (loop_gogogo) {
 800ec00:	4b55      	ldr	r3, [pc, #340]	; (800ed58 <loop+0x1a8>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 8091 	beq.w	800ed2c <loop+0x17c>

		if(!t0flag){
 800ec0a:	4b54      	ldr	r3, [pc, #336]	; (800ed5c <loop+0x1ac>)
 800ec0c:	f993 3000 	ldrsb.w	r3, [r3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d107      	bne.n	800ec24 <loop+0x74>
			t0=millis();
 800ec14:	f7fc fada 	bl	800b1cc <millis>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	4b51      	ldr	r3, [pc, #324]	; (800ed60 <loop+0x1b0>)
 800ec1c:	601a      	str	r2, [r3, #0]
			t0flag=1;
 800ec1e:	4b4f      	ldr	r3, [pc, #316]	; (800ed5c <loop+0x1ac>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	701a      	strb	r2, [r3, #0]
		}

		/*maintain the upper stream and lower stream pressure*/
		pneudrive.pSource.maintainPressure(upstreamPressure);
 800ec24:	4b4f      	ldr	r3, [pc, #316]	; (800ed64 <loop+0x1b4>)
 800ec26:	edd3 7a00 	vldr	s15, [r3]
 800ec2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ec2e:	4844      	ldr	r0, [pc, #272]	; (800ed40 <loop+0x190>)
 800ec30:	f7fc f8b0 	bl	800ad94 <_ZN15PRESSURE_SOURCE16maintainPressureEf>

		/*maintain a downsteam pressure if necessary*/
	//	pneudrive.pSink.maintainPressure(downstreamPressure);

		pSink2.maintainPressure(downstreamPressure);
 800ec34:	4b4c      	ldr	r3, [pc, #304]	; (800ed68 <loop+0x1b8>)
 800ec36:	edd3 7a00 	vldr	s15, [r3]
 800ec3a:	eeb0 0a67 	vmov.f32	s0, s15
 800ec3e:	484b      	ldr	r0, [pc, #300]	; (800ed6c <loop+0x1bc>)
 800ec40:	f7fc f8a8 	bl	800ad94 <_ZN15PRESSURE_SOURCE16maintainPressureEf>

		tcur=millis();
 800ec44:	f7fc fac2 	bl	800b1cc <millis>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	4b49      	ldr	r3, [pc, #292]	; (800ed70 <loop+0x1c0>)
 800ec4c:	601a      	str	r2, [r3, #0]
		sinbase=sin(2*M_PI*fre*(tcur-t0)*0.001);
 800ec4e:	4b49      	ldr	r3, [pc, #292]	; (800ed74 <loop+0x1c4>)
 800ec50:	edd3 7a00 	vldr	s15, [r3]
 800ec54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ec58:	ed9f 6b35 	vldr	d6, [pc, #212]	; 800ed30 <loop+0x180>
 800ec5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec60:	4b43      	ldr	r3, [pc, #268]	; (800ed70 <loop+0x1c0>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	4b3e      	ldr	r3, [pc, #248]	; (800ed60 <loop+0x1b0>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	ee07 3a90 	vmov	s15, r3
 800ec6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ec72:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ec76:	ed9f 6b30 	vldr	d6, [pc, #192]	; 800ed38 <loop+0x188>
 800ec7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec7e:	eeb0 0b47 	vmov.f64	d0, d7
 800ec82:	f000 fa71 	bl	800f168 <sin>
 800ec86:	eeb0 7b40 	vmov.f64	d7, d0
 800ec8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ec8e:	4b3a      	ldr	r3, [pc, #232]	; (800ed78 <loop+0x1c8>)
 800ec90:	edc3 7a00 	vstr	s15, [r3]
		sinbase=sinbase>=ratio?1:-1;
 800ec94:	4b38      	ldr	r3, [pc, #224]	; (800ed78 <loop+0x1c8>)
 800ec96:	ed93 7a00 	vldr	s14, [r3]
 800ec9a:	4b38      	ldr	r3, [pc, #224]	; (800ed7c <loop+0x1cc>)
 800ec9c:	edd3 7a00 	vldr	s15, [r3]
 800eca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	db02      	blt.n	800ecb0 <loop+0x100>
 800ecaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ecae:	e000      	b.n	800ecb2 <loop+0x102>
 800ecb0:	4b33      	ldr	r3, [pc, #204]	; (800ed80 <loop+0x1d0>)
 800ecb2:	4a31      	ldr	r2, [pc, #196]	; (800ed78 <loop+0x1c8>)
 800ecb4:	6013      	str	r3, [r2, #0]
		externPd=amp*sinbase+offset;
 800ecb6:	4b33      	ldr	r3, [pc, #204]	; (800ed84 <loop+0x1d4>)
 800ecb8:	ed93 7a00 	vldr	s14, [r3]
 800ecbc:	4b2e      	ldr	r3, [pc, #184]	; (800ed78 <loop+0x1c8>)
 800ecbe:	edd3 7a00 	vldr	s15, [r3]
 800ecc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecc6:	4b30      	ldr	r3, [pc, #192]	; (800ed88 <loop+0x1d8>)
 800ecc8:	edd3 7a00 	vldr	s15, [r3]
 800eccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecd0:	4b2e      	ldr	r3, [pc, #184]	; (800ed8c <loop+0x1dc>)
 800ecd2:	edc3 7a00 	vstr	s15, [r3]
		pneudrive.writePressure(0,externPd);
 800ecd6:	4b2d      	ldr	r3, [pc, #180]	; (800ed8c <loop+0x1dc>)
 800ecd8:	edd3 7a00 	vldr	s15, [r3]
 800ecdc:	eeb0 0a67 	vmov.f32	s0, s15
 800ece0:	2100      	movs	r1, #0
 800ece2:	4819      	ldr	r0, [pc, #100]	; (800ed48 <loop+0x198>)
 800ece4:	f7fc f9cb 	bl	800b07e <_ZN9PNEUDRIVE13writePressureEif>
		pneudrive.writePressure(1,externPd);
 800ece8:	4b28      	ldr	r3, [pc, #160]	; (800ed8c <loop+0x1dc>)
 800ecea:	edd3 7a00 	vldr	s15, [r3]
 800ecee:	eeb0 0a67 	vmov.f32	s0, s15
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	4814      	ldr	r0, [pc, #80]	; (800ed48 <loop+0x198>)
 800ecf6:	f7fc f9c2 	bl	800b07e <_ZN9PNEUDRIVE13writePressureEif>

		localCounter++;
 800ecfa:	4b25      	ldr	r3, [pc, #148]	; (800ed90 <loop+0x1e0>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	4a23      	ldr	r2, [pc, #140]	; (800ed90 <loop+0x1e0>)
 800ed02:	6013      	str	r3, [r2, #0]
		localCounter%=numUpdateValue;
 800ed04:	4b22      	ldr	r3, [pc, #136]	; (800ed90 <loop+0x1e0>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a22      	ldr	r2, [pc, #136]	; (800ed94 <loop+0x1e4>)
 800ed0a:	6812      	ldr	r2, [r2, #0]
 800ed0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed10:	fb02 f201 	mul.w	r2, r2, r1
 800ed14:	1a9b      	subs	r3, r3, r2
 800ed16:	4a1e      	ldr	r2, [pc, #120]	; (800ed90 <loop+0x1e0>)
 800ed18:	6013      	str	r3, [r2, #0]
		if(localCounter==0){
 800ed1a:	4b1d      	ldr	r3, [pc, #116]	; (800ed90 <loop+0x1e0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d104      	bne.n	800ed2c <loop+0x17c>
			totalNum++;
 800ed22:	4b1d      	ldr	r3, [pc, #116]	; (800ed98 <loop+0x1e8>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	3301      	adds	r3, #1
 800ed28:	4a1b      	ldr	r2, [pc, #108]	; (800ed98 <loop+0x1e8>)
 800ed2a:	6013      	str	r3, [r2, #0]
			}
		}*/


	}
}
 800ed2c:	bf00      	nop
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	54442d18 	.word	0x54442d18
 800ed34:	401921fb 	.word	0x401921fb
 800ed38:	d2f1a9fc 	.word	0xd2f1a9fc
 800ed3c:	3f50624d 	.word	0x3f50624d
 800ed40:	200022a0 	.word	0x200022a0
 800ed44:	200022e0 	.word	0x200022e0
 800ed48:	20002294 	.word	0x20002294
 800ed4c:	20002348 	.word	0x20002348
 800ed50:	2000037c 	.word	0x2000037c
 800ed54:	2000232c 	.word	0x2000232c
 800ed58:	20000390 	.word	0x20000390
 800ed5c:	2000233c 	.word	0x2000233c
 800ed60:	20002334 	.word	0x20002334
 800ed64:	20000394 	.word	0x20000394
 800ed68:	20000398 	.word	0x20000398
 800ed6c:	2000234c 	.word	0x2000234c
 800ed70:	20002338 	.word	0x20002338
 800ed74:	20000388 	.word	0x20000388
 800ed78:	20002344 	.word	0x20002344
 800ed7c:	2000039c 	.word	0x2000039c
 800ed80:	bf800000 	.word	0xbf800000
 800ed84:	20000380 	.word	0x20000380
 800ed88:	20000384 	.word	0x20000384
 800ed8c:	20002340 	.word	0x20002340
 800ed90:	20002330 	.word	0x20002330
 800ed94:	2000038c 	.word	0x2000038c
 800ed98:	20002328 	.word	0x20002328

0800ed9c <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 800ed9c:	b5b0      	push	{r4, r5, r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af06      	add	r7, sp, #24
	//printf("Time: %d\r\n",millis());
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800eda2:	f7fc fa13 	bl	800b1cc <millis>
 800eda6:	4605      	mov	r5, r0
			millis(),
			(int)(pneudrive.pSource.pressure/1000),
 800eda8:	4b26      	ldr	r3, [pc, #152]	; (800ee44 <serialDisplay+0xa8>)
 800edaa:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800edae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ee48 <serialDisplay+0xac>
 800edb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800edb6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
			(int)(pneudrive.pSink.pressure/1000),
 800edba:	4b22      	ldr	r3, [pc, #136]	; (800ee44 <serialDisplay+0xa8>)
 800edbc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800edc0:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ee48 <serialDisplay+0xac>
 800edc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800edc8:	eefd 5ae7 	vcvt.s32.f32	s11, s15
			(int)(externPd/1000),
 800edcc:	4b1f      	ldr	r3, [pc, #124]	; (800ee4c <serialDisplay+0xb0>)
 800edce:	ed93 7a00 	vldr	s14, [r3]
 800edd2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800ee48 <serialDisplay+0xac>
 800edd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800edda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edde:	ee17 2a90 	vmov	r2, s15
//			(int)(amp/1000),
//			(int)(offset/1000),
			(int)(fre*10),
 800ede2:	4b1b      	ldr	r3, [pc, #108]	; (800ee50 <serialDisplay+0xb4>)
 800ede4:	edd3 7a00 	vldr	s15, [r3]
 800ede8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800edec:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800edf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edf4:	ee17 1a90 	vmov	r1, s15
			(int)(pneudrive.chambers[0]->pressure/1000),
 800edf8:	4b12      	ldr	r3, [pc, #72]	; (800ee44 <serialDisplay+0xa8>)
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800ee02:	eddf 6a11 	vldr	s13, [pc, #68]	; 800ee48 <serialDisplay+0xac>
 800ee06:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%10lu %d  %d %d %d %d %d %d\r\n",
 800ee0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee0e:	ee17 0a90 	vmov	r0, s15
 800ee12:	4b10      	ldr	r3, [pc, #64]	; (800ee54 <serialDisplay+0xb8>)
 800ee14:	edd3 7a00 	vldr	s15, [r3]
 800ee18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee1c:	ee17 4a90 	vmov	r4, s15
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <serialDisplay+0xbc>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	9304      	str	r3, [sp, #16]
 800ee26:	9403      	str	r4, [sp, #12]
 800ee28:	9002      	str	r0, [sp, #8]
 800ee2a:	9101      	str	r1, [sp, #4]
 800ee2c:	9200      	str	r2, [sp, #0]
 800ee2e:	ee15 3a90 	vmov	r3, s11
 800ee32:	ee16 2a10 	vmov	r2, s12
 800ee36:	4629      	mov	r1, r5
 800ee38:	4808      	ldr	r0, [pc, #32]	; (800ee5c <serialDisplay+0xc0>)
 800ee3a:	f001 fef5 	bl	8010c28 <iprintf>
			(int)(length),
			totalNum
			);
}
 800ee3e:	bf00      	nop
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bdb0      	pop	{r4, r5, r7, pc}
 800ee44:	20002294 	.word	0x20002294
 800ee48:	447a0000 	.word	0x447a0000
 800ee4c:	20002340 	.word	0x20002340
 800ee50:	20000388 	.word	0x20000388
 800ee54:	2000232c 	.word	0x2000232c
 800ee58:	20002328 	.word	0x20002328
 800ee5c:	08014e10 	.word	0x08014e10

0800ee60 <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]

	char commandChar;
	float pCommand = 0;
 800ee68:	f04f 0300 	mov.w	r3, #0
 800ee6c:	60bb      	str	r3, [r7, #8]

	//Read the received buffer with customized message. The first char means command type. The second number represents the interested chamber number. The third float number is the pressure command.
	sscanf(pSerialReceiveBuffer, "%c %f", &commandChar, &pCommand);
 800ee6e:	f107 0308 	add.w	r3, r7, #8
 800ee72:	f107 020f 	add.w	r2, r7, #15
 800ee76:	4935      	ldr	r1, [pc, #212]	; (800ef4c <serial3Callback+0xec>)
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 ffd3 	bl	8010e24 <siscanf>


	if (commandChar == 'g') {
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b67      	cmp	r3, #103	; 0x67
 800ee82:	d103      	bne.n	800ee8c <serial3Callback+0x2c>
		loop_gogogo = 1;
 800ee84:	4b32      	ldr	r3, [pc, #200]	; (800ef50 <serial3Callback+0xf0>)
 800ee86:	2201      	movs	r2, #1
 800ee88:	601a      	str	r2, [r3, #0]
		}
	else if(commandChar == 'r') {
		ratio=pCommand;
		}

}
 800ee8a:	e05a      	b.n	800ef42 <serial3Callback+0xe2>
	} else if (commandChar == 's') {
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
 800ee8e:	2b73      	cmp	r3, #115	; 0x73
 800ee90:	d10b      	bne.n	800eeaa <serial3Callback+0x4a>
		loop_gogogo = 0;
 800ee92:	4b2f      	ldr	r3, [pc, #188]	; (800ef50 <serial3Callback+0xf0>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
		pneudrive.chambers[0]->writePressure(0);
 800ee98:	4b2e      	ldr	r3, [pc, #184]	; (800ef54 <serial3Callback+0xf4>)
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800ef58 <serial3Callback+0xf8>
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fb fc04 	bl	800a6b0 <_ZN7CHAMBER13writePressureEf>
}
 800eea8:	e04b      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'a') {
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
 800eeac:	2b61      	cmp	r3, #97	; 0x61
 800eeae:	d103      	bne.n	800eeb8 <serial3Callback+0x58>
		amp=pCommand;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	4a2a      	ldr	r2, [pc, #168]	; (800ef5c <serial3Callback+0xfc>)
 800eeb4:	6013      	str	r3, [r2, #0]
}
 800eeb6:	e044      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'f') {
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	2b66      	cmp	r3, #102	; 0x66
 800eebc:	d116      	bne.n	800eeec <serial3Callback+0x8c>
			fre=pCommand;
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	4a27      	ldr	r2, [pc, #156]	; (800ef60 <serial3Callback+0x100>)
 800eec2:	6013      	str	r3, [r2, #0]
			numUpdateValue=round(500/fre);
 800eec4:	4b26      	ldr	r3, [pc, #152]	; (800ef60 <serial3Callback+0x100>)
 800eec6:	edd3 7a00 	vldr	s15, [r3]
 800eeca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ef64 <serial3Callback+0x104>
 800eece:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eed2:	eeb0 0a66 	vmov.f32	s0, s13
 800eed6:	f7ff fde8 	bl	800eaaa <_ZSt5roundf>
 800eeda:	eef0 7a40 	vmov.f32	s15, s0
 800eede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eee2:	ee17 2a90 	vmov	r2, s15
 800eee6:	4b20      	ldr	r3, [pc, #128]	; (800ef68 <serial3Callback+0x108>)
 800eee8:	601a      	str	r2, [r3, #0]
}
 800eeea:	e02a      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'o') {
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	2b6f      	cmp	r3, #111	; 0x6f
 800eef0:	d103      	bne.n	800eefa <serial3Callback+0x9a>
			offset=pCommand;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	4a1d      	ldr	r2, [pc, #116]	; (800ef6c <serial3Callback+0x10c>)
 800eef6:	6013      	str	r3, [r2, #0]
}
 800eef8:	e023      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'z') {
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	2b7a      	cmp	r3, #122	; 0x7a
 800eefe:	d10c      	bne.n	800ef1a <serial3Callback+0xba>
			pneudrive.chambers[0]->zeroPressure();
 800ef00:	4b14      	ldr	r3, [pc, #80]	; (800ef54 <serial3Callback+0xf4>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb fb7e 	bl	800a608 <_ZN7CHAMBER12zeroPressureEv>
			pneudrive.pSource.zeroPressure();
 800ef0c:	4818      	ldr	r0, [pc, #96]	; (800ef70 <serial3Callback+0x110>)
 800ef0e:	f7fb fff4 	bl	800aefa <_ZN15PRESSURE_SOURCE12zeroPressureEv>
			pneudrive.pSink.zeroPressure();
 800ef12:	4818      	ldr	r0, [pc, #96]	; (800ef74 <serial3Callback+0x114>)
 800ef14:	f7fb fff1 	bl	800aefa <_ZN15PRESSURE_SOURCE12zeroPressureEv>
}
 800ef18:	e013      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'u') {
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
 800ef1c:	2b75      	cmp	r3, #117	; 0x75
 800ef1e:	d103      	bne.n	800ef28 <serial3Callback+0xc8>
		upstreamPressure=pCommand;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	4a15      	ldr	r2, [pc, #84]	; (800ef78 <serial3Callback+0x118>)
 800ef24:	6013      	str	r3, [r2, #0]
}
 800ef26:	e00c      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'd') {
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b64      	cmp	r3, #100	; 0x64
 800ef2c:	d103      	bne.n	800ef36 <serial3Callback+0xd6>
		downstreamPressure=pCommand;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	4a12      	ldr	r2, [pc, #72]	; (800ef7c <serial3Callback+0x11c>)
 800ef32:	6013      	str	r3, [r2, #0]
}
 800ef34:	e005      	b.n	800ef42 <serial3Callback+0xe2>
	else if(commandChar == 'r') {
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	2b72      	cmp	r3, #114	; 0x72
 800ef3a:	d102      	bne.n	800ef42 <serial3Callback+0xe2>
		ratio=pCommand;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	4a10      	ldr	r2, [pc, #64]	; (800ef80 <serial3Callback+0x120>)
 800ef40:	6013      	str	r3, [r2, #0]
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	08014e30 	.word	0x08014e30
 800ef50:	20000390 	.word	0x20000390
 800ef54:	20002294 	.word	0x20002294
 800ef58:	00000000 	.word	0x00000000
 800ef5c:	20000380 	.word	0x20000380
 800ef60:	20000388 	.word	0x20000388
 800ef64:	43fa0000 	.word	0x43fa0000
 800ef68:	2000038c 	.word	0x2000038c
 800ef6c:	20000384 	.word	0x20000384
 800ef70:	200022a0 	.word	0x200022a0
 800ef74:	200022e0 	.word	0x200022e0
 800ef78:	20000394 	.word	0x20000394
 800ef7c:	20000398 	.word	0x20000398
 800ef80:	2000039c 	.word	0x2000039c

0800ef84 <_Z41__static_initialization_and_destruction_0ii>:
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d112      	bne.n	800efba <_Z41__static_initialization_and_destruction_0ii+0x36>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d10d      	bne.n	800efba <_Z41__static_initialization_and_destruction_0ii+0x36>
SOFT_ARM softArm;
 800ef9e:	4809      	ldr	r0, [pc, #36]	; (800efc4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800efa0:	f7ff fd44 	bl	800ea2c <_ZN8SOFT_ARMC1Ev>
PNEUDRIVE pneudrive(2);
 800efa4:	2102      	movs	r1, #2
 800efa6:	4808      	ldr	r0, [pc, #32]	; (800efc8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800efa8:	f7fb fff8 	bl	800af9c <_ZN9PNEUDRIVEC1Ei>
PRESSURE_SOURCE pSink2(7,analogPort_sink);
 800efac:	4b07      	ldr	r3, [pc, #28]	; (800efcc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	461a      	mov	r2, r3
 800efb2:	2107      	movs	r1, #7
 800efb4:	4806      	ldr	r0, [pc, #24]	; (800efd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800efb6:	f7fb fe85 	bl	800acc4 <_ZN15PRESSURE_SOURCEC1Eii>
}
 800efba:	bf00      	nop
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20001254 	.word	0x20001254
 800efc8:	20002294 	.word	0x20002294
 800efcc:	20000370 	.word	0x20000370
 800efd0:	2000234c 	.word	0x2000234c

0800efd4 <_GLOBAL__sub_I_softArm>:
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800efdc:	2001      	movs	r0, #1
 800efde:	f7ff ffd1 	bl	800ef84 <_Z41__static_initialization_and_destruction_0ii>
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <slaveSPITxRxCpltCallback>:
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
}



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <slaveSPITxRxCpltCallback+0x40>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d111      	bne.n	800f01a <slaveSPITxRxCpltCallback+0x36>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 800eff6:	4a0c      	ldr	r2, [pc, #48]	; (800f028 <slaveSPITxRxCpltCallback+0x44>)
 800eff8:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <slaveSPITxRxCpltCallback+0x44>)
 800effa:	f602 4098 	addw	r0, r2, #3224	; 0xc98
 800effe:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800f002:	f240 2292 	movw	r2, #658	; 0x292
 800f006:	4619      	mov	r1, r3
 800f008:	f000 ff30 	bl	800fe6c <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800f00c:	f240 2392 	movw	r3, #658	; 0x292
 800f010:	4a06      	ldr	r2, [pc, #24]	; (800f02c <slaveSPITxRxCpltCallback+0x48>)
 800f012:	4907      	ldr	r1, [pc, #28]	; (800f030 <slaveSPITxRxCpltCallback+0x4c>)
 800f014:	4807      	ldr	r0, [pc, #28]	; (800f034 <slaveSPITxRxCpltCallback+0x50>)
 800f016:	f7f4 fd27 	bl	8003a68 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	200003a0 	.word	0x200003a0
 800f028:	20001254 	.word	0x20001254
 800f02c:	200019c8 	.word	0x200019c8
 800f030:	20001c5a 	.word	0x20001c5a
 800f034:	2000a818 	.word	0x2000a818

0800f038 <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 800f040:	4b09      	ldr	r3, [pc, #36]	; (800f068 <slaveSPIErrorCallback+0x30>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	429a      	cmp	r2, r3
 800f048:	d109      	bne.n	800f05e <slaveSPIErrorCallback+0x26>
		printf("Error SPI 1 communication with RPI4\r\n");
 800f04a:	4808      	ldr	r0, [pc, #32]	; (800f06c <slaveSPIErrorCallback+0x34>)
 800f04c:	f001 fe60 	bl	8010d10 <puts>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 800f050:	f240 2392 	movw	r3, #658	; 0x292
 800f054:	4a06      	ldr	r2, [pc, #24]	; (800f070 <slaveSPIErrorCallback+0x38>)
 800f056:	4907      	ldr	r1, [pc, #28]	; (800f074 <slaveSPIErrorCallback+0x3c>)
 800f058:	4807      	ldr	r0, [pc, #28]	; (800f078 <slaveSPIErrorCallback+0x40>)
 800f05a:	f7f4 fd05 	bl	8003a68 <HAL_SPI_TransmitReceive_DMA>
	}
}
 800f05e:	bf00      	nop
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200003a0 	.word	0x200003a0
 800f06c:	08014e38 	.word	0x08014e38
 800f070:	200019c8 	.word	0x200019c8
 800f074:	20001c5a 	.word	0x20001c5a
 800f078:	2000a818 	.word	0x2000a818

0800f07c <__cxa_pure_virtual>:
 800f07c:	b508      	push	{r3, lr}
 800f07e:	f000 f825 	bl	800f0cc <_ZSt9terminatev>

0800f082 <_Znwj>:
 800f082:	b510      	push	{r4, lr}
 800f084:	2800      	cmp	r0, #0
 800f086:	bf14      	ite	ne
 800f088:	4604      	movne	r4, r0
 800f08a:	2401      	moveq	r4, #1
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 fee5 	bl	800fe5c <malloc>
 800f092:	b930      	cbnz	r0, 800f0a2 <_Znwj+0x20>
 800f094:	f000 f806 	bl	800f0a4 <_ZSt15get_new_handlerv>
 800f098:	b908      	cbnz	r0, 800f09e <_Znwj+0x1c>
 800f09a:	f000 fea6 	bl	800fdea <abort>
 800f09e:	4780      	blx	r0
 800f0a0:	e7f4      	b.n	800f08c <_Znwj+0xa>
 800f0a2:	bd10      	pop	{r4, pc}

0800f0a4 <_ZSt15get_new_handlerv>:
 800f0a4:	4b02      	ldr	r3, [pc, #8]	; (800f0b0 <_ZSt15get_new_handlerv+0xc>)
 800f0a6:	6818      	ldr	r0, [r3, #0]
 800f0a8:	f3bf 8f5b 	dmb	ish
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	2000238c 	.word	0x2000238c

0800f0b4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f0b4:	b508      	push	{r3, lr}
 800f0b6:	4780      	blx	r0
 800f0b8:	f000 fe97 	bl	800fdea <abort>

0800f0bc <_ZSt13get_terminatev>:
 800f0bc:	4b02      	ldr	r3, [pc, #8]	; (800f0c8 <_ZSt13get_terminatev+0xc>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	f3bf 8f5b 	dmb	ish
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	200003a4 	.word	0x200003a4

0800f0cc <_ZSt9terminatev>:
 800f0cc:	b508      	push	{r3, lr}
 800f0ce:	f7ff fff5 	bl	800f0bc <_ZSt13get_terminatev>
 800f0d2:	f7ff ffef 	bl	800f0b4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f0d8 <round>:
 800f0d8:	ee10 3a90 	vmov	r3, s1
 800f0dc:	b530      	push	{r4, r5, lr}
 800f0de:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f0e2:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800f0e6:	2913      	cmp	r1, #19
 800f0e8:	ee10 5a90 	vmov	r5, s1
 800f0ec:	ee10 2a10 	vmov	r2, s0
 800f0f0:	dc17      	bgt.n	800f122 <round+0x4a>
 800f0f2:	2900      	cmp	r1, #0
 800f0f4:	da09      	bge.n	800f10a <round+0x32>
 800f0f6:	3101      	adds	r1, #1
 800f0f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0fc:	d103      	bne.n	800f106 <round+0x2e>
 800f0fe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f102:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f106:	2200      	movs	r2, #0
 800f108:	e024      	b.n	800f154 <round+0x7c>
 800f10a:	4815      	ldr	r0, [pc, #84]	; (800f160 <round+0x88>)
 800f10c:	4108      	asrs	r0, r1
 800f10e:	4203      	tst	r3, r0
 800f110:	d100      	bne.n	800f114 <round+0x3c>
 800f112:	b16a      	cbz	r2, 800f130 <round+0x58>
 800f114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f118:	410b      	asrs	r3, r1
 800f11a:	442b      	add	r3, r5
 800f11c:	ea23 0300 	bic.w	r3, r3, r0
 800f120:	e7f1      	b.n	800f106 <round+0x2e>
 800f122:	2933      	cmp	r1, #51	; 0x33
 800f124:	dd05      	ble.n	800f132 <round+0x5a>
 800f126:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f12a:	d101      	bne.n	800f130 <round+0x58>
 800f12c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f130:	bd30      	pop	{r4, r5, pc}
 800f132:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800f136:	f04f 34ff 	mov.w	r4, #4294967295
 800f13a:	40c4      	lsrs	r4, r0
 800f13c:	4222      	tst	r2, r4
 800f13e:	d0f7      	beq.n	800f130 <round+0x58>
 800f140:	2001      	movs	r0, #1
 800f142:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800f146:	fa00 f101 	lsl.w	r1, r0, r1
 800f14a:	1852      	adds	r2, r2, r1
 800f14c:	bf28      	it	cs
 800f14e:	181b      	addcs	r3, r3, r0
 800f150:	ea22 0204 	bic.w	r2, r2, r4
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	ec41 0b10 	vmov	d0, r0, r1
 800f15c:	e7e8      	b.n	800f130 <round+0x58>
 800f15e:	bf00      	nop
 800f160:	000fffff 	.word	0x000fffff
 800f164:	00000000 	.word	0x00000000

0800f168 <sin>:
 800f168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f16a:	eeb0 7b40 	vmov.f64	d7, d0
 800f16e:	ee17 3a90 	vmov	r3, s15
 800f172:	4a19      	ldr	r2, [pc, #100]	; (800f1d8 <sin+0x70>)
 800f174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f178:	4293      	cmp	r3, r2
 800f17a:	dc05      	bgt.n	800f188 <sin+0x20>
 800f17c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800f1d0 <sin+0x68>
 800f180:	2000      	movs	r0, #0
 800f182:	f000 fcc5 	bl	800fb10 <__kernel_sin>
 800f186:	e004      	b.n	800f192 <sin+0x2a>
 800f188:	4a14      	ldr	r2, [pc, #80]	; (800f1dc <sin+0x74>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	dd04      	ble.n	800f198 <sin+0x30>
 800f18e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f192:	b005      	add	sp, #20
 800f194:	f85d fb04 	ldr.w	pc, [sp], #4
 800f198:	4668      	mov	r0, sp
 800f19a:	f000 f871 	bl	800f280 <__ieee754_rem_pio2>
 800f19e:	f000 0003 	and.w	r0, r0, #3
 800f1a2:	2801      	cmp	r0, #1
 800f1a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1a8:	ed9d 0b00 	vldr	d0, [sp]
 800f1ac:	d004      	beq.n	800f1b8 <sin+0x50>
 800f1ae:	2802      	cmp	r0, #2
 800f1b0:	d005      	beq.n	800f1be <sin+0x56>
 800f1b2:	b950      	cbnz	r0, 800f1ca <sin+0x62>
 800f1b4:	2001      	movs	r0, #1
 800f1b6:	e7e4      	b.n	800f182 <sin+0x1a>
 800f1b8:	f000 f9a2 	bl	800f500 <__kernel_cos>
 800f1bc:	e7e9      	b.n	800f192 <sin+0x2a>
 800f1be:	2001      	movs	r0, #1
 800f1c0:	f000 fca6 	bl	800fb10 <__kernel_sin>
 800f1c4:	eeb1 0b40 	vneg.f64	d0, d0
 800f1c8:	e7e3      	b.n	800f192 <sin+0x2a>
 800f1ca:	f000 f999 	bl	800f500 <__kernel_cos>
 800f1ce:	e7f9      	b.n	800f1c4 <sin+0x5c>
	...
 800f1d8:	3fe921fb 	.word	0x3fe921fb
 800f1dc:	7fefffff 	.word	0x7fefffff

0800f1e0 <sqrtf>:
 800f1e0:	b500      	push	{lr}
 800f1e2:	ed2d 8b02 	vpush	{d8}
 800f1e6:	b08b      	sub	sp, #44	; 0x2c
 800f1e8:	eeb0 8a40 	vmov.f32	s16, s0
 800f1ec:	f000 f984 	bl	800f4f8 <__ieee754_sqrtf>
 800f1f0:	4b21      	ldr	r3, [pc, #132]	; (800f278 <sqrtf+0x98>)
 800f1f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	d028      	beq.n	800f24c <sqrtf+0x6c>
 800f1fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800f1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f202:	d623      	bvs.n	800f24c <sqrtf+0x6c>
 800f204:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20c:	d51e      	bpl.n	800f24c <sqrtf+0x6c>
 800f20e:	2201      	movs	r2, #1
 800f210:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800f214:	9200      	str	r2, [sp, #0]
 800f216:	4a19      	ldr	r2, [pc, #100]	; (800f27c <sqrtf+0x9c>)
 800f218:	9201      	str	r2, [sp, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	9208      	str	r2, [sp, #32]
 800f21e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f222:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f226:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f270 <sqrtf+0x90>
 800f22a:	b9a3      	cbnz	r3, 800f256 <sqrtf+0x76>
 800f22c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f230:	4668      	mov	r0, sp
 800f232:	f000 fd49 	bl	800fcc8 <matherr>
 800f236:	b1a0      	cbz	r0, 800f262 <sqrtf+0x82>
 800f238:	9b08      	ldr	r3, [sp, #32]
 800f23a:	b11b      	cbz	r3, 800f244 <sqrtf+0x64>
 800f23c:	f000 fde4 	bl	800fe08 <__errno>
 800f240:	9b08      	ldr	r3, [sp, #32]
 800f242:	6003      	str	r3, [r0, #0]
 800f244:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f248:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f24c:	b00b      	add	sp, #44	; 0x2c
 800f24e:	ecbd 8b02 	vpop	{d8}
 800f252:	f85d fb04 	ldr.w	pc, [sp], #4
 800f256:	2b02      	cmp	r3, #2
 800f258:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800f25c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800f260:	d1e6      	bne.n	800f230 <sqrtf+0x50>
 800f262:	f000 fdd1 	bl	800fe08 <__errno>
 800f266:	2321      	movs	r3, #33	; 0x21
 800f268:	6003      	str	r3, [r0, #0]
 800f26a:	e7e5      	b.n	800f238 <sqrtf+0x58>
 800f26c:	f3af 8000 	nop.w
	...
 800f278:	200003a8 	.word	0x200003a8
 800f27c:	08014f90 	.word	0x08014f90

0800f280 <__ieee754_rem_pio2>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	eeb0 7b40 	vmov.f64	d7, d0
 800f286:	ee17 5a90 	vmov	r5, s15
 800f28a:	4b95      	ldr	r3, [pc, #596]	; (800f4e0 <__ieee754_rem_pio2+0x260>)
 800f28c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f290:	429e      	cmp	r6, r3
 800f292:	b088      	sub	sp, #32
 800f294:	4604      	mov	r4, r0
 800f296:	dc07      	bgt.n	800f2a8 <__ieee754_rem_pio2+0x28>
 800f298:	2200      	movs	r2, #0
 800f29a:	2300      	movs	r3, #0
 800f29c:	ed84 0b00 	vstr	d0, [r4]
 800f2a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	e01b      	b.n	800f2e0 <__ieee754_rem_pio2+0x60>
 800f2a8:	4b8e      	ldr	r3, [pc, #568]	; (800f4e4 <__ieee754_rem_pio2+0x264>)
 800f2aa:	429e      	cmp	r6, r3
 800f2ac:	dc3b      	bgt.n	800f326 <__ieee754_rem_pio2+0xa6>
 800f2ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f2b2:	2d00      	cmp	r5, #0
 800f2b4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800f4a0 <__ieee754_rem_pio2+0x220>
 800f2b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f2bc:	dd19      	ble.n	800f2f2 <__ieee754_rem_pio2+0x72>
 800f2be:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f2c2:	429e      	cmp	r6, r3
 800f2c4:	d00e      	beq.n	800f2e4 <__ieee754_rem_pio2+0x64>
 800f2c6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800f4a8 <__ieee754_rem_pio2+0x228>
 800f2ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f2ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f2d2:	ed84 5b00 	vstr	d5, [r4]
 800f2d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2da:	ed84 7b02 	vstr	d7, [r4, #8]
 800f2de:	2001      	movs	r0, #1
 800f2e0:	b008      	add	sp, #32
 800f2e2:	bd70      	pop	{r4, r5, r6, pc}
 800f2e4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f4b0 <__ieee754_rem_pio2+0x230>
 800f2e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2ec:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f4b8 <__ieee754_rem_pio2+0x238>
 800f2f0:	e7eb      	b.n	800f2ca <__ieee754_rem_pio2+0x4a>
 800f2f2:	429e      	cmp	r6, r3
 800f2f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f2f8:	d00e      	beq.n	800f318 <__ieee754_rem_pio2+0x98>
 800f2fa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800f4a8 <__ieee754_rem_pio2+0x228>
 800f2fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f302:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f306:	ed84 5b00 	vstr	d5, [r4]
 800f30a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f30e:	f04f 30ff 	mov.w	r0, #4294967295
 800f312:	ed84 7b02 	vstr	d7, [r4, #8]
 800f316:	e7e3      	b.n	800f2e0 <__ieee754_rem_pio2+0x60>
 800f318:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f4b0 <__ieee754_rem_pio2+0x230>
 800f31c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f320:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f4b8 <__ieee754_rem_pio2+0x238>
 800f324:	e7eb      	b.n	800f2fe <__ieee754_rem_pio2+0x7e>
 800f326:	4b70      	ldr	r3, [pc, #448]	; (800f4e8 <__ieee754_rem_pio2+0x268>)
 800f328:	429e      	cmp	r6, r3
 800f32a:	dc6c      	bgt.n	800f406 <__ieee754_rem_pio2+0x186>
 800f32c:	f000 fc48 	bl	800fbc0 <fabs>
 800f330:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f334:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800f4c0 <__ieee754_rem_pio2+0x240>
 800f338:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f33c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f340:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f344:	ee17 0a90 	vmov	r0, s15
 800f348:	eeb1 5b44 	vneg.f64	d5, d4
 800f34c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f4a0 <__ieee754_rem_pio2+0x220>
 800f350:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f354:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f4a8 <__ieee754_rem_pio2+0x228>
 800f358:	281f      	cmp	r0, #31
 800f35a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f35e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f362:	dc08      	bgt.n	800f376 <__ieee754_rem_pio2+0xf6>
 800f364:	1e42      	subs	r2, r0, #1
 800f366:	4b61      	ldr	r3, [pc, #388]	; (800f4ec <__ieee754_rem_pio2+0x26c>)
 800f368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f36c:	42b3      	cmp	r3, r6
 800f36e:	d002      	beq.n	800f376 <__ieee754_rem_pio2+0xf6>
 800f370:	ed84 6b00 	vstr	d6, [r4]
 800f374:	e022      	b.n	800f3bc <__ieee754_rem_pio2+0x13c>
 800f376:	ee16 3a90 	vmov	r3, s13
 800f37a:	1536      	asrs	r6, r6, #20
 800f37c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f380:	1af3      	subs	r3, r6, r3
 800f382:	2b10      	cmp	r3, #16
 800f384:	ddf4      	ble.n	800f370 <__ieee754_rem_pio2+0xf0>
 800f386:	eeb0 6b40 	vmov.f64	d6, d0
 800f38a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800f4b0 <__ieee754_rem_pio2+0x230>
 800f38e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800f392:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f396:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f39a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800f4b8 <__ieee754_rem_pio2+0x238>
 800f39e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800f3a2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f3a6:	ee13 3a90 	vmov	r3, s7
 800f3aa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f3ae:	1af6      	subs	r6, r6, r3
 800f3b0:	2e31      	cmp	r6, #49	; 0x31
 800f3b2:	dc17      	bgt.n	800f3e4 <__ieee754_rem_pio2+0x164>
 800f3b4:	eeb0 0b46 	vmov.f64	d0, d6
 800f3b8:	ed84 3b00 	vstr	d3, [r4]
 800f3bc:	ed94 6b00 	vldr	d6, [r4]
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f3c6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f3ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800f3ce:	da87      	bge.n	800f2e0 <__ieee754_rem_pio2+0x60>
 800f3d0:	eeb1 6b46 	vneg.f64	d6, d6
 800f3d4:	ed84 6b00 	vstr	d6, [r4]
 800f3d8:	eeb1 7b47 	vneg.f64	d7, d7
 800f3dc:	4240      	negs	r0, r0
 800f3de:	ed84 7b02 	vstr	d7, [r4, #8]
 800f3e2:	e77d      	b.n	800f2e0 <__ieee754_rem_pio2+0x60>
 800f3e4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800f4c8 <__ieee754_rem_pio2+0x248>
 800f3e8:	eeb0 0b46 	vmov.f64	d0, d6
 800f3ec:	eea5 0b03 	vfma.f64	d0, d5, d3
 800f3f0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800f3f4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800f4d0 <__ieee754_rem_pio2+0x250>
 800f3f8:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f3fc:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800f400:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f404:	e7b4      	b.n	800f370 <__ieee754_rem_pio2+0xf0>
 800f406:	4b3a      	ldr	r3, [pc, #232]	; (800f4f0 <__ieee754_rem_pio2+0x270>)
 800f408:	429e      	cmp	r6, r3
 800f40a:	dd06      	ble.n	800f41a <__ieee754_rem_pio2+0x19a>
 800f40c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f410:	ed80 7b02 	vstr	d7, [r0, #8]
 800f414:	ed80 7b00 	vstr	d7, [r0]
 800f418:	e744      	b.n	800f2a4 <__ieee754_rem_pio2+0x24>
 800f41a:	1532      	asrs	r2, r6, #20
 800f41c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f420:	ee10 0a10 	vmov	r0, s0
 800f424:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f428:	ec41 0b17 	vmov	d7, r0, r1
 800f42c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f430:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800f4d8 <__ieee754_rem_pio2+0x258>
 800f434:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f438:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f43c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f440:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f444:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f448:	a908      	add	r1, sp, #32
 800f44a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f44e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f452:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f456:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f45a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f45e:	2303      	movs	r3, #3
 800f460:	ed31 7b02 	vldmdb	r1!, {d7}
 800f464:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46c:	f103 30ff 	add.w	r0, r3, #4294967295
 800f470:	d013      	beq.n	800f49a <__ieee754_rem_pio2+0x21a>
 800f472:	4920      	ldr	r1, [pc, #128]	; (800f4f4 <__ieee754_rem_pio2+0x274>)
 800f474:	9101      	str	r1, [sp, #4]
 800f476:	2102      	movs	r1, #2
 800f478:	9100      	str	r1, [sp, #0]
 800f47a:	a802      	add	r0, sp, #8
 800f47c:	4621      	mov	r1, r4
 800f47e:	f000 f8ab 	bl	800f5d8 <__kernel_rem_pio2>
 800f482:	2d00      	cmp	r5, #0
 800f484:	f6bf af2c 	bge.w	800f2e0 <__ieee754_rem_pio2+0x60>
 800f488:	ed94 7b00 	vldr	d7, [r4]
 800f48c:	eeb1 7b47 	vneg.f64	d7, d7
 800f490:	ed84 7b00 	vstr	d7, [r4]
 800f494:	ed94 7b02 	vldr	d7, [r4, #8]
 800f498:	e79e      	b.n	800f3d8 <__ieee754_rem_pio2+0x158>
 800f49a:	4603      	mov	r3, r0
 800f49c:	e7e0      	b.n	800f460 <__ieee754_rem_pio2+0x1e0>
 800f49e:	bf00      	nop
 800f4a0:	54400000 	.word	0x54400000
 800f4a4:	3ff921fb 	.word	0x3ff921fb
 800f4a8:	1a626331 	.word	0x1a626331
 800f4ac:	3dd0b461 	.word	0x3dd0b461
 800f4b0:	1a600000 	.word	0x1a600000
 800f4b4:	3dd0b461 	.word	0x3dd0b461
 800f4b8:	2e037073 	.word	0x2e037073
 800f4bc:	3ba3198a 	.word	0x3ba3198a
 800f4c0:	6dc9c883 	.word	0x6dc9c883
 800f4c4:	3fe45f30 	.word	0x3fe45f30
 800f4c8:	2e000000 	.word	0x2e000000
 800f4cc:	3ba3198a 	.word	0x3ba3198a
 800f4d0:	252049c1 	.word	0x252049c1
 800f4d4:	397b839a 	.word	0x397b839a
 800f4d8:	00000000 	.word	0x00000000
 800f4dc:	41700000 	.word	0x41700000
 800f4e0:	3fe921fb 	.word	0x3fe921fb
 800f4e4:	4002d97b 	.word	0x4002d97b
 800f4e8:	413921fb 	.word	0x413921fb
 800f4ec:	08014f98 	.word	0x08014f98
 800f4f0:	7fefffff 	.word	0x7fefffff
 800f4f4:	08015018 	.word	0x08015018

0800f4f8 <__ieee754_sqrtf>:
 800f4f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f4fc:	4770      	bx	lr
	...

0800f500 <__kernel_cos>:
 800f500:	ee10 1a90 	vmov	r1, s1
 800f504:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f50c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800f510:	da05      	bge.n	800f51e <__kernel_cos+0x1e>
 800f512:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800f516:	ee16 3a90 	vmov	r3, s13
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d03d      	beq.n	800f59a <__kernel_cos+0x9a>
 800f51e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800f522:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f526:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800f5a0 <__kernel_cos+0xa0>
 800f52a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800f52e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800f532:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f5a8 <__kernel_cos+0xa8>
 800f536:	eea4 5b03 	vfma.f64	d5, d4, d3
 800f53a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f5b0 <__kernel_cos+0xb0>
 800f53e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f542:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f5b8 <__kernel_cos+0xb8>
 800f546:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f54a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f5c0 <__kernel_cos+0xc0>
 800f54e:	4b20      	ldr	r3, [pc, #128]	; (800f5d0 <__kernel_cos+0xd0>)
 800f550:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f554:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800f5c8 <__kernel_cos+0xc8>
 800f558:	4299      	cmp	r1, r3
 800f55a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f55e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800f562:	eea4 1b05 	vfma.f64	d1, d4, d5
 800f566:	dc04      	bgt.n	800f572 <__kernel_cos+0x72>
 800f568:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f56c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800f570:	4770      	bx	lr
 800f572:	4b18      	ldr	r3, [pc, #96]	; (800f5d4 <__kernel_cos+0xd4>)
 800f574:	4299      	cmp	r1, r3
 800f576:	dc0d      	bgt.n	800f594 <__kernel_cos+0x94>
 800f578:	2200      	movs	r2, #0
 800f57a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800f57e:	ec43 2b15 	vmov	d5, r2, r3
 800f582:	ee37 0b45 	vsub.f64	d0, d7, d5
 800f586:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f58a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f58e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f592:	4770      	bx	lr
 800f594:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800f598:	e7f3      	b.n	800f582 <__kernel_cos+0x82>
 800f59a:	eeb0 0b47 	vmov.f64	d0, d7
 800f59e:	4770      	bx	lr
 800f5a0:	be8838d4 	.word	0xbe8838d4
 800f5a4:	bda8fae9 	.word	0xbda8fae9
 800f5a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f5ac:	3e21ee9e 	.word	0x3e21ee9e
 800f5b0:	809c52ad 	.word	0x809c52ad
 800f5b4:	be927e4f 	.word	0xbe927e4f
 800f5b8:	19cb1590 	.word	0x19cb1590
 800f5bc:	3efa01a0 	.word	0x3efa01a0
 800f5c0:	16c15177 	.word	0x16c15177
 800f5c4:	bf56c16c 	.word	0xbf56c16c
 800f5c8:	5555554c 	.word	0x5555554c
 800f5cc:	3fa55555 	.word	0x3fa55555
 800f5d0:	3fd33332 	.word	0x3fd33332
 800f5d4:	3fe90000 	.word	0x3fe90000

0800f5d8 <__kernel_rem_pio2>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	ed2d 8b06 	vpush	{d8-d10}
 800f5e0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f5e4:	469b      	mov	fp, r3
 800f5e6:	460e      	mov	r6, r1
 800f5e8:	4bc7      	ldr	r3, [pc, #796]	; (800f908 <__kernel_rem_pio2+0x330>)
 800f5ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f5ec:	9002      	str	r0, [sp, #8]
 800f5ee:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f5f2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800f5f4:	1ed1      	subs	r1, r2, #3
 800f5f6:	2318      	movs	r3, #24
 800f5f8:	f06f 0417 	mvn.w	r4, #23
 800f5fc:	fb91 f1f3 	sdiv	r1, r1, r3
 800f600:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f604:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f608:	fb01 4404 	mla	r4, r1, r4, r4
 800f60c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800f8f0 <__kernel_rem_pio2+0x318>
 800f610:	4414      	add	r4, r2
 800f612:	eba1 050a 	sub.w	r5, r1, sl
 800f616:	aa1a      	add	r2, sp, #104	; 0x68
 800f618:	eb09 070a 	add.w	r7, r9, sl
 800f61c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f620:	4696      	mov	lr, r2
 800f622:	2300      	movs	r3, #0
 800f624:	42bb      	cmp	r3, r7
 800f626:	dd0f      	ble.n	800f648 <__kernel_rem_pio2+0x70>
 800f628:	af6a      	add	r7, sp, #424	; 0x1a8
 800f62a:	2200      	movs	r2, #0
 800f62c:	454a      	cmp	r2, r9
 800f62e:	dc28      	bgt.n	800f682 <__kernel_rem_pio2+0xaa>
 800f630:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f634:	eb0b 0302 	add.w	r3, fp, r2
 800f638:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f63c:	9d02      	ldr	r5, [sp, #8]
 800f63e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800f8f0 <__kernel_rem_pio2+0x318>
 800f642:	f04f 0c00 	mov.w	ip, #0
 800f646:	e016      	b.n	800f676 <__kernel_rem_pio2+0x9e>
 800f648:	42dd      	cmn	r5, r3
 800f64a:	d409      	bmi.n	800f660 <__kernel_rem_pio2+0x88>
 800f64c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f650:	ee07 2a90 	vmov	s15, r2
 800f654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f658:	ecae 7b02 	vstmia	lr!, {d7}
 800f65c:	3301      	adds	r3, #1
 800f65e:	e7e1      	b.n	800f624 <__kernel_rem_pio2+0x4c>
 800f660:	eeb0 7b46 	vmov.f64	d7, d6
 800f664:	e7f8      	b.n	800f658 <__kernel_rem_pio2+0x80>
 800f666:	ecb5 5b02 	vldmia	r5!, {d5}
 800f66a:	ed33 6b02 	vldmdb	r3!, {d6}
 800f66e:	f10c 0c01 	add.w	ip, ip, #1
 800f672:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f676:	45d4      	cmp	ip, sl
 800f678:	ddf5      	ble.n	800f666 <__kernel_rem_pio2+0x8e>
 800f67a:	eca7 7b02 	vstmia	r7!, {d7}
 800f67e:	3201      	adds	r2, #1
 800f680:	e7d4      	b.n	800f62c <__kernel_rem_pio2+0x54>
 800f682:	ab06      	add	r3, sp, #24
 800f684:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f688:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800f8f8 <__kernel_rem_pio2+0x320>
 800f68c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800f900 <__kernel_rem_pio2+0x328>
 800f690:	9304      	str	r3, [sp, #16]
 800f692:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f696:	9303      	str	r3, [sp, #12]
 800f698:	464d      	mov	r5, r9
 800f69a:	ab92      	add	r3, sp, #584	; 0x248
 800f69c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800f6a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f6a4:	3f01      	subs	r7, #1
 800f6a6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800f6aa:	00ff      	lsls	r7, r7, #3
 800f6ac:	ab92      	add	r3, sp, #584	; 0x248
 800f6ae:	19da      	adds	r2, r3, r7
 800f6b0:	3a98      	subs	r2, #152	; 0x98
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	1ae9      	subs	r1, r5, r3
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	dc4e      	bgt.n	800f758 <__kernel_rem_pio2+0x180>
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 fb08 	bl	800fcd0 <scalbn>
 800f6c0:	eeb0 8b40 	vmov.f64	d8, d0
 800f6c4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f6c8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f6cc:	f000 fa84 	bl	800fbd8 <floor>
 800f6d0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f6d4:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f6d8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	edcd 7a01 	vstr	s15, [sp, #4]
 800f6e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f6ea:	dd4a      	ble.n	800f782 <__kernel_rem_pio2+0x1aa>
 800f6ec:	1e69      	subs	r1, r5, #1
 800f6ee:	ab06      	add	r3, sp, #24
 800f6f0:	f1c4 0018 	rsb	r0, r4, #24
 800f6f4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f6f8:	9a01      	ldr	r2, [sp, #4]
 800f6fa:	fa4c f300 	asr.w	r3, ip, r0
 800f6fe:	441a      	add	r2, r3
 800f700:	4083      	lsls	r3, r0
 800f702:	9201      	str	r2, [sp, #4]
 800f704:	ebac 0203 	sub.w	r2, ip, r3
 800f708:	ab06      	add	r3, sp, #24
 800f70a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f70e:	f1c4 0317 	rsb	r3, r4, #23
 800f712:	fa42 f803 	asr.w	r8, r2, r3
 800f716:	f1b8 0f00 	cmp.w	r8, #0
 800f71a:	dd43      	ble.n	800f7a4 <__kernel_rem_pio2+0x1cc>
 800f71c:	9b01      	ldr	r3, [sp, #4]
 800f71e:	2000      	movs	r0, #0
 800f720:	3301      	adds	r3, #1
 800f722:	9301      	str	r3, [sp, #4]
 800f724:	4601      	mov	r1, r0
 800f726:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800f72a:	4285      	cmp	r5, r0
 800f72c:	dc6e      	bgt.n	800f80c <__kernel_rem_pio2+0x234>
 800f72e:	2c00      	cmp	r4, #0
 800f730:	dd04      	ble.n	800f73c <__kernel_rem_pio2+0x164>
 800f732:	2c01      	cmp	r4, #1
 800f734:	d07f      	beq.n	800f836 <__kernel_rem_pio2+0x25e>
 800f736:	2c02      	cmp	r4, #2
 800f738:	f000 8087 	beq.w	800f84a <__kernel_rem_pio2+0x272>
 800f73c:	f1b8 0f02 	cmp.w	r8, #2
 800f740:	d130      	bne.n	800f7a4 <__kernel_rem_pio2+0x1cc>
 800f742:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f746:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f74a:	b359      	cbz	r1, 800f7a4 <__kernel_rem_pio2+0x1cc>
 800f74c:	4620      	mov	r0, r4
 800f74e:	f000 fabf 	bl	800fcd0 <scalbn>
 800f752:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f756:	e025      	b.n	800f7a4 <__kernel_rem_pio2+0x1cc>
 800f758:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f75c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f760:	a806      	add	r0, sp, #24
 800f762:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f766:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f76a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f76e:	ee10 1a10 	vmov	r1, s0
 800f772:	ed32 0b02 	vldmdb	r2!, {d0}
 800f776:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f77a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f77e:	3301      	adds	r3, #1
 800f780:	e798      	b.n	800f6b4 <__kernel_rem_pio2+0xdc>
 800f782:	d106      	bne.n	800f792 <__kernel_rem_pio2+0x1ba>
 800f784:	1e6b      	subs	r3, r5, #1
 800f786:	aa06      	add	r2, sp, #24
 800f788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f78c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800f790:	e7c1      	b.n	800f716 <__kernel_rem_pio2+0x13e>
 800f792:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f796:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79e:	da32      	bge.n	800f806 <__kernel_rem_pio2+0x22e>
 800f7a0:	f04f 0800 	mov.w	r8, #0
 800f7a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ac:	f040 80b0 	bne.w	800f910 <__kernel_rem_pio2+0x338>
 800f7b0:	1e6b      	subs	r3, r5, #1
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	4548      	cmp	r0, r9
 800f7b8:	da4e      	bge.n	800f858 <__kernel_rem_pio2+0x280>
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	f000 8088 	beq.w	800f8d0 <__kernel_rem_pio2+0x2f8>
 800f7c0:	aa06      	add	r2, sp, #24
 800f7c2:	3c18      	subs	r4, #24
 800f7c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f7c8:	2900      	cmp	r1, #0
 800f7ca:	f000 808e 	beq.w	800f8ea <__kernel_rem_pio2+0x312>
 800f7ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	9302      	str	r3, [sp, #8]
 800f7d6:	f000 fa7b 	bl	800fcd0 <scalbn>
 800f7da:	9b02      	ldr	r3, [sp, #8]
 800f7dc:	aa6a      	add	r2, sp, #424	; 0x1a8
 800f7de:	00d9      	lsls	r1, r3, #3
 800f7e0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800f8f8 <__kernel_rem_pio2+0x320>
 800f7e4:	1850      	adds	r0, r2, r1
 800f7e6:	f100 0508 	add.w	r5, r0, #8
 800f7ea:	461c      	mov	r4, r3
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	f280 80bd 	bge.w	800f96c <__kernel_rem_pio2+0x394>
 800f7f2:	2500      	movs	r5, #0
 800f7f4:	1b5c      	subs	r4, r3, r5
 800f7f6:	2c00      	cmp	r4, #0
 800f7f8:	f2c0 80dd 	blt.w	800f9b6 <__kernel_rem_pio2+0x3de>
 800f7fc:	4f43      	ldr	r7, [pc, #268]	; (800f90c <__kernel_rem_pio2+0x334>)
 800f7fe:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800f8f0 <__kernel_rem_pio2+0x318>
 800f802:	2400      	movs	r4, #0
 800f804:	e0cb      	b.n	800f99e <__kernel_rem_pio2+0x3c6>
 800f806:	f04f 0802 	mov.w	r8, #2
 800f80a:	e787      	b.n	800f71c <__kernel_rem_pio2+0x144>
 800f80c:	ab06      	add	r3, sp, #24
 800f80e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f812:	b949      	cbnz	r1, 800f828 <__kernel_rem_pio2+0x250>
 800f814:	b12b      	cbz	r3, 800f822 <__kernel_rem_pio2+0x24a>
 800f816:	aa06      	add	r2, sp, #24
 800f818:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f81c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f820:	2301      	movs	r3, #1
 800f822:	3001      	adds	r0, #1
 800f824:	4619      	mov	r1, r3
 800f826:	e780      	b.n	800f72a <__kernel_rem_pio2+0x152>
 800f828:	aa06      	add	r2, sp, #24
 800f82a:	ebac 0303 	sub.w	r3, ip, r3
 800f82e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f832:	460b      	mov	r3, r1
 800f834:	e7f5      	b.n	800f822 <__kernel_rem_pio2+0x24a>
 800f836:	1e68      	subs	r0, r5, #1
 800f838:	ab06      	add	r3, sp, #24
 800f83a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f83e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f842:	aa06      	add	r2, sp, #24
 800f844:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f848:	e778      	b.n	800f73c <__kernel_rem_pio2+0x164>
 800f84a:	1e68      	subs	r0, r5, #1
 800f84c:	ab06      	add	r3, sp, #24
 800f84e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f852:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f856:	e7f4      	b.n	800f842 <__kernel_rem_pio2+0x26a>
 800f858:	a906      	add	r1, sp, #24
 800f85a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f85e:	3801      	subs	r0, #1
 800f860:	430a      	orrs	r2, r1
 800f862:	e7a8      	b.n	800f7b6 <__kernel_rem_pio2+0x1de>
 800f864:	f10c 0c01 	add.w	ip, ip, #1
 800f868:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f86c:	2a00      	cmp	r2, #0
 800f86e:	d0f9      	beq.n	800f864 <__kernel_rem_pio2+0x28c>
 800f870:	eb0b 0305 	add.w	r3, fp, r5
 800f874:	aa1a      	add	r2, sp, #104	; 0x68
 800f876:	00db      	lsls	r3, r3, #3
 800f878:	1898      	adds	r0, r3, r2
 800f87a:	3008      	adds	r0, #8
 800f87c:	1c69      	adds	r1, r5, #1
 800f87e:	3708      	adds	r7, #8
 800f880:	2200      	movs	r2, #0
 800f882:	4465      	add	r5, ip
 800f884:	9005      	str	r0, [sp, #20]
 800f886:	428d      	cmp	r5, r1
 800f888:	f6ff af07 	blt.w	800f69a <__kernel_rem_pio2+0xc2>
 800f88c:	a81a      	add	r0, sp, #104	; 0x68
 800f88e:	eb02 0c03 	add.w	ip, r2, r3
 800f892:	4484      	add	ip, r0
 800f894:	9803      	ldr	r0, [sp, #12]
 800f896:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f89a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f89e:	9001      	str	r0, [sp, #4]
 800f8a0:	ee07 0a90 	vmov	s15, r0
 800f8a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f8a8:	9805      	ldr	r0, [sp, #20]
 800f8aa:	ed8c 7b00 	vstr	d7, [ip]
 800f8ae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f8f0 <__kernel_rem_pio2+0x318>
 800f8b2:	eb00 0802 	add.w	r8, r0, r2
 800f8b6:	f04f 0c00 	mov.w	ip, #0
 800f8ba:	45d4      	cmp	ip, sl
 800f8bc:	dd0c      	ble.n	800f8d8 <__kernel_rem_pio2+0x300>
 800f8be:	eb02 0c07 	add.w	ip, r2, r7
 800f8c2:	a86a      	add	r0, sp, #424	; 0x1a8
 800f8c4:	4484      	add	ip, r0
 800f8c6:	ed8c 7b02 	vstr	d7, [ip, #8]
 800f8ca:	3101      	adds	r1, #1
 800f8cc:	3208      	adds	r2, #8
 800f8ce:	e7da      	b.n	800f886 <__kernel_rem_pio2+0x2ae>
 800f8d0:	9b04      	ldr	r3, [sp, #16]
 800f8d2:	f04f 0c01 	mov.w	ip, #1
 800f8d6:	e7c7      	b.n	800f868 <__kernel_rem_pio2+0x290>
 800f8d8:	ecbe 5b02 	vldmia	lr!, {d5}
 800f8dc:	ed38 6b02 	vldmdb	r8!, {d6}
 800f8e0:	f10c 0c01 	add.w	ip, ip, #1
 800f8e4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f8e8:	e7e7      	b.n	800f8ba <__kernel_rem_pio2+0x2e2>
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	e768      	b.n	800f7c0 <__kernel_rem_pio2+0x1e8>
 800f8ee:	bf00      	nop
	...
 800f8fc:	3e700000 	.word	0x3e700000
 800f900:	00000000 	.word	0x00000000
 800f904:	41700000 	.word	0x41700000
 800f908:	08015160 	.word	0x08015160
 800f90c:	08015120 	.word	0x08015120
 800f910:	4260      	negs	r0, r4
 800f912:	eeb0 0b48 	vmov.f64	d0, d8
 800f916:	f000 f9db 	bl	800fcd0 <scalbn>
 800f91a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800faf8 <__kernel_rem_pio2+0x520>
 800f91e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f926:	db18      	blt.n	800f95a <__kernel_rem_pio2+0x382>
 800f928:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800fb00 <__kernel_rem_pio2+0x528>
 800f92c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f930:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f934:	aa06      	add	r2, sp, #24
 800f936:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f93a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f93e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f942:	a906      	add	r1, sp, #24
 800f944:	ee10 3a10 	vmov	r3, s0
 800f948:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f94c:	1c6b      	adds	r3, r5, #1
 800f94e:	ee17 2a10 	vmov	r2, s14
 800f952:	3418      	adds	r4, #24
 800f954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f958:	e739      	b.n	800f7ce <__kernel_rem_pio2+0x1f6>
 800f95a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f95e:	aa06      	add	r2, sp, #24
 800f960:	ee10 3a10 	vmov	r3, s0
 800f964:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f968:	462b      	mov	r3, r5
 800f96a:	e730      	b.n	800f7ce <__kernel_rem_pio2+0x1f6>
 800f96c:	aa06      	add	r2, sp, #24
 800f96e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f972:	9202      	str	r2, [sp, #8]
 800f974:	ee07 2a90 	vmov	s15, r2
 800f978:	3c01      	subs	r4, #1
 800f97a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f97e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f982:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f986:	ed25 7b02 	vstmdb	r5!, {d7}
 800f98a:	e72f      	b.n	800f7ec <__kernel_rem_pio2+0x214>
 800f98c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800f990:	ecb7 5b02 	vldmia	r7!, {d5}
 800f994:	ed9c 6b00 	vldr	d6, [ip]
 800f998:	3401      	adds	r4, #1
 800f99a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f99e:	454c      	cmp	r4, r9
 800f9a0:	dc01      	bgt.n	800f9a6 <__kernel_rem_pio2+0x3ce>
 800f9a2:	42a5      	cmp	r5, r4
 800f9a4:	daf2      	bge.n	800f98c <__kernel_rem_pio2+0x3b4>
 800f9a6:	aa42      	add	r2, sp, #264	; 0x108
 800f9a8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800f9ac:	ed84 7b00 	vstr	d7, [r4]
 800f9b0:	3501      	adds	r5, #1
 800f9b2:	3808      	subs	r0, #8
 800f9b4:	e71e      	b.n	800f7f4 <__kernel_rem_pio2+0x21c>
 800f9b6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f9b8:	2a03      	cmp	r2, #3
 800f9ba:	d84e      	bhi.n	800fa5a <__kernel_rem_pio2+0x482>
 800f9bc:	e8df f002 	tbb	[pc, r2]
 800f9c0:	021f1f3e 	.word	0x021f1f3e
 800f9c4:	3108      	adds	r1, #8
 800f9c6:	aa42      	add	r2, sp, #264	; 0x108
 800f9c8:	4411      	add	r1, r2
 800f9ca:	4608      	mov	r0, r1
 800f9cc:	461c      	mov	r4, r3
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	dc61      	bgt.n	800fa96 <__kernel_rem_pio2+0x4be>
 800f9d2:	4608      	mov	r0, r1
 800f9d4:	461c      	mov	r4, r3
 800f9d6:	2c01      	cmp	r4, #1
 800f9d8:	dc6d      	bgt.n	800fab6 <__kernel_rem_pio2+0x4de>
 800f9da:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fb08 <__kernel_rem_pio2+0x530>
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	dc79      	bgt.n	800fad6 <__kernel_rem_pio2+0x4fe>
 800f9e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f9e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f9ea:	f1b8 0f00 	cmp.w	r8, #0
 800f9ee:	d178      	bne.n	800fae2 <__kernel_rem_pio2+0x50a>
 800f9f0:	ed86 5b00 	vstr	d5, [r6]
 800f9f4:	ed86 6b02 	vstr	d6, [r6, #8]
 800f9f8:	ed86 7b04 	vstr	d7, [r6, #16]
 800f9fc:	e02d      	b.n	800fa5a <__kernel_rem_pio2+0x482>
 800f9fe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800fb08 <__kernel_rem_pio2+0x530>
 800fa02:	3108      	adds	r1, #8
 800fa04:	aa42      	add	r2, sp, #264	; 0x108
 800fa06:	4411      	add	r1, r2
 800fa08:	4618      	mov	r0, r3
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	da34      	bge.n	800fa78 <__kernel_rem_pio2+0x4a0>
 800fa0e:	f1b8 0f00 	cmp.w	r8, #0
 800fa12:	d037      	beq.n	800fa84 <__kernel_rem_pio2+0x4ac>
 800fa14:	eeb1 7b46 	vneg.f64	d7, d6
 800fa18:	ed86 7b00 	vstr	d7, [r6]
 800fa1c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800fa20:	a844      	add	r0, sp, #272	; 0x110
 800fa22:	2101      	movs	r1, #1
 800fa24:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa28:	428b      	cmp	r3, r1
 800fa2a:	da2e      	bge.n	800fa8a <__kernel_rem_pio2+0x4b2>
 800fa2c:	f1b8 0f00 	cmp.w	r8, #0
 800fa30:	d001      	beq.n	800fa36 <__kernel_rem_pio2+0x45e>
 800fa32:	eeb1 7b47 	vneg.f64	d7, d7
 800fa36:	ed86 7b02 	vstr	d7, [r6, #8]
 800fa3a:	e00e      	b.n	800fa5a <__kernel_rem_pio2+0x482>
 800fa3c:	aa92      	add	r2, sp, #584	; 0x248
 800fa3e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800fb08 <__kernel_rem_pio2+0x530>
 800fa42:	4411      	add	r1, r2
 800fa44:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	da0f      	bge.n	800fa6c <__kernel_rem_pio2+0x494>
 800fa4c:	f1b8 0f00 	cmp.w	r8, #0
 800fa50:	d001      	beq.n	800fa56 <__kernel_rem_pio2+0x47e>
 800fa52:	eeb1 7b47 	vneg.f64	d7, d7
 800fa56:	ed86 7b00 	vstr	d7, [r6]
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	f003 0007 	and.w	r0, r3, #7
 800fa60:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800fa64:	ecbd 8b06 	vpop	{d8-d10}
 800fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6c:	ed31 6b02 	vldmdb	r1!, {d6}
 800fa70:	3b01      	subs	r3, #1
 800fa72:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa76:	e7e7      	b.n	800fa48 <__kernel_rem_pio2+0x470>
 800fa78:	ed31 7b02 	vldmdb	r1!, {d7}
 800fa7c:	3801      	subs	r0, #1
 800fa7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fa82:	e7c2      	b.n	800fa0a <__kernel_rem_pio2+0x432>
 800fa84:	eeb0 7b46 	vmov.f64	d7, d6
 800fa88:	e7c6      	b.n	800fa18 <__kernel_rem_pio2+0x440>
 800fa8a:	ecb0 6b02 	vldmia	r0!, {d6}
 800fa8e:	3101      	adds	r1, #1
 800fa90:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa94:	e7c8      	b.n	800fa28 <__kernel_rem_pio2+0x450>
 800fa96:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fa9a:	ed30 5b02 	vldmdb	r0!, {d5}
 800fa9e:	3c01      	subs	r4, #1
 800faa0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800faa4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800faa8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800faac:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fab0:	ed80 7b00 	vstr	d7, [r0]
 800fab4:	e78b      	b.n	800f9ce <__kernel_rem_pio2+0x3f6>
 800fab6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800faba:	ed30 5b02 	vldmdb	r0!, {d5}
 800fabe:	3c01      	subs	r4, #1
 800fac0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fac4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fac8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800facc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fad0:	ed80 7b00 	vstr	d7, [r0]
 800fad4:	e77f      	b.n	800f9d6 <__kernel_rem_pio2+0x3fe>
 800fad6:	ed31 6b02 	vldmdb	r1!, {d6}
 800fada:	3b01      	subs	r3, #1
 800fadc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fae0:	e77d      	b.n	800f9de <__kernel_rem_pio2+0x406>
 800fae2:	eeb1 5b45 	vneg.f64	d5, d5
 800fae6:	eeb1 6b46 	vneg.f64	d6, d6
 800faea:	ed86 5b00 	vstr	d5, [r6]
 800faee:	eeb1 7b47 	vneg.f64	d7, d7
 800faf2:	ed86 6b02 	vstr	d6, [r6, #8]
 800faf6:	e77f      	b.n	800f9f8 <__kernel_rem_pio2+0x420>
 800faf8:	00000000 	.word	0x00000000
 800fafc:	41700000 	.word	0x41700000
 800fb00:	00000000 	.word	0x00000000
 800fb04:	3e700000 	.word	0x3e700000
	...

0800fb10 <__kernel_sin>:
 800fb10:	ee10 3a90 	vmov	r3, s1
 800fb14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb18:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fb1c:	da04      	bge.n	800fb28 <__kernel_sin+0x18>
 800fb1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fb22:	ee17 3a90 	vmov	r3, s15
 800fb26:	b35b      	cbz	r3, 800fb80 <__kernel_sin+0x70>
 800fb28:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fb2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fb30:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800fb88 <__kernel_sin+0x78>
 800fb34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fb90 <__kernel_sin+0x80>
 800fb38:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fb3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fb98 <__kernel_sin+0x88>
 800fb40:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fb44:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fba0 <__kernel_sin+0x90>
 800fb48:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fb4c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fba8 <__kernel_sin+0x98>
 800fb50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fb54:	b930      	cbnz	r0, 800fb64 <__kernel_sin+0x54>
 800fb56:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fbb0 <__kernel_sin+0xa0>
 800fb5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fb5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fb62:	4770      	bx	lr
 800fb64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fb68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fb6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800fb70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800fb74:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fbb8 <__kernel_sin+0xa8>
 800fb78:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fb7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	f3af 8000 	nop.w
 800fb88:	5acfd57c 	.word	0x5acfd57c
 800fb8c:	3de5d93a 	.word	0x3de5d93a
 800fb90:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb94:	be5ae5e6 	.word	0xbe5ae5e6
 800fb98:	57b1fe7d 	.word	0x57b1fe7d
 800fb9c:	3ec71de3 	.word	0x3ec71de3
 800fba0:	19c161d5 	.word	0x19c161d5
 800fba4:	bf2a01a0 	.word	0xbf2a01a0
 800fba8:	1110f8a6 	.word	0x1110f8a6
 800fbac:	3f811111 	.word	0x3f811111
 800fbb0:	55555549 	.word	0x55555549
 800fbb4:	bfc55555 	.word	0xbfc55555
 800fbb8:	55555549 	.word	0x55555549
 800fbbc:	3fc55555 	.word	0x3fc55555

0800fbc0 <fabs>:
 800fbc0:	ec51 0b10 	vmov	r0, r1, d0
 800fbc4:	ee10 2a10 	vmov	r2, s0
 800fbc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fbcc:	ec43 2b10 	vmov	d0, r2, r3
 800fbd0:	4770      	bx	lr
 800fbd2:	0000      	movs	r0, r0
 800fbd4:	0000      	movs	r0, r0
	...

0800fbd8 <floor>:
 800fbd8:	ee10 1a90 	vmov	r1, s1
 800fbdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fbe0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fbe4:	2b13      	cmp	r3, #19
 800fbe6:	b530      	push	{r4, r5, lr}
 800fbe8:	ee10 0a10 	vmov	r0, s0
 800fbec:	ee10 5a10 	vmov	r5, s0
 800fbf0:	dc33      	bgt.n	800fc5a <floor+0x82>
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	da17      	bge.n	800fc26 <floor+0x4e>
 800fbf6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800fcb8 <floor+0xe0>
 800fbfa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fbfe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc06:	dd09      	ble.n	800fc1c <floor+0x44>
 800fc08:	2900      	cmp	r1, #0
 800fc0a:	da50      	bge.n	800fcae <floor+0xd6>
 800fc0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc10:	4a2b      	ldr	r2, [pc, #172]	; (800fcc0 <floor+0xe8>)
 800fc12:	4303      	orrs	r3, r0
 800fc14:	2000      	movs	r0, #0
 800fc16:	4283      	cmp	r3, r0
 800fc18:	bf18      	it	ne
 800fc1a:	4611      	movne	r1, r2
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4602      	mov	r2, r0
 800fc20:	ec43 2b10 	vmov	d0, r2, r3
 800fc24:	e020      	b.n	800fc68 <floor+0x90>
 800fc26:	4a27      	ldr	r2, [pc, #156]	; (800fcc4 <floor+0xec>)
 800fc28:	411a      	asrs	r2, r3
 800fc2a:	ea01 0402 	and.w	r4, r1, r2
 800fc2e:	4304      	orrs	r4, r0
 800fc30:	d01a      	beq.n	800fc68 <floor+0x90>
 800fc32:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fcb8 <floor+0xe0>
 800fc36:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fc3a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc42:	ddeb      	ble.n	800fc1c <floor+0x44>
 800fc44:	2900      	cmp	r1, #0
 800fc46:	bfbe      	ittt	lt
 800fc48:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800fc4c:	fa40 f303 	asrlt.w	r3, r0, r3
 800fc50:	18c9      	addlt	r1, r1, r3
 800fc52:	ea21 0102 	bic.w	r1, r1, r2
 800fc56:	2000      	movs	r0, #0
 800fc58:	e7e0      	b.n	800fc1c <floor+0x44>
 800fc5a:	2b33      	cmp	r3, #51	; 0x33
 800fc5c:	dd05      	ble.n	800fc6a <floor+0x92>
 800fc5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc62:	d101      	bne.n	800fc68 <floor+0x90>
 800fc64:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fc68:	bd30      	pop	{r4, r5, pc}
 800fc6a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc72:	40e2      	lsrs	r2, r4
 800fc74:	4202      	tst	r2, r0
 800fc76:	d0f7      	beq.n	800fc68 <floor+0x90>
 800fc78:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800fcb8 <floor+0xe0>
 800fc7c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fc80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc88:	ddc8      	ble.n	800fc1c <floor+0x44>
 800fc8a:	2900      	cmp	r1, #0
 800fc8c:	da02      	bge.n	800fc94 <floor+0xbc>
 800fc8e:	2b14      	cmp	r3, #20
 800fc90:	d103      	bne.n	800fc9a <floor+0xc2>
 800fc92:	3101      	adds	r1, #1
 800fc94:	ea20 0002 	bic.w	r0, r0, r2
 800fc98:	e7c0      	b.n	800fc1c <floor+0x44>
 800fc9a:	2401      	movs	r4, #1
 800fc9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fca0:	fa04 f303 	lsl.w	r3, r4, r3
 800fca4:	4418      	add	r0, r3
 800fca6:	42a8      	cmp	r0, r5
 800fca8:	bf38      	it	cc
 800fcaa:	1909      	addcc	r1, r1, r4
 800fcac:	e7f2      	b.n	800fc94 <floor+0xbc>
 800fcae:	2000      	movs	r0, #0
 800fcb0:	4601      	mov	r1, r0
 800fcb2:	e7b3      	b.n	800fc1c <floor+0x44>
 800fcb4:	f3af 8000 	nop.w
 800fcb8:	8800759c 	.word	0x8800759c
 800fcbc:	7e37e43c 	.word	0x7e37e43c
 800fcc0:	bff00000 	.word	0xbff00000
 800fcc4:	000fffff 	.word	0x000fffff

0800fcc8 <matherr>:
 800fcc8:	2000      	movs	r0, #0
 800fcca:	4770      	bx	lr
 800fccc:	0000      	movs	r0, r0
	...

0800fcd0 <scalbn>:
 800fcd0:	b500      	push	{lr}
 800fcd2:	ed2d 8b02 	vpush	{d8}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	ed8d 0b00 	vstr	d0, [sp]
 800fcdc:	9b01      	ldr	r3, [sp, #4]
 800fcde:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fce2:	b9a2      	cbnz	r2, 800fd0e <scalbn+0x3e>
 800fce4:	9a00      	ldr	r2, [sp, #0]
 800fce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcea:	4313      	orrs	r3, r2
 800fcec:	d03a      	beq.n	800fd64 <scalbn+0x94>
 800fcee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800fda8 <scalbn+0xd8>
 800fcf2:	4b35      	ldr	r3, [pc, #212]	; (800fdc8 <scalbn+0xf8>)
 800fcf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fcf8:	4298      	cmp	r0, r3
 800fcfa:	ed8d 7b00 	vstr	d7, [sp]
 800fcfe:	da11      	bge.n	800fd24 <scalbn+0x54>
 800fd00:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800fdb0 <scalbn+0xe0>
 800fd04:	ed9d 6b00 	vldr	d6, [sp]
 800fd08:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fd0c:	e007      	b.n	800fd1e <scalbn+0x4e>
 800fd0e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fd12:	428a      	cmp	r2, r1
 800fd14:	d10a      	bne.n	800fd2c <scalbn+0x5c>
 800fd16:	ed9d 7b00 	vldr	d7, [sp]
 800fd1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fd1e:	ed8d 7b00 	vstr	d7, [sp]
 800fd22:	e01f      	b.n	800fd64 <scalbn+0x94>
 800fd24:	9b01      	ldr	r3, [sp, #4]
 800fd26:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fd2a:	3a36      	subs	r2, #54	; 0x36
 800fd2c:	4402      	add	r2, r0
 800fd2e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fd32:	428a      	cmp	r2, r1
 800fd34:	dd0a      	ble.n	800fd4c <scalbn+0x7c>
 800fd36:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800fdb8 <scalbn+0xe8>
 800fd3a:	eeb0 0b48 	vmov.f64	d0, d8
 800fd3e:	ed9d 1b00 	vldr	d1, [sp]
 800fd42:	f000 f843 	bl	800fdcc <copysign>
 800fd46:	ee20 7b08 	vmul.f64	d7, d0, d8
 800fd4a:	e7e8      	b.n	800fd1e <scalbn+0x4e>
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	dd10      	ble.n	800fd72 <scalbn+0xa2>
 800fd50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd5c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd60:	e9cd 0100 	strd	r0, r1, [sp]
 800fd64:	ed9d 0b00 	vldr	d0, [sp]
 800fd68:	b003      	add	sp, #12
 800fd6a:	ecbd 8b02 	vpop	{d8}
 800fd6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd72:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fd76:	da06      	bge.n	800fd86 <scalbn+0xb6>
 800fd78:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd7c:	4298      	cmp	r0, r3
 800fd7e:	dcda      	bgt.n	800fd36 <scalbn+0x66>
 800fd80:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800fdb0 <scalbn+0xe0>
 800fd84:	e7d9      	b.n	800fd3a <scalbn+0x6a>
 800fd86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd8e:	3236      	adds	r2, #54	; 0x36
 800fd90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd94:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd98:	ec41 0b17 	vmov	d7, r0, r1
 800fd9c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800fdc0 <scalbn+0xf0>
 800fda0:	e7b2      	b.n	800fd08 <scalbn+0x38>
 800fda2:	bf00      	nop
 800fda4:	f3af 8000 	nop.w
 800fda8:	00000000 	.word	0x00000000
 800fdac:	43500000 	.word	0x43500000
 800fdb0:	c2f8f359 	.word	0xc2f8f359
 800fdb4:	01a56e1f 	.word	0x01a56e1f
 800fdb8:	8800759c 	.word	0x8800759c
 800fdbc:	7e37e43c 	.word	0x7e37e43c
 800fdc0:	00000000 	.word	0x00000000
 800fdc4:	3c900000 	.word	0x3c900000
 800fdc8:	ffff3cb0 	.word	0xffff3cb0

0800fdcc <copysign>:
 800fdcc:	ec51 0b10 	vmov	r0, r1, d0
 800fdd0:	ee11 0a90 	vmov	r0, s3
 800fdd4:	ee10 2a10 	vmov	r2, s0
 800fdd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800fde0:	ea41 0300 	orr.w	r3, r1, r0
 800fde4:	ec43 2b10 	vmov	d0, r2, r3
 800fde8:	4770      	bx	lr

0800fdea <abort>:
 800fdea:	b508      	push	{r3, lr}
 800fdec:	2006      	movs	r0, #6
 800fdee:	f000 ffdd 	bl	8010dac <raise>
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	f004 fe7a 	bl	8014aec <_exit>

0800fdf8 <calloc>:
 800fdf8:	4b02      	ldr	r3, [pc, #8]	; (800fe04 <calloc+0xc>)
 800fdfa:	460a      	mov	r2, r1
 800fdfc:	4601      	mov	r1, r0
 800fdfe:	6818      	ldr	r0, [r3, #0]
 800fe00:	f000 b847 	b.w	800fe92 <_calloc_r>
 800fe04:	200003ac 	.word	0x200003ac

0800fe08 <__errno>:
 800fe08:	4b01      	ldr	r3, [pc, #4]	; (800fe10 <__errno+0x8>)
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	200003ac 	.word	0x200003ac

0800fe14 <__libc_init_array>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	4e0d      	ldr	r6, [pc, #52]	; (800fe4c <__libc_init_array+0x38>)
 800fe18:	4c0d      	ldr	r4, [pc, #52]	; (800fe50 <__libc_init_array+0x3c>)
 800fe1a:	1ba4      	subs	r4, r4, r6
 800fe1c:	10a4      	asrs	r4, r4, #2
 800fe1e:	2500      	movs	r5, #0
 800fe20:	42a5      	cmp	r5, r4
 800fe22:	d109      	bne.n	800fe38 <__libc_init_array+0x24>
 800fe24:	4e0b      	ldr	r6, [pc, #44]	; (800fe54 <__libc_init_array+0x40>)
 800fe26:	4c0c      	ldr	r4, [pc, #48]	; (800fe58 <__libc_init_array+0x44>)
 800fe28:	f004 fe62 	bl	8014af0 <_init>
 800fe2c:	1ba4      	subs	r4, r4, r6
 800fe2e:	10a4      	asrs	r4, r4, #2
 800fe30:	2500      	movs	r5, #0
 800fe32:	42a5      	cmp	r5, r4
 800fe34:	d105      	bne.n	800fe42 <__libc_init_array+0x2e>
 800fe36:	bd70      	pop	{r4, r5, r6, pc}
 800fe38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fe3c:	4798      	blx	r3
 800fe3e:	3501      	adds	r5, #1
 800fe40:	e7ee      	b.n	800fe20 <__libc_init_array+0xc>
 800fe42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fe46:	4798      	blx	r3
 800fe48:	3501      	adds	r5, #1
 800fe4a:	e7f2      	b.n	800fe32 <__libc_init_array+0x1e>
 800fe4c:	080154b4 	.word	0x080154b4
 800fe50:	080154b4 	.word	0x080154b4
 800fe54:	080154b4 	.word	0x080154b4
 800fe58:	080154c0 	.word	0x080154c0

0800fe5c <malloc>:
 800fe5c:	4b02      	ldr	r3, [pc, #8]	; (800fe68 <malloc+0xc>)
 800fe5e:	4601      	mov	r1, r0
 800fe60:	6818      	ldr	r0, [r3, #0]
 800fe62:	f000 b873 	b.w	800ff4c <_malloc_r>
 800fe66:	bf00      	nop
 800fe68:	200003ac 	.word	0x200003ac

0800fe6c <memcpy>:
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	1e43      	subs	r3, r0, #1
 800fe70:	440a      	add	r2, r1
 800fe72:	4291      	cmp	r1, r2
 800fe74:	d100      	bne.n	800fe78 <memcpy+0xc>
 800fe76:	bd10      	pop	{r4, pc}
 800fe78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe80:	e7f7      	b.n	800fe72 <memcpy+0x6>

0800fe82 <memset>:
 800fe82:	4402      	add	r2, r0
 800fe84:	4603      	mov	r3, r0
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d100      	bne.n	800fe8c <memset+0xa>
 800fe8a:	4770      	bx	lr
 800fe8c:	f803 1b01 	strb.w	r1, [r3], #1
 800fe90:	e7f9      	b.n	800fe86 <memset+0x4>

0800fe92 <_calloc_r>:
 800fe92:	b538      	push	{r3, r4, r5, lr}
 800fe94:	fb02 f401 	mul.w	r4, r2, r1
 800fe98:	4621      	mov	r1, r4
 800fe9a:	f000 f857 	bl	800ff4c <_malloc_r>
 800fe9e:	4605      	mov	r5, r0
 800fea0:	b118      	cbz	r0, 800feaa <_calloc_r+0x18>
 800fea2:	4622      	mov	r2, r4
 800fea4:	2100      	movs	r1, #0
 800fea6:	f7ff ffec 	bl	800fe82 <memset>
 800feaa:	4628      	mov	r0, r5
 800feac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800feb0 <_free_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	4605      	mov	r5, r0
 800feb4:	2900      	cmp	r1, #0
 800feb6:	d045      	beq.n	800ff44 <_free_r+0x94>
 800feb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800febc:	1f0c      	subs	r4, r1, #4
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfb8      	it	lt
 800fec2:	18e4      	addlt	r4, r4, r3
 800fec4:	f003 faa2 	bl	801340c <__malloc_lock>
 800fec8:	4a1f      	ldr	r2, [pc, #124]	; (800ff48 <_free_r+0x98>)
 800feca:	6813      	ldr	r3, [r2, #0]
 800fecc:	4610      	mov	r0, r2
 800fece:	b933      	cbnz	r3, 800fede <_free_r+0x2e>
 800fed0:	6063      	str	r3, [r4, #4]
 800fed2:	6014      	str	r4, [r2, #0]
 800fed4:	4628      	mov	r0, r5
 800fed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feda:	f003 ba98 	b.w	801340e <__malloc_unlock>
 800fede:	42a3      	cmp	r3, r4
 800fee0:	d90c      	bls.n	800fefc <_free_r+0x4c>
 800fee2:	6821      	ldr	r1, [r4, #0]
 800fee4:	1862      	adds	r2, r4, r1
 800fee6:	4293      	cmp	r3, r2
 800fee8:	bf04      	itt	eq
 800feea:	681a      	ldreq	r2, [r3, #0]
 800feec:	685b      	ldreq	r3, [r3, #4]
 800feee:	6063      	str	r3, [r4, #4]
 800fef0:	bf04      	itt	eq
 800fef2:	1852      	addeq	r2, r2, r1
 800fef4:	6022      	streq	r2, [r4, #0]
 800fef6:	6004      	str	r4, [r0, #0]
 800fef8:	e7ec      	b.n	800fed4 <_free_r+0x24>
 800fefa:	4613      	mov	r3, r2
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	b10a      	cbz	r2, 800ff04 <_free_r+0x54>
 800ff00:	42a2      	cmp	r2, r4
 800ff02:	d9fa      	bls.n	800fefa <_free_r+0x4a>
 800ff04:	6819      	ldr	r1, [r3, #0]
 800ff06:	1858      	adds	r0, r3, r1
 800ff08:	42a0      	cmp	r0, r4
 800ff0a:	d10b      	bne.n	800ff24 <_free_r+0x74>
 800ff0c:	6820      	ldr	r0, [r4, #0]
 800ff0e:	4401      	add	r1, r0
 800ff10:	1858      	adds	r0, r3, r1
 800ff12:	4282      	cmp	r2, r0
 800ff14:	6019      	str	r1, [r3, #0]
 800ff16:	d1dd      	bne.n	800fed4 <_free_r+0x24>
 800ff18:	6810      	ldr	r0, [r2, #0]
 800ff1a:	6852      	ldr	r2, [r2, #4]
 800ff1c:	605a      	str	r2, [r3, #4]
 800ff1e:	4401      	add	r1, r0
 800ff20:	6019      	str	r1, [r3, #0]
 800ff22:	e7d7      	b.n	800fed4 <_free_r+0x24>
 800ff24:	d902      	bls.n	800ff2c <_free_r+0x7c>
 800ff26:	230c      	movs	r3, #12
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	e7d3      	b.n	800fed4 <_free_r+0x24>
 800ff2c:	6820      	ldr	r0, [r4, #0]
 800ff2e:	1821      	adds	r1, r4, r0
 800ff30:	428a      	cmp	r2, r1
 800ff32:	bf04      	itt	eq
 800ff34:	6811      	ldreq	r1, [r2, #0]
 800ff36:	6852      	ldreq	r2, [r2, #4]
 800ff38:	6062      	str	r2, [r4, #4]
 800ff3a:	bf04      	itt	eq
 800ff3c:	1809      	addeq	r1, r1, r0
 800ff3e:	6021      	streq	r1, [r4, #0]
 800ff40:	605c      	str	r4, [r3, #4]
 800ff42:	e7c7      	b.n	800fed4 <_free_r+0x24>
 800ff44:	bd38      	pop	{r3, r4, r5, pc}
 800ff46:	bf00      	nop
 800ff48:	20002390 	.word	0x20002390

0800ff4c <_malloc_r>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	1ccd      	adds	r5, r1, #3
 800ff50:	f025 0503 	bic.w	r5, r5, #3
 800ff54:	3508      	adds	r5, #8
 800ff56:	2d0c      	cmp	r5, #12
 800ff58:	bf38      	it	cc
 800ff5a:	250c      	movcc	r5, #12
 800ff5c:	2d00      	cmp	r5, #0
 800ff5e:	4606      	mov	r6, r0
 800ff60:	db01      	blt.n	800ff66 <_malloc_r+0x1a>
 800ff62:	42a9      	cmp	r1, r5
 800ff64:	d903      	bls.n	800ff6e <_malloc_r+0x22>
 800ff66:	230c      	movs	r3, #12
 800ff68:	6033      	str	r3, [r6, #0]
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	bd70      	pop	{r4, r5, r6, pc}
 800ff6e:	f003 fa4d 	bl	801340c <__malloc_lock>
 800ff72:	4a21      	ldr	r2, [pc, #132]	; (800fff8 <_malloc_r+0xac>)
 800ff74:	6814      	ldr	r4, [r2, #0]
 800ff76:	4621      	mov	r1, r4
 800ff78:	b991      	cbnz	r1, 800ffa0 <_malloc_r+0x54>
 800ff7a:	4c20      	ldr	r4, [pc, #128]	; (800fffc <_malloc_r+0xb0>)
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	b91b      	cbnz	r3, 800ff88 <_malloc_r+0x3c>
 800ff80:	4630      	mov	r0, r6
 800ff82:	f000 fed5 	bl	8010d30 <_sbrk_r>
 800ff86:	6020      	str	r0, [r4, #0]
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f000 fed0 	bl	8010d30 <_sbrk_r>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d124      	bne.n	800ffde <_malloc_r+0x92>
 800ff94:	230c      	movs	r3, #12
 800ff96:	6033      	str	r3, [r6, #0]
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f003 fa38 	bl	801340e <__malloc_unlock>
 800ff9e:	e7e4      	b.n	800ff6a <_malloc_r+0x1e>
 800ffa0:	680b      	ldr	r3, [r1, #0]
 800ffa2:	1b5b      	subs	r3, r3, r5
 800ffa4:	d418      	bmi.n	800ffd8 <_malloc_r+0x8c>
 800ffa6:	2b0b      	cmp	r3, #11
 800ffa8:	d90f      	bls.n	800ffca <_malloc_r+0x7e>
 800ffaa:	600b      	str	r3, [r1, #0]
 800ffac:	50cd      	str	r5, [r1, r3]
 800ffae:	18cc      	adds	r4, r1, r3
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f003 fa2c 	bl	801340e <__malloc_unlock>
 800ffb6:	f104 000b 	add.w	r0, r4, #11
 800ffba:	1d23      	adds	r3, r4, #4
 800ffbc:	f020 0007 	bic.w	r0, r0, #7
 800ffc0:	1ac3      	subs	r3, r0, r3
 800ffc2:	d0d3      	beq.n	800ff6c <_malloc_r+0x20>
 800ffc4:	425a      	negs	r2, r3
 800ffc6:	50e2      	str	r2, [r4, r3]
 800ffc8:	e7d0      	b.n	800ff6c <_malloc_r+0x20>
 800ffca:	428c      	cmp	r4, r1
 800ffcc:	684b      	ldr	r3, [r1, #4]
 800ffce:	bf16      	itet	ne
 800ffd0:	6063      	strne	r3, [r4, #4]
 800ffd2:	6013      	streq	r3, [r2, #0]
 800ffd4:	460c      	movne	r4, r1
 800ffd6:	e7eb      	b.n	800ffb0 <_malloc_r+0x64>
 800ffd8:	460c      	mov	r4, r1
 800ffda:	6849      	ldr	r1, [r1, #4]
 800ffdc:	e7cc      	b.n	800ff78 <_malloc_r+0x2c>
 800ffde:	1cc4      	adds	r4, r0, #3
 800ffe0:	f024 0403 	bic.w	r4, r4, #3
 800ffe4:	42a0      	cmp	r0, r4
 800ffe6:	d005      	beq.n	800fff4 <_malloc_r+0xa8>
 800ffe8:	1a21      	subs	r1, r4, r0
 800ffea:	4630      	mov	r0, r6
 800ffec:	f000 fea0 	bl	8010d30 <_sbrk_r>
 800fff0:	3001      	adds	r0, #1
 800fff2:	d0cf      	beq.n	800ff94 <_malloc_r+0x48>
 800fff4:	6025      	str	r5, [r4, #0]
 800fff6:	e7db      	b.n	800ffb0 <_malloc_r+0x64>
 800fff8:	20002390 	.word	0x20002390
 800fffc:	20002394 	.word	0x20002394

08010000 <__cvt>:
 8010000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010002:	ed2d 8b02 	vpush	{d8}
 8010006:	eeb0 8b40 	vmov.f64	d8, d0
 801000a:	b085      	sub	sp, #20
 801000c:	4617      	mov	r7, r2
 801000e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010010:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010012:	ee18 2a90 	vmov	r2, s17
 8010016:	f025 0520 	bic.w	r5, r5, #32
 801001a:	2a00      	cmp	r2, #0
 801001c:	bfb6      	itet	lt
 801001e:	222d      	movlt	r2, #45	; 0x2d
 8010020:	2200      	movge	r2, #0
 8010022:	eeb1 8b40 	vneglt.f64	d8, d0
 8010026:	2d46      	cmp	r5, #70	; 0x46
 8010028:	460c      	mov	r4, r1
 801002a:	701a      	strb	r2, [r3, #0]
 801002c:	d004      	beq.n	8010038 <__cvt+0x38>
 801002e:	2d45      	cmp	r5, #69	; 0x45
 8010030:	d100      	bne.n	8010034 <__cvt+0x34>
 8010032:	3401      	adds	r4, #1
 8010034:	2102      	movs	r1, #2
 8010036:	e000      	b.n	801003a <__cvt+0x3a>
 8010038:	2103      	movs	r1, #3
 801003a:	ab03      	add	r3, sp, #12
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	ab02      	add	r3, sp, #8
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	4622      	mov	r2, r4
 8010044:	4633      	mov	r3, r6
 8010046:	eeb0 0b48 	vmov.f64	d0, d8
 801004a:	f001 ff49 	bl	8011ee0 <_dtoa_r>
 801004e:	2d47      	cmp	r5, #71	; 0x47
 8010050:	d101      	bne.n	8010056 <__cvt+0x56>
 8010052:	07fb      	lsls	r3, r7, #31
 8010054:	d51e      	bpl.n	8010094 <__cvt+0x94>
 8010056:	2d46      	cmp	r5, #70	; 0x46
 8010058:	eb00 0304 	add.w	r3, r0, r4
 801005c:	d10c      	bne.n	8010078 <__cvt+0x78>
 801005e:	7802      	ldrb	r2, [r0, #0]
 8010060:	2a30      	cmp	r2, #48	; 0x30
 8010062:	d107      	bne.n	8010074 <__cvt+0x74>
 8010064:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006c:	bf1c      	itt	ne
 801006e:	f1c4 0401 	rsbne	r4, r4, #1
 8010072:	6034      	strne	r4, [r6, #0]
 8010074:	6832      	ldr	r2, [r6, #0]
 8010076:	4413      	add	r3, r2
 8010078:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	d007      	beq.n	8010092 <__cvt+0x92>
 8010082:	2130      	movs	r1, #48	; 0x30
 8010084:	9a03      	ldr	r2, [sp, #12]
 8010086:	429a      	cmp	r2, r3
 8010088:	d204      	bcs.n	8010094 <__cvt+0x94>
 801008a:	1c54      	adds	r4, r2, #1
 801008c:	9403      	str	r4, [sp, #12]
 801008e:	7011      	strb	r1, [r2, #0]
 8010090:	e7f8      	b.n	8010084 <__cvt+0x84>
 8010092:	9303      	str	r3, [sp, #12]
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010098:	1a1b      	subs	r3, r3, r0
 801009a:	6013      	str	r3, [r2, #0]
 801009c:	b005      	add	sp, #20
 801009e:	ecbd 8b02 	vpop	{d8}
 80100a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100a4 <__exponent>:
 80100a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100a6:	2900      	cmp	r1, #0
 80100a8:	4604      	mov	r4, r0
 80100aa:	bfba      	itte	lt
 80100ac:	4249      	neglt	r1, r1
 80100ae:	232d      	movlt	r3, #45	; 0x2d
 80100b0:	232b      	movge	r3, #43	; 0x2b
 80100b2:	2909      	cmp	r1, #9
 80100b4:	f804 2b02 	strb.w	r2, [r4], #2
 80100b8:	7043      	strb	r3, [r0, #1]
 80100ba:	dd20      	ble.n	80100fe <__exponent+0x5a>
 80100bc:	f10d 0307 	add.w	r3, sp, #7
 80100c0:	461f      	mov	r7, r3
 80100c2:	260a      	movs	r6, #10
 80100c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80100c8:	fb06 1115 	mls	r1, r6, r5, r1
 80100cc:	3130      	adds	r1, #48	; 0x30
 80100ce:	2d09      	cmp	r5, #9
 80100d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80100d4:	f103 32ff 	add.w	r2, r3, #4294967295
 80100d8:	4629      	mov	r1, r5
 80100da:	dc09      	bgt.n	80100f0 <__exponent+0x4c>
 80100dc:	3130      	adds	r1, #48	; 0x30
 80100de:	3b02      	subs	r3, #2
 80100e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100e4:	42bb      	cmp	r3, r7
 80100e6:	4622      	mov	r2, r4
 80100e8:	d304      	bcc.n	80100f4 <__exponent+0x50>
 80100ea:	1a10      	subs	r0, r2, r0
 80100ec:	b003      	add	sp, #12
 80100ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f0:	4613      	mov	r3, r2
 80100f2:	e7e7      	b.n	80100c4 <__exponent+0x20>
 80100f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100f8:	f804 2b01 	strb.w	r2, [r4], #1
 80100fc:	e7f2      	b.n	80100e4 <__exponent+0x40>
 80100fe:	2330      	movs	r3, #48	; 0x30
 8010100:	4419      	add	r1, r3
 8010102:	7083      	strb	r3, [r0, #2]
 8010104:	1d02      	adds	r2, r0, #4
 8010106:	70c1      	strb	r1, [r0, #3]
 8010108:	e7ef      	b.n	80100ea <__exponent+0x46>
 801010a:	0000      	movs	r0, r0
 801010c:	0000      	movs	r0, r0
	...

08010110 <_printf_float>:
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	b08d      	sub	sp, #52	; 0x34
 8010116:	460c      	mov	r4, r1
 8010118:	4616      	mov	r6, r2
 801011a:	461f      	mov	r7, r3
 801011c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010120:	4605      	mov	r5, r0
 8010122:	f003 f8dd 	bl	80132e0 <_localeconv_r>
 8010126:	f8d0 b000 	ldr.w	fp, [r0]
 801012a:	4658      	mov	r0, fp
 801012c:	f7f0 f888 	bl	8000240 <strlen>
 8010130:	2300      	movs	r3, #0
 8010132:	930a      	str	r3, [sp, #40]	; 0x28
 8010134:	f8d8 3000 	ldr.w	r3, [r8]
 8010138:	9005      	str	r0, [sp, #20]
 801013a:	3307      	adds	r3, #7
 801013c:	f023 0307 	bic.w	r3, r3, #7
 8010140:	f103 0108 	add.w	r1, r3, #8
 8010144:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010148:	6822      	ldr	r2, [r4, #0]
 801014a:	f8c8 1000 	str.w	r1, [r8]
 801014e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010152:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010156:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80103e0 <_printf_float+0x2d0>
 801015a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801015e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010162:	eeb4 6b47 	vcmp.f64	d6, d7
 8010166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016a:	dd24      	ble.n	80101b6 <_printf_float+0xa6>
 801016c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010174:	d502      	bpl.n	801017c <_printf_float+0x6c>
 8010176:	232d      	movs	r3, #45	; 0x2d
 8010178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801017c:	499a      	ldr	r1, [pc, #616]	; (80103e8 <_printf_float+0x2d8>)
 801017e:	4b9b      	ldr	r3, [pc, #620]	; (80103ec <_printf_float+0x2dc>)
 8010180:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010184:	bf8c      	ite	hi
 8010186:	4688      	movhi	r8, r1
 8010188:	4698      	movls	r8, r3
 801018a:	f022 0204 	bic.w	r2, r2, #4
 801018e:	2303      	movs	r3, #3
 8010190:	6123      	str	r3, [r4, #16]
 8010192:	6022      	str	r2, [r4, #0]
 8010194:	f04f 0a00 	mov.w	sl, #0
 8010198:	9700      	str	r7, [sp, #0]
 801019a:	4633      	mov	r3, r6
 801019c:	aa0b      	add	r2, sp, #44	; 0x2c
 801019e:	4621      	mov	r1, r4
 80101a0:	4628      	mov	r0, r5
 80101a2:	f000 f9e1 	bl	8010568 <_printf_common>
 80101a6:	3001      	adds	r0, #1
 80101a8:	f040 8089 	bne.w	80102be <_printf_float+0x1ae>
 80101ac:	f04f 30ff 	mov.w	r0, #4294967295
 80101b0:	b00d      	add	sp, #52	; 0x34
 80101b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80101ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101be:	d702      	bvc.n	80101c6 <_printf_float+0xb6>
 80101c0:	498b      	ldr	r1, [pc, #556]	; (80103f0 <_printf_float+0x2e0>)
 80101c2:	4b8c      	ldr	r3, [pc, #560]	; (80103f4 <_printf_float+0x2e4>)
 80101c4:	e7dc      	b.n	8010180 <_printf_float+0x70>
 80101c6:	6861      	ldr	r1, [r4, #4]
 80101c8:	1c4b      	adds	r3, r1, #1
 80101ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101ce:	ab0a      	add	r3, sp, #40	; 0x28
 80101d0:	a809      	add	r0, sp, #36	; 0x24
 80101d2:	d13b      	bne.n	801024c <_printf_float+0x13c>
 80101d4:	2106      	movs	r1, #6
 80101d6:	6061      	str	r1, [r4, #4]
 80101d8:	f04f 0c00 	mov.w	ip, #0
 80101dc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80101e0:	e9cd 0900 	strd	r0, r9, [sp]
 80101e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101e8:	6022      	str	r2, [r4, #0]
 80101ea:	6861      	ldr	r1, [r4, #4]
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7ff ff07 	bl	8010000 <__cvt>
 80101f2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80101f6:	2b47      	cmp	r3, #71	; 0x47
 80101f8:	4680      	mov	r8, r0
 80101fa:	d109      	bne.n	8010210 <_printf_float+0x100>
 80101fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101fe:	1cd8      	adds	r0, r3, #3
 8010200:	db02      	blt.n	8010208 <_printf_float+0xf8>
 8010202:	6862      	ldr	r2, [r4, #4]
 8010204:	4293      	cmp	r3, r2
 8010206:	dd47      	ble.n	8010298 <_printf_float+0x188>
 8010208:	f1a9 0902 	sub.w	r9, r9, #2
 801020c:	fa5f f989 	uxtb.w	r9, r9
 8010210:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010216:	d824      	bhi.n	8010262 <_printf_float+0x152>
 8010218:	3901      	subs	r1, #1
 801021a:	464a      	mov	r2, r9
 801021c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010220:	9109      	str	r1, [sp, #36]	; 0x24
 8010222:	f7ff ff3f 	bl	80100a4 <__exponent>
 8010226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010228:	1813      	adds	r3, r2, r0
 801022a:	2a01      	cmp	r2, #1
 801022c:	4682      	mov	sl, r0
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	dc02      	bgt.n	8010238 <_printf_float+0x128>
 8010232:	6822      	ldr	r2, [r4, #0]
 8010234:	07d1      	lsls	r1, r2, #31
 8010236:	d501      	bpl.n	801023c <_printf_float+0x12c>
 8010238:	3301      	adds	r3, #1
 801023a:	6123      	str	r3, [r4, #16]
 801023c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010240:	2b00      	cmp	r3, #0
 8010242:	d0a9      	beq.n	8010198 <_printf_float+0x88>
 8010244:	232d      	movs	r3, #45	; 0x2d
 8010246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801024a:	e7a5      	b.n	8010198 <_printf_float+0x88>
 801024c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010250:	f000 8178 	beq.w	8010544 <_printf_float+0x434>
 8010254:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010258:	d1be      	bne.n	80101d8 <_printf_float+0xc8>
 801025a:	2900      	cmp	r1, #0
 801025c:	d1bc      	bne.n	80101d8 <_printf_float+0xc8>
 801025e:	2101      	movs	r1, #1
 8010260:	e7b9      	b.n	80101d6 <_printf_float+0xc6>
 8010262:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010266:	d119      	bne.n	801029c <_printf_float+0x18c>
 8010268:	2900      	cmp	r1, #0
 801026a:	6863      	ldr	r3, [r4, #4]
 801026c:	dd0c      	ble.n	8010288 <_printf_float+0x178>
 801026e:	6121      	str	r1, [r4, #16]
 8010270:	b913      	cbnz	r3, 8010278 <_printf_float+0x168>
 8010272:	6822      	ldr	r2, [r4, #0]
 8010274:	07d2      	lsls	r2, r2, #31
 8010276:	d502      	bpl.n	801027e <_printf_float+0x16e>
 8010278:	3301      	adds	r3, #1
 801027a:	440b      	add	r3, r1
 801027c:	6123      	str	r3, [r4, #16]
 801027e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010280:	65a3      	str	r3, [r4, #88]	; 0x58
 8010282:	f04f 0a00 	mov.w	sl, #0
 8010286:	e7d9      	b.n	801023c <_printf_float+0x12c>
 8010288:	b913      	cbnz	r3, 8010290 <_printf_float+0x180>
 801028a:	6822      	ldr	r2, [r4, #0]
 801028c:	07d0      	lsls	r0, r2, #31
 801028e:	d501      	bpl.n	8010294 <_printf_float+0x184>
 8010290:	3302      	adds	r3, #2
 8010292:	e7f3      	b.n	801027c <_printf_float+0x16c>
 8010294:	2301      	movs	r3, #1
 8010296:	e7f1      	b.n	801027c <_printf_float+0x16c>
 8010298:	f04f 0967 	mov.w	r9, #103	; 0x67
 801029c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102a0:	4293      	cmp	r3, r2
 80102a2:	db05      	blt.n	80102b0 <_printf_float+0x1a0>
 80102a4:	6822      	ldr	r2, [r4, #0]
 80102a6:	6123      	str	r3, [r4, #16]
 80102a8:	07d1      	lsls	r1, r2, #31
 80102aa:	d5e8      	bpl.n	801027e <_printf_float+0x16e>
 80102ac:	3301      	adds	r3, #1
 80102ae:	e7e5      	b.n	801027c <_printf_float+0x16c>
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	bfd4      	ite	le
 80102b4:	f1c3 0302 	rsble	r3, r3, #2
 80102b8:	2301      	movgt	r3, #1
 80102ba:	4413      	add	r3, r2
 80102bc:	e7de      	b.n	801027c <_printf_float+0x16c>
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	055a      	lsls	r2, r3, #21
 80102c2:	d407      	bmi.n	80102d4 <_printf_float+0x1c4>
 80102c4:	6923      	ldr	r3, [r4, #16]
 80102c6:	4642      	mov	r2, r8
 80102c8:	4631      	mov	r1, r6
 80102ca:	4628      	mov	r0, r5
 80102cc:	47b8      	blx	r7
 80102ce:	3001      	adds	r0, #1
 80102d0:	d12a      	bne.n	8010328 <_printf_float+0x218>
 80102d2:	e76b      	b.n	80101ac <_printf_float+0x9c>
 80102d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80102d8:	f240 80de 	bls.w	8010498 <_printf_float+0x388>
 80102dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80102e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	d133      	bne.n	8010352 <_printf_float+0x242>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4a42      	ldr	r2, [pc, #264]	; (80103f8 <_printf_float+0x2e8>)
 80102ee:	4631      	mov	r1, r6
 80102f0:	4628      	mov	r0, r5
 80102f2:	47b8      	blx	r7
 80102f4:	3001      	adds	r0, #1
 80102f6:	f43f af59 	beq.w	80101ac <_printf_float+0x9c>
 80102fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102fe:	429a      	cmp	r2, r3
 8010300:	db02      	blt.n	8010308 <_printf_float+0x1f8>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	07d8      	lsls	r0, r3, #31
 8010306:	d50f      	bpl.n	8010328 <_printf_float+0x218>
 8010308:	9b05      	ldr	r3, [sp, #20]
 801030a:	465a      	mov	r2, fp
 801030c:	4631      	mov	r1, r6
 801030e:	4628      	mov	r0, r5
 8010310:	47b8      	blx	r7
 8010312:	3001      	adds	r0, #1
 8010314:	f43f af4a 	beq.w	80101ac <_printf_float+0x9c>
 8010318:	f04f 0800 	mov.w	r8, #0
 801031c:	f104 091a 	add.w	r9, r4, #26
 8010320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010322:	3b01      	subs	r3, #1
 8010324:	4543      	cmp	r3, r8
 8010326:	dc09      	bgt.n	801033c <_printf_float+0x22c>
 8010328:	6823      	ldr	r3, [r4, #0]
 801032a:	079b      	lsls	r3, r3, #30
 801032c:	f100 8105 	bmi.w	801053a <_printf_float+0x42a>
 8010330:	68e0      	ldr	r0, [r4, #12]
 8010332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010334:	4298      	cmp	r0, r3
 8010336:	bfb8      	it	lt
 8010338:	4618      	movlt	r0, r3
 801033a:	e739      	b.n	80101b0 <_printf_float+0xa0>
 801033c:	2301      	movs	r3, #1
 801033e:	464a      	mov	r2, r9
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	f43f af30 	beq.w	80101ac <_printf_float+0x9c>
 801034c:	f108 0801 	add.w	r8, r8, #1
 8010350:	e7e6      	b.n	8010320 <_printf_float+0x210>
 8010352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010354:	2b00      	cmp	r3, #0
 8010356:	dc2b      	bgt.n	80103b0 <_printf_float+0x2a0>
 8010358:	2301      	movs	r3, #1
 801035a:	4a27      	ldr	r2, [pc, #156]	; (80103f8 <_printf_float+0x2e8>)
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	f43f af22 	beq.w	80101ac <_printf_float+0x9c>
 8010368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036a:	b923      	cbnz	r3, 8010376 <_printf_float+0x266>
 801036c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036e:	b913      	cbnz	r3, 8010376 <_printf_float+0x266>
 8010370:	6823      	ldr	r3, [r4, #0]
 8010372:	07d9      	lsls	r1, r3, #31
 8010374:	d5d8      	bpl.n	8010328 <_printf_float+0x218>
 8010376:	9b05      	ldr	r3, [sp, #20]
 8010378:	465a      	mov	r2, fp
 801037a:	4631      	mov	r1, r6
 801037c:	4628      	mov	r0, r5
 801037e:	47b8      	blx	r7
 8010380:	3001      	adds	r0, #1
 8010382:	f43f af13 	beq.w	80101ac <_printf_float+0x9c>
 8010386:	f04f 0900 	mov.w	r9, #0
 801038a:	f104 0a1a 	add.w	sl, r4, #26
 801038e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010390:	425b      	negs	r3, r3
 8010392:	454b      	cmp	r3, r9
 8010394:	dc01      	bgt.n	801039a <_printf_float+0x28a>
 8010396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010398:	e795      	b.n	80102c6 <_printf_float+0x1b6>
 801039a:	2301      	movs	r3, #1
 801039c:	4652      	mov	r2, sl
 801039e:	4631      	mov	r1, r6
 80103a0:	4628      	mov	r0, r5
 80103a2:	47b8      	blx	r7
 80103a4:	3001      	adds	r0, #1
 80103a6:	f43f af01 	beq.w	80101ac <_printf_float+0x9c>
 80103aa:	f109 0901 	add.w	r9, r9, #1
 80103ae:	e7ee      	b.n	801038e <_printf_float+0x27e>
 80103b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103b4:	429a      	cmp	r2, r3
 80103b6:	bfa8      	it	ge
 80103b8:	461a      	movge	r2, r3
 80103ba:	2a00      	cmp	r2, #0
 80103bc:	4691      	mov	r9, r2
 80103be:	dd07      	ble.n	80103d0 <_printf_float+0x2c0>
 80103c0:	4613      	mov	r3, r2
 80103c2:	4631      	mov	r1, r6
 80103c4:	4642      	mov	r2, r8
 80103c6:	4628      	mov	r0, r5
 80103c8:	47b8      	blx	r7
 80103ca:	3001      	adds	r0, #1
 80103cc:	f43f aeee 	beq.w	80101ac <_printf_float+0x9c>
 80103d0:	f104 031a 	add.w	r3, r4, #26
 80103d4:	f04f 0a00 	mov.w	sl, #0
 80103d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103dc:	9307      	str	r3, [sp, #28]
 80103de:	e017      	b.n	8010410 <_printf_float+0x300>
 80103e0:	ffffffff 	.word	0xffffffff
 80103e4:	7fefffff 	.word	0x7fefffff
 80103e8:	08015178 	.word	0x08015178
 80103ec:	08015174 	.word	0x08015174
 80103f0:	08015180 	.word	0x08015180
 80103f4:	0801517c 	.word	0x0801517c
 80103f8:	080153a3 	.word	0x080153a3
 80103fc:	2301      	movs	r3, #1
 80103fe:	9a07      	ldr	r2, [sp, #28]
 8010400:	4631      	mov	r1, r6
 8010402:	4628      	mov	r0, r5
 8010404:	47b8      	blx	r7
 8010406:	3001      	adds	r0, #1
 8010408:	f43f aed0 	beq.w	80101ac <_printf_float+0x9c>
 801040c:	f10a 0a01 	add.w	sl, sl, #1
 8010410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010412:	9306      	str	r3, [sp, #24]
 8010414:	eba3 0309 	sub.w	r3, r3, r9
 8010418:	4553      	cmp	r3, sl
 801041a:	dcef      	bgt.n	80103fc <_printf_float+0x2ec>
 801041c:	9b06      	ldr	r3, [sp, #24]
 801041e:	4498      	add	r8, r3
 8010420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010424:	429a      	cmp	r2, r3
 8010426:	db15      	blt.n	8010454 <_printf_float+0x344>
 8010428:	6823      	ldr	r3, [r4, #0]
 801042a:	07da      	lsls	r2, r3, #31
 801042c:	d412      	bmi.n	8010454 <_printf_float+0x344>
 801042e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010430:	9a06      	ldr	r2, [sp, #24]
 8010432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010434:	1a9a      	subs	r2, r3, r2
 8010436:	eba3 0a01 	sub.w	sl, r3, r1
 801043a:	4592      	cmp	sl, r2
 801043c:	bfa8      	it	ge
 801043e:	4692      	movge	sl, r2
 8010440:	f1ba 0f00 	cmp.w	sl, #0
 8010444:	dc0e      	bgt.n	8010464 <_printf_float+0x354>
 8010446:	f04f 0800 	mov.w	r8, #0
 801044a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801044e:	f104 091a 	add.w	r9, r4, #26
 8010452:	e019      	b.n	8010488 <_printf_float+0x378>
 8010454:	9b05      	ldr	r3, [sp, #20]
 8010456:	465a      	mov	r2, fp
 8010458:	4631      	mov	r1, r6
 801045a:	4628      	mov	r0, r5
 801045c:	47b8      	blx	r7
 801045e:	3001      	adds	r0, #1
 8010460:	d1e5      	bne.n	801042e <_printf_float+0x31e>
 8010462:	e6a3      	b.n	80101ac <_printf_float+0x9c>
 8010464:	4653      	mov	r3, sl
 8010466:	4642      	mov	r2, r8
 8010468:	4631      	mov	r1, r6
 801046a:	4628      	mov	r0, r5
 801046c:	47b8      	blx	r7
 801046e:	3001      	adds	r0, #1
 8010470:	d1e9      	bne.n	8010446 <_printf_float+0x336>
 8010472:	e69b      	b.n	80101ac <_printf_float+0x9c>
 8010474:	2301      	movs	r3, #1
 8010476:	464a      	mov	r2, r9
 8010478:	4631      	mov	r1, r6
 801047a:	4628      	mov	r0, r5
 801047c:	47b8      	blx	r7
 801047e:	3001      	adds	r0, #1
 8010480:	f43f ae94 	beq.w	80101ac <_printf_float+0x9c>
 8010484:	f108 0801 	add.w	r8, r8, #1
 8010488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801048c:	1a9b      	subs	r3, r3, r2
 801048e:	eba3 030a 	sub.w	r3, r3, sl
 8010492:	4543      	cmp	r3, r8
 8010494:	dcee      	bgt.n	8010474 <_printf_float+0x364>
 8010496:	e747      	b.n	8010328 <_printf_float+0x218>
 8010498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801049a:	2a01      	cmp	r2, #1
 801049c:	dc01      	bgt.n	80104a2 <_printf_float+0x392>
 801049e:	07db      	lsls	r3, r3, #31
 80104a0:	d539      	bpl.n	8010516 <_printf_float+0x406>
 80104a2:	2301      	movs	r3, #1
 80104a4:	4642      	mov	r2, r8
 80104a6:	4631      	mov	r1, r6
 80104a8:	4628      	mov	r0, r5
 80104aa:	47b8      	blx	r7
 80104ac:	3001      	adds	r0, #1
 80104ae:	f43f ae7d 	beq.w	80101ac <_printf_float+0x9c>
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	465a      	mov	r2, fp
 80104b6:	4631      	mov	r1, r6
 80104b8:	4628      	mov	r0, r5
 80104ba:	47b8      	blx	r7
 80104bc:	3001      	adds	r0, #1
 80104be:	f108 0801 	add.w	r8, r8, #1
 80104c2:	f43f ae73 	beq.w	80101ac <_printf_float+0x9c>
 80104c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80104ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80104d8:	d018      	beq.n	801050c <_printf_float+0x3fc>
 80104da:	4642      	mov	r2, r8
 80104dc:	4631      	mov	r1, r6
 80104de:	4628      	mov	r0, r5
 80104e0:	47b8      	blx	r7
 80104e2:	3001      	adds	r0, #1
 80104e4:	d10e      	bne.n	8010504 <_printf_float+0x3f4>
 80104e6:	e661      	b.n	80101ac <_printf_float+0x9c>
 80104e8:	2301      	movs	r3, #1
 80104ea:	464a      	mov	r2, r9
 80104ec:	4631      	mov	r1, r6
 80104ee:	4628      	mov	r0, r5
 80104f0:	47b8      	blx	r7
 80104f2:	3001      	adds	r0, #1
 80104f4:	f43f ae5a 	beq.w	80101ac <_printf_float+0x9c>
 80104f8:	f108 0801 	add.w	r8, r8, #1
 80104fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104fe:	3b01      	subs	r3, #1
 8010500:	4543      	cmp	r3, r8
 8010502:	dcf1      	bgt.n	80104e8 <_printf_float+0x3d8>
 8010504:	4653      	mov	r3, sl
 8010506:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801050a:	e6dd      	b.n	80102c8 <_printf_float+0x1b8>
 801050c:	f04f 0800 	mov.w	r8, #0
 8010510:	f104 091a 	add.w	r9, r4, #26
 8010514:	e7f2      	b.n	80104fc <_printf_float+0x3ec>
 8010516:	2301      	movs	r3, #1
 8010518:	e7df      	b.n	80104da <_printf_float+0x3ca>
 801051a:	2301      	movs	r3, #1
 801051c:	464a      	mov	r2, r9
 801051e:	4631      	mov	r1, r6
 8010520:	4628      	mov	r0, r5
 8010522:	47b8      	blx	r7
 8010524:	3001      	adds	r0, #1
 8010526:	f43f ae41 	beq.w	80101ac <_printf_float+0x9c>
 801052a:	f108 0801 	add.w	r8, r8, #1
 801052e:	68e3      	ldr	r3, [r4, #12]
 8010530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010532:	1a9b      	subs	r3, r3, r2
 8010534:	4543      	cmp	r3, r8
 8010536:	dcf0      	bgt.n	801051a <_printf_float+0x40a>
 8010538:	e6fa      	b.n	8010330 <_printf_float+0x220>
 801053a:	f04f 0800 	mov.w	r8, #0
 801053e:	f104 0919 	add.w	r9, r4, #25
 8010542:	e7f4      	b.n	801052e <_printf_float+0x41e>
 8010544:	2900      	cmp	r1, #0
 8010546:	f43f ae8a 	beq.w	801025e <_printf_float+0x14e>
 801054a:	f04f 0c00 	mov.w	ip, #0
 801054e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010552:	e9cd 0900 	strd	r0, r9, [sp]
 8010556:	6022      	str	r2, [r4, #0]
 8010558:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801055c:	4628      	mov	r0, r5
 801055e:	f7ff fd4f 	bl	8010000 <__cvt>
 8010562:	4680      	mov	r8, r0
 8010564:	e64a      	b.n	80101fc <_printf_float+0xec>
 8010566:	bf00      	nop

08010568 <_printf_common>:
 8010568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801056c:	4691      	mov	r9, r2
 801056e:	461f      	mov	r7, r3
 8010570:	688a      	ldr	r2, [r1, #8]
 8010572:	690b      	ldr	r3, [r1, #16]
 8010574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010578:	4293      	cmp	r3, r2
 801057a:	bfb8      	it	lt
 801057c:	4613      	movlt	r3, r2
 801057e:	f8c9 3000 	str.w	r3, [r9]
 8010582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010586:	4606      	mov	r6, r0
 8010588:	460c      	mov	r4, r1
 801058a:	b112      	cbz	r2, 8010592 <_printf_common+0x2a>
 801058c:	3301      	adds	r3, #1
 801058e:	f8c9 3000 	str.w	r3, [r9]
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	0699      	lsls	r1, r3, #26
 8010596:	bf42      	ittt	mi
 8010598:	f8d9 3000 	ldrmi.w	r3, [r9]
 801059c:	3302      	addmi	r3, #2
 801059e:	f8c9 3000 	strmi.w	r3, [r9]
 80105a2:	6825      	ldr	r5, [r4, #0]
 80105a4:	f015 0506 	ands.w	r5, r5, #6
 80105a8:	d107      	bne.n	80105ba <_printf_common+0x52>
 80105aa:	f104 0a19 	add.w	sl, r4, #25
 80105ae:	68e3      	ldr	r3, [r4, #12]
 80105b0:	f8d9 2000 	ldr.w	r2, [r9]
 80105b4:	1a9b      	subs	r3, r3, r2
 80105b6:	42ab      	cmp	r3, r5
 80105b8:	dc28      	bgt.n	801060c <_printf_common+0xa4>
 80105ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80105be:	6822      	ldr	r2, [r4, #0]
 80105c0:	3300      	adds	r3, #0
 80105c2:	bf18      	it	ne
 80105c4:	2301      	movne	r3, #1
 80105c6:	0692      	lsls	r2, r2, #26
 80105c8:	d42d      	bmi.n	8010626 <_printf_common+0xbe>
 80105ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105ce:	4639      	mov	r1, r7
 80105d0:	4630      	mov	r0, r6
 80105d2:	47c0      	blx	r8
 80105d4:	3001      	adds	r0, #1
 80105d6:	d020      	beq.n	801061a <_printf_common+0xb2>
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	68e5      	ldr	r5, [r4, #12]
 80105dc:	f8d9 2000 	ldr.w	r2, [r9]
 80105e0:	f003 0306 	and.w	r3, r3, #6
 80105e4:	2b04      	cmp	r3, #4
 80105e6:	bf08      	it	eq
 80105e8:	1aad      	subeq	r5, r5, r2
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	6922      	ldr	r2, [r4, #16]
 80105ee:	bf0c      	ite	eq
 80105f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105f4:	2500      	movne	r5, #0
 80105f6:	4293      	cmp	r3, r2
 80105f8:	bfc4      	itt	gt
 80105fa:	1a9b      	subgt	r3, r3, r2
 80105fc:	18ed      	addgt	r5, r5, r3
 80105fe:	f04f 0900 	mov.w	r9, #0
 8010602:	341a      	adds	r4, #26
 8010604:	454d      	cmp	r5, r9
 8010606:	d11a      	bne.n	801063e <_printf_common+0xd6>
 8010608:	2000      	movs	r0, #0
 801060a:	e008      	b.n	801061e <_printf_common+0xb6>
 801060c:	2301      	movs	r3, #1
 801060e:	4652      	mov	r2, sl
 8010610:	4639      	mov	r1, r7
 8010612:	4630      	mov	r0, r6
 8010614:	47c0      	blx	r8
 8010616:	3001      	adds	r0, #1
 8010618:	d103      	bne.n	8010622 <_printf_common+0xba>
 801061a:	f04f 30ff 	mov.w	r0, #4294967295
 801061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010622:	3501      	adds	r5, #1
 8010624:	e7c3      	b.n	80105ae <_printf_common+0x46>
 8010626:	18e1      	adds	r1, r4, r3
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	2030      	movs	r0, #48	; 0x30
 801062c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010630:	4422      	add	r2, r4
 8010632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801063a:	3302      	adds	r3, #2
 801063c:	e7c5      	b.n	80105ca <_printf_common+0x62>
 801063e:	2301      	movs	r3, #1
 8010640:	4622      	mov	r2, r4
 8010642:	4639      	mov	r1, r7
 8010644:	4630      	mov	r0, r6
 8010646:	47c0      	blx	r8
 8010648:	3001      	adds	r0, #1
 801064a:	d0e6      	beq.n	801061a <_printf_common+0xb2>
 801064c:	f109 0901 	add.w	r9, r9, #1
 8010650:	e7d8      	b.n	8010604 <_printf_common+0x9c>
	...

08010654 <_printf_i>:
 8010654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010658:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801065c:	460c      	mov	r4, r1
 801065e:	7e09      	ldrb	r1, [r1, #24]
 8010660:	b085      	sub	sp, #20
 8010662:	296e      	cmp	r1, #110	; 0x6e
 8010664:	4617      	mov	r7, r2
 8010666:	4606      	mov	r6, r0
 8010668:	4698      	mov	r8, r3
 801066a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801066c:	f000 80b3 	beq.w	80107d6 <_printf_i+0x182>
 8010670:	d822      	bhi.n	80106b8 <_printf_i+0x64>
 8010672:	2963      	cmp	r1, #99	; 0x63
 8010674:	d036      	beq.n	80106e4 <_printf_i+0x90>
 8010676:	d80a      	bhi.n	801068e <_printf_i+0x3a>
 8010678:	2900      	cmp	r1, #0
 801067a:	f000 80b9 	beq.w	80107f0 <_printf_i+0x19c>
 801067e:	2958      	cmp	r1, #88	; 0x58
 8010680:	f000 8083 	beq.w	801078a <_printf_i+0x136>
 8010684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010688:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801068c:	e032      	b.n	80106f4 <_printf_i+0xa0>
 801068e:	2964      	cmp	r1, #100	; 0x64
 8010690:	d001      	beq.n	8010696 <_printf_i+0x42>
 8010692:	2969      	cmp	r1, #105	; 0x69
 8010694:	d1f6      	bne.n	8010684 <_printf_i+0x30>
 8010696:	6820      	ldr	r0, [r4, #0]
 8010698:	6813      	ldr	r3, [r2, #0]
 801069a:	0605      	lsls	r5, r0, #24
 801069c:	f103 0104 	add.w	r1, r3, #4
 80106a0:	d52a      	bpl.n	80106f8 <_printf_i+0xa4>
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	6011      	str	r1, [r2, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	da03      	bge.n	80106b2 <_printf_i+0x5e>
 80106aa:	222d      	movs	r2, #45	; 0x2d
 80106ac:	425b      	negs	r3, r3
 80106ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80106b2:	486f      	ldr	r0, [pc, #444]	; (8010870 <_printf_i+0x21c>)
 80106b4:	220a      	movs	r2, #10
 80106b6:	e039      	b.n	801072c <_printf_i+0xd8>
 80106b8:	2973      	cmp	r1, #115	; 0x73
 80106ba:	f000 809d 	beq.w	80107f8 <_printf_i+0x1a4>
 80106be:	d808      	bhi.n	80106d2 <_printf_i+0x7e>
 80106c0:	296f      	cmp	r1, #111	; 0x6f
 80106c2:	d020      	beq.n	8010706 <_printf_i+0xb2>
 80106c4:	2970      	cmp	r1, #112	; 0x70
 80106c6:	d1dd      	bne.n	8010684 <_printf_i+0x30>
 80106c8:	6823      	ldr	r3, [r4, #0]
 80106ca:	f043 0320 	orr.w	r3, r3, #32
 80106ce:	6023      	str	r3, [r4, #0]
 80106d0:	e003      	b.n	80106da <_printf_i+0x86>
 80106d2:	2975      	cmp	r1, #117	; 0x75
 80106d4:	d017      	beq.n	8010706 <_printf_i+0xb2>
 80106d6:	2978      	cmp	r1, #120	; 0x78
 80106d8:	d1d4      	bne.n	8010684 <_printf_i+0x30>
 80106da:	2378      	movs	r3, #120	; 0x78
 80106dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106e0:	4864      	ldr	r0, [pc, #400]	; (8010874 <_printf_i+0x220>)
 80106e2:	e055      	b.n	8010790 <_printf_i+0x13c>
 80106e4:	6813      	ldr	r3, [r2, #0]
 80106e6:	1d19      	adds	r1, r3, #4
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	6011      	str	r1, [r2, #0]
 80106ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106f4:	2301      	movs	r3, #1
 80106f6:	e08c      	b.n	8010812 <_printf_i+0x1be>
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	6011      	str	r1, [r2, #0]
 80106fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010700:	bf18      	it	ne
 8010702:	b21b      	sxthne	r3, r3
 8010704:	e7cf      	b.n	80106a6 <_printf_i+0x52>
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	6825      	ldr	r5, [r4, #0]
 801070a:	1d18      	adds	r0, r3, #4
 801070c:	6010      	str	r0, [r2, #0]
 801070e:	0628      	lsls	r0, r5, #24
 8010710:	d501      	bpl.n	8010716 <_printf_i+0xc2>
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	e002      	b.n	801071c <_printf_i+0xc8>
 8010716:	0668      	lsls	r0, r5, #25
 8010718:	d5fb      	bpl.n	8010712 <_printf_i+0xbe>
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	4854      	ldr	r0, [pc, #336]	; (8010870 <_printf_i+0x21c>)
 801071e:	296f      	cmp	r1, #111	; 0x6f
 8010720:	bf14      	ite	ne
 8010722:	220a      	movne	r2, #10
 8010724:	2208      	moveq	r2, #8
 8010726:	2100      	movs	r1, #0
 8010728:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801072c:	6865      	ldr	r5, [r4, #4]
 801072e:	60a5      	str	r5, [r4, #8]
 8010730:	2d00      	cmp	r5, #0
 8010732:	f2c0 8095 	blt.w	8010860 <_printf_i+0x20c>
 8010736:	6821      	ldr	r1, [r4, #0]
 8010738:	f021 0104 	bic.w	r1, r1, #4
 801073c:	6021      	str	r1, [r4, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d13d      	bne.n	80107be <_printf_i+0x16a>
 8010742:	2d00      	cmp	r5, #0
 8010744:	f040 808e 	bne.w	8010864 <_printf_i+0x210>
 8010748:	4665      	mov	r5, ip
 801074a:	2a08      	cmp	r2, #8
 801074c:	d10b      	bne.n	8010766 <_printf_i+0x112>
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	07db      	lsls	r3, r3, #31
 8010752:	d508      	bpl.n	8010766 <_printf_i+0x112>
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	6862      	ldr	r2, [r4, #4]
 8010758:	429a      	cmp	r2, r3
 801075a:	bfde      	ittt	le
 801075c:	2330      	movle	r3, #48	; 0x30
 801075e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010762:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010766:	ebac 0305 	sub.w	r3, ip, r5
 801076a:	6123      	str	r3, [r4, #16]
 801076c:	f8cd 8000 	str.w	r8, [sp]
 8010770:	463b      	mov	r3, r7
 8010772:	aa03      	add	r2, sp, #12
 8010774:	4621      	mov	r1, r4
 8010776:	4630      	mov	r0, r6
 8010778:	f7ff fef6 	bl	8010568 <_printf_common>
 801077c:	3001      	adds	r0, #1
 801077e:	d14d      	bne.n	801081c <_printf_i+0x1c8>
 8010780:	f04f 30ff 	mov.w	r0, #4294967295
 8010784:	b005      	add	sp, #20
 8010786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801078a:	4839      	ldr	r0, [pc, #228]	; (8010870 <_printf_i+0x21c>)
 801078c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010790:	6813      	ldr	r3, [r2, #0]
 8010792:	6821      	ldr	r1, [r4, #0]
 8010794:	1d1d      	adds	r5, r3, #4
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6015      	str	r5, [r2, #0]
 801079a:	060a      	lsls	r2, r1, #24
 801079c:	d50b      	bpl.n	80107b6 <_printf_i+0x162>
 801079e:	07ca      	lsls	r2, r1, #31
 80107a0:	bf44      	itt	mi
 80107a2:	f041 0120 	orrmi.w	r1, r1, #32
 80107a6:	6021      	strmi	r1, [r4, #0]
 80107a8:	b91b      	cbnz	r3, 80107b2 <_printf_i+0x15e>
 80107aa:	6822      	ldr	r2, [r4, #0]
 80107ac:	f022 0220 	bic.w	r2, r2, #32
 80107b0:	6022      	str	r2, [r4, #0]
 80107b2:	2210      	movs	r2, #16
 80107b4:	e7b7      	b.n	8010726 <_printf_i+0xd2>
 80107b6:	064d      	lsls	r5, r1, #25
 80107b8:	bf48      	it	mi
 80107ba:	b29b      	uxthmi	r3, r3
 80107bc:	e7ef      	b.n	801079e <_printf_i+0x14a>
 80107be:	4665      	mov	r5, ip
 80107c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80107c4:	fb02 3311 	mls	r3, r2, r1, r3
 80107c8:	5cc3      	ldrb	r3, [r0, r3]
 80107ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80107ce:	460b      	mov	r3, r1
 80107d0:	2900      	cmp	r1, #0
 80107d2:	d1f5      	bne.n	80107c0 <_printf_i+0x16c>
 80107d4:	e7b9      	b.n	801074a <_printf_i+0xf6>
 80107d6:	6813      	ldr	r3, [r2, #0]
 80107d8:	6825      	ldr	r5, [r4, #0]
 80107da:	6961      	ldr	r1, [r4, #20]
 80107dc:	1d18      	adds	r0, r3, #4
 80107de:	6010      	str	r0, [r2, #0]
 80107e0:	0628      	lsls	r0, r5, #24
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	d501      	bpl.n	80107ea <_printf_i+0x196>
 80107e6:	6019      	str	r1, [r3, #0]
 80107e8:	e002      	b.n	80107f0 <_printf_i+0x19c>
 80107ea:	066a      	lsls	r2, r5, #25
 80107ec:	d5fb      	bpl.n	80107e6 <_printf_i+0x192>
 80107ee:	8019      	strh	r1, [r3, #0]
 80107f0:	2300      	movs	r3, #0
 80107f2:	6123      	str	r3, [r4, #16]
 80107f4:	4665      	mov	r5, ip
 80107f6:	e7b9      	b.n	801076c <_printf_i+0x118>
 80107f8:	6813      	ldr	r3, [r2, #0]
 80107fa:	1d19      	adds	r1, r3, #4
 80107fc:	6011      	str	r1, [r2, #0]
 80107fe:	681d      	ldr	r5, [r3, #0]
 8010800:	6862      	ldr	r2, [r4, #4]
 8010802:	2100      	movs	r1, #0
 8010804:	4628      	mov	r0, r5
 8010806:	f7ef fd23 	bl	8000250 <memchr>
 801080a:	b108      	cbz	r0, 8010810 <_printf_i+0x1bc>
 801080c:	1b40      	subs	r0, r0, r5
 801080e:	6060      	str	r0, [r4, #4]
 8010810:	6863      	ldr	r3, [r4, #4]
 8010812:	6123      	str	r3, [r4, #16]
 8010814:	2300      	movs	r3, #0
 8010816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801081a:	e7a7      	b.n	801076c <_printf_i+0x118>
 801081c:	6923      	ldr	r3, [r4, #16]
 801081e:	462a      	mov	r2, r5
 8010820:	4639      	mov	r1, r7
 8010822:	4630      	mov	r0, r6
 8010824:	47c0      	blx	r8
 8010826:	3001      	adds	r0, #1
 8010828:	d0aa      	beq.n	8010780 <_printf_i+0x12c>
 801082a:	6823      	ldr	r3, [r4, #0]
 801082c:	079b      	lsls	r3, r3, #30
 801082e:	d413      	bmi.n	8010858 <_printf_i+0x204>
 8010830:	68e0      	ldr	r0, [r4, #12]
 8010832:	9b03      	ldr	r3, [sp, #12]
 8010834:	4298      	cmp	r0, r3
 8010836:	bfb8      	it	lt
 8010838:	4618      	movlt	r0, r3
 801083a:	e7a3      	b.n	8010784 <_printf_i+0x130>
 801083c:	2301      	movs	r3, #1
 801083e:	464a      	mov	r2, r9
 8010840:	4639      	mov	r1, r7
 8010842:	4630      	mov	r0, r6
 8010844:	47c0      	blx	r8
 8010846:	3001      	adds	r0, #1
 8010848:	d09a      	beq.n	8010780 <_printf_i+0x12c>
 801084a:	3501      	adds	r5, #1
 801084c:	68e3      	ldr	r3, [r4, #12]
 801084e:	9a03      	ldr	r2, [sp, #12]
 8010850:	1a9b      	subs	r3, r3, r2
 8010852:	42ab      	cmp	r3, r5
 8010854:	dcf2      	bgt.n	801083c <_printf_i+0x1e8>
 8010856:	e7eb      	b.n	8010830 <_printf_i+0x1dc>
 8010858:	2500      	movs	r5, #0
 801085a:	f104 0919 	add.w	r9, r4, #25
 801085e:	e7f5      	b.n	801084c <_printf_i+0x1f8>
 8010860:	2b00      	cmp	r3, #0
 8010862:	d1ac      	bne.n	80107be <_printf_i+0x16a>
 8010864:	7803      	ldrb	r3, [r0, #0]
 8010866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801086a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801086e:	e76c      	b.n	801074a <_printf_i+0xf6>
 8010870:	08015184 	.word	0x08015184
 8010874:	08015195 	.word	0x08015195

08010878 <_scanf_float>:
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	469a      	mov	sl, r3
 801087e:	688b      	ldr	r3, [r1, #8]
 8010880:	4616      	mov	r6, r2
 8010882:	1e5a      	subs	r2, r3, #1
 8010884:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010888:	b087      	sub	sp, #28
 801088a:	bf83      	ittte	hi
 801088c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010890:	189b      	addhi	r3, r3, r2
 8010892:	9301      	strhi	r3, [sp, #4]
 8010894:	2300      	movls	r3, #0
 8010896:	bf86      	itte	hi
 8010898:	f240 135d 	movwhi	r3, #349	; 0x15d
 801089c:	608b      	strhi	r3, [r1, #8]
 801089e:	9301      	strls	r3, [sp, #4]
 80108a0:	680b      	ldr	r3, [r1, #0]
 80108a2:	4688      	mov	r8, r1
 80108a4:	f04f 0b00 	mov.w	fp, #0
 80108a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80108ac:	f848 3b1c 	str.w	r3, [r8], #28
 80108b0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80108b4:	4607      	mov	r7, r0
 80108b6:	460c      	mov	r4, r1
 80108b8:	4645      	mov	r5, r8
 80108ba:	465a      	mov	r2, fp
 80108bc:	46d9      	mov	r9, fp
 80108be:	f8cd b008 	str.w	fp, [sp, #8]
 80108c2:	68a1      	ldr	r1, [r4, #8]
 80108c4:	b181      	cbz	r1, 80108e8 <_scanf_float+0x70>
 80108c6:	6833      	ldr	r3, [r6, #0]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b49      	cmp	r3, #73	; 0x49
 80108cc:	d071      	beq.n	80109b2 <_scanf_float+0x13a>
 80108ce:	d84d      	bhi.n	801096c <_scanf_float+0xf4>
 80108d0:	2b39      	cmp	r3, #57	; 0x39
 80108d2:	d840      	bhi.n	8010956 <_scanf_float+0xde>
 80108d4:	2b31      	cmp	r3, #49	; 0x31
 80108d6:	f080 8088 	bcs.w	80109ea <_scanf_float+0x172>
 80108da:	2b2d      	cmp	r3, #45	; 0x2d
 80108dc:	f000 8090 	beq.w	8010a00 <_scanf_float+0x188>
 80108e0:	d815      	bhi.n	801090e <_scanf_float+0x96>
 80108e2:	2b2b      	cmp	r3, #43	; 0x2b
 80108e4:	f000 808c 	beq.w	8010a00 <_scanf_float+0x188>
 80108e8:	f1b9 0f00 	cmp.w	r9, #0
 80108ec:	d003      	beq.n	80108f6 <_scanf_float+0x7e>
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	3a01      	subs	r2, #1
 80108f8:	2a01      	cmp	r2, #1
 80108fa:	f200 80ea 	bhi.w	8010ad2 <_scanf_float+0x25a>
 80108fe:	4545      	cmp	r5, r8
 8010900:	f200 80dc 	bhi.w	8010abc <_scanf_float+0x244>
 8010904:	2601      	movs	r6, #1
 8010906:	4630      	mov	r0, r6
 8010908:	b007      	add	sp, #28
 801090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090e:	2b2e      	cmp	r3, #46	; 0x2e
 8010910:	f000 809f 	beq.w	8010a52 <_scanf_float+0x1da>
 8010914:	2b30      	cmp	r3, #48	; 0x30
 8010916:	d1e7      	bne.n	80108e8 <_scanf_float+0x70>
 8010918:	6820      	ldr	r0, [r4, #0]
 801091a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801091e:	d064      	beq.n	80109ea <_scanf_float+0x172>
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010926:	6020      	str	r0, [r4, #0]
 8010928:	f109 0901 	add.w	r9, r9, #1
 801092c:	b11b      	cbz	r3, 8010936 <_scanf_float+0xbe>
 801092e:	3b01      	subs	r3, #1
 8010930:	3101      	adds	r1, #1
 8010932:	9301      	str	r3, [sp, #4]
 8010934:	60a1      	str	r1, [r4, #8]
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	3b01      	subs	r3, #1
 801093a:	60a3      	str	r3, [r4, #8]
 801093c:	6923      	ldr	r3, [r4, #16]
 801093e:	3301      	adds	r3, #1
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	6873      	ldr	r3, [r6, #4]
 8010944:	3b01      	subs	r3, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	6073      	str	r3, [r6, #4]
 801094a:	f340 80ac 	ble.w	8010aa6 <_scanf_float+0x22e>
 801094e:	6833      	ldr	r3, [r6, #0]
 8010950:	3301      	adds	r3, #1
 8010952:	6033      	str	r3, [r6, #0]
 8010954:	e7b5      	b.n	80108c2 <_scanf_float+0x4a>
 8010956:	2b45      	cmp	r3, #69	; 0x45
 8010958:	f000 8085 	beq.w	8010a66 <_scanf_float+0x1ee>
 801095c:	2b46      	cmp	r3, #70	; 0x46
 801095e:	d06a      	beq.n	8010a36 <_scanf_float+0x1be>
 8010960:	2b41      	cmp	r3, #65	; 0x41
 8010962:	d1c1      	bne.n	80108e8 <_scanf_float+0x70>
 8010964:	2a01      	cmp	r2, #1
 8010966:	d1bf      	bne.n	80108e8 <_scanf_float+0x70>
 8010968:	2202      	movs	r2, #2
 801096a:	e046      	b.n	80109fa <_scanf_float+0x182>
 801096c:	2b65      	cmp	r3, #101	; 0x65
 801096e:	d07a      	beq.n	8010a66 <_scanf_float+0x1ee>
 8010970:	d818      	bhi.n	80109a4 <_scanf_float+0x12c>
 8010972:	2b54      	cmp	r3, #84	; 0x54
 8010974:	d066      	beq.n	8010a44 <_scanf_float+0x1cc>
 8010976:	d811      	bhi.n	801099c <_scanf_float+0x124>
 8010978:	2b4e      	cmp	r3, #78	; 0x4e
 801097a:	d1b5      	bne.n	80108e8 <_scanf_float+0x70>
 801097c:	2a00      	cmp	r2, #0
 801097e:	d146      	bne.n	8010a0e <_scanf_float+0x196>
 8010980:	f1b9 0f00 	cmp.w	r9, #0
 8010984:	d145      	bne.n	8010a12 <_scanf_float+0x19a>
 8010986:	6821      	ldr	r1, [r4, #0]
 8010988:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801098c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010990:	d13f      	bne.n	8010a12 <_scanf_float+0x19a>
 8010992:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010996:	6021      	str	r1, [r4, #0]
 8010998:	2201      	movs	r2, #1
 801099a:	e02e      	b.n	80109fa <_scanf_float+0x182>
 801099c:	2b59      	cmp	r3, #89	; 0x59
 801099e:	d01e      	beq.n	80109de <_scanf_float+0x166>
 80109a0:	2b61      	cmp	r3, #97	; 0x61
 80109a2:	e7de      	b.n	8010962 <_scanf_float+0xea>
 80109a4:	2b6e      	cmp	r3, #110	; 0x6e
 80109a6:	d0e9      	beq.n	801097c <_scanf_float+0x104>
 80109a8:	d815      	bhi.n	80109d6 <_scanf_float+0x15e>
 80109aa:	2b66      	cmp	r3, #102	; 0x66
 80109ac:	d043      	beq.n	8010a36 <_scanf_float+0x1be>
 80109ae:	2b69      	cmp	r3, #105	; 0x69
 80109b0:	d19a      	bne.n	80108e8 <_scanf_float+0x70>
 80109b2:	f1bb 0f00 	cmp.w	fp, #0
 80109b6:	d138      	bne.n	8010a2a <_scanf_float+0x1b2>
 80109b8:	f1b9 0f00 	cmp.w	r9, #0
 80109bc:	d197      	bne.n	80108ee <_scanf_float+0x76>
 80109be:	6821      	ldr	r1, [r4, #0]
 80109c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80109c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80109c8:	d195      	bne.n	80108f6 <_scanf_float+0x7e>
 80109ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80109ce:	6021      	str	r1, [r4, #0]
 80109d0:	f04f 0b01 	mov.w	fp, #1
 80109d4:	e011      	b.n	80109fa <_scanf_float+0x182>
 80109d6:	2b74      	cmp	r3, #116	; 0x74
 80109d8:	d034      	beq.n	8010a44 <_scanf_float+0x1cc>
 80109da:	2b79      	cmp	r3, #121	; 0x79
 80109dc:	d184      	bne.n	80108e8 <_scanf_float+0x70>
 80109de:	f1bb 0f07 	cmp.w	fp, #7
 80109e2:	d181      	bne.n	80108e8 <_scanf_float+0x70>
 80109e4:	f04f 0b08 	mov.w	fp, #8
 80109e8:	e007      	b.n	80109fa <_scanf_float+0x182>
 80109ea:	eb12 0f0b 	cmn.w	r2, fp
 80109ee:	f47f af7b 	bne.w	80108e8 <_scanf_float+0x70>
 80109f2:	6821      	ldr	r1, [r4, #0]
 80109f4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80109f8:	6021      	str	r1, [r4, #0]
 80109fa:	702b      	strb	r3, [r5, #0]
 80109fc:	3501      	adds	r5, #1
 80109fe:	e79a      	b.n	8010936 <_scanf_float+0xbe>
 8010a00:	6821      	ldr	r1, [r4, #0]
 8010a02:	0608      	lsls	r0, r1, #24
 8010a04:	f57f af70 	bpl.w	80108e8 <_scanf_float+0x70>
 8010a08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010a0c:	e7f4      	b.n	80109f8 <_scanf_float+0x180>
 8010a0e:	2a02      	cmp	r2, #2
 8010a10:	d047      	beq.n	8010aa2 <_scanf_float+0x22a>
 8010a12:	f1bb 0f01 	cmp.w	fp, #1
 8010a16:	d003      	beq.n	8010a20 <_scanf_float+0x1a8>
 8010a18:	f1bb 0f04 	cmp.w	fp, #4
 8010a1c:	f47f af64 	bne.w	80108e8 <_scanf_float+0x70>
 8010a20:	f10b 0b01 	add.w	fp, fp, #1
 8010a24:	fa5f fb8b 	uxtb.w	fp, fp
 8010a28:	e7e7      	b.n	80109fa <_scanf_float+0x182>
 8010a2a:	f1bb 0f03 	cmp.w	fp, #3
 8010a2e:	d0f7      	beq.n	8010a20 <_scanf_float+0x1a8>
 8010a30:	f1bb 0f05 	cmp.w	fp, #5
 8010a34:	e7f2      	b.n	8010a1c <_scanf_float+0x1a4>
 8010a36:	f1bb 0f02 	cmp.w	fp, #2
 8010a3a:	f47f af55 	bne.w	80108e8 <_scanf_float+0x70>
 8010a3e:	f04f 0b03 	mov.w	fp, #3
 8010a42:	e7da      	b.n	80109fa <_scanf_float+0x182>
 8010a44:	f1bb 0f06 	cmp.w	fp, #6
 8010a48:	f47f af4e 	bne.w	80108e8 <_scanf_float+0x70>
 8010a4c:	f04f 0b07 	mov.w	fp, #7
 8010a50:	e7d3      	b.n	80109fa <_scanf_float+0x182>
 8010a52:	6821      	ldr	r1, [r4, #0]
 8010a54:	0588      	lsls	r0, r1, #22
 8010a56:	f57f af47 	bpl.w	80108e8 <_scanf_float+0x70>
 8010a5a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010a5e:	6021      	str	r1, [r4, #0]
 8010a60:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a64:	e7c9      	b.n	80109fa <_scanf_float+0x182>
 8010a66:	6821      	ldr	r1, [r4, #0]
 8010a68:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010a6c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010a70:	d006      	beq.n	8010a80 <_scanf_float+0x208>
 8010a72:	0548      	lsls	r0, r1, #21
 8010a74:	f57f af38 	bpl.w	80108e8 <_scanf_float+0x70>
 8010a78:	f1b9 0f00 	cmp.w	r9, #0
 8010a7c:	f43f af3b 	beq.w	80108f6 <_scanf_float+0x7e>
 8010a80:	0588      	lsls	r0, r1, #22
 8010a82:	bf58      	it	pl
 8010a84:	9802      	ldrpl	r0, [sp, #8]
 8010a86:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010a8a:	bf58      	it	pl
 8010a8c:	eba9 0000 	subpl.w	r0, r9, r0
 8010a90:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010a94:	bf58      	it	pl
 8010a96:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010a9a:	6021      	str	r1, [r4, #0]
 8010a9c:	f04f 0900 	mov.w	r9, #0
 8010aa0:	e7ab      	b.n	80109fa <_scanf_float+0x182>
 8010aa2:	2203      	movs	r2, #3
 8010aa4:	e7a9      	b.n	80109fa <_scanf_float+0x182>
 8010aa6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010aaa:	9205      	str	r2, [sp, #20]
 8010aac:	4631      	mov	r1, r6
 8010aae:	4638      	mov	r0, r7
 8010ab0:	4798      	blx	r3
 8010ab2:	9a05      	ldr	r2, [sp, #20]
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	f43f af04 	beq.w	80108c2 <_scanf_float+0x4a>
 8010aba:	e715      	b.n	80108e8 <_scanf_float+0x70>
 8010abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ac0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ac4:	4632      	mov	r2, r6
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	4798      	blx	r3
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	3b01      	subs	r3, #1
 8010ace:	6123      	str	r3, [r4, #16]
 8010ad0:	e715      	b.n	80108fe <_scanf_float+0x86>
 8010ad2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010ad6:	2b06      	cmp	r3, #6
 8010ad8:	d80a      	bhi.n	8010af0 <_scanf_float+0x278>
 8010ada:	f1bb 0f02 	cmp.w	fp, #2
 8010ade:	d966      	bls.n	8010bae <_scanf_float+0x336>
 8010ae0:	f1ab 0b03 	sub.w	fp, fp, #3
 8010ae4:	fa5f fb8b 	uxtb.w	fp, fp
 8010ae8:	eba5 0b0b 	sub.w	fp, r5, fp
 8010aec:	455d      	cmp	r5, fp
 8010aee:	d149      	bne.n	8010b84 <_scanf_float+0x30c>
 8010af0:	6823      	ldr	r3, [r4, #0]
 8010af2:	05da      	lsls	r2, r3, #23
 8010af4:	d51f      	bpl.n	8010b36 <_scanf_float+0x2be>
 8010af6:	055b      	lsls	r3, r3, #21
 8010af8:	d466      	bmi.n	8010bc8 <_scanf_float+0x350>
 8010afa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010afe:	6923      	ldr	r3, [r4, #16]
 8010b00:	2965      	cmp	r1, #101	; 0x65
 8010b02:	f103 33ff 	add.w	r3, r3, #4294967295
 8010b06:	f105 3bff 	add.w	fp, r5, #4294967295
 8010b0a:	6123      	str	r3, [r4, #16]
 8010b0c:	d00d      	beq.n	8010b2a <_scanf_float+0x2b2>
 8010b0e:	2945      	cmp	r1, #69	; 0x45
 8010b10:	d00b      	beq.n	8010b2a <_scanf_float+0x2b2>
 8010b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b16:	4632      	mov	r2, r6
 8010b18:	4638      	mov	r0, r7
 8010b1a:	4798      	blx	r3
 8010b1c:	6923      	ldr	r3, [r4, #16]
 8010b1e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	f1a5 0b02 	sub.w	fp, r5, #2
 8010b28:	6123      	str	r3, [r4, #16]
 8010b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b2e:	4632      	mov	r2, r6
 8010b30:	4638      	mov	r0, r7
 8010b32:	4798      	blx	r3
 8010b34:	465d      	mov	r5, fp
 8010b36:	6826      	ldr	r6, [r4, #0]
 8010b38:	f016 0610 	ands.w	r6, r6, #16
 8010b3c:	d170      	bne.n	8010c20 <_scanf_float+0x3a8>
 8010b3e:	702e      	strb	r6, [r5, #0]
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b4a:	d140      	bne.n	8010bce <_scanf_float+0x356>
 8010b4c:	9b02      	ldr	r3, [sp, #8]
 8010b4e:	eba9 0303 	sub.w	r3, r9, r3
 8010b52:	425a      	negs	r2, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d147      	bne.n	8010be8 <_scanf_float+0x370>
 8010b58:	2200      	movs	r2, #0
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	4641      	mov	r1, r8
 8010b5e:	f000 ffb3 	bl	8011ac8 <_strtod_r>
 8010b62:	6820      	ldr	r0, [r4, #0]
 8010b64:	f8da 3000 	ldr.w	r3, [sl]
 8010b68:	f010 0f02 	tst.w	r0, #2
 8010b6c:	f103 0204 	add.w	r2, r3, #4
 8010b70:	f8ca 2000 	str.w	r2, [sl]
 8010b74:	d043      	beq.n	8010bfe <_scanf_float+0x386>
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	ed83 0b00 	vstr	d0, [r3]
 8010b7c:	68e3      	ldr	r3, [r4, #12]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	60e3      	str	r3, [r4, #12]
 8010b82:	e6c0      	b.n	8010906 <_scanf_float+0x8e>
 8010b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010b8c:	4632      	mov	r2, r6
 8010b8e:	4638      	mov	r0, r7
 8010b90:	4798      	blx	r3
 8010b92:	6923      	ldr	r3, [r4, #16]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	6123      	str	r3, [r4, #16]
 8010b98:	e7a8      	b.n	8010aec <_scanf_float+0x274>
 8010b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b9e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	4798      	blx	r3
 8010ba8:	6923      	ldr	r3, [r4, #16]
 8010baa:	3b01      	subs	r3, #1
 8010bac:	6123      	str	r3, [r4, #16]
 8010bae:	4545      	cmp	r5, r8
 8010bb0:	d8f3      	bhi.n	8010b9a <_scanf_float+0x322>
 8010bb2:	e6a7      	b.n	8010904 <_scanf_float+0x8c>
 8010bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	4798      	blx	r3
 8010bc2:	6923      	ldr	r3, [r4, #16]
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	6123      	str	r3, [r4, #16]
 8010bc8:	4545      	cmp	r5, r8
 8010bca:	d8f3      	bhi.n	8010bb4 <_scanf_float+0x33c>
 8010bcc:	e69a      	b.n	8010904 <_scanf_float+0x8c>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d0c1      	beq.n	8010b58 <_scanf_float+0x2e0>
 8010bd4:	9904      	ldr	r1, [sp, #16]
 8010bd6:	230a      	movs	r3, #10
 8010bd8:	4632      	mov	r2, r6
 8010bda:	3101      	adds	r1, #1
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f000 ffff 	bl	8011be0 <_strtol_r>
 8010be2:	9b03      	ldr	r3, [sp, #12]
 8010be4:	9d04      	ldr	r5, [sp, #16]
 8010be6:	1ac2      	subs	r2, r0, r3
 8010be8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010bec:	429d      	cmp	r5, r3
 8010bee:	bf28      	it	cs
 8010bf0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010bf4:	490b      	ldr	r1, [pc, #44]	; (8010c24 <_scanf_float+0x3ac>)
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	f000 f8f4 	bl	8010de4 <siprintf>
 8010bfc:	e7ac      	b.n	8010b58 <_scanf_float+0x2e0>
 8010bfe:	f010 0004 	ands.w	r0, r0, #4
 8010c02:	d1b8      	bne.n	8010b76 <_scanf_float+0x2fe>
 8010c04:	eeb4 0b40 	vcmp.f64	d0, d0
 8010c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0c:	681d      	ldr	r5, [r3, #0]
 8010c0e:	d704      	bvc.n	8010c1a <_scanf_float+0x3a2>
 8010c10:	f000 f89e 	bl	8010d50 <nanf>
 8010c14:	ed85 0a00 	vstr	s0, [r5]
 8010c18:	e7b0      	b.n	8010b7c <_scanf_float+0x304>
 8010c1a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010c1e:	e7f9      	b.n	8010c14 <_scanf_float+0x39c>
 8010c20:	2600      	movs	r6, #0
 8010c22:	e670      	b.n	8010906 <_scanf_float+0x8e>
 8010c24:	080151a6 	.word	0x080151a6

08010c28 <iprintf>:
 8010c28:	b40f      	push	{r0, r1, r2, r3}
 8010c2a:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <iprintf+0x2c>)
 8010c2c:	b513      	push	{r0, r1, r4, lr}
 8010c2e:	681c      	ldr	r4, [r3, #0]
 8010c30:	b124      	cbz	r4, 8010c3c <iprintf+0x14>
 8010c32:	69a3      	ldr	r3, [r4, #24]
 8010c34:	b913      	cbnz	r3, 8010c3c <iprintf+0x14>
 8010c36:	4620      	mov	r0, r4
 8010c38:	f001 ff8e 	bl	8012b58 <__sinit>
 8010c3c:	ab05      	add	r3, sp, #20
 8010c3e:	9a04      	ldr	r2, [sp, #16]
 8010c40:	68a1      	ldr	r1, [r4, #8]
 8010c42:	9301      	str	r3, [sp, #4]
 8010c44:	4620      	mov	r0, r4
 8010c46:	f003 fb2f 	bl	80142a8 <_vfiprintf_r>
 8010c4a:	b002      	add	sp, #8
 8010c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c50:	b004      	add	sp, #16
 8010c52:	4770      	bx	lr
 8010c54:	200003ac 	.word	0x200003ac

08010c58 <_puts_r>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	460e      	mov	r6, r1
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	b118      	cbz	r0, 8010c68 <_puts_r+0x10>
 8010c60:	6983      	ldr	r3, [r0, #24]
 8010c62:	b90b      	cbnz	r3, 8010c68 <_puts_r+0x10>
 8010c64:	f001 ff78 	bl	8012b58 <__sinit>
 8010c68:	69ab      	ldr	r3, [r5, #24]
 8010c6a:	68ac      	ldr	r4, [r5, #8]
 8010c6c:	b913      	cbnz	r3, 8010c74 <_puts_r+0x1c>
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f001 ff72 	bl	8012b58 <__sinit>
 8010c74:	4b23      	ldr	r3, [pc, #140]	; (8010d04 <_puts_r+0xac>)
 8010c76:	429c      	cmp	r4, r3
 8010c78:	d117      	bne.n	8010caa <_puts_r+0x52>
 8010c7a:	686c      	ldr	r4, [r5, #4]
 8010c7c:	89a3      	ldrh	r3, [r4, #12]
 8010c7e:	071b      	lsls	r3, r3, #28
 8010c80:	d51d      	bpl.n	8010cbe <_puts_r+0x66>
 8010c82:	6923      	ldr	r3, [r4, #16]
 8010c84:	b1db      	cbz	r3, 8010cbe <_puts_r+0x66>
 8010c86:	3e01      	subs	r6, #1
 8010c88:	68a3      	ldr	r3, [r4, #8]
 8010c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	60a3      	str	r3, [r4, #8]
 8010c92:	b9e9      	cbnz	r1, 8010cd0 <_puts_r+0x78>
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	da2e      	bge.n	8010cf6 <_puts_r+0x9e>
 8010c98:	4622      	mov	r2, r4
 8010c9a:	210a      	movs	r1, #10
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f000 ffb1 	bl	8011c04 <__swbuf_r>
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	d011      	beq.n	8010cca <_puts_r+0x72>
 8010ca6:	200a      	movs	r0, #10
 8010ca8:	e011      	b.n	8010cce <_puts_r+0x76>
 8010caa:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <_puts_r+0xb0>)
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d101      	bne.n	8010cb4 <_puts_r+0x5c>
 8010cb0:	68ac      	ldr	r4, [r5, #8]
 8010cb2:	e7e3      	b.n	8010c7c <_puts_r+0x24>
 8010cb4:	4b15      	ldr	r3, [pc, #84]	; (8010d0c <_puts_r+0xb4>)
 8010cb6:	429c      	cmp	r4, r3
 8010cb8:	bf08      	it	eq
 8010cba:	68ec      	ldreq	r4, [r5, #12]
 8010cbc:	e7de      	b.n	8010c7c <_puts_r+0x24>
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f001 f803 	bl	8011ccc <__swsetup_r>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d0dd      	beq.n	8010c86 <_puts_r+0x2e>
 8010cca:	f04f 30ff 	mov.w	r0, #4294967295
 8010cce:	bd70      	pop	{r4, r5, r6, pc}
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	da04      	bge.n	8010cde <_puts_r+0x86>
 8010cd4:	69a2      	ldr	r2, [r4, #24]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	dc06      	bgt.n	8010ce8 <_puts_r+0x90>
 8010cda:	290a      	cmp	r1, #10
 8010cdc:	d004      	beq.n	8010ce8 <_puts_r+0x90>
 8010cde:	6823      	ldr	r3, [r4, #0]
 8010ce0:	1c5a      	adds	r2, r3, #1
 8010ce2:	6022      	str	r2, [r4, #0]
 8010ce4:	7019      	strb	r1, [r3, #0]
 8010ce6:	e7cf      	b.n	8010c88 <_puts_r+0x30>
 8010ce8:	4622      	mov	r2, r4
 8010cea:	4628      	mov	r0, r5
 8010cec:	f000 ff8a 	bl	8011c04 <__swbuf_r>
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d1c9      	bne.n	8010c88 <_puts_r+0x30>
 8010cf4:	e7e9      	b.n	8010cca <_puts_r+0x72>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	200a      	movs	r0, #10
 8010cfa:	1c5a      	adds	r2, r3, #1
 8010cfc:	6022      	str	r2, [r4, #0]
 8010cfe:	7018      	strb	r0, [r3, #0]
 8010d00:	e7e5      	b.n	8010cce <_puts_r+0x76>
 8010d02:	bf00      	nop
 8010d04:	08015230 	.word	0x08015230
 8010d08:	08015250 	.word	0x08015250
 8010d0c:	08015210 	.word	0x08015210

08010d10 <puts>:
 8010d10:	4b02      	ldr	r3, [pc, #8]	; (8010d1c <puts+0xc>)
 8010d12:	4601      	mov	r1, r0
 8010d14:	6818      	ldr	r0, [r3, #0]
 8010d16:	f7ff bf9f 	b.w	8010c58 <_puts_r>
 8010d1a:	bf00      	nop
 8010d1c:	200003ac 	.word	0x200003ac

08010d20 <realloc>:
 8010d20:	4b02      	ldr	r3, [pc, #8]	; (8010d2c <realloc+0xc>)
 8010d22:	460a      	mov	r2, r1
 8010d24:	4601      	mov	r1, r0
 8010d26:	6818      	ldr	r0, [r3, #0]
 8010d28:	f002 bf72 	b.w	8013c10 <_realloc_r>
 8010d2c:	200003ac 	.word	0x200003ac

08010d30 <_sbrk_r>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4c06      	ldr	r4, [pc, #24]	; (8010d4c <_sbrk_r+0x1c>)
 8010d34:	2300      	movs	r3, #0
 8010d36:	4605      	mov	r5, r0
 8010d38:	4608      	mov	r0, r1
 8010d3a:	6023      	str	r3, [r4, #0]
 8010d3c:	f003 fec8 	bl	8014ad0 <_sbrk>
 8010d40:	1c43      	adds	r3, r0, #1
 8010d42:	d102      	bne.n	8010d4a <_sbrk_r+0x1a>
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	b103      	cbz	r3, 8010d4a <_sbrk_r+0x1a>
 8010d48:	602b      	str	r3, [r5, #0]
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}
 8010d4c:	20011bbc 	.word	0x20011bbc

08010d50 <nanf>:
 8010d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010d58 <nanf+0x8>
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	7fc00000 	.word	0x7fc00000

08010d5c <_raise_r>:
 8010d5c:	291f      	cmp	r1, #31
 8010d5e:	b538      	push	{r3, r4, r5, lr}
 8010d60:	4604      	mov	r4, r0
 8010d62:	460d      	mov	r5, r1
 8010d64:	d904      	bls.n	8010d70 <_raise_r+0x14>
 8010d66:	2316      	movs	r3, #22
 8010d68:	6003      	str	r3, [r0, #0]
 8010d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d72:	b112      	cbz	r2, 8010d7a <_raise_r+0x1e>
 8010d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d78:	b94b      	cbnz	r3, 8010d8e <_raise_r+0x32>
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f000 f830 	bl	8010de0 <_getpid_r>
 8010d80:	462a      	mov	r2, r5
 8010d82:	4601      	mov	r1, r0
 8010d84:	4620      	mov	r0, r4
 8010d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d8a:	f000 b817 	b.w	8010dbc <_kill_r>
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d00a      	beq.n	8010da8 <_raise_r+0x4c>
 8010d92:	1c59      	adds	r1, r3, #1
 8010d94:	d103      	bne.n	8010d9e <_raise_r+0x42>
 8010d96:	2316      	movs	r3, #22
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	2001      	movs	r0, #1
 8010d9c:	e7e7      	b.n	8010d6e <_raise_r+0x12>
 8010d9e:	2400      	movs	r4, #0
 8010da0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010da4:	4628      	mov	r0, r5
 8010da6:	4798      	blx	r3
 8010da8:	2000      	movs	r0, #0
 8010daa:	e7e0      	b.n	8010d6e <_raise_r+0x12>

08010dac <raise>:
 8010dac:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <raise+0xc>)
 8010dae:	4601      	mov	r1, r0
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	f7ff bfd3 	b.w	8010d5c <_raise_r>
 8010db6:	bf00      	nop
 8010db8:	200003ac 	.word	0x200003ac

08010dbc <_kill_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4c07      	ldr	r4, [pc, #28]	; (8010ddc <_kill_r+0x20>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	6023      	str	r3, [r4, #0]
 8010dca:	f003 fe69 	bl	8014aa0 <_kill>
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d102      	bne.n	8010dd8 <_kill_r+0x1c>
 8010dd2:	6823      	ldr	r3, [r4, #0]
 8010dd4:	b103      	cbz	r3, 8010dd8 <_kill_r+0x1c>
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	bd38      	pop	{r3, r4, r5, pc}
 8010dda:	bf00      	nop
 8010ddc:	20011bbc 	.word	0x20011bbc

08010de0 <_getpid_r>:
 8010de0:	f003 be4e 	b.w	8014a80 <_getpid>

08010de4 <siprintf>:
 8010de4:	b40e      	push	{r1, r2, r3}
 8010de6:	b500      	push	{lr}
 8010de8:	b09c      	sub	sp, #112	; 0x70
 8010dea:	ab1d      	add	r3, sp, #116	; 0x74
 8010dec:	9002      	str	r0, [sp, #8]
 8010dee:	9006      	str	r0, [sp, #24]
 8010df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010df4:	4809      	ldr	r0, [pc, #36]	; (8010e1c <siprintf+0x38>)
 8010df6:	9107      	str	r1, [sp, #28]
 8010df8:	9104      	str	r1, [sp, #16]
 8010dfa:	4909      	ldr	r1, [pc, #36]	; (8010e20 <siprintf+0x3c>)
 8010dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e00:	9105      	str	r1, [sp, #20]
 8010e02:	6800      	ldr	r0, [r0, #0]
 8010e04:	9301      	str	r3, [sp, #4]
 8010e06:	a902      	add	r1, sp, #8
 8010e08:	f002 ff82 	bl	8013d10 <_svfiprintf_r>
 8010e0c:	9b02      	ldr	r3, [sp, #8]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	701a      	strb	r2, [r3, #0]
 8010e12:	b01c      	add	sp, #112	; 0x70
 8010e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e18:	b003      	add	sp, #12
 8010e1a:	4770      	bx	lr
 8010e1c:	200003ac 	.word	0x200003ac
 8010e20:	ffff0208 	.word	0xffff0208

08010e24 <siscanf>:
 8010e24:	b40e      	push	{r1, r2, r3}
 8010e26:	b530      	push	{r4, r5, lr}
 8010e28:	b09c      	sub	sp, #112	; 0x70
 8010e2a:	ac1f      	add	r4, sp, #124	; 0x7c
 8010e2c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8010e30:	f854 5b04 	ldr.w	r5, [r4], #4
 8010e34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010e38:	9002      	str	r0, [sp, #8]
 8010e3a:	9006      	str	r0, [sp, #24]
 8010e3c:	f7ef fa00 	bl	8000240 <strlen>
 8010e40:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <siscanf+0x4c>)
 8010e42:	9003      	str	r0, [sp, #12]
 8010e44:	9007      	str	r0, [sp, #28]
 8010e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e48:	480a      	ldr	r0, [pc, #40]	; (8010e74 <siscanf+0x50>)
 8010e4a:	9401      	str	r4, [sp, #4]
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e50:	9314      	str	r3, [sp, #80]	; 0x50
 8010e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	4623      	mov	r3, r4
 8010e5e:	a902      	add	r1, sp, #8
 8010e60:	6800      	ldr	r0, [r0, #0]
 8010e62:	f003 f8a7 	bl	8013fb4 <__ssvfiscanf_r>
 8010e66:	b01c      	add	sp, #112	; 0x70
 8010e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e6c:	b003      	add	sp, #12
 8010e6e:	4770      	bx	lr
 8010e70:	08010e9b 	.word	0x08010e9b
 8010e74:	200003ac 	.word	0x200003ac

08010e78 <__sread>:
 8010e78:	b510      	push	{r4, lr}
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e80:	f003 fc80 	bl	8014784 <_read_r>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	bfab      	itete	ge
 8010e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e8c:	181b      	addge	r3, r3, r0
 8010e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e92:	bfac      	ite	ge
 8010e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e96:	81a3      	strhlt	r3, [r4, #12]
 8010e98:	bd10      	pop	{r4, pc}

08010e9a <__seofread>:
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	4770      	bx	lr

08010e9e <__swrite>:
 8010e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	461f      	mov	r7, r3
 8010ea4:	898b      	ldrh	r3, [r1, #12]
 8010ea6:	05db      	lsls	r3, r3, #23
 8010ea8:	4605      	mov	r5, r0
 8010eaa:	460c      	mov	r4, r1
 8010eac:	4616      	mov	r6, r2
 8010eae:	d505      	bpl.n	8010ebc <__swrite+0x1e>
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb8:	f002 fa20 	bl	80132fc <_lseek_r>
 8010ebc:	89a3      	ldrh	r3, [r4, #12]
 8010ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ec6:	81a3      	strh	r3, [r4, #12]
 8010ec8:	4632      	mov	r2, r6
 8010eca:	463b      	mov	r3, r7
 8010ecc:	4628      	mov	r0, r5
 8010ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed2:	f000 bee9 	b.w	8011ca8 <_write_r>

08010ed6 <__sseek>:
 8010ed6:	b510      	push	{r4, lr}
 8010ed8:	460c      	mov	r4, r1
 8010eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ede:	f002 fa0d 	bl	80132fc <_lseek_r>
 8010ee2:	1c43      	adds	r3, r0, #1
 8010ee4:	89a3      	ldrh	r3, [r4, #12]
 8010ee6:	bf15      	itete	ne
 8010ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ef2:	81a3      	strheq	r3, [r4, #12]
 8010ef4:	bf18      	it	ne
 8010ef6:	81a3      	strhne	r3, [r4, #12]
 8010ef8:	bd10      	pop	{r4, pc}

08010efa <__sclose>:
 8010efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010efe:	f000 bf53 	b.w	8011da8 <_close_r>

08010f02 <sulp>:
 8010f02:	b570      	push	{r4, r5, r6, lr}
 8010f04:	4604      	mov	r4, r0
 8010f06:	460d      	mov	r5, r1
 8010f08:	4616      	mov	r6, r2
 8010f0a:	ec45 4b10 	vmov	d0, r4, r5
 8010f0e:	f002 fd4b 	bl	80139a8 <__ulp>
 8010f12:	b17e      	cbz	r6, 8010f34 <sulp+0x32>
 8010f14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	dd09      	ble.n	8010f34 <sulp+0x32>
 8010f20:	051b      	lsls	r3, r3, #20
 8010f22:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010f26:	2000      	movs	r0, #0
 8010f28:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010f2c:	ec41 0b17 	vmov	d7, r0, r1
 8010f30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f38 <_strtod_l>:
 8010f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f3c:	ed2d 8b0c 	vpush	{d8-d13}
 8010f40:	4698      	mov	r8, r3
 8010f42:	b09d      	sub	sp, #116	; 0x74
 8010f44:	2300      	movs	r3, #0
 8010f46:	4604      	mov	r4, r0
 8010f48:	4640      	mov	r0, r8
 8010f4a:	460e      	mov	r6, r1
 8010f4c:	9214      	str	r2, [sp, #80]	; 0x50
 8010f4e:	9318      	str	r3, [sp, #96]	; 0x60
 8010f50:	f002 f9c4 	bl	80132dc <__localeconv_l>
 8010f54:	4681      	mov	r9, r0
 8010f56:	6800      	ldr	r0, [r0, #0]
 8010f58:	f7ef f972 	bl	8000240 <strlen>
 8010f5c:	f04f 0a00 	mov.w	sl, #0
 8010f60:	4607      	mov	r7, r0
 8010f62:	f04f 0b00 	mov.w	fp, #0
 8010f66:	9617      	str	r6, [sp, #92]	; 0x5c
 8010f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f6a:	781a      	ldrb	r2, [r3, #0]
 8010f6c:	2a0d      	cmp	r2, #13
 8010f6e:	d834      	bhi.n	8010fda <_strtod_l+0xa2>
 8010f70:	2a09      	cmp	r2, #9
 8010f72:	d238      	bcs.n	8010fe6 <_strtod_l+0xae>
 8010f74:	2a00      	cmp	r2, #0
 8010f76:	d040      	beq.n	8010ffa <_strtod_l+0xc2>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8010f7c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010f7e:	782b      	ldrb	r3, [r5, #0]
 8010f80:	2b30      	cmp	r3, #48	; 0x30
 8010f82:	f040 80b3 	bne.w	80110ec <_strtod_l+0x1b4>
 8010f86:	786b      	ldrb	r3, [r5, #1]
 8010f88:	2b58      	cmp	r3, #88	; 0x58
 8010f8a:	d001      	beq.n	8010f90 <_strtod_l+0x58>
 8010f8c:	2b78      	cmp	r3, #120	; 0x78
 8010f8e:	d169      	bne.n	8011064 <_strtod_l+0x12c>
 8010f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f92:	9301      	str	r3, [sp, #4]
 8010f94:	ab18      	add	r3, sp, #96	; 0x60
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	f8cd 8008 	str.w	r8, [sp, #8]
 8010f9c:	ab19      	add	r3, sp, #100	; 0x64
 8010f9e:	4a8f      	ldr	r2, [pc, #572]	; (80111dc <_strtod_l+0x2a4>)
 8010fa0:	a917      	add	r1, sp, #92	; 0x5c
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f001 feb1 	bl	8012d0a <__gethex>
 8010fa8:	f010 0607 	ands.w	r6, r0, #7
 8010fac:	4607      	mov	r7, r0
 8010fae:	d005      	beq.n	8010fbc <_strtod_l+0x84>
 8010fb0:	2e06      	cmp	r6, #6
 8010fb2:	d12c      	bne.n	801100e <_strtod_l+0xd6>
 8010fb4:	3501      	adds	r5, #1
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	9517      	str	r5, [sp, #92]	; 0x5c
 8010fba:	930d      	str	r3, [sp, #52]	; 0x34
 8010fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f040 855e 	bne.w	8011a80 <_strtod_l+0xb48>
 8010fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fc6:	b1eb      	cbz	r3, 8011004 <_strtod_l+0xcc>
 8010fc8:	ec4b ab17 	vmov	d7, sl, fp
 8010fcc:	eeb1 0b47 	vneg.f64	d0, d7
 8010fd0:	b01d      	add	sp, #116	; 0x74
 8010fd2:	ecbd 8b0c 	vpop	{d8-d13}
 8010fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fda:	2a2b      	cmp	r2, #43	; 0x2b
 8010fdc:	d015      	beq.n	801100a <_strtod_l+0xd2>
 8010fde:	2a2d      	cmp	r2, #45	; 0x2d
 8010fe0:	d004      	beq.n	8010fec <_strtod_l+0xb4>
 8010fe2:	2a20      	cmp	r2, #32
 8010fe4:	d1c8      	bne.n	8010f78 <_strtod_l+0x40>
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	9317      	str	r3, [sp, #92]	; 0x5c
 8010fea:	e7bd      	b.n	8010f68 <_strtod_l+0x30>
 8010fec:	2201      	movs	r2, #1
 8010fee:	920d      	str	r2, [sp, #52]	; 0x34
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ff4:	785b      	ldrb	r3, [r3, #1]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1c0      	bne.n	8010f7c <_strtod_l+0x44>
 8010ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ffc:	9617      	str	r6, [sp, #92]	; 0x5c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f040 853c 	bne.w	8011a7c <_strtod_l+0xb44>
 8011004:	ec4b ab10 	vmov	d0, sl, fp
 8011008:	e7e2      	b.n	8010fd0 <_strtod_l+0x98>
 801100a:	2200      	movs	r2, #0
 801100c:	e7ef      	b.n	8010fee <_strtod_l+0xb6>
 801100e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011010:	b13a      	cbz	r2, 8011022 <_strtod_l+0xea>
 8011012:	2135      	movs	r1, #53	; 0x35
 8011014:	a81a      	add	r0, sp, #104	; 0x68
 8011016:	f002 fdc0 	bl	8013b9a <__copybits>
 801101a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801101c:	4620      	mov	r0, r4
 801101e:	f002 fa2b 	bl	8013478 <_Bfree>
 8011022:	3e01      	subs	r6, #1
 8011024:	2e04      	cmp	r6, #4
 8011026:	d806      	bhi.n	8011036 <_strtod_l+0xfe>
 8011028:	e8df f006 	tbb	[pc, r6]
 801102c:	1714030a 	.word	0x1714030a
 8011030:	0a          	.byte	0x0a
 8011031:	00          	.byte	0x00
 8011032:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011036:	073b      	lsls	r3, r7, #28
 8011038:	d5c0      	bpl.n	8010fbc <_strtod_l+0x84>
 801103a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801103e:	e7bd      	b.n	8010fbc <_strtod_l+0x84>
 8011040:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011044:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011046:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801104a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801104e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011052:	e7f0      	b.n	8011036 <_strtod_l+0xfe>
 8011054:	f8df b188 	ldr.w	fp, [pc, #392]	; 80111e0 <_strtod_l+0x2a8>
 8011058:	e7ed      	b.n	8011036 <_strtod_l+0xfe>
 801105a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801105e:	f04f 3aff 	mov.w	sl, #4294967295
 8011062:	e7e8      	b.n	8011036 <_strtod_l+0xfe>
 8011064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011066:	1c5a      	adds	r2, r3, #1
 8011068:	9217      	str	r2, [sp, #92]	; 0x5c
 801106a:	785b      	ldrb	r3, [r3, #1]
 801106c:	2b30      	cmp	r3, #48	; 0x30
 801106e:	d0f9      	beq.n	8011064 <_strtod_l+0x12c>
 8011070:	2b00      	cmp	r3, #0
 8011072:	d0a3      	beq.n	8010fbc <_strtod_l+0x84>
 8011074:	2301      	movs	r3, #1
 8011076:	930a      	str	r3, [sp, #40]	; 0x28
 8011078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801107a:	930c      	str	r3, [sp, #48]	; 0x30
 801107c:	2300      	movs	r3, #0
 801107e:	9306      	str	r3, [sp, #24]
 8011080:	9308      	str	r3, [sp, #32]
 8011082:	461d      	mov	r5, r3
 8011084:	220a      	movs	r2, #10
 8011086:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011088:	f890 8000 	ldrb.w	r8, [r0]
 801108c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011090:	b2d9      	uxtb	r1, r3
 8011092:	2909      	cmp	r1, #9
 8011094:	d92c      	bls.n	80110f0 <_strtod_l+0x1b8>
 8011096:	463a      	mov	r2, r7
 8011098:	f8d9 1000 	ldr.w	r1, [r9]
 801109c:	f003 fbb6 	bl	801480c <strncmp>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d035      	beq.n	8011110 <_strtod_l+0x1d8>
 80110a4:	2000      	movs	r0, #0
 80110a6:	4642      	mov	r2, r8
 80110a8:	462b      	mov	r3, r5
 80110aa:	4601      	mov	r1, r0
 80110ac:	9004      	str	r0, [sp, #16]
 80110ae:	2a65      	cmp	r2, #101	; 0x65
 80110b0:	d001      	beq.n	80110b6 <_strtod_l+0x17e>
 80110b2:	2a45      	cmp	r2, #69	; 0x45
 80110b4:	d117      	bne.n	80110e6 <_strtod_l+0x1ae>
 80110b6:	b923      	cbnz	r3, 80110c2 <_strtod_l+0x18a>
 80110b8:	b910      	cbnz	r0, 80110c0 <_strtod_l+0x188>
 80110ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d09c      	beq.n	8010ffa <_strtod_l+0xc2>
 80110c0:	2300      	movs	r3, #0
 80110c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80110c4:	1c72      	adds	r2, r6, #1
 80110c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80110c8:	7872      	ldrb	r2, [r6, #1]
 80110ca:	2a2b      	cmp	r2, #43	; 0x2b
 80110cc:	f000 8082 	beq.w	80111d4 <_strtod_l+0x29c>
 80110d0:	2a2d      	cmp	r2, #45	; 0x2d
 80110d2:	d079      	beq.n	80111c8 <_strtod_l+0x290>
 80110d4:	f04f 0e00 	mov.w	lr, #0
 80110d8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80110dc:	f1bc 0f09 	cmp.w	ip, #9
 80110e0:	f240 8086 	bls.w	80111f0 <_strtod_l+0x2b8>
 80110e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80110e6:	f04f 0800 	mov.w	r8, #0
 80110ea:	e0a8      	b.n	801123e <_strtod_l+0x306>
 80110ec:	2300      	movs	r3, #0
 80110ee:	e7c2      	b.n	8011076 <_strtod_l+0x13e>
 80110f0:	2d08      	cmp	r5, #8
 80110f2:	bfd5      	itete	le
 80110f4:	9908      	ldrle	r1, [sp, #32]
 80110f6:	9906      	ldrgt	r1, [sp, #24]
 80110f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80110fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011100:	f100 0001 	add.w	r0, r0, #1
 8011104:	bfd4      	ite	le
 8011106:	9308      	strle	r3, [sp, #32]
 8011108:	9306      	strgt	r3, [sp, #24]
 801110a:	3501      	adds	r5, #1
 801110c:	9017      	str	r0, [sp, #92]	; 0x5c
 801110e:	e7ba      	b.n	8011086 <_strtod_l+0x14e>
 8011110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011112:	19da      	adds	r2, r3, r7
 8011114:	9217      	str	r2, [sp, #92]	; 0x5c
 8011116:	5dda      	ldrb	r2, [r3, r7]
 8011118:	2d00      	cmp	r5, #0
 801111a:	d038      	beq.n	801118e <_strtod_l+0x256>
 801111c:	4601      	mov	r1, r0
 801111e:	462b      	mov	r3, r5
 8011120:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8011124:	2f09      	cmp	r7, #9
 8011126:	d913      	bls.n	8011150 <_strtod_l+0x218>
 8011128:	2701      	movs	r7, #1
 801112a:	9704      	str	r7, [sp, #16]
 801112c:	e7bf      	b.n	80110ae <_strtod_l+0x176>
 801112e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	9217      	str	r2, [sp, #92]	; 0x5c
 8011134:	785a      	ldrb	r2, [r3, #1]
 8011136:	3001      	adds	r0, #1
 8011138:	2a30      	cmp	r2, #48	; 0x30
 801113a:	d0f8      	beq.n	801112e <_strtod_l+0x1f6>
 801113c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011140:	2b08      	cmp	r3, #8
 8011142:	f200 84a2 	bhi.w	8011a8a <_strtod_l+0xb52>
 8011146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011148:	930c      	str	r3, [sp, #48]	; 0x30
 801114a:	4601      	mov	r1, r0
 801114c:	2000      	movs	r0, #0
 801114e:	4603      	mov	r3, r0
 8011150:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8011154:	f100 0701 	add.w	r7, r0, #1
 8011158:	d013      	beq.n	8011182 <_strtod_l+0x24a>
 801115a:	4439      	add	r1, r7
 801115c:	eb00 0e03 	add.w	lr, r0, r3
 8011160:	461f      	mov	r7, r3
 8011162:	f04f 0c0a 	mov.w	ip, #10
 8011166:	45be      	cmp	lr, r7
 8011168:	d113      	bne.n	8011192 <_strtod_l+0x25a>
 801116a:	181f      	adds	r7, r3, r0
 801116c:	2f08      	cmp	r7, #8
 801116e:	f103 0301 	add.w	r3, r3, #1
 8011172:	4403      	add	r3, r0
 8011174:	dc1d      	bgt.n	80111b2 <_strtod_l+0x27a>
 8011176:	9a08      	ldr	r2, [sp, #32]
 8011178:	200a      	movs	r0, #10
 801117a:	fb00 8202 	mla	r2, r0, r2, r8
 801117e:	9208      	str	r2, [sp, #32]
 8011180:	2700      	movs	r7, #0
 8011182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011184:	1c50      	adds	r0, r2, #1
 8011186:	9017      	str	r0, [sp, #92]	; 0x5c
 8011188:	7852      	ldrb	r2, [r2, #1]
 801118a:	4638      	mov	r0, r7
 801118c:	e7c8      	b.n	8011120 <_strtod_l+0x1e8>
 801118e:	4628      	mov	r0, r5
 8011190:	e7d2      	b.n	8011138 <_strtod_l+0x200>
 8011192:	2f08      	cmp	r7, #8
 8011194:	f107 0701 	add.w	r7, r7, #1
 8011198:	dc04      	bgt.n	80111a4 <_strtod_l+0x26c>
 801119a:	9a08      	ldr	r2, [sp, #32]
 801119c:	fb0c f202 	mul.w	r2, ip, r2
 80111a0:	9208      	str	r2, [sp, #32]
 80111a2:	e7e0      	b.n	8011166 <_strtod_l+0x22e>
 80111a4:	2f10      	cmp	r7, #16
 80111a6:	bfde      	ittt	le
 80111a8:	9a06      	ldrle	r2, [sp, #24]
 80111aa:	fb0c f202 	mulle.w	r2, ip, r2
 80111ae:	9206      	strle	r2, [sp, #24]
 80111b0:	e7d9      	b.n	8011166 <_strtod_l+0x22e>
 80111b2:	2b10      	cmp	r3, #16
 80111b4:	bfdf      	itttt	le
 80111b6:	9a06      	ldrle	r2, [sp, #24]
 80111b8:	200a      	movle	r0, #10
 80111ba:	fb00 8202 	mlale	r2, r0, r2, r8
 80111be:	9206      	strle	r2, [sp, #24]
 80111c0:	e7de      	b.n	8011180 <_strtod_l+0x248>
 80111c2:	2301      	movs	r3, #1
 80111c4:	9304      	str	r3, [sp, #16]
 80111c6:	e777      	b.n	80110b8 <_strtod_l+0x180>
 80111c8:	f04f 0e01 	mov.w	lr, #1
 80111cc:	1cb2      	adds	r2, r6, #2
 80111ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80111d0:	78b2      	ldrb	r2, [r6, #2]
 80111d2:	e781      	b.n	80110d8 <_strtod_l+0x1a0>
 80111d4:	f04f 0e00 	mov.w	lr, #0
 80111d8:	e7f8      	b.n	80111cc <_strtod_l+0x294>
 80111da:	bf00      	nop
 80111dc:	080151ac 	.word	0x080151ac
 80111e0:	7ff00000 	.word	0x7ff00000
 80111e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80111e6:	f102 0c01 	add.w	ip, r2, #1
 80111ea:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80111ee:	7852      	ldrb	r2, [r2, #1]
 80111f0:	2a30      	cmp	r2, #48	; 0x30
 80111f2:	d0f7      	beq.n	80111e4 <_strtod_l+0x2ac>
 80111f4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80111f8:	f1bc 0f08 	cmp.w	ip, #8
 80111fc:	f63f af73 	bhi.w	80110e6 <_strtod_l+0x1ae>
 8011200:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8011204:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011206:	920e      	str	r2, [sp, #56]	; 0x38
 8011208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801120a:	f102 0c01 	add.w	ip, r2, #1
 801120e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011212:	7852      	ldrb	r2, [r2, #1]
 8011214:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011218:	f1b9 0f09 	cmp.w	r9, #9
 801121c:	d939      	bls.n	8011292 <_strtod_l+0x35a>
 801121e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011220:	ebac 0c07 	sub.w	ip, ip, r7
 8011224:	f1bc 0f08 	cmp.w	ip, #8
 8011228:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801122c:	dc37      	bgt.n	801129e <_strtod_l+0x366>
 801122e:	45e0      	cmp	r8, ip
 8011230:	bfa8      	it	ge
 8011232:	46e0      	movge	r8, ip
 8011234:	f1be 0f00 	cmp.w	lr, #0
 8011238:	d001      	beq.n	801123e <_strtod_l+0x306>
 801123a:	f1c8 0800 	rsb	r8, r8, #0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d151      	bne.n	80112e6 <_strtod_l+0x3ae>
 8011242:	2800      	cmp	r0, #0
 8011244:	f47f aeba 	bne.w	8010fbc <_strtod_l+0x84>
 8011248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801124a:	2b00      	cmp	r3, #0
 801124c:	f47f aeb6 	bne.w	8010fbc <_strtod_l+0x84>
 8011250:	9b04      	ldr	r3, [sp, #16]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f47f aed1 	bne.w	8010ffa <_strtod_l+0xc2>
 8011258:	2a4e      	cmp	r2, #78	; 0x4e
 801125a:	d027      	beq.n	80112ac <_strtod_l+0x374>
 801125c:	dc21      	bgt.n	80112a2 <_strtod_l+0x36a>
 801125e:	2a49      	cmp	r2, #73	; 0x49
 8011260:	f47f aecb 	bne.w	8010ffa <_strtod_l+0xc2>
 8011264:	499a      	ldr	r1, [pc, #616]	; (80114d0 <_strtod_l+0x598>)
 8011266:	a817      	add	r0, sp, #92	; 0x5c
 8011268:	f001 ff82 	bl	8013170 <__match>
 801126c:	2800      	cmp	r0, #0
 801126e:	f43f aec4 	beq.w	8010ffa <_strtod_l+0xc2>
 8011272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011274:	4997      	ldr	r1, [pc, #604]	; (80114d4 <_strtod_l+0x59c>)
 8011276:	3b01      	subs	r3, #1
 8011278:	a817      	add	r0, sp, #92	; 0x5c
 801127a:	9317      	str	r3, [sp, #92]	; 0x5c
 801127c:	f001 ff78 	bl	8013170 <__match>
 8011280:	b910      	cbnz	r0, 8011288 <_strtod_l+0x350>
 8011282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011284:	3301      	adds	r3, #1
 8011286:	9317      	str	r3, [sp, #92]	; 0x5c
 8011288:	f8df b260 	ldr.w	fp, [pc, #608]	; 80114ec <_strtod_l+0x5b4>
 801128c:	f04f 0a00 	mov.w	sl, #0
 8011290:	e694      	b.n	8010fbc <_strtod_l+0x84>
 8011292:	270a      	movs	r7, #10
 8011294:	fb07 2808 	mla	r8, r7, r8, r2
 8011298:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801129c:	e7b4      	b.n	8011208 <_strtod_l+0x2d0>
 801129e:	46e0      	mov	r8, ip
 80112a0:	e7c8      	b.n	8011234 <_strtod_l+0x2fc>
 80112a2:	2a69      	cmp	r2, #105	; 0x69
 80112a4:	d0de      	beq.n	8011264 <_strtod_l+0x32c>
 80112a6:	2a6e      	cmp	r2, #110	; 0x6e
 80112a8:	f47f aea7 	bne.w	8010ffa <_strtod_l+0xc2>
 80112ac:	498a      	ldr	r1, [pc, #552]	; (80114d8 <_strtod_l+0x5a0>)
 80112ae:	a817      	add	r0, sp, #92	; 0x5c
 80112b0:	f001 ff5e 	bl	8013170 <__match>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	f43f aea0 	beq.w	8010ffa <_strtod_l+0xc2>
 80112ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2b28      	cmp	r3, #40	; 0x28
 80112c0:	d10e      	bne.n	80112e0 <_strtod_l+0x3a8>
 80112c2:	aa1a      	add	r2, sp, #104	; 0x68
 80112c4:	4985      	ldr	r1, [pc, #532]	; (80114dc <_strtod_l+0x5a4>)
 80112c6:	a817      	add	r0, sp, #92	; 0x5c
 80112c8:	f001 ff66 	bl	8013198 <__hexnan>
 80112cc:	2805      	cmp	r0, #5
 80112ce:	d107      	bne.n	80112e0 <_strtod_l+0x3a8>
 80112d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112d2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80112d6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80112da:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80112de:	e66d      	b.n	8010fbc <_strtod_l+0x84>
 80112e0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80114f0 <_strtod_l+0x5b8>
 80112e4:	e7d2      	b.n	801128c <_strtod_l+0x354>
 80112e6:	eddd 7a08 	vldr	s15, [sp, #32]
 80112ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80112ee:	eba8 0201 	sub.w	r2, r8, r1
 80112f2:	2d00      	cmp	r5, #0
 80112f4:	bf08      	it	eq
 80112f6:	461d      	moveq	r5, r3
 80112f8:	2b10      	cmp	r3, #16
 80112fa:	9204      	str	r2, [sp, #16]
 80112fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011300:	461a      	mov	r2, r3
 8011302:	bfa8      	it	ge
 8011304:	2210      	movge	r2, #16
 8011306:	2b09      	cmp	r3, #9
 8011308:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801130c:	dc14      	bgt.n	8011338 <_strtod_l+0x400>
 801130e:	9904      	ldr	r1, [sp, #16]
 8011310:	2900      	cmp	r1, #0
 8011312:	f43f ae53 	beq.w	8010fbc <_strtod_l+0x84>
 8011316:	9904      	ldr	r1, [sp, #16]
 8011318:	dd72      	ble.n	8011400 <_strtod_l+0x4c8>
 801131a:	2916      	cmp	r1, #22
 801131c:	dc5a      	bgt.n	80113d4 <_strtod_l+0x49c>
 801131e:	4970      	ldr	r1, [pc, #448]	; (80114e0 <_strtod_l+0x5a8>)
 8011320:	9b04      	ldr	r3, [sp, #16]
 8011322:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011326:	ed91 7b00 	vldr	d7, [r1]
 801132a:	ec4b ab16 	vmov	d6, sl, fp
 801132e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011332:	ec5b ab17 	vmov	sl, fp, d7
 8011336:	e641      	b.n	8010fbc <_strtod_l+0x84>
 8011338:	4969      	ldr	r1, [pc, #420]	; (80114e0 <_strtod_l+0x5a8>)
 801133a:	eddd 7a06 	vldr	s15, [sp, #24]
 801133e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011342:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011346:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801134a:	2b0f      	cmp	r3, #15
 801134c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011350:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011354:	ec5b ab17 	vmov	sl, fp, d7
 8011358:	ddd9      	ble.n	801130e <_strtod_l+0x3d6>
 801135a:	9904      	ldr	r1, [sp, #16]
 801135c:	1a9a      	subs	r2, r3, r2
 801135e:	440a      	add	r2, r1
 8011360:	2a00      	cmp	r2, #0
 8011362:	f340 8096 	ble.w	8011492 <_strtod_l+0x55a>
 8011366:	f012 000f 	ands.w	r0, r2, #15
 801136a:	d00a      	beq.n	8011382 <_strtod_l+0x44a>
 801136c:	495c      	ldr	r1, [pc, #368]	; (80114e0 <_strtod_l+0x5a8>)
 801136e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011372:	ed91 7b00 	vldr	d7, [r1]
 8011376:	ec4b ab16 	vmov	d6, sl, fp
 801137a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801137e:	ec5b ab17 	vmov	sl, fp, d7
 8011382:	f032 020f 	bics.w	r2, r2, #15
 8011386:	d072      	beq.n	801146e <_strtod_l+0x536>
 8011388:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801138c:	dd45      	ble.n	801141a <_strtod_l+0x4e2>
 801138e:	2500      	movs	r5, #0
 8011390:	46a8      	mov	r8, r5
 8011392:	9506      	str	r5, [sp, #24]
 8011394:	46a9      	mov	r9, r5
 8011396:	2322      	movs	r3, #34	; 0x22
 8011398:	f8df b150 	ldr.w	fp, [pc, #336]	; 80114ec <_strtod_l+0x5b4>
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	f04f 0a00 	mov.w	sl, #0
 80113a2:	9b06      	ldr	r3, [sp, #24]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f43f ae09 	beq.w	8010fbc <_strtod_l+0x84>
 80113aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80113ac:	4620      	mov	r0, r4
 80113ae:	f002 f863 	bl	8013478 <_Bfree>
 80113b2:	4649      	mov	r1, r9
 80113b4:	4620      	mov	r0, r4
 80113b6:	f002 f85f 	bl	8013478 <_Bfree>
 80113ba:	4641      	mov	r1, r8
 80113bc:	4620      	mov	r0, r4
 80113be:	f002 f85b 	bl	8013478 <_Bfree>
 80113c2:	9906      	ldr	r1, [sp, #24]
 80113c4:	4620      	mov	r0, r4
 80113c6:	f002 f857 	bl	8013478 <_Bfree>
 80113ca:	4629      	mov	r1, r5
 80113cc:	4620      	mov	r0, r4
 80113ce:	f002 f853 	bl	8013478 <_Bfree>
 80113d2:	e5f3      	b.n	8010fbc <_strtod_l+0x84>
 80113d4:	9804      	ldr	r0, [sp, #16]
 80113d6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80113da:	4281      	cmp	r1, r0
 80113dc:	dbbd      	blt.n	801135a <_strtod_l+0x422>
 80113de:	4a40      	ldr	r2, [pc, #256]	; (80114e0 <_strtod_l+0x5a8>)
 80113e0:	f1c3 030f 	rsb	r3, r3, #15
 80113e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80113e8:	ed91 7b00 	vldr	d7, [r1]
 80113ec:	ec4b ab16 	vmov	d6, sl, fp
 80113f0:	1ac3      	subs	r3, r0, r3
 80113f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80113f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113fa:	ed92 6b00 	vldr	d6, [r2]
 80113fe:	e796      	b.n	801132e <_strtod_l+0x3f6>
 8011400:	3116      	adds	r1, #22
 8011402:	dbaa      	blt.n	801135a <_strtod_l+0x422>
 8011404:	4936      	ldr	r1, [pc, #216]	; (80114e0 <_strtod_l+0x5a8>)
 8011406:	9b04      	ldr	r3, [sp, #16]
 8011408:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801140c:	ed91 7b00 	vldr	d7, [r1]
 8011410:	ec4b ab16 	vmov	d6, sl, fp
 8011414:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011418:	e78b      	b.n	8011332 <_strtod_l+0x3fa>
 801141a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801141e:	2000      	movs	r0, #0
 8011420:	4e30      	ldr	r6, [pc, #192]	; (80114e4 <_strtod_l+0x5ac>)
 8011422:	1112      	asrs	r2, r2, #4
 8011424:	4601      	mov	r1, r0
 8011426:	2a01      	cmp	r2, #1
 8011428:	dc23      	bgt.n	8011472 <_strtod_l+0x53a>
 801142a:	b108      	cbz	r0, 8011430 <_strtod_l+0x4f8>
 801142c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011430:	4a2c      	ldr	r2, [pc, #176]	; (80114e4 <_strtod_l+0x5ac>)
 8011432:	482d      	ldr	r0, [pc, #180]	; (80114e8 <_strtod_l+0x5b0>)
 8011434:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011438:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801143c:	ed91 7b00 	vldr	d7, [r1]
 8011440:	ec4b ab16 	vmov	d6, sl, fp
 8011444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011448:	ed8d 7b06 	vstr	d7, [sp, #24]
 801144c:	9907      	ldr	r1, [sp, #28]
 801144e:	4a27      	ldr	r2, [pc, #156]	; (80114ec <_strtod_l+0x5b4>)
 8011450:	400a      	ands	r2, r1
 8011452:	4282      	cmp	r2, r0
 8011454:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011458:	d899      	bhi.n	801138e <_strtod_l+0x456>
 801145a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801145e:	4282      	cmp	r2, r0
 8011460:	bf86      	itte	hi
 8011462:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80114f4 <_strtod_l+0x5bc>
 8011466:	f04f 3aff 	movhi.w	sl, #4294967295
 801146a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801146e:	2700      	movs	r7, #0
 8011470:	e070      	b.n	8011554 <_strtod_l+0x61c>
 8011472:	07d7      	lsls	r7, r2, #31
 8011474:	d50a      	bpl.n	801148c <_strtod_l+0x554>
 8011476:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801147a:	ed90 7b00 	vldr	d7, [r0]
 801147e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011482:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011486:	ed8d 7b06 	vstr	d7, [sp, #24]
 801148a:	2001      	movs	r0, #1
 801148c:	3101      	adds	r1, #1
 801148e:	1052      	asrs	r2, r2, #1
 8011490:	e7c9      	b.n	8011426 <_strtod_l+0x4ee>
 8011492:	d0ec      	beq.n	801146e <_strtod_l+0x536>
 8011494:	4252      	negs	r2, r2
 8011496:	f012 000f 	ands.w	r0, r2, #15
 801149a:	d00a      	beq.n	80114b2 <_strtod_l+0x57a>
 801149c:	4910      	ldr	r1, [pc, #64]	; (80114e0 <_strtod_l+0x5a8>)
 801149e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80114a2:	ed91 7b00 	vldr	d7, [r1]
 80114a6:	ec4b ab16 	vmov	d6, sl, fp
 80114aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80114ae:	ec5b ab17 	vmov	sl, fp, d7
 80114b2:	1112      	asrs	r2, r2, #4
 80114b4:	d0db      	beq.n	801146e <_strtod_l+0x536>
 80114b6:	2a1f      	cmp	r2, #31
 80114b8:	dd1e      	ble.n	80114f8 <_strtod_l+0x5c0>
 80114ba:	2500      	movs	r5, #0
 80114bc:	46a8      	mov	r8, r5
 80114be:	9506      	str	r5, [sp, #24]
 80114c0:	46a9      	mov	r9, r5
 80114c2:	2322      	movs	r3, #34	; 0x22
 80114c4:	f04f 0a00 	mov.w	sl, #0
 80114c8:	f04f 0b00 	mov.w	fp, #0
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	e768      	b.n	80113a2 <_strtod_l+0x46a>
 80114d0:	08015179 	.word	0x08015179
 80114d4:	08015203 	.word	0x08015203
 80114d8:	08015181 	.word	0x08015181
 80114dc:	080151c0 	.word	0x080151c0
 80114e0:	080152a8 	.word	0x080152a8
 80114e4:	08015280 	.word	0x08015280
 80114e8:	7ca00000 	.word	0x7ca00000
 80114ec:	7ff00000 	.word	0x7ff00000
 80114f0:	fff80000 	.word	0xfff80000
 80114f4:	7fefffff 	.word	0x7fefffff
 80114f8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80114fc:	f012 0710 	ands.w	r7, r2, #16
 8011500:	49ab      	ldr	r1, [pc, #684]	; (80117b0 <_strtod_l+0x878>)
 8011502:	bf18      	it	ne
 8011504:	276a      	movne	r7, #106	; 0x6a
 8011506:	2000      	movs	r0, #0
 8011508:	2a00      	cmp	r2, #0
 801150a:	f300 8113 	bgt.w	8011734 <_strtod_l+0x7fc>
 801150e:	b108      	cbz	r0, 8011514 <_strtod_l+0x5dc>
 8011510:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011514:	b1bf      	cbz	r7, 8011546 <_strtod_l+0x60e>
 8011516:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801151a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801151e:	2a00      	cmp	r2, #0
 8011520:	4659      	mov	r1, fp
 8011522:	dd10      	ble.n	8011546 <_strtod_l+0x60e>
 8011524:	2a1f      	cmp	r2, #31
 8011526:	f340 8113 	ble.w	8011750 <_strtod_l+0x818>
 801152a:	2a34      	cmp	r2, #52	; 0x34
 801152c:	bfde      	ittt	le
 801152e:	3a20      	suble	r2, #32
 8011530:	f04f 30ff 	movle.w	r0, #4294967295
 8011534:	fa00 f202 	lslle.w	r2, r0, r2
 8011538:	f04f 0a00 	mov.w	sl, #0
 801153c:	bfcc      	ite	gt
 801153e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011542:	ea02 0b01 	andle.w	fp, r2, r1
 8011546:	ec4b ab17 	vmov	d7, sl, fp
 801154a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011552:	d0b2      	beq.n	80114ba <_strtod_l+0x582>
 8011554:	9a08      	ldr	r2, [sp, #32]
 8011556:	9200      	str	r2, [sp, #0]
 8011558:	990c      	ldr	r1, [sp, #48]	; 0x30
 801155a:	462a      	mov	r2, r5
 801155c:	4620      	mov	r0, r4
 801155e:	f001 ffdd 	bl	801351c <__s2b>
 8011562:	9006      	str	r0, [sp, #24]
 8011564:	2800      	cmp	r0, #0
 8011566:	f43f af12 	beq.w	801138e <_strtod_l+0x456>
 801156a:	9a04      	ldr	r2, [sp, #16]
 801156c:	9b04      	ldr	r3, [sp, #16]
 801156e:	2a00      	cmp	r2, #0
 8011570:	f1c3 0300 	rsb	r3, r3, #0
 8011574:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011798 <_strtod_l+0x860>
 8011578:	bfa8      	it	ge
 801157a:	2300      	movge	r3, #0
 801157c:	ed9f ab88 	vldr	d10, [pc, #544]	; 80117a0 <_strtod_l+0x868>
 8011580:	ed9f bb89 	vldr	d11, [pc, #548]	; 80117a8 <_strtod_l+0x870>
 8011584:	930e      	str	r3, [sp, #56]	; 0x38
 8011586:	2500      	movs	r5, #0
 8011588:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801158c:	9310      	str	r3, [sp, #64]	; 0x40
 801158e:	46a8      	mov	r8, r5
 8011590:	9b06      	ldr	r3, [sp, #24]
 8011592:	4620      	mov	r0, r4
 8011594:	6859      	ldr	r1, [r3, #4]
 8011596:	f001 ff3b 	bl	8013410 <_Balloc>
 801159a:	4681      	mov	r9, r0
 801159c:	2800      	cmp	r0, #0
 801159e:	f43f aefa 	beq.w	8011396 <_strtod_l+0x45e>
 80115a2:	9b06      	ldr	r3, [sp, #24]
 80115a4:	691a      	ldr	r2, [r3, #16]
 80115a6:	3202      	adds	r2, #2
 80115a8:	f103 010c 	add.w	r1, r3, #12
 80115ac:	0092      	lsls	r2, r2, #2
 80115ae:	300c      	adds	r0, #12
 80115b0:	f7fe fc5c 	bl	800fe6c <memcpy>
 80115b4:	aa1a      	add	r2, sp, #104	; 0x68
 80115b6:	a919      	add	r1, sp, #100	; 0x64
 80115b8:	ec4b ab10 	vmov	d0, sl, fp
 80115bc:	4620      	mov	r0, r4
 80115be:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80115c2:	f002 fa67 	bl	8013a94 <__d2b>
 80115c6:	9018      	str	r0, [sp, #96]	; 0x60
 80115c8:	2800      	cmp	r0, #0
 80115ca:	f43f aee4 	beq.w	8011396 <_strtod_l+0x45e>
 80115ce:	2101      	movs	r1, #1
 80115d0:	4620      	mov	r0, r4
 80115d2:	f002 f82f 	bl	8013634 <__i2b>
 80115d6:	4680      	mov	r8, r0
 80115d8:	2800      	cmp	r0, #0
 80115da:	f43f aedc 	beq.w	8011396 <_strtod_l+0x45e>
 80115de:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80115e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80115e2:	2e00      	cmp	r6, #0
 80115e4:	bfb1      	iteee	lt
 80115e6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80115e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80115ea:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80115ec:	18f3      	addge	r3, r6, r3
 80115ee:	bfba      	itte	lt
 80115f0:	1b98      	sublt	r0, r3, r6
 80115f2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80115f4:	9308      	strge	r3, [sp, #32]
 80115f6:	eba6 0607 	sub.w	r6, r6, r7
 80115fa:	bfb8      	it	lt
 80115fc:	9308      	strlt	r3, [sp, #32]
 80115fe:	4416      	add	r6, r2
 8011600:	4b6c      	ldr	r3, [pc, #432]	; (80117b4 <_strtod_l+0x87c>)
 8011602:	3e01      	subs	r6, #1
 8011604:	429e      	cmp	r6, r3
 8011606:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801160a:	f280 80b4 	bge.w	8011776 <_strtod_l+0x83e>
 801160e:	1b9b      	subs	r3, r3, r6
 8011610:	2b1f      	cmp	r3, #31
 8011612:	eba2 0203 	sub.w	r2, r2, r3
 8011616:	f04f 0101 	mov.w	r1, #1
 801161a:	f300 80a0 	bgt.w	801175e <_strtod_l+0x826>
 801161e:	fa01 f303 	lsl.w	r3, r1, r3
 8011622:	9311      	str	r3, [sp, #68]	; 0x44
 8011624:	2300      	movs	r3, #0
 8011626:	930f      	str	r3, [sp, #60]	; 0x3c
 8011628:	9b08      	ldr	r3, [sp, #32]
 801162a:	4413      	add	r3, r2
 801162c:	4402      	add	r2, r0
 801162e:	18be      	adds	r6, r7, r2
 8011630:	9a08      	ldr	r2, [sp, #32]
 8011632:	429a      	cmp	r2, r3
 8011634:	bfa8      	it	ge
 8011636:	461a      	movge	r2, r3
 8011638:	42b2      	cmp	r2, r6
 801163a:	bfa8      	it	ge
 801163c:	4632      	movge	r2, r6
 801163e:	2a00      	cmp	r2, #0
 8011640:	dd04      	ble.n	801164c <_strtod_l+0x714>
 8011642:	9908      	ldr	r1, [sp, #32]
 8011644:	1a9b      	subs	r3, r3, r2
 8011646:	1ab6      	subs	r6, r6, r2
 8011648:	1a8a      	subs	r2, r1, r2
 801164a:	9208      	str	r2, [sp, #32]
 801164c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801164e:	b1c2      	cbz	r2, 8011682 <_strtod_l+0x74a>
 8011650:	4641      	mov	r1, r8
 8011652:	4620      	mov	r0, r4
 8011654:	9315      	str	r3, [sp, #84]	; 0x54
 8011656:	f002 f88d 	bl	8013774 <__pow5mult>
 801165a:	4680      	mov	r8, r0
 801165c:	2800      	cmp	r0, #0
 801165e:	f43f ae9a 	beq.w	8011396 <_strtod_l+0x45e>
 8011662:	4601      	mov	r1, r0
 8011664:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011666:	4620      	mov	r0, r4
 8011668:	f001 ffed 	bl	8013646 <__multiply>
 801166c:	900c      	str	r0, [sp, #48]	; 0x30
 801166e:	2800      	cmp	r0, #0
 8011670:	f43f ae91 	beq.w	8011396 <_strtod_l+0x45e>
 8011674:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011676:	4620      	mov	r0, r4
 8011678:	f001 fefe 	bl	8013478 <_Bfree>
 801167c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801167e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011680:	9218      	str	r2, [sp, #96]	; 0x60
 8011682:	2b00      	cmp	r3, #0
 8011684:	dc7c      	bgt.n	8011780 <_strtod_l+0x848>
 8011686:	9b04      	ldr	r3, [sp, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	dd08      	ble.n	801169e <_strtod_l+0x766>
 801168c:	4649      	mov	r1, r9
 801168e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011690:	4620      	mov	r0, r4
 8011692:	f002 f86f 	bl	8013774 <__pow5mult>
 8011696:	4681      	mov	r9, r0
 8011698:	2800      	cmp	r0, #0
 801169a:	f43f ae7c 	beq.w	8011396 <_strtod_l+0x45e>
 801169e:	2e00      	cmp	r6, #0
 80116a0:	dd08      	ble.n	80116b4 <_strtod_l+0x77c>
 80116a2:	4649      	mov	r1, r9
 80116a4:	4632      	mov	r2, r6
 80116a6:	4620      	mov	r0, r4
 80116a8:	f002 f8b2 	bl	8013810 <__lshift>
 80116ac:	4681      	mov	r9, r0
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f43f ae71 	beq.w	8011396 <_strtod_l+0x45e>
 80116b4:	9b08      	ldr	r3, [sp, #32]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	dd08      	ble.n	80116cc <_strtod_l+0x794>
 80116ba:	4641      	mov	r1, r8
 80116bc:	461a      	mov	r2, r3
 80116be:	4620      	mov	r0, r4
 80116c0:	f002 f8a6 	bl	8013810 <__lshift>
 80116c4:	4680      	mov	r8, r0
 80116c6:	2800      	cmp	r0, #0
 80116c8:	f43f ae65 	beq.w	8011396 <_strtod_l+0x45e>
 80116cc:	464a      	mov	r2, r9
 80116ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116d0:	4620      	mov	r0, r4
 80116d2:	f002 f90b 	bl	80138ec <__mdiff>
 80116d6:	4605      	mov	r5, r0
 80116d8:	2800      	cmp	r0, #0
 80116da:	f43f ae5c 	beq.w	8011396 <_strtod_l+0x45e>
 80116de:	68c3      	ldr	r3, [r0, #12]
 80116e0:	930c      	str	r3, [sp, #48]	; 0x30
 80116e2:	2300      	movs	r3, #0
 80116e4:	60c3      	str	r3, [r0, #12]
 80116e6:	4641      	mov	r1, r8
 80116e8:	f002 f8e6 	bl	80138b8 <__mcmp>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	da63      	bge.n	80117b8 <_strtod_l+0x880>
 80116f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116f2:	b9e3      	cbnz	r3, 801172e <_strtod_l+0x7f6>
 80116f4:	f1ba 0f00 	cmp.w	sl, #0
 80116f8:	d119      	bne.n	801172e <_strtod_l+0x7f6>
 80116fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116fe:	b9b3      	cbnz	r3, 801172e <_strtod_l+0x7f6>
 8011700:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011704:	0d1b      	lsrs	r3, r3, #20
 8011706:	051b      	lsls	r3, r3, #20
 8011708:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801170c:	d90f      	bls.n	801172e <_strtod_l+0x7f6>
 801170e:	696b      	ldr	r3, [r5, #20]
 8011710:	b913      	cbnz	r3, 8011718 <_strtod_l+0x7e0>
 8011712:	692b      	ldr	r3, [r5, #16]
 8011714:	2b01      	cmp	r3, #1
 8011716:	dd0a      	ble.n	801172e <_strtod_l+0x7f6>
 8011718:	4629      	mov	r1, r5
 801171a:	2201      	movs	r2, #1
 801171c:	4620      	mov	r0, r4
 801171e:	f002 f877 	bl	8013810 <__lshift>
 8011722:	4641      	mov	r1, r8
 8011724:	4605      	mov	r5, r0
 8011726:	f002 f8c7 	bl	80138b8 <__mcmp>
 801172a:	2800      	cmp	r0, #0
 801172c:	dc75      	bgt.n	801181a <_strtod_l+0x8e2>
 801172e:	2f00      	cmp	r7, #0
 8011730:	d17f      	bne.n	8011832 <_strtod_l+0x8fa>
 8011732:	e63a      	b.n	80113aa <_strtod_l+0x472>
 8011734:	07d6      	lsls	r6, r2, #31
 8011736:	d508      	bpl.n	801174a <_strtod_l+0x812>
 8011738:	ed9d 6b06 	vldr	d6, [sp, #24]
 801173c:	ed91 7b00 	vldr	d7, [r1]
 8011740:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011744:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011748:	2001      	movs	r0, #1
 801174a:	1052      	asrs	r2, r2, #1
 801174c:	3108      	adds	r1, #8
 801174e:	e6db      	b.n	8011508 <_strtod_l+0x5d0>
 8011750:	f04f 31ff 	mov.w	r1, #4294967295
 8011754:	fa01 f202 	lsl.w	r2, r1, r2
 8011758:	ea02 0a0a 	and.w	sl, r2, sl
 801175c:	e6f3      	b.n	8011546 <_strtod_l+0x60e>
 801175e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011762:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011766:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801176a:	36e2      	adds	r6, #226	; 0xe2
 801176c:	fa01 f306 	lsl.w	r3, r1, r6
 8011770:	930f      	str	r3, [sp, #60]	; 0x3c
 8011772:	9111      	str	r1, [sp, #68]	; 0x44
 8011774:	e758      	b.n	8011628 <_strtod_l+0x6f0>
 8011776:	2300      	movs	r3, #0
 8011778:	930f      	str	r3, [sp, #60]	; 0x3c
 801177a:	2301      	movs	r3, #1
 801177c:	9311      	str	r3, [sp, #68]	; 0x44
 801177e:	e753      	b.n	8011628 <_strtod_l+0x6f0>
 8011780:	461a      	mov	r2, r3
 8011782:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011784:	4620      	mov	r0, r4
 8011786:	f002 f843 	bl	8013810 <__lshift>
 801178a:	9018      	str	r0, [sp, #96]	; 0x60
 801178c:	2800      	cmp	r0, #0
 801178e:	f47f af7a 	bne.w	8011686 <_strtod_l+0x74e>
 8011792:	e600      	b.n	8011396 <_strtod_l+0x45e>
 8011794:	f3af 8000 	nop.w
 8011798:	94a03595 	.word	0x94a03595
 801179c:	3fdfffff 	.word	0x3fdfffff
 80117a0:	35afe535 	.word	0x35afe535
 80117a4:	3fe00000 	.word	0x3fe00000
 80117a8:	94a03595 	.word	0x94a03595
 80117ac:	3fcfffff 	.word	0x3fcfffff
 80117b0:	080151d8 	.word	0x080151d8
 80117b4:	fffffc02 	.word	0xfffffc02
 80117b8:	f8cd b020 	str.w	fp, [sp, #32]
 80117bc:	f040 8085 	bne.w	80118ca <_strtod_l+0x992>
 80117c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117c6:	b322      	cbz	r2, 8011812 <_strtod_l+0x8da>
 80117c8:	4ab7      	ldr	r2, [pc, #732]	; (8011aa8 <_strtod_l+0xb70>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d154      	bne.n	8011878 <_strtod_l+0x940>
 80117ce:	4651      	mov	r1, sl
 80117d0:	b1e7      	cbz	r7, 801180c <_strtod_l+0x8d4>
 80117d2:	4bb6      	ldr	r3, [pc, #728]	; (8011aac <_strtod_l+0xb74>)
 80117d4:	465a      	mov	r2, fp
 80117d6:	4013      	ands	r3, r2
 80117d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80117dc:	f04f 32ff 	mov.w	r2, #4294967295
 80117e0:	d803      	bhi.n	80117ea <_strtod_l+0x8b2>
 80117e2:	0d1b      	lsrs	r3, r3, #20
 80117e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80117e8:	409a      	lsls	r2, r3
 80117ea:	4291      	cmp	r1, r2
 80117ec:	d144      	bne.n	8011878 <_strtod_l+0x940>
 80117ee:	4bb0      	ldr	r3, [pc, #704]	; (8011ab0 <_strtod_l+0xb78>)
 80117f0:	9a08      	ldr	r2, [sp, #32]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d102      	bne.n	80117fc <_strtod_l+0x8c4>
 80117f6:	3101      	adds	r1, #1
 80117f8:	f43f adcd 	beq.w	8011396 <_strtod_l+0x45e>
 80117fc:	4bab      	ldr	r3, [pc, #684]	; (8011aac <_strtod_l+0xb74>)
 80117fe:	9a08      	ldr	r2, [sp, #32]
 8011800:	401a      	ands	r2, r3
 8011802:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8011806:	f04f 0a00 	mov.w	sl, #0
 801180a:	e790      	b.n	801172e <_strtod_l+0x7f6>
 801180c:	f04f 32ff 	mov.w	r2, #4294967295
 8011810:	e7eb      	b.n	80117ea <_strtod_l+0x8b2>
 8011812:	bb8b      	cbnz	r3, 8011878 <_strtod_l+0x940>
 8011814:	f1ba 0f00 	cmp.w	sl, #0
 8011818:	d12e      	bne.n	8011878 <_strtod_l+0x940>
 801181a:	465b      	mov	r3, fp
 801181c:	4aa3      	ldr	r2, [pc, #652]	; (8011aac <_strtod_l+0xb74>)
 801181e:	b30f      	cbz	r7, 8011864 <_strtod_l+0x92c>
 8011820:	ea02 010b 	and.w	r1, r2, fp
 8011824:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011828:	dc1c      	bgt.n	8011864 <_strtod_l+0x92c>
 801182a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801182e:	f77f ae48 	ble.w	80114c2 <_strtod_l+0x58a>
 8011832:	4aa0      	ldr	r2, [pc, #640]	; (8011ab4 <_strtod_l+0xb7c>)
 8011834:	2300      	movs	r3, #0
 8011836:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801183a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801183e:	ec4b ab17 	vmov	d7, sl, fp
 8011842:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011846:	ed8d 7b04 	vstr	d7, [sp, #16]
 801184a:	9b05      	ldr	r3, [sp, #20]
 801184c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011850:	2b00      	cmp	r3, #0
 8011852:	f47f adaa 	bne.w	80113aa <_strtod_l+0x472>
 8011856:	9b04      	ldr	r3, [sp, #16]
 8011858:	2b00      	cmp	r3, #0
 801185a:	f47f ada6 	bne.w	80113aa <_strtod_l+0x472>
 801185e:	2322      	movs	r3, #34	; 0x22
 8011860:	6023      	str	r3, [r4, #0]
 8011862:	e5a2      	b.n	80113aa <_strtod_l+0x472>
 8011864:	4013      	ands	r3, r2
 8011866:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801186a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801186e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011872:	f04f 3aff 	mov.w	sl, #4294967295
 8011876:	e75a      	b.n	801172e <_strtod_l+0x7f6>
 8011878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801187a:	b18b      	cbz	r3, 80118a0 <_strtod_l+0x968>
 801187c:	9a08      	ldr	r2, [sp, #32]
 801187e:	4213      	tst	r3, r2
 8011880:	f43f af55 	beq.w	801172e <_strtod_l+0x7f6>
 8011884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011886:	463a      	mov	r2, r7
 8011888:	4650      	mov	r0, sl
 801188a:	4659      	mov	r1, fp
 801188c:	b163      	cbz	r3, 80118a8 <_strtod_l+0x970>
 801188e:	f7ff fb38 	bl	8010f02 <sulp>
 8011892:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011896:	ee37 7b00 	vadd.f64	d7, d7, d0
 801189a:	ec5b ab17 	vmov	sl, fp, d7
 801189e:	e746      	b.n	801172e <_strtod_l+0x7f6>
 80118a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118a2:	ea13 0f0a 	tst.w	r3, sl
 80118a6:	e7eb      	b.n	8011880 <_strtod_l+0x948>
 80118a8:	f7ff fb2b 	bl	8010f02 <sulp>
 80118ac:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80118b0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80118b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80118b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80118c4:	f43f adfd 	beq.w	80114c2 <_strtod_l+0x58a>
 80118c8:	e731      	b.n	801172e <_strtod_l+0x7f6>
 80118ca:	4641      	mov	r1, r8
 80118cc:	4628      	mov	r0, r5
 80118ce:	f002 f930 	bl	8013b32 <__ratio>
 80118d2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80118d6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	d869      	bhi.n	80119b4 <_strtod_l+0xa7c>
 80118e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d045      	beq.n	8011972 <_strtod_l+0xa3a>
 80118e6:	4b74      	ldr	r3, [pc, #464]	; (8011ab8 <_strtod_l+0xb80>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80118ee:	9808      	ldr	r0, [sp, #32]
 80118f0:	496e      	ldr	r1, [pc, #440]	; (8011aac <_strtod_l+0xb74>)
 80118f2:	ea00 0601 	and.w	r6, r0, r1
 80118f6:	4871      	ldr	r0, [pc, #452]	; (8011abc <_strtod_l+0xb84>)
 80118f8:	4286      	cmp	r6, r0
 80118fa:	f040 8089 	bne.w	8011a10 <_strtod_l+0xad8>
 80118fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8011900:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011904:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011908:	9908      	ldr	r1, [sp, #32]
 801190a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801190e:	ec4b ab10 	vmov	d0, sl, fp
 8011912:	ec43 2b1c 	vmov	d12, r2, r3
 8011916:	f002 f847 	bl	80139a8 <__ulp>
 801191a:	ec4b ab1d 	vmov	d13, sl, fp
 801191e:	eeac db00 	vfma.f64	d13, d12, d0
 8011922:	ed8d db08 	vstr	d13, [sp, #32]
 8011926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011928:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801192a:	4a65      	ldr	r2, [pc, #404]	; (8011ac0 <_strtod_l+0xb88>)
 801192c:	4019      	ands	r1, r3
 801192e:	4291      	cmp	r1, r2
 8011930:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8011934:	d948      	bls.n	80119c8 <_strtod_l+0xa90>
 8011936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011938:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801193c:	4293      	cmp	r3, r2
 801193e:	d103      	bne.n	8011948 <_strtod_l+0xa10>
 8011940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011942:	3301      	adds	r3, #1
 8011944:	f43f ad27 	beq.w	8011396 <_strtod_l+0x45e>
 8011948:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011ab0 <_strtod_l+0xb78>
 801194c:	f04f 3aff 	mov.w	sl, #4294967295
 8011950:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011952:	4620      	mov	r0, r4
 8011954:	f001 fd90 	bl	8013478 <_Bfree>
 8011958:	4649      	mov	r1, r9
 801195a:	4620      	mov	r0, r4
 801195c:	f001 fd8c 	bl	8013478 <_Bfree>
 8011960:	4641      	mov	r1, r8
 8011962:	4620      	mov	r0, r4
 8011964:	f001 fd88 	bl	8013478 <_Bfree>
 8011968:	4629      	mov	r1, r5
 801196a:	4620      	mov	r0, r4
 801196c:	f001 fd84 	bl	8013478 <_Bfree>
 8011970:	e60e      	b.n	8011590 <_strtod_l+0x658>
 8011972:	f1ba 0f00 	cmp.w	sl, #0
 8011976:	d113      	bne.n	80119a0 <_strtod_l+0xa68>
 8011978:	9b08      	ldr	r3, [sp, #32]
 801197a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801197e:	b9b3      	cbnz	r3, 80119ae <_strtod_l+0xa76>
 8011980:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011984:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011990:	d401      	bmi.n	8011996 <_strtod_l+0xa5e>
 8011992:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011996:	eeb1 7b48 	vneg.f64	d7, d8
 801199a:	ec53 2b17 	vmov	r2, r3, d7
 801199e:	e7a6      	b.n	80118ee <_strtod_l+0x9b6>
 80119a0:	f1ba 0f01 	cmp.w	sl, #1
 80119a4:	d103      	bne.n	80119ae <_strtod_l+0xa76>
 80119a6:	9b08      	ldr	r3, [sp, #32]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f43f ad8a 	beq.w	80114c2 <_strtod_l+0x58a>
 80119ae:	2200      	movs	r2, #0
 80119b0:	4b44      	ldr	r3, [pc, #272]	; (8011ac4 <_strtod_l+0xb8c>)
 80119b2:	e79a      	b.n	80118ea <_strtod_l+0x9b2>
 80119b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80119ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d0e9      	beq.n	8011996 <_strtod_l+0xa5e>
 80119c2:	ec53 2b18 	vmov	r2, r3, d8
 80119c6:	e792      	b.n	80118ee <_strtod_l+0x9b6>
 80119c8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80119cc:	2f00      	cmp	r7, #0
 80119ce:	d1bf      	bne.n	8011950 <_strtod_l+0xa18>
 80119d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119d4:	0d1b      	lsrs	r3, r3, #20
 80119d6:	051b      	lsls	r3, r3, #20
 80119d8:	429e      	cmp	r6, r3
 80119da:	d1b9      	bne.n	8011950 <_strtod_l+0xa18>
 80119dc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80119e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119e2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80119e6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80119ea:	b92b      	cbnz	r3, 80119f8 <_strtod_l+0xac0>
 80119ec:	f1ba 0f00 	cmp.w	sl, #0
 80119f0:	d102      	bne.n	80119f8 <_strtod_l+0xac0>
 80119f2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 80119f6:	b3d2      	cbz	r2, 8011a6e <_strtod_l+0xb36>
 80119f8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	f53f acd3 	bmi.w	80113aa <_strtod_l+0x472>
 8011a04:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0c:	dda0      	ble.n	8011950 <_strtod_l+0xa18>
 8011a0e:	e4cc      	b.n	80113aa <_strtod_l+0x472>
 8011a10:	b1ef      	cbz	r7, 8011a4e <_strtod_l+0xb16>
 8011a12:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011a16:	d81a      	bhi.n	8011a4e <_strtod_l+0xb16>
 8011a18:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011aa0 <_strtod_l+0xb68>
 8011a1c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a24:	d810      	bhi.n	8011a48 <_strtod_l+0xb10>
 8011a26:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011a2a:	ee17 3a90 	vmov	r3, s15
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	bf08      	it	eq
 8011a32:	2301      	moveq	r3, #1
 8011a34:	ee07 3a90 	vmov	s15, r3
 8011a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a3a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011a3e:	b99b      	cbnz	r3, 8011a68 <_strtod_l+0xb30>
 8011a40:	eeb1 7b48 	vneg.f64	d7, d8
 8011a44:	ec53 2b17 	vmov	r2, r3, d7
 8011a48:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011a4c:	1b8b      	subs	r3, r1, r6
 8011a4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011a52:	ec43 2b1c 	vmov	d12, r2, r3
 8011a56:	f001 ffa7 	bl	80139a8 <__ulp>
 8011a5a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011a5e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011a62:	ec5b ab17 	vmov	sl, fp, d7
 8011a66:	e7b1      	b.n	80119cc <_strtod_l+0xa94>
 8011a68:	ec53 2b18 	vmov	r2, r3, d8
 8011a6c:	e7ec      	b.n	8011a48 <_strtod_l+0xb10>
 8011a6e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	f57f af6b 	bpl.w	8011950 <_strtod_l+0xa18>
 8011a7a:	e496      	b.n	80113aa <_strtod_l+0x472>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8011a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a84:	6013      	str	r3, [r2, #0]
 8011a86:	f7ff ba9d 	b.w	8010fc4 <_strtod_l+0x8c>
 8011a8a:	2a65      	cmp	r2, #101	; 0x65
 8011a8c:	f04f 0100 	mov.w	r1, #0
 8011a90:	f43f ab97 	beq.w	80111c2 <_strtod_l+0x28a>
 8011a94:	2701      	movs	r7, #1
 8011a96:	460b      	mov	r3, r1
 8011a98:	9704      	str	r7, [sp, #16]
 8011a9a:	f7ff bb0a 	b.w	80110b2 <_strtod_l+0x17a>
 8011a9e:	bf00      	nop
 8011aa0:	ffc00000 	.word	0xffc00000
 8011aa4:	41dfffff 	.word	0x41dfffff
 8011aa8:	000fffff 	.word	0x000fffff
 8011aac:	7ff00000 	.word	0x7ff00000
 8011ab0:	7fefffff 	.word	0x7fefffff
 8011ab4:	39500000 	.word	0x39500000
 8011ab8:	3ff00000 	.word	0x3ff00000
 8011abc:	7fe00000 	.word	0x7fe00000
 8011ac0:	7c9fffff 	.word	0x7c9fffff
 8011ac4:	bff00000 	.word	0xbff00000

08011ac8 <_strtod_r>:
 8011ac8:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <_strtod_r+0x18>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	b410      	push	{r4}
 8011ace:	6a1b      	ldr	r3, [r3, #32]
 8011ad0:	4c04      	ldr	r4, [pc, #16]	; (8011ae4 <_strtod_r+0x1c>)
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bf08      	it	eq
 8011ad6:	4623      	moveq	r3, r4
 8011ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011adc:	f7ff ba2c 	b.w	8010f38 <_strtod_l>
 8011ae0:	200003ac 	.word	0x200003ac
 8011ae4:	20000410 	.word	0x20000410

08011ae8 <_strtol_l.isra.0>:
 8011ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aec:	4680      	mov	r8, r0
 8011aee:	4689      	mov	r9, r1
 8011af0:	4692      	mov	sl, r2
 8011af2:	461e      	mov	r6, r3
 8011af4:	460f      	mov	r7, r1
 8011af6:	463d      	mov	r5, r7
 8011af8:	9808      	ldr	r0, [sp, #32]
 8011afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011afe:	f001 fbdb 	bl	80132b8 <__locale_ctype_ptr_l>
 8011b02:	4420      	add	r0, r4
 8011b04:	7843      	ldrb	r3, [r0, #1]
 8011b06:	f013 0308 	ands.w	r3, r3, #8
 8011b0a:	d132      	bne.n	8011b72 <_strtol_l.isra.0+0x8a>
 8011b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8011b0e:	d132      	bne.n	8011b76 <_strtol_l.isra.0+0x8e>
 8011b10:	787c      	ldrb	r4, [r7, #1]
 8011b12:	1cbd      	adds	r5, r7, #2
 8011b14:	2201      	movs	r2, #1
 8011b16:	2e00      	cmp	r6, #0
 8011b18:	d05d      	beq.n	8011bd6 <_strtol_l.isra.0+0xee>
 8011b1a:	2e10      	cmp	r6, #16
 8011b1c:	d109      	bne.n	8011b32 <_strtol_l.isra.0+0x4a>
 8011b1e:	2c30      	cmp	r4, #48	; 0x30
 8011b20:	d107      	bne.n	8011b32 <_strtol_l.isra.0+0x4a>
 8011b22:	782b      	ldrb	r3, [r5, #0]
 8011b24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b28:	2b58      	cmp	r3, #88	; 0x58
 8011b2a:	d14f      	bne.n	8011bcc <_strtol_l.isra.0+0xe4>
 8011b2c:	786c      	ldrb	r4, [r5, #1]
 8011b2e:	2610      	movs	r6, #16
 8011b30:	3502      	adds	r5, #2
 8011b32:	2a00      	cmp	r2, #0
 8011b34:	bf14      	ite	ne
 8011b36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011b3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011b3e:	2700      	movs	r7, #0
 8011b40:	fbb1 fcf6 	udiv	ip, r1, r6
 8011b44:	4638      	mov	r0, r7
 8011b46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011b4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011b4e:	2b09      	cmp	r3, #9
 8011b50:	d817      	bhi.n	8011b82 <_strtol_l.isra.0+0x9a>
 8011b52:	461c      	mov	r4, r3
 8011b54:	42a6      	cmp	r6, r4
 8011b56:	dd23      	ble.n	8011ba0 <_strtol_l.isra.0+0xb8>
 8011b58:	1c7b      	adds	r3, r7, #1
 8011b5a:	d007      	beq.n	8011b6c <_strtol_l.isra.0+0x84>
 8011b5c:	4584      	cmp	ip, r0
 8011b5e:	d31c      	bcc.n	8011b9a <_strtol_l.isra.0+0xb2>
 8011b60:	d101      	bne.n	8011b66 <_strtol_l.isra.0+0x7e>
 8011b62:	45a6      	cmp	lr, r4
 8011b64:	db19      	blt.n	8011b9a <_strtol_l.isra.0+0xb2>
 8011b66:	fb00 4006 	mla	r0, r0, r6, r4
 8011b6a:	2701      	movs	r7, #1
 8011b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b70:	e7eb      	b.n	8011b4a <_strtol_l.isra.0+0x62>
 8011b72:	462f      	mov	r7, r5
 8011b74:	e7bf      	b.n	8011af6 <_strtol_l.isra.0+0xe>
 8011b76:	2c2b      	cmp	r4, #43	; 0x2b
 8011b78:	bf04      	itt	eq
 8011b7a:	1cbd      	addeq	r5, r7, #2
 8011b7c:	787c      	ldrbeq	r4, [r7, #1]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	e7c9      	b.n	8011b16 <_strtol_l.isra.0+0x2e>
 8011b82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011b86:	2b19      	cmp	r3, #25
 8011b88:	d801      	bhi.n	8011b8e <_strtol_l.isra.0+0xa6>
 8011b8a:	3c37      	subs	r4, #55	; 0x37
 8011b8c:	e7e2      	b.n	8011b54 <_strtol_l.isra.0+0x6c>
 8011b8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011b92:	2b19      	cmp	r3, #25
 8011b94:	d804      	bhi.n	8011ba0 <_strtol_l.isra.0+0xb8>
 8011b96:	3c57      	subs	r4, #87	; 0x57
 8011b98:	e7dc      	b.n	8011b54 <_strtol_l.isra.0+0x6c>
 8011b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8011b9e:	e7e5      	b.n	8011b6c <_strtol_l.isra.0+0x84>
 8011ba0:	1c7b      	adds	r3, r7, #1
 8011ba2:	d108      	bne.n	8011bb6 <_strtol_l.isra.0+0xce>
 8011ba4:	2322      	movs	r3, #34	; 0x22
 8011ba6:	f8c8 3000 	str.w	r3, [r8]
 8011baa:	4608      	mov	r0, r1
 8011bac:	f1ba 0f00 	cmp.w	sl, #0
 8011bb0:	d107      	bne.n	8011bc2 <_strtol_l.isra.0+0xda>
 8011bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb6:	b102      	cbz	r2, 8011bba <_strtol_l.isra.0+0xd2>
 8011bb8:	4240      	negs	r0, r0
 8011bba:	f1ba 0f00 	cmp.w	sl, #0
 8011bbe:	d0f8      	beq.n	8011bb2 <_strtol_l.isra.0+0xca>
 8011bc0:	b10f      	cbz	r7, 8011bc6 <_strtol_l.isra.0+0xde>
 8011bc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8011bc6:	f8ca 9000 	str.w	r9, [sl]
 8011bca:	e7f2      	b.n	8011bb2 <_strtol_l.isra.0+0xca>
 8011bcc:	2430      	movs	r4, #48	; 0x30
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	d1af      	bne.n	8011b32 <_strtol_l.isra.0+0x4a>
 8011bd2:	2608      	movs	r6, #8
 8011bd4:	e7ad      	b.n	8011b32 <_strtol_l.isra.0+0x4a>
 8011bd6:	2c30      	cmp	r4, #48	; 0x30
 8011bd8:	d0a3      	beq.n	8011b22 <_strtol_l.isra.0+0x3a>
 8011bda:	260a      	movs	r6, #10
 8011bdc:	e7a9      	b.n	8011b32 <_strtol_l.isra.0+0x4a>
	...

08011be0 <_strtol_r>:
 8011be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011be2:	4c06      	ldr	r4, [pc, #24]	; (8011bfc <_strtol_r+0x1c>)
 8011be4:	4d06      	ldr	r5, [pc, #24]	; (8011c00 <_strtol_r+0x20>)
 8011be6:	6824      	ldr	r4, [r4, #0]
 8011be8:	6a24      	ldr	r4, [r4, #32]
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	bf08      	it	eq
 8011bee:	462c      	moveq	r4, r5
 8011bf0:	9400      	str	r4, [sp, #0]
 8011bf2:	f7ff ff79 	bl	8011ae8 <_strtol_l.isra.0>
 8011bf6:	b003      	add	sp, #12
 8011bf8:	bd30      	pop	{r4, r5, pc}
 8011bfa:	bf00      	nop
 8011bfc:	200003ac 	.word	0x200003ac
 8011c00:	20000410 	.word	0x20000410

08011c04 <__swbuf_r>:
 8011c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c06:	460e      	mov	r6, r1
 8011c08:	4614      	mov	r4, r2
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b118      	cbz	r0, 8011c16 <__swbuf_r+0x12>
 8011c0e:	6983      	ldr	r3, [r0, #24]
 8011c10:	b90b      	cbnz	r3, 8011c16 <__swbuf_r+0x12>
 8011c12:	f000 ffa1 	bl	8012b58 <__sinit>
 8011c16:	4b21      	ldr	r3, [pc, #132]	; (8011c9c <__swbuf_r+0x98>)
 8011c18:	429c      	cmp	r4, r3
 8011c1a:	d12a      	bne.n	8011c72 <__swbuf_r+0x6e>
 8011c1c:	686c      	ldr	r4, [r5, #4]
 8011c1e:	69a3      	ldr	r3, [r4, #24]
 8011c20:	60a3      	str	r3, [r4, #8]
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	071a      	lsls	r2, r3, #28
 8011c26:	d52e      	bpl.n	8011c86 <__swbuf_r+0x82>
 8011c28:	6923      	ldr	r3, [r4, #16]
 8011c2a:	b363      	cbz	r3, 8011c86 <__swbuf_r+0x82>
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	6820      	ldr	r0, [r4, #0]
 8011c30:	1ac0      	subs	r0, r0, r3
 8011c32:	6963      	ldr	r3, [r4, #20]
 8011c34:	b2f6      	uxtb	r6, r6
 8011c36:	4283      	cmp	r3, r0
 8011c38:	4637      	mov	r7, r6
 8011c3a:	dc04      	bgt.n	8011c46 <__swbuf_r+0x42>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f000 ff20 	bl	8012a84 <_fflush_r>
 8011c44:	bb28      	cbnz	r0, 8011c92 <__swbuf_r+0x8e>
 8011c46:	68a3      	ldr	r3, [r4, #8]
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	60a3      	str	r3, [r4, #8]
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	6022      	str	r2, [r4, #0]
 8011c52:	701e      	strb	r6, [r3, #0]
 8011c54:	6963      	ldr	r3, [r4, #20]
 8011c56:	3001      	adds	r0, #1
 8011c58:	4283      	cmp	r3, r0
 8011c5a:	d004      	beq.n	8011c66 <__swbuf_r+0x62>
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	07db      	lsls	r3, r3, #31
 8011c60:	d519      	bpl.n	8011c96 <__swbuf_r+0x92>
 8011c62:	2e0a      	cmp	r6, #10
 8011c64:	d117      	bne.n	8011c96 <__swbuf_r+0x92>
 8011c66:	4621      	mov	r1, r4
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f000 ff0b 	bl	8012a84 <_fflush_r>
 8011c6e:	b190      	cbz	r0, 8011c96 <__swbuf_r+0x92>
 8011c70:	e00f      	b.n	8011c92 <__swbuf_r+0x8e>
 8011c72:	4b0b      	ldr	r3, [pc, #44]	; (8011ca0 <__swbuf_r+0x9c>)
 8011c74:	429c      	cmp	r4, r3
 8011c76:	d101      	bne.n	8011c7c <__swbuf_r+0x78>
 8011c78:	68ac      	ldr	r4, [r5, #8]
 8011c7a:	e7d0      	b.n	8011c1e <__swbuf_r+0x1a>
 8011c7c:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <__swbuf_r+0xa0>)
 8011c7e:	429c      	cmp	r4, r3
 8011c80:	bf08      	it	eq
 8011c82:	68ec      	ldreq	r4, [r5, #12]
 8011c84:	e7cb      	b.n	8011c1e <__swbuf_r+0x1a>
 8011c86:	4621      	mov	r1, r4
 8011c88:	4628      	mov	r0, r5
 8011c8a:	f000 f81f 	bl	8011ccc <__swsetup_r>
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	d0cc      	beq.n	8011c2c <__swbuf_r+0x28>
 8011c92:	f04f 37ff 	mov.w	r7, #4294967295
 8011c96:	4638      	mov	r0, r7
 8011c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	08015230 	.word	0x08015230
 8011ca0:	08015250 	.word	0x08015250
 8011ca4:	08015210 	.word	0x08015210

08011ca8 <_write_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4c07      	ldr	r4, [pc, #28]	; (8011cc8 <_write_r+0x20>)
 8011cac:	4605      	mov	r5, r0
 8011cae:	4608      	mov	r0, r1
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	6022      	str	r2, [r4, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	f7fa fe92 	bl	800c9e0 <_write>
 8011cbc:	1c43      	adds	r3, r0, #1
 8011cbe:	d102      	bne.n	8011cc6 <_write_r+0x1e>
 8011cc0:	6823      	ldr	r3, [r4, #0]
 8011cc2:	b103      	cbz	r3, 8011cc6 <_write_r+0x1e>
 8011cc4:	602b      	str	r3, [r5, #0]
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	20011bbc 	.word	0x20011bbc

08011ccc <__swsetup_r>:
 8011ccc:	4b32      	ldr	r3, [pc, #200]	; (8011d98 <__swsetup_r+0xcc>)
 8011cce:	b570      	push	{r4, r5, r6, lr}
 8011cd0:	681d      	ldr	r5, [r3, #0]
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	b125      	cbz	r5, 8011ce2 <__swsetup_r+0x16>
 8011cd8:	69ab      	ldr	r3, [r5, #24]
 8011cda:	b913      	cbnz	r3, 8011ce2 <__swsetup_r+0x16>
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f000 ff3b 	bl	8012b58 <__sinit>
 8011ce2:	4b2e      	ldr	r3, [pc, #184]	; (8011d9c <__swsetup_r+0xd0>)
 8011ce4:	429c      	cmp	r4, r3
 8011ce6:	d10f      	bne.n	8011d08 <__swsetup_r+0x3c>
 8011ce8:	686c      	ldr	r4, [r5, #4]
 8011cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	0715      	lsls	r5, r2, #28
 8011cf2:	d42c      	bmi.n	8011d4e <__swsetup_r+0x82>
 8011cf4:	06d0      	lsls	r0, r2, #27
 8011cf6:	d411      	bmi.n	8011d1c <__swsetup_r+0x50>
 8011cf8:	2209      	movs	r2, #9
 8011cfa:	6032      	str	r2, [r6, #0]
 8011cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d00:	81a3      	strh	r3, [r4, #12]
 8011d02:	f04f 30ff 	mov.w	r0, #4294967295
 8011d06:	e03e      	b.n	8011d86 <__swsetup_r+0xba>
 8011d08:	4b25      	ldr	r3, [pc, #148]	; (8011da0 <__swsetup_r+0xd4>)
 8011d0a:	429c      	cmp	r4, r3
 8011d0c:	d101      	bne.n	8011d12 <__swsetup_r+0x46>
 8011d0e:	68ac      	ldr	r4, [r5, #8]
 8011d10:	e7eb      	b.n	8011cea <__swsetup_r+0x1e>
 8011d12:	4b24      	ldr	r3, [pc, #144]	; (8011da4 <__swsetup_r+0xd8>)
 8011d14:	429c      	cmp	r4, r3
 8011d16:	bf08      	it	eq
 8011d18:	68ec      	ldreq	r4, [r5, #12]
 8011d1a:	e7e6      	b.n	8011cea <__swsetup_r+0x1e>
 8011d1c:	0751      	lsls	r1, r2, #29
 8011d1e:	d512      	bpl.n	8011d46 <__swsetup_r+0x7a>
 8011d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d22:	b141      	cbz	r1, 8011d36 <__swsetup_r+0x6a>
 8011d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d28:	4299      	cmp	r1, r3
 8011d2a:	d002      	beq.n	8011d32 <__swsetup_r+0x66>
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	f7fe f8bf 	bl	800feb0 <_free_r>
 8011d32:	2300      	movs	r3, #0
 8011d34:	6363      	str	r3, [r4, #52]	; 0x34
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	2300      	movs	r3, #0
 8011d40:	6063      	str	r3, [r4, #4]
 8011d42:	6923      	ldr	r3, [r4, #16]
 8011d44:	6023      	str	r3, [r4, #0]
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	f043 0308 	orr.w	r3, r3, #8
 8011d4c:	81a3      	strh	r3, [r4, #12]
 8011d4e:	6923      	ldr	r3, [r4, #16]
 8011d50:	b94b      	cbnz	r3, 8011d66 <__swsetup_r+0x9a>
 8011d52:	89a3      	ldrh	r3, [r4, #12]
 8011d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d5c:	d003      	beq.n	8011d66 <__swsetup_r+0x9a>
 8011d5e:	4621      	mov	r1, r4
 8011d60:	4630      	mov	r0, r6
 8011d62:	f001 fb01 	bl	8013368 <__smakebuf_r>
 8011d66:	89a2      	ldrh	r2, [r4, #12]
 8011d68:	f012 0301 	ands.w	r3, r2, #1
 8011d6c:	d00c      	beq.n	8011d88 <__swsetup_r+0xbc>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	60a3      	str	r3, [r4, #8]
 8011d72:	6963      	ldr	r3, [r4, #20]
 8011d74:	425b      	negs	r3, r3
 8011d76:	61a3      	str	r3, [r4, #24]
 8011d78:	6923      	ldr	r3, [r4, #16]
 8011d7a:	b953      	cbnz	r3, 8011d92 <__swsetup_r+0xc6>
 8011d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011d84:	d1ba      	bne.n	8011cfc <__swsetup_r+0x30>
 8011d86:	bd70      	pop	{r4, r5, r6, pc}
 8011d88:	0792      	lsls	r2, r2, #30
 8011d8a:	bf58      	it	pl
 8011d8c:	6963      	ldrpl	r3, [r4, #20]
 8011d8e:	60a3      	str	r3, [r4, #8]
 8011d90:	e7f2      	b.n	8011d78 <__swsetup_r+0xac>
 8011d92:	2000      	movs	r0, #0
 8011d94:	e7f7      	b.n	8011d86 <__swsetup_r+0xba>
 8011d96:	bf00      	nop
 8011d98:	200003ac 	.word	0x200003ac
 8011d9c:	08015230 	.word	0x08015230
 8011da0:	08015250 	.word	0x08015250
 8011da4:	08015210 	.word	0x08015210

08011da8 <_close_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4c06      	ldr	r4, [pc, #24]	; (8011dc4 <_close_r+0x1c>)
 8011dac:	2300      	movs	r3, #0
 8011dae:	4605      	mov	r5, r0
 8011db0:	4608      	mov	r0, r1
 8011db2:	6023      	str	r3, [r4, #0]
 8011db4:	f002 fe54 	bl	8014a60 <_close>
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d102      	bne.n	8011dc2 <_close_r+0x1a>
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	b103      	cbz	r3, 8011dc2 <_close_r+0x1a>
 8011dc0:	602b      	str	r3, [r5, #0]
 8011dc2:	bd38      	pop	{r3, r4, r5, pc}
 8011dc4:	20011bbc 	.word	0x20011bbc

08011dc8 <quorem>:
 8011dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	6903      	ldr	r3, [r0, #16]
 8011dce:	690c      	ldr	r4, [r1, #16]
 8011dd0:	42a3      	cmp	r3, r4
 8011dd2:	4680      	mov	r8, r0
 8011dd4:	f2c0 8082 	blt.w	8011edc <quorem+0x114>
 8011dd8:	3c01      	subs	r4, #1
 8011dda:	f101 0714 	add.w	r7, r1, #20
 8011dde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011de2:	f100 0614 	add.w	r6, r0, #20
 8011de6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011dea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011dee:	eb06 030c 	add.w	r3, r6, ip
 8011df2:	3501      	adds	r5, #1
 8011df4:	eb07 090c 	add.w	r9, r7, ip
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	fbb0 f5f5 	udiv	r5, r0, r5
 8011dfe:	b395      	cbz	r5, 8011e66 <quorem+0x9e>
 8011e00:	f04f 0a00 	mov.w	sl, #0
 8011e04:	4638      	mov	r0, r7
 8011e06:	46b6      	mov	lr, r6
 8011e08:	46d3      	mov	fp, sl
 8011e0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e0e:	b293      	uxth	r3, r2
 8011e10:	fb05 a303 	mla	r3, r5, r3, sl
 8011e14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	ebab 0303 	sub.w	r3, fp, r3
 8011e1e:	0c12      	lsrs	r2, r2, #16
 8011e20:	f8de b000 	ldr.w	fp, [lr]
 8011e24:	fb05 a202 	mla	r2, r5, r2, sl
 8011e28:	fa13 f38b 	uxtah	r3, r3, fp
 8011e2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011e30:	fa1f fb82 	uxth.w	fp, r2
 8011e34:	f8de 2000 	ldr.w	r2, [lr]
 8011e38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e46:	4581      	cmp	r9, r0
 8011e48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011e4c:	f84e 3b04 	str.w	r3, [lr], #4
 8011e50:	d2db      	bcs.n	8011e0a <quorem+0x42>
 8011e52:	f856 300c 	ldr.w	r3, [r6, ip]
 8011e56:	b933      	cbnz	r3, 8011e66 <quorem+0x9e>
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	3b04      	subs	r3, #4
 8011e5c:	429e      	cmp	r6, r3
 8011e5e:	461a      	mov	r2, r3
 8011e60:	d330      	bcc.n	8011ec4 <quorem+0xfc>
 8011e62:	f8c8 4010 	str.w	r4, [r8, #16]
 8011e66:	4640      	mov	r0, r8
 8011e68:	f001 fd26 	bl	80138b8 <__mcmp>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	db25      	blt.n	8011ebc <quorem+0xf4>
 8011e70:	3501      	adds	r5, #1
 8011e72:	4630      	mov	r0, r6
 8011e74:	f04f 0c00 	mov.w	ip, #0
 8011e78:	f857 2b04 	ldr.w	r2, [r7], #4
 8011e7c:	f8d0 e000 	ldr.w	lr, [r0]
 8011e80:	b293      	uxth	r3, r2
 8011e82:	ebac 0303 	sub.w	r3, ip, r3
 8011e86:	0c12      	lsrs	r2, r2, #16
 8011e88:	fa13 f38e 	uxtah	r3, r3, lr
 8011e8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e9a:	45b9      	cmp	r9, r7
 8011e9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ea0:	f840 3b04 	str.w	r3, [r0], #4
 8011ea4:	d2e8      	bcs.n	8011e78 <quorem+0xb0>
 8011ea6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011eaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011eae:	b92a      	cbnz	r2, 8011ebc <quorem+0xf4>
 8011eb0:	3b04      	subs	r3, #4
 8011eb2:	429e      	cmp	r6, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	d30b      	bcc.n	8011ed0 <quorem+0x108>
 8011eb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	b003      	add	sp, #12
 8011ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec4:	6812      	ldr	r2, [r2, #0]
 8011ec6:	3b04      	subs	r3, #4
 8011ec8:	2a00      	cmp	r2, #0
 8011eca:	d1ca      	bne.n	8011e62 <quorem+0x9a>
 8011ecc:	3c01      	subs	r4, #1
 8011ece:	e7c5      	b.n	8011e5c <quorem+0x94>
 8011ed0:	6812      	ldr	r2, [r2, #0]
 8011ed2:	3b04      	subs	r3, #4
 8011ed4:	2a00      	cmp	r2, #0
 8011ed6:	d1ef      	bne.n	8011eb8 <quorem+0xf0>
 8011ed8:	3c01      	subs	r4, #1
 8011eda:	e7ea      	b.n	8011eb2 <quorem+0xea>
 8011edc:	2000      	movs	r0, #0
 8011ede:	e7ee      	b.n	8011ebe <quorem+0xf6>

08011ee0 <_dtoa_r>:
 8011ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ec57 6b10 	vmov	r6, r7, d0
 8011ee8:	b095      	sub	sp, #84	; 0x54
 8011eea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011eec:	9108      	str	r1, [sp, #32]
 8011eee:	4604      	mov	r4, r0
 8011ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8011ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8011ef4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011ef8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011efc:	b93d      	cbnz	r5, 8011f0e <_dtoa_r+0x2e>
 8011efe:	2010      	movs	r0, #16
 8011f00:	f7fd ffac 	bl	800fe5c <malloc>
 8011f04:	6260      	str	r0, [r4, #36]	; 0x24
 8011f06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f0a:	6005      	str	r5, [r0, #0]
 8011f0c:	60c5      	str	r5, [r0, #12]
 8011f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f10:	6819      	ldr	r1, [r3, #0]
 8011f12:	b151      	cbz	r1, 8011f2a <_dtoa_r+0x4a>
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	604a      	str	r2, [r1, #4]
 8011f18:	2301      	movs	r3, #1
 8011f1a:	4093      	lsls	r3, r2
 8011f1c:	608b      	str	r3, [r1, #8]
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f001 faaa 	bl	8013478 <_Bfree>
 8011f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f26:	2200      	movs	r2, #0
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	1e3b      	subs	r3, r7, #0
 8011f2c:	bfb9      	ittee	lt
 8011f2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f32:	9303      	strlt	r3, [sp, #12]
 8011f34:	2300      	movge	r3, #0
 8011f36:	f8c8 3000 	strge.w	r3, [r8]
 8011f3a:	9d03      	ldr	r5, [sp, #12]
 8011f3c:	4bac      	ldr	r3, [pc, #688]	; (80121f0 <_dtoa_r+0x310>)
 8011f3e:	bfbc      	itt	lt
 8011f40:	2201      	movlt	r2, #1
 8011f42:	f8c8 2000 	strlt.w	r2, [r8]
 8011f46:	43ab      	bics	r3, r5
 8011f48:	d11b      	bne.n	8011f82 <_dtoa_r+0xa2>
 8011f4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f4c:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f50:	6013      	str	r3, [r2, #0]
 8011f52:	9b02      	ldr	r3, [sp, #8]
 8011f54:	b923      	cbnz	r3, 8011f60 <_dtoa_r+0x80>
 8011f56:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011f5a:	2d00      	cmp	r5, #0
 8011f5c:	f000 84dd 	beq.w	801291a <_dtoa_r+0xa3a>
 8011f60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f62:	b953      	cbnz	r3, 8011f7a <_dtoa_r+0x9a>
 8011f64:	4ba3      	ldr	r3, [pc, #652]	; (80121f4 <_dtoa_r+0x314>)
 8011f66:	e020      	b.n	8011faa <_dtoa_r+0xca>
 8011f68:	4ba3      	ldr	r3, [pc, #652]	; (80121f8 <_dtoa_r+0x318>)
 8011f6a:	9304      	str	r3, [sp, #16]
 8011f6c:	3308      	adds	r3, #8
 8011f6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	9804      	ldr	r0, [sp, #16]
 8011f74:	b015      	add	sp, #84	; 0x54
 8011f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7a:	4b9e      	ldr	r3, [pc, #632]	; (80121f4 <_dtoa_r+0x314>)
 8011f7c:	9304      	str	r3, [sp, #16]
 8011f7e:	3303      	adds	r3, #3
 8011f80:	e7f5      	b.n	8011f6e <_dtoa_r+0x8e>
 8011f82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f92:	d10c      	bne.n	8011fae <_dtoa_r+0xce>
 8011f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f96:	2301      	movs	r3, #1
 8011f98:	6013      	str	r3, [r2, #0]
 8011f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 84b9 	beq.w	8012914 <_dtoa_r+0xa34>
 8011fa2:	4b96      	ldr	r3, [pc, #600]	; (80121fc <_dtoa_r+0x31c>)
 8011fa4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011fa6:	6013      	str	r3, [r2, #0]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	9304      	str	r3, [sp, #16]
 8011fac:	e7e1      	b.n	8011f72 <_dtoa_r+0x92>
 8011fae:	a913      	add	r1, sp, #76	; 0x4c
 8011fb0:	aa12      	add	r2, sp, #72	; 0x48
 8011fb2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f001 fd6c 	bl	8013a94 <__d2b>
 8011fbc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011fc0:	9001      	str	r0, [sp, #4]
 8011fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011fc4:	2e00      	cmp	r6, #0
 8011fc6:	d046      	beq.n	8012056 <_dtoa_r+0x176>
 8011fc8:	9805      	ldr	r0, [sp, #20]
 8011fca:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fd2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011fd6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fda:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8011fde:	2700      	movs	r7, #0
 8011fe0:	ee07 aa90 	vmov	s15, sl
 8011fe4:	ec43 2b16 	vmov	d6, r2, r3
 8011fe8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011fec:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80121d8 <_dtoa_r+0x2f8>
 8011ff0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ff8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80121e0 <_dtoa_r+0x300>
 8011ffc:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012000:	eeb0 7b46 	vmov.f64	d7, d6
 8012004:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80121e8 <_dtoa_r+0x308>
 8012008:	eea5 7b06 	vfma.f64	d7, d5, d6
 801200c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012010:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012018:	ee16 ba90 	vmov	fp, s13
 801201c:	d508      	bpl.n	8012030 <_dtoa_r+0x150>
 801201e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012022:	eeb4 6b47 	vcmp.f64	d6, d7
 8012026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202a:	bf18      	it	ne
 801202c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012030:	f1bb 0f16 	cmp.w	fp, #22
 8012034:	d834      	bhi.n	80120a0 <_dtoa_r+0x1c0>
 8012036:	4b72      	ldr	r3, [pc, #456]	; (8012200 <_dtoa_r+0x320>)
 8012038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801203c:	ed93 7b00 	vldr	d7, [r3]
 8012040:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012044:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204c:	dd01      	ble.n	8012052 <_dtoa_r+0x172>
 801204e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012052:	2300      	movs	r3, #0
 8012054:	e025      	b.n	80120a2 <_dtoa_r+0x1c2>
 8012056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012058:	eb01 0a03 	add.w	sl, r1, r3
 801205c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012060:	2b20      	cmp	r3, #32
 8012062:	dd17      	ble.n	8012094 <_dtoa_r+0x1b4>
 8012064:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012068:	9a02      	ldr	r2, [sp, #8]
 801206a:	409d      	lsls	r5, r3
 801206c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012070:	fa22 f303 	lsr.w	r3, r2, r3
 8012074:	432b      	orrs	r3, r5
 8012076:	ee07 3a90 	vmov	s15, r3
 801207a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801207e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012082:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012086:	9805      	ldr	r0, [sp, #20]
 8012088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801208c:	2701      	movs	r7, #1
 801208e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8012092:	e7a5      	b.n	8011fe0 <_dtoa_r+0x100>
 8012094:	9a02      	ldr	r2, [sp, #8]
 8012096:	f1c3 0320 	rsb	r3, r3, #32
 801209a:	fa02 f303 	lsl.w	r3, r2, r3
 801209e:	e7ea      	b.n	8012076 <_dtoa_r+0x196>
 80120a0:	2301      	movs	r3, #1
 80120a2:	eba1 0a0a 	sub.w	sl, r1, sl
 80120a6:	9310      	str	r3, [sp, #64]	; 0x40
 80120a8:	f1ba 0301 	subs.w	r3, sl, #1
 80120ac:	9307      	str	r3, [sp, #28]
 80120ae:	bf43      	ittte	mi
 80120b0:	2300      	movmi	r3, #0
 80120b2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80120b6:	9307      	strmi	r3, [sp, #28]
 80120b8:	f04f 0a00 	movpl.w	sl, #0
 80120bc:	f1bb 0f00 	cmp.w	fp, #0
 80120c0:	db19      	blt.n	80120f6 <_dtoa_r+0x216>
 80120c2:	9b07      	ldr	r3, [sp, #28]
 80120c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80120c8:	445b      	add	r3, fp
 80120ca:	9307      	str	r3, [sp, #28]
 80120cc:	f04f 0800 	mov.w	r8, #0
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	2b09      	cmp	r3, #9
 80120d4:	d866      	bhi.n	80121a4 <_dtoa_r+0x2c4>
 80120d6:	2b05      	cmp	r3, #5
 80120d8:	bfc4      	itt	gt
 80120da:	3b04      	subgt	r3, #4
 80120dc:	9308      	strgt	r3, [sp, #32]
 80120de:	9b08      	ldr	r3, [sp, #32]
 80120e0:	f1a3 0302 	sub.w	r3, r3, #2
 80120e4:	bfcc      	ite	gt
 80120e6:	2500      	movgt	r5, #0
 80120e8:	2501      	movle	r5, #1
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d866      	bhi.n	80121bc <_dtoa_r+0x2dc>
 80120ee:	e8df f003 	tbb	[pc, r3]
 80120f2:	5755      	.short	0x5755
 80120f4:	4909      	.short	0x4909
 80120f6:	2300      	movs	r3, #0
 80120f8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80120fc:	f1cb 0800 	rsb	r8, fp, #0
 8012100:	930b      	str	r3, [sp, #44]	; 0x2c
 8012102:	e7e5      	b.n	80120d0 <_dtoa_r+0x1f0>
 8012104:	2301      	movs	r3, #1
 8012106:	9309      	str	r3, [sp, #36]	; 0x24
 8012108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801210a:	2b00      	cmp	r3, #0
 801210c:	dd59      	ble.n	80121c2 <_dtoa_r+0x2e2>
 801210e:	9306      	str	r3, [sp, #24]
 8012110:	4699      	mov	r9, r3
 8012112:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012114:	2200      	movs	r2, #0
 8012116:	6072      	str	r2, [r6, #4]
 8012118:	2204      	movs	r2, #4
 801211a:	f102 0014 	add.w	r0, r2, #20
 801211e:	4298      	cmp	r0, r3
 8012120:	6871      	ldr	r1, [r6, #4]
 8012122:	d953      	bls.n	80121cc <_dtoa_r+0x2ec>
 8012124:	4620      	mov	r0, r4
 8012126:	f001 f973 	bl	8013410 <_Balloc>
 801212a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801212c:	6030      	str	r0, [r6, #0]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	9304      	str	r3, [sp, #16]
 8012132:	f1b9 0f0e 	cmp.w	r9, #14
 8012136:	f200 80c2 	bhi.w	80122be <_dtoa_r+0x3de>
 801213a:	2d00      	cmp	r5, #0
 801213c:	f000 80bf 	beq.w	80122be <_dtoa_r+0x3de>
 8012140:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012144:	f1bb 0f00 	cmp.w	fp, #0
 8012148:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801214c:	f340 80e6 	ble.w	801231c <_dtoa_r+0x43c>
 8012150:	4a2b      	ldr	r2, [pc, #172]	; (8012200 <_dtoa_r+0x320>)
 8012152:	f00b 030f 	and.w	r3, fp, #15
 8012156:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801215a:	ed93 7b00 	vldr	d7, [r3]
 801215e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8012162:	06da      	lsls	r2, r3, #27
 8012164:	f140 80d8 	bpl.w	8012318 <_dtoa_r+0x438>
 8012168:	4a26      	ldr	r2, [pc, #152]	; (8012204 <_dtoa_r+0x324>)
 801216a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801216e:	ed92 6b08 	vldr	d6, [r2, #32]
 8012172:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012176:	ed8d 6b02 	vstr	d6, [sp, #8]
 801217a:	f003 030f 	and.w	r3, r3, #15
 801217e:	2203      	movs	r2, #3
 8012180:	4920      	ldr	r1, [pc, #128]	; (8012204 <_dtoa_r+0x324>)
 8012182:	e04a      	b.n	801221a <_dtoa_r+0x33a>
 8012184:	2301      	movs	r3, #1
 8012186:	9309      	str	r3, [sp, #36]	; 0x24
 8012188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801218a:	445b      	add	r3, fp
 801218c:	f103 0901 	add.w	r9, r3, #1
 8012190:	9306      	str	r3, [sp, #24]
 8012192:	464b      	mov	r3, r9
 8012194:	2b01      	cmp	r3, #1
 8012196:	bfb8      	it	lt
 8012198:	2301      	movlt	r3, #1
 801219a:	e7ba      	b.n	8012112 <_dtoa_r+0x232>
 801219c:	2300      	movs	r3, #0
 801219e:	e7b2      	b.n	8012106 <_dtoa_r+0x226>
 80121a0:	2300      	movs	r3, #0
 80121a2:	e7f0      	b.n	8012186 <_dtoa_r+0x2a6>
 80121a4:	2501      	movs	r5, #1
 80121a6:	2300      	movs	r3, #0
 80121a8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80121ac:	f04f 33ff 	mov.w	r3, #4294967295
 80121b0:	9306      	str	r3, [sp, #24]
 80121b2:	4699      	mov	r9, r3
 80121b4:	2200      	movs	r2, #0
 80121b6:	2312      	movs	r3, #18
 80121b8:	920a      	str	r2, [sp, #40]	; 0x28
 80121ba:	e7aa      	b.n	8012112 <_dtoa_r+0x232>
 80121bc:	2301      	movs	r3, #1
 80121be:	9309      	str	r3, [sp, #36]	; 0x24
 80121c0:	e7f4      	b.n	80121ac <_dtoa_r+0x2cc>
 80121c2:	2301      	movs	r3, #1
 80121c4:	9306      	str	r3, [sp, #24]
 80121c6:	4699      	mov	r9, r3
 80121c8:	461a      	mov	r2, r3
 80121ca:	e7f5      	b.n	80121b8 <_dtoa_r+0x2d8>
 80121cc:	3101      	adds	r1, #1
 80121ce:	6071      	str	r1, [r6, #4]
 80121d0:	0052      	lsls	r2, r2, #1
 80121d2:	e7a2      	b.n	801211a <_dtoa_r+0x23a>
 80121d4:	f3af 8000 	nop.w
 80121d8:	636f4361 	.word	0x636f4361
 80121dc:	3fd287a7 	.word	0x3fd287a7
 80121e0:	8b60c8b3 	.word	0x8b60c8b3
 80121e4:	3fc68a28 	.word	0x3fc68a28
 80121e8:	509f79fb 	.word	0x509f79fb
 80121ec:	3fd34413 	.word	0x3fd34413
 80121f0:	7ff00000 	.word	0x7ff00000
 80121f4:	08015209 	.word	0x08015209
 80121f8:	08015200 	.word	0x08015200
 80121fc:	080153a4 	.word	0x080153a4
 8012200:	080152a8 	.word	0x080152a8
 8012204:	08015280 	.word	0x08015280
 8012208:	07de      	lsls	r6, r3, #31
 801220a:	d504      	bpl.n	8012216 <_dtoa_r+0x336>
 801220c:	ed91 6b00 	vldr	d6, [r1]
 8012210:	3201      	adds	r2, #1
 8012212:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012216:	105b      	asrs	r3, r3, #1
 8012218:	3108      	adds	r1, #8
 801221a:	2b00      	cmp	r3, #0
 801221c:	d1f4      	bne.n	8012208 <_dtoa_r+0x328>
 801221e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012222:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012226:	ed8d 7b02 	vstr	d7, [sp, #8]
 801222a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801222c:	2b00      	cmp	r3, #0
 801222e:	f000 80a7 	beq.w	8012380 <_dtoa_r+0x4a0>
 8012232:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012236:	ed9d 7b02 	vldr	d7, [sp, #8]
 801223a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012242:	f140 809d 	bpl.w	8012380 <_dtoa_r+0x4a0>
 8012246:	f1b9 0f00 	cmp.w	r9, #0
 801224a:	f000 8099 	beq.w	8012380 <_dtoa_r+0x4a0>
 801224e:	9b06      	ldr	r3, [sp, #24]
 8012250:	2b00      	cmp	r3, #0
 8012252:	dd30      	ble.n	80122b6 <_dtoa_r+0x3d6>
 8012254:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012258:	ee27 7b06 	vmul.f64	d7, d7, d6
 801225c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012260:	9d06      	ldr	r5, [sp, #24]
 8012262:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012266:	3201      	adds	r2, #1
 8012268:	ed9d 6b02 	vldr	d6, [sp, #8]
 801226c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012270:	ee07 2a90 	vmov	s15, r2
 8012274:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012278:	eea7 5b06 	vfma.f64	d5, d7, d6
 801227c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012280:	9a03      	ldr	r2, [sp, #12]
 8012282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012286:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801228a:	2d00      	cmp	r5, #0
 801228c:	d17b      	bne.n	8012386 <_dtoa_r+0x4a6>
 801228e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012292:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012296:	ec41 0b17 	vmov	d7, r0, r1
 801229a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a2:	f300 8253 	bgt.w	801274c <_dtoa_r+0x86c>
 80122a6:	eeb1 7b47 	vneg.f64	d7, d7
 80122aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b2:	f100 8249 	bmi.w	8012748 <_dtoa_r+0x868>
 80122b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80122ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f2c0 8119 	blt.w	80124f8 <_dtoa_r+0x618>
 80122c6:	f1bb 0f0e 	cmp.w	fp, #14
 80122ca:	f300 8115 	bgt.w	80124f8 <_dtoa_r+0x618>
 80122ce:	4bc3      	ldr	r3, [pc, #780]	; (80125dc <_dtoa_r+0x6fc>)
 80122d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122d4:	ed93 6b00 	vldr	d6, [r3]
 80122d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f280 80ba 	bge.w	8012454 <_dtoa_r+0x574>
 80122e0:	f1b9 0f00 	cmp.w	r9, #0
 80122e4:	f300 80b6 	bgt.w	8012454 <_dtoa_r+0x574>
 80122e8:	f040 822d 	bne.w	8012746 <_dtoa_r+0x866>
 80122ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80122f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012300:	464d      	mov	r5, r9
 8012302:	464f      	mov	r7, r9
 8012304:	f280 8204 	bge.w	8012710 <_dtoa_r+0x830>
 8012308:	9b04      	ldr	r3, [sp, #16]
 801230a:	9a04      	ldr	r2, [sp, #16]
 801230c:	1c5e      	adds	r6, r3, #1
 801230e:	2331      	movs	r3, #49	; 0x31
 8012310:	7013      	strb	r3, [r2, #0]
 8012312:	f10b 0b01 	add.w	fp, fp, #1
 8012316:	e1ff      	b.n	8012718 <_dtoa_r+0x838>
 8012318:	2202      	movs	r2, #2
 801231a:	e731      	b.n	8012180 <_dtoa_r+0x2a0>
 801231c:	d02e      	beq.n	801237c <_dtoa_r+0x49c>
 801231e:	f1cb 0300 	rsb	r3, fp, #0
 8012322:	4aae      	ldr	r2, [pc, #696]	; (80125dc <_dtoa_r+0x6fc>)
 8012324:	f003 010f 	and.w	r1, r3, #15
 8012328:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801232c:	ed92 7b00 	vldr	d7, [r2]
 8012330:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8012334:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012338:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801233c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012340:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012344:	49a6      	ldr	r1, [pc, #664]	; (80125e0 <_dtoa_r+0x700>)
 8012346:	111b      	asrs	r3, r3, #4
 8012348:	2000      	movs	r0, #0
 801234a:	2202      	movs	r2, #2
 801234c:	b93b      	cbnz	r3, 801235e <_dtoa_r+0x47e>
 801234e:	2800      	cmp	r0, #0
 8012350:	f43f af6b 	beq.w	801222a <_dtoa_r+0x34a>
 8012354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801235c:	e765      	b.n	801222a <_dtoa_r+0x34a>
 801235e:	07dd      	lsls	r5, r3, #31
 8012360:	d509      	bpl.n	8012376 <_dtoa_r+0x496>
 8012362:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012366:	ed91 7b00 	vldr	d7, [r1]
 801236a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801236e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012372:	3201      	adds	r2, #1
 8012374:	2001      	movs	r0, #1
 8012376:	105b      	asrs	r3, r3, #1
 8012378:	3108      	adds	r1, #8
 801237a:	e7e7      	b.n	801234c <_dtoa_r+0x46c>
 801237c:	2202      	movs	r2, #2
 801237e:	e754      	b.n	801222a <_dtoa_r+0x34a>
 8012380:	465b      	mov	r3, fp
 8012382:	464d      	mov	r5, r9
 8012384:	e770      	b.n	8012268 <_dtoa_r+0x388>
 8012386:	4a95      	ldr	r2, [pc, #596]	; (80125dc <_dtoa_r+0x6fc>)
 8012388:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801238c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012392:	ec41 0b17 	vmov	d7, r0, r1
 8012396:	b35a      	cbz	r2, 80123f0 <_dtoa_r+0x510>
 8012398:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801239c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80123a0:	9e04      	ldr	r6, [sp, #16]
 80123a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80123a6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80123aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80123ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123b2:	ee14 2a90 	vmov	r2, s9
 80123b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123ba:	3230      	adds	r2, #48	; 0x30
 80123bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c8:	f806 2b01 	strb.w	r2, [r6], #1
 80123cc:	d43b      	bmi.n	8012446 <_dtoa_r+0x566>
 80123ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 80123d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	d472      	bmi.n	80124c2 <_dtoa_r+0x5e2>
 80123dc:	9a04      	ldr	r2, [sp, #16]
 80123de:	1ab2      	subs	r2, r6, r2
 80123e0:	4295      	cmp	r5, r2
 80123e2:	f77f af68 	ble.w	80122b6 <_dtoa_r+0x3d6>
 80123e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80123ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80123ee:	e7de      	b.n	80123ae <_dtoa_r+0x4ce>
 80123f0:	9a04      	ldr	r2, [sp, #16]
 80123f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80123f6:	1956      	adds	r6, r2, r5
 80123f8:	4611      	mov	r1, r2
 80123fa:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80123fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012402:	ee14 2a90 	vmov	r2, s9
 8012406:	3230      	adds	r2, #48	; 0x30
 8012408:	f801 2b01 	strb.w	r2, [r1], #1
 801240c:	42b1      	cmp	r1, r6
 801240e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012412:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012416:	d11a      	bne.n	801244e <_dtoa_r+0x56e>
 8012418:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801241c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012420:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012428:	dc4b      	bgt.n	80124c2 <_dtoa_r+0x5e2>
 801242a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801242e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	f57f af3e 	bpl.w	80122b6 <_dtoa_r+0x3d6>
 801243a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801243e:	2a30      	cmp	r2, #48	; 0x30
 8012440:	f106 31ff 	add.w	r1, r6, #4294967295
 8012444:	d001      	beq.n	801244a <_dtoa_r+0x56a>
 8012446:	469b      	mov	fp, r3
 8012448:	e02a      	b.n	80124a0 <_dtoa_r+0x5c0>
 801244a:	460e      	mov	r6, r1
 801244c:	e7f5      	b.n	801243a <_dtoa_r+0x55a>
 801244e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012452:	e7d4      	b.n	80123fe <_dtoa_r+0x51e>
 8012454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012458:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801245c:	9e04      	ldr	r6, [sp, #16]
 801245e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012462:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012466:	ee15 3a10 	vmov	r3, s10
 801246a:	3330      	adds	r3, #48	; 0x30
 801246c:	f806 3b01 	strb.w	r3, [r6], #1
 8012470:	9b04      	ldr	r3, [sp, #16]
 8012472:	1af3      	subs	r3, r6, r3
 8012474:	4599      	cmp	r9, r3
 8012476:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801247a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801247e:	d133      	bne.n	80124e8 <_dtoa_r+0x608>
 8012480:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012484:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248c:	dc18      	bgt.n	80124c0 <_dtoa_r+0x5e0>
 801248e:	eeb4 7b46 	vcmp.f64	d7, d6
 8012492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012496:	d103      	bne.n	80124a0 <_dtoa_r+0x5c0>
 8012498:	ee15 3a10 	vmov	r3, s10
 801249c:	07db      	lsls	r3, r3, #31
 801249e:	d40f      	bmi.n	80124c0 <_dtoa_r+0x5e0>
 80124a0:	9901      	ldr	r1, [sp, #4]
 80124a2:	4620      	mov	r0, r4
 80124a4:	f000 ffe8 	bl	8013478 <_Bfree>
 80124a8:	2300      	movs	r3, #0
 80124aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124ac:	7033      	strb	r3, [r6, #0]
 80124ae:	f10b 0301 	add.w	r3, fp, #1
 80124b2:	6013      	str	r3, [r2, #0]
 80124b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f43f ad5b 	beq.w	8011f72 <_dtoa_r+0x92>
 80124bc:	601e      	str	r6, [r3, #0]
 80124be:	e558      	b.n	8011f72 <_dtoa_r+0x92>
 80124c0:	465b      	mov	r3, fp
 80124c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80124c6:	2939      	cmp	r1, #57	; 0x39
 80124c8:	f106 32ff 	add.w	r2, r6, #4294967295
 80124cc:	d106      	bne.n	80124dc <_dtoa_r+0x5fc>
 80124ce:	9904      	ldr	r1, [sp, #16]
 80124d0:	4291      	cmp	r1, r2
 80124d2:	d107      	bne.n	80124e4 <_dtoa_r+0x604>
 80124d4:	2230      	movs	r2, #48	; 0x30
 80124d6:	700a      	strb	r2, [r1, #0]
 80124d8:	3301      	adds	r3, #1
 80124da:	460a      	mov	r2, r1
 80124dc:	7811      	ldrb	r1, [r2, #0]
 80124de:	3101      	adds	r1, #1
 80124e0:	7011      	strb	r1, [r2, #0]
 80124e2:	e7b0      	b.n	8012446 <_dtoa_r+0x566>
 80124e4:	4616      	mov	r6, r2
 80124e6:	e7ec      	b.n	80124c2 <_dtoa_r+0x5e2>
 80124e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f4:	d1b3      	bne.n	801245e <_dtoa_r+0x57e>
 80124f6:	e7d3      	b.n	80124a0 <_dtoa_r+0x5c0>
 80124f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124fa:	2a00      	cmp	r2, #0
 80124fc:	f000 808d 	beq.w	801261a <_dtoa_r+0x73a>
 8012500:	9a08      	ldr	r2, [sp, #32]
 8012502:	2a01      	cmp	r2, #1
 8012504:	dc72      	bgt.n	80125ec <_dtoa_r+0x70c>
 8012506:	2f00      	cmp	r7, #0
 8012508:	d06c      	beq.n	80125e4 <_dtoa_r+0x704>
 801250a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801250e:	4645      	mov	r5, r8
 8012510:	4656      	mov	r6, sl
 8012512:	9a07      	ldr	r2, [sp, #28]
 8012514:	2101      	movs	r1, #1
 8012516:	441a      	add	r2, r3
 8012518:	4620      	mov	r0, r4
 801251a:	449a      	add	sl, r3
 801251c:	9207      	str	r2, [sp, #28]
 801251e:	f001 f889 	bl	8013634 <__i2b>
 8012522:	4607      	mov	r7, r0
 8012524:	2e00      	cmp	r6, #0
 8012526:	dd0b      	ble.n	8012540 <_dtoa_r+0x660>
 8012528:	9b07      	ldr	r3, [sp, #28]
 801252a:	2b00      	cmp	r3, #0
 801252c:	dd08      	ble.n	8012540 <_dtoa_r+0x660>
 801252e:	42b3      	cmp	r3, r6
 8012530:	9a07      	ldr	r2, [sp, #28]
 8012532:	bfa8      	it	ge
 8012534:	4633      	movge	r3, r6
 8012536:	ebaa 0a03 	sub.w	sl, sl, r3
 801253a:	1af6      	subs	r6, r6, r3
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	9307      	str	r3, [sp, #28]
 8012540:	f1b8 0f00 	cmp.w	r8, #0
 8012544:	d01d      	beq.n	8012582 <_dtoa_r+0x6a2>
 8012546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012548:	2b00      	cmp	r3, #0
 801254a:	d06a      	beq.n	8012622 <_dtoa_r+0x742>
 801254c:	b18d      	cbz	r5, 8012572 <_dtoa_r+0x692>
 801254e:	4639      	mov	r1, r7
 8012550:	462a      	mov	r2, r5
 8012552:	4620      	mov	r0, r4
 8012554:	f001 f90e 	bl	8013774 <__pow5mult>
 8012558:	9a01      	ldr	r2, [sp, #4]
 801255a:	4601      	mov	r1, r0
 801255c:	4607      	mov	r7, r0
 801255e:	4620      	mov	r0, r4
 8012560:	f001 f871 	bl	8013646 <__multiply>
 8012564:	9901      	ldr	r1, [sp, #4]
 8012566:	900c      	str	r0, [sp, #48]	; 0x30
 8012568:	4620      	mov	r0, r4
 801256a:	f000 ff85 	bl	8013478 <_Bfree>
 801256e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012570:	9301      	str	r3, [sp, #4]
 8012572:	ebb8 0205 	subs.w	r2, r8, r5
 8012576:	d004      	beq.n	8012582 <_dtoa_r+0x6a2>
 8012578:	9901      	ldr	r1, [sp, #4]
 801257a:	4620      	mov	r0, r4
 801257c:	f001 f8fa 	bl	8013774 <__pow5mult>
 8012580:	9001      	str	r0, [sp, #4]
 8012582:	2101      	movs	r1, #1
 8012584:	4620      	mov	r0, r4
 8012586:	f001 f855 	bl	8013634 <__i2b>
 801258a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801258c:	4605      	mov	r5, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	f000 81ca 	beq.w	8012928 <_dtoa_r+0xa48>
 8012594:	461a      	mov	r2, r3
 8012596:	4601      	mov	r1, r0
 8012598:	4620      	mov	r0, r4
 801259a:	f001 f8eb 	bl	8013774 <__pow5mult>
 801259e:	9b08      	ldr	r3, [sp, #32]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	4605      	mov	r5, r0
 80125a4:	dc44      	bgt.n	8012630 <_dtoa_r+0x750>
 80125a6:	9b02      	ldr	r3, [sp, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d13c      	bne.n	8012626 <_dtoa_r+0x746>
 80125ac:	9b03      	ldr	r3, [sp, #12]
 80125ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d137      	bne.n	8012626 <_dtoa_r+0x746>
 80125b6:	9b03      	ldr	r3, [sp, #12]
 80125b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125bc:	0d1b      	lsrs	r3, r3, #20
 80125be:	051b      	lsls	r3, r3, #20
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d033      	beq.n	801262c <_dtoa_r+0x74c>
 80125c4:	9b07      	ldr	r3, [sp, #28]
 80125c6:	3301      	adds	r3, #1
 80125c8:	f10a 0a01 	add.w	sl, sl, #1
 80125cc:	9307      	str	r3, [sp, #28]
 80125ce:	f04f 0801 	mov.w	r8, #1
 80125d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125d4:	bb73      	cbnz	r3, 8012634 <_dtoa_r+0x754>
 80125d6:	2001      	movs	r0, #1
 80125d8:	e034      	b.n	8012644 <_dtoa_r+0x764>
 80125da:	bf00      	nop
 80125dc:	080152a8 	.word	0x080152a8
 80125e0:	08015280 	.word	0x08015280
 80125e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80125ea:	e790      	b.n	801250e <_dtoa_r+0x62e>
 80125ec:	f109 35ff 	add.w	r5, r9, #4294967295
 80125f0:	45a8      	cmp	r8, r5
 80125f2:	bfbf      	itttt	lt
 80125f4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80125f6:	eba5 0808 	sublt.w	r8, r5, r8
 80125fa:	4443      	addlt	r3, r8
 80125fc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80125fe:	bfb6      	itet	lt
 8012600:	46a8      	movlt	r8, r5
 8012602:	eba8 0505 	subge.w	r5, r8, r5
 8012606:	2500      	movlt	r5, #0
 8012608:	f1b9 0f00 	cmp.w	r9, #0
 801260c:	bfb9      	ittee	lt
 801260e:	ebaa 0609 	sublt.w	r6, sl, r9
 8012612:	2300      	movlt	r3, #0
 8012614:	4656      	movge	r6, sl
 8012616:	464b      	movge	r3, r9
 8012618:	e77b      	b.n	8012512 <_dtoa_r+0x632>
 801261a:	4645      	mov	r5, r8
 801261c:	4656      	mov	r6, sl
 801261e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012620:	e780      	b.n	8012524 <_dtoa_r+0x644>
 8012622:	4642      	mov	r2, r8
 8012624:	e7a8      	b.n	8012578 <_dtoa_r+0x698>
 8012626:	f04f 0800 	mov.w	r8, #0
 801262a:	e7d2      	b.n	80125d2 <_dtoa_r+0x6f2>
 801262c:	4698      	mov	r8, r3
 801262e:	e7d0      	b.n	80125d2 <_dtoa_r+0x6f2>
 8012630:	f04f 0800 	mov.w	r8, #0
 8012634:	692b      	ldr	r3, [r5, #16]
 8012636:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801263a:	6918      	ldr	r0, [r3, #16]
 801263c:	f000 ffac 	bl	8013598 <__hi0bits>
 8012640:	f1c0 0020 	rsb	r0, r0, #32
 8012644:	9b07      	ldr	r3, [sp, #28]
 8012646:	4418      	add	r0, r3
 8012648:	f010 001f 	ands.w	r0, r0, #31
 801264c:	d047      	beq.n	80126de <_dtoa_r+0x7fe>
 801264e:	f1c0 0320 	rsb	r3, r0, #32
 8012652:	2b04      	cmp	r3, #4
 8012654:	dd3b      	ble.n	80126ce <_dtoa_r+0x7ee>
 8012656:	9b07      	ldr	r3, [sp, #28]
 8012658:	f1c0 001c 	rsb	r0, r0, #28
 801265c:	4482      	add	sl, r0
 801265e:	4406      	add	r6, r0
 8012660:	4403      	add	r3, r0
 8012662:	9307      	str	r3, [sp, #28]
 8012664:	f1ba 0f00 	cmp.w	sl, #0
 8012668:	dd05      	ble.n	8012676 <_dtoa_r+0x796>
 801266a:	4652      	mov	r2, sl
 801266c:	9901      	ldr	r1, [sp, #4]
 801266e:	4620      	mov	r0, r4
 8012670:	f001 f8ce 	bl	8013810 <__lshift>
 8012674:	9001      	str	r0, [sp, #4]
 8012676:	9b07      	ldr	r3, [sp, #28]
 8012678:	2b00      	cmp	r3, #0
 801267a:	dd05      	ble.n	8012688 <_dtoa_r+0x7a8>
 801267c:	4629      	mov	r1, r5
 801267e:	461a      	mov	r2, r3
 8012680:	4620      	mov	r0, r4
 8012682:	f001 f8c5 	bl	8013810 <__lshift>
 8012686:	4605      	mov	r5, r0
 8012688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801268a:	b353      	cbz	r3, 80126e2 <_dtoa_r+0x802>
 801268c:	4629      	mov	r1, r5
 801268e:	9801      	ldr	r0, [sp, #4]
 8012690:	f001 f912 	bl	80138b8 <__mcmp>
 8012694:	2800      	cmp	r0, #0
 8012696:	da24      	bge.n	80126e2 <_dtoa_r+0x802>
 8012698:	2300      	movs	r3, #0
 801269a:	220a      	movs	r2, #10
 801269c:	9901      	ldr	r1, [sp, #4]
 801269e:	4620      	mov	r0, r4
 80126a0:	f000 ff01 	bl	80134a6 <__multadd>
 80126a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126a6:	9001      	str	r0, [sp, #4]
 80126a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f000 8142 	beq.w	8012936 <_dtoa_r+0xa56>
 80126b2:	2300      	movs	r3, #0
 80126b4:	4639      	mov	r1, r7
 80126b6:	220a      	movs	r2, #10
 80126b8:	4620      	mov	r0, r4
 80126ba:	f000 fef4 	bl	80134a6 <__multadd>
 80126be:	9b06      	ldr	r3, [sp, #24]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	4607      	mov	r7, r0
 80126c4:	dc4b      	bgt.n	801275e <_dtoa_r+0x87e>
 80126c6:	9b08      	ldr	r3, [sp, #32]
 80126c8:	2b02      	cmp	r3, #2
 80126ca:	dd48      	ble.n	801275e <_dtoa_r+0x87e>
 80126cc:	e011      	b.n	80126f2 <_dtoa_r+0x812>
 80126ce:	d0c9      	beq.n	8012664 <_dtoa_r+0x784>
 80126d0:	9a07      	ldr	r2, [sp, #28]
 80126d2:	331c      	adds	r3, #28
 80126d4:	441a      	add	r2, r3
 80126d6:	449a      	add	sl, r3
 80126d8:	441e      	add	r6, r3
 80126da:	4613      	mov	r3, r2
 80126dc:	e7c1      	b.n	8012662 <_dtoa_r+0x782>
 80126de:	4603      	mov	r3, r0
 80126e0:	e7f6      	b.n	80126d0 <_dtoa_r+0x7f0>
 80126e2:	f1b9 0f00 	cmp.w	r9, #0
 80126e6:	dc34      	bgt.n	8012752 <_dtoa_r+0x872>
 80126e8:	9b08      	ldr	r3, [sp, #32]
 80126ea:	2b02      	cmp	r3, #2
 80126ec:	dd31      	ble.n	8012752 <_dtoa_r+0x872>
 80126ee:	f8cd 9018 	str.w	r9, [sp, #24]
 80126f2:	9b06      	ldr	r3, [sp, #24]
 80126f4:	b963      	cbnz	r3, 8012710 <_dtoa_r+0x830>
 80126f6:	4629      	mov	r1, r5
 80126f8:	2205      	movs	r2, #5
 80126fa:	4620      	mov	r0, r4
 80126fc:	f000 fed3 	bl	80134a6 <__multadd>
 8012700:	4601      	mov	r1, r0
 8012702:	4605      	mov	r5, r0
 8012704:	9801      	ldr	r0, [sp, #4]
 8012706:	f001 f8d7 	bl	80138b8 <__mcmp>
 801270a:	2800      	cmp	r0, #0
 801270c:	f73f adfc 	bgt.w	8012308 <_dtoa_r+0x428>
 8012710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012712:	9e04      	ldr	r6, [sp, #16]
 8012714:	ea6f 0b03 	mvn.w	fp, r3
 8012718:	f04f 0900 	mov.w	r9, #0
 801271c:	4629      	mov	r1, r5
 801271e:	4620      	mov	r0, r4
 8012720:	f000 feaa 	bl	8013478 <_Bfree>
 8012724:	2f00      	cmp	r7, #0
 8012726:	f43f aebb 	beq.w	80124a0 <_dtoa_r+0x5c0>
 801272a:	f1b9 0f00 	cmp.w	r9, #0
 801272e:	d005      	beq.n	801273c <_dtoa_r+0x85c>
 8012730:	45b9      	cmp	r9, r7
 8012732:	d003      	beq.n	801273c <_dtoa_r+0x85c>
 8012734:	4649      	mov	r1, r9
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fe9e 	bl	8013478 <_Bfree>
 801273c:	4639      	mov	r1, r7
 801273e:	4620      	mov	r0, r4
 8012740:	f000 fe9a 	bl	8013478 <_Bfree>
 8012744:	e6ac      	b.n	80124a0 <_dtoa_r+0x5c0>
 8012746:	2500      	movs	r5, #0
 8012748:	462f      	mov	r7, r5
 801274a:	e7e1      	b.n	8012710 <_dtoa_r+0x830>
 801274c:	469b      	mov	fp, r3
 801274e:	462f      	mov	r7, r5
 8012750:	e5da      	b.n	8012308 <_dtoa_r+0x428>
 8012752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012754:	f8cd 9018 	str.w	r9, [sp, #24]
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 80f3 	beq.w	8012944 <_dtoa_r+0xa64>
 801275e:	2e00      	cmp	r6, #0
 8012760:	dd05      	ble.n	801276e <_dtoa_r+0x88e>
 8012762:	4639      	mov	r1, r7
 8012764:	4632      	mov	r2, r6
 8012766:	4620      	mov	r0, r4
 8012768:	f001 f852 	bl	8013810 <__lshift>
 801276c:	4607      	mov	r7, r0
 801276e:	f1b8 0f00 	cmp.w	r8, #0
 8012772:	d04c      	beq.n	801280e <_dtoa_r+0x92e>
 8012774:	6879      	ldr	r1, [r7, #4]
 8012776:	4620      	mov	r0, r4
 8012778:	f000 fe4a 	bl	8013410 <_Balloc>
 801277c:	693a      	ldr	r2, [r7, #16]
 801277e:	3202      	adds	r2, #2
 8012780:	4606      	mov	r6, r0
 8012782:	0092      	lsls	r2, r2, #2
 8012784:	f107 010c 	add.w	r1, r7, #12
 8012788:	300c      	adds	r0, #12
 801278a:	f7fd fb6f 	bl	800fe6c <memcpy>
 801278e:	2201      	movs	r2, #1
 8012790:	4631      	mov	r1, r6
 8012792:	4620      	mov	r0, r4
 8012794:	f001 f83c 	bl	8013810 <__lshift>
 8012798:	9b02      	ldr	r3, [sp, #8]
 801279a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	46b9      	mov	r9, r7
 80127a4:	9307      	str	r3, [sp, #28]
 80127a6:	4607      	mov	r7, r0
 80127a8:	4629      	mov	r1, r5
 80127aa:	9801      	ldr	r0, [sp, #4]
 80127ac:	f7ff fb0c 	bl	8011dc8 <quorem>
 80127b0:	4649      	mov	r1, r9
 80127b2:	4606      	mov	r6, r0
 80127b4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80127b8:	9801      	ldr	r0, [sp, #4]
 80127ba:	f001 f87d 	bl	80138b8 <__mcmp>
 80127be:	463a      	mov	r2, r7
 80127c0:	9002      	str	r0, [sp, #8]
 80127c2:	4629      	mov	r1, r5
 80127c4:	4620      	mov	r0, r4
 80127c6:	f001 f891 	bl	80138ec <__mdiff>
 80127ca:	68c3      	ldr	r3, [r0, #12]
 80127cc:	4602      	mov	r2, r0
 80127ce:	bb03      	cbnz	r3, 8012812 <_dtoa_r+0x932>
 80127d0:	4601      	mov	r1, r0
 80127d2:	9009      	str	r0, [sp, #36]	; 0x24
 80127d4:	9801      	ldr	r0, [sp, #4]
 80127d6:	f001 f86f 	bl	80138b8 <__mcmp>
 80127da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127dc:	4603      	mov	r3, r0
 80127de:	4611      	mov	r1, r2
 80127e0:	4620      	mov	r0, r4
 80127e2:	9309      	str	r3, [sp, #36]	; 0x24
 80127e4:	f000 fe48 	bl	8013478 <_Bfree>
 80127e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ea:	b9a3      	cbnz	r3, 8012816 <_dtoa_r+0x936>
 80127ec:	9a08      	ldr	r2, [sp, #32]
 80127ee:	b992      	cbnz	r2, 8012816 <_dtoa_r+0x936>
 80127f0:	9a07      	ldr	r2, [sp, #28]
 80127f2:	b982      	cbnz	r2, 8012816 <_dtoa_r+0x936>
 80127f4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80127f8:	d029      	beq.n	801284e <_dtoa_r+0x96e>
 80127fa:	9b02      	ldr	r3, [sp, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	dd01      	ble.n	8012804 <_dtoa_r+0x924>
 8012800:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012804:	f10a 0601 	add.w	r6, sl, #1
 8012808:	f88a 8000 	strb.w	r8, [sl]
 801280c:	e786      	b.n	801271c <_dtoa_r+0x83c>
 801280e:	4638      	mov	r0, r7
 8012810:	e7c2      	b.n	8012798 <_dtoa_r+0x8b8>
 8012812:	2301      	movs	r3, #1
 8012814:	e7e3      	b.n	80127de <_dtoa_r+0x8fe>
 8012816:	9a02      	ldr	r2, [sp, #8]
 8012818:	2a00      	cmp	r2, #0
 801281a:	db04      	blt.n	8012826 <_dtoa_r+0x946>
 801281c:	d124      	bne.n	8012868 <_dtoa_r+0x988>
 801281e:	9a08      	ldr	r2, [sp, #32]
 8012820:	bb12      	cbnz	r2, 8012868 <_dtoa_r+0x988>
 8012822:	9a07      	ldr	r2, [sp, #28]
 8012824:	bb02      	cbnz	r2, 8012868 <_dtoa_r+0x988>
 8012826:	2b00      	cmp	r3, #0
 8012828:	ddec      	ble.n	8012804 <_dtoa_r+0x924>
 801282a:	2201      	movs	r2, #1
 801282c:	9901      	ldr	r1, [sp, #4]
 801282e:	4620      	mov	r0, r4
 8012830:	f000 ffee 	bl	8013810 <__lshift>
 8012834:	4629      	mov	r1, r5
 8012836:	9001      	str	r0, [sp, #4]
 8012838:	f001 f83e 	bl	80138b8 <__mcmp>
 801283c:	2800      	cmp	r0, #0
 801283e:	dc03      	bgt.n	8012848 <_dtoa_r+0x968>
 8012840:	d1e0      	bne.n	8012804 <_dtoa_r+0x924>
 8012842:	f018 0f01 	tst.w	r8, #1
 8012846:	d0dd      	beq.n	8012804 <_dtoa_r+0x924>
 8012848:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801284c:	d1d8      	bne.n	8012800 <_dtoa_r+0x920>
 801284e:	2339      	movs	r3, #57	; 0x39
 8012850:	f10a 0601 	add.w	r6, sl, #1
 8012854:	f88a 3000 	strb.w	r3, [sl]
 8012858:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801285c:	2b39      	cmp	r3, #57	; 0x39
 801285e:	f106 32ff 	add.w	r2, r6, #4294967295
 8012862:	d04c      	beq.n	80128fe <_dtoa_r+0xa1e>
 8012864:	3301      	adds	r3, #1
 8012866:	e051      	b.n	801290c <_dtoa_r+0xa2c>
 8012868:	2b00      	cmp	r3, #0
 801286a:	f10a 0601 	add.w	r6, sl, #1
 801286e:	dd05      	ble.n	801287c <_dtoa_r+0x99c>
 8012870:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012874:	d0eb      	beq.n	801284e <_dtoa_r+0x96e>
 8012876:	f108 0801 	add.w	r8, r8, #1
 801287a:	e7c5      	b.n	8012808 <_dtoa_r+0x928>
 801287c:	9b04      	ldr	r3, [sp, #16]
 801287e:	9a06      	ldr	r2, [sp, #24]
 8012880:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012884:	1af3      	subs	r3, r6, r3
 8012886:	4293      	cmp	r3, r2
 8012888:	d021      	beq.n	80128ce <_dtoa_r+0x9ee>
 801288a:	2300      	movs	r3, #0
 801288c:	220a      	movs	r2, #10
 801288e:	9901      	ldr	r1, [sp, #4]
 8012890:	4620      	mov	r0, r4
 8012892:	f000 fe08 	bl	80134a6 <__multadd>
 8012896:	45b9      	cmp	r9, r7
 8012898:	9001      	str	r0, [sp, #4]
 801289a:	f04f 0300 	mov.w	r3, #0
 801289e:	f04f 020a 	mov.w	r2, #10
 80128a2:	4649      	mov	r1, r9
 80128a4:	4620      	mov	r0, r4
 80128a6:	d105      	bne.n	80128b4 <_dtoa_r+0x9d4>
 80128a8:	f000 fdfd 	bl	80134a6 <__multadd>
 80128ac:	4681      	mov	r9, r0
 80128ae:	4607      	mov	r7, r0
 80128b0:	46b2      	mov	sl, r6
 80128b2:	e779      	b.n	80127a8 <_dtoa_r+0x8c8>
 80128b4:	f000 fdf7 	bl	80134a6 <__multadd>
 80128b8:	4639      	mov	r1, r7
 80128ba:	4681      	mov	r9, r0
 80128bc:	2300      	movs	r3, #0
 80128be:	220a      	movs	r2, #10
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 fdf0 	bl	80134a6 <__multadd>
 80128c6:	4607      	mov	r7, r0
 80128c8:	e7f2      	b.n	80128b0 <_dtoa_r+0x9d0>
 80128ca:	f04f 0900 	mov.w	r9, #0
 80128ce:	2201      	movs	r2, #1
 80128d0:	9901      	ldr	r1, [sp, #4]
 80128d2:	4620      	mov	r0, r4
 80128d4:	f000 ff9c 	bl	8013810 <__lshift>
 80128d8:	4629      	mov	r1, r5
 80128da:	9001      	str	r0, [sp, #4]
 80128dc:	f000 ffec 	bl	80138b8 <__mcmp>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	dcb9      	bgt.n	8012858 <_dtoa_r+0x978>
 80128e4:	d102      	bne.n	80128ec <_dtoa_r+0xa0c>
 80128e6:	f018 0f01 	tst.w	r8, #1
 80128ea:	d1b5      	bne.n	8012858 <_dtoa_r+0x978>
 80128ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80128f0:	2b30      	cmp	r3, #48	; 0x30
 80128f2:	f106 32ff 	add.w	r2, r6, #4294967295
 80128f6:	f47f af11 	bne.w	801271c <_dtoa_r+0x83c>
 80128fa:	4616      	mov	r6, r2
 80128fc:	e7f6      	b.n	80128ec <_dtoa_r+0xa0c>
 80128fe:	9b04      	ldr	r3, [sp, #16]
 8012900:	4293      	cmp	r3, r2
 8012902:	d105      	bne.n	8012910 <_dtoa_r+0xa30>
 8012904:	9a04      	ldr	r2, [sp, #16]
 8012906:	f10b 0b01 	add.w	fp, fp, #1
 801290a:	2331      	movs	r3, #49	; 0x31
 801290c:	7013      	strb	r3, [r2, #0]
 801290e:	e705      	b.n	801271c <_dtoa_r+0x83c>
 8012910:	4616      	mov	r6, r2
 8012912:	e7a1      	b.n	8012858 <_dtoa_r+0x978>
 8012914:	4b16      	ldr	r3, [pc, #88]	; (8012970 <_dtoa_r+0xa90>)
 8012916:	f7ff bb48 	b.w	8011faa <_dtoa_r+0xca>
 801291a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801291c:	2b00      	cmp	r3, #0
 801291e:	f47f ab23 	bne.w	8011f68 <_dtoa_r+0x88>
 8012922:	4b14      	ldr	r3, [pc, #80]	; (8012974 <_dtoa_r+0xa94>)
 8012924:	f7ff bb41 	b.w	8011faa <_dtoa_r+0xca>
 8012928:	9b08      	ldr	r3, [sp, #32]
 801292a:	2b01      	cmp	r3, #1
 801292c:	f77f ae3b 	ble.w	80125a6 <_dtoa_r+0x6c6>
 8012930:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012934:	e64f      	b.n	80125d6 <_dtoa_r+0x6f6>
 8012936:	9b06      	ldr	r3, [sp, #24]
 8012938:	2b00      	cmp	r3, #0
 801293a:	dc03      	bgt.n	8012944 <_dtoa_r+0xa64>
 801293c:	9b08      	ldr	r3, [sp, #32]
 801293e:	2b02      	cmp	r3, #2
 8012940:	f73f aed7 	bgt.w	80126f2 <_dtoa_r+0x812>
 8012944:	9e04      	ldr	r6, [sp, #16]
 8012946:	9801      	ldr	r0, [sp, #4]
 8012948:	4629      	mov	r1, r5
 801294a:	f7ff fa3d 	bl	8011dc8 <quorem>
 801294e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012952:	f806 8b01 	strb.w	r8, [r6], #1
 8012956:	9b04      	ldr	r3, [sp, #16]
 8012958:	9a06      	ldr	r2, [sp, #24]
 801295a:	1af3      	subs	r3, r6, r3
 801295c:	429a      	cmp	r2, r3
 801295e:	ddb4      	ble.n	80128ca <_dtoa_r+0x9ea>
 8012960:	2300      	movs	r3, #0
 8012962:	220a      	movs	r2, #10
 8012964:	9901      	ldr	r1, [sp, #4]
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fd9d 	bl	80134a6 <__multadd>
 801296c:	9001      	str	r0, [sp, #4]
 801296e:	e7ea      	b.n	8012946 <_dtoa_r+0xa66>
 8012970:	080153a3 	.word	0x080153a3
 8012974:	08015200 	.word	0x08015200

08012978 <__sflush_r>:
 8012978:	898a      	ldrh	r2, [r1, #12]
 801297a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801297e:	4605      	mov	r5, r0
 8012980:	0710      	lsls	r0, r2, #28
 8012982:	460c      	mov	r4, r1
 8012984:	d458      	bmi.n	8012a38 <__sflush_r+0xc0>
 8012986:	684b      	ldr	r3, [r1, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	dc05      	bgt.n	8012998 <__sflush_r+0x20>
 801298c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801298e:	2b00      	cmp	r3, #0
 8012990:	dc02      	bgt.n	8012998 <__sflush_r+0x20>
 8012992:	2000      	movs	r0, #0
 8012994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801299a:	2e00      	cmp	r6, #0
 801299c:	d0f9      	beq.n	8012992 <__sflush_r+0x1a>
 801299e:	2300      	movs	r3, #0
 80129a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129a4:	682f      	ldr	r7, [r5, #0]
 80129a6:	6a21      	ldr	r1, [r4, #32]
 80129a8:	602b      	str	r3, [r5, #0]
 80129aa:	d032      	beq.n	8012a12 <__sflush_r+0x9a>
 80129ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129ae:	89a3      	ldrh	r3, [r4, #12]
 80129b0:	075a      	lsls	r2, r3, #29
 80129b2:	d505      	bpl.n	80129c0 <__sflush_r+0x48>
 80129b4:	6863      	ldr	r3, [r4, #4]
 80129b6:	1ac0      	subs	r0, r0, r3
 80129b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129ba:	b10b      	cbz	r3, 80129c0 <__sflush_r+0x48>
 80129bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129be:	1ac0      	subs	r0, r0, r3
 80129c0:	2300      	movs	r3, #0
 80129c2:	4602      	mov	r2, r0
 80129c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129c6:	6a21      	ldr	r1, [r4, #32]
 80129c8:	4628      	mov	r0, r5
 80129ca:	47b0      	blx	r6
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	d106      	bne.n	80129e0 <__sflush_r+0x68>
 80129d2:	6829      	ldr	r1, [r5, #0]
 80129d4:	291d      	cmp	r1, #29
 80129d6:	d848      	bhi.n	8012a6a <__sflush_r+0xf2>
 80129d8:	4a29      	ldr	r2, [pc, #164]	; (8012a80 <__sflush_r+0x108>)
 80129da:	40ca      	lsrs	r2, r1
 80129dc:	07d6      	lsls	r6, r2, #31
 80129de:	d544      	bpl.n	8012a6a <__sflush_r+0xf2>
 80129e0:	2200      	movs	r2, #0
 80129e2:	6062      	str	r2, [r4, #4]
 80129e4:	04d9      	lsls	r1, r3, #19
 80129e6:	6922      	ldr	r2, [r4, #16]
 80129e8:	6022      	str	r2, [r4, #0]
 80129ea:	d504      	bpl.n	80129f6 <__sflush_r+0x7e>
 80129ec:	1c42      	adds	r2, r0, #1
 80129ee:	d101      	bne.n	80129f4 <__sflush_r+0x7c>
 80129f0:	682b      	ldr	r3, [r5, #0]
 80129f2:	b903      	cbnz	r3, 80129f6 <__sflush_r+0x7e>
 80129f4:	6560      	str	r0, [r4, #84]	; 0x54
 80129f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129f8:	602f      	str	r7, [r5, #0]
 80129fa:	2900      	cmp	r1, #0
 80129fc:	d0c9      	beq.n	8012992 <__sflush_r+0x1a>
 80129fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a02:	4299      	cmp	r1, r3
 8012a04:	d002      	beq.n	8012a0c <__sflush_r+0x94>
 8012a06:	4628      	mov	r0, r5
 8012a08:	f7fd fa52 	bl	800feb0 <_free_r>
 8012a0c:	2000      	movs	r0, #0
 8012a0e:	6360      	str	r0, [r4, #52]	; 0x34
 8012a10:	e7c0      	b.n	8012994 <__sflush_r+0x1c>
 8012a12:	2301      	movs	r3, #1
 8012a14:	4628      	mov	r0, r5
 8012a16:	47b0      	blx	r6
 8012a18:	1c41      	adds	r1, r0, #1
 8012a1a:	d1c8      	bne.n	80129ae <__sflush_r+0x36>
 8012a1c:	682b      	ldr	r3, [r5, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d0c5      	beq.n	80129ae <__sflush_r+0x36>
 8012a22:	2b1d      	cmp	r3, #29
 8012a24:	d001      	beq.n	8012a2a <__sflush_r+0xb2>
 8012a26:	2b16      	cmp	r3, #22
 8012a28:	d101      	bne.n	8012a2e <__sflush_r+0xb6>
 8012a2a:	602f      	str	r7, [r5, #0]
 8012a2c:	e7b1      	b.n	8012992 <__sflush_r+0x1a>
 8012a2e:	89a3      	ldrh	r3, [r4, #12]
 8012a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a34:	81a3      	strh	r3, [r4, #12]
 8012a36:	e7ad      	b.n	8012994 <__sflush_r+0x1c>
 8012a38:	690f      	ldr	r7, [r1, #16]
 8012a3a:	2f00      	cmp	r7, #0
 8012a3c:	d0a9      	beq.n	8012992 <__sflush_r+0x1a>
 8012a3e:	0793      	lsls	r3, r2, #30
 8012a40:	680e      	ldr	r6, [r1, #0]
 8012a42:	bf08      	it	eq
 8012a44:	694b      	ldreq	r3, [r1, #20]
 8012a46:	600f      	str	r7, [r1, #0]
 8012a48:	bf18      	it	ne
 8012a4a:	2300      	movne	r3, #0
 8012a4c:	eba6 0807 	sub.w	r8, r6, r7
 8012a50:	608b      	str	r3, [r1, #8]
 8012a52:	f1b8 0f00 	cmp.w	r8, #0
 8012a56:	dd9c      	ble.n	8012992 <__sflush_r+0x1a>
 8012a58:	4643      	mov	r3, r8
 8012a5a:	463a      	mov	r2, r7
 8012a5c:	6a21      	ldr	r1, [r4, #32]
 8012a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a60:	4628      	mov	r0, r5
 8012a62:	47b0      	blx	r6
 8012a64:	2800      	cmp	r0, #0
 8012a66:	dc06      	bgt.n	8012a76 <__sflush_r+0xfe>
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a6e:	81a3      	strh	r3, [r4, #12]
 8012a70:	f04f 30ff 	mov.w	r0, #4294967295
 8012a74:	e78e      	b.n	8012994 <__sflush_r+0x1c>
 8012a76:	4407      	add	r7, r0
 8012a78:	eba8 0800 	sub.w	r8, r8, r0
 8012a7c:	e7e9      	b.n	8012a52 <__sflush_r+0xda>
 8012a7e:	bf00      	nop
 8012a80:	20400001 	.word	0x20400001

08012a84 <_fflush_r>:
 8012a84:	b538      	push	{r3, r4, r5, lr}
 8012a86:	690b      	ldr	r3, [r1, #16]
 8012a88:	4605      	mov	r5, r0
 8012a8a:	460c      	mov	r4, r1
 8012a8c:	b1db      	cbz	r3, 8012ac6 <_fflush_r+0x42>
 8012a8e:	b118      	cbz	r0, 8012a98 <_fflush_r+0x14>
 8012a90:	6983      	ldr	r3, [r0, #24]
 8012a92:	b90b      	cbnz	r3, 8012a98 <_fflush_r+0x14>
 8012a94:	f000 f860 	bl	8012b58 <__sinit>
 8012a98:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <_fflush_r+0x48>)
 8012a9a:	429c      	cmp	r4, r3
 8012a9c:	d109      	bne.n	8012ab2 <_fflush_r+0x2e>
 8012a9e:	686c      	ldr	r4, [r5, #4]
 8012aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa4:	b17b      	cbz	r3, 8012ac6 <_fflush_r+0x42>
 8012aa6:	4621      	mov	r1, r4
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aae:	f7ff bf63 	b.w	8012978 <__sflush_r>
 8012ab2:	4b07      	ldr	r3, [pc, #28]	; (8012ad0 <_fflush_r+0x4c>)
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	d101      	bne.n	8012abc <_fflush_r+0x38>
 8012ab8:	68ac      	ldr	r4, [r5, #8]
 8012aba:	e7f1      	b.n	8012aa0 <_fflush_r+0x1c>
 8012abc:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <_fflush_r+0x50>)
 8012abe:	429c      	cmp	r4, r3
 8012ac0:	bf08      	it	eq
 8012ac2:	68ec      	ldreq	r4, [r5, #12]
 8012ac4:	e7ec      	b.n	8012aa0 <_fflush_r+0x1c>
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
 8012aca:	bf00      	nop
 8012acc:	08015230 	.word	0x08015230
 8012ad0:	08015250 	.word	0x08015250
 8012ad4:	08015210 	.word	0x08015210

08012ad8 <std>:
 8012ad8:	2300      	movs	r3, #0
 8012ada:	b510      	push	{r4, lr}
 8012adc:	4604      	mov	r4, r0
 8012ade:	e9c0 3300 	strd	r3, r3, [r0]
 8012ae2:	6083      	str	r3, [r0, #8]
 8012ae4:	8181      	strh	r1, [r0, #12]
 8012ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8012ae8:	81c2      	strh	r2, [r0, #14]
 8012aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012aee:	6183      	str	r3, [r0, #24]
 8012af0:	4619      	mov	r1, r3
 8012af2:	2208      	movs	r2, #8
 8012af4:	305c      	adds	r0, #92	; 0x5c
 8012af6:	f7fd f9c4 	bl	800fe82 <memset>
 8012afa:	4b05      	ldr	r3, [pc, #20]	; (8012b10 <std+0x38>)
 8012afc:	6263      	str	r3, [r4, #36]	; 0x24
 8012afe:	4b05      	ldr	r3, [pc, #20]	; (8012b14 <std+0x3c>)
 8012b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b02:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <std+0x40>)
 8012b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b06:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <std+0x44>)
 8012b08:	6224      	str	r4, [r4, #32]
 8012b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	bf00      	nop
 8012b10:	08010e79 	.word	0x08010e79
 8012b14:	08010e9f 	.word	0x08010e9f
 8012b18:	08010ed7 	.word	0x08010ed7
 8012b1c:	08010efb 	.word	0x08010efb

08012b20 <_cleanup_r>:
 8012b20:	4901      	ldr	r1, [pc, #4]	; (8012b28 <_cleanup_r+0x8>)
 8012b22:	f000 b885 	b.w	8012c30 <_fwalk_reent>
 8012b26:	bf00      	nop
 8012b28:	08012a85 	.word	0x08012a85

08012b2c <__sfmoreglue>:
 8012b2c:	b570      	push	{r4, r5, r6, lr}
 8012b2e:	1e4a      	subs	r2, r1, #1
 8012b30:	2568      	movs	r5, #104	; 0x68
 8012b32:	4355      	muls	r5, r2
 8012b34:	460e      	mov	r6, r1
 8012b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b3a:	f7fd fa07 	bl	800ff4c <_malloc_r>
 8012b3e:	4604      	mov	r4, r0
 8012b40:	b140      	cbz	r0, 8012b54 <__sfmoreglue+0x28>
 8012b42:	2100      	movs	r1, #0
 8012b44:	e9c0 1600 	strd	r1, r6, [r0]
 8012b48:	300c      	adds	r0, #12
 8012b4a:	60a0      	str	r0, [r4, #8]
 8012b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b50:	f7fd f997 	bl	800fe82 <memset>
 8012b54:	4620      	mov	r0, r4
 8012b56:	bd70      	pop	{r4, r5, r6, pc}

08012b58 <__sinit>:
 8012b58:	6983      	ldr	r3, [r0, #24]
 8012b5a:	b510      	push	{r4, lr}
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	bb33      	cbnz	r3, 8012bae <__sinit+0x56>
 8012b60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012b64:	6503      	str	r3, [r0, #80]	; 0x50
 8012b66:	4b12      	ldr	r3, [pc, #72]	; (8012bb0 <__sinit+0x58>)
 8012b68:	4a12      	ldr	r2, [pc, #72]	; (8012bb4 <__sinit+0x5c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	6282      	str	r2, [r0, #40]	; 0x28
 8012b6e:	4298      	cmp	r0, r3
 8012b70:	bf04      	itt	eq
 8012b72:	2301      	moveq	r3, #1
 8012b74:	6183      	streq	r3, [r0, #24]
 8012b76:	f000 f81f 	bl	8012bb8 <__sfp>
 8012b7a:	6060      	str	r0, [r4, #4]
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f000 f81b 	bl	8012bb8 <__sfp>
 8012b82:	60a0      	str	r0, [r4, #8]
 8012b84:	4620      	mov	r0, r4
 8012b86:	f000 f817 	bl	8012bb8 <__sfp>
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	60e0      	str	r0, [r4, #12]
 8012b8e:	2104      	movs	r1, #4
 8012b90:	6860      	ldr	r0, [r4, #4]
 8012b92:	f7ff ffa1 	bl	8012ad8 <std>
 8012b96:	2201      	movs	r2, #1
 8012b98:	2109      	movs	r1, #9
 8012b9a:	68a0      	ldr	r0, [r4, #8]
 8012b9c:	f7ff ff9c 	bl	8012ad8 <std>
 8012ba0:	2202      	movs	r2, #2
 8012ba2:	2112      	movs	r1, #18
 8012ba4:	68e0      	ldr	r0, [r4, #12]
 8012ba6:	f7ff ff97 	bl	8012ad8 <std>
 8012baa:	2301      	movs	r3, #1
 8012bac:	61a3      	str	r3, [r4, #24]
 8012bae:	bd10      	pop	{r4, pc}
 8012bb0:	08015170 	.word	0x08015170
 8012bb4:	08012b21 	.word	0x08012b21

08012bb8 <__sfp>:
 8012bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bba:	4b1b      	ldr	r3, [pc, #108]	; (8012c28 <__sfp+0x70>)
 8012bbc:	681e      	ldr	r6, [r3, #0]
 8012bbe:	69b3      	ldr	r3, [r6, #24]
 8012bc0:	4607      	mov	r7, r0
 8012bc2:	b913      	cbnz	r3, 8012bca <__sfp+0x12>
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f7ff ffc7 	bl	8012b58 <__sinit>
 8012bca:	3648      	adds	r6, #72	; 0x48
 8012bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	d503      	bpl.n	8012bdc <__sfp+0x24>
 8012bd4:	6833      	ldr	r3, [r6, #0]
 8012bd6:	b133      	cbz	r3, 8012be6 <__sfp+0x2e>
 8012bd8:	6836      	ldr	r6, [r6, #0]
 8012bda:	e7f7      	b.n	8012bcc <__sfp+0x14>
 8012bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012be0:	b16d      	cbz	r5, 8012bfe <__sfp+0x46>
 8012be2:	3468      	adds	r4, #104	; 0x68
 8012be4:	e7f4      	b.n	8012bd0 <__sfp+0x18>
 8012be6:	2104      	movs	r1, #4
 8012be8:	4638      	mov	r0, r7
 8012bea:	f7ff ff9f 	bl	8012b2c <__sfmoreglue>
 8012bee:	6030      	str	r0, [r6, #0]
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d1f1      	bne.n	8012bd8 <__sfp+0x20>
 8012bf4:	230c      	movs	r3, #12
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bfe:	4b0b      	ldr	r3, [pc, #44]	; (8012c2c <__sfp+0x74>)
 8012c00:	6665      	str	r5, [r4, #100]	; 0x64
 8012c02:	e9c4 5500 	strd	r5, r5, [r4]
 8012c06:	60a5      	str	r5, [r4, #8]
 8012c08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012c0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012c10:	2208      	movs	r2, #8
 8012c12:	4629      	mov	r1, r5
 8012c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c18:	f7fd f933 	bl	800fe82 <memset>
 8012c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c24:	e7e9      	b.n	8012bfa <__sfp+0x42>
 8012c26:	bf00      	nop
 8012c28:	08015170 	.word	0x08015170
 8012c2c:	ffff0001 	.word	0xffff0001

08012c30 <_fwalk_reent>:
 8012c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c34:	4680      	mov	r8, r0
 8012c36:	4689      	mov	r9, r1
 8012c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c3c:	2600      	movs	r6, #0
 8012c3e:	b914      	cbnz	r4, 8012c46 <_fwalk_reent+0x16>
 8012c40:	4630      	mov	r0, r6
 8012c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012c4a:	3f01      	subs	r7, #1
 8012c4c:	d501      	bpl.n	8012c52 <_fwalk_reent+0x22>
 8012c4e:	6824      	ldr	r4, [r4, #0]
 8012c50:	e7f5      	b.n	8012c3e <_fwalk_reent+0xe>
 8012c52:	89ab      	ldrh	r3, [r5, #12]
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	d907      	bls.n	8012c68 <_fwalk_reent+0x38>
 8012c58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	d003      	beq.n	8012c68 <_fwalk_reent+0x38>
 8012c60:	4629      	mov	r1, r5
 8012c62:	4640      	mov	r0, r8
 8012c64:	47c8      	blx	r9
 8012c66:	4306      	orrs	r6, r0
 8012c68:	3568      	adds	r5, #104	; 0x68
 8012c6a:	e7ee      	b.n	8012c4a <_fwalk_reent+0x1a>

08012c6c <rshift>:
 8012c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c6e:	6906      	ldr	r6, [r0, #16]
 8012c70:	114b      	asrs	r3, r1, #5
 8012c72:	429e      	cmp	r6, r3
 8012c74:	f100 0414 	add.w	r4, r0, #20
 8012c78:	dd30      	ble.n	8012cdc <rshift+0x70>
 8012c7a:	f011 011f 	ands.w	r1, r1, #31
 8012c7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012c82:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012c86:	d108      	bne.n	8012c9a <rshift+0x2e>
 8012c88:	4621      	mov	r1, r4
 8012c8a:	42b2      	cmp	r2, r6
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	d211      	bcs.n	8012cb4 <rshift+0x48>
 8012c90:	f852 3b04 	ldr.w	r3, [r2], #4
 8012c94:	f841 3b04 	str.w	r3, [r1], #4
 8012c98:	e7f7      	b.n	8012c8a <rshift+0x1e>
 8012c9a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012c9e:	f1c1 0c20 	rsb	ip, r1, #32
 8012ca2:	40cd      	lsrs	r5, r1
 8012ca4:	3204      	adds	r2, #4
 8012ca6:	4623      	mov	r3, r4
 8012ca8:	42b2      	cmp	r2, r6
 8012caa:	4617      	mov	r7, r2
 8012cac:	d30c      	bcc.n	8012cc8 <rshift+0x5c>
 8012cae:	601d      	str	r5, [r3, #0]
 8012cb0:	b105      	cbz	r5, 8012cb4 <rshift+0x48>
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	1b1a      	subs	r2, r3, r4
 8012cb6:	42a3      	cmp	r3, r4
 8012cb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012cbc:	bf08      	it	eq
 8012cbe:	2300      	moveq	r3, #0
 8012cc0:	6102      	str	r2, [r0, #16]
 8012cc2:	bf08      	it	eq
 8012cc4:	6143      	streq	r3, [r0, #20]
 8012cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cc8:	683f      	ldr	r7, [r7, #0]
 8012cca:	fa07 f70c 	lsl.w	r7, r7, ip
 8012cce:	433d      	orrs	r5, r7
 8012cd0:	f843 5b04 	str.w	r5, [r3], #4
 8012cd4:	f852 5b04 	ldr.w	r5, [r2], #4
 8012cd8:	40cd      	lsrs	r5, r1
 8012cda:	e7e5      	b.n	8012ca8 <rshift+0x3c>
 8012cdc:	4623      	mov	r3, r4
 8012cde:	e7e9      	b.n	8012cb4 <rshift+0x48>

08012ce0 <__hexdig_fun>:
 8012ce0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012ce4:	2b09      	cmp	r3, #9
 8012ce6:	d802      	bhi.n	8012cee <__hexdig_fun+0xe>
 8012ce8:	3820      	subs	r0, #32
 8012cea:	b2c0      	uxtb	r0, r0
 8012cec:	4770      	bx	lr
 8012cee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012cf2:	2b05      	cmp	r3, #5
 8012cf4:	d801      	bhi.n	8012cfa <__hexdig_fun+0x1a>
 8012cf6:	3847      	subs	r0, #71	; 0x47
 8012cf8:	e7f7      	b.n	8012cea <__hexdig_fun+0xa>
 8012cfa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012cfe:	2b05      	cmp	r3, #5
 8012d00:	d801      	bhi.n	8012d06 <__hexdig_fun+0x26>
 8012d02:	3827      	subs	r0, #39	; 0x27
 8012d04:	e7f1      	b.n	8012cea <__hexdig_fun+0xa>
 8012d06:	2000      	movs	r0, #0
 8012d08:	4770      	bx	lr

08012d0a <__gethex>:
 8012d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0e:	b08b      	sub	sp, #44	; 0x2c
 8012d10:	468a      	mov	sl, r1
 8012d12:	9002      	str	r0, [sp, #8]
 8012d14:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012d16:	9306      	str	r3, [sp, #24]
 8012d18:	4690      	mov	r8, r2
 8012d1a:	f000 fadf 	bl	80132dc <__localeconv_l>
 8012d1e:	6803      	ldr	r3, [r0, #0]
 8012d20:	9303      	str	r3, [sp, #12]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ed fa8c 	bl	8000240 <strlen>
 8012d28:	9b03      	ldr	r3, [sp, #12]
 8012d2a:	9001      	str	r0, [sp, #4]
 8012d2c:	4403      	add	r3, r0
 8012d2e:	f04f 0b00 	mov.w	fp, #0
 8012d32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012d36:	9307      	str	r3, [sp, #28]
 8012d38:	f8da 3000 	ldr.w	r3, [sl]
 8012d3c:	3302      	adds	r3, #2
 8012d3e:	461f      	mov	r7, r3
 8012d40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012d44:	2830      	cmp	r0, #48	; 0x30
 8012d46:	d06c      	beq.n	8012e22 <__gethex+0x118>
 8012d48:	f7ff ffca 	bl	8012ce0 <__hexdig_fun>
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d16a      	bne.n	8012e28 <__gethex+0x11e>
 8012d52:	9a01      	ldr	r2, [sp, #4]
 8012d54:	9903      	ldr	r1, [sp, #12]
 8012d56:	4638      	mov	r0, r7
 8012d58:	f001 fd58 	bl	801480c <strncmp>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d166      	bne.n	8012e2e <__gethex+0x124>
 8012d60:	9b01      	ldr	r3, [sp, #4]
 8012d62:	5cf8      	ldrb	r0, [r7, r3]
 8012d64:	18fe      	adds	r6, r7, r3
 8012d66:	f7ff ffbb 	bl	8012ce0 <__hexdig_fun>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d062      	beq.n	8012e34 <__gethex+0x12a>
 8012d6e:	4633      	mov	r3, r6
 8012d70:	7818      	ldrb	r0, [r3, #0]
 8012d72:	2830      	cmp	r0, #48	; 0x30
 8012d74:	461f      	mov	r7, r3
 8012d76:	f103 0301 	add.w	r3, r3, #1
 8012d7a:	d0f9      	beq.n	8012d70 <__gethex+0x66>
 8012d7c:	f7ff ffb0 	bl	8012ce0 <__hexdig_fun>
 8012d80:	fab0 f580 	clz	r5, r0
 8012d84:	096d      	lsrs	r5, r5, #5
 8012d86:	4634      	mov	r4, r6
 8012d88:	f04f 0b01 	mov.w	fp, #1
 8012d8c:	463a      	mov	r2, r7
 8012d8e:	4616      	mov	r6, r2
 8012d90:	3201      	adds	r2, #1
 8012d92:	7830      	ldrb	r0, [r6, #0]
 8012d94:	f7ff ffa4 	bl	8012ce0 <__hexdig_fun>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d1f8      	bne.n	8012d8e <__gethex+0x84>
 8012d9c:	9a01      	ldr	r2, [sp, #4]
 8012d9e:	9903      	ldr	r1, [sp, #12]
 8012da0:	4630      	mov	r0, r6
 8012da2:	f001 fd33 	bl	801480c <strncmp>
 8012da6:	b950      	cbnz	r0, 8012dbe <__gethex+0xb4>
 8012da8:	b954      	cbnz	r4, 8012dc0 <__gethex+0xb6>
 8012daa:	9b01      	ldr	r3, [sp, #4]
 8012dac:	18f4      	adds	r4, r6, r3
 8012dae:	4622      	mov	r2, r4
 8012db0:	4616      	mov	r6, r2
 8012db2:	3201      	adds	r2, #1
 8012db4:	7830      	ldrb	r0, [r6, #0]
 8012db6:	f7ff ff93 	bl	8012ce0 <__hexdig_fun>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d1f8      	bne.n	8012db0 <__gethex+0xa6>
 8012dbe:	b10c      	cbz	r4, 8012dc4 <__gethex+0xba>
 8012dc0:	1ba4      	subs	r4, r4, r6
 8012dc2:	00a4      	lsls	r4, r4, #2
 8012dc4:	7833      	ldrb	r3, [r6, #0]
 8012dc6:	2b50      	cmp	r3, #80	; 0x50
 8012dc8:	d001      	beq.n	8012dce <__gethex+0xc4>
 8012dca:	2b70      	cmp	r3, #112	; 0x70
 8012dcc:	d140      	bne.n	8012e50 <__gethex+0x146>
 8012dce:	7873      	ldrb	r3, [r6, #1]
 8012dd0:	2b2b      	cmp	r3, #43	; 0x2b
 8012dd2:	d031      	beq.n	8012e38 <__gethex+0x12e>
 8012dd4:	2b2d      	cmp	r3, #45	; 0x2d
 8012dd6:	d033      	beq.n	8012e40 <__gethex+0x136>
 8012dd8:	1c71      	adds	r1, r6, #1
 8012dda:	f04f 0900 	mov.w	r9, #0
 8012dde:	7808      	ldrb	r0, [r1, #0]
 8012de0:	f7ff ff7e 	bl	8012ce0 <__hexdig_fun>
 8012de4:	1e43      	subs	r3, r0, #1
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	2b18      	cmp	r3, #24
 8012dea:	d831      	bhi.n	8012e50 <__gethex+0x146>
 8012dec:	f1a0 0210 	sub.w	r2, r0, #16
 8012df0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012df4:	f7ff ff74 	bl	8012ce0 <__hexdig_fun>
 8012df8:	1e43      	subs	r3, r0, #1
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	2b18      	cmp	r3, #24
 8012dfe:	d922      	bls.n	8012e46 <__gethex+0x13c>
 8012e00:	f1b9 0f00 	cmp.w	r9, #0
 8012e04:	d000      	beq.n	8012e08 <__gethex+0xfe>
 8012e06:	4252      	negs	r2, r2
 8012e08:	4414      	add	r4, r2
 8012e0a:	f8ca 1000 	str.w	r1, [sl]
 8012e0e:	b30d      	cbz	r5, 8012e54 <__gethex+0x14a>
 8012e10:	f1bb 0f00 	cmp.w	fp, #0
 8012e14:	bf0c      	ite	eq
 8012e16:	2706      	moveq	r7, #6
 8012e18:	2700      	movne	r7, #0
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	b00b      	add	sp, #44	; 0x2c
 8012e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e22:	f10b 0b01 	add.w	fp, fp, #1
 8012e26:	e78a      	b.n	8012d3e <__gethex+0x34>
 8012e28:	2500      	movs	r5, #0
 8012e2a:	462c      	mov	r4, r5
 8012e2c:	e7ae      	b.n	8012d8c <__gethex+0x82>
 8012e2e:	463e      	mov	r6, r7
 8012e30:	2501      	movs	r5, #1
 8012e32:	e7c7      	b.n	8012dc4 <__gethex+0xba>
 8012e34:	4604      	mov	r4, r0
 8012e36:	e7fb      	b.n	8012e30 <__gethex+0x126>
 8012e38:	f04f 0900 	mov.w	r9, #0
 8012e3c:	1cb1      	adds	r1, r6, #2
 8012e3e:	e7ce      	b.n	8012dde <__gethex+0xd4>
 8012e40:	f04f 0901 	mov.w	r9, #1
 8012e44:	e7fa      	b.n	8012e3c <__gethex+0x132>
 8012e46:	230a      	movs	r3, #10
 8012e48:	fb03 0202 	mla	r2, r3, r2, r0
 8012e4c:	3a10      	subs	r2, #16
 8012e4e:	e7cf      	b.n	8012df0 <__gethex+0xe6>
 8012e50:	4631      	mov	r1, r6
 8012e52:	e7da      	b.n	8012e0a <__gethex+0x100>
 8012e54:	1bf3      	subs	r3, r6, r7
 8012e56:	3b01      	subs	r3, #1
 8012e58:	4629      	mov	r1, r5
 8012e5a:	2b07      	cmp	r3, #7
 8012e5c:	dc49      	bgt.n	8012ef2 <__gethex+0x1e8>
 8012e5e:	9802      	ldr	r0, [sp, #8]
 8012e60:	f000 fad6 	bl	8013410 <_Balloc>
 8012e64:	9b01      	ldr	r3, [sp, #4]
 8012e66:	f100 0914 	add.w	r9, r0, #20
 8012e6a:	f04f 0b00 	mov.w	fp, #0
 8012e6e:	f1c3 0301 	rsb	r3, r3, #1
 8012e72:	4605      	mov	r5, r0
 8012e74:	f8cd 9010 	str.w	r9, [sp, #16]
 8012e78:	46da      	mov	sl, fp
 8012e7a:	9308      	str	r3, [sp, #32]
 8012e7c:	42b7      	cmp	r7, r6
 8012e7e:	d33b      	bcc.n	8012ef8 <__gethex+0x1ee>
 8012e80:	9804      	ldr	r0, [sp, #16]
 8012e82:	f840 ab04 	str.w	sl, [r0], #4
 8012e86:	eba0 0009 	sub.w	r0, r0, r9
 8012e8a:	1080      	asrs	r0, r0, #2
 8012e8c:	6128      	str	r0, [r5, #16]
 8012e8e:	0147      	lsls	r7, r0, #5
 8012e90:	4650      	mov	r0, sl
 8012e92:	f000 fb81 	bl	8013598 <__hi0bits>
 8012e96:	f8d8 6000 	ldr.w	r6, [r8]
 8012e9a:	1a3f      	subs	r7, r7, r0
 8012e9c:	42b7      	cmp	r7, r6
 8012e9e:	dd64      	ble.n	8012f6a <__gethex+0x260>
 8012ea0:	1bbf      	subs	r7, r7, r6
 8012ea2:	4639      	mov	r1, r7
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	f000 fe92 	bl	8013bce <__any_on>
 8012eaa:	4682      	mov	sl, r0
 8012eac:	b178      	cbz	r0, 8012ece <__gethex+0x1c4>
 8012eae:	1e7b      	subs	r3, r7, #1
 8012eb0:	1159      	asrs	r1, r3, #5
 8012eb2:	f003 021f 	and.w	r2, r3, #31
 8012eb6:	f04f 0a01 	mov.w	sl, #1
 8012eba:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012ebe:	fa0a f202 	lsl.w	r2, sl, r2
 8012ec2:	420a      	tst	r2, r1
 8012ec4:	d003      	beq.n	8012ece <__gethex+0x1c4>
 8012ec6:	4553      	cmp	r3, sl
 8012ec8:	dc46      	bgt.n	8012f58 <__gethex+0x24e>
 8012eca:	f04f 0a02 	mov.w	sl, #2
 8012ece:	4639      	mov	r1, r7
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7ff fecb 	bl	8012c6c <rshift>
 8012ed6:	443c      	add	r4, r7
 8012ed8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012edc:	42a3      	cmp	r3, r4
 8012ede:	da52      	bge.n	8012f86 <__gethex+0x27c>
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	9802      	ldr	r0, [sp, #8]
 8012ee4:	f000 fac8 	bl	8013478 <_Bfree>
 8012ee8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012eea:	2300      	movs	r3, #0
 8012eec:	6013      	str	r3, [r2, #0]
 8012eee:	27a3      	movs	r7, #163	; 0xa3
 8012ef0:	e793      	b.n	8012e1a <__gethex+0x110>
 8012ef2:	3101      	adds	r1, #1
 8012ef4:	105b      	asrs	r3, r3, #1
 8012ef6:	e7b0      	b.n	8012e5a <__gethex+0x150>
 8012ef8:	1e73      	subs	r3, r6, #1
 8012efa:	9305      	str	r3, [sp, #20]
 8012efc:	9a07      	ldr	r2, [sp, #28]
 8012efe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d018      	beq.n	8012f38 <__gethex+0x22e>
 8012f06:	f1bb 0f20 	cmp.w	fp, #32
 8012f0a:	d107      	bne.n	8012f1c <__gethex+0x212>
 8012f0c:	9b04      	ldr	r3, [sp, #16]
 8012f0e:	f8c3 a000 	str.w	sl, [r3]
 8012f12:	3304      	adds	r3, #4
 8012f14:	f04f 0a00 	mov.w	sl, #0
 8012f18:	9304      	str	r3, [sp, #16]
 8012f1a:	46d3      	mov	fp, sl
 8012f1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012f20:	f7ff fede 	bl	8012ce0 <__hexdig_fun>
 8012f24:	f000 000f 	and.w	r0, r0, #15
 8012f28:	fa00 f00b 	lsl.w	r0, r0, fp
 8012f2c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012f30:	f10b 0b04 	add.w	fp, fp, #4
 8012f34:	9b05      	ldr	r3, [sp, #20]
 8012f36:	e00d      	b.n	8012f54 <__gethex+0x24a>
 8012f38:	9b05      	ldr	r3, [sp, #20]
 8012f3a:	9a08      	ldr	r2, [sp, #32]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	42bb      	cmp	r3, r7
 8012f40:	d3e1      	bcc.n	8012f06 <__gethex+0x1fc>
 8012f42:	4618      	mov	r0, r3
 8012f44:	9a01      	ldr	r2, [sp, #4]
 8012f46:	9903      	ldr	r1, [sp, #12]
 8012f48:	9309      	str	r3, [sp, #36]	; 0x24
 8012f4a:	f001 fc5f 	bl	801480c <strncmp>
 8012f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d1d8      	bne.n	8012f06 <__gethex+0x1fc>
 8012f54:	461e      	mov	r6, r3
 8012f56:	e791      	b.n	8012e7c <__gethex+0x172>
 8012f58:	1eb9      	subs	r1, r7, #2
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f000 fe37 	bl	8013bce <__any_on>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d0b2      	beq.n	8012eca <__gethex+0x1c0>
 8012f64:	f04f 0a03 	mov.w	sl, #3
 8012f68:	e7b1      	b.n	8012ece <__gethex+0x1c4>
 8012f6a:	da09      	bge.n	8012f80 <__gethex+0x276>
 8012f6c:	1bf7      	subs	r7, r6, r7
 8012f6e:	4629      	mov	r1, r5
 8012f70:	463a      	mov	r2, r7
 8012f72:	9802      	ldr	r0, [sp, #8]
 8012f74:	f000 fc4c 	bl	8013810 <__lshift>
 8012f78:	1be4      	subs	r4, r4, r7
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	f100 0914 	add.w	r9, r0, #20
 8012f80:	f04f 0a00 	mov.w	sl, #0
 8012f84:	e7a8      	b.n	8012ed8 <__gethex+0x1ce>
 8012f86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012f8a:	42a0      	cmp	r0, r4
 8012f8c:	dd6a      	ble.n	8013064 <__gethex+0x35a>
 8012f8e:	1b04      	subs	r4, r0, r4
 8012f90:	42a6      	cmp	r6, r4
 8012f92:	dc2e      	bgt.n	8012ff2 <__gethex+0x2e8>
 8012f94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d022      	beq.n	8012fe2 <__gethex+0x2d8>
 8012f9c:	2b03      	cmp	r3, #3
 8012f9e:	d024      	beq.n	8012fea <__gethex+0x2e0>
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d115      	bne.n	8012fd0 <__gethex+0x2c6>
 8012fa4:	42a6      	cmp	r6, r4
 8012fa6:	d113      	bne.n	8012fd0 <__gethex+0x2c6>
 8012fa8:	2e01      	cmp	r6, #1
 8012faa:	dc0b      	bgt.n	8012fc4 <__gethex+0x2ba>
 8012fac:	9a06      	ldr	r2, [sp, #24]
 8012fae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012fb2:	6013      	str	r3, [r2, #0]
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	612b      	str	r3, [r5, #16]
 8012fb8:	f8c9 3000 	str.w	r3, [r9]
 8012fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fbe:	2762      	movs	r7, #98	; 0x62
 8012fc0:	601d      	str	r5, [r3, #0]
 8012fc2:	e72a      	b.n	8012e1a <__gethex+0x110>
 8012fc4:	1e71      	subs	r1, r6, #1
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	f000 fe01 	bl	8013bce <__any_on>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d1ed      	bne.n	8012fac <__gethex+0x2a2>
 8012fd0:	4629      	mov	r1, r5
 8012fd2:	9802      	ldr	r0, [sp, #8]
 8012fd4:	f000 fa50 	bl	8013478 <_Bfree>
 8012fd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fda:	2300      	movs	r3, #0
 8012fdc:	6013      	str	r3, [r2, #0]
 8012fde:	2750      	movs	r7, #80	; 0x50
 8012fe0:	e71b      	b.n	8012e1a <__gethex+0x110>
 8012fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d0e1      	beq.n	8012fac <__gethex+0x2a2>
 8012fe8:	e7f2      	b.n	8012fd0 <__gethex+0x2c6>
 8012fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1dd      	bne.n	8012fac <__gethex+0x2a2>
 8012ff0:	e7ee      	b.n	8012fd0 <__gethex+0x2c6>
 8012ff2:	1e67      	subs	r7, r4, #1
 8012ff4:	f1ba 0f00 	cmp.w	sl, #0
 8012ff8:	d131      	bne.n	801305e <__gethex+0x354>
 8012ffa:	b127      	cbz	r7, 8013006 <__gethex+0x2fc>
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	4628      	mov	r0, r5
 8013000:	f000 fde5 	bl	8013bce <__any_on>
 8013004:	4682      	mov	sl, r0
 8013006:	117a      	asrs	r2, r7, #5
 8013008:	2301      	movs	r3, #1
 801300a:	f007 071f 	and.w	r7, r7, #31
 801300e:	fa03 f707 	lsl.w	r7, r3, r7
 8013012:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013016:	4621      	mov	r1, r4
 8013018:	421f      	tst	r7, r3
 801301a:	4628      	mov	r0, r5
 801301c:	bf18      	it	ne
 801301e:	f04a 0a02 	orrne.w	sl, sl, #2
 8013022:	1b36      	subs	r6, r6, r4
 8013024:	f7ff fe22 	bl	8012c6c <rshift>
 8013028:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801302c:	2702      	movs	r7, #2
 801302e:	f1ba 0f00 	cmp.w	sl, #0
 8013032:	d048      	beq.n	80130c6 <__gethex+0x3bc>
 8013034:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013038:	2b02      	cmp	r3, #2
 801303a:	d015      	beq.n	8013068 <__gethex+0x35e>
 801303c:	2b03      	cmp	r3, #3
 801303e:	d017      	beq.n	8013070 <__gethex+0x366>
 8013040:	2b01      	cmp	r3, #1
 8013042:	d109      	bne.n	8013058 <__gethex+0x34e>
 8013044:	f01a 0f02 	tst.w	sl, #2
 8013048:	d006      	beq.n	8013058 <__gethex+0x34e>
 801304a:	f8d9 3000 	ldr.w	r3, [r9]
 801304e:	ea4a 0a03 	orr.w	sl, sl, r3
 8013052:	f01a 0f01 	tst.w	sl, #1
 8013056:	d10e      	bne.n	8013076 <__gethex+0x36c>
 8013058:	f047 0710 	orr.w	r7, r7, #16
 801305c:	e033      	b.n	80130c6 <__gethex+0x3bc>
 801305e:	f04f 0a01 	mov.w	sl, #1
 8013062:	e7d0      	b.n	8013006 <__gethex+0x2fc>
 8013064:	2701      	movs	r7, #1
 8013066:	e7e2      	b.n	801302e <__gethex+0x324>
 8013068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801306a:	f1c3 0301 	rsb	r3, r3, #1
 801306e:	9315      	str	r3, [sp, #84]	; 0x54
 8013070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013072:	2b00      	cmp	r3, #0
 8013074:	d0f0      	beq.n	8013058 <__gethex+0x34e>
 8013076:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801307a:	f105 0314 	add.w	r3, r5, #20
 801307e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013082:	eb03 010a 	add.w	r1, r3, sl
 8013086:	f04f 0c00 	mov.w	ip, #0
 801308a:	4618      	mov	r0, r3
 801308c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013090:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013094:	d01c      	beq.n	80130d0 <__gethex+0x3c6>
 8013096:	3201      	adds	r2, #1
 8013098:	6002      	str	r2, [r0, #0]
 801309a:	2f02      	cmp	r7, #2
 801309c:	f105 0314 	add.w	r3, r5, #20
 80130a0:	d138      	bne.n	8013114 <__gethex+0x40a>
 80130a2:	f8d8 2000 	ldr.w	r2, [r8]
 80130a6:	3a01      	subs	r2, #1
 80130a8:	42b2      	cmp	r2, r6
 80130aa:	d10a      	bne.n	80130c2 <__gethex+0x3b8>
 80130ac:	1171      	asrs	r1, r6, #5
 80130ae:	2201      	movs	r2, #1
 80130b0:	f006 061f 	and.w	r6, r6, #31
 80130b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130b8:	fa02 f606 	lsl.w	r6, r2, r6
 80130bc:	421e      	tst	r6, r3
 80130be:	bf18      	it	ne
 80130c0:	4617      	movne	r7, r2
 80130c2:	f047 0720 	orr.w	r7, r7, #32
 80130c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130c8:	601d      	str	r5, [r3, #0]
 80130ca:	9b06      	ldr	r3, [sp, #24]
 80130cc:	601c      	str	r4, [r3, #0]
 80130ce:	e6a4      	b.n	8012e1a <__gethex+0x110>
 80130d0:	4299      	cmp	r1, r3
 80130d2:	f843 cc04 	str.w	ip, [r3, #-4]
 80130d6:	d8d8      	bhi.n	801308a <__gethex+0x380>
 80130d8:	68ab      	ldr	r3, [r5, #8]
 80130da:	4599      	cmp	r9, r3
 80130dc:	db12      	blt.n	8013104 <__gethex+0x3fa>
 80130de:	6869      	ldr	r1, [r5, #4]
 80130e0:	9802      	ldr	r0, [sp, #8]
 80130e2:	3101      	adds	r1, #1
 80130e4:	f000 f994 	bl	8013410 <_Balloc>
 80130e8:	692a      	ldr	r2, [r5, #16]
 80130ea:	3202      	adds	r2, #2
 80130ec:	f105 010c 	add.w	r1, r5, #12
 80130f0:	4683      	mov	fp, r0
 80130f2:	0092      	lsls	r2, r2, #2
 80130f4:	300c      	adds	r0, #12
 80130f6:	f7fc feb9 	bl	800fe6c <memcpy>
 80130fa:	4629      	mov	r1, r5
 80130fc:	9802      	ldr	r0, [sp, #8]
 80130fe:	f000 f9bb 	bl	8013478 <_Bfree>
 8013102:	465d      	mov	r5, fp
 8013104:	692b      	ldr	r3, [r5, #16]
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801310c:	612a      	str	r2, [r5, #16]
 801310e:	2201      	movs	r2, #1
 8013110:	615a      	str	r2, [r3, #20]
 8013112:	e7c2      	b.n	801309a <__gethex+0x390>
 8013114:	692a      	ldr	r2, [r5, #16]
 8013116:	454a      	cmp	r2, r9
 8013118:	dd0b      	ble.n	8013132 <__gethex+0x428>
 801311a:	2101      	movs	r1, #1
 801311c:	4628      	mov	r0, r5
 801311e:	f7ff fda5 	bl	8012c6c <rshift>
 8013122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013126:	3401      	adds	r4, #1
 8013128:	42a3      	cmp	r3, r4
 801312a:	f6ff aed9 	blt.w	8012ee0 <__gethex+0x1d6>
 801312e:	2701      	movs	r7, #1
 8013130:	e7c7      	b.n	80130c2 <__gethex+0x3b8>
 8013132:	f016 061f 	ands.w	r6, r6, #31
 8013136:	d0fa      	beq.n	801312e <__gethex+0x424>
 8013138:	449a      	add	sl, r3
 801313a:	f1c6 0620 	rsb	r6, r6, #32
 801313e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013142:	f000 fa29 	bl	8013598 <__hi0bits>
 8013146:	42b0      	cmp	r0, r6
 8013148:	dbe7      	blt.n	801311a <__gethex+0x410>
 801314a:	e7f0      	b.n	801312e <__gethex+0x424>

0801314c <L_shift>:
 801314c:	f1c2 0208 	rsb	r2, r2, #8
 8013150:	0092      	lsls	r2, r2, #2
 8013152:	b570      	push	{r4, r5, r6, lr}
 8013154:	f1c2 0620 	rsb	r6, r2, #32
 8013158:	6843      	ldr	r3, [r0, #4]
 801315a:	6804      	ldr	r4, [r0, #0]
 801315c:	fa03 f506 	lsl.w	r5, r3, r6
 8013160:	432c      	orrs	r4, r5
 8013162:	40d3      	lsrs	r3, r2
 8013164:	6004      	str	r4, [r0, #0]
 8013166:	f840 3f04 	str.w	r3, [r0, #4]!
 801316a:	4288      	cmp	r0, r1
 801316c:	d3f4      	bcc.n	8013158 <L_shift+0xc>
 801316e:	bd70      	pop	{r4, r5, r6, pc}

08013170 <__match>:
 8013170:	b530      	push	{r4, r5, lr}
 8013172:	6803      	ldr	r3, [r0, #0]
 8013174:	3301      	adds	r3, #1
 8013176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801317a:	b914      	cbnz	r4, 8013182 <__match+0x12>
 801317c:	6003      	str	r3, [r0, #0]
 801317e:	2001      	movs	r0, #1
 8013180:	bd30      	pop	{r4, r5, pc}
 8013182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801318a:	2d19      	cmp	r5, #25
 801318c:	bf98      	it	ls
 801318e:	3220      	addls	r2, #32
 8013190:	42a2      	cmp	r2, r4
 8013192:	d0f0      	beq.n	8013176 <__match+0x6>
 8013194:	2000      	movs	r0, #0
 8013196:	e7f3      	b.n	8013180 <__match+0x10>

08013198 <__hexnan>:
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	680b      	ldr	r3, [r1, #0]
 801319e:	6801      	ldr	r1, [r0, #0]
 80131a0:	115f      	asrs	r7, r3, #5
 80131a2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80131a6:	f013 031f 	ands.w	r3, r3, #31
 80131aa:	b087      	sub	sp, #28
 80131ac:	bf18      	it	ne
 80131ae:	3704      	addne	r7, #4
 80131b0:	2500      	movs	r5, #0
 80131b2:	1f3e      	subs	r6, r7, #4
 80131b4:	4682      	mov	sl, r0
 80131b6:	4690      	mov	r8, r2
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	f847 5c04 	str.w	r5, [r7, #-4]
 80131be:	46b1      	mov	r9, r6
 80131c0:	4634      	mov	r4, r6
 80131c2:	9502      	str	r5, [sp, #8]
 80131c4:	46ab      	mov	fp, r5
 80131c6:	784a      	ldrb	r2, [r1, #1]
 80131c8:	1c4b      	adds	r3, r1, #1
 80131ca:	9303      	str	r3, [sp, #12]
 80131cc:	b342      	cbz	r2, 8013220 <__hexnan+0x88>
 80131ce:	4610      	mov	r0, r2
 80131d0:	9105      	str	r1, [sp, #20]
 80131d2:	9204      	str	r2, [sp, #16]
 80131d4:	f7ff fd84 	bl	8012ce0 <__hexdig_fun>
 80131d8:	2800      	cmp	r0, #0
 80131da:	d143      	bne.n	8013264 <__hexnan+0xcc>
 80131dc:	9a04      	ldr	r2, [sp, #16]
 80131de:	9905      	ldr	r1, [sp, #20]
 80131e0:	2a20      	cmp	r2, #32
 80131e2:	d818      	bhi.n	8013216 <__hexnan+0x7e>
 80131e4:	9b02      	ldr	r3, [sp, #8]
 80131e6:	459b      	cmp	fp, r3
 80131e8:	dd13      	ble.n	8013212 <__hexnan+0x7a>
 80131ea:	454c      	cmp	r4, r9
 80131ec:	d206      	bcs.n	80131fc <__hexnan+0x64>
 80131ee:	2d07      	cmp	r5, #7
 80131f0:	dc04      	bgt.n	80131fc <__hexnan+0x64>
 80131f2:	462a      	mov	r2, r5
 80131f4:	4649      	mov	r1, r9
 80131f6:	4620      	mov	r0, r4
 80131f8:	f7ff ffa8 	bl	801314c <L_shift>
 80131fc:	4544      	cmp	r4, r8
 80131fe:	d944      	bls.n	801328a <__hexnan+0xf2>
 8013200:	2300      	movs	r3, #0
 8013202:	f1a4 0904 	sub.w	r9, r4, #4
 8013206:	f844 3c04 	str.w	r3, [r4, #-4]
 801320a:	f8cd b008 	str.w	fp, [sp, #8]
 801320e:	464c      	mov	r4, r9
 8013210:	461d      	mov	r5, r3
 8013212:	9903      	ldr	r1, [sp, #12]
 8013214:	e7d7      	b.n	80131c6 <__hexnan+0x2e>
 8013216:	2a29      	cmp	r2, #41	; 0x29
 8013218:	d14a      	bne.n	80132b0 <__hexnan+0x118>
 801321a:	3102      	adds	r1, #2
 801321c:	f8ca 1000 	str.w	r1, [sl]
 8013220:	f1bb 0f00 	cmp.w	fp, #0
 8013224:	d044      	beq.n	80132b0 <__hexnan+0x118>
 8013226:	454c      	cmp	r4, r9
 8013228:	d206      	bcs.n	8013238 <__hexnan+0xa0>
 801322a:	2d07      	cmp	r5, #7
 801322c:	dc04      	bgt.n	8013238 <__hexnan+0xa0>
 801322e:	462a      	mov	r2, r5
 8013230:	4649      	mov	r1, r9
 8013232:	4620      	mov	r0, r4
 8013234:	f7ff ff8a 	bl	801314c <L_shift>
 8013238:	4544      	cmp	r4, r8
 801323a:	d928      	bls.n	801328e <__hexnan+0xf6>
 801323c:	4643      	mov	r3, r8
 801323e:	f854 2b04 	ldr.w	r2, [r4], #4
 8013242:	f843 2b04 	str.w	r2, [r3], #4
 8013246:	42a6      	cmp	r6, r4
 8013248:	d2f9      	bcs.n	801323e <__hexnan+0xa6>
 801324a:	2200      	movs	r2, #0
 801324c:	f843 2b04 	str.w	r2, [r3], #4
 8013250:	429e      	cmp	r6, r3
 8013252:	d2fb      	bcs.n	801324c <__hexnan+0xb4>
 8013254:	6833      	ldr	r3, [r6, #0]
 8013256:	b91b      	cbnz	r3, 8013260 <__hexnan+0xc8>
 8013258:	4546      	cmp	r6, r8
 801325a:	d127      	bne.n	80132ac <__hexnan+0x114>
 801325c:	2301      	movs	r3, #1
 801325e:	6033      	str	r3, [r6, #0]
 8013260:	2005      	movs	r0, #5
 8013262:	e026      	b.n	80132b2 <__hexnan+0x11a>
 8013264:	3501      	adds	r5, #1
 8013266:	2d08      	cmp	r5, #8
 8013268:	f10b 0b01 	add.w	fp, fp, #1
 801326c:	dd06      	ble.n	801327c <__hexnan+0xe4>
 801326e:	4544      	cmp	r4, r8
 8013270:	d9cf      	bls.n	8013212 <__hexnan+0x7a>
 8013272:	2300      	movs	r3, #0
 8013274:	f844 3c04 	str.w	r3, [r4, #-4]
 8013278:	2501      	movs	r5, #1
 801327a:	3c04      	subs	r4, #4
 801327c:	6822      	ldr	r2, [r4, #0]
 801327e:	f000 000f 	and.w	r0, r0, #15
 8013282:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013286:	6020      	str	r0, [r4, #0]
 8013288:	e7c3      	b.n	8013212 <__hexnan+0x7a>
 801328a:	2508      	movs	r5, #8
 801328c:	e7c1      	b.n	8013212 <__hexnan+0x7a>
 801328e:	9b01      	ldr	r3, [sp, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d0df      	beq.n	8013254 <__hexnan+0xbc>
 8013294:	f04f 32ff 	mov.w	r2, #4294967295
 8013298:	f1c3 0320 	rsb	r3, r3, #32
 801329c:	fa22 f303 	lsr.w	r3, r2, r3
 80132a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80132a4:	401a      	ands	r2, r3
 80132a6:	f847 2c04 	str.w	r2, [r7, #-4]
 80132aa:	e7d3      	b.n	8013254 <__hexnan+0xbc>
 80132ac:	3e04      	subs	r6, #4
 80132ae:	e7d1      	b.n	8013254 <__hexnan+0xbc>
 80132b0:	2004      	movs	r0, #4
 80132b2:	b007      	add	sp, #28
 80132b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132b8 <__locale_ctype_ptr_l>:
 80132b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80132bc:	4770      	bx	lr
	...

080132c0 <__locale_ctype_ptr>:
 80132c0:	4b04      	ldr	r3, [pc, #16]	; (80132d4 <__locale_ctype_ptr+0x14>)
 80132c2:	4a05      	ldr	r2, [pc, #20]	; (80132d8 <__locale_ctype_ptr+0x18>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	6a1b      	ldr	r3, [r3, #32]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	bf08      	it	eq
 80132cc:	4613      	moveq	r3, r2
 80132ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80132d2:	4770      	bx	lr
 80132d4:	200003ac 	.word	0x200003ac
 80132d8:	20000410 	.word	0x20000410

080132dc <__localeconv_l>:
 80132dc:	30f0      	adds	r0, #240	; 0xf0
 80132de:	4770      	bx	lr

080132e0 <_localeconv_r>:
 80132e0:	4b04      	ldr	r3, [pc, #16]	; (80132f4 <_localeconv_r+0x14>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	6a18      	ldr	r0, [r3, #32]
 80132e6:	4b04      	ldr	r3, [pc, #16]	; (80132f8 <_localeconv_r+0x18>)
 80132e8:	2800      	cmp	r0, #0
 80132ea:	bf08      	it	eq
 80132ec:	4618      	moveq	r0, r3
 80132ee:	30f0      	adds	r0, #240	; 0xf0
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	200003ac 	.word	0x200003ac
 80132f8:	20000410 	.word	0x20000410

080132fc <_lseek_r>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	4c07      	ldr	r4, [pc, #28]	; (801331c <_lseek_r+0x20>)
 8013300:	4605      	mov	r5, r0
 8013302:	4608      	mov	r0, r1
 8013304:	4611      	mov	r1, r2
 8013306:	2200      	movs	r2, #0
 8013308:	6022      	str	r2, [r4, #0]
 801330a:	461a      	mov	r2, r3
 801330c:	f001 fbd0 	bl	8014ab0 <_lseek>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_lseek_r+0x1e>
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	b103      	cbz	r3, 801331a <_lseek_r+0x1e>
 8013318:	602b      	str	r3, [r5, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20011bbc 	.word	0x20011bbc

08013320 <__swhatbuf_r>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	460e      	mov	r6, r1
 8013324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013328:	2900      	cmp	r1, #0
 801332a:	b096      	sub	sp, #88	; 0x58
 801332c:	4614      	mov	r4, r2
 801332e:	461d      	mov	r5, r3
 8013330:	da07      	bge.n	8013342 <__swhatbuf_r+0x22>
 8013332:	2300      	movs	r3, #0
 8013334:	602b      	str	r3, [r5, #0]
 8013336:	89b3      	ldrh	r3, [r6, #12]
 8013338:	061a      	lsls	r2, r3, #24
 801333a:	d410      	bmi.n	801335e <__swhatbuf_r+0x3e>
 801333c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013340:	e00e      	b.n	8013360 <__swhatbuf_r+0x40>
 8013342:	466a      	mov	r2, sp
 8013344:	f001 fb48 	bl	80149d8 <_fstat_r>
 8013348:	2800      	cmp	r0, #0
 801334a:	dbf2      	blt.n	8013332 <__swhatbuf_r+0x12>
 801334c:	9a01      	ldr	r2, [sp, #4]
 801334e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013352:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013356:	425a      	negs	r2, r3
 8013358:	415a      	adcs	r2, r3
 801335a:	602a      	str	r2, [r5, #0]
 801335c:	e7ee      	b.n	801333c <__swhatbuf_r+0x1c>
 801335e:	2340      	movs	r3, #64	; 0x40
 8013360:	2000      	movs	r0, #0
 8013362:	6023      	str	r3, [r4, #0]
 8013364:	b016      	add	sp, #88	; 0x58
 8013366:	bd70      	pop	{r4, r5, r6, pc}

08013368 <__smakebuf_r>:
 8013368:	898b      	ldrh	r3, [r1, #12]
 801336a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801336c:	079d      	lsls	r5, r3, #30
 801336e:	4606      	mov	r6, r0
 8013370:	460c      	mov	r4, r1
 8013372:	d507      	bpl.n	8013384 <__smakebuf_r+0x1c>
 8013374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	6123      	str	r3, [r4, #16]
 801337c:	2301      	movs	r3, #1
 801337e:	6163      	str	r3, [r4, #20]
 8013380:	b002      	add	sp, #8
 8013382:	bd70      	pop	{r4, r5, r6, pc}
 8013384:	ab01      	add	r3, sp, #4
 8013386:	466a      	mov	r2, sp
 8013388:	f7ff ffca 	bl	8013320 <__swhatbuf_r>
 801338c:	9900      	ldr	r1, [sp, #0]
 801338e:	4605      	mov	r5, r0
 8013390:	4630      	mov	r0, r6
 8013392:	f7fc fddb 	bl	800ff4c <_malloc_r>
 8013396:	b948      	cbnz	r0, 80133ac <__smakebuf_r+0x44>
 8013398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801339c:	059a      	lsls	r2, r3, #22
 801339e:	d4ef      	bmi.n	8013380 <__smakebuf_r+0x18>
 80133a0:	f023 0303 	bic.w	r3, r3, #3
 80133a4:	f043 0302 	orr.w	r3, r3, #2
 80133a8:	81a3      	strh	r3, [r4, #12]
 80133aa:	e7e3      	b.n	8013374 <__smakebuf_r+0xc>
 80133ac:	4b0d      	ldr	r3, [pc, #52]	; (80133e4 <__smakebuf_r+0x7c>)
 80133ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80133b0:	89a3      	ldrh	r3, [r4, #12]
 80133b2:	6020      	str	r0, [r4, #0]
 80133b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133b8:	81a3      	strh	r3, [r4, #12]
 80133ba:	9b00      	ldr	r3, [sp, #0]
 80133bc:	6163      	str	r3, [r4, #20]
 80133be:	9b01      	ldr	r3, [sp, #4]
 80133c0:	6120      	str	r0, [r4, #16]
 80133c2:	b15b      	cbz	r3, 80133dc <__smakebuf_r+0x74>
 80133c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133c8:	4630      	mov	r0, r6
 80133ca:	f001 fb17 	bl	80149fc <_isatty_r>
 80133ce:	b128      	cbz	r0, 80133dc <__smakebuf_r+0x74>
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	f023 0303 	bic.w	r3, r3, #3
 80133d6:	f043 0301 	orr.w	r3, r3, #1
 80133da:	81a3      	strh	r3, [r4, #12]
 80133dc:	89a3      	ldrh	r3, [r4, #12]
 80133de:	431d      	orrs	r5, r3
 80133e0:	81a5      	strh	r5, [r4, #12]
 80133e2:	e7cd      	b.n	8013380 <__smakebuf_r+0x18>
 80133e4:	08012b21 	.word	0x08012b21

080133e8 <__ascii_mbtowc>:
 80133e8:	b082      	sub	sp, #8
 80133ea:	b901      	cbnz	r1, 80133ee <__ascii_mbtowc+0x6>
 80133ec:	a901      	add	r1, sp, #4
 80133ee:	b142      	cbz	r2, 8013402 <__ascii_mbtowc+0x1a>
 80133f0:	b14b      	cbz	r3, 8013406 <__ascii_mbtowc+0x1e>
 80133f2:	7813      	ldrb	r3, [r2, #0]
 80133f4:	600b      	str	r3, [r1, #0]
 80133f6:	7812      	ldrb	r2, [r2, #0]
 80133f8:	1c10      	adds	r0, r2, #0
 80133fa:	bf18      	it	ne
 80133fc:	2001      	movne	r0, #1
 80133fe:	b002      	add	sp, #8
 8013400:	4770      	bx	lr
 8013402:	4610      	mov	r0, r2
 8013404:	e7fb      	b.n	80133fe <__ascii_mbtowc+0x16>
 8013406:	f06f 0001 	mvn.w	r0, #1
 801340a:	e7f8      	b.n	80133fe <__ascii_mbtowc+0x16>

0801340c <__malloc_lock>:
 801340c:	4770      	bx	lr

0801340e <__malloc_unlock>:
 801340e:	4770      	bx	lr

08013410 <_Balloc>:
 8013410:	b570      	push	{r4, r5, r6, lr}
 8013412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013414:	4604      	mov	r4, r0
 8013416:	460e      	mov	r6, r1
 8013418:	b93d      	cbnz	r5, 801342a <_Balloc+0x1a>
 801341a:	2010      	movs	r0, #16
 801341c:	f7fc fd1e 	bl	800fe5c <malloc>
 8013420:	6260      	str	r0, [r4, #36]	; 0x24
 8013422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013426:	6005      	str	r5, [r0, #0]
 8013428:	60c5      	str	r5, [r0, #12]
 801342a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801342c:	68eb      	ldr	r3, [r5, #12]
 801342e:	b183      	cbz	r3, 8013452 <_Balloc+0x42>
 8013430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013432:	68db      	ldr	r3, [r3, #12]
 8013434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013438:	b9b8      	cbnz	r0, 801346a <_Balloc+0x5a>
 801343a:	2101      	movs	r1, #1
 801343c:	fa01 f506 	lsl.w	r5, r1, r6
 8013440:	1d6a      	adds	r2, r5, #5
 8013442:	0092      	lsls	r2, r2, #2
 8013444:	4620      	mov	r0, r4
 8013446:	f7fc fd24 	bl	800fe92 <_calloc_r>
 801344a:	b160      	cbz	r0, 8013466 <_Balloc+0x56>
 801344c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013450:	e00e      	b.n	8013470 <_Balloc+0x60>
 8013452:	2221      	movs	r2, #33	; 0x21
 8013454:	2104      	movs	r1, #4
 8013456:	4620      	mov	r0, r4
 8013458:	f7fc fd1b 	bl	800fe92 <_calloc_r>
 801345c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801345e:	60e8      	str	r0, [r5, #12]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d1e4      	bne.n	8013430 <_Balloc+0x20>
 8013466:	2000      	movs	r0, #0
 8013468:	bd70      	pop	{r4, r5, r6, pc}
 801346a:	6802      	ldr	r2, [r0, #0]
 801346c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013470:	2300      	movs	r3, #0
 8013472:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013476:	e7f7      	b.n	8013468 <_Balloc+0x58>

08013478 <_Bfree>:
 8013478:	b570      	push	{r4, r5, r6, lr}
 801347a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801347c:	4606      	mov	r6, r0
 801347e:	460d      	mov	r5, r1
 8013480:	b93c      	cbnz	r4, 8013492 <_Bfree+0x1a>
 8013482:	2010      	movs	r0, #16
 8013484:	f7fc fcea 	bl	800fe5c <malloc>
 8013488:	6270      	str	r0, [r6, #36]	; 0x24
 801348a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801348e:	6004      	str	r4, [r0, #0]
 8013490:	60c4      	str	r4, [r0, #12]
 8013492:	b13d      	cbz	r5, 80134a4 <_Bfree+0x2c>
 8013494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013496:	686a      	ldr	r2, [r5, #4]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801349e:	6029      	str	r1, [r5, #0]
 80134a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80134a4:	bd70      	pop	{r4, r5, r6, pc}

080134a6 <__multadd>:
 80134a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134aa:	690d      	ldr	r5, [r1, #16]
 80134ac:	461f      	mov	r7, r3
 80134ae:	4606      	mov	r6, r0
 80134b0:	460c      	mov	r4, r1
 80134b2:	f101 0c14 	add.w	ip, r1, #20
 80134b6:	2300      	movs	r3, #0
 80134b8:	f8dc 0000 	ldr.w	r0, [ip]
 80134bc:	b281      	uxth	r1, r0
 80134be:	fb02 7101 	mla	r1, r2, r1, r7
 80134c2:	0c0f      	lsrs	r7, r1, #16
 80134c4:	0c00      	lsrs	r0, r0, #16
 80134c6:	fb02 7000 	mla	r0, r2, r0, r7
 80134ca:	b289      	uxth	r1, r1
 80134cc:	3301      	adds	r3, #1
 80134ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80134d2:	429d      	cmp	r5, r3
 80134d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80134d8:	f84c 1b04 	str.w	r1, [ip], #4
 80134dc:	dcec      	bgt.n	80134b8 <__multadd+0x12>
 80134de:	b1d7      	cbz	r7, 8013516 <__multadd+0x70>
 80134e0:	68a3      	ldr	r3, [r4, #8]
 80134e2:	42ab      	cmp	r3, r5
 80134e4:	dc12      	bgt.n	801350c <__multadd+0x66>
 80134e6:	6861      	ldr	r1, [r4, #4]
 80134e8:	4630      	mov	r0, r6
 80134ea:	3101      	adds	r1, #1
 80134ec:	f7ff ff90 	bl	8013410 <_Balloc>
 80134f0:	6922      	ldr	r2, [r4, #16]
 80134f2:	3202      	adds	r2, #2
 80134f4:	f104 010c 	add.w	r1, r4, #12
 80134f8:	4680      	mov	r8, r0
 80134fa:	0092      	lsls	r2, r2, #2
 80134fc:	300c      	adds	r0, #12
 80134fe:	f7fc fcb5 	bl	800fe6c <memcpy>
 8013502:	4621      	mov	r1, r4
 8013504:	4630      	mov	r0, r6
 8013506:	f7ff ffb7 	bl	8013478 <_Bfree>
 801350a:	4644      	mov	r4, r8
 801350c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013510:	3501      	adds	r5, #1
 8013512:	615f      	str	r7, [r3, #20]
 8013514:	6125      	str	r5, [r4, #16]
 8013516:	4620      	mov	r0, r4
 8013518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801351c <__s2b>:
 801351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013520:	460c      	mov	r4, r1
 8013522:	4615      	mov	r5, r2
 8013524:	461f      	mov	r7, r3
 8013526:	2209      	movs	r2, #9
 8013528:	3308      	adds	r3, #8
 801352a:	4606      	mov	r6, r0
 801352c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013530:	2100      	movs	r1, #0
 8013532:	2201      	movs	r2, #1
 8013534:	429a      	cmp	r2, r3
 8013536:	db20      	blt.n	801357a <__s2b+0x5e>
 8013538:	4630      	mov	r0, r6
 801353a:	f7ff ff69 	bl	8013410 <_Balloc>
 801353e:	9b08      	ldr	r3, [sp, #32]
 8013540:	6143      	str	r3, [r0, #20]
 8013542:	2d09      	cmp	r5, #9
 8013544:	f04f 0301 	mov.w	r3, #1
 8013548:	6103      	str	r3, [r0, #16]
 801354a:	dd19      	ble.n	8013580 <__s2b+0x64>
 801354c:	f104 0809 	add.w	r8, r4, #9
 8013550:	46c1      	mov	r9, r8
 8013552:	442c      	add	r4, r5
 8013554:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013558:	4601      	mov	r1, r0
 801355a:	3b30      	subs	r3, #48	; 0x30
 801355c:	220a      	movs	r2, #10
 801355e:	4630      	mov	r0, r6
 8013560:	f7ff ffa1 	bl	80134a6 <__multadd>
 8013564:	45a1      	cmp	r9, r4
 8013566:	d1f5      	bne.n	8013554 <__s2b+0x38>
 8013568:	eb08 0405 	add.w	r4, r8, r5
 801356c:	3c08      	subs	r4, #8
 801356e:	1b2d      	subs	r5, r5, r4
 8013570:	1963      	adds	r3, r4, r5
 8013572:	42bb      	cmp	r3, r7
 8013574:	db07      	blt.n	8013586 <__s2b+0x6a>
 8013576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801357a:	0052      	lsls	r2, r2, #1
 801357c:	3101      	adds	r1, #1
 801357e:	e7d9      	b.n	8013534 <__s2b+0x18>
 8013580:	340a      	adds	r4, #10
 8013582:	2509      	movs	r5, #9
 8013584:	e7f3      	b.n	801356e <__s2b+0x52>
 8013586:	f814 3b01 	ldrb.w	r3, [r4], #1
 801358a:	4601      	mov	r1, r0
 801358c:	3b30      	subs	r3, #48	; 0x30
 801358e:	220a      	movs	r2, #10
 8013590:	4630      	mov	r0, r6
 8013592:	f7ff ff88 	bl	80134a6 <__multadd>
 8013596:	e7eb      	b.n	8013570 <__s2b+0x54>

08013598 <__hi0bits>:
 8013598:	0c02      	lsrs	r2, r0, #16
 801359a:	0412      	lsls	r2, r2, #16
 801359c:	4603      	mov	r3, r0
 801359e:	b9b2      	cbnz	r2, 80135ce <__hi0bits+0x36>
 80135a0:	0403      	lsls	r3, r0, #16
 80135a2:	2010      	movs	r0, #16
 80135a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80135a8:	bf04      	itt	eq
 80135aa:	021b      	lsleq	r3, r3, #8
 80135ac:	3008      	addeq	r0, #8
 80135ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80135b2:	bf04      	itt	eq
 80135b4:	011b      	lsleq	r3, r3, #4
 80135b6:	3004      	addeq	r0, #4
 80135b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80135bc:	bf04      	itt	eq
 80135be:	009b      	lsleq	r3, r3, #2
 80135c0:	3002      	addeq	r0, #2
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	db06      	blt.n	80135d4 <__hi0bits+0x3c>
 80135c6:	005b      	lsls	r3, r3, #1
 80135c8:	d503      	bpl.n	80135d2 <__hi0bits+0x3a>
 80135ca:	3001      	adds	r0, #1
 80135cc:	4770      	bx	lr
 80135ce:	2000      	movs	r0, #0
 80135d0:	e7e8      	b.n	80135a4 <__hi0bits+0xc>
 80135d2:	2020      	movs	r0, #32
 80135d4:	4770      	bx	lr

080135d6 <__lo0bits>:
 80135d6:	6803      	ldr	r3, [r0, #0]
 80135d8:	f013 0207 	ands.w	r2, r3, #7
 80135dc:	4601      	mov	r1, r0
 80135de:	d00b      	beq.n	80135f8 <__lo0bits+0x22>
 80135e0:	07da      	lsls	r2, r3, #31
 80135e2:	d423      	bmi.n	801362c <__lo0bits+0x56>
 80135e4:	0798      	lsls	r0, r3, #30
 80135e6:	bf49      	itett	mi
 80135e8:	085b      	lsrmi	r3, r3, #1
 80135ea:	089b      	lsrpl	r3, r3, #2
 80135ec:	2001      	movmi	r0, #1
 80135ee:	600b      	strmi	r3, [r1, #0]
 80135f0:	bf5c      	itt	pl
 80135f2:	600b      	strpl	r3, [r1, #0]
 80135f4:	2002      	movpl	r0, #2
 80135f6:	4770      	bx	lr
 80135f8:	b298      	uxth	r0, r3
 80135fa:	b9a8      	cbnz	r0, 8013628 <__lo0bits+0x52>
 80135fc:	0c1b      	lsrs	r3, r3, #16
 80135fe:	2010      	movs	r0, #16
 8013600:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013604:	bf04      	itt	eq
 8013606:	0a1b      	lsreq	r3, r3, #8
 8013608:	3008      	addeq	r0, #8
 801360a:	071a      	lsls	r2, r3, #28
 801360c:	bf04      	itt	eq
 801360e:	091b      	lsreq	r3, r3, #4
 8013610:	3004      	addeq	r0, #4
 8013612:	079a      	lsls	r2, r3, #30
 8013614:	bf04      	itt	eq
 8013616:	089b      	lsreq	r3, r3, #2
 8013618:	3002      	addeq	r0, #2
 801361a:	07da      	lsls	r2, r3, #31
 801361c:	d402      	bmi.n	8013624 <__lo0bits+0x4e>
 801361e:	085b      	lsrs	r3, r3, #1
 8013620:	d006      	beq.n	8013630 <__lo0bits+0x5a>
 8013622:	3001      	adds	r0, #1
 8013624:	600b      	str	r3, [r1, #0]
 8013626:	4770      	bx	lr
 8013628:	4610      	mov	r0, r2
 801362a:	e7e9      	b.n	8013600 <__lo0bits+0x2a>
 801362c:	2000      	movs	r0, #0
 801362e:	4770      	bx	lr
 8013630:	2020      	movs	r0, #32
 8013632:	4770      	bx	lr

08013634 <__i2b>:
 8013634:	b510      	push	{r4, lr}
 8013636:	460c      	mov	r4, r1
 8013638:	2101      	movs	r1, #1
 801363a:	f7ff fee9 	bl	8013410 <_Balloc>
 801363e:	2201      	movs	r2, #1
 8013640:	6144      	str	r4, [r0, #20]
 8013642:	6102      	str	r2, [r0, #16]
 8013644:	bd10      	pop	{r4, pc}

08013646 <__multiply>:
 8013646:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364a:	4614      	mov	r4, r2
 801364c:	690a      	ldr	r2, [r1, #16]
 801364e:	6923      	ldr	r3, [r4, #16]
 8013650:	429a      	cmp	r2, r3
 8013652:	bfb8      	it	lt
 8013654:	460b      	movlt	r3, r1
 8013656:	4688      	mov	r8, r1
 8013658:	bfbc      	itt	lt
 801365a:	46a0      	movlt	r8, r4
 801365c:	461c      	movlt	r4, r3
 801365e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013662:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801366a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801366e:	eb07 0609 	add.w	r6, r7, r9
 8013672:	42b3      	cmp	r3, r6
 8013674:	bfb8      	it	lt
 8013676:	3101      	addlt	r1, #1
 8013678:	f7ff feca 	bl	8013410 <_Balloc>
 801367c:	f100 0514 	add.w	r5, r0, #20
 8013680:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013684:	462b      	mov	r3, r5
 8013686:	2200      	movs	r2, #0
 8013688:	4573      	cmp	r3, lr
 801368a:	d316      	bcc.n	80136ba <__multiply+0x74>
 801368c:	f104 0214 	add.w	r2, r4, #20
 8013690:	f108 0114 	add.w	r1, r8, #20
 8013694:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013698:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801369c:	9300      	str	r3, [sp, #0]
 801369e:	9b00      	ldr	r3, [sp, #0]
 80136a0:	9201      	str	r2, [sp, #4]
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d80c      	bhi.n	80136c0 <__multiply+0x7a>
 80136a6:	2e00      	cmp	r6, #0
 80136a8:	dd03      	ble.n	80136b2 <__multiply+0x6c>
 80136aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d05d      	beq.n	801376e <__multiply+0x128>
 80136b2:	6106      	str	r6, [r0, #16]
 80136b4:	b003      	add	sp, #12
 80136b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ba:	f843 2b04 	str.w	r2, [r3], #4
 80136be:	e7e3      	b.n	8013688 <__multiply+0x42>
 80136c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80136c4:	f1bb 0f00 	cmp.w	fp, #0
 80136c8:	d023      	beq.n	8013712 <__multiply+0xcc>
 80136ca:	4689      	mov	r9, r1
 80136cc:	46ac      	mov	ip, r5
 80136ce:	f04f 0800 	mov.w	r8, #0
 80136d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80136d6:	f8dc a000 	ldr.w	sl, [ip]
 80136da:	b2a3      	uxth	r3, r4
 80136dc:	fa1f fa8a 	uxth.w	sl, sl
 80136e0:	fb0b a303 	mla	r3, fp, r3, sl
 80136e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80136e8:	f8dc 4000 	ldr.w	r4, [ip]
 80136ec:	4443      	add	r3, r8
 80136ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80136f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80136f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80136fa:	46e2      	mov	sl, ip
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013702:	454f      	cmp	r7, r9
 8013704:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013708:	f84a 3b04 	str.w	r3, [sl], #4
 801370c:	d82b      	bhi.n	8013766 <__multiply+0x120>
 801370e:	f8cc 8004 	str.w	r8, [ip, #4]
 8013712:	9b01      	ldr	r3, [sp, #4]
 8013714:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013718:	3204      	adds	r2, #4
 801371a:	f1ba 0f00 	cmp.w	sl, #0
 801371e:	d020      	beq.n	8013762 <__multiply+0x11c>
 8013720:	682b      	ldr	r3, [r5, #0]
 8013722:	4689      	mov	r9, r1
 8013724:	46a8      	mov	r8, r5
 8013726:	f04f 0b00 	mov.w	fp, #0
 801372a:	f8b9 c000 	ldrh.w	ip, [r9]
 801372e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013732:	fb0a 440c 	mla	r4, sl, ip, r4
 8013736:	445c      	add	r4, fp
 8013738:	46c4      	mov	ip, r8
 801373a:	b29b      	uxth	r3, r3
 801373c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013740:	f84c 3b04 	str.w	r3, [ip], #4
 8013744:	f859 3b04 	ldr.w	r3, [r9], #4
 8013748:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801374c:	0c1b      	lsrs	r3, r3, #16
 801374e:	fb0a b303 	mla	r3, sl, r3, fp
 8013752:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013756:	454f      	cmp	r7, r9
 8013758:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801375c:	d805      	bhi.n	801376a <__multiply+0x124>
 801375e:	f8c8 3004 	str.w	r3, [r8, #4]
 8013762:	3504      	adds	r5, #4
 8013764:	e79b      	b.n	801369e <__multiply+0x58>
 8013766:	46d4      	mov	ip, sl
 8013768:	e7b3      	b.n	80136d2 <__multiply+0x8c>
 801376a:	46e0      	mov	r8, ip
 801376c:	e7dd      	b.n	801372a <__multiply+0xe4>
 801376e:	3e01      	subs	r6, #1
 8013770:	e799      	b.n	80136a6 <__multiply+0x60>
	...

08013774 <__pow5mult>:
 8013774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013778:	4615      	mov	r5, r2
 801377a:	f012 0203 	ands.w	r2, r2, #3
 801377e:	4606      	mov	r6, r0
 8013780:	460f      	mov	r7, r1
 8013782:	d007      	beq.n	8013794 <__pow5mult+0x20>
 8013784:	3a01      	subs	r2, #1
 8013786:	4c21      	ldr	r4, [pc, #132]	; (801380c <__pow5mult+0x98>)
 8013788:	2300      	movs	r3, #0
 801378a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801378e:	f7ff fe8a 	bl	80134a6 <__multadd>
 8013792:	4607      	mov	r7, r0
 8013794:	10ad      	asrs	r5, r5, #2
 8013796:	d035      	beq.n	8013804 <__pow5mult+0x90>
 8013798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801379a:	b93c      	cbnz	r4, 80137ac <__pow5mult+0x38>
 801379c:	2010      	movs	r0, #16
 801379e:	f7fc fb5d 	bl	800fe5c <malloc>
 80137a2:	6270      	str	r0, [r6, #36]	; 0x24
 80137a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80137a8:	6004      	str	r4, [r0, #0]
 80137aa:	60c4      	str	r4, [r0, #12]
 80137ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80137b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80137b4:	b94c      	cbnz	r4, 80137ca <__pow5mult+0x56>
 80137b6:	f240 2171 	movw	r1, #625	; 0x271
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ff3a 	bl	8013634 <__i2b>
 80137c0:	2300      	movs	r3, #0
 80137c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80137c6:	4604      	mov	r4, r0
 80137c8:	6003      	str	r3, [r0, #0]
 80137ca:	f04f 0800 	mov.w	r8, #0
 80137ce:	07eb      	lsls	r3, r5, #31
 80137d0:	d50a      	bpl.n	80137e8 <__pow5mult+0x74>
 80137d2:	4639      	mov	r1, r7
 80137d4:	4622      	mov	r2, r4
 80137d6:	4630      	mov	r0, r6
 80137d8:	f7ff ff35 	bl	8013646 <__multiply>
 80137dc:	4639      	mov	r1, r7
 80137de:	4681      	mov	r9, r0
 80137e0:	4630      	mov	r0, r6
 80137e2:	f7ff fe49 	bl	8013478 <_Bfree>
 80137e6:	464f      	mov	r7, r9
 80137e8:	106d      	asrs	r5, r5, #1
 80137ea:	d00b      	beq.n	8013804 <__pow5mult+0x90>
 80137ec:	6820      	ldr	r0, [r4, #0]
 80137ee:	b938      	cbnz	r0, 8013800 <__pow5mult+0x8c>
 80137f0:	4622      	mov	r2, r4
 80137f2:	4621      	mov	r1, r4
 80137f4:	4630      	mov	r0, r6
 80137f6:	f7ff ff26 	bl	8013646 <__multiply>
 80137fa:	6020      	str	r0, [r4, #0]
 80137fc:	f8c0 8000 	str.w	r8, [r0]
 8013800:	4604      	mov	r4, r0
 8013802:	e7e4      	b.n	80137ce <__pow5mult+0x5a>
 8013804:	4638      	mov	r0, r7
 8013806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801380a:	bf00      	nop
 801380c:	08015370 	.word	0x08015370

08013810 <__lshift>:
 8013810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013814:	460c      	mov	r4, r1
 8013816:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801381a:	6923      	ldr	r3, [r4, #16]
 801381c:	6849      	ldr	r1, [r1, #4]
 801381e:	eb0a 0903 	add.w	r9, sl, r3
 8013822:	68a3      	ldr	r3, [r4, #8]
 8013824:	4607      	mov	r7, r0
 8013826:	4616      	mov	r6, r2
 8013828:	f109 0501 	add.w	r5, r9, #1
 801382c:	42ab      	cmp	r3, r5
 801382e:	db32      	blt.n	8013896 <__lshift+0x86>
 8013830:	4638      	mov	r0, r7
 8013832:	f7ff fded 	bl	8013410 <_Balloc>
 8013836:	2300      	movs	r3, #0
 8013838:	4680      	mov	r8, r0
 801383a:	f100 0114 	add.w	r1, r0, #20
 801383e:	461a      	mov	r2, r3
 8013840:	4553      	cmp	r3, sl
 8013842:	db2b      	blt.n	801389c <__lshift+0x8c>
 8013844:	6920      	ldr	r0, [r4, #16]
 8013846:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801384a:	f104 0314 	add.w	r3, r4, #20
 801384e:	f016 021f 	ands.w	r2, r6, #31
 8013852:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013856:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801385a:	d025      	beq.n	80138a8 <__lshift+0x98>
 801385c:	f1c2 0e20 	rsb	lr, r2, #32
 8013860:	2000      	movs	r0, #0
 8013862:	681e      	ldr	r6, [r3, #0]
 8013864:	468a      	mov	sl, r1
 8013866:	4096      	lsls	r6, r2
 8013868:	4330      	orrs	r0, r6
 801386a:	f84a 0b04 	str.w	r0, [sl], #4
 801386e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013872:	459c      	cmp	ip, r3
 8013874:	fa20 f00e 	lsr.w	r0, r0, lr
 8013878:	d814      	bhi.n	80138a4 <__lshift+0x94>
 801387a:	6048      	str	r0, [r1, #4]
 801387c:	b108      	cbz	r0, 8013882 <__lshift+0x72>
 801387e:	f109 0502 	add.w	r5, r9, #2
 8013882:	3d01      	subs	r5, #1
 8013884:	4638      	mov	r0, r7
 8013886:	f8c8 5010 	str.w	r5, [r8, #16]
 801388a:	4621      	mov	r1, r4
 801388c:	f7ff fdf4 	bl	8013478 <_Bfree>
 8013890:	4640      	mov	r0, r8
 8013892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013896:	3101      	adds	r1, #1
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	e7c7      	b.n	801382c <__lshift+0x1c>
 801389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80138a0:	3301      	adds	r3, #1
 80138a2:	e7cd      	b.n	8013840 <__lshift+0x30>
 80138a4:	4651      	mov	r1, sl
 80138a6:	e7dc      	b.n	8013862 <__lshift+0x52>
 80138a8:	3904      	subs	r1, #4
 80138aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80138ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80138b2:	459c      	cmp	ip, r3
 80138b4:	d8f9      	bhi.n	80138aa <__lshift+0x9a>
 80138b6:	e7e4      	b.n	8013882 <__lshift+0x72>

080138b8 <__mcmp>:
 80138b8:	6903      	ldr	r3, [r0, #16]
 80138ba:	690a      	ldr	r2, [r1, #16]
 80138bc:	1a9b      	subs	r3, r3, r2
 80138be:	b530      	push	{r4, r5, lr}
 80138c0:	d10c      	bne.n	80138dc <__mcmp+0x24>
 80138c2:	0092      	lsls	r2, r2, #2
 80138c4:	3014      	adds	r0, #20
 80138c6:	3114      	adds	r1, #20
 80138c8:	1884      	adds	r4, r0, r2
 80138ca:	4411      	add	r1, r2
 80138cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80138d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80138d4:	4295      	cmp	r5, r2
 80138d6:	d003      	beq.n	80138e0 <__mcmp+0x28>
 80138d8:	d305      	bcc.n	80138e6 <__mcmp+0x2e>
 80138da:	2301      	movs	r3, #1
 80138dc:	4618      	mov	r0, r3
 80138de:	bd30      	pop	{r4, r5, pc}
 80138e0:	42a0      	cmp	r0, r4
 80138e2:	d3f3      	bcc.n	80138cc <__mcmp+0x14>
 80138e4:	e7fa      	b.n	80138dc <__mcmp+0x24>
 80138e6:	f04f 33ff 	mov.w	r3, #4294967295
 80138ea:	e7f7      	b.n	80138dc <__mcmp+0x24>

080138ec <__mdiff>:
 80138ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138f0:	460d      	mov	r5, r1
 80138f2:	4607      	mov	r7, r0
 80138f4:	4611      	mov	r1, r2
 80138f6:	4628      	mov	r0, r5
 80138f8:	4614      	mov	r4, r2
 80138fa:	f7ff ffdd 	bl	80138b8 <__mcmp>
 80138fe:	1e06      	subs	r6, r0, #0
 8013900:	d108      	bne.n	8013914 <__mdiff+0x28>
 8013902:	4631      	mov	r1, r6
 8013904:	4638      	mov	r0, r7
 8013906:	f7ff fd83 	bl	8013410 <_Balloc>
 801390a:	2301      	movs	r3, #1
 801390c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013914:	bfa4      	itt	ge
 8013916:	4623      	movge	r3, r4
 8013918:	462c      	movge	r4, r5
 801391a:	4638      	mov	r0, r7
 801391c:	6861      	ldr	r1, [r4, #4]
 801391e:	bfa6      	itte	ge
 8013920:	461d      	movge	r5, r3
 8013922:	2600      	movge	r6, #0
 8013924:	2601      	movlt	r6, #1
 8013926:	f7ff fd73 	bl	8013410 <_Balloc>
 801392a:	692b      	ldr	r3, [r5, #16]
 801392c:	60c6      	str	r6, [r0, #12]
 801392e:	6926      	ldr	r6, [r4, #16]
 8013930:	f105 0914 	add.w	r9, r5, #20
 8013934:	f104 0214 	add.w	r2, r4, #20
 8013938:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801393c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013940:	f100 0514 	add.w	r5, r0, #20
 8013944:	f04f 0e00 	mov.w	lr, #0
 8013948:	f852 ab04 	ldr.w	sl, [r2], #4
 801394c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013950:	fa1e f18a 	uxtah	r1, lr, sl
 8013954:	b2a3      	uxth	r3, r4
 8013956:	1ac9      	subs	r1, r1, r3
 8013958:	0c23      	lsrs	r3, r4, #16
 801395a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801395e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013962:	b289      	uxth	r1, r1
 8013964:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013968:	45c8      	cmp	r8, r9
 801396a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801396e:	4694      	mov	ip, r2
 8013970:	f845 3b04 	str.w	r3, [r5], #4
 8013974:	d8e8      	bhi.n	8013948 <__mdiff+0x5c>
 8013976:	45bc      	cmp	ip, r7
 8013978:	d304      	bcc.n	8013984 <__mdiff+0x98>
 801397a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801397e:	b183      	cbz	r3, 80139a2 <__mdiff+0xb6>
 8013980:	6106      	str	r6, [r0, #16]
 8013982:	e7c5      	b.n	8013910 <__mdiff+0x24>
 8013984:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013988:	fa1e f381 	uxtah	r3, lr, r1
 801398c:	141a      	asrs	r2, r3, #16
 801398e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013992:	b29b      	uxth	r3, r3
 8013994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013998:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801399c:	f845 3b04 	str.w	r3, [r5], #4
 80139a0:	e7e9      	b.n	8013976 <__mdiff+0x8a>
 80139a2:	3e01      	subs	r6, #1
 80139a4:	e7e9      	b.n	801397a <__mdiff+0x8e>
	...

080139a8 <__ulp>:
 80139a8:	4b12      	ldr	r3, [pc, #72]	; (80139f4 <__ulp+0x4c>)
 80139aa:	ee10 2a90 	vmov	r2, s1
 80139ae:	401a      	ands	r2, r3
 80139b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	dd04      	ble.n	80139c2 <__ulp+0x1a>
 80139b8:	2000      	movs	r0, #0
 80139ba:	4619      	mov	r1, r3
 80139bc:	ec41 0b10 	vmov	d0, r0, r1
 80139c0:	4770      	bx	lr
 80139c2:	425b      	negs	r3, r3
 80139c4:	151b      	asrs	r3, r3, #20
 80139c6:	2b13      	cmp	r3, #19
 80139c8:	f04f 0000 	mov.w	r0, #0
 80139cc:	f04f 0100 	mov.w	r1, #0
 80139d0:	dc04      	bgt.n	80139dc <__ulp+0x34>
 80139d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80139d6:	fa42 f103 	asr.w	r1, r2, r3
 80139da:	e7ef      	b.n	80139bc <__ulp+0x14>
 80139dc:	3b14      	subs	r3, #20
 80139de:	2b1e      	cmp	r3, #30
 80139e0:	f04f 0201 	mov.w	r2, #1
 80139e4:	bfda      	itte	le
 80139e6:	f1c3 031f 	rsble	r3, r3, #31
 80139ea:	fa02 f303 	lslle.w	r3, r2, r3
 80139ee:	4613      	movgt	r3, r2
 80139f0:	4618      	mov	r0, r3
 80139f2:	e7e3      	b.n	80139bc <__ulp+0x14>
 80139f4:	7ff00000 	.word	0x7ff00000

080139f8 <__b2d>:
 80139f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139fa:	6905      	ldr	r5, [r0, #16]
 80139fc:	f100 0714 	add.w	r7, r0, #20
 8013a00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013a04:	1f2e      	subs	r6, r5, #4
 8013a06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f7ff fdc4 	bl	8013598 <__hi0bits>
 8013a10:	f1c0 0320 	rsb	r3, r0, #32
 8013a14:	280a      	cmp	r0, #10
 8013a16:	600b      	str	r3, [r1, #0]
 8013a18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013a90 <__b2d+0x98>
 8013a1c:	dc14      	bgt.n	8013a48 <__b2d+0x50>
 8013a1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013a22:	fa24 f10e 	lsr.w	r1, r4, lr
 8013a26:	42b7      	cmp	r7, r6
 8013a28:	ea41 030c 	orr.w	r3, r1, ip
 8013a2c:	bf34      	ite	cc
 8013a2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a32:	2100      	movcs	r1, #0
 8013a34:	3015      	adds	r0, #21
 8013a36:	fa04 f000 	lsl.w	r0, r4, r0
 8013a3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013a3e:	ea40 0201 	orr.w	r2, r0, r1
 8013a42:	ec43 2b10 	vmov	d0, r2, r3
 8013a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a48:	42b7      	cmp	r7, r6
 8013a4a:	bf3a      	itte	cc
 8013a4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a54:	2100      	movcs	r1, #0
 8013a56:	380b      	subs	r0, #11
 8013a58:	d015      	beq.n	8013a86 <__b2d+0x8e>
 8013a5a:	4084      	lsls	r4, r0
 8013a5c:	f1c0 0520 	rsb	r5, r0, #32
 8013a60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013a64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013a68:	42be      	cmp	r6, r7
 8013a6a:	fa21 fc05 	lsr.w	ip, r1, r5
 8013a6e:	ea44 030c 	orr.w	r3, r4, ip
 8013a72:	bf8c      	ite	hi
 8013a74:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a78:	2400      	movls	r4, #0
 8013a7a:	fa01 f000 	lsl.w	r0, r1, r0
 8013a7e:	40ec      	lsrs	r4, r5
 8013a80:	ea40 0204 	orr.w	r2, r0, r4
 8013a84:	e7dd      	b.n	8013a42 <__b2d+0x4a>
 8013a86:	ea44 030c 	orr.w	r3, r4, ip
 8013a8a:	460a      	mov	r2, r1
 8013a8c:	e7d9      	b.n	8013a42 <__b2d+0x4a>
 8013a8e:	bf00      	nop
 8013a90:	3ff00000 	.word	0x3ff00000

08013a94 <__d2b>:
 8013a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a98:	460e      	mov	r6, r1
 8013a9a:	2101      	movs	r1, #1
 8013a9c:	ec59 8b10 	vmov	r8, r9, d0
 8013aa0:	4615      	mov	r5, r2
 8013aa2:	f7ff fcb5 	bl	8013410 <_Balloc>
 8013aa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013aaa:	4607      	mov	r7, r0
 8013aac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ab0:	bb34      	cbnz	r4, 8013b00 <__d2b+0x6c>
 8013ab2:	9301      	str	r3, [sp, #4]
 8013ab4:	f1b8 0300 	subs.w	r3, r8, #0
 8013ab8:	d027      	beq.n	8013b0a <__d2b+0x76>
 8013aba:	a802      	add	r0, sp, #8
 8013abc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013ac0:	f7ff fd89 	bl	80135d6 <__lo0bits>
 8013ac4:	9900      	ldr	r1, [sp, #0]
 8013ac6:	b1f0      	cbz	r0, 8013b06 <__d2b+0x72>
 8013ac8:	9a01      	ldr	r2, [sp, #4]
 8013aca:	f1c0 0320 	rsb	r3, r0, #32
 8013ace:	fa02 f303 	lsl.w	r3, r2, r3
 8013ad2:	430b      	orrs	r3, r1
 8013ad4:	40c2      	lsrs	r2, r0
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	9201      	str	r2, [sp, #4]
 8013ada:	9b01      	ldr	r3, [sp, #4]
 8013adc:	61bb      	str	r3, [r7, #24]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	bf14      	ite	ne
 8013ae2:	2102      	movne	r1, #2
 8013ae4:	2101      	moveq	r1, #1
 8013ae6:	6139      	str	r1, [r7, #16]
 8013ae8:	b1c4      	cbz	r4, 8013b1c <__d2b+0x88>
 8013aea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013aee:	4404      	add	r4, r0
 8013af0:	6034      	str	r4, [r6, #0]
 8013af2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013af6:	6028      	str	r0, [r5, #0]
 8013af8:	4638      	mov	r0, r7
 8013afa:	b003      	add	sp, #12
 8013afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013b04:	e7d5      	b.n	8013ab2 <__d2b+0x1e>
 8013b06:	6179      	str	r1, [r7, #20]
 8013b08:	e7e7      	b.n	8013ada <__d2b+0x46>
 8013b0a:	a801      	add	r0, sp, #4
 8013b0c:	f7ff fd63 	bl	80135d6 <__lo0bits>
 8013b10:	9b01      	ldr	r3, [sp, #4]
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	2101      	movs	r1, #1
 8013b16:	6139      	str	r1, [r7, #16]
 8013b18:	3020      	adds	r0, #32
 8013b1a:	e7e5      	b.n	8013ae8 <__d2b+0x54>
 8013b1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013b20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013b24:	6030      	str	r0, [r6, #0]
 8013b26:	6918      	ldr	r0, [r3, #16]
 8013b28:	f7ff fd36 	bl	8013598 <__hi0bits>
 8013b2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013b30:	e7e1      	b.n	8013af6 <__d2b+0x62>

08013b32 <__ratio>:
 8013b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b36:	4688      	mov	r8, r1
 8013b38:	4669      	mov	r1, sp
 8013b3a:	4681      	mov	r9, r0
 8013b3c:	f7ff ff5c 	bl	80139f8 <__b2d>
 8013b40:	a901      	add	r1, sp, #4
 8013b42:	4640      	mov	r0, r8
 8013b44:	ec57 6b10 	vmov	r6, r7, d0
 8013b48:	ee10 4a10 	vmov	r4, s0
 8013b4c:	f7ff ff54 	bl	80139f8 <__b2d>
 8013b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b58:	eba3 0c02 	sub.w	ip, r3, r2
 8013b5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b60:	1a9b      	subs	r3, r3, r2
 8013b62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b66:	ec51 0b10 	vmov	r0, r1, d0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	ee10 aa10 	vmov	sl, s0
 8013b70:	bfce      	itee	gt
 8013b72:	463a      	movgt	r2, r7
 8013b74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b78:	460a      	movle	r2, r1
 8013b7a:	463d      	mov	r5, r7
 8013b7c:	468b      	mov	fp, r1
 8013b7e:	bfcc      	ite	gt
 8013b80:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013b84:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b88:	ec45 4b17 	vmov	d7, r4, r5
 8013b8c:	ec4b ab16 	vmov	d6, sl, fp
 8013b90:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013b94:	b003      	add	sp, #12
 8013b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b9a <__copybits>:
 8013b9a:	3901      	subs	r1, #1
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	1149      	asrs	r1, r1, #5
 8013ba0:	6914      	ldr	r4, [r2, #16]
 8013ba2:	3101      	adds	r1, #1
 8013ba4:	f102 0314 	add.w	r3, r2, #20
 8013ba8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013bb0:	42a3      	cmp	r3, r4
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	d303      	bcc.n	8013bbe <__copybits+0x24>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	428a      	cmp	r2, r1
 8013bba:	d305      	bcc.n	8013bc8 <__copybits+0x2e>
 8013bbc:	bd10      	pop	{r4, pc}
 8013bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bc2:	f840 2b04 	str.w	r2, [r0], #4
 8013bc6:	e7f3      	b.n	8013bb0 <__copybits+0x16>
 8013bc8:	f842 3b04 	str.w	r3, [r2], #4
 8013bcc:	e7f4      	b.n	8013bb8 <__copybits+0x1e>

08013bce <__any_on>:
 8013bce:	f100 0214 	add.w	r2, r0, #20
 8013bd2:	6900      	ldr	r0, [r0, #16]
 8013bd4:	114b      	asrs	r3, r1, #5
 8013bd6:	4298      	cmp	r0, r3
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	db11      	blt.n	8013c00 <__any_on+0x32>
 8013bdc:	dd0a      	ble.n	8013bf4 <__any_on+0x26>
 8013bde:	f011 011f 	ands.w	r1, r1, #31
 8013be2:	d007      	beq.n	8013bf4 <__any_on+0x26>
 8013be4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013be8:	fa24 f001 	lsr.w	r0, r4, r1
 8013bec:	fa00 f101 	lsl.w	r1, r0, r1
 8013bf0:	428c      	cmp	r4, r1
 8013bf2:	d10b      	bne.n	8013c0c <__any_on+0x3e>
 8013bf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d803      	bhi.n	8013c04 <__any_on+0x36>
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	bd10      	pop	{r4, pc}
 8013c00:	4603      	mov	r3, r0
 8013c02:	e7f7      	b.n	8013bf4 <__any_on+0x26>
 8013c04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c08:	2900      	cmp	r1, #0
 8013c0a:	d0f5      	beq.n	8013bf8 <__any_on+0x2a>
 8013c0c:	2001      	movs	r0, #1
 8013c0e:	e7f6      	b.n	8013bfe <__any_on+0x30>

08013c10 <_realloc_r>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	4607      	mov	r7, r0
 8013c14:	4614      	mov	r4, r2
 8013c16:	460e      	mov	r6, r1
 8013c18:	b921      	cbnz	r1, 8013c24 <_realloc_r+0x14>
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c20:	f7fc b994 	b.w	800ff4c <_malloc_r>
 8013c24:	b922      	cbnz	r2, 8013c30 <_realloc_r+0x20>
 8013c26:	f7fc f943 	bl	800feb0 <_free_r>
 8013c2a:	4625      	mov	r5, r4
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c30:	f000 ff0d 	bl	8014a4e <_malloc_usable_size_r>
 8013c34:	42a0      	cmp	r0, r4
 8013c36:	d20f      	bcs.n	8013c58 <_realloc_r+0x48>
 8013c38:	4621      	mov	r1, r4
 8013c3a:	4638      	mov	r0, r7
 8013c3c:	f7fc f986 	bl	800ff4c <_malloc_r>
 8013c40:	4605      	mov	r5, r0
 8013c42:	2800      	cmp	r0, #0
 8013c44:	d0f2      	beq.n	8013c2c <_realloc_r+0x1c>
 8013c46:	4631      	mov	r1, r6
 8013c48:	4622      	mov	r2, r4
 8013c4a:	f7fc f90f 	bl	800fe6c <memcpy>
 8013c4e:	4631      	mov	r1, r6
 8013c50:	4638      	mov	r0, r7
 8013c52:	f7fc f92d 	bl	800feb0 <_free_r>
 8013c56:	e7e9      	b.n	8013c2c <_realloc_r+0x1c>
 8013c58:	4635      	mov	r5, r6
 8013c5a:	e7e7      	b.n	8013c2c <_realloc_r+0x1c>

08013c5c <__ssputs_r>:
 8013c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c60:	688e      	ldr	r6, [r1, #8]
 8013c62:	429e      	cmp	r6, r3
 8013c64:	4682      	mov	sl, r0
 8013c66:	460c      	mov	r4, r1
 8013c68:	4690      	mov	r8, r2
 8013c6a:	4699      	mov	r9, r3
 8013c6c:	d837      	bhi.n	8013cde <__ssputs_r+0x82>
 8013c6e:	898a      	ldrh	r2, [r1, #12]
 8013c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c74:	d031      	beq.n	8013cda <__ssputs_r+0x7e>
 8013c76:	6825      	ldr	r5, [r4, #0]
 8013c78:	6909      	ldr	r1, [r1, #16]
 8013c7a:	1a6f      	subs	r7, r5, r1
 8013c7c:	6965      	ldr	r5, [r4, #20]
 8013c7e:	2302      	movs	r3, #2
 8013c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c84:	fb95 f5f3 	sdiv	r5, r5, r3
 8013c88:	f109 0301 	add.w	r3, r9, #1
 8013c8c:	443b      	add	r3, r7
 8013c8e:	429d      	cmp	r5, r3
 8013c90:	bf38      	it	cc
 8013c92:	461d      	movcc	r5, r3
 8013c94:	0553      	lsls	r3, r2, #21
 8013c96:	d530      	bpl.n	8013cfa <__ssputs_r+0x9e>
 8013c98:	4629      	mov	r1, r5
 8013c9a:	f7fc f957 	bl	800ff4c <_malloc_r>
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	b950      	cbnz	r0, 8013cb8 <__ssputs_r+0x5c>
 8013ca2:	230c      	movs	r3, #12
 8013ca4:	f8ca 3000 	str.w	r3, [sl]
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cb8:	463a      	mov	r2, r7
 8013cba:	6921      	ldr	r1, [r4, #16]
 8013cbc:	f7fc f8d6 	bl	800fe6c <memcpy>
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cca:	81a3      	strh	r3, [r4, #12]
 8013ccc:	6126      	str	r6, [r4, #16]
 8013cce:	6165      	str	r5, [r4, #20]
 8013cd0:	443e      	add	r6, r7
 8013cd2:	1bed      	subs	r5, r5, r7
 8013cd4:	6026      	str	r6, [r4, #0]
 8013cd6:	60a5      	str	r5, [r4, #8]
 8013cd8:	464e      	mov	r6, r9
 8013cda:	454e      	cmp	r6, r9
 8013cdc:	d900      	bls.n	8013ce0 <__ssputs_r+0x84>
 8013cde:	464e      	mov	r6, r9
 8013ce0:	4632      	mov	r2, r6
 8013ce2:	4641      	mov	r1, r8
 8013ce4:	6820      	ldr	r0, [r4, #0]
 8013ce6:	f000 fe99 	bl	8014a1c <memmove>
 8013cea:	68a3      	ldr	r3, [r4, #8]
 8013cec:	1b9b      	subs	r3, r3, r6
 8013cee:	60a3      	str	r3, [r4, #8]
 8013cf0:	6823      	ldr	r3, [r4, #0]
 8013cf2:	441e      	add	r6, r3
 8013cf4:	6026      	str	r6, [r4, #0]
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	e7dc      	b.n	8013cb4 <__ssputs_r+0x58>
 8013cfa:	462a      	mov	r2, r5
 8013cfc:	f7ff ff88 	bl	8013c10 <_realloc_r>
 8013d00:	4606      	mov	r6, r0
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d1e2      	bne.n	8013ccc <__ssputs_r+0x70>
 8013d06:	6921      	ldr	r1, [r4, #16]
 8013d08:	4650      	mov	r0, sl
 8013d0a:	f7fc f8d1 	bl	800feb0 <_free_r>
 8013d0e:	e7c8      	b.n	8013ca2 <__ssputs_r+0x46>

08013d10 <_svfiprintf_r>:
 8013d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d14:	461d      	mov	r5, r3
 8013d16:	898b      	ldrh	r3, [r1, #12]
 8013d18:	061f      	lsls	r7, r3, #24
 8013d1a:	b09d      	sub	sp, #116	; 0x74
 8013d1c:	4680      	mov	r8, r0
 8013d1e:	460c      	mov	r4, r1
 8013d20:	4616      	mov	r6, r2
 8013d22:	d50f      	bpl.n	8013d44 <_svfiprintf_r+0x34>
 8013d24:	690b      	ldr	r3, [r1, #16]
 8013d26:	b96b      	cbnz	r3, 8013d44 <_svfiprintf_r+0x34>
 8013d28:	2140      	movs	r1, #64	; 0x40
 8013d2a:	f7fc f90f 	bl	800ff4c <_malloc_r>
 8013d2e:	6020      	str	r0, [r4, #0]
 8013d30:	6120      	str	r0, [r4, #16]
 8013d32:	b928      	cbnz	r0, 8013d40 <_svfiprintf_r+0x30>
 8013d34:	230c      	movs	r3, #12
 8013d36:	f8c8 3000 	str.w	r3, [r8]
 8013d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d3e:	e0c8      	b.n	8013ed2 <_svfiprintf_r+0x1c2>
 8013d40:	2340      	movs	r3, #64	; 0x40
 8013d42:	6163      	str	r3, [r4, #20]
 8013d44:	2300      	movs	r3, #0
 8013d46:	9309      	str	r3, [sp, #36]	; 0x24
 8013d48:	2320      	movs	r3, #32
 8013d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d4e:	2330      	movs	r3, #48	; 0x30
 8013d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d54:	9503      	str	r5, [sp, #12]
 8013d56:	f04f 0b01 	mov.w	fp, #1
 8013d5a:	4637      	mov	r7, r6
 8013d5c:	463d      	mov	r5, r7
 8013d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013d62:	b10b      	cbz	r3, 8013d68 <_svfiprintf_r+0x58>
 8013d64:	2b25      	cmp	r3, #37	; 0x25
 8013d66:	d13e      	bne.n	8013de6 <_svfiprintf_r+0xd6>
 8013d68:	ebb7 0a06 	subs.w	sl, r7, r6
 8013d6c:	d00b      	beq.n	8013d86 <_svfiprintf_r+0x76>
 8013d6e:	4653      	mov	r3, sl
 8013d70:	4632      	mov	r2, r6
 8013d72:	4621      	mov	r1, r4
 8013d74:	4640      	mov	r0, r8
 8013d76:	f7ff ff71 	bl	8013c5c <__ssputs_r>
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	f000 80a4 	beq.w	8013ec8 <_svfiprintf_r+0x1b8>
 8013d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d82:	4453      	add	r3, sl
 8013d84:	9309      	str	r3, [sp, #36]	; 0x24
 8013d86:	783b      	ldrb	r3, [r7, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f000 809d 	beq.w	8013ec8 <_svfiprintf_r+0x1b8>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f04f 32ff 	mov.w	r2, #4294967295
 8013d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d98:	9304      	str	r3, [sp, #16]
 8013d9a:	9307      	str	r3, [sp, #28]
 8013d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013da0:	931a      	str	r3, [sp, #104]	; 0x68
 8013da2:	462f      	mov	r7, r5
 8013da4:	2205      	movs	r2, #5
 8013da6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013daa:	4850      	ldr	r0, [pc, #320]	; (8013eec <_svfiprintf_r+0x1dc>)
 8013dac:	f7ec fa50 	bl	8000250 <memchr>
 8013db0:	9b04      	ldr	r3, [sp, #16]
 8013db2:	b9d0      	cbnz	r0, 8013dea <_svfiprintf_r+0xda>
 8013db4:	06d9      	lsls	r1, r3, #27
 8013db6:	bf44      	itt	mi
 8013db8:	2220      	movmi	r2, #32
 8013dba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013dbe:	071a      	lsls	r2, r3, #28
 8013dc0:	bf44      	itt	mi
 8013dc2:	222b      	movmi	r2, #43	; 0x2b
 8013dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013dc8:	782a      	ldrb	r2, [r5, #0]
 8013dca:	2a2a      	cmp	r2, #42	; 0x2a
 8013dcc:	d015      	beq.n	8013dfa <_svfiprintf_r+0xea>
 8013dce:	9a07      	ldr	r2, [sp, #28]
 8013dd0:	462f      	mov	r7, r5
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	250a      	movs	r5, #10
 8013dd6:	4639      	mov	r1, r7
 8013dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ddc:	3b30      	subs	r3, #48	; 0x30
 8013dde:	2b09      	cmp	r3, #9
 8013de0:	d94d      	bls.n	8013e7e <_svfiprintf_r+0x16e>
 8013de2:	b1b8      	cbz	r0, 8013e14 <_svfiprintf_r+0x104>
 8013de4:	e00f      	b.n	8013e06 <_svfiprintf_r+0xf6>
 8013de6:	462f      	mov	r7, r5
 8013de8:	e7b8      	b.n	8013d5c <_svfiprintf_r+0x4c>
 8013dea:	4a40      	ldr	r2, [pc, #256]	; (8013eec <_svfiprintf_r+0x1dc>)
 8013dec:	1a80      	subs	r0, r0, r2
 8013dee:	fa0b f000 	lsl.w	r0, fp, r0
 8013df2:	4318      	orrs	r0, r3
 8013df4:	9004      	str	r0, [sp, #16]
 8013df6:	463d      	mov	r5, r7
 8013df8:	e7d3      	b.n	8013da2 <_svfiprintf_r+0x92>
 8013dfa:	9a03      	ldr	r2, [sp, #12]
 8013dfc:	1d11      	adds	r1, r2, #4
 8013dfe:	6812      	ldr	r2, [r2, #0]
 8013e00:	9103      	str	r1, [sp, #12]
 8013e02:	2a00      	cmp	r2, #0
 8013e04:	db01      	blt.n	8013e0a <_svfiprintf_r+0xfa>
 8013e06:	9207      	str	r2, [sp, #28]
 8013e08:	e004      	b.n	8013e14 <_svfiprintf_r+0x104>
 8013e0a:	4252      	negs	r2, r2
 8013e0c:	f043 0302 	orr.w	r3, r3, #2
 8013e10:	9207      	str	r2, [sp, #28]
 8013e12:	9304      	str	r3, [sp, #16]
 8013e14:	783b      	ldrb	r3, [r7, #0]
 8013e16:	2b2e      	cmp	r3, #46	; 0x2e
 8013e18:	d10c      	bne.n	8013e34 <_svfiprintf_r+0x124>
 8013e1a:	787b      	ldrb	r3, [r7, #1]
 8013e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8013e1e:	d133      	bne.n	8013e88 <_svfiprintf_r+0x178>
 8013e20:	9b03      	ldr	r3, [sp, #12]
 8013e22:	1d1a      	adds	r2, r3, #4
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	9203      	str	r2, [sp, #12]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	bfb8      	it	lt
 8013e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e30:	3702      	adds	r7, #2
 8013e32:	9305      	str	r3, [sp, #20]
 8013e34:	4d2e      	ldr	r5, [pc, #184]	; (8013ef0 <_svfiprintf_r+0x1e0>)
 8013e36:	7839      	ldrb	r1, [r7, #0]
 8013e38:	2203      	movs	r2, #3
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f7ec fa08 	bl	8000250 <memchr>
 8013e40:	b138      	cbz	r0, 8013e52 <_svfiprintf_r+0x142>
 8013e42:	2340      	movs	r3, #64	; 0x40
 8013e44:	1b40      	subs	r0, r0, r5
 8013e46:	fa03 f000 	lsl.w	r0, r3, r0
 8013e4a:	9b04      	ldr	r3, [sp, #16]
 8013e4c:	4303      	orrs	r3, r0
 8013e4e:	3701      	adds	r7, #1
 8013e50:	9304      	str	r3, [sp, #16]
 8013e52:	7839      	ldrb	r1, [r7, #0]
 8013e54:	4827      	ldr	r0, [pc, #156]	; (8013ef4 <_svfiprintf_r+0x1e4>)
 8013e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e5a:	2206      	movs	r2, #6
 8013e5c:	1c7e      	adds	r6, r7, #1
 8013e5e:	f7ec f9f7 	bl	8000250 <memchr>
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d038      	beq.n	8013ed8 <_svfiprintf_r+0x1c8>
 8013e66:	4b24      	ldr	r3, [pc, #144]	; (8013ef8 <_svfiprintf_r+0x1e8>)
 8013e68:	bb13      	cbnz	r3, 8013eb0 <_svfiprintf_r+0x1a0>
 8013e6a:	9b03      	ldr	r3, [sp, #12]
 8013e6c:	3307      	adds	r3, #7
 8013e6e:	f023 0307 	bic.w	r3, r3, #7
 8013e72:	3308      	adds	r3, #8
 8013e74:	9303      	str	r3, [sp, #12]
 8013e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e78:	444b      	add	r3, r9
 8013e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e7c:	e76d      	b.n	8013d5a <_svfiprintf_r+0x4a>
 8013e7e:	fb05 3202 	mla	r2, r5, r2, r3
 8013e82:	2001      	movs	r0, #1
 8013e84:	460f      	mov	r7, r1
 8013e86:	e7a6      	b.n	8013dd6 <_svfiprintf_r+0xc6>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	3701      	adds	r7, #1
 8013e8c:	9305      	str	r3, [sp, #20]
 8013e8e:	4619      	mov	r1, r3
 8013e90:	250a      	movs	r5, #10
 8013e92:	4638      	mov	r0, r7
 8013e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e98:	3a30      	subs	r2, #48	; 0x30
 8013e9a:	2a09      	cmp	r2, #9
 8013e9c:	d903      	bls.n	8013ea6 <_svfiprintf_r+0x196>
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d0c8      	beq.n	8013e34 <_svfiprintf_r+0x124>
 8013ea2:	9105      	str	r1, [sp, #20]
 8013ea4:	e7c6      	b.n	8013e34 <_svfiprintf_r+0x124>
 8013ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8013eaa:	2301      	movs	r3, #1
 8013eac:	4607      	mov	r7, r0
 8013eae:	e7f0      	b.n	8013e92 <_svfiprintf_r+0x182>
 8013eb0:	ab03      	add	r3, sp, #12
 8013eb2:	9300      	str	r3, [sp, #0]
 8013eb4:	4622      	mov	r2, r4
 8013eb6:	4b11      	ldr	r3, [pc, #68]	; (8013efc <_svfiprintf_r+0x1ec>)
 8013eb8:	a904      	add	r1, sp, #16
 8013eba:	4640      	mov	r0, r8
 8013ebc:	f7fc f928 	bl	8010110 <_printf_float>
 8013ec0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013ec4:	4681      	mov	r9, r0
 8013ec6:	d1d6      	bne.n	8013e76 <_svfiprintf_r+0x166>
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	065b      	lsls	r3, r3, #25
 8013ecc:	f53f af35 	bmi.w	8013d3a <_svfiprintf_r+0x2a>
 8013ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ed2:	b01d      	add	sp, #116	; 0x74
 8013ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed8:	ab03      	add	r3, sp, #12
 8013eda:	9300      	str	r3, [sp, #0]
 8013edc:	4622      	mov	r2, r4
 8013ede:	4b07      	ldr	r3, [pc, #28]	; (8013efc <_svfiprintf_r+0x1ec>)
 8013ee0:	a904      	add	r1, sp, #16
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	f7fc fbb6 	bl	8010654 <_printf_i>
 8013ee8:	e7ea      	b.n	8013ec0 <_svfiprintf_r+0x1b0>
 8013eea:	bf00      	nop
 8013eec:	0801537c 	.word	0x0801537c
 8013ef0:	08015382 	.word	0x08015382
 8013ef4:	08015386 	.word	0x08015386
 8013ef8:	08010111 	.word	0x08010111
 8013efc:	08013c5d 	.word	0x08013c5d

08013f00 <_sungetc_r>:
 8013f00:	b538      	push	{r3, r4, r5, lr}
 8013f02:	1c4b      	adds	r3, r1, #1
 8013f04:	4614      	mov	r4, r2
 8013f06:	d103      	bne.n	8013f10 <_sungetc_r+0x10>
 8013f08:	f04f 35ff 	mov.w	r5, #4294967295
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	bd38      	pop	{r3, r4, r5, pc}
 8013f10:	8993      	ldrh	r3, [r2, #12]
 8013f12:	f023 0320 	bic.w	r3, r3, #32
 8013f16:	8193      	strh	r3, [r2, #12]
 8013f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f1a:	6852      	ldr	r2, [r2, #4]
 8013f1c:	b2cd      	uxtb	r5, r1
 8013f1e:	b18b      	cbz	r3, 8013f44 <_sungetc_r+0x44>
 8013f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013f22:	4293      	cmp	r3, r2
 8013f24:	dd08      	ble.n	8013f38 <_sungetc_r+0x38>
 8013f26:	6823      	ldr	r3, [r4, #0]
 8013f28:	1e5a      	subs	r2, r3, #1
 8013f2a:	6022      	str	r2, [r4, #0]
 8013f2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f30:	6863      	ldr	r3, [r4, #4]
 8013f32:	3301      	adds	r3, #1
 8013f34:	6063      	str	r3, [r4, #4]
 8013f36:	e7e9      	b.n	8013f0c <_sungetc_r+0xc>
 8013f38:	4621      	mov	r1, r4
 8013f3a:	f000 fd05 	bl	8014948 <__submore>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d0f1      	beq.n	8013f26 <_sungetc_r+0x26>
 8013f42:	e7e1      	b.n	8013f08 <_sungetc_r+0x8>
 8013f44:	6921      	ldr	r1, [r4, #16]
 8013f46:	6823      	ldr	r3, [r4, #0]
 8013f48:	b151      	cbz	r1, 8013f60 <_sungetc_r+0x60>
 8013f4a:	4299      	cmp	r1, r3
 8013f4c:	d208      	bcs.n	8013f60 <_sungetc_r+0x60>
 8013f4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013f52:	42a9      	cmp	r1, r5
 8013f54:	d104      	bne.n	8013f60 <_sungetc_r+0x60>
 8013f56:	3b01      	subs	r3, #1
 8013f58:	3201      	adds	r2, #1
 8013f5a:	6023      	str	r3, [r4, #0]
 8013f5c:	6062      	str	r2, [r4, #4]
 8013f5e:	e7d5      	b.n	8013f0c <_sungetc_r+0xc>
 8013f60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f68:	6363      	str	r3, [r4, #52]	; 0x34
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f6e:	4623      	mov	r3, r4
 8013f70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	2301      	movs	r3, #1
 8013f78:	e7dc      	b.n	8013f34 <_sungetc_r+0x34>

08013f7a <__ssrefill_r>:
 8013f7a:	b510      	push	{r4, lr}
 8013f7c:	460c      	mov	r4, r1
 8013f7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f80:	b169      	cbz	r1, 8013f9e <__ssrefill_r+0x24>
 8013f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f86:	4299      	cmp	r1, r3
 8013f88:	d001      	beq.n	8013f8e <__ssrefill_r+0x14>
 8013f8a:	f7fb ff91 	bl	800feb0 <_free_r>
 8013f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f90:	6063      	str	r3, [r4, #4]
 8013f92:	2000      	movs	r0, #0
 8013f94:	6360      	str	r0, [r4, #52]	; 0x34
 8013f96:	b113      	cbz	r3, 8013f9e <__ssrefill_r+0x24>
 8013f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013f9a:	6023      	str	r3, [r4, #0]
 8013f9c:	bd10      	pop	{r4, pc}
 8013f9e:	6923      	ldr	r3, [r4, #16]
 8013fa0:	6023      	str	r3, [r4, #0]
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	6063      	str	r3, [r4, #4]
 8013fa6:	89a3      	ldrh	r3, [r4, #12]
 8013fa8:	f043 0320 	orr.w	r3, r3, #32
 8013fac:	81a3      	strh	r3, [r4, #12]
 8013fae:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb2:	e7f3      	b.n	8013f9c <__ssrefill_r+0x22>

08013fb4 <__ssvfiscanf_r>:
 8013fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	9144      	str	r1, [sp, #272]	; 0x110
 8013fc2:	9145      	str	r1, [sp, #276]	; 0x114
 8013fc4:	499f      	ldr	r1, [pc, #636]	; (8014244 <__ssvfiscanf_r+0x290>)
 8013fc6:	91a0      	str	r1, [sp, #640]	; 0x280
 8013fc8:	f10d 0804 	add.w	r8, sp, #4
 8013fcc:	499e      	ldr	r1, [pc, #632]	; (8014248 <__ssvfiscanf_r+0x294>)
 8013fce:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801424c <__ssvfiscanf_r+0x298>
 8013fd2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013fd6:	4606      	mov	r6, r0
 8013fd8:	4692      	mov	sl, r2
 8013fda:	91a1      	str	r1, [sp, #644]	; 0x284
 8013fdc:	9300      	str	r3, [sp, #0]
 8013fde:	270a      	movs	r7, #10
 8013fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f000 812a 	beq.w	801423e <__ssvfiscanf_r+0x28a>
 8013fea:	4655      	mov	r5, sl
 8013fec:	f7ff f968 	bl	80132c0 <__locale_ctype_ptr>
 8013ff0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8013ff4:	4458      	add	r0, fp
 8013ff6:	7843      	ldrb	r3, [r0, #1]
 8013ff8:	f013 0308 	ands.w	r3, r3, #8
 8013ffc:	d01c      	beq.n	8014038 <__ssvfiscanf_r+0x84>
 8013ffe:	6863      	ldr	r3, [r4, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	dd12      	ble.n	801402a <__ssvfiscanf_r+0x76>
 8014004:	f7ff f95c 	bl	80132c0 <__locale_ctype_ptr>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	781a      	ldrb	r2, [r3, #0]
 801400c:	4410      	add	r0, r2
 801400e:	7842      	ldrb	r2, [r0, #1]
 8014010:	0712      	lsls	r2, r2, #28
 8014012:	d401      	bmi.n	8014018 <__ssvfiscanf_r+0x64>
 8014014:	46aa      	mov	sl, r5
 8014016:	e7e3      	b.n	8013fe0 <__ssvfiscanf_r+0x2c>
 8014018:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801401a:	3201      	adds	r2, #1
 801401c:	9245      	str	r2, [sp, #276]	; 0x114
 801401e:	6862      	ldr	r2, [r4, #4]
 8014020:	3301      	adds	r3, #1
 8014022:	3a01      	subs	r2, #1
 8014024:	6062      	str	r2, [r4, #4]
 8014026:	6023      	str	r3, [r4, #0]
 8014028:	e7e9      	b.n	8013ffe <__ssvfiscanf_r+0x4a>
 801402a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801402c:	4621      	mov	r1, r4
 801402e:	4630      	mov	r0, r6
 8014030:	4798      	blx	r3
 8014032:	2800      	cmp	r0, #0
 8014034:	d0e6      	beq.n	8014004 <__ssvfiscanf_r+0x50>
 8014036:	e7ed      	b.n	8014014 <__ssvfiscanf_r+0x60>
 8014038:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801403c:	f040 8082 	bne.w	8014144 <__ssvfiscanf_r+0x190>
 8014040:	9343      	str	r3, [sp, #268]	; 0x10c
 8014042:	9341      	str	r3, [sp, #260]	; 0x104
 8014044:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014048:	2b2a      	cmp	r3, #42	; 0x2a
 801404a:	d103      	bne.n	8014054 <__ssvfiscanf_r+0xa0>
 801404c:	2310      	movs	r3, #16
 801404e:	9341      	str	r3, [sp, #260]	; 0x104
 8014050:	f10a 0502 	add.w	r5, sl, #2
 8014054:	46aa      	mov	sl, r5
 8014056:	f815 1b01 	ldrb.w	r1, [r5], #1
 801405a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801405e:	2a09      	cmp	r2, #9
 8014060:	d922      	bls.n	80140a8 <__ssvfiscanf_r+0xf4>
 8014062:	2203      	movs	r2, #3
 8014064:	4879      	ldr	r0, [pc, #484]	; (801424c <__ssvfiscanf_r+0x298>)
 8014066:	f7ec f8f3 	bl	8000250 <memchr>
 801406a:	b138      	cbz	r0, 801407c <__ssvfiscanf_r+0xc8>
 801406c:	eba0 0309 	sub.w	r3, r0, r9
 8014070:	2001      	movs	r0, #1
 8014072:	4098      	lsls	r0, r3
 8014074:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014076:	4318      	orrs	r0, r3
 8014078:	9041      	str	r0, [sp, #260]	; 0x104
 801407a:	46aa      	mov	sl, r5
 801407c:	f89a 3000 	ldrb.w	r3, [sl]
 8014080:	2b67      	cmp	r3, #103	; 0x67
 8014082:	f10a 0501 	add.w	r5, sl, #1
 8014086:	d82b      	bhi.n	80140e0 <__ssvfiscanf_r+0x12c>
 8014088:	2b65      	cmp	r3, #101	; 0x65
 801408a:	f080 809f 	bcs.w	80141cc <__ssvfiscanf_r+0x218>
 801408e:	2b47      	cmp	r3, #71	; 0x47
 8014090:	d810      	bhi.n	80140b4 <__ssvfiscanf_r+0x100>
 8014092:	2b45      	cmp	r3, #69	; 0x45
 8014094:	f080 809a 	bcs.w	80141cc <__ssvfiscanf_r+0x218>
 8014098:	2b00      	cmp	r3, #0
 801409a:	d06c      	beq.n	8014176 <__ssvfiscanf_r+0x1c2>
 801409c:	2b25      	cmp	r3, #37	; 0x25
 801409e:	d051      	beq.n	8014144 <__ssvfiscanf_r+0x190>
 80140a0:	2303      	movs	r3, #3
 80140a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80140a4:	9742      	str	r7, [sp, #264]	; 0x108
 80140a6:	e027      	b.n	80140f8 <__ssvfiscanf_r+0x144>
 80140a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80140aa:	fb07 1303 	mla	r3, r7, r3, r1
 80140ae:	3b30      	subs	r3, #48	; 0x30
 80140b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80140b2:	e7cf      	b.n	8014054 <__ssvfiscanf_r+0xa0>
 80140b4:	2b5b      	cmp	r3, #91	; 0x5b
 80140b6:	d06a      	beq.n	801418e <__ssvfiscanf_r+0x1da>
 80140b8:	d80c      	bhi.n	80140d4 <__ssvfiscanf_r+0x120>
 80140ba:	2b58      	cmp	r3, #88	; 0x58
 80140bc:	d1f0      	bne.n	80140a0 <__ssvfiscanf_r+0xec>
 80140be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80140c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80140c4:	9241      	str	r2, [sp, #260]	; 0x104
 80140c6:	2210      	movs	r2, #16
 80140c8:	9242      	str	r2, [sp, #264]	; 0x108
 80140ca:	2b6e      	cmp	r3, #110	; 0x6e
 80140cc:	bf8c      	ite	hi
 80140ce:	2304      	movhi	r3, #4
 80140d0:	2303      	movls	r3, #3
 80140d2:	e010      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 80140d4:	2b63      	cmp	r3, #99	; 0x63
 80140d6:	d065      	beq.n	80141a4 <__ssvfiscanf_r+0x1f0>
 80140d8:	2b64      	cmp	r3, #100	; 0x64
 80140da:	d1e1      	bne.n	80140a0 <__ssvfiscanf_r+0xec>
 80140dc:	9742      	str	r7, [sp, #264]	; 0x108
 80140de:	e7f4      	b.n	80140ca <__ssvfiscanf_r+0x116>
 80140e0:	2b70      	cmp	r3, #112	; 0x70
 80140e2:	d04b      	beq.n	801417c <__ssvfiscanf_r+0x1c8>
 80140e4:	d826      	bhi.n	8014134 <__ssvfiscanf_r+0x180>
 80140e6:	2b6e      	cmp	r3, #110	; 0x6e
 80140e8:	d062      	beq.n	80141b0 <__ssvfiscanf_r+0x1fc>
 80140ea:	d84c      	bhi.n	8014186 <__ssvfiscanf_r+0x1d2>
 80140ec:	2b69      	cmp	r3, #105	; 0x69
 80140ee:	d1d7      	bne.n	80140a0 <__ssvfiscanf_r+0xec>
 80140f0:	2300      	movs	r3, #0
 80140f2:	9342      	str	r3, [sp, #264]	; 0x108
 80140f4:	2303      	movs	r3, #3
 80140f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80140f8:	6863      	ldr	r3, [r4, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	dd68      	ble.n	80141d0 <__ssvfiscanf_r+0x21c>
 80140fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014100:	0659      	lsls	r1, r3, #25
 8014102:	d407      	bmi.n	8014114 <__ssvfiscanf_r+0x160>
 8014104:	f7ff f8dc 	bl	80132c0 <__locale_ctype_ptr>
 8014108:	6823      	ldr	r3, [r4, #0]
 801410a:	781a      	ldrb	r2, [r3, #0]
 801410c:	4410      	add	r0, r2
 801410e:	7842      	ldrb	r2, [r0, #1]
 8014110:	0712      	lsls	r2, r2, #28
 8014112:	d464      	bmi.n	80141de <__ssvfiscanf_r+0x22a>
 8014114:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014116:	2b02      	cmp	r3, #2
 8014118:	dc73      	bgt.n	8014202 <__ssvfiscanf_r+0x24e>
 801411a:	466b      	mov	r3, sp
 801411c:	4622      	mov	r2, r4
 801411e:	a941      	add	r1, sp, #260	; 0x104
 8014120:	4630      	mov	r0, r6
 8014122:	f000 f9d7 	bl	80144d4 <_scanf_chars>
 8014126:	2801      	cmp	r0, #1
 8014128:	f000 8089 	beq.w	801423e <__ssvfiscanf_r+0x28a>
 801412c:	2802      	cmp	r0, #2
 801412e:	f47f af71 	bne.w	8014014 <__ssvfiscanf_r+0x60>
 8014132:	e01d      	b.n	8014170 <__ssvfiscanf_r+0x1bc>
 8014134:	2b75      	cmp	r3, #117	; 0x75
 8014136:	d0d1      	beq.n	80140dc <__ssvfiscanf_r+0x128>
 8014138:	2b78      	cmp	r3, #120	; 0x78
 801413a:	d0c0      	beq.n	80140be <__ssvfiscanf_r+0x10a>
 801413c:	2b73      	cmp	r3, #115	; 0x73
 801413e:	d1af      	bne.n	80140a0 <__ssvfiscanf_r+0xec>
 8014140:	2302      	movs	r3, #2
 8014142:	e7d8      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 8014144:	6863      	ldr	r3, [r4, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	dd0c      	ble.n	8014164 <__ssvfiscanf_r+0x1b0>
 801414a:	6823      	ldr	r3, [r4, #0]
 801414c:	781a      	ldrb	r2, [r3, #0]
 801414e:	455a      	cmp	r2, fp
 8014150:	d175      	bne.n	801423e <__ssvfiscanf_r+0x28a>
 8014152:	3301      	adds	r3, #1
 8014154:	6862      	ldr	r2, [r4, #4]
 8014156:	6023      	str	r3, [r4, #0]
 8014158:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801415a:	3a01      	subs	r2, #1
 801415c:	3301      	adds	r3, #1
 801415e:	6062      	str	r2, [r4, #4]
 8014160:	9345      	str	r3, [sp, #276]	; 0x114
 8014162:	e757      	b.n	8014014 <__ssvfiscanf_r+0x60>
 8014164:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014166:	4621      	mov	r1, r4
 8014168:	4630      	mov	r0, r6
 801416a:	4798      	blx	r3
 801416c:	2800      	cmp	r0, #0
 801416e:	d0ec      	beq.n	801414a <__ssvfiscanf_r+0x196>
 8014170:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014172:	2800      	cmp	r0, #0
 8014174:	d159      	bne.n	801422a <__ssvfiscanf_r+0x276>
 8014176:	f04f 30ff 	mov.w	r0, #4294967295
 801417a:	e05c      	b.n	8014236 <__ssvfiscanf_r+0x282>
 801417c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801417e:	f042 0220 	orr.w	r2, r2, #32
 8014182:	9241      	str	r2, [sp, #260]	; 0x104
 8014184:	e79b      	b.n	80140be <__ssvfiscanf_r+0x10a>
 8014186:	2308      	movs	r3, #8
 8014188:	9342      	str	r3, [sp, #264]	; 0x108
 801418a:	2304      	movs	r3, #4
 801418c:	e7b3      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 801418e:	4629      	mov	r1, r5
 8014190:	4640      	mov	r0, r8
 8014192:	f000 fb09 	bl	80147a8 <__sccl>
 8014196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801419c:	9341      	str	r3, [sp, #260]	; 0x104
 801419e:	4605      	mov	r5, r0
 80141a0:	2301      	movs	r3, #1
 80141a2:	e7a8      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 80141a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141aa:	9341      	str	r3, [sp, #260]	; 0x104
 80141ac:	2300      	movs	r3, #0
 80141ae:	e7a2      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 80141b0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80141b2:	06c3      	lsls	r3, r0, #27
 80141b4:	f53f af2e 	bmi.w	8014014 <__ssvfiscanf_r+0x60>
 80141b8:	9b00      	ldr	r3, [sp, #0]
 80141ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80141bc:	1d19      	adds	r1, r3, #4
 80141be:	9100      	str	r1, [sp, #0]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	07c0      	lsls	r0, r0, #31
 80141c4:	bf4c      	ite	mi
 80141c6:	801a      	strhmi	r2, [r3, #0]
 80141c8:	601a      	strpl	r2, [r3, #0]
 80141ca:	e723      	b.n	8014014 <__ssvfiscanf_r+0x60>
 80141cc:	2305      	movs	r3, #5
 80141ce:	e792      	b.n	80140f6 <__ssvfiscanf_r+0x142>
 80141d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141d2:	4621      	mov	r1, r4
 80141d4:	4630      	mov	r0, r6
 80141d6:	4798      	blx	r3
 80141d8:	2800      	cmp	r0, #0
 80141da:	d090      	beq.n	80140fe <__ssvfiscanf_r+0x14a>
 80141dc:	e7c8      	b.n	8014170 <__ssvfiscanf_r+0x1bc>
 80141de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80141e0:	3201      	adds	r2, #1
 80141e2:	9245      	str	r2, [sp, #276]	; 0x114
 80141e4:	6862      	ldr	r2, [r4, #4]
 80141e6:	3a01      	subs	r2, #1
 80141e8:	2a00      	cmp	r2, #0
 80141ea:	6062      	str	r2, [r4, #4]
 80141ec:	dd02      	ble.n	80141f4 <__ssvfiscanf_r+0x240>
 80141ee:	3301      	adds	r3, #1
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	e787      	b.n	8014104 <__ssvfiscanf_r+0x150>
 80141f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141f6:	4621      	mov	r1, r4
 80141f8:	4630      	mov	r0, r6
 80141fa:	4798      	blx	r3
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d081      	beq.n	8014104 <__ssvfiscanf_r+0x150>
 8014200:	e7b6      	b.n	8014170 <__ssvfiscanf_r+0x1bc>
 8014202:	2b04      	cmp	r3, #4
 8014204:	dc06      	bgt.n	8014214 <__ssvfiscanf_r+0x260>
 8014206:	466b      	mov	r3, sp
 8014208:	4622      	mov	r2, r4
 801420a:	a941      	add	r1, sp, #260	; 0x104
 801420c:	4630      	mov	r0, r6
 801420e:	f000 f9c5 	bl	801459c <_scanf_i>
 8014212:	e788      	b.n	8014126 <__ssvfiscanf_r+0x172>
 8014214:	4b0e      	ldr	r3, [pc, #56]	; (8014250 <__ssvfiscanf_r+0x29c>)
 8014216:	2b00      	cmp	r3, #0
 8014218:	f43f aefc 	beq.w	8014014 <__ssvfiscanf_r+0x60>
 801421c:	466b      	mov	r3, sp
 801421e:	4622      	mov	r2, r4
 8014220:	a941      	add	r1, sp, #260	; 0x104
 8014222:	4630      	mov	r0, r6
 8014224:	f7fc fb28 	bl	8010878 <_scanf_float>
 8014228:	e77d      	b.n	8014126 <__ssvfiscanf_r+0x172>
 801422a:	89a3      	ldrh	r3, [r4, #12]
 801422c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014230:	bf18      	it	ne
 8014232:	f04f 30ff 	movne.w	r0, #4294967295
 8014236:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014240:	e7f9      	b.n	8014236 <__ssvfiscanf_r+0x282>
 8014242:	bf00      	nop
 8014244:	08013f01 	.word	0x08013f01
 8014248:	08013f7b 	.word	0x08013f7b
 801424c:	08015382 	.word	0x08015382
 8014250:	08010879 	.word	0x08010879

08014254 <__sfputc_r>:
 8014254:	6893      	ldr	r3, [r2, #8]
 8014256:	3b01      	subs	r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	b410      	push	{r4}
 801425c:	6093      	str	r3, [r2, #8]
 801425e:	da08      	bge.n	8014272 <__sfputc_r+0x1e>
 8014260:	6994      	ldr	r4, [r2, #24]
 8014262:	42a3      	cmp	r3, r4
 8014264:	db01      	blt.n	801426a <__sfputc_r+0x16>
 8014266:	290a      	cmp	r1, #10
 8014268:	d103      	bne.n	8014272 <__sfputc_r+0x1e>
 801426a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801426e:	f7fd bcc9 	b.w	8011c04 <__swbuf_r>
 8014272:	6813      	ldr	r3, [r2, #0]
 8014274:	1c58      	adds	r0, r3, #1
 8014276:	6010      	str	r0, [r2, #0]
 8014278:	7019      	strb	r1, [r3, #0]
 801427a:	4608      	mov	r0, r1
 801427c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014280:	4770      	bx	lr

08014282 <__sfputs_r>:
 8014282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014284:	4606      	mov	r6, r0
 8014286:	460f      	mov	r7, r1
 8014288:	4614      	mov	r4, r2
 801428a:	18d5      	adds	r5, r2, r3
 801428c:	42ac      	cmp	r4, r5
 801428e:	d101      	bne.n	8014294 <__sfputs_r+0x12>
 8014290:	2000      	movs	r0, #0
 8014292:	e007      	b.n	80142a4 <__sfputs_r+0x22>
 8014294:	463a      	mov	r2, r7
 8014296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801429a:	4630      	mov	r0, r6
 801429c:	f7ff ffda 	bl	8014254 <__sfputc_r>
 80142a0:	1c43      	adds	r3, r0, #1
 80142a2:	d1f3      	bne.n	801428c <__sfputs_r+0xa>
 80142a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142a8 <_vfiprintf_r>:
 80142a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ac:	460c      	mov	r4, r1
 80142ae:	b09d      	sub	sp, #116	; 0x74
 80142b0:	4617      	mov	r7, r2
 80142b2:	461d      	mov	r5, r3
 80142b4:	4606      	mov	r6, r0
 80142b6:	b118      	cbz	r0, 80142c0 <_vfiprintf_r+0x18>
 80142b8:	6983      	ldr	r3, [r0, #24]
 80142ba:	b90b      	cbnz	r3, 80142c0 <_vfiprintf_r+0x18>
 80142bc:	f7fe fc4c 	bl	8012b58 <__sinit>
 80142c0:	4b7c      	ldr	r3, [pc, #496]	; (80144b4 <_vfiprintf_r+0x20c>)
 80142c2:	429c      	cmp	r4, r3
 80142c4:	d158      	bne.n	8014378 <_vfiprintf_r+0xd0>
 80142c6:	6874      	ldr	r4, [r6, #4]
 80142c8:	89a3      	ldrh	r3, [r4, #12]
 80142ca:	0718      	lsls	r0, r3, #28
 80142cc:	d55e      	bpl.n	801438c <_vfiprintf_r+0xe4>
 80142ce:	6923      	ldr	r3, [r4, #16]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d05b      	beq.n	801438c <_vfiprintf_r+0xe4>
 80142d4:	2300      	movs	r3, #0
 80142d6:	9309      	str	r3, [sp, #36]	; 0x24
 80142d8:	2320      	movs	r3, #32
 80142da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142de:	2330      	movs	r3, #48	; 0x30
 80142e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142e4:	9503      	str	r5, [sp, #12]
 80142e6:	f04f 0b01 	mov.w	fp, #1
 80142ea:	46b8      	mov	r8, r7
 80142ec:	4645      	mov	r5, r8
 80142ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80142f2:	b10b      	cbz	r3, 80142f8 <_vfiprintf_r+0x50>
 80142f4:	2b25      	cmp	r3, #37	; 0x25
 80142f6:	d154      	bne.n	80143a2 <_vfiprintf_r+0xfa>
 80142f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80142fc:	d00b      	beq.n	8014316 <_vfiprintf_r+0x6e>
 80142fe:	4653      	mov	r3, sl
 8014300:	463a      	mov	r2, r7
 8014302:	4621      	mov	r1, r4
 8014304:	4630      	mov	r0, r6
 8014306:	f7ff ffbc 	bl	8014282 <__sfputs_r>
 801430a:	3001      	adds	r0, #1
 801430c:	f000 80c2 	beq.w	8014494 <_vfiprintf_r+0x1ec>
 8014310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014312:	4453      	add	r3, sl
 8014314:	9309      	str	r3, [sp, #36]	; 0x24
 8014316:	f898 3000 	ldrb.w	r3, [r8]
 801431a:	2b00      	cmp	r3, #0
 801431c:	f000 80ba 	beq.w	8014494 <_vfiprintf_r+0x1ec>
 8014320:	2300      	movs	r3, #0
 8014322:	f04f 32ff 	mov.w	r2, #4294967295
 8014326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801432a:	9304      	str	r3, [sp, #16]
 801432c:	9307      	str	r3, [sp, #28]
 801432e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014332:	931a      	str	r3, [sp, #104]	; 0x68
 8014334:	46a8      	mov	r8, r5
 8014336:	2205      	movs	r2, #5
 8014338:	f818 1b01 	ldrb.w	r1, [r8], #1
 801433c:	485e      	ldr	r0, [pc, #376]	; (80144b8 <_vfiprintf_r+0x210>)
 801433e:	f7eb ff87 	bl	8000250 <memchr>
 8014342:	9b04      	ldr	r3, [sp, #16]
 8014344:	bb78      	cbnz	r0, 80143a6 <_vfiprintf_r+0xfe>
 8014346:	06d9      	lsls	r1, r3, #27
 8014348:	bf44      	itt	mi
 801434a:	2220      	movmi	r2, #32
 801434c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014350:	071a      	lsls	r2, r3, #28
 8014352:	bf44      	itt	mi
 8014354:	222b      	movmi	r2, #43	; 0x2b
 8014356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801435a:	782a      	ldrb	r2, [r5, #0]
 801435c:	2a2a      	cmp	r2, #42	; 0x2a
 801435e:	d02a      	beq.n	80143b6 <_vfiprintf_r+0x10e>
 8014360:	9a07      	ldr	r2, [sp, #28]
 8014362:	46a8      	mov	r8, r5
 8014364:	2000      	movs	r0, #0
 8014366:	250a      	movs	r5, #10
 8014368:	4641      	mov	r1, r8
 801436a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801436e:	3b30      	subs	r3, #48	; 0x30
 8014370:	2b09      	cmp	r3, #9
 8014372:	d969      	bls.n	8014448 <_vfiprintf_r+0x1a0>
 8014374:	b360      	cbz	r0, 80143d0 <_vfiprintf_r+0x128>
 8014376:	e024      	b.n	80143c2 <_vfiprintf_r+0x11a>
 8014378:	4b50      	ldr	r3, [pc, #320]	; (80144bc <_vfiprintf_r+0x214>)
 801437a:	429c      	cmp	r4, r3
 801437c:	d101      	bne.n	8014382 <_vfiprintf_r+0xda>
 801437e:	68b4      	ldr	r4, [r6, #8]
 8014380:	e7a2      	b.n	80142c8 <_vfiprintf_r+0x20>
 8014382:	4b4f      	ldr	r3, [pc, #316]	; (80144c0 <_vfiprintf_r+0x218>)
 8014384:	429c      	cmp	r4, r3
 8014386:	bf08      	it	eq
 8014388:	68f4      	ldreq	r4, [r6, #12]
 801438a:	e79d      	b.n	80142c8 <_vfiprintf_r+0x20>
 801438c:	4621      	mov	r1, r4
 801438e:	4630      	mov	r0, r6
 8014390:	f7fd fc9c 	bl	8011ccc <__swsetup_r>
 8014394:	2800      	cmp	r0, #0
 8014396:	d09d      	beq.n	80142d4 <_vfiprintf_r+0x2c>
 8014398:	f04f 30ff 	mov.w	r0, #4294967295
 801439c:	b01d      	add	sp, #116	; 0x74
 801439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a2:	46a8      	mov	r8, r5
 80143a4:	e7a2      	b.n	80142ec <_vfiprintf_r+0x44>
 80143a6:	4a44      	ldr	r2, [pc, #272]	; (80144b8 <_vfiprintf_r+0x210>)
 80143a8:	1a80      	subs	r0, r0, r2
 80143aa:	fa0b f000 	lsl.w	r0, fp, r0
 80143ae:	4318      	orrs	r0, r3
 80143b0:	9004      	str	r0, [sp, #16]
 80143b2:	4645      	mov	r5, r8
 80143b4:	e7be      	b.n	8014334 <_vfiprintf_r+0x8c>
 80143b6:	9a03      	ldr	r2, [sp, #12]
 80143b8:	1d11      	adds	r1, r2, #4
 80143ba:	6812      	ldr	r2, [r2, #0]
 80143bc:	9103      	str	r1, [sp, #12]
 80143be:	2a00      	cmp	r2, #0
 80143c0:	db01      	blt.n	80143c6 <_vfiprintf_r+0x11e>
 80143c2:	9207      	str	r2, [sp, #28]
 80143c4:	e004      	b.n	80143d0 <_vfiprintf_r+0x128>
 80143c6:	4252      	negs	r2, r2
 80143c8:	f043 0302 	orr.w	r3, r3, #2
 80143cc:	9207      	str	r2, [sp, #28]
 80143ce:	9304      	str	r3, [sp, #16]
 80143d0:	f898 3000 	ldrb.w	r3, [r8]
 80143d4:	2b2e      	cmp	r3, #46	; 0x2e
 80143d6:	d10e      	bne.n	80143f6 <_vfiprintf_r+0x14e>
 80143d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80143dc:	2b2a      	cmp	r3, #42	; 0x2a
 80143de:	d138      	bne.n	8014452 <_vfiprintf_r+0x1aa>
 80143e0:	9b03      	ldr	r3, [sp, #12]
 80143e2:	1d1a      	adds	r2, r3, #4
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	9203      	str	r2, [sp, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	bfb8      	it	lt
 80143ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80143f0:	f108 0802 	add.w	r8, r8, #2
 80143f4:	9305      	str	r3, [sp, #20]
 80143f6:	4d33      	ldr	r5, [pc, #204]	; (80144c4 <_vfiprintf_r+0x21c>)
 80143f8:	f898 1000 	ldrb.w	r1, [r8]
 80143fc:	2203      	movs	r2, #3
 80143fe:	4628      	mov	r0, r5
 8014400:	f7eb ff26 	bl	8000250 <memchr>
 8014404:	b140      	cbz	r0, 8014418 <_vfiprintf_r+0x170>
 8014406:	2340      	movs	r3, #64	; 0x40
 8014408:	1b40      	subs	r0, r0, r5
 801440a:	fa03 f000 	lsl.w	r0, r3, r0
 801440e:	9b04      	ldr	r3, [sp, #16]
 8014410:	4303      	orrs	r3, r0
 8014412:	f108 0801 	add.w	r8, r8, #1
 8014416:	9304      	str	r3, [sp, #16]
 8014418:	f898 1000 	ldrb.w	r1, [r8]
 801441c:	482a      	ldr	r0, [pc, #168]	; (80144c8 <_vfiprintf_r+0x220>)
 801441e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014422:	2206      	movs	r2, #6
 8014424:	f108 0701 	add.w	r7, r8, #1
 8014428:	f7eb ff12 	bl	8000250 <memchr>
 801442c:	2800      	cmp	r0, #0
 801442e:	d037      	beq.n	80144a0 <_vfiprintf_r+0x1f8>
 8014430:	4b26      	ldr	r3, [pc, #152]	; (80144cc <_vfiprintf_r+0x224>)
 8014432:	bb1b      	cbnz	r3, 801447c <_vfiprintf_r+0x1d4>
 8014434:	9b03      	ldr	r3, [sp, #12]
 8014436:	3307      	adds	r3, #7
 8014438:	f023 0307 	bic.w	r3, r3, #7
 801443c:	3308      	adds	r3, #8
 801443e:	9303      	str	r3, [sp, #12]
 8014440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014442:	444b      	add	r3, r9
 8014444:	9309      	str	r3, [sp, #36]	; 0x24
 8014446:	e750      	b.n	80142ea <_vfiprintf_r+0x42>
 8014448:	fb05 3202 	mla	r2, r5, r2, r3
 801444c:	2001      	movs	r0, #1
 801444e:	4688      	mov	r8, r1
 8014450:	e78a      	b.n	8014368 <_vfiprintf_r+0xc0>
 8014452:	2300      	movs	r3, #0
 8014454:	f108 0801 	add.w	r8, r8, #1
 8014458:	9305      	str	r3, [sp, #20]
 801445a:	4619      	mov	r1, r3
 801445c:	250a      	movs	r5, #10
 801445e:	4640      	mov	r0, r8
 8014460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014464:	3a30      	subs	r2, #48	; 0x30
 8014466:	2a09      	cmp	r2, #9
 8014468:	d903      	bls.n	8014472 <_vfiprintf_r+0x1ca>
 801446a:	2b00      	cmp	r3, #0
 801446c:	d0c3      	beq.n	80143f6 <_vfiprintf_r+0x14e>
 801446e:	9105      	str	r1, [sp, #20]
 8014470:	e7c1      	b.n	80143f6 <_vfiprintf_r+0x14e>
 8014472:	fb05 2101 	mla	r1, r5, r1, r2
 8014476:	2301      	movs	r3, #1
 8014478:	4680      	mov	r8, r0
 801447a:	e7f0      	b.n	801445e <_vfiprintf_r+0x1b6>
 801447c:	ab03      	add	r3, sp, #12
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	4622      	mov	r2, r4
 8014482:	4b13      	ldr	r3, [pc, #76]	; (80144d0 <_vfiprintf_r+0x228>)
 8014484:	a904      	add	r1, sp, #16
 8014486:	4630      	mov	r0, r6
 8014488:	f7fb fe42 	bl	8010110 <_printf_float>
 801448c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014490:	4681      	mov	r9, r0
 8014492:	d1d5      	bne.n	8014440 <_vfiprintf_r+0x198>
 8014494:	89a3      	ldrh	r3, [r4, #12]
 8014496:	065b      	lsls	r3, r3, #25
 8014498:	f53f af7e 	bmi.w	8014398 <_vfiprintf_r+0xf0>
 801449c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801449e:	e77d      	b.n	801439c <_vfiprintf_r+0xf4>
 80144a0:	ab03      	add	r3, sp, #12
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	4622      	mov	r2, r4
 80144a6:	4b0a      	ldr	r3, [pc, #40]	; (80144d0 <_vfiprintf_r+0x228>)
 80144a8:	a904      	add	r1, sp, #16
 80144aa:	4630      	mov	r0, r6
 80144ac:	f7fc f8d2 	bl	8010654 <_printf_i>
 80144b0:	e7ec      	b.n	801448c <_vfiprintf_r+0x1e4>
 80144b2:	bf00      	nop
 80144b4:	08015230 	.word	0x08015230
 80144b8:	0801537c 	.word	0x0801537c
 80144bc:	08015250 	.word	0x08015250
 80144c0:	08015210 	.word	0x08015210
 80144c4:	08015382 	.word	0x08015382
 80144c8:	08015386 	.word	0x08015386
 80144cc:	08010111 	.word	0x08010111
 80144d0:	08014283 	.word	0x08014283

080144d4 <_scanf_chars>:
 80144d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d8:	4615      	mov	r5, r2
 80144da:	688a      	ldr	r2, [r1, #8]
 80144dc:	4680      	mov	r8, r0
 80144de:	460c      	mov	r4, r1
 80144e0:	b932      	cbnz	r2, 80144f0 <_scanf_chars+0x1c>
 80144e2:	698a      	ldr	r2, [r1, #24]
 80144e4:	2a00      	cmp	r2, #0
 80144e6:	bf14      	ite	ne
 80144e8:	f04f 32ff 	movne.w	r2, #4294967295
 80144ec:	2201      	moveq	r2, #1
 80144ee:	608a      	str	r2, [r1, #8]
 80144f0:	6822      	ldr	r2, [r4, #0]
 80144f2:	06d1      	lsls	r1, r2, #27
 80144f4:	bf5f      	itttt	pl
 80144f6:	681a      	ldrpl	r2, [r3, #0]
 80144f8:	1d11      	addpl	r1, r2, #4
 80144fa:	6019      	strpl	r1, [r3, #0]
 80144fc:	6817      	ldrpl	r7, [r2, #0]
 80144fe:	2600      	movs	r6, #0
 8014500:	69a3      	ldr	r3, [r4, #24]
 8014502:	b1db      	cbz	r3, 801453c <_scanf_chars+0x68>
 8014504:	2b01      	cmp	r3, #1
 8014506:	d107      	bne.n	8014518 <_scanf_chars+0x44>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	6962      	ldr	r2, [r4, #20]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	5cd3      	ldrb	r3, [r2, r3]
 8014510:	b9a3      	cbnz	r3, 801453c <_scanf_chars+0x68>
 8014512:	2e00      	cmp	r6, #0
 8014514:	d132      	bne.n	801457c <_scanf_chars+0xa8>
 8014516:	e006      	b.n	8014526 <_scanf_chars+0x52>
 8014518:	2b02      	cmp	r3, #2
 801451a:	d007      	beq.n	801452c <_scanf_chars+0x58>
 801451c:	2e00      	cmp	r6, #0
 801451e:	d12d      	bne.n	801457c <_scanf_chars+0xa8>
 8014520:	69a3      	ldr	r3, [r4, #24]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d12a      	bne.n	801457c <_scanf_chars+0xa8>
 8014526:	2001      	movs	r0, #1
 8014528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801452c:	f7fe fec8 	bl	80132c0 <__locale_ctype_ptr>
 8014530:	682b      	ldr	r3, [r5, #0]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	4418      	add	r0, r3
 8014536:	7843      	ldrb	r3, [r0, #1]
 8014538:	071b      	lsls	r3, r3, #28
 801453a:	d4ef      	bmi.n	801451c <_scanf_chars+0x48>
 801453c:	6823      	ldr	r3, [r4, #0]
 801453e:	06da      	lsls	r2, r3, #27
 8014540:	bf5e      	ittt	pl
 8014542:	682b      	ldrpl	r3, [r5, #0]
 8014544:	781b      	ldrbpl	r3, [r3, #0]
 8014546:	703b      	strbpl	r3, [r7, #0]
 8014548:	682a      	ldr	r2, [r5, #0]
 801454a:	686b      	ldr	r3, [r5, #4]
 801454c:	f102 0201 	add.w	r2, r2, #1
 8014550:	602a      	str	r2, [r5, #0]
 8014552:	68a2      	ldr	r2, [r4, #8]
 8014554:	f103 33ff 	add.w	r3, r3, #4294967295
 8014558:	f102 32ff 	add.w	r2, r2, #4294967295
 801455c:	606b      	str	r3, [r5, #4]
 801455e:	f106 0601 	add.w	r6, r6, #1
 8014562:	bf58      	it	pl
 8014564:	3701      	addpl	r7, #1
 8014566:	60a2      	str	r2, [r4, #8]
 8014568:	b142      	cbz	r2, 801457c <_scanf_chars+0xa8>
 801456a:	2b00      	cmp	r3, #0
 801456c:	dcc8      	bgt.n	8014500 <_scanf_chars+0x2c>
 801456e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014572:	4629      	mov	r1, r5
 8014574:	4640      	mov	r0, r8
 8014576:	4798      	blx	r3
 8014578:	2800      	cmp	r0, #0
 801457a:	d0c1      	beq.n	8014500 <_scanf_chars+0x2c>
 801457c:	6823      	ldr	r3, [r4, #0]
 801457e:	f013 0310 	ands.w	r3, r3, #16
 8014582:	d105      	bne.n	8014590 <_scanf_chars+0xbc>
 8014584:	68e2      	ldr	r2, [r4, #12]
 8014586:	3201      	adds	r2, #1
 8014588:	60e2      	str	r2, [r4, #12]
 801458a:	69a2      	ldr	r2, [r4, #24]
 801458c:	b102      	cbz	r2, 8014590 <_scanf_chars+0xbc>
 801458e:	703b      	strb	r3, [r7, #0]
 8014590:	6923      	ldr	r3, [r4, #16]
 8014592:	441e      	add	r6, r3
 8014594:	6126      	str	r6, [r4, #16]
 8014596:	2000      	movs	r0, #0
 8014598:	e7c6      	b.n	8014528 <_scanf_chars+0x54>
	...

0801459c <_scanf_i>:
 801459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a0:	469a      	mov	sl, r3
 80145a2:	4b74      	ldr	r3, [pc, #464]	; (8014774 <_scanf_i+0x1d8>)
 80145a4:	460c      	mov	r4, r1
 80145a6:	4683      	mov	fp, r0
 80145a8:	4616      	mov	r6, r2
 80145aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80145ae:	b087      	sub	sp, #28
 80145b0:	ab03      	add	r3, sp, #12
 80145b2:	68a7      	ldr	r7, [r4, #8]
 80145b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80145b8:	4b6f      	ldr	r3, [pc, #444]	; (8014778 <_scanf_i+0x1dc>)
 80145ba:	69a1      	ldr	r1, [r4, #24]
 80145bc:	4a6f      	ldr	r2, [pc, #444]	; (801477c <_scanf_i+0x1e0>)
 80145be:	2903      	cmp	r1, #3
 80145c0:	bf08      	it	eq
 80145c2:	461a      	moveq	r2, r3
 80145c4:	1e7b      	subs	r3, r7, #1
 80145c6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80145ca:	bf84      	itt	hi
 80145cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80145d0:	60a3      	strhi	r3, [r4, #8]
 80145d2:	6823      	ldr	r3, [r4, #0]
 80145d4:	9200      	str	r2, [sp, #0]
 80145d6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80145da:	bf88      	it	hi
 80145dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80145e0:	f104 091c 	add.w	r9, r4, #28
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	bf8c      	ite	hi
 80145e8:	197f      	addhi	r7, r7, r5
 80145ea:	2700      	movls	r7, #0
 80145ec:	464b      	mov	r3, r9
 80145ee:	f04f 0800 	mov.w	r8, #0
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	6831      	ldr	r1, [r6, #0]
 80145f6:	ab03      	add	r3, sp, #12
 80145f8:	2202      	movs	r2, #2
 80145fa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80145fe:	7809      	ldrb	r1, [r1, #0]
 8014600:	f7eb fe26 	bl	8000250 <memchr>
 8014604:	9b01      	ldr	r3, [sp, #4]
 8014606:	b330      	cbz	r0, 8014656 <_scanf_i+0xba>
 8014608:	f1b8 0f01 	cmp.w	r8, #1
 801460c:	d15a      	bne.n	80146c4 <_scanf_i+0x128>
 801460e:	6862      	ldr	r2, [r4, #4]
 8014610:	b92a      	cbnz	r2, 801461e <_scanf_i+0x82>
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	2108      	movs	r1, #8
 8014616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801461a:	6061      	str	r1, [r4, #4]
 801461c:	6022      	str	r2, [r4, #0]
 801461e:	6822      	ldr	r2, [r4, #0]
 8014620:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014624:	6022      	str	r2, [r4, #0]
 8014626:	68a2      	ldr	r2, [r4, #8]
 8014628:	1e51      	subs	r1, r2, #1
 801462a:	60a1      	str	r1, [r4, #8]
 801462c:	b19a      	cbz	r2, 8014656 <_scanf_i+0xba>
 801462e:	6832      	ldr	r2, [r6, #0]
 8014630:	1c51      	adds	r1, r2, #1
 8014632:	6031      	str	r1, [r6, #0]
 8014634:	7812      	ldrb	r2, [r2, #0]
 8014636:	701a      	strb	r2, [r3, #0]
 8014638:	1c5d      	adds	r5, r3, #1
 801463a:	6873      	ldr	r3, [r6, #4]
 801463c:	3b01      	subs	r3, #1
 801463e:	2b00      	cmp	r3, #0
 8014640:	6073      	str	r3, [r6, #4]
 8014642:	dc07      	bgt.n	8014654 <_scanf_i+0xb8>
 8014644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014648:	4631      	mov	r1, r6
 801464a:	4658      	mov	r0, fp
 801464c:	4798      	blx	r3
 801464e:	2800      	cmp	r0, #0
 8014650:	f040 8086 	bne.w	8014760 <_scanf_i+0x1c4>
 8014654:	462b      	mov	r3, r5
 8014656:	f108 0801 	add.w	r8, r8, #1
 801465a:	f1b8 0f03 	cmp.w	r8, #3
 801465e:	d1c8      	bne.n	80145f2 <_scanf_i+0x56>
 8014660:	6862      	ldr	r2, [r4, #4]
 8014662:	b90a      	cbnz	r2, 8014668 <_scanf_i+0xcc>
 8014664:	220a      	movs	r2, #10
 8014666:	6062      	str	r2, [r4, #4]
 8014668:	6862      	ldr	r2, [r4, #4]
 801466a:	4945      	ldr	r1, [pc, #276]	; (8014780 <_scanf_i+0x1e4>)
 801466c:	6960      	ldr	r0, [r4, #20]
 801466e:	9301      	str	r3, [sp, #4]
 8014670:	1a89      	subs	r1, r1, r2
 8014672:	f000 f899 	bl	80147a8 <__sccl>
 8014676:	9b01      	ldr	r3, [sp, #4]
 8014678:	f04f 0800 	mov.w	r8, #0
 801467c:	461d      	mov	r5, r3
 801467e:	68a3      	ldr	r3, [r4, #8]
 8014680:	6822      	ldr	r2, [r4, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d03a      	beq.n	80146fc <_scanf_i+0x160>
 8014686:	6831      	ldr	r1, [r6, #0]
 8014688:	6960      	ldr	r0, [r4, #20]
 801468a:	f891 c000 	ldrb.w	ip, [r1]
 801468e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014692:	2800      	cmp	r0, #0
 8014694:	d032      	beq.n	80146fc <_scanf_i+0x160>
 8014696:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801469a:	d121      	bne.n	80146e0 <_scanf_i+0x144>
 801469c:	0510      	lsls	r0, r2, #20
 801469e:	d51f      	bpl.n	80146e0 <_scanf_i+0x144>
 80146a0:	f108 0801 	add.w	r8, r8, #1
 80146a4:	b117      	cbz	r7, 80146ac <_scanf_i+0x110>
 80146a6:	3301      	adds	r3, #1
 80146a8:	3f01      	subs	r7, #1
 80146aa:	60a3      	str	r3, [r4, #8]
 80146ac:	6873      	ldr	r3, [r6, #4]
 80146ae:	3b01      	subs	r3, #1
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	6073      	str	r3, [r6, #4]
 80146b4:	dd1b      	ble.n	80146ee <_scanf_i+0x152>
 80146b6:	6833      	ldr	r3, [r6, #0]
 80146b8:	3301      	adds	r3, #1
 80146ba:	6033      	str	r3, [r6, #0]
 80146bc:	68a3      	ldr	r3, [r4, #8]
 80146be:	3b01      	subs	r3, #1
 80146c0:	60a3      	str	r3, [r4, #8]
 80146c2:	e7dc      	b.n	801467e <_scanf_i+0xe2>
 80146c4:	f1b8 0f02 	cmp.w	r8, #2
 80146c8:	d1ad      	bne.n	8014626 <_scanf_i+0x8a>
 80146ca:	6822      	ldr	r2, [r4, #0]
 80146cc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80146d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80146d4:	d1bf      	bne.n	8014656 <_scanf_i+0xba>
 80146d6:	2110      	movs	r1, #16
 80146d8:	6061      	str	r1, [r4, #4]
 80146da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80146de:	e7a1      	b.n	8014624 <_scanf_i+0x88>
 80146e0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80146e4:	6022      	str	r2, [r4, #0]
 80146e6:	780b      	ldrb	r3, [r1, #0]
 80146e8:	702b      	strb	r3, [r5, #0]
 80146ea:	3501      	adds	r5, #1
 80146ec:	e7de      	b.n	80146ac <_scanf_i+0x110>
 80146ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80146f2:	4631      	mov	r1, r6
 80146f4:	4658      	mov	r0, fp
 80146f6:	4798      	blx	r3
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d0df      	beq.n	80146bc <_scanf_i+0x120>
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	05d9      	lsls	r1, r3, #23
 8014700:	d50c      	bpl.n	801471c <_scanf_i+0x180>
 8014702:	454d      	cmp	r5, r9
 8014704:	d908      	bls.n	8014718 <_scanf_i+0x17c>
 8014706:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801470a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801470e:	4632      	mov	r2, r6
 8014710:	4658      	mov	r0, fp
 8014712:	4798      	blx	r3
 8014714:	1e6f      	subs	r7, r5, #1
 8014716:	463d      	mov	r5, r7
 8014718:	454d      	cmp	r5, r9
 801471a:	d029      	beq.n	8014770 <_scanf_i+0x1d4>
 801471c:	6822      	ldr	r2, [r4, #0]
 801471e:	f012 0210 	ands.w	r2, r2, #16
 8014722:	d113      	bne.n	801474c <_scanf_i+0x1b0>
 8014724:	702a      	strb	r2, [r5, #0]
 8014726:	6863      	ldr	r3, [r4, #4]
 8014728:	9e00      	ldr	r6, [sp, #0]
 801472a:	4649      	mov	r1, r9
 801472c:	4658      	mov	r0, fp
 801472e:	47b0      	blx	r6
 8014730:	f8da 3000 	ldr.w	r3, [sl]
 8014734:	6821      	ldr	r1, [r4, #0]
 8014736:	1d1a      	adds	r2, r3, #4
 8014738:	f8ca 2000 	str.w	r2, [sl]
 801473c:	f011 0f20 	tst.w	r1, #32
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	d010      	beq.n	8014766 <_scanf_i+0x1ca>
 8014744:	6018      	str	r0, [r3, #0]
 8014746:	68e3      	ldr	r3, [r4, #12]
 8014748:	3301      	adds	r3, #1
 801474a:	60e3      	str	r3, [r4, #12]
 801474c:	eba5 0509 	sub.w	r5, r5, r9
 8014750:	44a8      	add	r8, r5
 8014752:	6925      	ldr	r5, [r4, #16]
 8014754:	4445      	add	r5, r8
 8014756:	6125      	str	r5, [r4, #16]
 8014758:	2000      	movs	r0, #0
 801475a:	b007      	add	sp, #28
 801475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014760:	f04f 0800 	mov.w	r8, #0
 8014764:	e7ca      	b.n	80146fc <_scanf_i+0x160>
 8014766:	07ca      	lsls	r2, r1, #31
 8014768:	bf4c      	ite	mi
 801476a:	8018      	strhmi	r0, [r3, #0]
 801476c:	6018      	strpl	r0, [r3, #0]
 801476e:	e7ea      	b.n	8014746 <_scanf_i+0x1aa>
 8014770:	2001      	movs	r0, #1
 8014772:	e7f2      	b.n	801475a <_scanf_i+0x1be>
 8014774:	08014e60 	.word	0x08014e60
 8014778:	08011be1 	.word	0x08011be1
 801477c:	08014925 	.word	0x08014925
 8014780:	0801539d 	.word	0x0801539d

08014784 <_read_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	4c07      	ldr	r4, [pc, #28]	; (80147a4 <_read_r+0x20>)
 8014788:	4605      	mov	r5, r0
 801478a:	4608      	mov	r0, r1
 801478c:	4611      	mov	r1, r2
 801478e:	2200      	movs	r2, #0
 8014790:	6022      	str	r2, [r4, #0]
 8014792:	461a      	mov	r2, r3
 8014794:	f000 f994 	bl	8014ac0 <_read>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d102      	bne.n	80147a2 <_read_r+0x1e>
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	b103      	cbz	r3, 80147a2 <_read_r+0x1e>
 80147a0:	602b      	str	r3, [r5, #0]
 80147a2:	bd38      	pop	{r3, r4, r5, pc}
 80147a4:	20011bbc 	.word	0x20011bbc

080147a8 <__sccl>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	780b      	ldrb	r3, [r1, #0]
 80147ac:	2b5e      	cmp	r3, #94	; 0x5e
 80147ae:	bf13      	iteet	ne
 80147b0:	1c4a      	addne	r2, r1, #1
 80147b2:	1c8a      	addeq	r2, r1, #2
 80147b4:	784b      	ldrbeq	r3, [r1, #1]
 80147b6:	2100      	movne	r1, #0
 80147b8:	bf08      	it	eq
 80147ba:	2101      	moveq	r1, #1
 80147bc:	1e44      	subs	r4, r0, #1
 80147be:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80147c2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80147c6:	42ac      	cmp	r4, r5
 80147c8:	d1fb      	bne.n	80147c2 <__sccl+0x1a>
 80147ca:	b913      	cbnz	r3, 80147d2 <__sccl+0x2a>
 80147cc:	3a01      	subs	r2, #1
 80147ce:	4610      	mov	r0, r2
 80147d0:	bd70      	pop	{r4, r5, r6, pc}
 80147d2:	f081 0401 	eor.w	r4, r1, #1
 80147d6:	54c4      	strb	r4, [r0, r3]
 80147d8:	1c51      	adds	r1, r2, #1
 80147da:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80147de:	2d2d      	cmp	r5, #45	; 0x2d
 80147e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80147e4:	460a      	mov	r2, r1
 80147e6:	d006      	beq.n	80147f6 <__sccl+0x4e>
 80147e8:	2d5d      	cmp	r5, #93	; 0x5d
 80147ea:	d0f0      	beq.n	80147ce <__sccl+0x26>
 80147ec:	b90d      	cbnz	r5, 80147f2 <__sccl+0x4a>
 80147ee:	4632      	mov	r2, r6
 80147f0:	e7ed      	b.n	80147ce <__sccl+0x26>
 80147f2:	462b      	mov	r3, r5
 80147f4:	e7ef      	b.n	80147d6 <__sccl+0x2e>
 80147f6:	780e      	ldrb	r6, [r1, #0]
 80147f8:	2e5d      	cmp	r6, #93	; 0x5d
 80147fa:	d0fa      	beq.n	80147f2 <__sccl+0x4a>
 80147fc:	42b3      	cmp	r3, r6
 80147fe:	dcf8      	bgt.n	80147f2 <__sccl+0x4a>
 8014800:	3301      	adds	r3, #1
 8014802:	429e      	cmp	r6, r3
 8014804:	54c4      	strb	r4, [r0, r3]
 8014806:	dcfb      	bgt.n	8014800 <__sccl+0x58>
 8014808:	3102      	adds	r1, #2
 801480a:	e7e6      	b.n	80147da <__sccl+0x32>

0801480c <strncmp>:
 801480c:	b510      	push	{r4, lr}
 801480e:	b16a      	cbz	r2, 801482c <strncmp+0x20>
 8014810:	3901      	subs	r1, #1
 8014812:	1884      	adds	r4, r0, r2
 8014814:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014818:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801481c:	4293      	cmp	r3, r2
 801481e:	d103      	bne.n	8014828 <strncmp+0x1c>
 8014820:	42a0      	cmp	r0, r4
 8014822:	d001      	beq.n	8014828 <strncmp+0x1c>
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1f5      	bne.n	8014814 <strncmp+0x8>
 8014828:	1a98      	subs	r0, r3, r2
 801482a:	bd10      	pop	{r4, pc}
 801482c:	4610      	mov	r0, r2
 801482e:	e7fc      	b.n	801482a <strncmp+0x1e>

08014830 <_strtoul_l.isra.0>:
 8014830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014834:	4680      	mov	r8, r0
 8014836:	4689      	mov	r9, r1
 8014838:	4692      	mov	sl, r2
 801483a:	461e      	mov	r6, r3
 801483c:	460f      	mov	r7, r1
 801483e:	463d      	mov	r5, r7
 8014840:	9808      	ldr	r0, [sp, #32]
 8014842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014846:	f7fe fd37 	bl	80132b8 <__locale_ctype_ptr_l>
 801484a:	4420      	add	r0, r4
 801484c:	7843      	ldrb	r3, [r0, #1]
 801484e:	f013 0308 	ands.w	r3, r3, #8
 8014852:	d130      	bne.n	80148b6 <_strtoul_l.isra.0+0x86>
 8014854:	2c2d      	cmp	r4, #45	; 0x2d
 8014856:	d130      	bne.n	80148ba <_strtoul_l.isra.0+0x8a>
 8014858:	787c      	ldrb	r4, [r7, #1]
 801485a:	1cbd      	adds	r5, r7, #2
 801485c:	2101      	movs	r1, #1
 801485e:	2e00      	cmp	r6, #0
 8014860:	d05c      	beq.n	801491c <_strtoul_l.isra.0+0xec>
 8014862:	2e10      	cmp	r6, #16
 8014864:	d109      	bne.n	801487a <_strtoul_l.isra.0+0x4a>
 8014866:	2c30      	cmp	r4, #48	; 0x30
 8014868:	d107      	bne.n	801487a <_strtoul_l.isra.0+0x4a>
 801486a:	782b      	ldrb	r3, [r5, #0]
 801486c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014870:	2b58      	cmp	r3, #88	; 0x58
 8014872:	d14e      	bne.n	8014912 <_strtoul_l.isra.0+0xe2>
 8014874:	786c      	ldrb	r4, [r5, #1]
 8014876:	2610      	movs	r6, #16
 8014878:	3502      	adds	r5, #2
 801487a:	f04f 32ff 	mov.w	r2, #4294967295
 801487e:	2300      	movs	r3, #0
 8014880:	fbb2 f2f6 	udiv	r2, r2, r6
 8014884:	fb06 fc02 	mul.w	ip, r6, r2
 8014888:	ea6f 0c0c 	mvn.w	ip, ip
 801488c:	4618      	mov	r0, r3
 801488e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014892:	2f09      	cmp	r7, #9
 8014894:	d817      	bhi.n	80148c6 <_strtoul_l.isra.0+0x96>
 8014896:	463c      	mov	r4, r7
 8014898:	42a6      	cmp	r6, r4
 801489a:	dd23      	ble.n	80148e4 <_strtoul_l.isra.0+0xb4>
 801489c:	2b00      	cmp	r3, #0
 801489e:	db1e      	blt.n	80148de <_strtoul_l.isra.0+0xae>
 80148a0:	4282      	cmp	r2, r0
 80148a2:	d31c      	bcc.n	80148de <_strtoul_l.isra.0+0xae>
 80148a4:	d101      	bne.n	80148aa <_strtoul_l.isra.0+0x7a>
 80148a6:	45a4      	cmp	ip, r4
 80148a8:	db19      	blt.n	80148de <_strtoul_l.isra.0+0xae>
 80148aa:	fb00 4006 	mla	r0, r0, r6, r4
 80148ae:	2301      	movs	r3, #1
 80148b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148b4:	e7eb      	b.n	801488e <_strtoul_l.isra.0+0x5e>
 80148b6:	462f      	mov	r7, r5
 80148b8:	e7c1      	b.n	801483e <_strtoul_l.isra.0+0xe>
 80148ba:	2c2b      	cmp	r4, #43	; 0x2b
 80148bc:	bf04      	itt	eq
 80148be:	1cbd      	addeq	r5, r7, #2
 80148c0:	787c      	ldrbeq	r4, [r7, #1]
 80148c2:	4619      	mov	r1, r3
 80148c4:	e7cb      	b.n	801485e <_strtoul_l.isra.0+0x2e>
 80148c6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80148ca:	2f19      	cmp	r7, #25
 80148cc:	d801      	bhi.n	80148d2 <_strtoul_l.isra.0+0xa2>
 80148ce:	3c37      	subs	r4, #55	; 0x37
 80148d0:	e7e2      	b.n	8014898 <_strtoul_l.isra.0+0x68>
 80148d2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80148d6:	2f19      	cmp	r7, #25
 80148d8:	d804      	bhi.n	80148e4 <_strtoul_l.isra.0+0xb4>
 80148da:	3c57      	subs	r4, #87	; 0x57
 80148dc:	e7dc      	b.n	8014898 <_strtoul_l.isra.0+0x68>
 80148de:	f04f 33ff 	mov.w	r3, #4294967295
 80148e2:	e7e5      	b.n	80148b0 <_strtoul_l.isra.0+0x80>
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	da09      	bge.n	80148fc <_strtoul_l.isra.0+0xcc>
 80148e8:	2322      	movs	r3, #34	; 0x22
 80148ea:	f8c8 3000 	str.w	r3, [r8]
 80148ee:	f04f 30ff 	mov.w	r0, #4294967295
 80148f2:	f1ba 0f00 	cmp.w	sl, #0
 80148f6:	d107      	bne.n	8014908 <_strtoul_l.isra.0+0xd8>
 80148f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148fc:	b101      	cbz	r1, 8014900 <_strtoul_l.isra.0+0xd0>
 80148fe:	4240      	negs	r0, r0
 8014900:	f1ba 0f00 	cmp.w	sl, #0
 8014904:	d0f8      	beq.n	80148f8 <_strtoul_l.isra.0+0xc8>
 8014906:	b10b      	cbz	r3, 801490c <_strtoul_l.isra.0+0xdc>
 8014908:	f105 39ff 	add.w	r9, r5, #4294967295
 801490c:	f8ca 9000 	str.w	r9, [sl]
 8014910:	e7f2      	b.n	80148f8 <_strtoul_l.isra.0+0xc8>
 8014912:	2430      	movs	r4, #48	; 0x30
 8014914:	2e00      	cmp	r6, #0
 8014916:	d1b0      	bne.n	801487a <_strtoul_l.isra.0+0x4a>
 8014918:	2608      	movs	r6, #8
 801491a:	e7ae      	b.n	801487a <_strtoul_l.isra.0+0x4a>
 801491c:	2c30      	cmp	r4, #48	; 0x30
 801491e:	d0a4      	beq.n	801486a <_strtoul_l.isra.0+0x3a>
 8014920:	260a      	movs	r6, #10
 8014922:	e7aa      	b.n	801487a <_strtoul_l.isra.0+0x4a>

08014924 <_strtoul_r>:
 8014924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014926:	4c06      	ldr	r4, [pc, #24]	; (8014940 <_strtoul_r+0x1c>)
 8014928:	4d06      	ldr	r5, [pc, #24]	; (8014944 <_strtoul_r+0x20>)
 801492a:	6824      	ldr	r4, [r4, #0]
 801492c:	6a24      	ldr	r4, [r4, #32]
 801492e:	2c00      	cmp	r4, #0
 8014930:	bf08      	it	eq
 8014932:	462c      	moveq	r4, r5
 8014934:	9400      	str	r4, [sp, #0]
 8014936:	f7ff ff7b 	bl	8014830 <_strtoul_l.isra.0>
 801493a:	b003      	add	sp, #12
 801493c:	bd30      	pop	{r4, r5, pc}
 801493e:	bf00      	nop
 8014940:	200003ac 	.word	0x200003ac
 8014944:	20000410 	.word	0x20000410

08014948 <__submore>:
 8014948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801494c:	460c      	mov	r4, r1
 801494e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014954:	4299      	cmp	r1, r3
 8014956:	d11d      	bne.n	8014994 <__submore+0x4c>
 8014958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801495c:	f7fb faf6 	bl	800ff4c <_malloc_r>
 8014960:	b918      	cbnz	r0, 801496a <__submore+0x22>
 8014962:	f04f 30ff 	mov.w	r0, #4294967295
 8014966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801496a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801496e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014970:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014974:	6360      	str	r0, [r4, #52]	; 0x34
 8014976:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801497a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801497e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014982:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014986:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801498a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801498e:	6020      	str	r0, [r4, #0]
 8014990:	2000      	movs	r0, #0
 8014992:	e7e8      	b.n	8014966 <__submore+0x1e>
 8014994:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014996:	0077      	lsls	r7, r6, #1
 8014998:	463a      	mov	r2, r7
 801499a:	f7ff f939 	bl	8013c10 <_realloc_r>
 801499e:	4605      	mov	r5, r0
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d0de      	beq.n	8014962 <__submore+0x1a>
 80149a4:	eb00 0806 	add.w	r8, r0, r6
 80149a8:	4601      	mov	r1, r0
 80149aa:	4632      	mov	r2, r6
 80149ac:	4640      	mov	r0, r8
 80149ae:	f7fb fa5d 	bl	800fe6c <memcpy>
 80149b2:	f8c4 8000 	str.w	r8, [r4]
 80149b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80149ba:	e7e9      	b.n	8014990 <__submore+0x48>

080149bc <__ascii_wctomb>:
 80149bc:	b149      	cbz	r1, 80149d2 <__ascii_wctomb+0x16>
 80149be:	2aff      	cmp	r2, #255	; 0xff
 80149c0:	bf85      	ittet	hi
 80149c2:	238a      	movhi	r3, #138	; 0x8a
 80149c4:	6003      	strhi	r3, [r0, #0]
 80149c6:	700a      	strbls	r2, [r1, #0]
 80149c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80149cc:	bf98      	it	ls
 80149ce:	2001      	movls	r0, #1
 80149d0:	4770      	bx	lr
 80149d2:	4608      	mov	r0, r1
 80149d4:	4770      	bx	lr
	...

080149d8 <_fstat_r>:
 80149d8:	b538      	push	{r3, r4, r5, lr}
 80149da:	4c07      	ldr	r4, [pc, #28]	; (80149f8 <_fstat_r+0x20>)
 80149dc:	2300      	movs	r3, #0
 80149de:	4605      	mov	r5, r0
 80149e0:	4608      	mov	r0, r1
 80149e2:	4611      	mov	r1, r2
 80149e4:	6023      	str	r3, [r4, #0]
 80149e6:	f000 f843 	bl	8014a70 <_fstat>
 80149ea:	1c43      	adds	r3, r0, #1
 80149ec:	d102      	bne.n	80149f4 <_fstat_r+0x1c>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	b103      	cbz	r3, 80149f4 <_fstat_r+0x1c>
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	bd38      	pop	{r3, r4, r5, pc}
 80149f6:	bf00      	nop
 80149f8:	20011bbc 	.word	0x20011bbc

080149fc <_isatty_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4c06      	ldr	r4, [pc, #24]	; (8014a18 <_isatty_r+0x1c>)
 8014a00:	2300      	movs	r3, #0
 8014a02:	4605      	mov	r5, r0
 8014a04:	4608      	mov	r0, r1
 8014a06:	6023      	str	r3, [r4, #0]
 8014a08:	f000 f842 	bl	8014a90 <_isatty>
 8014a0c:	1c43      	adds	r3, r0, #1
 8014a0e:	d102      	bne.n	8014a16 <_isatty_r+0x1a>
 8014a10:	6823      	ldr	r3, [r4, #0]
 8014a12:	b103      	cbz	r3, 8014a16 <_isatty_r+0x1a>
 8014a14:	602b      	str	r3, [r5, #0]
 8014a16:	bd38      	pop	{r3, r4, r5, pc}
 8014a18:	20011bbc 	.word	0x20011bbc

08014a1c <memmove>:
 8014a1c:	4288      	cmp	r0, r1
 8014a1e:	b510      	push	{r4, lr}
 8014a20:	eb01 0302 	add.w	r3, r1, r2
 8014a24:	d807      	bhi.n	8014a36 <memmove+0x1a>
 8014a26:	1e42      	subs	r2, r0, #1
 8014a28:	4299      	cmp	r1, r3
 8014a2a:	d00a      	beq.n	8014a42 <memmove+0x26>
 8014a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a34:	e7f8      	b.n	8014a28 <memmove+0xc>
 8014a36:	4283      	cmp	r3, r0
 8014a38:	d9f5      	bls.n	8014a26 <memmove+0xa>
 8014a3a:	1881      	adds	r1, r0, r2
 8014a3c:	1ad2      	subs	r2, r2, r3
 8014a3e:	42d3      	cmn	r3, r2
 8014a40:	d100      	bne.n	8014a44 <memmove+0x28>
 8014a42:	bd10      	pop	{r4, pc}
 8014a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a4c:	e7f7      	b.n	8014a3e <memmove+0x22>

08014a4e <_malloc_usable_size_r>:
 8014a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a52:	1f18      	subs	r0, r3, #4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	bfbc      	itt	lt
 8014a58:	580b      	ldrlt	r3, [r1, r0]
 8014a5a:	18c0      	addlt	r0, r0, r3
 8014a5c:	4770      	bx	lr
	...

08014a60 <_close>:
 8014a60:	4b02      	ldr	r3, [pc, #8]	; (8014a6c <_close+0xc>)
 8014a62:	2258      	movs	r2, #88	; 0x58
 8014a64:	601a      	str	r2, [r3, #0]
 8014a66:	f04f 30ff 	mov.w	r0, #4294967295
 8014a6a:	4770      	bx	lr
 8014a6c:	20011bbc 	.word	0x20011bbc

08014a70 <_fstat>:
 8014a70:	4b02      	ldr	r3, [pc, #8]	; (8014a7c <_fstat+0xc>)
 8014a72:	2258      	movs	r2, #88	; 0x58
 8014a74:	601a      	str	r2, [r3, #0]
 8014a76:	f04f 30ff 	mov.w	r0, #4294967295
 8014a7a:	4770      	bx	lr
 8014a7c:	20011bbc 	.word	0x20011bbc

08014a80 <_getpid>:
 8014a80:	4b02      	ldr	r3, [pc, #8]	; (8014a8c <_getpid+0xc>)
 8014a82:	2258      	movs	r2, #88	; 0x58
 8014a84:	601a      	str	r2, [r3, #0]
 8014a86:	f04f 30ff 	mov.w	r0, #4294967295
 8014a8a:	4770      	bx	lr
 8014a8c:	20011bbc 	.word	0x20011bbc

08014a90 <_isatty>:
 8014a90:	4b02      	ldr	r3, [pc, #8]	; (8014a9c <_isatty+0xc>)
 8014a92:	2258      	movs	r2, #88	; 0x58
 8014a94:	601a      	str	r2, [r3, #0]
 8014a96:	2000      	movs	r0, #0
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	20011bbc 	.word	0x20011bbc

08014aa0 <_kill>:
 8014aa0:	4b02      	ldr	r3, [pc, #8]	; (8014aac <_kill+0xc>)
 8014aa2:	2258      	movs	r2, #88	; 0x58
 8014aa4:	601a      	str	r2, [r3, #0]
 8014aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aaa:	4770      	bx	lr
 8014aac:	20011bbc 	.word	0x20011bbc

08014ab0 <_lseek>:
 8014ab0:	4b02      	ldr	r3, [pc, #8]	; (8014abc <_lseek+0xc>)
 8014ab2:	2258      	movs	r2, #88	; 0x58
 8014ab4:	601a      	str	r2, [r3, #0]
 8014ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aba:	4770      	bx	lr
 8014abc:	20011bbc 	.word	0x20011bbc

08014ac0 <_read>:
 8014ac0:	4b02      	ldr	r3, [pc, #8]	; (8014acc <_read+0xc>)
 8014ac2:	2258      	movs	r2, #88	; 0x58
 8014ac4:	601a      	str	r2, [r3, #0]
 8014ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aca:	4770      	bx	lr
 8014acc:	20011bbc 	.word	0x20011bbc

08014ad0 <_sbrk>:
 8014ad0:	4b04      	ldr	r3, [pc, #16]	; (8014ae4 <_sbrk+0x14>)
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	b909      	cbnz	r1, 8014adc <_sbrk+0xc>
 8014ad8:	4903      	ldr	r1, [pc, #12]	; (8014ae8 <_sbrk+0x18>)
 8014ada:	6019      	str	r1, [r3, #0]
 8014adc:	6818      	ldr	r0, [r3, #0]
 8014ade:	4402      	add	r2, r0
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	4770      	bx	lr
 8014ae4:	20002398 	.word	0x20002398
 8014ae8:	20011bc0 	.word	0x20011bc0

08014aec <_exit>:
 8014aec:	e7fe      	b.n	8014aec <_exit>
	...

08014af0 <_init>:
 8014af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af2:	bf00      	nop
 8014af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014af6:	bc08      	pop	{r3}
 8014af8:	469e      	mov	lr, r3
 8014afa:	4770      	bx	lr

08014afc <_fini>:
 8014afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afe:	bf00      	nop
 8014b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b02:	bc08      	pop	{r3}
 8014b04:	469e      	mov	lr, r3
 8014b06:	4770      	bx	lr
